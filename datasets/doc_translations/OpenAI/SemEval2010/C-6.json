{
    "id": "C-6",
    "original_text": "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices. Keeping track of (or managing) such content remains challenging due to the sheer volume of data. Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with. Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system. In this paper we present the design and implementation of the Spectrum content management system, which deals with rich media content effectively in this environment. Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios. A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system. This means that there are no eviction policies. Content that no longer has a retention policy applied to it is simply removed from the system. Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication. This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content. We not only describe the details of the Spectrum architecture but also give typical use cases. Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1. INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer. Initial computing applications include text formatters and program compilers. Content was initially managed by explicit user interaction through the use of files and filesystems. As technology has advanced, both the types of content and the way people wish to use it have greatly changed. New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies. For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive. This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7]. Another example is the combination of encoding and broadband networking technology. This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository. The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data. The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms. The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content. Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic. First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems. Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints. This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level. For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event. At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult. However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible. This scenario is increasingly common in network based content distribution systems and is likely to also become important in home-networking scenarios. It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed. This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences. The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general). The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content. Addressing this distributed content management problem is difficult due to the number of requirements placed on the system. For example: • The content management system must operate on a large number of heterogeneous systems. In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance. The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer. A application program interface (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies. These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded. This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams. It needs to be able to package this content in such a way that it is convenient for users to access. To address these issues we have designed and implemented the Spectrum content management system architecture. Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers. It allows multiple applications to reference content using differing policies. Note that the Spectrum architecture assumes the existence of a content distribution network (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]). The rest of this paper is organized as follows. Section 2 describes the architecture of our content management system. In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use. Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2. THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1. The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences. For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. policy manager: implements and enforces various storage polices that the content manager uses to refer to content. The policy manager exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy. Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized. It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time). A key aspect of the policy manager is that it allows different policies to be simultaneously applied to the same content (or parts of the same content). Furthermore content can only exist in the system so long as it is referenced by at least one existing policy. Policy conflicts are eliminated by having the policy manager deal exclusively with retention policies rather than with a mix of retention and eviction policies. This means that content with no policy associated with it is immediately and automatically removed from the system. This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects. Note that a key difference between the content manager and the policy manager is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content. On the other hand, the policy manager is only concerned with the policy used to manage standalone pieces of content. For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace. However, at the policy manager level, each piece of content has 5 Content Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers. Specifically the storage manager stores content in sub-object chunks. This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR. Note that the storage manager has no knowledge of the policies being used by the content and policy managers. Another unique part of our approach is that the interfaces between the layers can either be local or distributed. Figure 1 shows the four possible cases. The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box. This configuration would be used in selfcontained applications such as PVRs. The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage. In this case although the remote devices are controlled by the central manager they operate much more independently. For example, once they receive instructions from the central manager they typically operate in autonomous fashion. An example of this type of configuration is a content distribution network (CDN) that distributes and stores content based on a schedule determined by some centralized controller. For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment. Allowing a single policy manager to control several storage managers leads to the next combination of functions and the most distributed case. The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single policy manager. The final case shows a content manager combined with a policy manager controlling a remote storage manager. This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the policy manager. We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture. As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity. The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system. Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction. Once a device is mapped into the application through this interface, the system tracks its type and location. Users simply refer to the content through an application-provided label. Stores: Stores are subsets of physical storage devices. Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it. Stores can only be created in physical devices that are mapped into the system. Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content. Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy. Policy groups are created within existing stores in the system. The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage. In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time. For example, a simple time-based policy could evict content from the system at a certain absolute or relative time. A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system). Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system. Content is specified to the system by means of a uniform resource locator (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it. Optionally a time specification can be associated with content. This allows content to be fetched into the system at some future time, or at future time intervals. Again, this is particularly useful for dealing with the storage and management of live content. 2.2 Policy Manager The policy manager layer of the Spectrum architecture has two main types of API functions. First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there. Second, there are sets of functions used to implement each management policy. The first class of functions is used by the content manager layer to access storage. Operations include: create, open, and close: These operations are used by the content manager to control its access to storage. The policy managers create operation is used to establish contact with a store for the first time. Once this is done, the store can be open and closed using the appropriate routines. Note that the parameters used to create a store contain information on how to reach it. For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them. The information only needs to be passed to the policy manager once at create time. For open operations, the policy manager will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the policy manager about what content is currently present for a given URL. For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the policy manager about its current resource usage. There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference. The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store. If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available). Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy. The result of a successful pref establish operation is a policy reference ID string. This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely. The second group of policy manager functions are used to implement all the polices supported by Spectrum. We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices. For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly. Note that the policy manager is only concerned with executing a specific policy. The higher-level reasons for choosing a given policy are handled by the content and application manager. A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters. The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time. It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest. The base policy typically arranges for newclip to be called for a given URL when the pref is established. When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback. This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down. The boot operation is typically used to schedule initial callbacks or start I/O operations. The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store. Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance). For continuous media, at the storage manager level content is stored as a collection of time-based chunks. Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database. The two main storage manager operations are input and output. The input routine is used to store content in a store under a given name. The output routine is used to send data from the store to a client. For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future. Much like the policy manager, the storage manager also provides API functions to create, open, and close stores. It also supports operations to query the resource usages and options supported by the store. Finally, the storage manager also has a discard routine that may be used by the policy manager to inform the store to remove content from the store. 3. IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications. Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles. For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally. Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem. To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure. Each API call takes a pointer to a reqinfo structure as one of its arguments. This structure is used to hold the call state and return status. For async calls, the reqinfo also contains a pointer to a callback function. To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure. For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc. For async calls, a callback function must be provided when the reqinfo is allocated. Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument. For sync calls, the result of the calls is returned immediately in the reqinfo structure. For successful async calls, a call in progress value is returned. Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing. The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality. Furthermore, communication between functions is typically of a master-slave(s) nature. This means that several approaches to distributed operation are possible that would satisfy the architectural requirements. In our implementation we have opted to realize this functionality with a simple modular design. We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred. Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP. We currently are using plain TCP for most of our transport. Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML. We are currently using the eXpat XML library [4] to encode our calls. While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol. An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms. As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices. In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized. To address this issue, we treat each base-level policy as if it was a separate program. Each base-level policy should have a well known name and command line options for parameterization. In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function. This format is easily understood and provides portability since byte order is not an issue in a string. Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment. The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3]. The Spectrum system is applicable to both scenarios as follows. Figure 2 shows the Network Enabled DVR (NED) architecture. In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration. The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs. This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content. Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers. The use of Spectrum in a streaming content distribution architecture (e.g. PRISM [2]) is depicted in Figure 3. In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served. In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals. The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window. To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content. The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream. As each chunk of streaming data arrives, the policy manager executes the policy references newclip function. The newclip function adds a reference to each arriving chunk, and schedules a callback a day later. At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy. Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week. To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved. Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week. After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference. After the additional week has past, the callback function for the second reference will be called. This function will discard the remaining reference to the content and as there are no remaining references the content will be freed. In order to function in scenarios like the ones described above, Spectrums policy manager must manage and maintain all the references to various chunks of media. These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted. Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure 4. There are three classes of data stored, and each class has its own top level directory. The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media. The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime. Note that this directory is used only if the storage manager is local. If the policy manager is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the policy manager. meta: this directory contains general meta information about the storage manager being used and the data it is storing. General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle. The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored. The chunks file contains a list of chunks currently stored and their reference counts. The prefs file contains a list of active policy references that point to this URL. The ranges file contains a list of time ranges of data currently stored. Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories. Each host subdirectory contains the set of policy references created by that host. Information on each policy reference is broken up into three files. For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state. The ref1 file contains information about the policy reference that does not change frequently. This information includes the base-policy and the parameters used to create the reference. The ref1.files file contains the list of references to chunks that pref ref1 owns. Finally, the ref1.state file contains optional policy-specific state information that can change over time. Together, these files and directories are used to track references in our implementation of Spectrum. Note that other implementations are possible. For example, a carrier-grade Spectrum manager might store all its policy and reference information in a high-performance database system. 10 4. RELATED WORK Several authors have addressed the problem of the management of content in distributed networks. Much of the work focuses on the policy management aspect. For example in [5], the problem of serving multimedia content via distributed servers is considered. Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol. The performance of the scheme is benchmarked via simulation. In [1] content is distributed among sub-caches. The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge. The Cache Knowledge base allows sophisticated policies to be employed. Simulation is used to compare the proposed scheme with well-known replacement algorithms. Our work differs in that we are considering more than the policy management aspects of the problem. After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, Policy manager and Storage manager. This has allowed us to easily implement and experiment with a prototype system. Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6]. In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture. Finally, in the commercial CDN environment vendors (e.g. Cisco and Netapp) have developed and implemented content management products and tools. Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5. CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture. Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage. Specifically, the system allows different policies to be applied to the same content without replication. Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content. Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications. There are a number of open issues that will require future work. Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8]. In order for these smaller systems to support Spectrum they will require networking and an external API. When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user. While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects. We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance. Adapting Spectrum to meet legal requirements will likely require more technical work. 6. REFERENCES [1] K. . Cheng and Y. Kambayashi. Multicache-based Content Management for Web Caching. Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe. PRISM Architecture: Supporting Enhanced Streaming Services in a Content Distribution Network. IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe. NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy. A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture. NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman. A multi-agent TV recommender. Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11",
    "original_translation": "Diseño e Implementación de un Sistema de Gestión de Contenido Distribuido por C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ y J.E. La convergencia de avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan y se intercambian rutinariamente entre dispositivos habilitados para redes. El seguimiento (o gestión) de dicho contenido sigue siendo un desafío debido a la gran cantidad de datos. Almacenar medios continuos en vivo (como contenido de televisión o radio) aumenta la complejidad debido a que este contenido no tiene un inicio o fin bien definido y, por lo tanto, resulta engorroso de manejar. El almacenamiento en red permite que el contenido que se ve lógicamente como parte de la misma colección esté distribuido en una red, lo que hace que la gestión de contenido sea casi imposible de manejar sin un sistema de gestión de contenido. En este documento presentamos el diseño e implementación del sistema de gestión de contenido Spectrum, que maneja de manera efectiva el contenido de medios enriquecidos en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto en escenarios independientes como en diferentes entornos de red. Un aspecto único de Spectrum es que requiere que se aplique una (o más) políticas de retención a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido al que ya no se le aplica una política de retención simplemente se elimina del sistema. Diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo, que son bloques de construcción básicos necesarios para manejar el almacenamiento de medios continuos en vivo, al contenido. No solo describimos los detalles de la arquitectura del Spectrum, sino que también proporcionamos casos de uso típicos. Categorías y Descriptores de Asignaturas C.2.4 [Organización de Sistemas Informáticos]: Redes de comunicación informática-sistemas distribuidos; H.3.4 [Sistemas de Información]: Almacenamiento de información y recuperación-sistemas y software Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar contenido es y siempre ha sido una de las funciones principales de una computadora. Las aplicaciones iniciales de computación incluyen formateadores de texto y compiladores de programas. El contenido era gestionado inicialmente mediante la interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que las personas desean utilizarlo han cambiado considerablemente. Nuevos tipos de contenido, como las transmisiones multimedia continuas, se han vuelto comunes debido a la convergencia de avances en tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de video codificado de calidad televisiva en un solo disco duro. Esto ha llevado a la introducción de sistemas de grabación de video digital independientes o personales, como TiVO y ReplayTV. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas, con la red misma actuando como un gran repositorio de datos. La proliferación de contenido de alta calidad habilitada por estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. El enfoque de nuestro trabajo se centra en el almacenamiento de contenido multimedia y, en particular, en el almacenamiento de contenido multimedia continuo en forma preempaquetada o en vivo. La necesidad de gestión de contenido en esta área es evidente cuando se considera lo siguiente: • Los aumentos en la capacidad y las disminuciones en el costo de almacenamiento significan que incluso los sistemas de escritorio modestos de hoy tienen la capacidad de almacenar grandes cantidades de contenido. La gestión manual de dicho contenido (o más correctamente, la falta de gestión manual de dicho contenido) conduce a grandes ineficiencias donde el contenido no deseado y olvidado se acumula y donde el contenido deseado no se puede encontrar. • Aunque es cierto para todos los tipos de contenido, el almacenamiento de contenido de medios continuos es especialmente problemático. El primer contenido de medios continuos sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque sin política para almacenarlo no funcionará para todos, excepto para los sistemas más pequeños. Segundo, el almacenamiento de contenido en vivo como la televisión o la radio es inherentemente problemático ya que estas señales son flujos continuos sin puntos finales. Esto significa que antes de siquiera pensar en gestionar dicho contenido, es necesario abstraerlo en algo que pueda ser manipulado y gestionado. Al tratar con medios continuos almacenados, es necesario gestionar dicho contenido tanto a un nivel detallado como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar solo los momentos destacados de un evento deportivo en particular no debería estar obligado a tener que almacenar el contenido relacionado con todo el evento. Al mismo tiempo, el usuario podría querer considerar el contenido en su totalidad, por ejemplo, eliminar todo el contenido que no he visto en el último mes, excepto aquel contenido que fue marcado explícitamente para archivar. • Como se indicó anteriormente, tratar de mantener un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenido es muy difícil. Sin embargo, cuando los dispositivos de almacenamiento reales están distribuidos en una red, la tarea de llevar un registro del contenido es casi imposible. Este escenario es cada vez más común en sistemas de distribución de contenido basados en redes y es probable que también cobre importancia en escenarios de redes domésticas. Parecería claro entonces que se necesita un sistema de gestión de contenido que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que aproveche la capacidad de almacenamiento en red de los dispositivos. Este sistema debería permitir el almacenamiento eficiente y el acceso al contenido en dispositivos de almacenamiento de red heterogéneos de acuerdo a las preferencias del usuario. El sistema de gestión de contenido debe traducir las preferencias del usuario en políticas de almacenamiento de bajo nivel apropiadas y permitir que esas preferencias se expresen a un nivel de granularidad fino (sin requerirlo en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar sobre (es decir, cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenido distribuido es difícil debido a la cantidad de requisitos impuestos en el sistema. Por ejemplo: • El sistema de gestión de contenidos debe operar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando contenido almacenado en un sistema de archivos local, mientras que en otros el contenido puede estar almacenado en un dispositivo de almacenamiento de red separado. El administrador de contenido puede ser responsable de implementar las políticas que utiliza para hacer referencia al contenido o ese rol puede ser delegado a un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. El sistema de gestión de contenidos debe ser flexible y capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe ser obtenido, cuándo debe ser recuperado, cuánto tiempo debe ser retenido y en qué circunstancias debe ser descartado. Esto significa que el sistema de gestión de contenido debe permitir que múltiples aplicaciones hagan referencia al contenido con un conjunto amplio de políticas y que todo funcione de manera integrada. • El sistema de gestión de contenido debe ser capaz de monitorear las referencias al contenido y utilizar esa información para ubicar el contenido en la ubicación correcta en la red para un acceso eficiente de las aplicaciones. • El sistema de gestión de contenido debe manejar la interacción entre la población implícita y explícita del contenido en el borde de la red. • El sistema de contenido debe ser capaz de gestionar eficientemente grandes conjuntos de contenido, incluidos flujos continuos. Debe ser capaz de empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas, hemos diseñado e implementado la arquitectura del sistema de gestión de contenido Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan ya sea en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite que múltiples aplicaciones hagan referencia al contenido utilizando políticas diferentes. Se debe tener en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenido (CDN) que puede facilitar la distribución eficiente de contenido (por ejemplo, la arquitectura CDN PRISM [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. El trabajo relacionado se describe en la Sección 4, y la Sección 5 contiene nuestra conclusión y sugerencias para trabajos futuros. 2. La arquitectura del sistema de gestión de contenido distribuido Spectrum consta de tres capas de gestión distintas que pueden o no estar distribuidas en múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todo el contenido de una aplicación según las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de video personal (PVR), el administrador de contenido recibe solicitudes de contenido desde una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y gestionar contenido en el dispositivo. El administrador de políticas implementa y hace cumplir varias políticas de almacenamiento que el administrador de contenido utiliza para hacer referencia al contenido. El gestor de políticas exporta una interfaz al gestor de contenido que le permite al gestor de contenido solicitar que un contenido sea tratado de acuerdo con una política específica. Spectrum permite que se realicen políticas arbitrarias al proporcionar un conjunto fijo de plantillas de políticas base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (de lo contrario, Spectrum se puede extender fácilmente para cargar dinámicamente nuevo código de plantilla de política base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido solo puede existir en el sistema siempre y cuando esté referenciado por al menos una política existente. Los conflictos de políticas se eliminan al hacer que el administrador de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin política asociada se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar de forma natural el intercambio de contenido entre diferentes políticas, lo cual es fundamental para el almacenamiento eficiente de objetos grandes. Ten en cuenta que una diferencia clave entre el gestor de contenido y el gestor de políticas es que el gestor de contenido gestiona referencias a múltiples piezas de contenido, es decir, tiene una vista de aplicación del contenido. Por otro lado, el gerente de políticas solo se preocupa por la política utilizada para gestionar piezas de contenido independientes. Por ejemplo, en una aplicación de PVR, la capa del gestor de contenido conocería los diferentes grupos de contenido gestionado, como mantener indefinidamente, mantener por un día y mantener si hay espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada pieza de contenido tiene su propia política (o políticas) aplicada a ella y es independiente de otro contenido. El gestor de almacenamiento: almacena contenido de manera eficiente mientras facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento guarda el contenido en fragmentos de subobjetos. Este enfoque tiene ventajas para la recuperación eficiente de contenido, pero lo más importante es que permite aplicar políticas a nivel de subobjeto, lo cual es críticamente importante al tratar con objetos muy grandes como partes de medios continuos, por ejemplo, piezas seleccionadas de contenido de televisión almacenadas en un PVR. Ten en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas que están siendo utilizadas por los gestores de contenido y de políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la figura muestra el caso más simple (no distribuido) donde todas las capas están implementadas en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como los PVRs. El siguiente caso corresponde al caso en el que hay un gestor de contenido centralizado que controla dispositivos de almacenamiento distribuido, cada uno de los cuales es responsable de implementar almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, operan de manera mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, típicamente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido según un horario determinado por algún controlador centralizado. Por ejemplo, la CDN podría precargar dispositivos periféricos con contenido que se espera que sea muy popular o distribuir archivos grandes a sucursales durante las horas de menor tráfico en un entorno empresarial con limitaciones de ancho de banda. Permitir que un único administrador de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y al caso más distribuido. La necesidad de este tipo de separación puede surgir por razones de escalabilidad o cuando se requiere controlar diferentes dispositivos de almacenamiento especializados con un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas controlando un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo detallado por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de Contenidos La capa del gestor de contenidos es la interfaz principal a través de la cual las aplicaciones específicas utilizan la arquitectura Spectrum. Por lo tanto, la capa del gestor de contenido proporciona una API para que la aplicación pueda manipular todos los aspectos de la arquitectura de Spectrum en diferentes niveles de granularidad. La API del gestor de contenido tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite agregar dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo el control del gestor de contenido y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos; este es el único lugar en la arquitectura donde la aplicación debe ser consciente de esta distinción. Una vez que un dispositivo es mapeado en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Almacenes: Los almacenes son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (por ejemplo, espacio en disco) a la misma. Las tiendas solo se pueden crear en dispositivos físicos que estén mapeados en el sistema. Grupos de Políticas: Los grupos de políticas son el medio por el cual una aplicación especifica, instancia y modifica las políticas que se aplican al contenido del Espectro. El uso típico de este conjunto de funciones es seleccionar una de un pequeño conjunto de políticas base y parametrizar esta instancia específica de la política. Los grupos de políticas se crean dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento y que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que incluyen una especificación de tiempo sofisticada permiten un almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría expulsar el contenido del sistema en un momento absoluto o relativo específico. Una política basada en el tiempo un poco más compleja habilitada por la arquitectura Spectrum podría permitir que el contenido se almacene en una ventana de tiempo de un número de horas (por ejemplo, las N horas más recientes se mantienen en el sistema). Las políticas basadas en el tiempo son de particular utilidad al tratar con contenido continuo como una transmisión en vivo. 6 Contenido: En el nivel más fino de granularidad, el contenido puede ser añadido o eliminado del sistema. El contenido se especifica al sistema mediante un localizador uniforme de recursos (URL) que indica de manera concisa la ubicación del contenido, así como el protocolo a utilizar para recuperarlo. Opcionalmente se puede asociar una especificación de tiempo con el contenido. Esto permite que el contenido sea recuperado en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Nuevamente, esto es particularmente útil para tratar con el almacenamiento y gestión de contenido en vivo. 2.2 Gestor de Políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones de API. Primero, hay funciones que operan en áreas de almacenamiento gestionadas y referencias basadas en políticas (prefs) al contenido almacenado allí. Segundo, hay conjuntos de funciones utilizadas para implementar cada política de gestión. La primera clase de funciones es utilizada por la capa de gestión de contenido para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar. Estas operaciones son utilizadas por el gestor de contenido para controlar su acceso al almacenamiento. El proceso de creación de políticas de gestión de operaciones se utiliza para establecer contacto con una tienda por primera vez. Una vez que esto se haya hecho, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Ten en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información solo necesita ser transmitida al administrador de políticas una vez al momento de la creación. Para operaciones abiertas, el administrador de políticas utilizará la información en caché para contactar a la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el administrador de contenido consulte al administrador de políticas sobre qué contenido está actualmente presente para una URL dada. Para medios continuos, se devolverán rangos de tiempo de medios presentes. recurso: Las rutinas de recurso se utilizan para consultar al administrador de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su totalidad y otra que se aplica a una referencia de política en particular. La API de recursos es extensible, actualmente admitimos consultas sobre el uso de disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer se utiliza por el gestor de contenido para hacer referencia al contenido en la tienda. Si el contenido no está presente, esta llamada resultará en la obtención del contenido (o en la programación para obtenerlo si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL donde se almacenará, la URL desde la cual se obtendrán los datos si no están presentes, la política para almacenar el contenido y los argumentos utilizados para parametrizar la política. El resultado de una operación de establecimiento de prefijo exitosa es una cadena de identificación de referencia de política. Este identificador se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones del gestor de políticas se utilizan para implementar todas las políticas respaldadas por Spectrum. Visualizamos un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitiva puede ser parametrizada para funcionar diariamente, semanalmente o mensualmente. Ten en cuenta que el gestor de políticas solo se preocupa por ejecutar una política específica. Las razones de nivel superior para elegir una política determinada son manejadas por el gerente de contenido y aplicación. Una política base se implementa utilizando seis funciones: establecer: se llama cuando se establece una preferencia con las URL requeridas y los parámetros de la política base. El rutina establecida hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar acción (por ejemplo, iniciar una descarga) y programa una devolución de llamada para ese momento. También puede registrarse para recibir devoluciones de llamada si se recibe nuevo contenido para una URL específica. actualizar: se llama para cambiar los parámetros de una preferencia, o para descartar la referencia de la política. newclip: se llama cuando se recibe un fragmento de nuevo contenido para una URL de interés. La política base normalmente establece que se llame a newclip para una URL dada cuando se establece la preferencia. Cuando se llama a newclip, la política base verifica sus parámetros para determinar si desea agregar una referencia al clip recién recibido. callback: llamado cuando la preferencia programa una devolución de llamada basada en temporizador. Este es un mecanismo útil de activación para preferencias que necesitan estar inactivas durante un largo período de tiempo (por ejemplo, entre programas). arranque/apagado: se llama cuando el sistema de gestión de contenidos se está iniciando o apagando. La operación de arranque se utiliza típicamente para programar devoluciones de llamada iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para cerrar de forma ordenada los flujos de entrada/salida y guardar el estado. 2.3 Gestor de almacenamiento El rol del gestor de almacenamiento de Spectrum es controlar todas las operaciones de entrada/salida asociadas con una tienda dada. El gestor de almacenamiento de Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo, un dispositivo de almacenamiento). Para los medios continuos, a nivel del gestor de almacenamiento, el contenido se almacena como una colección de fragmentos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un fragmento podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión en continuo, tanto las rutinas de entrada como de salida toman rangos de tiempo que programan cuándo debe ocurrir la operación de E/S, y ambas rutinas devuelven un identificador de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el administrador de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar almacenes. También admite operaciones para consultar los usos de recursos y opciones admitidas por la tienda. Finalmente, el administrador de almacenamiento también tiene un procedimiento de descarte que puede ser utilizado por el administrador de políticas para informar a la tienda que elimine contenido de la tienda. 3. IMPLEMENTACIÓN Y CASOS DE USO En esta sección describimos nuestra implementación de Spectrum y cómo puede ser utilizada. 3.1 Implementación Hemos implementado las tres capas de Spectrum en C como parte de una biblioteca que puede ser enlazada con aplicaciones basadas en Spectrum. Cada capa lleva un registro de su estado a través de un conjunto de archivos de datos locales que persisten a través de reinicios, lo que permite a Spectrum manejar los ciclos de energía de manera fluida. Para las capas que residen en sistemas remotos (por ejemplo, una tienda remota), solo se almacena localmente la meta-información necesaria para contactar al administrador de políticas del gestor de contenido remoto, el gestor de almacenamiento, el recuperador de almacenamiento, los listados de programas, la interfaz de usuario gráfica, el DVR habilitado para red, la información del programa, la aplicación de DVR de contenido en la red habilitada para DVR. Figura 2: Espectro en un nodo de DVR habilitado para red. Nuestra aplicación de prueba utiliza un administrador de políticas y almacenamiento local para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficientemente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas de API de Spectrums admiten tanto modos síncronos como asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada a la API toma un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de la llamada y el estado de retorno. Para las llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamada. Para utilizar una función de la API de Spectrum, el llamante primero elige entre el modo sincrónico o asincrónico y asigna una estructura reqinfo. Para llamadas de sincronización, la reqinfo puede ser asignada en la pila, de lo contrario se asigna con malloc. Para llamadas asíncronas, se debe proporcionar una función de devolución de llamada al asignar el reqinfo. A continuación, el llamante invoca la función API de Spectrum deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas asincrónicas exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada asíncrona se completa o se produce un tiempo de espera, se llama a la función de devolución de llamada asíncrona con la información adecuada necesaria para completar el procesamiento. El diseño modular/capas de la arquitectura Spectrum simplifica el objetivo de distribución de funcionalidad. Además, la comunicación entre funciones suele ser de naturaleza maestro-esclavo(s). Esto significa que son posibles varios enfoques para la operación distribuida que cumplirían con los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un diseño modular simple. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y elegir el método de codificación que se debe utilizar con los datos a transferir. Los protocolos de transporte pueden variar desde protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP simple para la mayoría de nuestro transporte. Las llamadas a funciones a través de las diferentes APIs de Spectrum pueden ser codificadas utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos utilizando la biblioteca XML eXpat [4] para codificar nuestras llamadas. Mientras actualmente estamos transfiriendo nuestros mensajes codificados en XML utilizando una conexión TCP simple, en un entorno del mundo real esto puede ser fácilmente reemplazado con una implementación basada en capa de sockets seguros (SSL) para mejorar la seguridad al agregar SSL como protocolo de transporte. Un aspecto importante de Spectrum es que puede gestionar contenido basado en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la Sección 2.2, imagina un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben comprender las políticas de nivel base y cómo pueden ser parametrizadas. Para abordar este problema, tratamos cada política de nivel base como si fuera un programa separado. Cada política de nivel base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada utilizando una función similar a getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de los bytes no es un problema en una cadena. Dado que esta parte de Spectrum no se encuentra en la ruta crítica de los datos, este tipo de formato no representa un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos de Spectrum En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos de Spectrum en nuestro entorno. El enfoque de nuestro trabajo anterior ha sido la distribución de contenido para contenido de medios en streaming [2] y la grabación de video digital habilitada para redes [3]. El sistema Spectrum es aplicable a ambos escenarios de la siguiente manera. La Figura 2 muestra la arquitectura del DVR habilitado para red (NED). En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación de DVR obtiene listados de programas de alguna fuente de red, maneja la presentación al usuario a través de una interfaz gráfica de usuario (GUI) e interactúa con el sistema Spectrum a través de las APIs de la capa de gestión de contenido. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento que se aplicarán a dicho contenido. La obtención del contenido (a través de la red o localmente) y su posterior almacenamiento en el sistema local son manejados por los gestores de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenido en streaming (por ejemplo, PRISM [2]) está representado en la Figura 3. En este entorno, el contenido de medios en streaming (tanto en vivo, enlatado en vivo y a la carta) se distribuye a los portales periféricos desde donde se sirven los puntos finales de streaming. En nuestro entorno, la distribución y almacenamiento de contenido se realiza desde una estación centralizada de gestión de contenido que controla varios de los portales periféricos. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenido sin necesidad de una comunicación continua entre el gestor de contenido y los dispositivos periféricos, es decir, una vez que se han dado instrucciones a los dispositivos periféricos, pueden operar de forma independiente hasta que se deban realizar cambios. Ejemplo operativo de Spectrum 3.3 Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación de PVR basada en Spectrum programada para almacenar un día de contenido de transmisión en una ventana móvil. Para configurar la ventana deslizante, la aplicación utilizaría la API del gestor de contenido para crear un grupo de políticas y una referencia de política al contenido deseado. El establecimiento de la política de ventana de un día en movimiento haría que el gerente de políticas le pida al gerente de almacenamiento que comience a recibir el flujo. A medida que llega cada fragmento de datos en streaming, el gestor de políticas ejecuta la función newclip de las referencias de política. La función newclip agrega una referencia a cada fragmento que llega y programa una devolución de llamada para un día después. En ese momento, la política eliminará su referencia actual de un día al contenido y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considera el caso en el que el usuario decide guardar parte del contenido (por ejemplo, un programa específico) en la ventana deslizante durante una semana adicional. Para hacer esto, la aplicación solicita que el gestor de contenido agregue una nueva referencia de política adicional a la parte del contenido que se va a preservar. Por lo tanto, el contenido preservado tiene dos referencias: una del marco de tiempo móvil y otra de la solicitud de preservar el contenido por una semana adicional. Después de un día, la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. datos base url1 url2 (archivos multimedia...) (archivos multimedia...) almacenamiento de metadatos (información general...) url1 fragmentos preferencias rangos fragmentos multimedia, etc. url2 host poli ref1 ref1.archivos ref1.estado Figura 4: Diseño de datos de la tienda de políticas de Spectrum preservado por la segunda referencia. Después de que haya transcurrido la semana adicional, se llamará a la función de devolución de llamada para la segunda referencia. Esta función descartará la referencia restante al contenido y, como no hay referencias restantes, el contenido será liberado. Para poder funcionar en escenarios como los descritos anteriormente, el gestor de políticas de Spectrums debe administrar y mantener todas las referencias a diferentes fragmentos de medios. Estas referencias son persistentes y, por lo tanto, deben poder sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestro implementación del gestor de políticas de Spectrum logra esto utilizando la estructura de archivos y directorios mostrada en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el gestor de almacenamiento para almacenar los fragmentos de medios de cada URL activa. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Ten en cuenta que este directorio se utiliza solo si el gestor de almacenamiento es local. Si el administrador de políticas está utilizando un administrador de almacenamiento externo (por ejemplo, un dispositivo de almacenamiento), entonces los archivos multimedia se almacenan de forma remota y solo son referenciados de forma remota por el administrador de políticas. meta: este directorio contiene información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) y la información sobre los tipos de fragmentos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los fragmentos de datos almacenados. El archivo de fragmentos contiene una lista de fragmentos almacenados actualmente y sus recuentos de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de intervalos de tiempo de los datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato del medio que se está almacenando bajo la URL actual. poly: este directorio contiene un conjunto de subdirectorios de host. Cada subdirectorio de host contiene el conjunto de referencias de políticas creadas por ese host. La información de cada referencia de política está dividida en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files y ref1.state. El archivo ref1 contiene información sobre la referencia de la política que no cambia con frecuencia. Esta información incluye la política base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a fragmentos que posee el prefijo ref1. Finalmente, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Ten en cuenta que otras implementaciones son posibles. Por ejemplo, un administrador de espectro de calidad de operador podría almacenar toda su información de políticas y referencias en un sistema de base de datos de alto rendimiento. 10 4. TRABAJO RELACIONADO Varios autores han abordado el problema de la gestión de contenido en redes distribuidas. Gran parte del trabajo se centra en el aspecto de gestión de políticas. Por ejemplo, en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda del usuario utilizando un Protocolo de Diseminación de Demanda. El rendimiento del esquema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Enrutador Central, una Base de Conocimiento en Caché, Subcachés y un juez de expulsión de Subcaché. La base de conocimientos de caché permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenido en el entorno de red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenido, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de televisión que se utilizan en los PVR para seleccionar automáticamente contenido para los usuarios, por ejemplo [6]. En el caso de que Spectrum se utilice en una configuración de PVR, este tipo de sistema realizaría una función de nivel superior y claramente se beneficiaría de las funcionalidades de la arquitectura de Spectrum. Finalmente, en el entorno comercial de CDN, los proveedores (por ejemplo, Cisco y Netapp han desarrollado e implementado productos y herramientas de gestión de contenido. A diferencia de la arquitectura Spectrum que permite que los dispositivos periféricos operen de manera autónoma en gran medida, las soluciones de los proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. CONCLUSIÓN Y TRABAJOS FUTUROS En este artículo presentamos el diseño e implementación de la arquitectura de gestión de contenido Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que son conscientes del tiempo, lo que permite gestionar de manera efectiva el almacenamiento de contenido multimedia continuo. Finalmente, el diseño modular de la arquitectura Spectrum permite tanto realizaciones independientes como distribuidas para que el sistema pueda ser desplegado en una variedad de aplicaciones. Existen varios problemas abiertos que requerirán trabajo futuro. Algunos de estos problemas incluyen: • Visualizamos que Spectrum pueda gestionar contenido en sistemas que van desde grandes CDNs hasta dispositivos más pequeños como TiVO [8]. Para que estos sistemas más pequeños puedan soportar Spectrum, necesitarán de una red y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo se puede integrar en la arquitectura de Spectrum. • Spectrum nombra el contenido por URL, pero intencionalmente no hemos definido el formato de las URL de Spectrum, cómo se relacionan con el nombre real del contenido, o cómo los nombres y las URL deben presentarse al usuario. Si bien anteriormente abordamos estos temas en otro lugar [2], creemos que hay más trabajo por hacer y que se deben redactar estándares basados en consenso sobre la nomenclatura. En este documento nos hemos centrado en la gestión de contenido para objetos de medios continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero aún no hemos resuelto los detalles necesarios para admitir esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que el contenido multimedia se comparta fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. REFERENCIAS [1] K. . Cheng y Y. Kambayashi. Gestión de contenido basada en multicache para el almacenamiento en caché web. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información en la Web, junio de 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. Arquitectura PRISM: Apoyo a Servicios de Streaming Mejorados en una Red de Distribución de Contenidos. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de video digital habilitado para red. 11º Taller de la IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji y P. Shenoy. Una arquitectura de clúster de servidores de medios en streaming adaptativa a la demanda y consciente de la localidad (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Un recomendador de televisión multiagente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11",
    "original_sentences": [
        "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E.",
        "van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices.",
        "Keeping track of (or managing) such content remains challenging due to the sheer volume of data.",
        "Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with.",
        "Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system.",
        "In this paper we present the design and implementation of the Spectrum content management system, which deals with rich media content effectively in this environment.",
        "Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios.",
        "A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system.",
        "This means that there are no eviction policies.",
        "Content that no longer has a retention policy applied to it is simply removed from the system.",
        "Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication.",
        "This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content.",
        "We not only describe the details of the Spectrum architecture but also give typical use cases.",
        "Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1.",
        "INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer.",
        "Initial computing applications include text formatters and program compilers.",
        "Content was initially managed by explicit user interaction through the use of files and filesystems.",
        "As technology has advanced, both the types of content and the way people wish to use it have greatly changed.",
        "New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies.",
        "For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive.",
        "This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7].",
        "Another example is the combination of encoding and broadband networking technology.",
        "This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository.",
        "The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data.",
        "The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms.",
        "The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content.",
        "Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic.",
        "First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems.",
        "Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints.",
        "This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level.",
        "For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event.",
        "At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult.",
        "However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible.",
        "This scenario is increasingly common in network based content distribution systems and is likely to also become important in home-networking scenarios.",
        "It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed.",
        "This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences.",
        "The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general).",
        "The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content.",
        "Addressing this distributed content management problem is difficult due to the number of requirements placed on the system.",
        "For example: • The content management system must operate on a large number of heterogeneous systems.",
        "In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance.",
        "The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer.",
        "A application program interface (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies.",
        "These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded.",
        "This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams.",
        "It needs to be able to package this content in such a way that it is convenient for users to access.",
        "To address these issues we have designed and implemented the Spectrum content management system architecture.",
        "Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers.",
        "It allows multiple applications to reference content using differing policies.",
        "Note that the Spectrum architecture assumes the existence of a content distribution network (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]).",
        "The rest of this paper is organized as follows.",
        "Section 2 describes the architecture of our content management system.",
        "In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use.",
        "Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2.",
        "THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1.",
        "The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences.",
        "For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. policy manager: implements and enforces various storage polices that the content manager uses to refer to content.",
        "The policy manager exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy.",
        "Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized.",
        "It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time).",
        "A key aspect of the policy manager is that it allows different policies to be simultaneously applied to the same content (or parts of the same content).",
        "Furthermore content can only exist in the system so long as it is referenced by at least one existing policy.",
        "Policy conflicts are eliminated by having the policy manager deal exclusively with retention policies rather than with a mix of retention and eviction policies.",
        "This means that content with no policy associated with it is immediately and automatically removed from the system.",
        "This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects.",
        "Note that a key difference between the content manager and the policy manager is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content.",
        "On the other hand, the policy manager is only concerned with the policy used to manage standalone pieces of content.",
        "For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace.",
        "However, at the policy manager level, each piece of content has 5 Content Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers.",
        "Specifically the storage manager stores content in sub-object chunks.",
        "This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR.",
        "Note that the storage manager has no knowledge of the policies being used by the content and policy managers.",
        "Another unique part of our approach is that the interfaces between the layers can either be local or distributed.",
        "Figure 1 shows the four possible cases.",
        "The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box.",
        "This configuration would be used in selfcontained applications such as PVRs.",
        "The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage.",
        "In this case although the remote devices are controlled by the central manager they operate much more independently.",
        "For example, once they receive instructions from the central manager they typically operate in autonomous fashion.",
        "An example of this type of configuration is a content distribution network (CDN) that distributes and stores content based on a schedule determined by some centralized controller.",
        "For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment.",
        "Allowing a single policy manager to control several storage managers leads to the next combination of functions and the most distributed case.",
        "The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single policy manager.",
        "The final case shows a content manager combined with a policy manager controlling a remote storage manager.",
        "This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the policy manager.",
        "We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture.",
        "As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity.",
        "The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system.",
        "Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction.",
        "Once a device is mapped into the application through this interface, the system tracks its type and location.",
        "Users simply refer to the content through an application-provided label.",
        "Stores: Stores are subsets of physical storage devices.",
        "Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it.",
        "Stores can only be created in physical devices that are mapped into the system.",
        "Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content.",
        "Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy.",
        "Policy groups are created within existing stores in the system.",
        "The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage.",
        "In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time.",
        "For example, a simple time-based policy could evict content from the system at a certain absolute or relative time.",
        "A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system).",
        "Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system.",
        "Content is specified to the system by means of a uniform resource locator (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it.",
        "Optionally a time specification can be associated with content.",
        "This allows content to be fetched into the system at some future time, or at future time intervals.",
        "Again, this is particularly useful for dealing with the storage and management of live content. 2.2 Policy Manager The policy manager layer of the Spectrum architecture has two main types of API functions.",
        "First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there.",
        "Second, there are sets of functions used to implement each management policy.",
        "The first class of functions is used by the content manager layer to access storage.",
        "Operations include: create, open, and close: These operations are used by the content manager to control its access to storage.",
        "The policy managers create operation is used to establish contact with a store for the first time.",
        "Once this is done, the store can be open and closed using the appropriate routines.",
        "Note that the parameters used to create a store contain information on how to reach it.",
        "For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them.",
        "The information only needs to be passed to the policy manager once at create time.",
        "For open operations, the policy manager will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the policy manager about what content is currently present for a given URL.",
        "For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the policy manager about its current resource usage.",
        "There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference.",
        "The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store.",
        "If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available).",
        "Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy.",
        "The result of a successful pref establish operation is a policy reference ID string.",
        "This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely.",
        "The second group of policy manager functions are used to implement all the polices supported by Spectrum.",
        "We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
        "For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly.",
        "Note that the policy manager is only concerned with executing a specific policy.",
        "The higher-level reasons for choosing a given policy are handled by the content and application manager.",
        "A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters.",
        "The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time.",
        "It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest.",
        "The base policy typically arranges for newclip to be called for a given URL when the pref is established.",
        "When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback.",
        "This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down.",
        "The boot operation is typically used to schedule initial callbacks or start I/O operations.",
        "The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store.",
        "Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance).",
        "For continuous media, at the storage manager level content is stored as a collection of time-based chunks.",
        "Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database.",
        "The two main storage manager operations are input and output.",
        "The input routine is used to store content in a store under a given name.",
        "The output routine is used to send data from the store to a client.",
        "For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future.",
        "Much like the policy manager, the storage manager also provides API functions to create, open, and close stores.",
        "It also supports operations to query the resource usages and options supported by the store.",
        "Finally, the storage manager also has a discard routine that may be used by the policy manager to inform the store to remove content from the store. 3.",
        "IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications.",
        "Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles.",
        "For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally.",
        "Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem.",
        "To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure.",
        "Each API call takes a pointer to a reqinfo structure as one of its arguments.",
        "This structure is used to hold the call state and return status.",
        "For async calls, the reqinfo also contains a pointer to a callback function.",
        "To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure.",
        "For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc.",
        "For async calls, a callback function must be provided when the reqinfo is allocated.",
        "Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument.",
        "For sync calls, the result of the calls is returned immediately in the reqinfo structure.",
        "For successful async calls, a call in progress value is returned.",
        "Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing.",
        "The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality.",
        "Furthermore, communication between functions is typically of a master-slave(s) nature.",
        "This means that several approaches to distributed operation are possible that would satisfy the architectural requirements.",
        "In our implementation we have opted to realize this functionality with a simple modular design.",
        "We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred.",
        "Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP.",
        "We currently are using plain TCP for most of our transport.",
        "Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML.",
        "We are currently using the eXpat XML library [4] to encode our calls.",
        "While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol.",
        "An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms.",
        "As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
        "In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized.",
        "To address this issue, we treat each base-level policy as if it was a separate program.",
        "Each base-level policy should have a well known name and command line options for parameterization.",
        "In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function.",
        "This format is easily understood and provides portability since byte order is not an issue in a string.",
        "Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment.",
        "The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3].",
        "The Spectrum system is applicable to both scenarios as follows.",
        "Figure 2 shows the Network Enabled DVR (NED) architecture.",
        "In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration.",
        "The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs.",
        "This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content.",
        "Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers.",
        "The use of Spectrum in a streaming content distribution architecture (e.g.",
        "PRISM [2]) is depicted in Figure 3.",
        "In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served.",
        "In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals.",
        "The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window.",
        "To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content.",
        "The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream.",
        "As each chunk of streaming data arrives, the policy manager executes the policy references newclip function.",
        "The newclip function adds a reference to each arriving chunk, and schedules a callback a day later.",
        "At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy.",
        "Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week.",
        "To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved.",
        "Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week.",
        "After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference.",
        "After the additional week has past, the callback function for the second reference will be called.",
        "This function will discard the remaining reference to the content and as there are no remaining references the content will be freed.",
        "In order to function in scenarios like the ones described above, Spectrums policy manager must manage and maintain all the references to various chunks of media.",
        "These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted.",
        "Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure 4.",
        "There are three classes of data stored, and each class has its own top level directory.",
        "The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media.",
        "The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime.",
        "Note that this directory is used only if the storage manager is local.",
        "If the policy manager is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the policy manager. meta: this directory contains general meta information about the storage manager being used and the data it is storing.",
        "General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle.",
        "The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored.",
        "The chunks file contains a list of chunks currently stored and their reference counts.",
        "The prefs file contains a list of active policy references that point to this URL.",
        "The ranges file contains a list of time ranges of data currently stored.",
        "Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories.",
        "Each host subdirectory contains the set of policy references created by that host.",
        "Information on each policy reference is broken up into three files.",
        "For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state.",
        "The ref1 file contains information about the policy reference that does not change frequently.",
        "This information includes the base-policy and the parameters used to create the reference.",
        "The ref1.files file contains the list of references to chunks that pref ref1 owns.",
        "Finally, the ref1.state file contains optional policy-specific state information that can change over time.",
        "Together, these files and directories are used to track references in our implementation of Spectrum.",
        "Note that other implementations are possible.",
        "For example, a carrier-grade Spectrum manager might store all its policy and reference information in a high-performance database system. 10 4.",
        "RELATED WORK Several authors have addressed the problem of the management of content in distributed networks.",
        "Much of the work focuses on the policy management aspect.",
        "For example in [5], the problem of serving multimedia content via distributed servers is considered.",
        "Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol.",
        "The performance of the scheme is benchmarked via simulation.",
        "In [1] content is distributed among sub-caches.",
        "The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge.",
        "The Cache Knowledge base allows sophisticated policies to be employed.",
        "Simulation is used to compare the proposed scheme with well-known replacement algorithms.",
        "Our work differs in that we are considering more than the policy management aspects of the problem.",
        "After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, Policy manager and Storage manager.",
        "This has allowed us to easily implement and experiment with a prototype system.",
        "Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6].",
        "In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture.",
        "Finally, in the commercial CDN environment vendors (e.g.",
        "Cisco and Netapp) have developed and implemented content management products and tools.",
        "Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5.",
        "CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture.",
        "Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage.",
        "Specifically, the system allows different policies to be applied to the same content without replication.",
        "Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content.",
        "Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications.",
        "There are a number of open issues that will require future work.",
        "Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8].",
        "In order for these smaller systems to support Spectrum they will require networking and an external API.",
        "When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user.",
        "While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects.",
        "We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance.",
        "Adapting Spectrum to meet legal requirements will likely require more technical work. 6.",
        "REFERENCES [1] K. .",
        "Cheng and Y. Kambayashi.",
        "Multicache-based Content Management for Web Caching.",
        "Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
        "PRISM Architecture: Supporting Enhanced Streaming Services in a Content Distribution Network.",
        "IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
        "NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy.",
        "A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture.",
        "NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman.",
        "A multi-agent TV recommender.",
        "Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11"
    ],
    "translated_text_sentences": [
        "Diseño e Implementación de un Sistema de Gestión de Contenido Distribuido por C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ y J.E.",
        "La convergencia de avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan y se intercambian rutinariamente entre dispositivos habilitados para redes.",
        "El seguimiento (o gestión) de dicho contenido sigue siendo un desafío debido a la gran cantidad de datos.",
        "Almacenar medios continuos en vivo (como contenido de televisión o radio) aumenta la complejidad debido a que este contenido no tiene un inicio o fin bien definido y, por lo tanto, resulta engorroso de manejar.",
        "El almacenamiento en red permite que el contenido que se ve lógicamente como parte de la misma colección esté distribuido en una red, lo que hace que la gestión de contenido sea casi imposible de manejar sin un sistema de gestión de contenido.",
        "En este documento presentamos el diseño e implementación del sistema de gestión de contenido Spectrum, que maneja de manera efectiva el contenido de medios enriquecidos en este entorno.",
        "Spectrum tiene una arquitectura modular que permite su aplicación tanto en escenarios independientes como en diferentes entornos de red.",
        "Un aspecto único de Spectrum es que requiere que se aplique una (o más) políticas de retención a cada pieza de contenido que se almacena en el sistema.",
        "Esto significa que no hay políticas de desalojo.",
        "El contenido al que ya no se le aplica una política de retención simplemente se elimina del sistema.",
        "Diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así el intercambio sin duplicación.",
        "Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo, que son bloques de construcción básicos necesarios para manejar el almacenamiento de medios continuos en vivo, al contenido.",
        "No solo describimos los detalles de la arquitectura del Spectrum, sino que también proporcionamos casos de uso típicos.",
        "Categorías y Descriptores de Asignaturas C.2.4 [Organización de Sistemas Informáticos]: Redes de comunicación informática-sistemas distribuidos; H.3.4 [Sistemas de Información]: Almacenamiento de información y recuperación-sistemas y software Términos Generales Diseño, Gestión 1.",
        "INTRODUCCIÓN Manipular y gestionar contenido es y siempre ha sido una de las funciones principales de una computadora.",
        "Las aplicaciones iniciales de computación incluyen formateadores de texto y compiladores de programas.",
        "El contenido era gestionado inicialmente mediante la interacción explícita del usuario a través del uso de archivos y sistemas de archivos.",
        "A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que las personas desean utilizarlo han cambiado considerablemente.",
        "Nuevos tipos de contenido, como las transmisiones multimedia continuas, se han vuelto comunes debido a la convergencia de avances en tecnologías de almacenamiento, codificación y redes.",
        "Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de video codificado de calidad televisiva en un solo disco duro.",
        "Esto ha llevado a la introducción de sistemas de grabación de video digital independientes o personales, como TiVO y ReplayTV.",
        "Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha.",
        "Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas, con la red misma actuando como un gran repositorio de datos.",
        "La proliferación de contenido de alta calidad habilitada por estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos.",
        "El enfoque de nuestro trabajo se centra en el almacenamiento de contenido multimedia y, en particular, en el almacenamiento de contenido multimedia continuo en forma preempaquetada o en vivo.",
        "La necesidad de gestión de contenido en esta área es evidente cuando se considera lo siguiente: • Los aumentos en la capacidad y las disminuciones en el costo de almacenamiento significan que incluso los sistemas de escritorio modestos de hoy tienen la capacidad de almacenar grandes cantidades de contenido.",
        "La gestión manual de dicho contenido (o más correctamente, la falta de gestión manual de dicho contenido) conduce a grandes ineficiencias donde el contenido no deseado y olvidado se acumula y donde el contenido deseado no se puede encontrar. • Aunque es cierto para todos los tipos de contenido, el almacenamiento de contenido de medios continuos es especialmente problemático.",
        "El primer contenido de medios continuos sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque sin política para almacenarlo no funcionará para todos, excepto para los sistemas más pequeños.",
        "Segundo, el almacenamiento de contenido en vivo como la televisión o la radio es inherentemente problemático ya que estas señales son flujos continuos sin puntos finales.",
        "Esto significa que antes de siquiera pensar en gestionar dicho contenido, es necesario abstraerlo en algo que pueda ser manipulado y gestionado. Al tratar con medios continuos almacenados, es necesario gestionar dicho contenido tanto a un nivel detallado como a un nivel agregado.",
        "Por ejemplo, un usuario individual de PVR que desee conservar solo los momentos destacados de un evento deportivo en particular no debería estar obligado a tener que almacenar el contenido relacionado con todo el evento.",
        "Al mismo tiempo, el usuario podría querer considerar el contenido en su totalidad, por ejemplo, eliminar todo el contenido que no he visto en el último mes, excepto aquel contenido que fue marcado explícitamente para archivar. • Como se indicó anteriormente, tratar de mantener un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenido es muy difícil.",
        "Sin embargo, cuando los dispositivos de almacenamiento reales están distribuidos en una red, la tarea de llevar un registro del contenido es casi imposible.",
        "Este escenario es cada vez más común en sistemas de distribución de contenido basados en redes y es probable que también cobre importancia en escenarios de redes domésticas.",
        "Parecería claro entonces que se necesita un sistema de gestión de contenido que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que aproveche la capacidad de almacenamiento en red de los dispositivos.",
        "Este sistema debería permitir el almacenamiento eficiente y el acceso al contenido en dispositivos de almacenamiento de red heterogéneos de acuerdo a las preferencias del usuario.",
        "El sistema de gestión de contenido debe traducir las preferencias del usuario en políticas de almacenamiento de bajo nivel apropiadas y permitir que esas preferencias se expresen a un nivel de granularidad fino (sin requerirlo en general).",
        "El sistema de gestión de contenidos debe permitir al usuario manipular y razonar sobre (es decir, cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo.",
        "Abordar este problema de gestión de contenido distribuido es difícil debido a la cantidad de requisitos impuestos en el sistema.",
        "Por ejemplo: • El sistema de gestión de contenidos debe operar en un gran número de sistemas heterogéneos.",
        "En algunos casos, el sistema puede estar gestionando contenido almacenado en un sistema de archivos local, mientras que en otros el contenido puede estar almacenado en un dispositivo de almacenamiento de red separado.",
        "El administrador de contenido puede ser responsable de implementar las políticas que utiliza para hacer referencia al contenido o ese rol puede ser delegado a un ordenador separado.",
        "Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. El sistema de gestión de contenidos debe ser flexible y capaz de manejar diferentes requisitos para las políticas de gestión de contenidos.",
        "Estas políticas reflejan qué contenido debe ser obtenido, cuándo debe ser recuperado, cuánto tiempo debe ser retenido y en qué circunstancias debe ser descartado.",
        "Esto significa que el sistema de gestión de contenido debe permitir que múltiples aplicaciones hagan referencia al contenido con un conjunto amplio de políticas y que todo funcione de manera integrada. • El sistema de gestión de contenido debe ser capaz de monitorear las referencias al contenido y utilizar esa información para ubicar el contenido en la ubicación correcta en la red para un acceso eficiente de las aplicaciones. • El sistema de gestión de contenido debe manejar la interacción entre la población implícita y explícita del contenido en el borde de la red. • El sistema de contenido debe ser capaz de gestionar eficientemente grandes conjuntos de contenido, incluidos flujos continuos.",
        "Debe ser capaz de empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él.",
        "Para abordar estos problemas, hemos diseñado e implementado la arquitectura del sistema de gestión de contenido Spectrum.",
        "Nuestra arquitectura en capas es flexible: su API permite que las capas residan ya sea en un solo ordenador o en múltiples ordenadores heterogéneos en red.",
        "Permite que múltiples aplicaciones hagan referencia al contenido utilizando políticas diferentes.",
        "Se debe tener en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenido (CDN) que puede facilitar la distribución eficiente de contenido (por ejemplo, la arquitectura CDN PRISM [2]).",
        "El resto de este documento está organizado de la siguiente manera.",
        "La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos.",
        "En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso.",
        "El trabajo relacionado se describe en la Sección 4, y la Sección 5 contiene nuestra conclusión y sugerencias para trabajos futuros. 2.",
        "La arquitectura del sistema de gestión de contenido distribuido Spectrum consta de tres capas de gestión distintas que pueden o no estar distribuidas en múltiples máquinas, como se muestra en la Figura 1.",
        "Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todo el contenido de una aplicación según las preferencias del usuario.",
        "Por ejemplo, en una aplicación de grabadora de video personal (PVR), el administrador de contenido recibe solicitudes de contenido desde una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y gestionar contenido en el dispositivo. El administrador de políticas implementa y hace cumplir varias políticas de almacenamiento que el administrador de contenido utiliza para hacer referencia al contenido.",
        "El gestor de políticas exporta una interfaz al gestor de contenido que le permite al gestor de contenido solicitar que un contenido sea tratado de acuerdo con una política específica.",
        "Spectrum permite que se realicen políticas arbitrarias al proporcionar un conjunto fijo de plantillas de políticas base que pueden ser fácilmente parametrizadas.",
        "Creemos que para la mayoría de las implementaciones esto será adecuado (de lo contrario, Spectrum se puede extender fácilmente para cargar dinámicamente nuevo código de plantilla de política base en tiempo de ejecución).",
        "Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido).",
        "Además, el contenido solo puede existir en el sistema siempre y cuando esté referenciado por al menos una política existente.",
        "Los conflictos de políticas se eliminan al hacer que el administrador de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo.",
        "Esto significa que el contenido sin política asociada se elimina inmediata y automáticamente del sistema.",
        "Este enfoque nos permite apoyar de forma natural el intercambio de contenido entre diferentes políticas, lo cual es fundamental para el almacenamiento eficiente de objetos grandes.",
        "Ten en cuenta que una diferencia clave entre el gestor de contenido y el gestor de políticas es que el gestor de contenido gestiona referencias a múltiples piezas de contenido, es decir, tiene una vista de aplicación del contenido.",
        "Por otro lado, el gerente de políticas solo se preocupa por la política utilizada para gestionar piezas de contenido independientes.",
        "Por ejemplo, en una aplicación de PVR, la capa del gestor de contenido conocería los diferentes grupos de contenido gestionado, como mantener indefinidamente, mantener por un día y mantener si hay espacio en disco disponible.",
        "Sin embargo, a nivel de gestor de políticas, cada pieza de contenido tiene su propia política (o políticas) aplicada a ella y es independiente de otro contenido. El gestor de almacenamiento: almacena contenido de manera eficiente mientras facilita los objetivos de las capas superiores.",
        "Específicamente, el administrador de almacenamiento guarda el contenido en fragmentos de subobjetos.",
        "Este enfoque tiene ventajas para la recuperación eficiente de contenido, pero lo más importante es que permite aplicar políticas a nivel de subobjeto, lo cual es críticamente importante al tratar con objetos muy grandes como partes de medios continuos, por ejemplo, piezas seleccionadas de contenido de televisión almacenadas en un PVR.",
        "Ten en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas que están siendo utilizadas por los gestores de contenido y de políticas.",
        "Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas.",
        "La Figura 1 muestra los cuatro casos posibles.",
        "El caso en el extremo izquierdo de la figura muestra el caso más simple (no distribuido) donde todas las capas están implementadas en una sola caja.",
        "Esta configuración se utilizaría en aplicaciones autónomas como los PVRs.",
        "El siguiente caso corresponde al caso en el que hay un gestor de contenido centralizado que controla dispositivos de almacenamiento distribuido, cada uno de los cuales es responsable de implementar almacenamiento basado en políticas.",
        "En este caso, aunque los dispositivos remotos son controlados por el gestor central, operan de manera mucho más independiente.",
        "Por ejemplo, una vez que reciben instrucciones del gerente central, típicamente operan de manera autónoma.",
        "Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido según un horario determinado por algún controlador centralizado.",
        "Por ejemplo, la CDN podría precargar dispositivos periféricos con contenido que se espera que sea muy popular o distribuir archivos grandes a sucursales durante las horas de menor tráfico en un entorno empresarial con limitaciones de ancho de banda.",
        "Permitir que un único administrador de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y al caso más distribuido.",
        "La necesidad de este tipo de separación puede surgir por razones de escalabilidad o cuando se requiere controlar diferentes dispositivos de almacenamiento especializados con un único gestor de políticas.",
        "El caso final muestra un gestor de contenido combinado con un gestor de políticas controlando un gestor de almacenamiento remoto.",
        "Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo detallado por parte del gestor de políticas.",
        "Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de Contenidos La capa del gestor de contenidos es la interfaz principal a través de la cual las aplicaciones específicas utilizan la arquitectura Spectrum.",
        "Por lo tanto, la capa del gestor de contenido proporciona una API para que la aplicación pueda manipular todos los aspectos de la arquitectura de Spectrum en diferentes niveles de granularidad.",
        "La API del gestor de contenido tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite agregar dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo el control del gestor de contenido y poniendo el almacenamiento a disposición del sistema.",
        "Los dispositivos físicos pueden ser locales o remotos; este es el único lugar en la arquitectura donde la aplicación debe ser consciente de esta distinción.",
        "Una vez que un dispositivo es mapeado en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación.",
        "Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación.",
        "Almacenes: Los almacenes son subconjuntos de dispositivos de almacenamiento físico.",
        "A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (por ejemplo, espacio en disco) a la misma.",
        "Las tiendas solo se pueden crear en dispositivos físicos que estén mapeados en el sistema.",
        "Grupos de Políticas: Los grupos de políticas son el medio por el cual una aplicación especifica, instancia y modifica las políticas que se aplican al contenido del Espectro.",
        "El uso típico de este conjunto de funciones es seleccionar una de un pequeño conjunto de políticas base y parametrizar esta instancia específica de la política.",
        "Los grupos de políticas se crean dentro de las tiendas existentes en el sistema.",
        "La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento y que tienen como objetivo optimizar el uso del disco.",
        "Además, un conjunto de políticas que incluyen una especificación de tiempo sofisticada permiten un almacenamiento que es consciente del tiempo.",
        "Por ejemplo, una política simple basada en el tiempo podría expulsar el contenido del sistema en un momento absoluto o relativo específico.",
        "Una política basada en el tiempo un poco más compleja habilitada por la arquitectura Spectrum podría permitir que el contenido se almacene en una ventana de tiempo de un número de horas (por ejemplo, las N horas más recientes se mantienen en el sistema).",
        "Las políticas basadas en el tiempo son de particular utilidad al tratar con contenido continuo como una transmisión en vivo. 6 Contenido: En el nivel más fino de granularidad, el contenido puede ser añadido o eliminado del sistema.",
        "El contenido se especifica al sistema mediante un localizador uniforme de recursos (URL) que indica de manera concisa la ubicación del contenido, así como el protocolo a utilizar para recuperarlo.",
        "Opcionalmente se puede asociar una especificación de tiempo con el contenido.",
        "Esto permite que el contenido sea recuperado en el sistema en algún momento futuro, o en intervalos de tiempo futuros.",
        "Nuevamente, esto es particularmente útil para tratar con el almacenamiento y gestión de contenido en vivo. 2.2 Gestor de Políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones de API.",
        "Primero, hay funciones que operan en áreas de almacenamiento gestionadas y referencias basadas en políticas (prefs) al contenido almacenado allí.",
        "Segundo, hay conjuntos de funciones utilizadas para implementar cada política de gestión.",
        "La primera clase de funciones es utilizada por la capa de gestión de contenido para acceder al almacenamiento.",
        "Las operaciones incluyen: crear, abrir y cerrar. Estas operaciones son utilizadas por el gestor de contenido para controlar su acceso al almacenamiento.",
        "El proceso de creación de políticas de gestión de operaciones se utiliza para establecer contacto con una tienda por primera vez.",
        "Una vez que esto se haya hecho, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas.",
        "Ten en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella.",
        "Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas.",
        "La información solo necesita ser transmitida al administrador de políticas una vez al momento de la creación.",
        "Para operaciones abiertas, el administrador de políticas utilizará la información en caché para contactar a la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el administrador de contenido consulte al administrador de políticas sobre qué contenido está actualmente presente para una URL dada.",
        "Para medios continuos, se devolverán rangos de tiempo de medios presentes. recurso: Las rutinas de recurso se utilizan para consultar al administrador de políticas sobre su uso actual de recursos.",
        "Hay dos rutinas de recursos: una que se aplica a la tienda en su totalidad y otra que se aplica a una referencia de política en particular.",
        "La API de recursos es extensible, actualmente admitimos consultas sobre el uso de disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer se utiliza por el gestor de contenido para hacer referencia al contenido en la tienda.",
        "Si el contenido no está presente, esta llamada resultará en la obtención del contenido (o en la programación para obtenerlo si el contenido no está disponible actualmente).",
        "Los parámetros de esta función incluyen la URL donde se almacenará, la URL desde la cual se obtendrán los datos si no están presentes, la política para almacenar el contenido y los argumentos utilizados para parametrizar la política.",
        "El resultado de una operación de establecimiento de prefijo exitosa es una cadena de identificación de referencia de política.",
        "Este identificador se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo.",
        "El segundo grupo de funciones del gestor de políticas se utilizan para implementar todas las políticas respaldadas por Spectrum.",
        "Visualizamos un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento.",
        "Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitiva puede ser parametrizada para funcionar diariamente, semanalmente o mensualmente.",
        "Ten en cuenta que el gestor de políticas solo se preocupa por ejecutar una política específica.",
        "Las razones de nivel superior para elegir una política determinada son manejadas por el gerente de contenido y aplicación.",
        "Una política base se implementa utilizando seis funciones: establecer: se llama cuando se establece una preferencia con las URL requeridas y los parámetros de la política base.",
        "El rutina establecida hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar acción (por ejemplo, iniciar una descarga) y programa una devolución de llamada para ese momento.",
        "También puede registrarse para recibir devoluciones de llamada si se recibe nuevo contenido para una URL específica. actualizar: se llama para cambiar los parámetros de una preferencia, o para descartar la referencia de la política. newclip: se llama cuando se recibe un fragmento de nuevo contenido para una URL de interés.",
        "La política base normalmente establece que se llame a newclip para una URL dada cuando se establece la preferencia.",
        "Cuando se llama a newclip, la política base verifica sus parámetros para determinar si desea agregar una referencia al clip recién recibido. callback: llamado cuando la preferencia programa una devolución de llamada basada en temporizador.",
        "Este es un mecanismo útil de activación para preferencias que necesitan estar inactivas durante un largo período de tiempo (por ejemplo, entre programas). arranque/apagado: se llama cuando el sistema de gestión de contenidos se está iniciando o apagando.",
        "La operación de arranque se utiliza típicamente para programar devoluciones de llamada iniciales o iniciar operaciones de E/S.",
        "La operación de apagado se utiliza para cerrar de forma ordenada los flujos de entrada/salida y guardar el estado. 2.3 Gestor de almacenamiento El rol del gestor de almacenamiento de Spectrum es controlar todas las operaciones de entrada/salida asociadas con una tienda dada.",
        "El gestor de almacenamiento de Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo, un dispositivo de almacenamiento).",
        "Para los medios continuos, a nivel del gestor de almacenamiento, el contenido se almacena como una colección de fragmentos basados en el tiempo.",
        "Dependiendo del sistema de archivos subyacente, un fragmento podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento.",
        "Las dos operaciones principales del gestor de almacenamiento son entrada y salida.",
        "La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado.",
        "La rutina de salida se utiliza para enviar datos de la tienda a un cliente.",
        "Para los medios de transmisión en continuo, tanto las rutinas de entrada como de salida toman rangos de tiempo que programan cuándo debe ocurrir la operación de E/S, y ambas rutinas devuelven un identificador de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro.",
        "Al igual que el administrador de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar almacenes.",
        "También admite operaciones para consultar los usos de recursos y opciones admitidas por la tienda.",
        "Finalmente, el administrador de almacenamiento también tiene un procedimiento de descarte que puede ser utilizado por el administrador de políticas para informar a la tienda que elimine contenido de la tienda. 3.",
        "IMPLEMENTACIÓN Y CASOS DE USO En esta sección describimos nuestra implementación de Spectrum y cómo puede ser utilizada. 3.1 Implementación Hemos implementado las tres capas de Spectrum en C como parte de una biblioteca que puede ser enlazada con aplicaciones basadas en Spectrum.",
        "Cada capa lleva un registro de su estado a través de un conjunto de archivos de datos locales que persisten a través de reinicios, lo que permite a Spectrum manejar los ciclos de energía de manera fluida.",
        "Para las capas que residen en sistemas remotos (por ejemplo, una tienda remota), solo se almacena localmente la meta-información necesaria para contactar al administrador de políticas del gestor de contenido remoto, el gestor de almacenamiento, el recuperador de almacenamiento, los listados de programas, la interfaz de usuario gráfica, el DVR habilitado para red, la información del programa, la aplicación de DVR de contenido en la red habilitada para DVR. Figura 2: Espectro en un nodo de DVR habilitado para red.",
        "Nuestra aplicación de prueba utiliza un administrador de políticas y almacenamiento local para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix.",
        "Para manejar eficientemente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas de API de Spectrums admiten tanto modos síncronos como asíncronos a través de una interfaz uniforme definida por la estructura reqinfo.",
        "Cada llamada a la API toma un puntero a una estructura reqinfo como uno de sus argumentos.",
        "Esta estructura se utiliza para mantener el estado de la llamada y el estado de retorno.",
        "Para las llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamada.",
        "Para utilizar una función de la API de Spectrum, el llamante primero elige entre el modo sincrónico o asincrónico y asigna una estructura reqinfo.",
        "Para llamadas de sincronización, la reqinfo puede ser asignada en la pila, de lo contrario se asigna con malloc.",
        "Para llamadas asíncronas, se debe proporcionar una función de devolución de llamada al asignar el reqinfo.",
        "A continuación, el llamante invoca la función API de Spectrum deseada pasando la estructura reqinfo como argumento.",
        "Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo.",
        "Para llamadas asincrónicas exitosas, se devuelve un valor de llamada en progreso.",
        "Más tarde, cuando la llamada asíncrona se completa o se produce un tiempo de espera, se llama a la función de devolución de llamada asíncrona con la información adecuada necesaria para completar el procesamiento.",
        "El diseño modular/capas de la arquitectura Spectrum simplifica el objetivo de distribución de funcionalidad.",
        "Además, la comunicación entre funciones suele ser de naturaleza maestro-esclavo(s).",
        "Esto significa que son posibles varios enfoques para la operación distribuida que cumplirían con los requisitos arquitectónicos.",
        "En nuestra implementación hemos optado por realizar esta funcionalidad con un diseño modular simple.",
        "Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y elegir el método de codificación que se debe utilizar con los datos a transferir.",
        "Los protocolos de transporte pueden variar desde protocolos simples como UDP hasta protocolos más complejos como HTTP.",
        "Actualmente estamos utilizando TCP simple para la mayoría de nuestro transporte.",
        "Las llamadas a funciones a través de las diferentes APIs de Spectrum pueden ser codificadas utilizando una variedad de formatos que incluyen texto plano, XDR y XML.",
        "Actualmente estamos utilizando la biblioteca XML eXpat [4] para codificar nuestras llamadas.",
        "Mientras actualmente estamos transfiriendo nuestros mensajes codificados en XML utilizando una conexión TCP simple, en un entorno del mundo real esto puede ser fácilmente reemplazado con una implementación basada en capa de sockets seguros (SSL) para mejorar la seguridad al agregar SSL como protocolo de transporte.",
        "Un aspecto importante de Spectrum es que puede gestionar contenido basado en una política dada en plataformas heterogéneas.",
        "Como explicamos anteriormente en la Sección 2.2, imagina un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento.",
        "Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben comprender las políticas de nivel base y cómo pueden ser parametrizadas.",
        "Para abordar este problema, tratamos cada política de nivel base como si fuera un programa separado.",
        "Cada política de nivel base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización.",
        "De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada utilizando una función similar a getopt.",
        "Este formato es fácil de entender y proporciona portabilidad ya que el orden de los bytes no es un problema en una cadena.",
        "Dado que esta parte de Spectrum no se encuentra en la ruta crítica de los datos, este tipo de formato no representa un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos de Spectrum En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos de Spectrum en nuestro entorno.",
        "El enfoque de nuestro trabajo anterior ha sido la distribución de contenido para contenido de medios en streaming [2] y la grabación de video digital habilitada para redes [3].",
        "El sistema Spectrum es aplicable a ambos escenarios de la siguiente manera.",
        "La Figura 2 muestra la arquitectura del DVR habilitado para red (NED).",
        "En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local.",
        "La aplicación de DVR obtiene listados de programas de alguna fuente de red, maneja la presentación al usuario a través de una interfaz gráfica de usuario (GUI) e interactúa con el sistema Spectrum a través de las APIs de la capa de gestión de contenido.",
        "Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento que se aplicarán a dicho contenido.",
        "La obtención del contenido (a través de la red o localmente) y su posterior almacenamiento en el sistema local son manejados por los gestores de políticas y almacenamiento.",
        "El uso de Spectrum en una arquitectura de distribución de contenido en streaming (por ejemplo,",
        "PRISM [2]) está representado en la Figura 3.",
        "En este entorno, el contenido de medios en streaming (tanto en vivo, enlatado en vivo y a la carta) se distribuye a los portales periféricos desde donde se sirven los puntos finales de streaming.",
        "En nuestro entorno, la distribución y almacenamiento de contenido se realiza desde una estación centralizada de gestión de contenido que controla varios de los portales periféricos.",
        "La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenido sin necesidad de una comunicación continua entre el gestor de contenido y los dispositivos periféricos, es decir, una vez que se han dado instrucciones a los dispositivos periféricos, pueden operar de forma independiente hasta que se deban realizar cambios. Ejemplo operativo de Spectrum 3.3 Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación de PVR basada en Spectrum programada para almacenar un día de contenido de transmisión en una ventana móvil.",
        "Para configurar la ventana deslizante, la aplicación utilizaría la API del gestor de contenido para crear un grupo de políticas y una referencia de política al contenido deseado.",
        "El establecimiento de la política de ventana de un día en movimiento haría que el gerente de políticas le pida al gerente de almacenamiento que comience a recibir el flujo.",
        "A medida que llega cada fragmento de datos en streaming, el gestor de políticas ejecuta la función newclip de las referencias de política.",
        "La función newclip agrega una referencia a cada fragmento que llega y programa una devolución de llamada para un día después.",
        "En ese momento, la política eliminará su referencia actual de un día al contenido y el contenido será descartado a menos que sea referenciado por alguna otra política.",
        "Ahora, considera el caso en el que el usuario decide guardar parte del contenido (por ejemplo, un programa específico) en la ventana deslizante durante una semana adicional.",
        "Para hacer esto, la aplicación solicita que el gestor de contenido agregue una nueva referencia de política adicional a la parte del contenido que se va a preservar.",
        "Por lo tanto, el contenido preservado tiene dos referencias: una del marco de tiempo móvil y otra de la solicitud de preservar el contenido por una semana adicional.",
        "Después de un día, la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. datos base url1 url2 (archivos multimedia...) (archivos multimedia...) almacenamiento de metadatos (información general...) url1 fragmentos preferencias rangos fragmentos multimedia, etc. url2 host poli ref1 ref1.archivos ref1.estado Figura 4: Diseño de datos de la tienda de políticas de Spectrum preservado por la segunda referencia.",
        "Después de que haya transcurrido la semana adicional, se llamará a la función de devolución de llamada para la segunda referencia.",
        "Esta función descartará la referencia restante al contenido y, como no hay referencias restantes, el contenido será liberado.",
        "Para poder funcionar en escenarios como los descritos anteriormente, el gestor de políticas de Spectrums debe administrar y mantener todas las referencias a diferentes fragmentos de medios.",
        "Estas referencias son persistentes y, por lo tanto, deben poder sobrevivir incluso si la máquina que las mantiene se reinicia.",
        "Nuestro implementación del gestor de políticas de Spectrum logra esto utilizando la estructura de archivos y directorios mostrada en la Figura 4.",
        "Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior.",
        "Los directorios son: datos: este directorio es utilizado por el gestor de almacenamiento para almacenar los fragmentos de medios de cada URL activa.",
        "Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime.",
        "Ten en cuenta que este directorio se utiliza solo si el gestor de almacenamiento es local.",
        "Si el administrador de políticas está utilizando un administrador de almacenamiento externo (por ejemplo, un dispositivo de almacenamiento), entonces los archivos multimedia se almacenan de forma remota y solo son referenciados de forma remota por el administrador de políticas. meta: este directorio contiene información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando.",
        "La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) y la información sobre los tipos de fragmentos de datos que la tienda puede manejar.",
        "El directorio meta también contiene un subdirectorio por URL que contiene información sobre los fragmentos de datos almacenados.",
        "El archivo de fragmentos contiene una lista de fragmentos almacenados actualmente y sus recuentos de referencia.",
        "El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL.",
        "El archivo de rangos contiene una lista de intervalos de tiempo de los datos actualmente almacenados.",
        "Finalmente, el archivo multimedia describe el formato del medio que se está almacenando bajo la URL actual. poly: este directorio contiene un conjunto de subdirectorios de host.",
        "Cada subdirectorio de host contiene el conjunto de referencias de políticas creadas por ese host.",
        "La información de cada referencia de política está dividida en tres archivos.",
        "Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files y ref1.state.",
        "El archivo ref1 contiene información sobre la referencia de la política que no cambia con frecuencia.",
        "Esta información incluye la política base y los parámetros utilizados para crear la referencia.",
        "El archivo ref1.files contiene la lista de referencias a fragmentos que posee el prefijo ref1.",
        "Finalmente, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo.",
        "Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum.",
        "Ten en cuenta que otras implementaciones son posibles.",
        "Por ejemplo, un administrador de espectro de calidad de operador podría almacenar toda su información de políticas y referencias en un sistema de base de datos de alto rendimiento. 10 4.",
        "TRABAJO RELACIONADO Varios autores han abordado el problema de la gestión de contenido en redes distribuidas.",
        "Gran parte del trabajo se centra en el aspecto de gestión de políticas.",
        "Por ejemplo, en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos.",
        "El contenido se distribuye entre los recursos del servidor en proporción a la demanda del usuario utilizando un Protocolo de Diseminación de Demanda.",
        "El rendimiento del esquema se compara mediante simulación.",
        "En [1] el contenido se distribuye entre subcachés.",
        "Los autores construyen un sistema que emplea varios componentes, como un Enrutador Central, una Base de Conocimiento en Caché, Subcachés y un juez de expulsión de Subcaché.",
        "La base de conocimientos de caché permite emplear políticas sofisticadas.",
        "La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos.",
        "Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema.",
        "Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenido en el entorno de red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenido, Gestor de políticas y Gestor de almacenamiento.",
        "Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo.",
        "Otro trabajo relacionado implica los llamados sistemas de recomendación de televisión que se utilizan en los PVR para seleccionar automáticamente contenido para los usuarios, por ejemplo [6].",
        "En el caso de que Spectrum se utilice en una configuración de PVR, este tipo de sistema realizaría una función de nivel superior y claramente se beneficiaría de las funcionalidades de la arquitectura de Spectrum.",
        "Finalmente, en el entorno comercial de CDN, los proveedores (por ejemplo,",
        "Cisco y Netapp han desarrollado e implementado productos y herramientas de gestión de contenido.",
        "A diferencia de la arquitectura Spectrum que permite que los dispositivos periféricos operen de manera autónoma en gran medida, las soluciones de los proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum.",
        "CONCLUSIÓN Y TRABAJOS FUTUROS En este artículo presentamos el diseño e implementación de la arquitectura de gestión de contenido Spectrum.",
        "Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente.",
        "Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación.",
        "Spectrum también puede aplicar políticas que son conscientes del tiempo, lo que permite gestionar de manera efectiva el almacenamiento de contenido multimedia continuo.",
        "Finalmente, el diseño modular de la arquitectura Spectrum permite tanto realizaciones independientes como distribuidas para que el sistema pueda ser desplegado en una variedad de aplicaciones.",
        "Existen varios problemas abiertos que requerirán trabajo futuro.",
        "Algunos de estos problemas incluyen: • Visualizamos que Spectrum pueda gestionar contenido en sistemas que van desde grandes CDNs hasta dispositivos más pequeños como TiVO [8].",
        "Para que estos sistemas más pequeños puedan soportar Spectrum, necesitarán de una red y una API externa.",
        "Cuando esa API esté disponible, tendremos que averiguar cómo se puede integrar en la arquitectura de Spectrum. • Spectrum nombra el contenido por URL, pero intencionalmente no hemos definido el formato de las URL de Spectrum, cómo se relacionan con el nombre real del contenido, o cómo los nombres y las URL deben presentarse al usuario.",
        "Si bien anteriormente abordamos estos temas en otro lugar [2], creemos que hay más trabajo por hacer y que se deben redactar estándares basados en consenso sobre la nomenclatura. En este documento nos hemos centrado en la gestión de contenido para objetos de medios continuos.",
        "También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero aún no hemos resuelto los detalles necesarios para admitir esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que el contenido multimedia se comparta fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada.",
        "Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico.",
        "REFERENCIAS [1] K. .",
        "Cheng y Y. Kambayashi.",
        "Gestión de contenido basada en multicache para el almacenamiento en caché web.",
        "Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información en la Web, junio de 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe.",
        "Arquitectura PRISM: Apoyo a Servicios de Streaming Mejorados en una Red de Distribución de Contenidos.",
        "IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe.",
        "NED: un grabador de video digital habilitado para red. 11º Taller de la IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji y P. Shenoy.",
        "Una arquitectura de clúster de servidores de medios en streaming adaptativa a la demanda y consciente de la localidad (DALA).",
        "NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman.",
        "Un recomendador de televisión multiagente.",
        "Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11"
    ],
    "error_count": 4,
    "keys": {
        "spectrum content management system": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E.",
                "van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices.",
                "Keeping track of (or managing) such content remains challenging due to the sheer volume of data.",
                "Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with.",
                "Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system.",
                "In this paper we present the design and implementation of the <br>spectrum content management system</br>, which deals with rich media content effectively in this environment.",
                "Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios.",
                "A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system.",
                "This means that there are no eviction policies.",
                "Content that no longer has a retention policy applied to it is simply removed from the system.",
                "Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication.",
                "This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content.",
                "We not only describe the details of the Spectrum architecture but also give typical use cases.",
                "Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1.",
                "INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer.",
                "Initial computing applications include text formatters and program compilers.",
                "Content was initially managed by explicit user interaction through the use of files and filesystems.",
                "As technology has advanced, both the types of content and the way people wish to use it have greatly changed.",
                "New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies.",
                "For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive.",
                "This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7].",
                "Another example is the combination of encoding and broadband networking technology.",
                "This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository.",
                "The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data.",
                "The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms.",
                "The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content.",
                "Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic.",
                "First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems.",
                "Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints.",
                "This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level.",
                "For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event.",
                "At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult.",
                "However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible.",
                "This scenario is increasingly common in network based content distribution systems and is likely to also become important in home-networking scenarios.",
                "It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed.",
                "This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences.",
                "The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general).",
                "The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content.",
                "Addressing this distributed content management problem is difficult due to the number of requirements placed on the system.",
                "For example: • The content management system must operate on a large number of heterogeneous systems.",
                "In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance.",
                "The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer.",
                "A application program interface (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies.",
                "These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded.",
                "This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams.",
                "It needs to be able to package this content in such a way that it is convenient for users to access.",
                "To address these issues we have designed and implemented the <br>spectrum content management system</br> architecture.",
                "Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers.",
                "It allows multiple applications to reference content using differing policies.",
                "Note that the Spectrum architecture assumes the existence of a content distribution network (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]).",
                "The rest of this paper is organized as follows.",
                "Section 2 describes the architecture of our content management system.",
                "In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use.",
                "Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2.",
                "THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1.",
                "The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences.",
                "For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. policy manager: implements and enforces various storage polices that the content manager uses to refer to content.",
                "The policy manager exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy.",
                "Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized.",
                "It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time).",
                "A key aspect of the policy manager is that it allows different policies to be simultaneously applied to the same content (or parts of the same content).",
                "Furthermore content can only exist in the system so long as it is referenced by at least one existing policy.",
                "Policy conflicts are eliminated by having the policy manager deal exclusively with retention policies rather than with a mix of retention and eviction policies.",
                "This means that content with no policy associated with it is immediately and automatically removed from the system.",
                "This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects.",
                "Note that a key difference between the content manager and the policy manager is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content.",
                "On the other hand, the policy manager is only concerned with the policy used to manage standalone pieces of content.",
                "For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace.",
                "However, at the policy manager level, each piece of content has 5 Content Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers.",
                "Specifically the storage manager stores content in sub-object chunks.",
                "This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR.",
                "Note that the storage manager has no knowledge of the policies being used by the content and policy managers.",
                "Another unique part of our approach is that the interfaces between the layers can either be local or distributed.",
                "Figure 1 shows the four possible cases.",
                "The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box.",
                "This configuration would be used in selfcontained applications such as PVRs.",
                "The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage.",
                "In this case although the remote devices are controlled by the central manager they operate much more independently.",
                "For example, once they receive instructions from the central manager they typically operate in autonomous fashion.",
                "An example of this type of configuration is a content distribution network (CDN) that distributes and stores content based on a schedule determined by some centralized controller.",
                "For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment.",
                "Allowing a single policy manager to control several storage managers leads to the next combination of functions and the most distributed case.",
                "The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single policy manager.",
                "The final case shows a content manager combined with a policy manager controlling a remote storage manager.",
                "This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the policy manager.",
                "We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture.",
                "As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity.",
                "The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system.",
                "Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction.",
                "Once a device is mapped into the application through this interface, the system tracks its type and location.",
                "Users simply refer to the content through an application-provided label.",
                "Stores: Stores are subsets of physical storage devices.",
                "Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it.",
                "Stores can only be created in physical devices that are mapped into the system.",
                "Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content.",
                "Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy.",
                "Policy groups are created within existing stores in the system.",
                "The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage.",
                "In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time.",
                "For example, a simple time-based policy could evict content from the system at a certain absolute or relative time.",
                "A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system).",
                "Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system.",
                "Content is specified to the system by means of a uniform resource locator (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it.",
                "Optionally a time specification can be associated with content.",
                "This allows content to be fetched into the system at some future time, or at future time intervals.",
                "Again, this is particularly useful for dealing with the storage and management of live content. 2.2 Policy Manager The policy manager layer of the Spectrum architecture has two main types of API functions.",
                "First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there.",
                "Second, there are sets of functions used to implement each management policy.",
                "The first class of functions is used by the content manager layer to access storage.",
                "Operations include: create, open, and close: These operations are used by the content manager to control its access to storage.",
                "The policy managers create operation is used to establish contact with a store for the first time.",
                "Once this is done, the store can be open and closed using the appropriate routines.",
                "Note that the parameters used to create a store contain information on how to reach it.",
                "For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them.",
                "The information only needs to be passed to the policy manager once at create time.",
                "For open operations, the policy manager will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the policy manager about what content is currently present for a given URL.",
                "For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the policy manager about its current resource usage.",
                "There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference.",
                "The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store.",
                "If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available).",
                "Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy.",
                "The result of a successful pref establish operation is a policy reference ID string.",
                "This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely.",
                "The second group of policy manager functions are used to implement all the polices supported by Spectrum.",
                "We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly.",
                "Note that the policy manager is only concerned with executing a specific policy.",
                "The higher-level reasons for choosing a given policy are handled by the content and application manager.",
                "A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters.",
                "The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time.",
                "It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest.",
                "The base policy typically arranges for newclip to be called for a given URL when the pref is established.",
                "When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback.",
                "This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down.",
                "The boot operation is typically used to schedule initial callbacks or start I/O operations.",
                "The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store.",
                "Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance).",
                "For continuous media, at the storage manager level content is stored as a collection of time-based chunks.",
                "Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database.",
                "The two main storage manager operations are input and output.",
                "The input routine is used to store content in a store under a given name.",
                "The output routine is used to send data from the store to a client.",
                "For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future.",
                "Much like the policy manager, the storage manager also provides API functions to create, open, and close stores.",
                "It also supports operations to query the resource usages and options supported by the store.",
                "Finally, the storage manager also has a discard routine that may be used by the policy manager to inform the store to remove content from the store. 3.",
                "IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications.",
                "Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles.",
                "For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally.",
                "Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem.",
                "To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure.",
                "Each API call takes a pointer to a reqinfo structure as one of its arguments.",
                "This structure is used to hold the call state and return status.",
                "For async calls, the reqinfo also contains a pointer to a callback function.",
                "To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure.",
                "For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc.",
                "For async calls, a callback function must be provided when the reqinfo is allocated.",
                "Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument.",
                "For sync calls, the result of the calls is returned immediately in the reqinfo structure.",
                "For successful async calls, a call in progress value is returned.",
                "Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing.",
                "The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality.",
                "Furthermore, communication between functions is typically of a master-slave(s) nature.",
                "This means that several approaches to distributed operation are possible that would satisfy the architectural requirements.",
                "In our implementation we have opted to realize this functionality with a simple modular design.",
                "We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred.",
                "Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP.",
                "We currently are using plain TCP for most of our transport.",
                "Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML.",
                "We are currently using the eXpat XML library [4] to encode our calls.",
                "While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol.",
                "An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms.",
                "As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized.",
                "To address this issue, we treat each base-level policy as if it was a separate program.",
                "Each base-level policy should have a well known name and command line options for parameterization.",
                "In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function.",
                "This format is easily understood and provides portability since byte order is not an issue in a string.",
                "Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the <br>spectrum content management system</br> In this section we show two examples of the use of the <br>spectrum content management system</br> in our environment.",
                "The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3].",
                "The Spectrum system is applicable to both scenarios as follows.",
                "Figure 2 shows the Network Enabled DVR (NED) architecture.",
                "In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration.",
                "The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs.",
                "This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content.",
                "Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers.",
                "The use of Spectrum in a streaming content distribution architecture (e.g.",
                "PRISM [2]) is depicted in Figure 3.",
                "In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served.",
                "In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals.",
                "The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window.",
                "To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content.",
                "The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream.",
                "As each chunk of streaming data arrives, the policy manager executes the policy references newclip function.",
                "The newclip function adds a reference to each arriving chunk, and schedules a callback a day later.",
                "At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy.",
                "Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week.",
                "To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved.",
                "Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week.",
                "After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference.",
                "After the additional week has past, the callback function for the second reference will be called.",
                "This function will discard the remaining reference to the content and as there are no remaining references the content will be freed.",
                "In order to function in scenarios like the ones described above, Spectrums policy manager must manage and maintain all the references to various chunks of media.",
                "These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted.",
                "Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure 4.",
                "There are three classes of data stored, and each class has its own top level directory.",
                "The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media.",
                "The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime.",
                "Note that this directory is used only if the storage manager is local.",
                "If the policy manager is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the policy manager. meta: this directory contains general meta information about the storage manager being used and the data it is storing.",
                "General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle.",
                "The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored.",
                "The chunks file contains a list of chunks currently stored and their reference counts.",
                "The prefs file contains a list of active policy references that point to this URL.",
                "The ranges file contains a list of time ranges of data currently stored.",
                "Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories.",
                "Each host subdirectory contains the set of policy references created by that host.",
                "Information on each policy reference is broken up into three files.",
                "For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state.",
                "The ref1 file contains information about the policy reference that does not change frequently.",
                "This information includes the base-policy and the parameters used to create the reference.",
                "The ref1.files file contains the list of references to chunks that pref ref1 owns.",
                "Finally, the ref1.state file contains optional policy-specific state information that can change over time.",
                "Together, these files and directories are used to track references in our implementation of Spectrum.",
                "Note that other implementations are possible.",
                "For example, a carrier-grade Spectrum manager might store all its policy and reference information in a high-performance database system. 10 4.",
                "RELATED WORK Several authors have addressed the problem of the management of content in distributed networks.",
                "Much of the work focuses on the policy management aspect.",
                "For example in [5], the problem of serving multimedia content via distributed servers is considered.",
                "Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol.",
                "The performance of the scheme is benchmarked via simulation.",
                "In [1] content is distributed among sub-caches.",
                "The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge.",
                "The Cache Knowledge base allows sophisticated policies to be employed.",
                "Simulation is used to compare the proposed scheme with well-known replacement algorithms.",
                "Our work differs in that we are considering more than the policy management aspects of the problem.",
                "After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, Policy manager and Storage manager.",
                "This has allowed us to easily implement and experiment with a prototype system.",
                "Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6].",
                "In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture.",
                "Finally, in the commercial CDN environment vendors (e.g.",
                "Cisco and Netapp) have developed and implemented content management products and tools.",
                "Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5.",
                "CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture.",
                "Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage.",
                "Specifically, the system allows different policies to be applied to the same content without replication.",
                "Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content.",
                "Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications.",
                "There are a number of open issues that will require future work.",
                "Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8].",
                "In order for these smaller systems to support Spectrum they will require networking and an external API.",
                "When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user.",
                "While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects.",
                "We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance.",
                "Adapting Spectrum to meet legal requirements will likely require more technical work. 6.",
                "REFERENCES [1] K. .",
                "Cheng and Y. Kambayashi.",
                "Multicache-based Content Management for Web Caching.",
                "Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "PRISM Architecture: Supporting Enhanced Streaming Services in a Content Distribution Network.",
                "IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy.",
                "A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture.",
                "NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman.",
                "A multi-agent TV recommender.",
                "Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11"
            ],
            "original_annotated_samples": [
                "In this paper we present the design and implementation of the <br>spectrum content management system</br>, which deals with rich media content effectively in this environment.",
                "To address these issues we have designed and implemented the <br>spectrum content management system</br> architecture.",
                "Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the <br>spectrum content management system</br> In this section we show two examples of the use of the <br>spectrum content management system</br> in our environment."
            ],
            "translated_annotated_samples": [
                "En este documento presentamos el diseño e implementación del <br>sistema de gestión de contenido Spectrum</br>, que maneja de manera efectiva el contenido de medios enriquecidos en este entorno.",
                "Para abordar estos problemas, hemos diseñado e implementado la arquitectura del <br>sistema de gestión de contenido Spectrum</br>.",
                "Dado que esta parte de Spectrum no se encuentra en la ruta crítica de los datos, este tipo de formato no representa un problema de rendimiento. 3.2 Uso del <br>Sistema de Gestión de Contenidos</br> de Spectrum En esta sección mostramos dos ejemplos del uso del <br>Sistema de Gestión de Contenidos</br> de Spectrum en nuestro entorno."
            ],
            "translated_text": "Diseño e Implementación de un Sistema de Gestión de Contenido Distribuido por C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ y J.E. La convergencia de avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan y se intercambian rutinariamente entre dispositivos habilitados para redes. El seguimiento (o gestión) de dicho contenido sigue siendo un desafío debido a la gran cantidad de datos. Almacenar medios continuos en vivo (como contenido de televisión o radio) aumenta la complejidad debido a que este contenido no tiene un inicio o fin bien definido y, por lo tanto, resulta engorroso de manejar. El almacenamiento en red permite que el contenido que se ve lógicamente como parte de la misma colección esté distribuido en una red, lo que hace que la gestión de contenido sea casi imposible de manejar sin un sistema de gestión de contenido. En este documento presentamos el diseño e implementación del <br>sistema de gestión de contenido Spectrum</br>, que maneja de manera efectiva el contenido de medios enriquecidos en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto en escenarios independientes como en diferentes entornos de red. Un aspecto único de Spectrum es que requiere que se aplique una (o más) políticas de retención a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido al que ya no se le aplica una política de retención simplemente se elimina del sistema. Diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo, que son bloques de construcción básicos necesarios para manejar el almacenamiento de medios continuos en vivo, al contenido. No solo describimos los detalles de la arquitectura del Spectrum, sino que también proporcionamos casos de uso típicos. Categorías y Descriptores de Asignaturas C.2.4 [Organización de Sistemas Informáticos]: Redes de comunicación informática-sistemas distribuidos; H.3.4 [Sistemas de Información]: Almacenamiento de información y recuperación-sistemas y software Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar contenido es y siempre ha sido una de las funciones principales de una computadora. Las aplicaciones iniciales de computación incluyen formateadores de texto y compiladores de programas. El contenido era gestionado inicialmente mediante la interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que las personas desean utilizarlo han cambiado considerablemente. Nuevos tipos de contenido, como las transmisiones multimedia continuas, se han vuelto comunes debido a la convergencia de avances en tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de video codificado de calidad televisiva en un solo disco duro. Esto ha llevado a la introducción de sistemas de grabación de video digital independientes o personales, como TiVO y ReplayTV. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas, con la red misma actuando como un gran repositorio de datos. La proliferación de contenido de alta calidad habilitada por estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. El enfoque de nuestro trabajo se centra en el almacenamiento de contenido multimedia y, en particular, en el almacenamiento de contenido multimedia continuo en forma preempaquetada o en vivo. La necesidad de gestión de contenido en esta área es evidente cuando se considera lo siguiente: • Los aumentos en la capacidad y las disminuciones en el costo de almacenamiento significan que incluso los sistemas de escritorio modestos de hoy tienen la capacidad de almacenar grandes cantidades de contenido. La gestión manual de dicho contenido (o más correctamente, la falta de gestión manual de dicho contenido) conduce a grandes ineficiencias donde el contenido no deseado y olvidado se acumula y donde el contenido deseado no se puede encontrar. • Aunque es cierto para todos los tipos de contenido, el almacenamiento de contenido de medios continuos es especialmente problemático. El primer contenido de medios continuos sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque sin política para almacenarlo no funcionará para todos, excepto para los sistemas más pequeños. Segundo, el almacenamiento de contenido en vivo como la televisión o la radio es inherentemente problemático ya que estas señales son flujos continuos sin puntos finales. Esto significa que antes de siquiera pensar en gestionar dicho contenido, es necesario abstraerlo en algo que pueda ser manipulado y gestionado. Al tratar con medios continuos almacenados, es necesario gestionar dicho contenido tanto a un nivel detallado como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar solo los momentos destacados de un evento deportivo en particular no debería estar obligado a tener que almacenar el contenido relacionado con todo el evento. Al mismo tiempo, el usuario podría querer considerar el contenido en su totalidad, por ejemplo, eliminar todo el contenido que no he visto en el último mes, excepto aquel contenido que fue marcado explícitamente para archivar. • Como se indicó anteriormente, tratar de mantener un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenido es muy difícil. Sin embargo, cuando los dispositivos de almacenamiento reales están distribuidos en una red, la tarea de llevar un registro del contenido es casi imposible. Este escenario es cada vez más común en sistemas de distribución de contenido basados en redes y es probable que también cobre importancia en escenarios de redes domésticas. Parecería claro entonces que se necesita un sistema de gestión de contenido que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que aproveche la capacidad de almacenamiento en red de los dispositivos. Este sistema debería permitir el almacenamiento eficiente y el acceso al contenido en dispositivos de almacenamiento de red heterogéneos de acuerdo a las preferencias del usuario. El sistema de gestión de contenido debe traducir las preferencias del usuario en políticas de almacenamiento de bajo nivel apropiadas y permitir que esas preferencias se expresen a un nivel de granularidad fino (sin requerirlo en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar sobre (es decir, cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenido distribuido es difícil debido a la cantidad de requisitos impuestos en el sistema. Por ejemplo: • El sistema de gestión de contenidos debe operar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando contenido almacenado en un sistema de archivos local, mientras que en otros el contenido puede estar almacenado en un dispositivo de almacenamiento de red separado. El administrador de contenido puede ser responsable de implementar las políticas que utiliza para hacer referencia al contenido o ese rol puede ser delegado a un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. El sistema de gestión de contenidos debe ser flexible y capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe ser obtenido, cuándo debe ser recuperado, cuánto tiempo debe ser retenido y en qué circunstancias debe ser descartado. Esto significa que el sistema de gestión de contenido debe permitir que múltiples aplicaciones hagan referencia al contenido con un conjunto amplio de políticas y que todo funcione de manera integrada. • El sistema de gestión de contenido debe ser capaz de monitorear las referencias al contenido y utilizar esa información para ubicar el contenido en la ubicación correcta en la red para un acceso eficiente de las aplicaciones. • El sistema de gestión de contenido debe manejar la interacción entre la población implícita y explícita del contenido en el borde de la red. • El sistema de contenido debe ser capaz de gestionar eficientemente grandes conjuntos de contenido, incluidos flujos continuos. Debe ser capaz de empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas, hemos diseñado e implementado la arquitectura del <br>sistema de gestión de contenido Spectrum</br>. Nuestra arquitectura en capas es flexible: su API permite que las capas residan ya sea en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite que múltiples aplicaciones hagan referencia al contenido utilizando políticas diferentes. Se debe tener en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenido (CDN) que puede facilitar la distribución eficiente de contenido (por ejemplo, la arquitectura CDN PRISM [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. El trabajo relacionado se describe en la Sección 4, y la Sección 5 contiene nuestra conclusión y sugerencias para trabajos futuros. 2. La arquitectura del sistema de gestión de contenido distribuido Spectrum consta de tres capas de gestión distintas que pueden o no estar distribuidas en múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todo el contenido de una aplicación según las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de video personal (PVR), el administrador de contenido recibe solicitudes de contenido desde una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y gestionar contenido en el dispositivo. El administrador de políticas implementa y hace cumplir varias políticas de almacenamiento que el administrador de contenido utiliza para hacer referencia al contenido. El gestor de políticas exporta una interfaz al gestor de contenido que le permite al gestor de contenido solicitar que un contenido sea tratado de acuerdo con una política específica. Spectrum permite que se realicen políticas arbitrarias al proporcionar un conjunto fijo de plantillas de políticas base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (de lo contrario, Spectrum se puede extender fácilmente para cargar dinámicamente nuevo código de plantilla de política base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido solo puede existir en el sistema siempre y cuando esté referenciado por al menos una política existente. Los conflictos de políticas se eliminan al hacer que el administrador de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin política asociada se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar de forma natural el intercambio de contenido entre diferentes políticas, lo cual es fundamental para el almacenamiento eficiente de objetos grandes. Ten en cuenta que una diferencia clave entre el gestor de contenido y el gestor de políticas es que el gestor de contenido gestiona referencias a múltiples piezas de contenido, es decir, tiene una vista de aplicación del contenido. Por otro lado, el gerente de políticas solo se preocupa por la política utilizada para gestionar piezas de contenido independientes. Por ejemplo, en una aplicación de PVR, la capa del gestor de contenido conocería los diferentes grupos de contenido gestionado, como mantener indefinidamente, mantener por un día y mantener si hay espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada pieza de contenido tiene su propia política (o políticas) aplicada a ella y es independiente de otro contenido. El gestor de almacenamiento: almacena contenido de manera eficiente mientras facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento guarda el contenido en fragmentos de subobjetos. Este enfoque tiene ventajas para la recuperación eficiente de contenido, pero lo más importante es que permite aplicar políticas a nivel de subobjeto, lo cual es críticamente importante al tratar con objetos muy grandes como partes de medios continuos, por ejemplo, piezas seleccionadas de contenido de televisión almacenadas en un PVR. Ten en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas que están siendo utilizadas por los gestores de contenido y de políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la figura muestra el caso más simple (no distribuido) donde todas las capas están implementadas en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como los PVRs. El siguiente caso corresponde al caso en el que hay un gestor de contenido centralizado que controla dispositivos de almacenamiento distribuido, cada uno de los cuales es responsable de implementar almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, operan de manera mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, típicamente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido según un horario determinado por algún controlador centralizado. Por ejemplo, la CDN podría precargar dispositivos periféricos con contenido que se espera que sea muy popular o distribuir archivos grandes a sucursales durante las horas de menor tráfico en un entorno empresarial con limitaciones de ancho de banda. Permitir que un único administrador de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y al caso más distribuido. La necesidad de este tipo de separación puede surgir por razones de escalabilidad o cuando se requiere controlar diferentes dispositivos de almacenamiento especializados con un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas controlando un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo detallado por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de Contenidos La capa del gestor de contenidos es la interfaz principal a través de la cual las aplicaciones específicas utilizan la arquitectura Spectrum. Por lo tanto, la capa del gestor de contenido proporciona una API para que la aplicación pueda manipular todos los aspectos de la arquitectura de Spectrum en diferentes niveles de granularidad. La API del gestor de contenido tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite agregar dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo el control del gestor de contenido y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos; este es el único lugar en la arquitectura donde la aplicación debe ser consciente de esta distinción. Una vez que un dispositivo es mapeado en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Almacenes: Los almacenes son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (por ejemplo, espacio en disco) a la misma. Las tiendas solo se pueden crear en dispositivos físicos que estén mapeados en el sistema. Grupos de Políticas: Los grupos de políticas son el medio por el cual una aplicación especifica, instancia y modifica las políticas que se aplican al contenido del Espectro. El uso típico de este conjunto de funciones es seleccionar una de un pequeño conjunto de políticas base y parametrizar esta instancia específica de la política. Los grupos de políticas se crean dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento y que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que incluyen una especificación de tiempo sofisticada permiten un almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría expulsar el contenido del sistema en un momento absoluto o relativo específico. Una política basada en el tiempo un poco más compleja habilitada por la arquitectura Spectrum podría permitir que el contenido se almacene en una ventana de tiempo de un número de horas (por ejemplo, las N horas más recientes se mantienen en el sistema). Las políticas basadas en el tiempo son de particular utilidad al tratar con contenido continuo como una transmisión en vivo. 6 Contenido: En el nivel más fino de granularidad, el contenido puede ser añadido o eliminado del sistema. El contenido se especifica al sistema mediante un localizador uniforme de recursos (URL) que indica de manera concisa la ubicación del contenido, así como el protocolo a utilizar para recuperarlo. Opcionalmente se puede asociar una especificación de tiempo con el contenido. Esto permite que el contenido sea recuperado en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Nuevamente, esto es particularmente útil para tratar con el almacenamiento y gestión de contenido en vivo. 2.2 Gestor de Políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones de API. Primero, hay funciones que operan en áreas de almacenamiento gestionadas y referencias basadas en políticas (prefs) al contenido almacenado allí. Segundo, hay conjuntos de funciones utilizadas para implementar cada política de gestión. La primera clase de funciones es utilizada por la capa de gestión de contenido para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar. Estas operaciones son utilizadas por el gestor de contenido para controlar su acceso al almacenamiento. El proceso de creación de políticas de gestión de operaciones se utiliza para establecer contacto con una tienda por primera vez. Una vez que esto se haya hecho, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Ten en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información solo necesita ser transmitida al administrador de políticas una vez al momento de la creación. Para operaciones abiertas, el administrador de políticas utilizará la información en caché para contactar a la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el administrador de contenido consulte al administrador de políticas sobre qué contenido está actualmente presente para una URL dada. Para medios continuos, se devolverán rangos de tiempo de medios presentes. recurso: Las rutinas de recurso se utilizan para consultar al administrador de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su totalidad y otra que se aplica a una referencia de política en particular. La API de recursos es extensible, actualmente admitimos consultas sobre el uso de disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer se utiliza por el gestor de contenido para hacer referencia al contenido en la tienda. Si el contenido no está presente, esta llamada resultará en la obtención del contenido (o en la programación para obtenerlo si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL donde se almacenará, la URL desde la cual se obtendrán los datos si no están presentes, la política para almacenar el contenido y los argumentos utilizados para parametrizar la política. El resultado de una operación de establecimiento de prefijo exitosa es una cadena de identificación de referencia de política. Este identificador se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones del gestor de políticas se utilizan para implementar todas las políticas respaldadas por Spectrum. Visualizamos un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitiva puede ser parametrizada para funcionar diariamente, semanalmente o mensualmente. Ten en cuenta que el gestor de políticas solo se preocupa por ejecutar una política específica. Las razones de nivel superior para elegir una política determinada son manejadas por el gerente de contenido y aplicación. Una política base se implementa utilizando seis funciones: establecer: se llama cuando se establece una preferencia con las URL requeridas y los parámetros de la política base. El rutina establecida hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar acción (por ejemplo, iniciar una descarga) y programa una devolución de llamada para ese momento. También puede registrarse para recibir devoluciones de llamada si se recibe nuevo contenido para una URL específica. actualizar: se llama para cambiar los parámetros de una preferencia, o para descartar la referencia de la política. newclip: se llama cuando se recibe un fragmento de nuevo contenido para una URL de interés. La política base normalmente establece que se llame a newclip para una URL dada cuando se establece la preferencia. Cuando se llama a newclip, la política base verifica sus parámetros para determinar si desea agregar una referencia al clip recién recibido. callback: llamado cuando la preferencia programa una devolución de llamada basada en temporizador. Este es un mecanismo útil de activación para preferencias que necesitan estar inactivas durante un largo período de tiempo (por ejemplo, entre programas). arranque/apagado: se llama cuando el sistema de gestión de contenidos se está iniciando o apagando. La operación de arranque se utiliza típicamente para programar devoluciones de llamada iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para cerrar de forma ordenada los flujos de entrada/salida y guardar el estado. 2.3 Gestor de almacenamiento El rol del gestor de almacenamiento de Spectrum es controlar todas las operaciones de entrada/salida asociadas con una tienda dada. El gestor de almacenamiento de Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo, un dispositivo de almacenamiento). Para los medios continuos, a nivel del gestor de almacenamiento, el contenido se almacena como una colección de fragmentos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un fragmento podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión en continuo, tanto las rutinas de entrada como de salida toman rangos de tiempo que programan cuándo debe ocurrir la operación de E/S, y ambas rutinas devuelven un identificador de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el administrador de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar almacenes. También admite operaciones para consultar los usos de recursos y opciones admitidas por la tienda. Finalmente, el administrador de almacenamiento también tiene un procedimiento de descarte que puede ser utilizado por el administrador de políticas para informar a la tienda que elimine contenido de la tienda. 3. IMPLEMENTACIÓN Y CASOS DE USO En esta sección describimos nuestra implementación de Spectrum y cómo puede ser utilizada. 3.1 Implementación Hemos implementado las tres capas de Spectrum en C como parte de una biblioteca que puede ser enlazada con aplicaciones basadas en Spectrum. Cada capa lleva un registro de su estado a través de un conjunto de archivos de datos locales que persisten a través de reinicios, lo que permite a Spectrum manejar los ciclos de energía de manera fluida. Para las capas que residen en sistemas remotos (por ejemplo, una tienda remota), solo se almacena localmente la meta-información necesaria para contactar al administrador de políticas del gestor de contenido remoto, el gestor de almacenamiento, el recuperador de almacenamiento, los listados de programas, la interfaz de usuario gráfica, el DVR habilitado para red, la información del programa, la aplicación de DVR de contenido en la red habilitada para DVR. Figura 2: Espectro en un nodo de DVR habilitado para red. Nuestra aplicación de prueba utiliza un administrador de políticas y almacenamiento local para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficientemente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas de API de Spectrums admiten tanto modos síncronos como asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada a la API toma un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de la llamada y el estado de retorno. Para las llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamada. Para utilizar una función de la API de Spectrum, el llamante primero elige entre el modo sincrónico o asincrónico y asigna una estructura reqinfo. Para llamadas de sincronización, la reqinfo puede ser asignada en la pila, de lo contrario se asigna con malloc. Para llamadas asíncronas, se debe proporcionar una función de devolución de llamada al asignar el reqinfo. A continuación, el llamante invoca la función API de Spectrum deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas asincrónicas exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada asíncrona se completa o se produce un tiempo de espera, se llama a la función de devolución de llamada asíncrona con la información adecuada necesaria para completar el procesamiento. El diseño modular/capas de la arquitectura Spectrum simplifica el objetivo de distribución de funcionalidad. Además, la comunicación entre funciones suele ser de naturaleza maestro-esclavo(s). Esto significa que son posibles varios enfoques para la operación distribuida que cumplirían con los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un diseño modular simple. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y elegir el método de codificación que se debe utilizar con los datos a transferir. Los protocolos de transporte pueden variar desde protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP simple para la mayoría de nuestro transporte. Las llamadas a funciones a través de las diferentes APIs de Spectrum pueden ser codificadas utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos utilizando la biblioteca XML eXpat [4] para codificar nuestras llamadas. Mientras actualmente estamos transfiriendo nuestros mensajes codificados en XML utilizando una conexión TCP simple, en un entorno del mundo real esto puede ser fácilmente reemplazado con una implementación basada en capa de sockets seguros (SSL) para mejorar la seguridad al agregar SSL como protocolo de transporte. Un aspecto importante de Spectrum es que puede gestionar contenido basado en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la Sección 2.2, imagina un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben comprender las políticas de nivel base y cómo pueden ser parametrizadas. Para abordar este problema, tratamos cada política de nivel base como si fuera un programa separado. Cada política de nivel base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada utilizando una función similar a getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de los bytes no es un problema en una cadena. Dado que esta parte de Spectrum no se encuentra en la ruta crítica de los datos, este tipo de formato no representa un problema de rendimiento. 3.2 Uso del <br>Sistema de Gestión de Contenidos</br> de Spectrum En esta sección mostramos dos ejemplos del uso del <br>Sistema de Gestión de Contenidos</br> de Spectrum en nuestro entorno. El enfoque de nuestro trabajo anterior ha sido la distribución de contenido para contenido de medios en streaming [2] y la grabación de video digital habilitada para redes [3]. El sistema Spectrum es aplicable a ambos escenarios de la siguiente manera. La Figura 2 muestra la arquitectura del DVR habilitado para red (NED). En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación de DVR obtiene listados de programas de alguna fuente de red, maneja la presentación al usuario a través de una interfaz gráfica de usuario (GUI) e interactúa con el sistema Spectrum a través de las APIs de la capa de gestión de contenido. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento que se aplicarán a dicho contenido. La obtención del contenido (a través de la red o localmente) y su posterior almacenamiento en el sistema local son manejados por los gestores de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenido en streaming (por ejemplo, PRISM [2]) está representado en la Figura 3. En este entorno, el contenido de medios en streaming (tanto en vivo, enlatado en vivo y a la carta) se distribuye a los portales periféricos desde donde se sirven los puntos finales de streaming. En nuestro entorno, la distribución y almacenamiento de contenido se realiza desde una estación centralizada de gestión de contenido que controla varios de los portales periféricos. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenido sin necesidad de una comunicación continua entre el gestor de contenido y los dispositivos periféricos, es decir, una vez que se han dado instrucciones a los dispositivos periféricos, pueden operar de forma independiente hasta que se deban realizar cambios. Ejemplo operativo de Spectrum 3.3 Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación de PVR basada en Spectrum programada para almacenar un día de contenido de transmisión en una ventana móvil. Para configurar la ventana deslizante, la aplicación utilizaría la API del gestor de contenido para crear un grupo de políticas y una referencia de política al contenido deseado. El establecimiento de la política de ventana de un día en movimiento haría que el gerente de políticas le pida al gerente de almacenamiento que comience a recibir el flujo. A medida que llega cada fragmento de datos en streaming, el gestor de políticas ejecuta la función newclip de las referencias de política. La función newclip agrega una referencia a cada fragmento que llega y programa una devolución de llamada para un día después. En ese momento, la política eliminará su referencia actual de un día al contenido y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considera el caso en el que el usuario decide guardar parte del contenido (por ejemplo, un programa específico) en la ventana deslizante durante una semana adicional. Para hacer esto, la aplicación solicita que el gestor de contenido agregue una nueva referencia de política adicional a la parte del contenido que se va a preservar. Por lo tanto, el contenido preservado tiene dos referencias: una del marco de tiempo móvil y otra de la solicitud de preservar el contenido por una semana adicional. Después de un día, la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. datos base url1 url2 (archivos multimedia...) (archivos multimedia...) almacenamiento de metadatos (información general...) url1 fragmentos preferencias rangos fragmentos multimedia, etc. url2 host poli ref1 ref1.archivos ref1.estado Figura 4: Diseño de datos de la tienda de políticas de Spectrum preservado por la segunda referencia. Después de que haya transcurrido la semana adicional, se llamará a la función de devolución de llamada para la segunda referencia. Esta función descartará la referencia restante al contenido y, como no hay referencias restantes, el contenido será liberado. Para poder funcionar en escenarios como los descritos anteriormente, el gestor de políticas de Spectrums debe administrar y mantener todas las referencias a diferentes fragmentos de medios. Estas referencias son persistentes y, por lo tanto, deben poder sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestro implementación del gestor de políticas de Spectrum logra esto utilizando la estructura de archivos y directorios mostrada en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el gestor de almacenamiento para almacenar los fragmentos de medios de cada URL activa. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Ten en cuenta que este directorio se utiliza solo si el gestor de almacenamiento es local. Si el administrador de políticas está utilizando un administrador de almacenamiento externo (por ejemplo, un dispositivo de almacenamiento), entonces los archivos multimedia se almacenan de forma remota y solo son referenciados de forma remota por el administrador de políticas. meta: este directorio contiene información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) y la información sobre los tipos de fragmentos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los fragmentos de datos almacenados. El archivo de fragmentos contiene una lista de fragmentos almacenados actualmente y sus recuentos de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de intervalos de tiempo de los datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato del medio que se está almacenando bajo la URL actual. poly: este directorio contiene un conjunto de subdirectorios de host. Cada subdirectorio de host contiene el conjunto de referencias de políticas creadas por ese host. La información de cada referencia de política está dividida en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files y ref1.state. El archivo ref1 contiene información sobre la referencia de la política que no cambia con frecuencia. Esta información incluye la política base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a fragmentos que posee el prefijo ref1. Finalmente, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Ten en cuenta que otras implementaciones son posibles. Por ejemplo, un administrador de espectro de calidad de operador podría almacenar toda su información de políticas y referencias en un sistema de base de datos de alto rendimiento. 10 4. TRABAJO RELACIONADO Varios autores han abordado el problema de la gestión de contenido en redes distribuidas. Gran parte del trabajo se centra en el aspecto de gestión de políticas. Por ejemplo, en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda del usuario utilizando un Protocolo de Diseminación de Demanda. El rendimiento del esquema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Enrutador Central, una Base de Conocimiento en Caché, Subcachés y un juez de expulsión de Subcaché. La base de conocimientos de caché permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenido en el entorno de red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenido, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de televisión que se utilizan en los PVR para seleccionar automáticamente contenido para los usuarios, por ejemplo [6]. En el caso de que Spectrum se utilice en una configuración de PVR, este tipo de sistema realizaría una función de nivel superior y claramente se beneficiaría de las funcionalidades de la arquitectura de Spectrum. Finalmente, en el entorno comercial de CDN, los proveedores (por ejemplo, Cisco y Netapp han desarrollado e implementado productos y herramientas de gestión de contenido. A diferencia de la arquitectura Spectrum que permite que los dispositivos periféricos operen de manera autónoma en gran medida, las soluciones de los proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. CONCLUSIÓN Y TRABAJOS FUTUROS En este artículo presentamos el diseño e implementación de la arquitectura de gestión de contenido Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que son conscientes del tiempo, lo que permite gestionar de manera efectiva el almacenamiento de contenido multimedia continuo. Finalmente, el diseño modular de la arquitectura Spectrum permite tanto realizaciones independientes como distribuidas para que el sistema pueda ser desplegado en una variedad de aplicaciones. Existen varios problemas abiertos que requerirán trabajo futuro. Algunos de estos problemas incluyen: • Visualizamos que Spectrum pueda gestionar contenido en sistemas que van desde grandes CDNs hasta dispositivos más pequeños como TiVO [8]. Para que estos sistemas más pequeños puedan soportar Spectrum, necesitarán de una red y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo se puede integrar en la arquitectura de Spectrum. • Spectrum nombra el contenido por URL, pero intencionalmente no hemos definido el formato de las URL de Spectrum, cómo se relacionan con el nombre real del contenido, o cómo los nombres y las URL deben presentarse al usuario. Si bien anteriormente abordamos estos temas en otro lugar [2], creemos que hay más trabajo por hacer y que se deben redactar estándares basados en consenso sobre la nomenclatura. En este documento nos hemos centrado en la gestión de contenido para objetos de medios continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero aún no hemos resuelto los detalles necesarios para admitir esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que el contenido multimedia se comparta fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. REFERENCIAS [1] K. . Cheng y Y. Kambayashi. Gestión de contenido basada en multicache para el almacenamiento en caché web. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información en la Web, junio de 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. Arquitectura PRISM: Apoyo a Servicios de Streaming Mejorados en una Red de Distribución de Contenidos. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de video digital habilitado para red. 11º Taller de la IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji y P. Shenoy. Una arquitectura de clúster de servidores de medios en streaming adaptativa a la demanda y consciente de la localidad (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Un recomendador de televisión multiagente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "candidates": [],
            "error": [
                [
                    "sistema de gestión de contenido Spectrum",
                    "sistema de gestión de contenido Spectrum",
                    "Sistema de Gestión de Contenidos",
                    "Sistema de Gestión de Contenidos"
                ]
            ]
        },
        "continuous media storage": {
            "translated_key": "almacenamiento de medios continuos",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E.",
                "van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices.",
                "Keeping track of (or managing) such content remains challenging due to the sheer volume of data.",
                "Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with.",
                "Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system.",
                "In this paper we present the design and implementation of the Spectrum content management system, which deals with rich media content effectively in this environment.",
                "Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios.",
                "A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system.",
                "This means that there are no eviction policies.",
                "Content that no longer has a retention policy applied to it is simply removed from the system.",
                "Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication.",
                "This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content.",
                "We not only describe the details of the Spectrum architecture but also give typical use cases.",
                "Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1.",
                "INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer.",
                "Initial computing applications include text formatters and program compilers.",
                "Content was initially managed by explicit user interaction through the use of files and filesystems.",
                "As technology has advanced, both the types of content and the way people wish to use it have greatly changed.",
                "New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies.",
                "For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive.",
                "This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7].",
                "Another example is the combination of encoding and broadband networking technology.",
                "This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository.",
                "The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data.",
                "The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms.",
                "The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content.",
                "Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic.",
                "First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems.",
                "Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints.",
                "This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level.",
                "For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event.",
                "At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult.",
                "However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible.",
                "This scenario is increasingly common in network based content distribution systems and is likely to also become important in home-networking scenarios.",
                "It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed.",
                "This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences.",
                "The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general).",
                "The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content.",
                "Addressing this distributed content management problem is difficult due to the number of requirements placed on the system.",
                "For example: • The content management system must operate on a large number of heterogeneous systems.",
                "In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance.",
                "The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer.",
                "A application program interface (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies.",
                "These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded.",
                "This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams.",
                "It needs to be able to package this content in such a way that it is convenient for users to access.",
                "To address these issues we have designed and implemented the Spectrum content management system architecture.",
                "Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers.",
                "It allows multiple applications to reference content using differing policies.",
                "Note that the Spectrum architecture assumes the existence of a content distribution network (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]).",
                "The rest of this paper is organized as follows.",
                "Section 2 describes the architecture of our content management system.",
                "In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use.",
                "Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2.",
                "THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1.",
                "The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences.",
                "For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. policy manager: implements and enforces various storage polices that the content manager uses to refer to content.",
                "The policy manager exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy.",
                "Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized.",
                "It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time).",
                "A key aspect of the policy manager is that it allows different policies to be simultaneously applied to the same content (or parts of the same content).",
                "Furthermore content can only exist in the system so long as it is referenced by at least one existing policy.",
                "Policy conflicts are eliminated by having the policy manager deal exclusively with retention policies rather than with a mix of retention and eviction policies.",
                "This means that content with no policy associated with it is immediately and automatically removed from the system.",
                "This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects.",
                "Note that a key difference between the content manager and the policy manager is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content.",
                "On the other hand, the policy manager is only concerned with the policy used to manage standalone pieces of content.",
                "For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace.",
                "However, at the policy manager level, each piece of content has 5 Content Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers.",
                "Specifically the storage manager stores content in sub-object chunks.",
                "This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR.",
                "Note that the storage manager has no knowledge of the policies being used by the content and policy managers.",
                "Another unique part of our approach is that the interfaces between the layers can either be local or distributed.",
                "Figure 1 shows the four possible cases.",
                "The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box.",
                "This configuration would be used in selfcontained applications such as PVRs.",
                "The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage.",
                "In this case although the remote devices are controlled by the central manager they operate much more independently.",
                "For example, once they receive instructions from the central manager they typically operate in autonomous fashion.",
                "An example of this type of configuration is a content distribution network (CDN) that distributes and stores content based on a schedule determined by some centralized controller.",
                "For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment.",
                "Allowing a single policy manager to control several storage managers leads to the next combination of functions and the most distributed case.",
                "The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single policy manager.",
                "The final case shows a content manager combined with a policy manager controlling a remote storage manager.",
                "This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the policy manager.",
                "We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture.",
                "As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity.",
                "The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system.",
                "Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction.",
                "Once a device is mapped into the application through this interface, the system tracks its type and location.",
                "Users simply refer to the content through an application-provided label.",
                "Stores: Stores are subsets of physical storage devices.",
                "Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it.",
                "Stores can only be created in physical devices that are mapped into the system.",
                "Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content.",
                "Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy.",
                "Policy groups are created within existing stores in the system.",
                "The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage.",
                "In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time.",
                "For example, a simple time-based policy could evict content from the system at a certain absolute or relative time.",
                "A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system).",
                "Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system.",
                "Content is specified to the system by means of a uniform resource locator (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it.",
                "Optionally a time specification can be associated with content.",
                "This allows content to be fetched into the system at some future time, or at future time intervals.",
                "Again, this is particularly useful for dealing with the storage and management of live content. 2.2 Policy Manager The policy manager layer of the Spectrum architecture has two main types of API functions.",
                "First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there.",
                "Second, there are sets of functions used to implement each management policy.",
                "The first class of functions is used by the content manager layer to access storage.",
                "Operations include: create, open, and close: These operations are used by the content manager to control its access to storage.",
                "The policy managers create operation is used to establish contact with a store for the first time.",
                "Once this is done, the store can be open and closed using the appropriate routines.",
                "Note that the parameters used to create a store contain information on how to reach it.",
                "For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them.",
                "The information only needs to be passed to the policy manager once at create time.",
                "For open operations, the policy manager will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the policy manager about what content is currently present for a given URL.",
                "For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the policy manager about its current resource usage.",
                "There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference.",
                "The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store.",
                "If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available).",
                "Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy.",
                "The result of a successful pref establish operation is a policy reference ID string.",
                "This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely.",
                "The second group of policy manager functions are used to implement all the polices supported by Spectrum.",
                "We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly.",
                "Note that the policy manager is only concerned with executing a specific policy.",
                "The higher-level reasons for choosing a given policy are handled by the content and application manager.",
                "A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters.",
                "The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time.",
                "It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest.",
                "The base policy typically arranges for newclip to be called for a given URL when the pref is established.",
                "When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback.",
                "This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down.",
                "The boot operation is typically used to schedule initial callbacks or start I/O operations.",
                "The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store.",
                "Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance).",
                "For continuous media, at the storage manager level content is stored as a collection of time-based chunks.",
                "Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database.",
                "The two main storage manager operations are input and output.",
                "The input routine is used to store content in a store under a given name.",
                "The output routine is used to send data from the store to a client.",
                "For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future.",
                "Much like the policy manager, the storage manager also provides API functions to create, open, and close stores.",
                "It also supports operations to query the resource usages and options supported by the store.",
                "Finally, the storage manager also has a discard routine that may be used by the policy manager to inform the store to remove content from the store. 3.",
                "IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications.",
                "Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles.",
                "For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally.",
                "Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem.",
                "To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure.",
                "Each API call takes a pointer to a reqinfo structure as one of its arguments.",
                "This structure is used to hold the call state and return status.",
                "For async calls, the reqinfo also contains a pointer to a callback function.",
                "To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure.",
                "For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc.",
                "For async calls, a callback function must be provided when the reqinfo is allocated.",
                "Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument.",
                "For sync calls, the result of the calls is returned immediately in the reqinfo structure.",
                "For successful async calls, a call in progress value is returned.",
                "Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing.",
                "The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality.",
                "Furthermore, communication between functions is typically of a master-slave(s) nature.",
                "This means that several approaches to distributed operation are possible that would satisfy the architectural requirements.",
                "In our implementation we have opted to realize this functionality with a simple modular design.",
                "We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred.",
                "Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP.",
                "We currently are using plain TCP for most of our transport.",
                "Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML.",
                "We are currently using the eXpat XML library [4] to encode our calls.",
                "While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol.",
                "An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms.",
                "As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized.",
                "To address this issue, we treat each base-level policy as if it was a separate program.",
                "Each base-level policy should have a well known name and command line options for parameterization.",
                "In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function.",
                "This format is easily understood and provides portability since byte order is not an issue in a string.",
                "Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment.",
                "The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3].",
                "The Spectrum system is applicable to both scenarios as follows.",
                "Figure 2 shows the Network Enabled DVR (NED) architecture.",
                "In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration.",
                "The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs.",
                "This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content.",
                "Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers.",
                "The use of Spectrum in a streaming content distribution architecture (e.g.",
                "PRISM [2]) is depicted in Figure 3.",
                "In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served.",
                "In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals.",
                "The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window.",
                "To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content.",
                "The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream.",
                "As each chunk of streaming data arrives, the policy manager executes the policy references newclip function.",
                "The newclip function adds a reference to each arriving chunk, and schedules a callback a day later.",
                "At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy.",
                "Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week.",
                "To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved.",
                "Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week.",
                "After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference.",
                "After the additional week has past, the callback function for the second reference will be called.",
                "This function will discard the remaining reference to the content and as there are no remaining references the content will be freed.",
                "In order to function in scenarios like the ones described above, Spectrums policy manager must manage and maintain all the references to various chunks of media.",
                "These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted.",
                "Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure 4.",
                "There are three classes of data stored, and each class has its own top level directory.",
                "The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media.",
                "The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime.",
                "Note that this directory is used only if the storage manager is local.",
                "If the policy manager is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the policy manager. meta: this directory contains general meta information about the storage manager being used and the data it is storing.",
                "General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle.",
                "The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored.",
                "The chunks file contains a list of chunks currently stored and their reference counts.",
                "The prefs file contains a list of active policy references that point to this URL.",
                "The ranges file contains a list of time ranges of data currently stored.",
                "Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories.",
                "Each host subdirectory contains the set of policy references created by that host.",
                "Information on each policy reference is broken up into three files.",
                "For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state.",
                "The ref1 file contains information about the policy reference that does not change frequently.",
                "This information includes the base-policy and the parameters used to create the reference.",
                "The ref1.files file contains the list of references to chunks that pref ref1 owns.",
                "Finally, the ref1.state file contains optional policy-specific state information that can change over time.",
                "Together, these files and directories are used to track references in our implementation of Spectrum.",
                "Note that other implementations are possible.",
                "For example, a carrier-grade Spectrum manager might store all its policy and reference information in a high-performance database system. 10 4.",
                "RELATED WORK Several authors have addressed the problem of the management of content in distributed networks.",
                "Much of the work focuses on the policy management aspect.",
                "For example in [5], the problem of serving multimedia content via distributed servers is considered.",
                "Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol.",
                "The performance of the scheme is benchmarked via simulation.",
                "In [1] content is distributed among sub-caches.",
                "The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge.",
                "The Cache Knowledge base allows sophisticated policies to be employed.",
                "Simulation is used to compare the proposed scheme with well-known replacement algorithms.",
                "Our work differs in that we are considering more than the policy management aspects of the problem.",
                "After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, Policy manager and Storage manager.",
                "This has allowed us to easily implement and experiment with a prototype system.",
                "Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6].",
                "In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture.",
                "Finally, in the commercial CDN environment vendors (e.g.",
                "Cisco and Netapp) have developed and implemented content management products and tools.",
                "Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5.",
                "CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture.",
                "Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage.",
                "Specifically, the system allows different policies to be applied to the same content without replication.",
                "Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content.",
                "Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications.",
                "There are a number of open issues that will require future work.",
                "Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8].",
                "In order for these smaller systems to support Spectrum they will require networking and an external API.",
                "When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user.",
                "While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects.",
                "We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance.",
                "Adapting Spectrum to meet legal requirements will likely require more technical work. 6.",
                "REFERENCES [1] K. .",
                "Cheng and Y. Kambayashi.",
                "Multicache-based Content Management for Web Caching.",
                "Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "PRISM Architecture: Supporting Enhanced Streaming Services in a Content Distribution Network.",
                "IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy.",
                "A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture.",
                "NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman.",
                "A multi-agent TV recommender.",
                "Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "home-networking scenario": {
            "translated_key": "escenarios de redes domésticas",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E.",
                "van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices.",
                "Keeping track of (or managing) such content remains challenging due to the sheer volume of data.",
                "Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with.",
                "Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system.",
                "In this paper we present the design and implementation of the Spectrum content management system, which deals with rich media content effectively in this environment.",
                "Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios.",
                "A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system.",
                "This means that there are no eviction policies.",
                "Content that no longer has a retention policy applied to it is simply removed from the system.",
                "Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication.",
                "This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content.",
                "We not only describe the details of the Spectrum architecture but also give typical use cases.",
                "Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1.",
                "INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer.",
                "Initial computing applications include text formatters and program compilers.",
                "Content was initially managed by explicit user interaction through the use of files and filesystems.",
                "As technology has advanced, both the types of content and the way people wish to use it have greatly changed.",
                "New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies.",
                "For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive.",
                "This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7].",
                "Another example is the combination of encoding and broadband networking technology.",
                "This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository.",
                "The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data.",
                "The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms.",
                "The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content.",
                "Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic.",
                "First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems.",
                "Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints.",
                "This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level.",
                "For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event.",
                "At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult.",
                "However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible.",
                "This scenario is increasingly common in network based content distribution systems and is likely to also become important in <br>home-networking scenario</br>s.",
                "It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed.",
                "This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences.",
                "The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general).",
                "The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content.",
                "Addressing this distributed content management problem is difficult due to the number of requirements placed on the system.",
                "For example: • The content management system must operate on a large number of heterogeneous systems.",
                "In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance.",
                "The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer.",
                "A application program interface (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies.",
                "These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded.",
                "This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams.",
                "It needs to be able to package this content in such a way that it is convenient for users to access.",
                "To address these issues we have designed and implemented the Spectrum content management system architecture.",
                "Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers.",
                "It allows multiple applications to reference content using differing policies.",
                "Note that the Spectrum architecture assumes the existence of a content distribution network (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]).",
                "The rest of this paper is organized as follows.",
                "Section 2 describes the architecture of our content management system.",
                "In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use.",
                "Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2.",
                "THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1.",
                "The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences.",
                "For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. policy manager: implements and enforces various storage polices that the content manager uses to refer to content.",
                "The policy manager exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy.",
                "Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized.",
                "It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time).",
                "A key aspect of the policy manager is that it allows different policies to be simultaneously applied to the same content (or parts of the same content).",
                "Furthermore content can only exist in the system so long as it is referenced by at least one existing policy.",
                "Policy conflicts are eliminated by having the policy manager deal exclusively with retention policies rather than with a mix of retention and eviction policies.",
                "This means that content with no policy associated with it is immediately and automatically removed from the system.",
                "This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects.",
                "Note that a key difference between the content manager and the policy manager is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content.",
                "On the other hand, the policy manager is only concerned with the policy used to manage standalone pieces of content.",
                "For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace.",
                "However, at the policy manager level, each piece of content has 5 Content Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers.",
                "Specifically the storage manager stores content in sub-object chunks.",
                "This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR.",
                "Note that the storage manager has no knowledge of the policies being used by the content and policy managers.",
                "Another unique part of our approach is that the interfaces between the layers can either be local or distributed.",
                "Figure 1 shows the four possible cases.",
                "The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box.",
                "This configuration would be used in selfcontained applications such as PVRs.",
                "The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage.",
                "In this case although the remote devices are controlled by the central manager they operate much more independently.",
                "For example, once they receive instructions from the central manager they typically operate in autonomous fashion.",
                "An example of this type of configuration is a content distribution network (CDN) that distributes and stores content based on a schedule determined by some centralized controller.",
                "For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment.",
                "Allowing a single policy manager to control several storage managers leads to the next combination of functions and the most distributed case.",
                "The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single policy manager.",
                "The final case shows a content manager combined with a policy manager controlling a remote storage manager.",
                "This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the policy manager.",
                "We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture.",
                "As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity.",
                "The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system.",
                "Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction.",
                "Once a device is mapped into the application through this interface, the system tracks its type and location.",
                "Users simply refer to the content through an application-provided label.",
                "Stores: Stores are subsets of physical storage devices.",
                "Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it.",
                "Stores can only be created in physical devices that are mapped into the system.",
                "Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content.",
                "Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy.",
                "Policy groups are created within existing stores in the system.",
                "The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage.",
                "In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time.",
                "For example, a simple time-based policy could evict content from the system at a certain absolute or relative time.",
                "A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system).",
                "Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system.",
                "Content is specified to the system by means of a uniform resource locator (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it.",
                "Optionally a time specification can be associated with content.",
                "This allows content to be fetched into the system at some future time, or at future time intervals.",
                "Again, this is particularly useful for dealing with the storage and management of live content. 2.2 Policy Manager The policy manager layer of the Spectrum architecture has two main types of API functions.",
                "First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there.",
                "Second, there are sets of functions used to implement each management policy.",
                "The first class of functions is used by the content manager layer to access storage.",
                "Operations include: create, open, and close: These operations are used by the content manager to control its access to storage.",
                "The policy managers create operation is used to establish contact with a store for the first time.",
                "Once this is done, the store can be open and closed using the appropriate routines.",
                "Note that the parameters used to create a store contain information on how to reach it.",
                "For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them.",
                "The information only needs to be passed to the policy manager once at create time.",
                "For open operations, the policy manager will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the policy manager about what content is currently present for a given URL.",
                "For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the policy manager about its current resource usage.",
                "There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference.",
                "The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store.",
                "If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available).",
                "Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy.",
                "The result of a successful pref establish operation is a policy reference ID string.",
                "This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely.",
                "The second group of policy manager functions are used to implement all the polices supported by Spectrum.",
                "We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly.",
                "Note that the policy manager is only concerned with executing a specific policy.",
                "The higher-level reasons for choosing a given policy are handled by the content and application manager.",
                "A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters.",
                "The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time.",
                "It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest.",
                "The base policy typically arranges for newclip to be called for a given URL when the pref is established.",
                "When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback.",
                "This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down.",
                "The boot operation is typically used to schedule initial callbacks or start I/O operations.",
                "The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store.",
                "Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance).",
                "For continuous media, at the storage manager level content is stored as a collection of time-based chunks.",
                "Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database.",
                "The two main storage manager operations are input and output.",
                "The input routine is used to store content in a store under a given name.",
                "The output routine is used to send data from the store to a client.",
                "For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future.",
                "Much like the policy manager, the storage manager also provides API functions to create, open, and close stores.",
                "It also supports operations to query the resource usages and options supported by the store.",
                "Finally, the storage manager also has a discard routine that may be used by the policy manager to inform the store to remove content from the store. 3.",
                "IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications.",
                "Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles.",
                "For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally.",
                "Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem.",
                "To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure.",
                "Each API call takes a pointer to a reqinfo structure as one of its arguments.",
                "This structure is used to hold the call state and return status.",
                "For async calls, the reqinfo also contains a pointer to a callback function.",
                "To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure.",
                "For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc.",
                "For async calls, a callback function must be provided when the reqinfo is allocated.",
                "Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument.",
                "For sync calls, the result of the calls is returned immediately in the reqinfo structure.",
                "For successful async calls, a call in progress value is returned.",
                "Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing.",
                "The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality.",
                "Furthermore, communication between functions is typically of a master-slave(s) nature.",
                "This means that several approaches to distributed operation are possible that would satisfy the architectural requirements.",
                "In our implementation we have opted to realize this functionality with a simple modular design.",
                "We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred.",
                "Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP.",
                "We currently are using plain TCP for most of our transport.",
                "Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML.",
                "We are currently using the eXpat XML library [4] to encode our calls.",
                "While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol.",
                "An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms.",
                "As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized.",
                "To address this issue, we treat each base-level policy as if it was a separate program.",
                "Each base-level policy should have a well known name and command line options for parameterization.",
                "In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function.",
                "This format is easily understood and provides portability since byte order is not an issue in a string.",
                "Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment.",
                "The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3].",
                "The Spectrum system is applicable to both scenarios as follows.",
                "Figure 2 shows the Network Enabled DVR (NED) architecture.",
                "In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration.",
                "The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs.",
                "This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content.",
                "Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers.",
                "The use of Spectrum in a streaming content distribution architecture (e.g.",
                "PRISM [2]) is depicted in Figure 3.",
                "In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served.",
                "In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals.",
                "The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window.",
                "To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content.",
                "The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream.",
                "As each chunk of streaming data arrives, the policy manager executes the policy references newclip function.",
                "The newclip function adds a reference to each arriving chunk, and schedules a callback a day later.",
                "At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy.",
                "Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week.",
                "To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved.",
                "Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week.",
                "After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference.",
                "After the additional week has past, the callback function for the second reference will be called.",
                "This function will discard the remaining reference to the content and as there are no remaining references the content will be freed.",
                "In order to function in scenarios like the ones described above, Spectrums policy manager must manage and maintain all the references to various chunks of media.",
                "These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted.",
                "Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure 4.",
                "There are three classes of data stored, and each class has its own top level directory.",
                "The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media.",
                "The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime.",
                "Note that this directory is used only if the storage manager is local.",
                "If the policy manager is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the policy manager. meta: this directory contains general meta information about the storage manager being used and the data it is storing.",
                "General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle.",
                "The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored.",
                "The chunks file contains a list of chunks currently stored and their reference counts.",
                "The prefs file contains a list of active policy references that point to this URL.",
                "The ranges file contains a list of time ranges of data currently stored.",
                "Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories.",
                "Each host subdirectory contains the set of policy references created by that host.",
                "Information on each policy reference is broken up into three files.",
                "For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state.",
                "The ref1 file contains information about the policy reference that does not change frequently.",
                "This information includes the base-policy and the parameters used to create the reference.",
                "The ref1.files file contains the list of references to chunks that pref ref1 owns.",
                "Finally, the ref1.state file contains optional policy-specific state information that can change over time.",
                "Together, these files and directories are used to track references in our implementation of Spectrum.",
                "Note that other implementations are possible.",
                "For example, a carrier-grade Spectrum manager might store all its policy and reference information in a high-performance database system. 10 4.",
                "RELATED WORK Several authors have addressed the problem of the management of content in distributed networks.",
                "Much of the work focuses on the policy management aspect.",
                "For example in [5], the problem of serving multimedia content via distributed servers is considered.",
                "Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol.",
                "The performance of the scheme is benchmarked via simulation.",
                "In [1] content is distributed among sub-caches.",
                "The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge.",
                "The Cache Knowledge base allows sophisticated policies to be employed.",
                "Simulation is used to compare the proposed scheme with well-known replacement algorithms.",
                "Our work differs in that we are considering more than the policy management aspects of the problem.",
                "After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, Policy manager and Storage manager.",
                "This has allowed us to easily implement and experiment with a prototype system.",
                "Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6].",
                "In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture.",
                "Finally, in the commercial CDN environment vendors (e.g.",
                "Cisco and Netapp) have developed and implemented content management products and tools.",
                "Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5.",
                "CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture.",
                "Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage.",
                "Specifically, the system allows different policies to be applied to the same content without replication.",
                "Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content.",
                "Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications.",
                "There are a number of open issues that will require future work.",
                "Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8].",
                "In order for these smaller systems to support Spectrum they will require networking and an external API.",
                "When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user.",
                "While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects.",
                "We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance.",
                "Adapting Spectrum to meet legal requirements will likely require more technical work. 6.",
                "REFERENCES [1] K. .",
                "Cheng and Y. Kambayashi.",
                "Multicache-based Content Management for Web Caching.",
                "Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "PRISM Architecture: Supporting Enhanced Streaming Services in a Content Distribution Network.",
                "IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy.",
                "A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture.",
                "NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman.",
                "A multi-agent TV recommender.",
                "Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11"
            ],
            "original_annotated_samples": [
                "This scenario is increasingly common in network based content distribution systems and is likely to also become important in <br>home-networking scenario</br>s."
            ],
            "translated_annotated_samples": [
                "Este escenario es cada vez más común en sistemas de distribución de contenido basados en redes y es probable que también cobre importancia en <br>escenarios de redes domésticas</br>."
            ],
            "translated_text": "Diseño e Implementación de un Sistema de Gestión de Contenido Distribuido por C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ y J.E. La convergencia de avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan y se intercambian rutinariamente entre dispositivos habilitados para redes. El seguimiento (o gestión) de dicho contenido sigue siendo un desafío debido a la gran cantidad de datos. Almacenar medios continuos en vivo (como contenido de televisión o radio) aumenta la complejidad debido a que este contenido no tiene un inicio o fin bien definido y, por lo tanto, resulta engorroso de manejar. El almacenamiento en red permite que el contenido que se ve lógicamente como parte de la misma colección esté distribuido en una red, lo que hace que la gestión de contenido sea casi imposible de manejar sin un sistema de gestión de contenido. En este documento presentamos el diseño e implementación del sistema de gestión de contenido Spectrum, que maneja de manera efectiva el contenido de medios enriquecidos en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto en escenarios independientes como en diferentes entornos de red. Un aspecto único de Spectrum es que requiere que se aplique una (o más) políticas de retención a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido al que ya no se le aplica una política de retención simplemente se elimina del sistema. Diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo, que son bloques de construcción básicos necesarios para manejar el almacenamiento de medios continuos en vivo, al contenido. No solo describimos los detalles de la arquitectura del Spectrum, sino que también proporcionamos casos de uso típicos. Categorías y Descriptores de Asignaturas C.2.4 [Organización de Sistemas Informáticos]: Redes de comunicación informática-sistemas distribuidos; H.3.4 [Sistemas de Información]: Almacenamiento de información y recuperación-sistemas y software Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar contenido es y siempre ha sido una de las funciones principales de una computadora. Las aplicaciones iniciales de computación incluyen formateadores de texto y compiladores de programas. El contenido era gestionado inicialmente mediante la interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que las personas desean utilizarlo han cambiado considerablemente. Nuevos tipos de contenido, como las transmisiones multimedia continuas, se han vuelto comunes debido a la convergencia de avances en tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de video codificado de calidad televisiva en un solo disco duro. Esto ha llevado a la introducción de sistemas de grabación de video digital independientes o personales, como TiVO y ReplayTV. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas, con la red misma actuando como un gran repositorio de datos. La proliferación de contenido de alta calidad habilitada por estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. El enfoque de nuestro trabajo se centra en el almacenamiento de contenido multimedia y, en particular, en el almacenamiento de contenido multimedia continuo en forma preempaquetada o en vivo. La necesidad de gestión de contenido en esta área es evidente cuando se considera lo siguiente: • Los aumentos en la capacidad y las disminuciones en el costo de almacenamiento significan que incluso los sistemas de escritorio modestos de hoy tienen la capacidad de almacenar grandes cantidades de contenido. La gestión manual de dicho contenido (o más correctamente, la falta de gestión manual de dicho contenido) conduce a grandes ineficiencias donde el contenido no deseado y olvidado se acumula y donde el contenido deseado no se puede encontrar. • Aunque es cierto para todos los tipos de contenido, el almacenamiento de contenido de medios continuos es especialmente problemático. El primer contenido de medios continuos sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque sin política para almacenarlo no funcionará para todos, excepto para los sistemas más pequeños. Segundo, el almacenamiento de contenido en vivo como la televisión o la radio es inherentemente problemático ya que estas señales son flujos continuos sin puntos finales. Esto significa que antes de siquiera pensar en gestionar dicho contenido, es necesario abstraerlo en algo que pueda ser manipulado y gestionado. Al tratar con medios continuos almacenados, es necesario gestionar dicho contenido tanto a un nivel detallado como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar solo los momentos destacados de un evento deportivo en particular no debería estar obligado a tener que almacenar el contenido relacionado con todo el evento. Al mismo tiempo, el usuario podría querer considerar el contenido en su totalidad, por ejemplo, eliminar todo el contenido que no he visto en el último mes, excepto aquel contenido que fue marcado explícitamente para archivar. • Como se indicó anteriormente, tratar de mantener un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenido es muy difícil. Sin embargo, cuando los dispositivos de almacenamiento reales están distribuidos en una red, la tarea de llevar un registro del contenido es casi imposible. Este escenario es cada vez más común en sistemas de distribución de contenido basados en redes y es probable que también cobre importancia en <br>escenarios de redes domésticas</br>. Parecería claro entonces que se necesita un sistema de gestión de contenido que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que aproveche la capacidad de almacenamiento en red de los dispositivos. Este sistema debería permitir el almacenamiento eficiente y el acceso al contenido en dispositivos de almacenamiento de red heterogéneos de acuerdo a las preferencias del usuario. El sistema de gestión de contenido debe traducir las preferencias del usuario en políticas de almacenamiento de bajo nivel apropiadas y permitir que esas preferencias se expresen a un nivel de granularidad fino (sin requerirlo en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar sobre (es decir, cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenido distribuido es difícil debido a la cantidad de requisitos impuestos en el sistema. Por ejemplo: • El sistema de gestión de contenidos debe operar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando contenido almacenado en un sistema de archivos local, mientras que en otros el contenido puede estar almacenado en un dispositivo de almacenamiento de red separado. El administrador de contenido puede ser responsable de implementar las políticas que utiliza para hacer referencia al contenido o ese rol puede ser delegado a un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. El sistema de gestión de contenidos debe ser flexible y capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe ser obtenido, cuándo debe ser recuperado, cuánto tiempo debe ser retenido y en qué circunstancias debe ser descartado. Esto significa que el sistema de gestión de contenido debe permitir que múltiples aplicaciones hagan referencia al contenido con un conjunto amplio de políticas y que todo funcione de manera integrada. • El sistema de gestión de contenido debe ser capaz de monitorear las referencias al contenido y utilizar esa información para ubicar el contenido en la ubicación correcta en la red para un acceso eficiente de las aplicaciones. • El sistema de gestión de contenido debe manejar la interacción entre la población implícita y explícita del contenido en el borde de la red. • El sistema de contenido debe ser capaz de gestionar eficientemente grandes conjuntos de contenido, incluidos flujos continuos. Debe ser capaz de empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas, hemos diseñado e implementado la arquitectura del sistema de gestión de contenido Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan ya sea en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite que múltiples aplicaciones hagan referencia al contenido utilizando políticas diferentes. Se debe tener en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenido (CDN) que puede facilitar la distribución eficiente de contenido (por ejemplo, la arquitectura CDN PRISM [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. El trabajo relacionado se describe en la Sección 4, y la Sección 5 contiene nuestra conclusión y sugerencias para trabajos futuros. 2. La arquitectura del sistema de gestión de contenido distribuido Spectrum consta de tres capas de gestión distintas que pueden o no estar distribuidas en múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todo el contenido de una aplicación según las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de video personal (PVR), el administrador de contenido recibe solicitudes de contenido desde una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y gestionar contenido en el dispositivo. El administrador de políticas implementa y hace cumplir varias políticas de almacenamiento que el administrador de contenido utiliza para hacer referencia al contenido. El gestor de políticas exporta una interfaz al gestor de contenido que le permite al gestor de contenido solicitar que un contenido sea tratado de acuerdo con una política específica. Spectrum permite que se realicen políticas arbitrarias al proporcionar un conjunto fijo de plantillas de políticas base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (de lo contrario, Spectrum se puede extender fácilmente para cargar dinámicamente nuevo código de plantilla de política base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido solo puede existir en el sistema siempre y cuando esté referenciado por al menos una política existente. Los conflictos de políticas se eliminan al hacer que el administrador de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin política asociada se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar de forma natural el intercambio de contenido entre diferentes políticas, lo cual es fundamental para el almacenamiento eficiente de objetos grandes. Ten en cuenta que una diferencia clave entre el gestor de contenido y el gestor de políticas es que el gestor de contenido gestiona referencias a múltiples piezas de contenido, es decir, tiene una vista de aplicación del contenido. Por otro lado, el gerente de políticas solo se preocupa por la política utilizada para gestionar piezas de contenido independientes. Por ejemplo, en una aplicación de PVR, la capa del gestor de contenido conocería los diferentes grupos de contenido gestionado, como mantener indefinidamente, mantener por un día y mantener si hay espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada pieza de contenido tiene su propia política (o políticas) aplicada a ella y es independiente de otro contenido. El gestor de almacenamiento: almacena contenido de manera eficiente mientras facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento guarda el contenido en fragmentos de subobjetos. Este enfoque tiene ventajas para la recuperación eficiente de contenido, pero lo más importante es que permite aplicar políticas a nivel de subobjeto, lo cual es críticamente importante al tratar con objetos muy grandes como partes de medios continuos, por ejemplo, piezas seleccionadas de contenido de televisión almacenadas en un PVR. Ten en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas que están siendo utilizadas por los gestores de contenido y de políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la figura muestra el caso más simple (no distribuido) donde todas las capas están implementadas en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como los PVRs. El siguiente caso corresponde al caso en el que hay un gestor de contenido centralizado que controla dispositivos de almacenamiento distribuido, cada uno de los cuales es responsable de implementar almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, operan de manera mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, típicamente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido según un horario determinado por algún controlador centralizado. Por ejemplo, la CDN podría precargar dispositivos periféricos con contenido que se espera que sea muy popular o distribuir archivos grandes a sucursales durante las horas de menor tráfico en un entorno empresarial con limitaciones de ancho de banda. Permitir que un único administrador de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y al caso más distribuido. La necesidad de este tipo de separación puede surgir por razones de escalabilidad o cuando se requiere controlar diferentes dispositivos de almacenamiento especializados con un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas controlando un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo detallado por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de Contenidos La capa del gestor de contenidos es la interfaz principal a través de la cual las aplicaciones específicas utilizan la arquitectura Spectrum. Por lo tanto, la capa del gestor de contenido proporciona una API para que la aplicación pueda manipular todos los aspectos de la arquitectura de Spectrum en diferentes niveles de granularidad. La API del gestor de contenido tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite agregar dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo el control del gestor de contenido y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos; este es el único lugar en la arquitectura donde la aplicación debe ser consciente de esta distinción. Una vez que un dispositivo es mapeado en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Almacenes: Los almacenes son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (por ejemplo, espacio en disco) a la misma. Las tiendas solo se pueden crear en dispositivos físicos que estén mapeados en el sistema. Grupos de Políticas: Los grupos de políticas son el medio por el cual una aplicación especifica, instancia y modifica las políticas que se aplican al contenido del Espectro. El uso típico de este conjunto de funciones es seleccionar una de un pequeño conjunto de políticas base y parametrizar esta instancia específica de la política. Los grupos de políticas se crean dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento y que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que incluyen una especificación de tiempo sofisticada permiten un almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría expulsar el contenido del sistema en un momento absoluto o relativo específico. Una política basada en el tiempo un poco más compleja habilitada por la arquitectura Spectrum podría permitir que el contenido se almacene en una ventana de tiempo de un número de horas (por ejemplo, las N horas más recientes se mantienen en el sistema). Las políticas basadas en el tiempo son de particular utilidad al tratar con contenido continuo como una transmisión en vivo. 6 Contenido: En el nivel más fino de granularidad, el contenido puede ser añadido o eliminado del sistema. El contenido se especifica al sistema mediante un localizador uniforme de recursos (URL) que indica de manera concisa la ubicación del contenido, así como el protocolo a utilizar para recuperarlo. Opcionalmente se puede asociar una especificación de tiempo con el contenido. Esto permite que el contenido sea recuperado en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Nuevamente, esto es particularmente útil para tratar con el almacenamiento y gestión de contenido en vivo. 2.2 Gestor de Políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones de API. Primero, hay funciones que operan en áreas de almacenamiento gestionadas y referencias basadas en políticas (prefs) al contenido almacenado allí. Segundo, hay conjuntos de funciones utilizadas para implementar cada política de gestión. La primera clase de funciones es utilizada por la capa de gestión de contenido para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar. Estas operaciones son utilizadas por el gestor de contenido para controlar su acceso al almacenamiento. El proceso de creación de políticas de gestión de operaciones se utiliza para establecer contacto con una tienda por primera vez. Una vez que esto se haya hecho, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Ten en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información solo necesita ser transmitida al administrador de políticas una vez al momento de la creación. Para operaciones abiertas, el administrador de políticas utilizará la información en caché para contactar a la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el administrador de contenido consulte al administrador de políticas sobre qué contenido está actualmente presente para una URL dada. Para medios continuos, se devolverán rangos de tiempo de medios presentes. recurso: Las rutinas de recurso se utilizan para consultar al administrador de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su totalidad y otra que se aplica a una referencia de política en particular. La API de recursos es extensible, actualmente admitimos consultas sobre el uso de disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer se utiliza por el gestor de contenido para hacer referencia al contenido en la tienda. Si el contenido no está presente, esta llamada resultará en la obtención del contenido (o en la programación para obtenerlo si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL donde se almacenará, la URL desde la cual se obtendrán los datos si no están presentes, la política para almacenar el contenido y los argumentos utilizados para parametrizar la política. El resultado de una operación de establecimiento de prefijo exitosa es una cadena de identificación de referencia de política. Este identificador se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones del gestor de políticas se utilizan para implementar todas las políticas respaldadas por Spectrum. Visualizamos un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitiva puede ser parametrizada para funcionar diariamente, semanalmente o mensualmente. Ten en cuenta que el gestor de políticas solo se preocupa por ejecutar una política específica. Las razones de nivel superior para elegir una política determinada son manejadas por el gerente de contenido y aplicación. Una política base se implementa utilizando seis funciones: establecer: se llama cuando se establece una preferencia con las URL requeridas y los parámetros de la política base. El rutina establecida hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar acción (por ejemplo, iniciar una descarga) y programa una devolución de llamada para ese momento. También puede registrarse para recibir devoluciones de llamada si se recibe nuevo contenido para una URL específica. actualizar: se llama para cambiar los parámetros de una preferencia, o para descartar la referencia de la política. newclip: se llama cuando se recibe un fragmento de nuevo contenido para una URL de interés. La política base normalmente establece que se llame a newclip para una URL dada cuando se establece la preferencia. Cuando se llama a newclip, la política base verifica sus parámetros para determinar si desea agregar una referencia al clip recién recibido. callback: llamado cuando la preferencia programa una devolución de llamada basada en temporizador. Este es un mecanismo útil de activación para preferencias que necesitan estar inactivas durante un largo período de tiempo (por ejemplo, entre programas). arranque/apagado: se llama cuando el sistema de gestión de contenidos se está iniciando o apagando. La operación de arranque se utiliza típicamente para programar devoluciones de llamada iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para cerrar de forma ordenada los flujos de entrada/salida y guardar el estado. 2.3 Gestor de almacenamiento El rol del gestor de almacenamiento de Spectrum es controlar todas las operaciones de entrada/salida asociadas con una tienda dada. El gestor de almacenamiento de Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo, un dispositivo de almacenamiento). Para los medios continuos, a nivel del gestor de almacenamiento, el contenido se almacena como una colección de fragmentos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un fragmento podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión en continuo, tanto las rutinas de entrada como de salida toman rangos de tiempo que programan cuándo debe ocurrir la operación de E/S, y ambas rutinas devuelven un identificador de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el administrador de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar almacenes. También admite operaciones para consultar los usos de recursos y opciones admitidas por la tienda. Finalmente, el administrador de almacenamiento también tiene un procedimiento de descarte que puede ser utilizado por el administrador de políticas para informar a la tienda que elimine contenido de la tienda. 3. IMPLEMENTACIÓN Y CASOS DE USO En esta sección describimos nuestra implementación de Spectrum y cómo puede ser utilizada. 3.1 Implementación Hemos implementado las tres capas de Spectrum en C como parte de una biblioteca que puede ser enlazada con aplicaciones basadas en Spectrum. Cada capa lleva un registro de su estado a través de un conjunto de archivos de datos locales que persisten a través de reinicios, lo que permite a Spectrum manejar los ciclos de energía de manera fluida. Para las capas que residen en sistemas remotos (por ejemplo, una tienda remota), solo se almacena localmente la meta-información necesaria para contactar al administrador de políticas del gestor de contenido remoto, el gestor de almacenamiento, el recuperador de almacenamiento, los listados de programas, la interfaz de usuario gráfica, el DVR habilitado para red, la información del programa, la aplicación de DVR de contenido en la red habilitada para DVR. Figura 2: Espectro en un nodo de DVR habilitado para red. Nuestra aplicación de prueba utiliza un administrador de políticas y almacenamiento local para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficientemente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas de API de Spectrums admiten tanto modos síncronos como asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada a la API toma un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de la llamada y el estado de retorno. Para las llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamada. Para utilizar una función de la API de Spectrum, el llamante primero elige entre el modo sincrónico o asincrónico y asigna una estructura reqinfo. Para llamadas de sincronización, la reqinfo puede ser asignada en la pila, de lo contrario se asigna con malloc. Para llamadas asíncronas, se debe proporcionar una función de devolución de llamada al asignar el reqinfo. A continuación, el llamante invoca la función API de Spectrum deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas asincrónicas exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada asíncrona se completa o se produce un tiempo de espera, se llama a la función de devolución de llamada asíncrona con la información adecuada necesaria para completar el procesamiento. El diseño modular/capas de la arquitectura Spectrum simplifica el objetivo de distribución de funcionalidad. Además, la comunicación entre funciones suele ser de naturaleza maestro-esclavo(s). Esto significa que son posibles varios enfoques para la operación distribuida que cumplirían con los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un diseño modular simple. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y elegir el método de codificación que se debe utilizar con los datos a transferir. Los protocolos de transporte pueden variar desde protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP simple para la mayoría de nuestro transporte. Las llamadas a funciones a través de las diferentes APIs de Spectrum pueden ser codificadas utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos utilizando la biblioteca XML eXpat [4] para codificar nuestras llamadas. Mientras actualmente estamos transfiriendo nuestros mensajes codificados en XML utilizando una conexión TCP simple, en un entorno del mundo real esto puede ser fácilmente reemplazado con una implementación basada en capa de sockets seguros (SSL) para mejorar la seguridad al agregar SSL como protocolo de transporte. Un aspecto importante de Spectrum es que puede gestionar contenido basado en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la Sección 2.2, imagina un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben comprender las políticas de nivel base y cómo pueden ser parametrizadas. Para abordar este problema, tratamos cada política de nivel base como si fuera un programa separado. Cada política de nivel base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada utilizando una función similar a getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de los bytes no es un problema en una cadena. Dado que esta parte de Spectrum no se encuentra en la ruta crítica de los datos, este tipo de formato no representa un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos de Spectrum En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos de Spectrum en nuestro entorno. El enfoque de nuestro trabajo anterior ha sido la distribución de contenido para contenido de medios en streaming [2] y la grabación de video digital habilitada para redes [3]. El sistema Spectrum es aplicable a ambos escenarios de la siguiente manera. La Figura 2 muestra la arquitectura del DVR habilitado para red (NED). En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación de DVR obtiene listados de programas de alguna fuente de red, maneja la presentación al usuario a través de una interfaz gráfica de usuario (GUI) e interactúa con el sistema Spectrum a través de las APIs de la capa de gestión de contenido. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento que se aplicarán a dicho contenido. La obtención del contenido (a través de la red o localmente) y su posterior almacenamiento en el sistema local son manejados por los gestores de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenido en streaming (por ejemplo, PRISM [2]) está representado en la Figura 3. En este entorno, el contenido de medios en streaming (tanto en vivo, enlatado en vivo y a la carta) se distribuye a los portales periféricos desde donde se sirven los puntos finales de streaming. En nuestro entorno, la distribución y almacenamiento de contenido se realiza desde una estación centralizada de gestión de contenido que controla varios de los portales periféricos. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenido sin necesidad de una comunicación continua entre el gestor de contenido y los dispositivos periféricos, es decir, una vez que se han dado instrucciones a los dispositivos periféricos, pueden operar de forma independiente hasta que se deban realizar cambios. Ejemplo operativo de Spectrum 3.3 Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación de PVR basada en Spectrum programada para almacenar un día de contenido de transmisión en una ventana móvil. Para configurar la ventana deslizante, la aplicación utilizaría la API del gestor de contenido para crear un grupo de políticas y una referencia de política al contenido deseado. El establecimiento de la política de ventana de un día en movimiento haría que el gerente de políticas le pida al gerente de almacenamiento que comience a recibir el flujo. A medida que llega cada fragmento de datos en streaming, el gestor de políticas ejecuta la función newclip de las referencias de política. La función newclip agrega una referencia a cada fragmento que llega y programa una devolución de llamada para un día después. En ese momento, la política eliminará su referencia actual de un día al contenido y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considera el caso en el que el usuario decide guardar parte del contenido (por ejemplo, un programa específico) en la ventana deslizante durante una semana adicional. Para hacer esto, la aplicación solicita que el gestor de contenido agregue una nueva referencia de política adicional a la parte del contenido que se va a preservar. Por lo tanto, el contenido preservado tiene dos referencias: una del marco de tiempo móvil y otra de la solicitud de preservar el contenido por una semana adicional. Después de un día, la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. datos base url1 url2 (archivos multimedia...) (archivos multimedia...) almacenamiento de metadatos (información general...) url1 fragmentos preferencias rangos fragmentos multimedia, etc. url2 host poli ref1 ref1.archivos ref1.estado Figura 4: Diseño de datos de la tienda de políticas de Spectrum preservado por la segunda referencia. Después de que haya transcurrido la semana adicional, se llamará a la función de devolución de llamada para la segunda referencia. Esta función descartará la referencia restante al contenido y, como no hay referencias restantes, el contenido será liberado. Para poder funcionar en escenarios como los descritos anteriormente, el gestor de políticas de Spectrums debe administrar y mantener todas las referencias a diferentes fragmentos de medios. Estas referencias son persistentes y, por lo tanto, deben poder sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestro implementación del gestor de políticas de Spectrum logra esto utilizando la estructura de archivos y directorios mostrada en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el gestor de almacenamiento para almacenar los fragmentos de medios de cada URL activa. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Ten en cuenta que este directorio se utiliza solo si el gestor de almacenamiento es local. Si el administrador de políticas está utilizando un administrador de almacenamiento externo (por ejemplo, un dispositivo de almacenamiento), entonces los archivos multimedia se almacenan de forma remota y solo son referenciados de forma remota por el administrador de políticas. meta: este directorio contiene información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) y la información sobre los tipos de fragmentos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los fragmentos de datos almacenados. El archivo de fragmentos contiene una lista de fragmentos almacenados actualmente y sus recuentos de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de intervalos de tiempo de los datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato del medio que se está almacenando bajo la URL actual. poly: este directorio contiene un conjunto de subdirectorios de host. Cada subdirectorio de host contiene el conjunto de referencias de políticas creadas por ese host. La información de cada referencia de política está dividida en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files y ref1.state. El archivo ref1 contiene información sobre la referencia de la política que no cambia con frecuencia. Esta información incluye la política base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a fragmentos que posee el prefijo ref1. Finalmente, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Ten en cuenta que otras implementaciones son posibles. Por ejemplo, un administrador de espectro de calidad de operador podría almacenar toda su información de políticas y referencias en un sistema de base de datos de alto rendimiento. 10 4. TRABAJO RELACIONADO Varios autores han abordado el problema de la gestión de contenido en redes distribuidas. Gran parte del trabajo se centra en el aspecto de gestión de políticas. Por ejemplo, en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda del usuario utilizando un Protocolo de Diseminación de Demanda. El rendimiento del esquema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Enrutador Central, una Base de Conocimiento en Caché, Subcachés y un juez de expulsión de Subcaché. La base de conocimientos de caché permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenido en el entorno de red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenido, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de televisión que se utilizan en los PVR para seleccionar automáticamente contenido para los usuarios, por ejemplo [6]. En el caso de que Spectrum se utilice en una configuración de PVR, este tipo de sistema realizaría una función de nivel superior y claramente se beneficiaría de las funcionalidades de la arquitectura de Spectrum. Finalmente, en el entorno comercial de CDN, los proveedores (por ejemplo, Cisco y Netapp han desarrollado e implementado productos y herramientas de gestión de contenido. A diferencia de la arquitectura Spectrum que permite que los dispositivos periféricos operen de manera autónoma en gran medida, las soluciones de los proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. CONCLUSIÓN Y TRABAJOS FUTUROS En este artículo presentamos el diseño e implementación de la arquitectura de gestión de contenido Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que son conscientes del tiempo, lo que permite gestionar de manera efectiva el almacenamiento de contenido multimedia continuo. Finalmente, el diseño modular de la arquitectura Spectrum permite tanto realizaciones independientes como distribuidas para que el sistema pueda ser desplegado en una variedad de aplicaciones. Existen varios problemas abiertos que requerirán trabajo futuro. Algunos de estos problemas incluyen: • Visualizamos que Spectrum pueda gestionar contenido en sistemas que van desde grandes CDNs hasta dispositivos más pequeños como TiVO [8]. Para que estos sistemas más pequeños puedan soportar Spectrum, necesitarán de una red y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo se puede integrar en la arquitectura de Spectrum. • Spectrum nombra el contenido por URL, pero intencionalmente no hemos definido el formato de las URL de Spectrum, cómo se relacionan con el nombre real del contenido, o cómo los nombres y las URL deben presentarse al usuario. Si bien anteriormente abordamos estos temas en otro lugar [2], creemos que hay más trabajo por hacer y que se deben redactar estándares basados en consenso sobre la nomenclatura. En este documento nos hemos centrado en la gestión de contenido para objetos de medios continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero aún no hemos resuelto los detalles necesarios para admitir esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que el contenido multimedia se comparta fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. REFERENCIAS [1] K. . Cheng y Y. Kambayashi. Gestión de contenido basada en multicache para el almacenamiento en caché web. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información en la Web, junio de 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. Arquitectura PRISM: Apoyo a Servicios de Streaming Mejorados en una Red de Distribución de Contenidos. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de video digital habilitado para red. 11º Taller de la IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji y P. Shenoy. Una arquitectura de clúster de servidores de medios en streaming adaptativa a la demanda y consciente de la localidad (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Un recomendador de televisión multiagente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "application program interface": {
            "translated_key": "interfaz de programa de aplicación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E.",
                "van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices.",
                "Keeping track of (or managing) such content remains challenging due to the sheer volume of data.",
                "Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with.",
                "Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system.",
                "In this paper we present the design and implementation of the Spectrum content management system, which deals with rich media content effectively in this environment.",
                "Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios.",
                "A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system.",
                "This means that there are no eviction policies.",
                "Content that no longer has a retention policy applied to it is simply removed from the system.",
                "Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication.",
                "This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content.",
                "We not only describe the details of the Spectrum architecture but also give typical use cases.",
                "Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1.",
                "INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer.",
                "Initial computing applications include text formatters and program compilers.",
                "Content was initially managed by explicit user interaction through the use of files and filesystems.",
                "As technology has advanced, both the types of content and the way people wish to use it have greatly changed.",
                "New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies.",
                "For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive.",
                "This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7].",
                "Another example is the combination of encoding and broadband networking technology.",
                "This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository.",
                "The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data.",
                "The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms.",
                "The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content.",
                "Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic.",
                "First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems.",
                "Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints.",
                "This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level.",
                "For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event.",
                "At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult.",
                "However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible.",
                "This scenario is increasingly common in network based content distribution systems and is likely to also become important in home-networking scenarios.",
                "It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed.",
                "This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences.",
                "The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general).",
                "The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content.",
                "Addressing this distributed content management problem is difficult due to the number of requirements placed on the system.",
                "For example: • The content management system must operate on a large number of heterogeneous systems.",
                "In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance.",
                "The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer.",
                "A <br>application program interface</br> (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies.",
                "These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded.",
                "This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams.",
                "It needs to be able to package this content in such a way that it is convenient for users to access.",
                "To address these issues we have designed and implemented the Spectrum content management system architecture.",
                "Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers.",
                "It allows multiple applications to reference content using differing policies.",
                "Note that the Spectrum architecture assumes the existence of a content distribution network (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]).",
                "The rest of this paper is organized as follows.",
                "Section 2 describes the architecture of our content management system.",
                "In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use.",
                "Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2.",
                "THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1.",
                "The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences.",
                "For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. policy manager: implements and enforces various storage polices that the content manager uses to refer to content.",
                "The policy manager exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy.",
                "Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized.",
                "It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time).",
                "A key aspect of the policy manager is that it allows different policies to be simultaneously applied to the same content (or parts of the same content).",
                "Furthermore content can only exist in the system so long as it is referenced by at least one existing policy.",
                "Policy conflicts are eliminated by having the policy manager deal exclusively with retention policies rather than with a mix of retention and eviction policies.",
                "This means that content with no policy associated with it is immediately and automatically removed from the system.",
                "This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects.",
                "Note that a key difference between the content manager and the policy manager is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content.",
                "On the other hand, the policy manager is only concerned with the policy used to manage standalone pieces of content.",
                "For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace.",
                "However, at the policy manager level, each piece of content has 5 Content Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers.",
                "Specifically the storage manager stores content in sub-object chunks.",
                "This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR.",
                "Note that the storage manager has no knowledge of the policies being used by the content and policy managers.",
                "Another unique part of our approach is that the interfaces between the layers can either be local or distributed.",
                "Figure 1 shows the four possible cases.",
                "The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box.",
                "This configuration would be used in selfcontained applications such as PVRs.",
                "The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage.",
                "In this case although the remote devices are controlled by the central manager they operate much more independently.",
                "For example, once they receive instructions from the central manager they typically operate in autonomous fashion.",
                "An example of this type of configuration is a content distribution network (CDN) that distributes and stores content based on a schedule determined by some centralized controller.",
                "For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment.",
                "Allowing a single policy manager to control several storage managers leads to the next combination of functions and the most distributed case.",
                "The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single policy manager.",
                "The final case shows a content manager combined with a policy manager controlling a remote storage manager.",
                "This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the policy manager.",
                "We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture.",
                "As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity.",
                "The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system.",
                "Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction.",
                "Once a device is mapped into the application through this interface, the system tracks its type and location.",
                "Users simply refer to the content through an application-provided label.",
                "Stores: Stores are subsets of physical storage devices.",
                "Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it.",
                "Stores can only be created in physical devices that are mapped into the system.",
                "Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content.",
                "Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy.",
                "Policy groups are created within existing stores in the system.",
                "The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage.",
                "In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time.",
                "For example, a simple time-based policy could evict content from the system at a certain absolute or relative time.",
                "A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system).",
                "Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system.",
                "Content is specified to the system by means of a uniform resource locator (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it.",
                "Optionally a time specification can be associated with content.",
                "This allows content to be fetched into the system at some future time, or at future time intervals.",
                "Again, this is particularly useful for dealing with the storage and management of live content. 2.2 Policy Manager The policy manager layer of the Spectrum architecture has two main types of API functions.",
                "First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there.",
                "Second, there are sets of functions used to implement each management policy.",
                "The first class of functions is used by the content manager layer to access storage.",
                "Operations include: create, open, and close: These operations are used by the content manager to control its access to storage.",
                "The policy managers create operation is used to establish contact with a store for the first time.",
                "Once this is done, the store can be open and closed using the appropriate routines.",
                "Note that the parameters used to create a store contain information on how to reach it.",
                "For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them.",
                "The information only needs to be passed to the policy manager once at create time.",
                "For open operations, the policy manager will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the policy manager about what content is currently present for a given URL.",
                "For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the policy manager about its current resource usage.",
                "There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference.",
                "The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store.",
                "If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available).",
                "Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy.",
                "The result of a successful pref establish operation is a policy reference ID string.",
                "This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely.",
                "The second group of policy manager functions are used to implement all the polices supported by Spectrum.",
                "We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly.",
                "Note that the policy manager is only concerned with executing a specific policy.",
                "The higher-level reasons for choosing a given policy are handled by the content and application manager.",
                "A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters.",
                "The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time.",
                "It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest.",
                "The base policy typically arranges for newclip to be called for a given URL when the pref is established.",
                "When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback.",
                "This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down.",
                "The boot operation is typically used to schedule initial callbacks or start I/O operations.",
                "The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store.",
                "Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance).",
                "For continuous media, at the storage manager level content is stored as a collection of time-based chunks.",
                "Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database.",
                "The two main storage manager operations are input and output.",
                "The input routine is used to store content in a store under a given name.",
                "The output routine is used to send data from the store to a client.",
                "For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future.",
                "Much like the policy manager, the storage manager also provides API functions to create, open, and close stores.",
                "It also supports operations to query the resource usages and options supported by the store.",
                "Finally, the storage manager also has a discard routine that may be used by the policy manager to inform the store to remove content from the store. 3.",
                "IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications.",
                "Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles.",
                "For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally.",
                "Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem.",
                "To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure.",
                "Each API call takes a pointer to a reqinfo structure as one of its arguments.",
                "This structure is used to hold the call state and return status.",
                "For async calls, the reqinfo also contains a pointer to a callback function.",
                "To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure.",
                "For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc.",
                "For async calls, a callback function must be provided when the reqinfo is allocated.",
                "Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument.",
                "For sync calls, the result of the calls is returned immediately in the reqinfo structure.",
                "For successful async calls, a call in progress value is returned.",
                "Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing.",
                "The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality.",
                "Furthermore, communication between functions is typically of a master-slave(s) nature.",
                "This means that several approaches to distributed operation are possible that would satisfy the architectural requirements.",
                "In our implementation we have opted to realize this functionality with a simple modular design.",
                "We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred.",
                "Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP.",
                "We currently are using plain TCP for most of our transport.",
                "Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML.",
                "We are currently using the eXpat XML library [4] to encode our calls.",
                "While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol.",
                "An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms.",
                "As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized.",
                "To address this issue, we treat each base-level policy as if it was a separate program.",
                "Each base-level policy should have a well known name and command line options for parameterization.",
                "In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function.",
                "This format is easily understood and provides portability since byte order is not an issue in a string.",
                "Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment.",
                "The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3].",
                "The Spectrum system is applicable to both scenarios as follows.",
                "Figure 2 shows the Network Enabled DVR (NED) architecture.",
                "In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration.",
                "The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs.",
                "This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content.",
                "Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers.",
                "The use of Spectrum in a streaming content distribution architecture (e.g.",
                "PRISM [2]) is depicted in Figure 3.",
                "In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served.",
                "In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals.",
                "The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window.",
                "To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content.",
                "The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream.",
                "As each chunk of streaming data arrives, the policy manager executes the policy references newclip function.",
                "The newclip function adds a reference to each arriving chunk, and schedules a callback a day later.",
                "At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy.",
                "Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week.",
                "To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved.",
                "Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week.",
                "After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference.",
                "After the additional week has past, the callback function for the second reference will be called.",
                "This function will discard the remaining reference to the content and as there are no remaining references the content will be freed.",
                "In order to function in scenarios like the ones described above, Spectrums policy manager must manage and maintain all the references to various chunks of media.",
                "These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted.",
                "Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure 4.",
                "There are three classes of data stored, and each class has its own top level directory.",
                "The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media.",
                "The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime.",
                "Note that this directory is used only if the storage manager is local.",
                "If the policy manager is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the policy manager. meta: this directory contains general meta information about the storage manager being used and the data it is storing.",
                "General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle.",
                "The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored.",
                "The chunks file contains a list of chunks currently stored and their reference counts.",
                "The prefs file contains a list of active policy references that point to this URL.",
                "The ranges file contains a list of time ranges of data currently stored.",
                "Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories.",
                "Each host subdirectory contains the set of policy references created by that host.",
                "Information on each policy reference is broken up into three files.",
                "For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state.",
                "The ref1 file contains information about the policy reference that does not change frequently.",
                "This information includes the base-policy and the parameters used to create the reference.",
                "The ref1.files file contains the list of references to chunks that pref ref1 owns.",
                "Finally, the ref1.state file contains optional policy-specific state information that can change over time.",
                "Together, these files and directories are used to track references in our implementation of Spectrum.",
                "Note that other implementations are possible.",
                "For example, a carrier-grade Spectrum manager might store all its policy and reference information in a high-performance database system. 10 4.",
                "RELATED WORK Several authors have addressed the problem of the management of content in distributed networks.",
                "Much of the work focuses on the policy management aspect.",
                "For example in [5], the problem of serving multimedia content via distributed servers is considered.",
                "Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol.",
                "The performance of the scheme is benchmarked via simulation.",
                "In [1] content is distributed among sub-caches.",
                "The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge.",
                "The Cache Knowledge base allows sophisticated policies to be employed.",
                "Simulation is used to compare the proposed scheme with well-known replacement algorithms.",
                "Our work differs in that we are considering more than the policy management aspects of the problem.",
                "After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, Policy manager and Storage manager.",
                "This has allowed us to easily implement and experiment with a prototype system.",
                "Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6].",
                "In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture.",
                "Finally, in the commercial CDN environment vendors (e.g.",
                "Cisco and Netapp) have developed and implemented content management products and tools.",
                "Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5.",
                "CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture.",
                "Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage.",
                "Specifically, the system allows different policies to be applied to the same content without replication.",
                "Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content.",
                "Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications.",
                "There are a number of open issues that will require future work.",
                "Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8].",
                "In order for these smaller systems to support Spectrum they will require networking and an external API.",
                "When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user.",
                "While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects.",
                "We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance.",
                "Adapting Spectrum to meet legal requirements will likely require more technical work. 6.",
                "REFERENCES [1] K. .",
                "Cheng and Y. Kambayashi.",
                "Multicache-based Content Management for Web Caching.",
                "Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "PRISM Architecture: Supporting Enhanced Streaming Services in a Content Distribution Network.",
                "IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy.",
                "A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture.",
                "NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman.",
                "A multi-agent TV recommender.",
                "Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11"
            ],
            "original_annotated_samples": [
                "A <br>application program interface</br> (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies."
            ],
            "translated_annotated_samples": [
                "Se necesita una <br>interfaz de programa de aplicación</br> (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. El sistema de gestión de contenidos debe ser flexible y capaz de manejar diferentes requisitos para las políticas de gestión de contenidos."
            ],
            "translated_text": "Diseño e Implementación de un Sistema de Gestión de Contenido Distribuido por C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ y J.E. La convergencia de avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan y se intercambian rutinariamente entre dispositivos habilitados para redes. El seguimiento (o gestión) de dicho contenido sigue siendo un desafío debido a la gran cantidad de datos. Almacenar medios continuos en vivo (como contenido de televisión o radio) aumenta la complejidad debido a que este contenido no tiene un inicio o fin bien definido y, por lo tanto, resulta engorroso de manejar. El almacenamiento en red permite que el contenido que se ve lógicamente como parte de la misma colección esté distribuido en una red, lo que hace que la gestión de contenido sea casi imposible de manejar sin un sistema de gestión de contenido. En este documento presentamos el diseño e implementación del sistema de gestión de contenido Spectrum, que maneja de manera efectiva el contenido de medios enriquecidos en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto en escenarios independientes como en diferentes entornos de red. Un aspecto único de Spectrum es que requiere que se aplique una (o más) políticas de retención a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido al que ya no se le aplica una política de retención simplemente se elimina del sistema. Diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo, que son bloques de construcción básicos necesarios para manejar el almacenamiento de medios continuos en vivo, al contenido. No solo describimos los detalles de la arquitectura del Spectrum, sino que también proporcionamos casos de uso típicos. Categorías y Descriptores de Asignaturas C.2.4 [Organización de Sistemas Informáticos]: Redes de comunicación informática-sistemas distribuidos; H.3.4 [Sistemas de Información]: Almacenamiento de información y recuperación-sistemas y software Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar contenido es y siempre ha sido una de las funciones principales de una computadora. Las aplicaciones iniciales de computación incluyen formateadores de texto y compiladores de programas. El contenido era gestionado inicialmente mediante la interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que las personas desean utilizarlo han cambiado considerablemente. Nuevos tipos de contenido, como las transmisiones multimedia continuas, se han vuelto comunes debido a la convergencia de avances en tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de video codificado de calidad televisiva en un solo disco duro. Esto ha llevado a la introducción de sistemas de grabación de video digital independientes o personales, como TiVO y ReplayTV. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas, con la red misma actuando como un gran repositorio de datos. La proliferación de contenido de alta calidad habilitada por estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. El enfoque de nuestro trabajo se centra en el almacenamiento de contenido multimedia y, en particular, en el almacenamiento de contenido multimedia continuo en forma preempaquetada o en vivo. La necesidad de gestión de contenido en esta área es evidente cuando se considera lo siguiente: • Los aumentos en la capacidad y las disminuciones en el costo de almacenamiento significan que incluso los sistemas de escritorio modestos de hoy tienen la capacidad de almacenar grandes cantidades de contenido. La gestión manual de dicho contenido (o más correctamente, la falta de gestión manual de dicho contenido) conduce a grandes ineficiencias donde el contenido no deseado y olvidado se acumula y donde el contenido deseado no se puede encontrar. • Aunque es cierto para todos los tipos de contenido, el almacenamiento de contenido de medios continuos es especialmente problemático. El primer contenido de medios continuos sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque sin política para almacenarlo no funcionará para todos, excepto para los sistemas más pequeños. Segundo, el almacenamiento de contenido en vivo como la televisión o la radio es inherentemente problemático ya que estas señales son flujos continuos sin puntos finales. Esto significa que antes de siquiera pensar en gestionar dicho contenido, es necesario abstraerlo en algo que pueda ser manipulado y gestionado. Al tratar con medios continuos almacenados, es necesario gestionar dicho contenido tanto a un nivel detallado como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar solo los momentos destacados de un evento deportivo en particular no debería estar obligado a tener que almacenar el contenido relacionado con todo el evento. Al mismo tiempo, el usuario podría querer considerar el contenido en su totalidad, por ejemplo, eliminar todo el contenido que no he visto en el último mes, excepto aquel contenido que fue marcado explícitamente para archivar. • Como se indicó anteriormente, tratar de mantener un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenido es muy difícil. Sin embargo, cuando los dispositivos de almacenamiento reales están distribuidos en una red, la tarea de llevar un registro del contenido es casi imposible. Este escenario es cada vez más común en sistemas de distribución de contenido basados en redes y es probable que también cobre importancia en escenarios de redes domésticas. Parecería claro entonces que se necesita un sistema de gestión de contenido que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que aproveche la capacidad de almacenamiento en red de los dispositivos. Este sistema debería permitir el almacenamiento eficiente y el acceso al contenido en dispositivos de almacenamiento de red heterogéneos de acuerdo a las preferencias del usuario. El sistema de gestión de contenido debe traducir las preferencias del usuario en políticas de almacenamiento de bajo nivel apropiadas y permitir que esas preferencias se expresen a un nivel de granularidad fino (sin requerirlo en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar sobre (es decir, cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenido distribuido es difícil debido a la cantidad de requisitos impuestos en el sistema. Por ejemplo: • El sistema de gestión de contenidos debe operar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando contenido almacenado en un sistema de archivos local, mientras que en otros el contenido puede estar almacenado en un dispositivo de almacenamiento de red separado. El administrador de contenido puede ser responsable de implementar las políticas que utiliza para hacer referencia al contenido o ese rol puede ser delegado a un ordenador separado. Se necesita una <br>interfaz de programa de aplicación</br> (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. El sistema de gestión de contenidos debe ser flexible y capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe ser obtenido, cuándo debe ser recuperado, cuánto tiempo debe ser retenido y en qué circunstancias debe ser descartado. Esto significa que el sistema de gestión de contenido debe permitir que múltiples aplicaciones hagan referencia al contenido con un conjunto amplio de políticas y que todo funcione de manera integrada. • El sistema de gestión de contenido debe ser capaz de monitorear las referencias al contenido y utilizar esa información para ubicar el contenido en la ubicación correcta en la red para un acceso eficiente de las aplicaciones. • El sistema de gestión de contenido debe manejar la interacción entre la población implícita y explícita del contenido en el borde de la red. • El sistema de contenido debe ser capaz de gestionar eficientemente grandes conjuntos de contenido, incluidos flujos continuos. Debe ser capaz de empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas, hemos diseñado e implementado la arquitectura del sistema de gestión de contenido Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan ya sea en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite que múltiples aplicaciones hagan referencia al contenido utilizando políticas diferentes. Se debe tener en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenido (CDN) que puede facilitar la distribución eficiente de contenido (por ejemplo, la arquitectura CDN PRISM [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. El trabajo relacionado se describe en la Sección 4, y la Sección 5 contiene nuestra conclusión y sugerencias para trabajos futuros. 2. La arquitectura del sistema de gestión de contenido distribuido Spectrum consta de tres capas de gestión distintas que pueden o no estar distribuidas en múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todo el contenido de una aplicación según las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de video personal (PVR), el administrador de contenido recibe solicitudes de contenido desde una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y gestionar contenido en el dispositivo. El administrador de políticas implementa y hace cumplir varias políticas de almacenamiento que el administrador de contenido utiliza para hacer referencia al contenido. El gestor de políticas exporta una interfaz al gestor de contenido que le permite al gestor de contenido solicitar que un contenido sea tratado de acuerdo con una política específica. Spectrum permite que se realicen políticas arbitrarias al proporcionar un conjunto fijo de plantillas de políticas base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (de lo contrario, Spectrum se puede extender fácilmente para cargar dinámicamente nuevo código de plantilla de política base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido solo puede existir en el sistema siempre y cuando esté referenciado por al menos una política existente. Los conflictos de políticas se eliminan al hacer que el administrador de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin política asociada se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar de forma natural el intercambio de contenido entre diferentes políticas, lo cual es fundamental para el almacenamiento eficiente de objetos grandes. Ten en cuenta que una diferencia clave entre el gestor de contenido y el gestor de políticas es que el gestor de contenido gestiona referencias a múltiples piezas de contenido, es decir, tiene una vista de aplicación del contenido. Por otro lado, el gerente de políticas solo se preocupa por la política utilizada para gestionar piezas de contenido independientes. Por ejemplo, en una aplicación de PVR, la capa del gestor de contenido conocería los diferentes grupos de contenido gestionado, como mantener indefinidamente, mantener por un día y mantener si hay espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada pieza de contenido tiene su propia política (o políticas) aplicada a ella y es independiente de otro contenido. El gestor de almacenamiento: almacena contenido de manera eficiente mientras facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento guarda el contenido en fragmentos de subobjetos. Este enfoque tiene ventajas para la recuperación eficiente de contenido, pero lo más importante es que permite aplicar políticas a nivel de subobjeto, lo cual es críticamente importante al tratar con objetos muy grandes como partes de medios continuos, por ejemplo, piezas seleccionadas de contenido de televisión almacenadas en un PVR. Ten en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas que están siendo utilizadas por los gestores de contenido y de políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la figura muestra el caso más simple (no distribuido) donde todas las capas están implementadas en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como los PVRs. El siguiente caso corresponde al caso en el que hay un gestor de contenido centralizado que controla dispositivos de almacenamiento distribuido, cada uno de los cuales es responsable de implementar almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, operan de manera mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, típicamente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido según un horario determinado por algún controlador centralizado. Por ejemplo, la CDN podría precargar dispositivos periféricos con contenido que se espera que sea muy popular o distribuir archivos grandes a sucursales durante las horas de menor tráfico en un entorno empresarial con limitaciones de ancho de banda. Permitir que un único administrador de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y al caso más distribuido. La necesidad de este tipo de separación puede surgir por razones de escalabilidad o cuando se requiere controlar diferentes dispositivos de almacenamiento especializados con un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas controlando un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo detallado por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de Contenidos La capa del gestor de contenidos es la interfaz principal a través de la cual las aplicaciones específicas utilizan la arquitectura Spectrum. Por lo tanto, la capa del gestor de contenido proporciona una API para que la aplicación pueda manipular todos los aspectos de la arquitectura de Spectrum en diferentes niveles de granularidad. La API del gestor de contenido tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite agregar dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo el control del gestor de contenido y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos; este es el único lugar en la arquitectura donde la aplicación debe ser consciente de esta distinción. Una vez que un dispositivo es mapeado en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Almacenes: Los almacenes son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (por ejemplo, espacio en disco) a la misma. Las tiendas solo se pueden crear en dispositivos físicos que estén mapeados en el sistema. Grupos de Políticas: Los grupos de políticas son el medio por el cual una aplicación especifica, instancia y modifica las políticas que se aplican al contenido del Espectro. El uso típico de este conjunto de funciones es seleccionar una de un pequeño conjunto de políticas base y parametrizar esta instancia específica de la política. Los grupos de políticas se crean dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento y que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que incluyen una especificación de tiempo sofisticada permiten un almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría expulsar el contenido del sistema en un momento absoluto o relativo específico. Una política basada en el tiempo un poco más compleja habilitada por la arquitectura Spectrum podría permitir que el contenido se almacene en una ventana de tiempo de un número de horas (por ejemplo, las N horas más recientes se mantienen en el sistema). Las políticas basadas en el tiempo son de particular utilidad al tratar con contenido continuo como una transmisión en vivo. 6 Contenido: En el nivel más fino de granularidad, el contenido puede ser añadido o eliminado del sistema. El contenido se especifica al sistema mediante un localizador uniforme de recursos (URL) que indica de manera concisa la ubicación del contenido, así como el protocolo a utilizar para recuperarlo. Opcionalmente se puede asociar una especificación de tiempo con el contenido. Esto permite que el contenido sea recuperado en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Nuevamente, esto es particularmente útil para tratar con el almacenamiento y gestión de contenido en vivo. 2.2 Gestor de Políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones de API. Primero, hay funciones que operan en áreas de almacenamiento gestionadas y referencias basadas en políticas (prefs) al contenido almacenado allí. Segundo, hay conjuntos de funciones utilizadas para implementar cada política de gestión. La primera clase de funciones es utilizada por la capa de gestión de contenido para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar. Estas operaciones son utilizadas por el gestor de contenido para controlar su acceso al almacenamiento. El proceso de creación de políticas de gestión de operaciones se utiliza para establecer contacto con una tienda por primera vez. Una vez que esto se haya hecho, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Ten en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información solo necesita ser transmitida al administrador de políticas una vez al momento de la creación. Para operaciones abiertas, el administrador de políticas utilizará la información en caché para contactar a la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el administrador de contenido consulte al administrador de políticas sobre qué contenido está actualmente presente para una URL dada. Para medios continuos, se devolverán rangos de tiempo de medios presentes. recurso: Las rutinas de recurso se utilizan para consultar al administrador de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su totalidad y otra que se aplica a una referencia de política en particular. La API de recursos es extensible, actualmente admitimos consultas sobre el uso de disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer se utiliza por el gestor de contenido para hacer referencia al contenido en la tienda. Si el contenido no está presente, esta llamada resultará en la obtención del contenido (o en la programación para obtenerlo si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL donde se almacenará, la URL desde la cual se obtendrán los datos si no están presentes, la política para almacenar el contenido y los argumentos utilizados para parametrizar la política. El resultado de una operación de establecimiento de prefijo exitosa es una cadena de identificación de referencia de política. Este identificador se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones del gestor de políticas se utilizan para implementar todas las políticas respaldadas por Spectrum. Visualizamos un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitiva puede ser parametrizada para funcionar diariamente, semanalmente o mensualmente. Ten en cuenta que el gestor de políticas solo se preocupa por ejecutar una política específica. Las razones de nivel superior para elegir una política determinada son manejadas por el gerente de contenido y aplicación. Una política base se implementa utilizando seis funciones: establecer: se llama cuando se establece una preferencia con las URL requeridas y los parámetros de la política base. El rutina establecida hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar acción (por ejemplo, iniciar una descarga) y programa una devolución de llamada para ese momento. También puede registrarse para recibir devoluciones de llamada si se recibe nuevo contenido para una URL específica. actualizar: se llama para cambiar los parámetros de una preferencia, o para descartar la referencia de la política. newclip: se llama cuando se recibe un fragmento de nuevo contenido para una URL de interés. La política base normalmente establece que se llame a newclip para una URL dada cuando se establece la preferencia. Cuando se llama a newclip, la política base verifica sus parámetros para determinar si desea agregar una referencia al clip recién recibido. callback: llamado cuando la preferencia programa una devolución de llamada basada en temporizador. Este es un mecanismo útil de activación para preferencias que necesitan estar inactivas durante un largo período de tiempo (por ejemplo, entre programas). arranque/apagado: se llama cuando el sistema de gestión de contenidos se está iniciando o apagando. La operación de arranque se utiliza típicamente para programar devoluciones de llamada iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para cerrar de forma ordenada los flujos de entrada/salida y guardar el estado. 2.3 Gestor de almacenamiento El rol del gestor de almacenamiento de Spectrum es controlar todas las operaciones de entrada/salida asociadas con una tienda dada. El gestor de almacenamiento de Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo, un dispositivo de almacenamiento). Para los medios continuos, a nivel del gestor de almacenamiento, el contenido se almacena como una colección de fragmentos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un fragmento podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión en continuo, tanto las rutinas de entrada como de salida toman rangos de tiempo que programan cuándo debe ocurrir la operación de E/S, y ambas rutinas devuelven un identificador de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el administrador de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar almacenes. También admite operaciones para consultar los usos de recursos y opciones admitidas por la tienda. Finalmente, el administrador de almacenamiento también tiene un procedimiento de descarte que puede ser utilizado por el administrador de políticas para informar a la tienda que elimine contenido de la tienda. 3. IMPLEMENTACIÓN Y CASOS DE USO En esta sección describimos nuestra implementación de Spectrum y cómo puede ser utilizada. 3.1 Implementación Hemos implementado las tres capas de Spectrum en C como parte de una biblioteca que puede ser enlazada con aplicaciones basadas en Spectrum. Cada capa lleva un registro de su estado a través de un conjunto de archivos de datos locales que persisten a través de reinicios, lo que permite a Spectrum manejar los ciclos de energía de manera fluida. Para las capas que residen en sistemas remotos (por ejemplo, una tienda remota), solo se almacena localmente la meta-información necesaria para contactar al administrador de políticas del gestor de contenido remoto, el gestor de almacenamiento, el recuperador de almacenamiento, los listados de programas, la interfaz de usuario gráfica, el DVR habilitado para red, la información del programa, la aplicación de DVR de contenido en la red habilitada para DVR. Figura 2: Espectro en un nodo de DVR habilitado para red. Nuestra aplicación de prueba utiliza un administrador de políticas y almacenamiento local para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficientemente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas de API de Spectrums admiten tanto modos síncronos como asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada a la API toma un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de la llamada y el estado de retorno. Para las llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamada. Para utilizar una función de la API de Spectrum, el llamante primero elige entre el modo sincrónico o asincrónico y asigna una estructura reqinfo. Para llamadas de sincronización, la reqinfo puede ser asignada en la pila, de lo contrario se asigna con malloc. Para llamadas asíncronas, se debe proporcionar una función de devolución de llamada al asignar el reqinfo. A continuación, el llamante invoca la función API de Spectrum deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas asincrónicas exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada asíncrona se completa o se produce un tiempo de espera, se llama a la función de devolución de llamada asíncrona con la información adecuada necesaria para completar el procesamiento. El diseño modular/capas de la arquitectura Spectrum simplifica el objetivo de distribución de funcionalidad. Además, la comunicación entre funciones suele ser de naturaleza maestro-esclavo(s). Esto significa que son posibles varios enfoques para la operación distribuida que cumplirían con los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un diseño modular simple. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y elegir el método de codificación que se debe utilizar con los datos a transferir. Los protocolos de transporte pueden variar desde protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP simple para la mayoría de nuestro transporte. Las llamadas a funciones a través de las diferentes APIs de Spectrum pueden ser codificadas utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos utilizando la biblioteca XML eXpat [4] para codificar nuestras llamadas. Mientras actualmente estamos transfiriendo nuestros mensajes codificados en XML utilizando una conexión TCP simple, en un entorno del mundo real esto puede ser fácilmente reemplazado con una implementación basada en capa de sockets seguros (SSL) para mejorar la seguridad al agregar SSL como protocolo de transporte. Un aspecto importante de Spectrum es que puede gestionar contenido basado en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la Sección 2.2, imagina un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben comprender las políticas de nivel base y cómo pueden ser parametrizadas. Para abordar este problema, tratamos cada política de nivel base como si fuera un programa separado. Cada política de nivel base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada utilizando una función similar a getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de los bytes no es un problema en una cadena. Dado que esta parte de Spectrum no se encuentra en la ruta crítica de los datos, este tipo de formato no representa un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos de Spectrum En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos de Spectrum en nuestro entorno. El enfoque de nuestro trabajo anterior ha sido la distribución de contenido para contenido de medios en streaming [2] y la grabación de video digital habilitada para redes [3]. El sistema Spectrum es aplicable a ambos escenarios de la siguiente manera. La Figura 2 muestra la arquitectura del DVR habilitado para red (NED). En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación de DVR obtiene listados de programas de alguna fuente de red, maneja la presentación al usuario a través de una interfaz gráfica de usuario (GUI) e interactúa con el sistema Spectrum a través de las APIs de la capa de gestión de contenido. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento que se aplicarán a dicho contenido. La obtención del contenido (a través de la red o localmente) y su posterior almacenamiento en el sistema local son manejados por los gestores de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenido en streaming (por ejemplo, PRISM [2]) está representado en la Figura 3. En este entorno, el contenido de medios en streaming (tanto en vivo, enlatado en vivo y a la carta) se distribuye a los portales periféricos desde donde se sirven los puntos finales de streaming. En nuestro entorno, la distribución y almacenamiento de contenido se realiza desde una estación centralizada de gestión de contenido que controla varios de los portales periféricos. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenido sin necesidad de una comunicación continua entre el gestor de contenido y los dispositivos periféricos, es decir, una vez que se han dado instrucciones a los dispositivos periféricos, pueden operar de forma independiente hasta que se deban realizar cambios. Ejemplo operativo de Spectrum 3.3 Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación de PVR basada en Spectrum programada para almacenar un día de contenido de transmisión en una ventana móvil. Para configurar la ventana deslizante, la aplicación utilizaría la API del gestor de contenido para crear un grupo de políticas y una referencia de política al contenido deseado. El establecimiento de la política de ventana de un día en movimiento haría que el gerente de políticas le pida al gerente de almacenamiento que comience a recibir el flujo. A medida que llega cada fragmento de datos en streaming, el gestor de políticas ejecuta la función newclip de las referencias de política. La función newclip agrega una referencia a cada fragmento que llega y programa una devolución de llamada para un día después. En ese momento, la política eliminará su referencia actual de un día al contenido y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considera el caso en el que el usuario decide guardar parte del contenido (por ejemplo, un programa específico) en la ventana deslizante durante una semana adicional. Para hacer esto, la aplicación solicita que el gestor de contenido agregue una nueva referencia de política adicional a la parte del contenido que se va a preservar. Por lo tanto, el contenido preservado tiene dos referencias: una del marco de tiempo móvil y otra de la solicitud de preservar el contenido por una semana adicional. Después de un día, la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. datos base url1 url2 (archivos multimedia...) (archivos multimedia...) almacenamiento de metadatos (información general...) url1 fragmentos preferencias rangos fragmentos multimedia, etc. url2 host poli ref1 ref1.archivos ref1.estado Figura 4: Diseño de datos de la tienda de políticas de Spectrum preservado por la segunda referencia. Después de que haya transcurrido la semana adicional, se llamará a la función de devolución de llamada para la segunda referencia. Esta función descartará la referencia restante al contenido y, como no hay referencias restantes, el contenido será liberado. Para poder funcionar en escenarios como los descritos anteriormente, el gestor de políticas de Spectrums debe administrar y mantener todas las referencias a diferentes fragmentos de medios. Estas referencias son persistentes y, por lo tanto, deben poder sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestro implementación del gestor de políticas de Spectrum logra esto utilizando la estructura de archivos y directorios mostrada en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el gestor de almacenamiento para almacenar los fragmentos de medios de cada URL activa. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Ten en cuenta que este directorio se utiliza solo si el gestor de almacenamiento es local. Si el administrador de políticas está utilizando un administrador de almacenamiento externo (por ejemplo, un dispositivo de almacenamiento), entonces los archivos multimedia se almacenan de forma remota y solo son referenciados de forma remota por el administrador de políticas. meta: este directorio contiene información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) y la información sobre los tipos de fragmentos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los fragmentos de datos almacenados. El archivo de fragmentos contiene una lista de fragmentos almacenados actualmente y sus recuentos de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de intervalos de tiempo de los datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato del medio que se está almacenando bajo la URL actual. poly: este directorio contiene un conjunto de subdirectorios de host. Cada subdirectorio de host contiene el conjunto de referencias de políticas creadas por ese host. La información de cada referencia de política está dividida en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files y ref1.state. El archivo ref1 contiene información sobre la referencia de la política que no cambia con frecuencia. Esta información incluye la política base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a fragmentos que posee el prefijo ref1. Finalmente, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Ten en cuenta que otras implementaciones son posibles. Por ejemplo, un administrador de espectro de calidad de operador podría almacenar toda su información de políticas y referencias en un sistema de base de datos de alto rendimiento. 10 4. TRABAJO RELACIONADO Varios autores han abordado el problema de la gestión de contenido en redes distribuidas. Gran parte del trabajo se centra en el aspecto de gestión de políticas. Por ejemplo, en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda del usuario utilizando un Protocolo de Diseminación de Demanda. El rendimiento del esquema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Enrutador Central, una Base de Conocimiento en Caché, Subcachés y un juez de expulsión de Subcaché. La base de conocimientos de caché permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenido en el entorno de red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenido, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de televisión que se utilizan en los PVR para seleccionar automáticamente contenido para los usuarios, por ejemplo [6]. En el caso de que Spectrum se utilice en una configuración de PVR, este tipo de sistema realizaría una función de nivel superior y claramente se beneficiaría de las funcionalidades de la arquitectura de Spectrum. Finalmente, en el entorno comercial de CDN, los proveedores (por ejemplo, Cisco y Netapp han desarrollado e implementado productos y herramientas de gestión de contenido. A diferencia de la arquitectura Spectrum que permite que los dispositivos periféricos operen de manera autónoma en gran medida, las soluciones de los proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. CONCLUSIÓN Y TRABAJOS FUTUROS En este artículo presentamos el diseño e implementación de la arquitectura de gestión de contenido Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que son conscientes del tiempo, lo que permite gestionar de manera efectiva el almacenamiento de contenido multimedia continuo. Finalmente, el diseño modular de la arquitectura Spectrum permite tanto realizaciones independientes como distribuidas para que el sistema pueda ser desplegado en una variedad de aplicaciones. Existen varios problemas abiertos que requerirán trabajo futuro. Algunos de estos problemas incluyen: • Visualizamos que Spectrum pueda gestionar contenido en sistemas que van desde grandes CDNs hasta dispositivos más pequeños como TiVO [8]. Para que estos sistemas más pequeños puedan soportar Spectrum, necesitarán de una red y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo se puede integrar en la arquitectura de Spectrum. • Spectrum nombra el contenido por URL, pero intencionalmente no hemos definido el formato de las URL de Spectrum, cómo se relacionan con el nombre real del contenido, o cómo los nombres y las URL deben presentarse al usuario. Si bien anteriormente abordamos estos temas en otro lugar [2], creemos que hay más trabajo por hacer y que se deben redactar estándares basados en consenso sobre la nomenclatura. En este documento nos hemos centrado en la gestión de contenido para objetos de medios continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero aún no hemos resuelto los detalles necesarios para admitir esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que el contenido multimedia se comparta fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. REFERENCIAS [1] K. . Cheng y Y. Kambayashi. Gestión de contenido basada en multicache para el almacenamiento en caché web. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información en la Web, junio de 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. Arquitectura PRISM: Apoyo a Servicios de Streaming Mejorados en una Red de Distribución de Contenidos. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de video digital habilitado para red. 11º Taller de la IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji y P. Shenoy. Una arquitectura de clúster de servidores de medios en streaming adaptativa a la demanda y consciente de la localidad (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Un recomendador de televisión multiagente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "content distribution network": {
            "translated_key": "red de distribución de contenido",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E.",
                "van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices.",
                "Keeping track of (or managing) such content remains challenging due to the sheer volume of data.",
                "Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with.",
                "Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system.",
                "In this paper we present the design and implementation of the Spectrum content management system, which deals with rich media content effectively in this environment.",
                "Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios.",
                "A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system.",
                "This means that there are no eviction policies.",
                "Content that no longer has a retention policy applied to it is simply removed from the system.",
                "Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication.",
                "This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content.",
                "We not only describe the details of the Spectrum architecture but also give typical use cases.",
                "Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1.",
                "INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer.",
                "Initial computing applications include text formatters and program compilers.",
                "Content was initially managed by explicit user interaction through the use of files and filesystems.",
                "As technology has advanced, both the types of content and the way people wish to use it have greatly changed.",
                "New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies.",
                "For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive.",
                "This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7].",
                "Another example is the combination of encoding and broadband networking technology.",
                "This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository.",
                "The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data.",
                "The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms.",
                "The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content.",
                "Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic.",
                "First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems.",
                "Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints.",
                "This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level.",
                "For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event.",
                "At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult.",
                "However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible.",
                "This scenario is increasingly common in network based content distribution systems and is likely to also become important in home-networking scenarios.",
                "It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed.",
                "This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences.",
                "The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general).",
                "The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content.",
                "Addressing this distributed content management problem is difficult due to the number of requirements placed on the system.",
                "For example: • The content management system must operate on a large number of heterogeneous systems.",
                "In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance.",
                "The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer.",
                "A application program interface (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies.",
                "These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded.",
                "This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams.",
                "It needs to be able to package this content in such a way that it is convenient for users to access.",
                "To address these issues we have designed and implemented the Spectrum content management system architecture.",
                "Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers.",
                "It allows multiple applications to reference content using differing policies.",
                "Note that the Spectrum architecture assumes the existence of a <br>content distribution network</br> (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]).",
                "The rest of this paper is organized as follows.",
                "Section 2 describes the architecture of our content management system.",
                "In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use.",
                "Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2.",
                "THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1.",
                "The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences.",
                "For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. policy manager: implements and enforces various storage polices that the content manager uses to refer to content.",
                "The policy manager exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy.",
                "Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized.",
                "It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time).",
                "A key aspect of the policy manager is that it allows different policies to be simultaneously applied to the same content (or parts of the same content).",
                "Furthermore content can only exist in the system so long as it is referenced by at least one existing policy.",
                "Policy conflicts are eliminated by having the policy manager deal exclusively with retention policies rather than with a mix of retention and eviction policies.",
                "This means that content with no policy associated with it is immediately and automatically removed from the system.",
                "This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects.",
                "Note that a key difference between the content manager and the policy manager is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content.",
                "On the other hand, the policy manager is only concerned with the policy used to manage standalone pieces of content.",
                "For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace.",
                "However, at the policy manager level, each piece of content has 5 Content Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers.",
                "Specifically the storage manager stores content in sub-object chunks.",
                "This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR.",
                "Note that the storage manager has no knowledge of the policies being used by the content and policy managers.",
                "Another unique part of our approach is that the interfaces between the layers can either be local or distributed.",
                "Figure 1 shows the four possible cases.",
                "The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box.",
                "This configuration would be used in selfcontained applications such as PVRs.",
                "The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage.",
                "In this case although the remote devices are controlled by the central manager they operate much more independently.",
                "For example, once they receive instructions from the central manager they typically operate in autonomous fashion.",
                "An example of this type of configuration is a <br>content distribution network</br> (CDN) that distributes and stores content based on a schedule determined by some centralized controller.",
                "For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment.",
                "Allowing a single policy manager to control several storage managers leads to the next combination of functions and the most distributed case.",
                "The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single policy manager.",
                "The final case shows a content manager combined with a policy manager controlling a remote storage manager.",
                "This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the policy manager.",
                "We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture.",
                "As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity.",
                "The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system.",
                "Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction.",
                "Once a device is mapped into the application through this interface, the system tracks its type and location.",
                "Users simply refer to the content through an application-provided label.",
                "Stores: Stores are subsets of physical storage devices.",
                "Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it.",
                "Stores can only be created in physical devices that are mapped into the system.",
                "Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content.",
                "Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy.",
                "Policy groups are created within existing stores in the system.",
                "The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage.",
                "In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time.",
                "For example, a simple time-based policy could evict content from the system at a certain absolute or relative time.",
                "A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system).",
                "Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system.",
                "Content is specified to the system by means of a uniform resource locator (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it.",
                "Optionally a time specification can be associated with content.",
                "This allows content to be fetched into the system at some future time, or at future time intervals.",
                "Again, this is particularly useful for dealing with the storage and management of live content. 2.2 Policy Manager The policy manager layer of the Spectrum architecture has two main types of API functions.",
                "First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there.",
                "Second, there are sets of functions used to implement each management policy.",
                "The first class of functions is used by the content manager layer to access storage.",
                "Operations include: create, open, and close: These operations are used by the content manager to control its access to storage.",
                "The policy managers create operation is used to establish contact with a store for the first time.",
                "Once this is done, the store can be open and closed using the appropriate routines.",
                "Note that the parameters used to create a store contain information on how to reach it.",
                "For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them.",
                "The information only needs to be passed to the policy manager once at create time.",
                "For open operations, the policy manager will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the policy manager about what content is currently present for a given URL.",
                "For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the policy manager about its current resource usage.",
                "There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference.",
                "The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store.",
                "If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available).",
                "Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy.",
                "The result of a successful pref establish operation is a policy reference ID string.",
                "This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely.",
                "The second group of policy manager functions are used to implement all the polices supported by Spectrum.",
                "We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly.",
                "Note that the policy manager is only concerned with executing a specific policy.",
                "The higher-level reasons for choosing a given policy are handled by the content and application manager.",
                "A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters.",
                "The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time.",
                "It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest.",
                "The base policy typically arranges for newclip to be called for a given URL when the pref is established.",
                "When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback.",
                "This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down.",
                "The boot operation is typically used to schedule initial callbacks or start I/O operations.",
                "The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store.",
                "Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance).",
                "For continuous media, at the storage manager level content is stored as a collection of time-based chunks.",
                "Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database.",
                "The two main storage manager operations are input and output.",
                "The input routine is used to store content in a store under a given name.",
                "The output routine is used to send data from the store to a client.",
                "For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future.",
                "Much like the policy manager, the storage manager also provides API functions to create, open, and close stores.",
                "It also supports operations to query the resource usages and options supported by the store.",
                "Finally, the storage manager also has a discard routine that may be used by the policy manager to inform the store to remove content from the store. 3.",
                "IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications.",
                "Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles.",
                "For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally.",
                "Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem.",
                "To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure.",
                "Each API call takes a pointer to a reqinfo structure as one of its arguments.",
                "This structure is used to hold the call state and return status.",
                "For async calls, the reqinfo also contains a pointer to a callback function.",
                "To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure.",
                "For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc.",
                "For async calls, a callback function must be provided when the reqinfo is allocated.",
                "Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument.",
                "For sync calls, the result of the calls is returned immediately in the reqinfo structure.",
                "For successful async calls, a call in progress value is returned.",
                "Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing.",
                "The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality.",
                "Furthermore, communication between functions is typically of a master-slave(s) nature.",
                "This means that several approaches to distributed operation are possible that would satisfy the architectural requirements.",
                "In our implementation we have opted to realize this functionality with a simple modular design.",
                "We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred.",
                "Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP.",
                "We currently are using plain TCP for most of our transport.",
                "Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML.",
                "We are currently using the eXpat XML library [4] to encode our calls.",
                "While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol.",
                "An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms.",
                "As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized.",
                "To address this issue, we treat each base-level policy as if it was a separate program.",
                "Each base-level policy should have a well known name and command line options for parameterization.",
                "In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function.",
                "This format is easily understood and provides portability since byte order is not an issue in a string.",
                "Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment.",
                "The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3].",
                "The Spectrum system is applicable to both scenarios as follows.",
                "Figure 2 shows the Network Enabled DVR (NED) architecture.",
                "In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration.",
                "The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs.",
                "This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content.",
                "Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers.",
                "The use of Spectrum in a streaming content distribution architecture (e.g.",
                "PRISM [2]) is depicted in Figure 3.",
                "In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served.",
                "In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals.",
                "The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window.",
                "To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content.",
                "The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream.",
                "As each chunk of streaming data arrives, the policy manager executes the policy references newclip function.",
                "The newclip function adds a reference to each arriving chunk, and schedules a callback a day later.",
                "At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy.",
                "Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week.",
                "To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved.",
                "Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week.",
                "After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference.",
                "After the additional week has past, the callback function for the second reference will be called.",
                "This function will discard the remaining reference to the content and as there are no remaining references the content will be freed.",
                "In order to function in scenarios like the ones described above, Spectrums policy manager must manage and maintain all the references to various chunks of media.",
                "These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted.",
                "Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure 4.",
                "There are three classes of data stored, and each class has its own top level directory.",
                "The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media.",
                "The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime.",
                "Note that this directory is used only if the storage manager is local.",
                "If the policy manager is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the policy manager. meta: this directory contains general meta information about the storage manager being used and the data it is storing.",
                "General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle.",
                "The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored.",
                "The chunks file contains a list of chunks currently stored and their reference counts.",
                "The prefs file contains a list of active policy references that point to this URL.",
                "The ranges file contains a list of time ranges of data currently stored.",
                "Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories.",
                "Each host subdirectory contains the set of policy references created by that host.",
                "Information on each policy reference is broken up into three files.",
                "For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state.",
                "The ref1 file contains information about the policy reference that does not change frequently.",
                "This information includes the base-policy and the parameters used to create the reference.",
                "The ref1.files file contains the list of references to chunks that pref ref1 owns.",
                "Finally, the ref1.state file contains optional policy-specific state information that can change over time.",
                "Together, these files and directories are used to track references in our implementation of Spectrum.",
                "Note that other implementations are possible.",
                "For example, a carrier-grade Spectrum manager might store all its policy and reference information in a high-performance database system. 10 4.",
                "RELATED WORK Several authors have addressed the problem of the management of content in distributed networks.",
                "Much of the work focuses on the policy management aspect.",
                "For example in [5], the problem of serving multimedia content via distributed servers is considered.",
                "Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol.",
                "The performance of the scheme is benchmarked via simulation.",
                "In [1] content is distributed among sub-caches.",
                "The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge.",
                "The Cache Knowledge base allows sophisticated policies to be employed.",
                "Simulation is used to compare the proposed scheme with well-known replacement algorithms.",
                "Our work differs in that we are considering more than the policy management aspects of the problem.",
                "After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, Policy manager and Storage manager.",
                "This has allowed us to easily implement and experiment with a prototype system.",
                "Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6].",
                "In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture.",
                "Finally, in the commercial CDN environment vendors (e.g.",
                "Cisco and Netapp) have developed and implemented content management products and tools.",
                "Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5.",
                "CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture.",
                "Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage.",
                "Specifically, the system allows different policies to be applied to the same content without replication.",
                "Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content.",
                "Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications.",
                "There are a number of open issues that will require future work.",
                "Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8].",
                "In order for these smaller systems to support Spectrum they will require networking and an external API.",
                "When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user.",
                "While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects.",
                "We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance.",
                "Adapting Spectrum to meet legal requirements will likely require more technical work. 6.",
                "REFERENCES [1] K. .",
                "Cheng and Y. Kambayashi.",
                "Multicache-based Content Management for Web Caching.",
                "Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "PRISM Architecture: Supporting Enhanced Streaming Services in a <br>content distribution network</br>.",
                "IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy.",
                "A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture.",
                "NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman.",
                "A multi-agent TV recommender.",
                "Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11"
            ],
            "original_annotated_samples": [
                "Note that the Spectrum architecture assumes the existence of a <br>content distribution network</br> (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]).",
                "An example of this type of configuration is a <br>content distribution network</br> (CDN) that distributes and stores content based on a schedule determined by some centralized controller.",
                "PRISM Architecture: Supporting Enhanced Streaming Services in a <br>content distribution network</br>."
            ],
            "translated_annotated_samples": [
                "Se debe tener en cuenta que la arquitectura Spectrum asume la existencia de una <br>red de distribución de contenido</br> (CDN) que puede facilitar la distribución eficiente de contenido (por ejemplo, la arquitectura CDN PRISM [2]).",
                "Un ejemplo de este tipo de configuración es una <br>red de distribución de contenido</br> (CDN) que distribuye y almacena contenido según un horario determinado por algún controlador centralizado.",
                "Arquitectura PRISM: Apoyo a Servicios de Streaming Mejorados en una Red de Distribución de Contenidos."
            ],
            "translated_text": "Diseño e Implementación de un Sistema de Gestión de Contenido Distribuido por C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ y J.E. La convergencia de avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan y se intercambian rutinariamente entre dispositivos habilitados para redes. El seguimiento (o gestión) de dicho contenido sigue siendo un desafío debido a la gran cantidad de datos. Almacenar medios continuos en vivo (como contenido de televisión o radio) aumenta la complejidad debido a que este contenido no tiene un inicio o fin bien definido y, por lo tanto, resulta engorroso de manejar. El almacenamiento en red permite que el contenido que se ve lógicamente como parte de la misma colección esté distribuido en una red, lo que hace que la gestión de contenido sea casi imposible de manejar sin un sistema de gestión de contenido. En este documento presentamos el diseño e implementación del sistema de gestión de contenido Spectrum, que maneja de manera efectiva el contenido de medios enriquecidos en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto en escenarios independientes como en diferentes entornos de red. Un aspecto único de Spectrum es que requiere que se aplique una (o más) políticas de retención a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido al que ya no se le aplica una política de retención simplemente se elimina del sistema. Diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo, que son bloques de construcción básicos necesarios para manejar el almacenamiento de medios continuos en vivo, al contenido. No solo describimos los detalles de la arquitectura del Spectrum, sino que también proporcionamos casos de uso típicos. Categorías y Descriptores de Asignaturas C.2.4 [Organización de Sistemas Informáticos]: Redes de comunicación informática-sistemas distribuidos; H.3.4 [Sistemas de Información]: Almacenamiento de información y recuperación-sistemas y software Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar contenido es y siempre ha sido una de las funciones principales de una computadora. Las aplicaciones iniciales de computación incluyen formateadores de texto y compiladores de programas. El contenido era gestionado inicialmente mediante la interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que las personas desean utilizarlo han cambiado considerablemente. Nuevos tipos de contenido, como las transmisiones multimedia continuas, se han vuelto comunes debido a la convergencia de avances en tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de video codificado de calidad televisiva en un solo disco duro. Esto ha llevado a la introducción de sistemas de grabación de video digital independientes o personales, como TiVO y ReplayTV. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas, con la red misma actuando como un gran repositorio de datos. La proliferación de contenido de alta calidad habilitada por estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. El enfoque de nuestro trabajo se centra en el almacenamiento de contenido multimedia y, en particular, en el almacenamiento de contenido multimedia continuo en forma preempaquetada o en vivo. La necesidad de gestión de contenido en esta área es evidente cuando se considera lo siguiente: • Los aumentos en la capacidad y las disminuciones en el costo de almacenamiento significan que incluso los sistemas de escritorio modestos de hoy tienen la capacidad de almacenar grandes cantidades de contenido. La gestión manual de dicho contenido (o más correctamente, la falta de gestión manual de dicho contenido) conduce a grandes ineficiencias donde el contenido no deseado y olvidado se acumula y donde el contenido deseado no se puede encontrar. • Aunque es cierto para todos los tipos de contenido, el almacenamiento de contenido de medios continuos es especialmente problemático. El primer contenido de medios continuos sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque sin política para almacenarlo no funcionará para todos, excepto para los sistemas más pequeños. Segundo, el almacenamiento de contenido en vivo como la televisión o la radio es inherentemente problemático ya que estas señales son flujos continuos sin puntos finales. Esto significa que antes de siquiera pensar en gestionar dicho contenido, es necesario abstraerlo en algo que pueda ser manipulado y gestionado. Al tratar con medios continuos almacenados, es necesario gestionar dicho contenido tanto a un nivel detallado como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar solo los momentos destacados de un evento deportivo en particular no debería estar obligado a tener que almacenar el contenido relacionado con todo el evento. Al mismo tiempo, el usuario podría querer considerar el contenido en su totalidad, por ejemplo, eliminar todo el contenido que no he visto en el último mes, excepto aquel contenido que fue marcado explícitamente para archivar. • Como se indicó anteriormente, tratar de mantener un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenido es muy difícil. Sin embargo, cuando los dispositivos de almacenamiento reales están distribuidos en una red, la tarea de llevar un registro del contenido es casi imposible. Este escenario es cada vez más común en sistemas de distribución de contenido basados en redes y es probable que también cobre importancia en escenarios de redes domésticas. Parecería claro entonces que se necesita un sistema de gestión de contenido que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que aproveche la capacidad de almacenamiento en red de los dispositivos. Este sistema debería permitir el almacenamiento eficiente y el acceso al contenido en dispositivos de almacenamiento de red heterogéneos de acuerdo a las preferencias del usuario. El sistema de gestión de contenido debe traducir las preferencias del usuario en políticas de almacenamiento de bajo nivel apropiadas y permitir que esas preferencias se expresen a un nivel de granularidad fino (sin requerirlo en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar sobre (es decir, cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenido distribuido es difícil debido a la cantidad de requisitos impuestos en el sistema. Por ejemplo: • El sistema de gestión de contenidos debe operar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando contenido almacenado en un sistema de archivos local, mientras que en otros el contenido puede estar almacenado en un dispositivo de almacenamiento de red separado. El administrador de contenido puede ser responsable de implementar las políticas que utiliza para hacer referencia al contenido o ese rol puede ser delegado a un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. El sistema de gestión de contenidos debe ser flexible y capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe ser obtenido, cuándo debe ser recuperado, cuánto tiempo debe ser retenido y en qué circunstancias debe ser descartado. Esto significa que el sistema de gestión de contenido debe permitir que múltiples aplicaciones hagan referencia al contenido con un conjunto amplio de políticas y que todo funcione de manera integrada. • El sistema de gestión de contenido debe ser capaz de monitorear las referencias al contenido y utilizar esa información para ubicar el contenido en la ubicación correcta en la red para un acceso eficiente de las aplicaciones. • El sistema de gestión de contenido debe manejar la interacción entre la población implícita y explícita del contenido en el borde de la red. • El sistema de contenido debe ser capaz de gestionar eficientemente grandes conjuntos de contenido, incluidos flujos continuos. Debe ser capaz de empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas, hemos diseñado e implementado la arquitectura del sistema de gestión de contenido Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan ya sea en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite que múltiples aplicaciones hagan referencia al contenido utilizando políticas diferentes. Se debe tener en cuenta que la arquitectura Spectrum asume la existencia de una <br>red de distribución de contenido</br> (CDN) que puede facilitar la distribución eficiente de contenido (por ejemplo, la arquitectura CDN PRISM [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. El trabajo relacionado se describe en la Sección 4, y la Sección 5 contiene nuestra conclusión y sugerencias para trabajos futuros. 2. La arquitectura del sistema de gestión de contenido distribuido Spectrum consta de tres capas de gestión distintas que pueden o no estar distribuidas en múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todo el contenido de una aplicación según las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de video personal (PVR), el administrador de contenido recibe solicitudes de contenido desde una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y gestionar contenido en el dispositivo. El administrador de políticas implementa y hace cumplir varias políticas de almacenamiento que el administrador de contenido utiliza para hacer referencia al contenido. El gestor de políticas exporta una interfaz al gestor de contenido que le permite al gestor de contenido solicitar que un contenido sea tratado de acuerdo con una política específica. Spectrum permite que se realicen políticas arbitrarias al proporcionar un conjunto fijo de plantillas de políticas base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (de lo contrario, Spectrum se puede extender fácilmente para cargar dinámicamente nuevo código de plantilla de política base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido solo puede existir en el sistema siempre y cuando esté referenciado por al menos una política existente. Los conflictos de políticas se eliminan al hacer que el administrador de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin política asociada se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar de forma natural el intercambio de contenido entre diferentes políticas, lo cual es fundamental para el almacenamiento eficiente de objetos grandes. Ten en cuenta que una diferencia clave entre el gestor de contenido y el gestor de políticas es que el gestor de contenido gestiona referencias a múltiples piezas de contenido, es decir, tiene una vista de aplicación del contenido. Por otro lado, el gerente de políticas solo se preocupa por la política utilizada para gestionar piezas de contenido independientes. Por ejemplo, en una aplicación de PVR, la capa del gestor de contenido conocería los diferentes grupos de contenido gestionado, como mantener indefinidamente, mantener por un día y mantener si hay espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada pieza de contenido tiene su propia política (o políticas) aplicada a ella y es independiente de otro contenido. El gestor de almacenamiento: almacena contenido de manera eficiente mientras facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento guarda el contenido en fragmentos de subobjetos. Este enfoque tiene ventajas para la recuperación eficiente de contenido, pero lo más importante es que permite aplicar políticas a nivel de subobjeto, lo cual es críticamente importante al tratar con objetos muy grandes como partes de medios continuos, por ejemplo, piezas seleccionadas de contenido de televisión almacenadas en un PVR. Ten en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas que están siendo utilizadas por los gestores de contenido y de políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la figura muestra el caso más simple (no distribuido) donde todas las capas están implementadas en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como los PVRs. El siguiente caso corresponde al caso en el que hay un gestor de contenido centralizado que controla dispositivos de almacenamiento distribuido, cada uno de los cuales es responsable de implementar almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, operan de manera mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, típicamente operan de manera autónoma. Un ejemplo de este tipo de configuración es una <br>red de distribución de contenido</br> (CDN) que distribuye y almacena contenido según un horario determinado por algún controlador centralizado. Por ejemplo, la CDN podría precargar dispositivos periféricos con contenido que se espera que sea muy popular o distribuir archivos grandes a sucursales durante las horas de menor tráfico en un entorno empresarial con limitaciones de ancho de banda. Permitir que un único administrador de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y al caso más distribuido. La necesidad de este tipo de separación puede surgir por razones de escalabilidad o cuando se requiere controlar diferentes dispositivos de almacenamiento especializados con un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas controlando un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo detallado por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de Contenidos La capa del gestor de contenidos es la interfaz principal a través de la cual las aplicaciones específicas utilizan la arquitectura Spectrum. Por lo tanto, la capa del gestor de contenido proporciona una API para que la aplicación pueda manipular todos los aspectos de la arquitectura de Spectrum en diferentes niveles de granularidad. La API del gestor de contenido tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite agregar dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo el control del gestor de contenido y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos; este es el único lugar en la arquitectura donde la aplicación debe ser consciente de esta distinción. Una vez que un dispositivo es mapeado en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Almacenes: Los almacenes son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (por ejemplo, espacio en disco) a la misma. Las tiendas solo se pueden crear en dispositivos físicos que estén mapeados en el sistema. Grupos de Políticas: Los grupos de políticas son el medio por el cual una aplicación especifica, instancia y modifica las políticas que se aplican al contenido del Espectro. El uso típico de este conjunto de funciones es seleccionar una de un pequeño conjunto de políticas base y parametrizar esta instancia específica de la política. Los grupos de políticas se crean dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento y que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que incluyen una especificación de tiempo sofisticada permiten un almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría expulsar el contenido del sistema en un momento absoluto o relativo específico. Una política basada en el tiempo un poco más compleja habilitada por la arquitectura Spectrum podría permitir que el contenido se almacene en una ventana de tiempo de un número de horas (por ejemplo, las N horas más recientes se mantienen en el sistema). Las políticas basadas en el tiempo son de particular utilidad al tratar con contenido continuo como una transmisión en vivo. 6 Contenido: En el nivel más fino de granularidad, el contenido puede ser añadido o eliminado del sistema. El contenido se especifica al sistema mediante un localizador uniforme de recursos (URL) que indica de manera concisa la ubicación del contenido, así como el protocolo a utilizar para recuperarlo. Opcionalmente se puede asociar una especificación de tiempo con el contenido. Esto permite que el contenido sea recuperado en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Nuevamente, esto es particularmente útil para tratar con el almacenamiento y gestión de contenido en vivo. 2.2 Gestor de Políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones de API. Primero, hay funciones que operan en áreas de almacenamiento gestionadas y referencias basadas en políticas (prefs) al contenido almacenado allí. Segundo, hay conjuntos de funciones utilizadas para implementar cada política de gestión. La primera clase de funciones es utilizada por la capa de gestión de contenido para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar. Estas operaciones son utilizadas por el gestor de contenido para controlar su acceso al almacenamiento. El proceso de creación de políticas de gestión de operaciones se utiliza para establecer contacto con una tienda por primera vez. Una vez que esto se haya hecho, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Ten en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información solo necesita ser transmitida al administrador de políticas una vez al momento de la creación. Para operaciones abiertas, el administrador de políticas utilizará la información en caché para contactar a la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el administrador de contenido consulte al administrador de políticas sobre qué contenido está actualmente presente para una URL dada. Para medios continuos, se devolverán rangos de tiempo de medios presentes. recurso: Las rutinas de recurso se utilizan para consultar al administrador de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su totalidad y otra que se aplica a una referencia de política en particular. La API de recursos es extensible, actualmente admitimos consultas sobre el uso de disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer se utiliza por el gestor de contenido para hacer referencia al contenido en la tienda. Si el contenido no está presente, esta llamada resultará en la obtención del contenido (o en la programación para obtenerlo si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL donde se almacenará, la URL desde la cual se obtendrán los datos si no están presentes, la política para almacenar el contenido y los argumentos utilizados para parametrizar la política. El resultado de una operación de establecimiento de prefijo exitosa es una cadena de identificación de referencia de política. Este identificador se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones del gestor de políticas se utilizan para implementar todas las políticas respaldadas por Spectrum. Visualizamos un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitiva puede ser parametrizada para funcionar diariamente, semanalmente o mensualmente. Ten en cuenta que el gestor de políticas solo se preocupa por ejecutar una política específica. Las razones de nivel superior para elegir una política determinada son manejadas por el gerente de contenido y aplicación. Una política base se implementa utilizando seis funciones: establecer: se llama cuando se establece una preferencia con las URL requeridas y los parámetros de la política base. El rutina establecida hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar acción (por ejemplo, iniciar una descarga) y programa una devolución de llamada para ese momento. También puede registrarse para recibir devoluciones de llamada si se recibe nuevo contenido para una URL específica. actualizar: se llama para cambiar los parámetros de una preferencia, o para descartar la referencia de la política. newclip: se llama cuando se recibe un fragmento de nuevo contenido para una URL de interés. La política base normalmente establece que se llame a newclip para una URL dada cuando se establece la preferencia. Cuando se llama a newclip, la política base verifica sus parámetros para determinar si desea agregar una referencia al clip recién recibido. callback: llamado cuando la preferencia programa una devolución de llamada basada en temporizador. Este es un mecanismo útil de activación para preferencias que necesitan estar inactivas durante un largo período de tiempo (por ejemplo, entre programas). arranque/apagado: se llama cuando el sistema de gestión de contenidos se está iniciando o apagando. La operación de arranque se utiliza típicamente para programar devoluciones de llamada iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para cerrar de forma ordenada los flujos de entrada/salida y guardar el estado. 2.3 Gestor de almacenamiento El rol del gestor de almacenamiento de Spectrum es controlar todas las operaciones de entrada/salida asociadas con una tienda dada. El gestor de almacenamiento de Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo, un dispositivo de almacenamiento). Para los medios continuos, a nivel del gestor de almacenamiento, el contenido se almacena como una colección de fragmentos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un fragmento podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión en continuo, tanto las rutinas de entrada como de salida toman rangos de tiempo que programan cuándo debe ocurrir la operación de E/S, y ambas rutinas devuelven un identificador de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el administrador de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar almacenes. También admite operaciones para consultar los usos de recursos y opciones admitidas por la tienda. Finalmente, el administrador de almacenamiento también tiene un procedimiento de descarte que puede ser utilizado por el administrador de políticas para informar a la tienda que elimine contenido de la tienda. 3. IMPLEMENTACIÓN Y CASOS DE USO En esta sección describimos nuestra implementación de Spectrum y cómo puede ser utilizada. 3.1 Implementación Hemos implementado las tres capas de Spectrum en C como parte de una biblioteca que puede ser enlazada con aplicaciones basadas en Spectrum. Cada capa lleva un registro de su estado a través de un conjunto de archivos de datos locales que persisten a través de reinicios, lo que permite a Spectrum manejar los ciclos de energía de manera fluida. Para las capas que residen en sistemas remotos (por ejemplo, una tienda remota), solo se almacena localmente la meta-información necesaria para contactar al administrador de políticas del gestor de contenido remoto, el gestor de almacenamiento, el recuperador de almacenamiento, los listados de programas, la interfaz de usuario gráfica, el DVR habilitado para red, la información del programa, la aplicación de DVR de contenido en la red habilitada para DVR. Figura 2: Espectro en un nodo de DVR habilitado para red. Nuestra aplicación de prueba utiliza un administrador de políticas y almacenamiento local para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficientemente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas de API de Spectrums admiten tanto modos síncronos como asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada a la API toma un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de la llamada y el estado de retorno. Para las llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamada. Para utilizar una función de la API de Spectrum, el llamante primero elige entre el modo sincrónico o asincrónico y asigna una estructura reqinfo. Para llamadas de sincronización, la reqinfo puede ser asignada en la pila, de lo contrario se asigna con malloc. Para llamadas asíncronas, se debe proporcionar una función de devolución de llamada al asignar el reqinfo. A continuación, el llamante invoca la función API de Spectrum deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas asincrónicas exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada asíncrona se completa o se produce un tiempo de espera, se llama a la función de devolución de llamada asíncrona con la información adecuada necesaria para completar el procesamiento. El diseño modular/capas de la arquitectura Spectrum simplifica el objetivo de distribución de funcionalidad. Además, la comunicación entre funciones suele ser de naturaleza maestro-esclavo(s). Esto significa que son posibles varios enfoques para la operación distribuida que cumplirían con los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un diseño modular simple. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y elegir el método de codificación que se debe utilizar con los datos a transferir. Los protocolos de transporte pueden variar desde protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP simple para la mayoría de nuestro transporte. Las llamadas a funciones a través de las diferentes APIs de Spectrum pueden ser codificadas utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos utilizando la biblioteca XML eXpat [4] para codificar nuestras llamadas. Mientras actualmente estamos transfiriendo nuestros mensajes codificados en XML utilizando una conexión TCP simple, en un entorno del mundo real esto puede ser fácilmente reemplazado con una implementación basada en capa de sockets seguros (SSL) para mejorar la seguridad al agregar SSL como protocolo de transporte. Un aspecto importante de Spectrum es que puede gestionar contenido basado en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la Sección 2.2, imagina un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben comprender las políticas de nivel base y cómo pueden ser parametrizadas. Para abordar este problema, tratamos cada política de nivel base como si fuera un programa separado. Cada política de nivel base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada utilizando una función similar a getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de los bytes no es un problema en una cadena. Dado que esta parte de Spectrum no se encuentra en la ruta crítica de los datos, este tipo de formato no representa un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos de Spectrum En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos de Spectrum en nuestro entorno. El enfoque de nuestro trabajo anterior ha sido la distribución de contenido para contenido de medios en streaming [2] y la grabación de video digital habilitada para redes [3]. El sistema Spectrum es aplicable a ambos escenarios de la siguiente manera. La Figura 2 muestra la arquitectura del DVR habilitado para red (NED). En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación de DVR obtiene listados de programas de alguna fuente de red, maneja la presentación al usuario a través de una interfaz gráfica de usuario (GUI) e interactúa con el sistema Spectrum a través de las APIs de la capa de gestión de contenido. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento que se aplicarán a dicho contenido. La obtención del contenido (a través de la red o localmente) y su posterior almacenamiento en el sistema local son manejados por los gestores de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenido en streaming (por ejemplo, PRISM [2]) está representado en la Figura 3. En este entorno, el contenido de medios en streaming (tanto en vivo, enlatado en vivo y a la carta) se distribuye a los portales periféricos desde donde se sirven los puntos finales de streaming. En nuestro entorno, la distribución y almacenamiento de contenido se realiza desde una estación centralizada de gestión de contenido que controla varios de los portales periféricos. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenido sin necesidad de una comunicación continua entre el gestor de contenido y los dispositivos periféricos, es decir, una vez que se han dado instrucciones a los dispositivos periféricos, pueden operar de forma independiente hasta que se deban realizar cambios. Ejemplo operativo de Spectrum 3.3 Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación de PVR basada en Spectrum programada para almacenar un día de contenido de transmisión en una ventana móvil. Para configurar la ventana deslizante, la aplicación utilizaría la API del gestor de contenido para crear un grupo de políticas y una referencia de política al contenido deseado. El establecimiento de la política de ventana de un día en movimiento haría que el gerente de políticas le pida al gerente de almacenamiento que comience a recibir el flujo. A medida que llega cada fragmento de datos en streaming, el gestor de políticas ejecuta la función newclip de las referencias de política. La función newclip agrega una referencia a cada fragmento que llega y programa una devolución de llamada para un día después. En ese momento, la política eliminará su referencia actual de un día al contenido y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considera el caso en el que el usuario decide guardar parte del contenido (por ejemplo, un programa específico) en la ventana deslizante durante una semana adicional. Para hacer esto, la aplicación solicita que el gestor de contenido agregue una nueva referencia de política adicional a la parte del contenido que se va a preservar. Por lo tanto, el contenido preservado tiene dos referencias: una del marco de tiempo móvil y otra de la solicitud de preservar el contenido por una semana adicional. Después de un día, la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. datos base url1 url2 (archivos multimedia...) (archivos multimedia...) almacenamiento de metadatos (información general...) url1 fragmentos preferencias rangos fragmentos multimedia, etc. url2 host poli ref1 ref1.archivos ref1.estado Figura 4: Diseño de datos de la tienda de políticas de Spectrum preservado por la segunda referencia. Después de que haya transcurrido la semana adicional, se llamará a la función de devolución de llamada para la segunda referencia. Esta función descartará la referencia restante al contenido y, como no hay referencias restantes, el contenido será liberado. Para poder funcionar en escenarios como los descritos anteriormente, el gestor de políticas de Spectrums debe administrar y mantener todas las referencias a diferentes fragmentos de medios. Estas referencias son persistentes y, por lo tanto, deben poder sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestro implementación del gestor de políticas de Spectrum logra esto utilizando la estructura de archivos y directorios mostrada en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el gestor de almacenamiento para almacenar los fragmentos de medios de cada URL activa. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Ten en cuenta que este directorio se utiliza solo si el gestor de almacenamiento es local. Si el administrador de políticas está utilizando un administrador de almacenamiento externo (por ejemplo, un dispositivo de almacenamiento), entonces los archivos multimedia se almacenan de forma remota y solo son referenciados de forma remota por el administrador de políticas. meta: este directorio contiene información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) y la información sobre los tipos de fragmentos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los fragmentos de datos almacenados. El archivo de fragmentos contiene una lista de fragmentos almacenados actualmente y sus recuentos de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de intervalos de tiempo de los datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato del medio que se está almacenando bajo la URL actual. poly: este directorio contiene un conjunto de subdirectorios de host. Cada subdirectorio de host contiene el conjunto de referencias de políticas creadas por ese host. La información de cada referencia de política está dividida en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files y ref1.state. El archivo ref1 contiene información sobre la referencia de la política que no cambia con frecuencia. Esta información incluye la política base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a fragmentos que posee el prefijo ref1. Finalmente, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Ten en cuenta que otras implementaciones son posibles. Por ejemplo, un administrador de espectro de calidad de operador podría almacenar toda su información de políticas y referencias en un sistema de base de datos de alto rendimiento. 10 4. TRABAJO RELACIONADO Varios autores han abordado el problema de la gestión de contenido en redes distribuidas. Gran parte del trabajo se centra en el aspecto de gestión de políticas. Por ejemplo, en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda del usuario utilizando un Protocolo de Diseminación de Demanda. El rendimiento del esquema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Enrutador Central, una Base de Conocimiento en Caché, Subcachés y un juez de expulsión de Subcaché. La base de conocimientos de caché permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenido en el entorno de red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenido, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de televisión que se utilizan en los PVR para seleccionar automáticamente contenido para los usuarios, por ejemplo [6]. En el caso de que Spectrum se utilice en una configuración de PVR, este tipo de sistema realizaría una función de nivel superior y claramente se beneficiaría de las funcionalidades de la arquitectura de Spectrum. Finalmente, en el entorno comercial de CDN, los proveedores (por ejemplo, Cisco y Netapp han desarrollado e implementado productos y herramientas de gestión de contenido. A diferencia de la arquitectura Spectrum que permite que los dispositivos periféricos operen de manera autónoma en gran medida, las soluciones de los proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. CONCLUSIÓN Y TRABAJOS FUTUROS En este artículo presentamos el diseño e implementación de la arquitectura de gestión de contenido Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que son conscientes del tiempo, lo que permite gestionar de manera efectiva el almacenamiento de contenido multimedia continuo. Finalmente, el diseño modular de la arquitectura Spectrum permite tanto realizaciones independientes como distribuidas para que el sistema pueda ser desplegado en una variedad de aplicaciones. Existen varios problemas abiertos que requerirán trabajo futuro. Algunos de estos problemas incluyen: • Visualizamos que Spectrum pueda gestionar contenido en sistemas que van desde grandes CDNs hasta dispositivos más pequeños como TiVO [8]. Para que estos sistemas más pequeños puedan soportar Spectrum, necesitarán de una red y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo se puede integrar en la arquitectura de Spectrum. • Spectrum nombra el contenido por URL, pero intencionalmente no hemos definido el formato de las URL de Spectrum, cómo se relacionan con el nombre real del contenido, o cómo los nombres y las URL deben presentarse al usuario. Si bien anteriormente abordamos estos temas en otro lugar [2], creemos que hay más trabajo por hacer y que se deben redactar estándares basados en consenso sobre la nomenclatura. En este documento nos hemos centrado en la gestión de contenido para objetos de medios continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero aún no hemos resuelto los detalles necesarios para admitir esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que el contenido multimedia se comparta fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. REFERENCIAS [1] K. . Cheng y Y. Kambayashi. Gestión de contenido basada en multicache para el almacenamiento en caché web. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información en la Web, junio de 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. Arquitectura PRISM: Apoyo a Servicios de Streaming Mejorados en una Red de Distribución de Contenidos. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de video digital habilitado para red. 11º Taller de la IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji y P. Shenoy. Una arquitectura de clúster de servidores de medios en streaming adaptativa a la demanda y consciente de la localidad (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Un recomendador de televisión multiagente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "uniform resource locator": {
            "translated_key": "localizador uniforme de recursos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E.",
                "van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices.",
                "Keeping track of (or managing) such content remains challenging due to the sheer volume of data.",
                "Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with.",
                "Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system.",
                "In this paper we present the design and implementation of the Spectrum content management system, which deals with rich media content effectively in this environment.",
                "Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios.",
                "A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system.",
                "This means that there are no eviction policies.",
                "Content that no longer has a retention policy applied to it is simply removed from the system.",
                "Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication.",
                "This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content.",
                "We not only describe the details of the Spectrum architecture but also give typical use cases.",
                "Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1.",
                "INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer.",
                "Initial computing applications include text formatters and program compilers.",
                "Content was initially managed by explicit user interaction through the use of files and filesystems.",
                "As technology has advanced, both the types of content and the way people wish to use it have greatly changed.",
                "New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies.",
                "For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive.",
                "This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7].",
                "Another example is the combination of encoding and broadband networking technology.",
                "This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository.",
                "The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data.",
                "The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms.",
                "The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content.",
                "Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic.",
                "First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems.",
                "Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints.",
                "This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level.",
                "For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event.",
                "At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult.",
                "However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible.",
                "This scenario is increasingly common in network based content distribution systems and is likely to also become important in home-networking scenarios.",
                "It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed.",
                "This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences.",
                "The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general).",
                "The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content.",
                "Addressing this distributed content management problem is difficult due to the number of requirements placed on the system.",
                "For example: • The content management system must operate on a large number of heterogeneous systems.",
                "In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance.",
                "The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer.",
                "A application program interface (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies.",
                "These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded.",
                "This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams.",
                "It needs to be able to package this content in such a way that it is convenient for users to access.",
                "To address these issues we have designed and implemented the Spectrum content management system architecture.",
                "Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers.",
                "It allows multiple applications to reference content using differing policies.",
                "Note that the Spectrum architecture assumes the existence of a content distribution network (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]).",
                "The rest of this paper is organized as follows.",
                "Section 2 describes the architecture of our content management system.",
                "In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use.",
                "Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2.",
                "THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1.",
                "The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences.",
                "For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. policy manager: implements and enforces various storage polices that the content manager uses to refer to content.",
                "The policy manager exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy.",
                "Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized.",
                "It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time).",
                "A key aspect of the policy manager is that it allows different policies to be simultaneously applied to the same content (or parts of the same content).",
                "Furthermore content can only exist in the system so long as it is referenced by at least one existing policy.",
                "Policy conflicts are eliminated by having the policy manager deal exclusively with retention policies rather than with a mix of retention and eviction policies.",
                "This means that content with no policy associated with it is immediately and automatically removed from the system.",
                "This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects.",
                "Note that a key difference between the content manager and the policy manager is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content.",
                "On the other hand, the policy manager is only concerned with the policy used to manage standalone pieces of content.",
                "For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace.",
                "However, at the policy manager level, each piece of content has 5 Content Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers.",
                "Specifically the storage manager stores content in sub-object chunks.",
                "This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR.",
                "Note that the storage manager has no knowledge of the policies being used by the content and policy managers.",
                "Another unique part of our approach is that the interfaces between the layers can either be local or distributed.",
                "Figure 1 shows the four possible cases.",
                "The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box.",
                "This configuration would be used in selfcontained applications such as PVRs.",
                "The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage.",
                "In this case although the remote devices are controlled by the central manager they operate much more independently.",
                "For example, once they receive instructions from the central manager they typically operate in autonomous fashion.",
                "An example of this type of configuration is a content distribution network (CDN) that distributes and stores content based on a schedule determined by some centralized controller.",
                "For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment.",
                "Allowing a single policy manager to control several storage managers leads to the next combination of functions and the most distributed case.",
                "The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single policy manager.",
                "The final case shows a content manager combined with a policy manager controlling a remote storage manager.",
                "This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the policy manager.",
                "We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture.",
                "As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity.",
                "The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system.",
                "Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction.",
                "Once a device is mapped into the application through this interface, the system tracks its type and location.",
                "Users simply refer to the content through an application-provided label.",
                "Stores: Stores are subsets of physical storage devices.",
                "Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it.",
                "Stores can only be created in physical devices that are mapped into the system.",
                "Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content.",
                "Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy.",
                "Policy groups are created within existing stores in the system.",
                "The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage.",
                "In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time.",
                "For example, a simple time-based policy could evict content from the system at a certain absolute or relative time.",
                "A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system).",
                "Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system.",
                "Content is specified to the system by means of a <br>uniform resource locator</br> (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it.",
                "Optionally a time specification can be associated with content.",
                "This allows content to be fetched into the system at some future time, or at future time intervals.",
                "Again, this is particularly useful for dealing with the storage and management of live content. 2.2 Policy Manager The policy manager layer of the Spectrum architecture has two main types of API functions.",
                "First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there.",
                "Second, there are sets of functions used to implement each management policy.",
                "The first class of functions is used by the content manager layer to access storage.",
                "Operations include: create, open, and close: These operations are used by the content manager to control its access to storage.",
                "The policy managers create operation is used to establish contact with a store for the first time.",
                "Once this is done, the store can be open and closed using the appropriate routines.",
                "Note that the parameters used to create a store contain information on how to reach it.",
                "For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them.",
                "The information only needs to be passed to the policy manager once at create time.",
                "For open operations, the policy manager will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the policy manager about what content is currently present for a given URL.",
                "For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the policy manager about its current resource usage.",
                "There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference.",
                "The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store.",
                "If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available).",
                "Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy.",
                "The result of a successful pref establish operation is a policy reference ID string.",
                "This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely.",
                "The second group of policy manager functions are used to implement all the polices supported by Spectrum.",
                "We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly.",
                "Note that the policy manager is only concerned with executing a specific policy.",
                "The higher-level reasons for choosing a given policy are handled by the content and application manager.",
                "A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters.",
                "The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time.",
                "It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest.",
                "The base policy typically arranges for newclip to be called for a given URL when the pref is established.",
                "When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback.",
                "This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down.",
                "The boot operation is typically used to schedule initial callbacks or start I/O operations.",
                "The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store.",
                "Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance).",
                "For continuous media, at the storage manager level content is stored as a collection of time-based chunks.",
                "Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database.",
                "The two main storage manager operations are input and output.",
                "The input routine is used to store content in a store under a given name.",
                "The output routine is used to send data from the store to a client.",
                "For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future.",
                "Much like the policy manager, the storage manager also provides API functions to create, open, and close stores.",
                "It also supports operations to query the resource usages and options supported by the store.",
                "Finally, the storage manager also has a discard routine that may be used by the policy manager to inform the store to remove content from the store. 3.",
                "IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications.",
                "Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles.",
                "For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally.",
                "Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem.",
                "To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure.",
                "Each API call takes a pointer to a reqinfo structure as one of its arguments.",
                "This structure is used to hold the call state and return status.",
                "For async calls, the reqinfo also contains a pointer to a callback function.",
                "To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure.",
                "For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc.",
                "For async calls, a callback function must be provided when the reqinfo is allocated.",
                "Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument.",
                "For sync calls, the result of the calls is returned immediately in the reqinfo structure.",
                "For successful async calls, a call in progress value is returned.",
                "Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing.",
                "The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality.",
                "Furthermore, communication between functions is typically of a master-slave(s) nature.",
                "This means that several approaches to distributed operation are possible that would satisfy the architectural requirements.",
                "In our implementation we have opted to realize this functionality with a simple modular design.",
                "We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred.",
                "Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP.",
                "We currently are using plain TCP for most of our transport.",
                "Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML.",
                "We are currently using the eXpat XML library [4] to encode our calls.",
                "While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol.",
                "An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms.",
                "As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized.",
                "To address this issue, we treat each base-level policy as if it was a separate program.",
                "Each base-level policy should have a well known name and command line options for parameterization.",
                "In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function.",
                "This format is easily understood and provides portability since byte order is not an issue in a string.",
                "Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment.",
                "The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3].",
                "The Spectrum system is applicable to both scenarios as follows.",
                "Figure 2 shows the Network Enabled DVR (NED) architecture.",
                "In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration.",
                "The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs.",
                "This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content.",
                "Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers.",
                "The use of Spectrum in a streaming content distribution architecture (e.g.",
                "PRISM [2]) is depicted in Figure 3.",
                "In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served.",
                "In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals.",
                "The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window.",
                "To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content.",
                "The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream.",
                "As each chunk of streaming data arrives, the policy manager executes the policy references newclip function.",
                "The newclip function adds a reference to each arriving chunk, and schedules a callback a day later.",
                "At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy.",
                "Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week.",
                "To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved.",
                "Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week.",
                "After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference.",
                "After the additional week has past, the callback function for the second reference will be called.",
                "This function will discard the remaining reference to the content and as there are no remaining references the content will be freed.",
                "In order to function in scenarios like the ones described above, Spectrums policy manager must manage and maintain all the references to various chunks of media.",
                "These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted.",
                "Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure 4.",
                "There are three classes of data stored, and each class has its own top level directory.",
                "The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media.",
                "The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime.",
                "Note that this directory is used only if the storage manager is local.",
                "If the policy manager is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the policy manager. meta: this directory contains general meta information about the storage manager being used and the data it is storing.",
                "General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle.",
                "The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored.",
                "The chunks file contains a list of chunks currently stored and their reference counts.",
                "The prefs file contains a list of active policy references that point to this URL.",
                "The ranges file contains a list of time ranges of data currently stored.",
                "Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories.",
                "Each host subdirectory contains the set of policy references created by that host.",
                "Information on each policy reference is broken up into three files.",
                "For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state.",
                "The ref1 file contains information about the policy reference that does not change frequently.",
                "This information includes the base-policy and the parameters used to create the reference.",
                "The ref1.files file contains the list of references to chunks that pref ref1 owns.",
                "Finally, the ref1.state file contains optional policy-specific state information that can change over time.",
                "Together, these files and directories are used to track references in our implementation of Spectrum.",
                "Note that other implementations are possible.",
                "For example, a carrier-grade Spectrum manager might store all its policy and reference information in a high-performance database system. 10 4.",
                "RELATED WORK Several authors have addressed the problem of the management of content in distributed networks.",
                "Much of the work focuses on the policy management aspect.",
                "For example in [5], the problem of serving multimedia content via distributed servers is considered.",
                "Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol.",
                "The performance of the scheme is benchmarked via simulation.",
                "In [1] content is distributed among sub-caches.",
                "The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge.",
                "The Cache Knowledge base allows sophisticated policies to be employed.",
                "Simulation is used to compare the proposed scheme with well-known replacement algorithms.",
                "Our work differs in that we are considering more than the policy management aspects of the problem.",
                "After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, Policy manager and Storage manager.",
                "This has allowed us to easily implement and experiment with a prototype system.",
                "Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6].",
                "In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture.",
                "Finally, in the commercial CDN environment vendors (e.g.",
                "Cisco and Netapp) have developed and implemented content management products and tools.",
                "Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5.",
                "CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture.",
                "Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage.",
                "Specifically, the system allows different policies to be applied to the same content without replication.",
                "Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content.",
                "Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications.",
                "There are a number of open issues that will require future work.",
                "Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8].",
                "In order for these smaller systems to support Spectrum they will require networking and an external API.",
                "When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user.",
                "While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects.",
                "We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance.",
                "Adapting Spectrum to meet legal requirements will likely require more technical work. 6.",
                "REFERENCES [1] K. .",
                "Cheng and Y. Kambayashi.",
                "Multicache-based Content Management for Web Caching.",
                "Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "PRISM Architecture: Supporting Enhanced Streaming Services in a Content Distribution Network.",
                "IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy.",
                "A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture.",
                "NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman.",
                "A multi-agent TV recommender.",
                "Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11"
            ],
            "original_annotated_samples": [
                "Content is specified to the system by means of a <br>uniform resource locator</br> (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it."
            ],
            "translated_annotated_samples": [
                "El contenido se especifica al sistema mediante un <br>localizador uniforme de recursos</br> (URL) que indica de manera concisa la ubicación del contenido, así como el protocolo a utilizar para recuperarlo."
            ],
            "translated_text": "Diseño e Implementación de un Sistema de Gestión de Contenido Distribuido por C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ y J.E. La convergencia de avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan y se intercambian rutinariamente entre dispositivos habilitados para redes. El seguimiento (o gestión) de dicho contenido sigue siendo un desafío debido a la gran cantidad de datos. Almacenar medios continuos en vivo (como contenido de televisión o radio) aumenta la complejidad debido a que este contenido no tiene un inicio o fin bien definido y, por lo tanto, resulta engorroso de manejar. El almacenamiento en red permite que el contenido que se ve lógicamente como parte de la misma colección esté distribuido en una red, lo que hace que la gestión de contenido sea casi imposible de manejar sin un sistema de gestión de contenido. En este documento presentamos el diseño e implementación del sistema de gestión de contenido Spectrum, que maneja de manera efectiva el contenido de medios enriquecidos en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto en escenarios independientes como en diferentes entornos de red. Un aspecto único de Spectrum es que requiere que se aplique una (o más) políticas de retención a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido al que ya no se le aplica una política de retención simplemente se elimina del sistema. Diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo, que son bloques de construcción básicos necesarios para manejar el almacenamiento de medios continuos en vivo, al contenido. No solo describimos los detalles de la arquitectura del Spectrum, sino que también proporcionamos casos de uso típicos. Categorías y Descriptores de Asignaturas C.2.4 [Organización de Sistemas Informáticos]: Redes de comunicación informática-sistemas distribuidos; H.3.4 [Sistemas de Información]: Almacenamiento de información y recuperación-sistemas y software Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar contenido es y siempre ha sido una de las funciones principales de una computadora. Las aplicaciones iniciales de computación incluyen formateadores de texto y compiladores de programas. El contenido era gestionado inicialmente mediante la interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que las personas desean utilizarlo han cambiado considerablemente. Nuevos tipos de contenido, como las transmisiones multimedia continuas, se han vuelto comunes debido a la convergencia de avances en tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de video codificado de calidad televisiva en un solo disco duro. Esto ha llevado a la introducción de sistemas de grabación de video digital independientes o personales, como TiVO y ReplayTV. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas, con la red misma actuando como un gran repositorio de datos. La proliferación de contenido de alta calidad habilitada por estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. El enfoque de nuestro trabajo se centra en el almacenamiento de contenido multimedia y, en particular, en el almacenamiento de contenido multimedia continuo en forma preempaquetada o en vivo. La necesidad de gestión de contenido en esta área es evidente cuando se considera lo siguiente: • Los aumentos en la capacidad y las disminuciones en el costo de almacenamiento significan que incluso los sistemas de escritorio modestos de hoy tienen la capacidad de almacenar grandes cantidades de contenido. La gestión manual de dicho contenido (o más correctamente, la falta de gestión manual de dicho contenido) conduce a grandes ineficiencias donde el contenido no deseado y olvidado se acumula y donde el contenido deseado no se puede encontrar. • Aunque es cierto para todos los tipos de contenido, el almacenamiento de contenido de medios continuos es especialmente problemático. El primer contenido de medios continuos sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque sin política para almacenarlo no funcionará para todos, excepto para los sistemas más pequeños. Segundo, el almacenamiento de contenido en vivo como la televisión o la radio es inherentemente problemático ya que estas señales son flujos continuos sin puntos finales. Esto significa que antes de siquiera pensar en gestionar dicho contenido, es necesario abstraerlo en algo que pueda ser manipulado y gestionado. Al tratar con medios continuos almacenados, es necesario gestionar dicho contenido tanto a un nivel detallado como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar solo los momentos destacados de un evento deportivo en particular no debería estar obligado a tener que almacenar el contenido relacionado con todo el evento. Al mismo tiempo, el usuario podría querer considerar el contenido en su totalidad, por ejemplo, eliminar todo el contenido que no he visto en el último mes, excepto aquel contenido que fue marcado explícitamente para archivar. • Como se indicó anteriormente, tratar de mantener un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenido es muy difícil. Sin embargo, cuando los dispositivos de almacenamiento reales están distribuidos en una red, la tarea de llevar un registro del contenido es casi imposible. Este escenario es cada vez más común en sistemas de distribución de contenido basados en redes y es probable que también cobre importancia en escenarios de redes domésticas. Parecería claro entonces que se necesita un sistema de gestión de contenido que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que aproveche la capacidad de almacenamiento en red de los dispositivos. Este sistema debería permitir el almacenamiento eficiente y el acceso al contenido en dispositivos de almacenamiento de red heterogéneos de acuerdo a las preferencias del usuario. El sistema de gestión de contenido debe traducir las preferencias del usuario en políticas de almacenamiento de bajo nivel apropiadas y permitir que esas preferencias se expresen a un nivel de granularidad fino (sin requerirlo en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar sobre (es decir, cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenido distribuido es difícil debido a la cantidad de requisitos impuestos en el sistema. Por ejemplo: • El sistema de gestión de contenidos debe operar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando contenido almacenado en un sistema de archivos local, mientras que en otros el contenido puede estar almacenado en un dispositivo de almacenamiento de red separado. El administrador de contenido puede ser responsable de implementar las políticas que utiliza para hacer referencia al contenido o ese rol puede ser delegado a un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. El sistema de gestión de contenidos debe ser flexible y capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe ser obtenido, cuándo debe ser recuperado, cuánto tiempo debe ser retenido y en qué circunstancias debe ser descartado. Esto significa que el sistema de gestión de contenido debe permitir que múltiples aplicaciones hagan referencia al contenido con un conjunto amplio de políticas y que todo funcione de manera integrada. • El sistema de gestión de contenido debe ser capaz de monitorear las referencias al contenido y utilizar esa información para ubicar el contenido en la ubicación correcta en la red para un acceso eficiente de las aplicaciones. • El sistema de gestión de contenido debe manejar la interacción entre la población implícita y explícita del contenido en el borde de la red. • El sistema de contenido debe ser capaz de gestionar eficientemente grandes conjuntos de contenido, incluidos flujos continuos. Debe ser capaz de empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas, hemos diseñado e implementado la arquitectura del sistema de gestión de contenido Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan ya sea en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite que múltiples aplicaciones hagan referencia al contenido utilizando políticas diferentes. Se debe tener en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenido (CDN) que puede facilitar la distribución eficiente de contenido (por ejemplo, la arquitectura CDN PRISM [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. El trabajo relacionado se describe en la Sección 4, y la Sección 5 contiene nuestra conclusión y sugerencias para trabajos futuros. 2. La arquitectura del sistema de gestión de contenido distribuido Spectrum consta de tres capas de gestión distintas que pueden o no estar distribuidas en múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todo el contenido de una aplicación según las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de video personal (PVR), el administrador de contenido recibe solicitudes de contenido desde una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y gestionar contenido en el dispositivo. El administrador de políticas implementa y hace cumplir varias políticas de almacenamiento que el administrador de contenido utiliza para hacer referencia al contenido. El gestor de políticas exporta una interfaz al gestor de contenido que le permite al gestor de contenido solicitar que un contenido sea tratado de acuerdo con una política específica. Spectrum permite que se realicen políticas arbitrarias al proporcionar un conjunto fijo de plantillas de políticas base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (de lo contrario, Spectrum se puede extender fácilmente para cargar dinámicamente nuevo código de plantilla de política base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido solo puede existir en el sistema siempre y cuando esté referenciado por al menos una política existente. Los conflictos de políticas se eliminan al hacer que el administrador de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin política asociada se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar de forma natural el intercambio de contenido entre diferentes políticas, lo cual es fundamental para el almacenamiento eficiente de objetos grandes. Ten en cuenta que una diferencia clave entre el gestor de contenido y el gestor de políticas es que el gestor de contenido gestiona referencias a múltiples piezas de contenido, es decir, tiene una vista de aplicación del contenido. Por otro lado, el gerente de políticas solo se preocupa por la política utilizada para gestionar piezas de contenido independientes. Por ejemplo, en una aplicación de PVR, la capa del gestor de contenido conocería los diferentes grupos de contenido gestionado, como mantener indefinidamente, mantener por un día y mantener si hay espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada pieza de contenido tiene su propia política (o políticas) aplicada a ella y es independiente de otro contenido. El gestor de almacenamiento: almacena contenido de manera eficiente mientras facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento guarda el contenido en fragmentos de subobjetos. Este enfoque tiene ventajas para la recuperación eficiente de contenido, pero lo más importante es que permite aplicar políticas a nivel de subobjeto, lo cual es críticamente importante al tratar con objetos muy grandes como partes de medios continuos, por ejemplo, piezas seleccionadas de contenido de televisión almacenadas en un PVR. Ten en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas que están siendo utilizadas por los gestores de contenido y de políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la figura muestra el caso más simple (no distribuido) donde todas las capas están implementadas en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como los PVRs. El siguiente caso corresponde al caso en el que hay un gestor de contenido centralizado que controla dispositivos de almacenamiento distribuido, cada uno de los cuales es responsable de implementar almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, operan de manera mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, típicamente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido según un horario determinado por algún controlador centralizado. Por ejemplo, la CDN podría precargar dispositivos periféricos con contenido que se espera que sea muy popular o distribuir archivos grandes a sucursales durante las horas de menor tráfico en un entorno empresarial con limitaciones de ancho de banda. Permitir que un único administrador de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y al caso más distribuido. La necesidad de este tipo de separación puede surgir por razones de escalabilidad o cuando se requiere controlar diferentes dispositivos de almacenamiento especializados con un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas controlando un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo detallado por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de Contenidos La capa del gestor de contenidos es la interfaz principal a través de la cual las aplicaciones específicas utilizan la arquitectura Spectrum. Por lo tanto, la capa del gestor de contenido proporciona una API para que la aplicación pueda manipular todos los aspectos de la arquitectura de Spectrum en diferentes niveles de granularidad. La API del gestor de contenido tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite agregar dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo el control del gestor de contenido y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos; este es el único lugar en la arquitectura donde la aplicación debe ser consciente de esta distinción. Una vez que un dispositivo es mapeado en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Almacenes: Los almacenes son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (por ejemplo, espacio en disco) a la misma. Las tiendas solo se pueden crear en dispositivos físicos que estén mapeados en el sistema. Grupos de Políticas: Los grupos de políticas son el medio por el cual una aplicación especifica, instancia y modifica las políticas que se aplican al contenido del Espectro. El uso típico de este conjunto de funciones es seleccionar una de un pequeño conjunto de políticas base y parametrizar esta instancia específica de la política. Los grupos de políticas se crean dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento y que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que incluyen una especificación de tiempo sofisticada permiten un almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría expulsar el contenido del sistema en un momento absoluto o relativo específico. Una política basada en el tiempo un poco más compleja habilitada por la arquitectura Spectrum podría permitir que el contenido se almacene en una ventana de tiempo de un número de horas (por ejemplo, las N horas más recientes se mantienen en el sistema). Las políticas basadas en el tiempo son de particular utilidad al tratar con contenido continuo como una transmisión en vivo. 6 Contenido: En el nivel más fino de granularidad, el contenido puede ser añadido o eliminado del sistema. El contenido se especifica al sistema mediante un <br>localizador uniforme de recursos</br> (URL) que indica de manera concisa la ubicación del contenido, así como el protocolo a utilizar para recuperarlo. Opcionalmente se puede asociar una especificación de tiempo con el contenido. Esto permite que el contenido sea recuperado en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Nuevamente, esto es particularmente útil para tratar con el almacenamiento y gestión de contenido en vivo. 2.2 Gestor de Políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones de API. Primero, hay funciones que operan en áreas de almacenamiento gestionadas y referencias basadas en políticas (prefs) al contenido almacenado allí. Segundo, hay conjuntos de funciones utilizadas para implementar cada política de gestión. La primera clase de funciones es utilizada por la capa de gestión de contenido para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar. Estas operaciones son utilizadas por el gestor de contenido para controlar su acceso al almacenamiento. El proceso de creación de políticas de gestión de operaciones se utiliza para establecer contacto con una tienda por primera vez. Una vez que esto se haya hecho, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Ten en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información solo necesita ser transmitida al administrador de políticas una vez al momento de la creación. Para operaciones abiertas, el administrador de políticas utilizará la información en caché para contactar a la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el administrador de contenido consulte al administrador de políticas sobre qué contenido está actualmente presente para una URL dada. Para medios continuos, se devolverán rangos de tiempo de medios presentes. recurso: Las rutinas de recurso se utilizan para consultar al administrador de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su totalidad y otra que se aplica a una referencia de política en particular. La API de recursos es extensible, actualmente admitimos consultas sobre el uso de disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer se utiliza por el gestor de contenido para hacer referencia al contenido en la tienda. Si el contenido no está presente, esta llamada resultará en la obtención del contenido (o en la programación para obtenerlo si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL donde se almacenará, la URL desde la cual se obtendrán los datos si no están presentes, la política para almacenar el contenido y los argumentos utilizados para parametrizar la política. El resultado de una operación de establecimiento de prefijo exitosa es una cadena de identificación de referencia de política. Este identificador se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones del gestor de políticas se utilizan para implementar todas las políticas respaldadas por Spectrum. Visualizamos un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitiva puede ser parametrizada para funcionar diariamente, semanalmente o mensualmente. Ten en cuenta que el gestor de políticas solo se preocupa por ejecutar una política específica. Las razones de nivel superior para elegir una política determinada son manejadas por el gerente de contenido y aplicación. Una política base se implementa utilizando seis funciones: establecer: se llama cuando se establece una preferencia con las URL requeridas y los parámetros de la política base. El rutina establecida hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar acción (por ejemplo, iniciar una descarga) y programa una devolución de llamada para ese momento. También puede registrarse para recibir devoluciones de llamada si se recibe nuevo contenido para una URL específica. actualizar: se llama para cambiar los parámetros de una preferencia, o para descartar la referencia de la política. newclip: se llama cuando se recibe un fragmento de nuevo contenido para una URL de interés. La política base normalmente establece que se llame a newclip para una URL dada cuando se establece la preferencia. Cuando se llama a newclip, la política base verifica sus parámetros para determinar si desea agregar una referencia al clip recién recibido. callback: llamado cuando la preferencia programa una devolución de llamada basada en temporizador. Este es un mecanismo útil de activación para preferencias que necesitan estar inactivas durante un largo período de tiempo (por ejemplo, entre programas). arranque/apagado: se llama cuando el sistema de gestión de contenidos se está iniciando o apagando. La operación de arranque se utiliza típicamente para programar devoluciones de llamada iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para cerrar de forma ordenada los flujos de entrada/salida y guardar el estado. 2.3 Gestor de almacenamiento El rol del gestor de almacenamiento de Spectrum es controlar todas las operaciones de entrada/salida asociadas con una tienda dada. El gestor de almacenamiento de Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo, un dispositivo de almacenamiento). Para los medios continuos, a nivel del gestor de almacenamiento, el contenido se almacena como una colección de fragmentos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un fragmento podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión en continuo, tanto las rutinas de entrada como de salida toman rangos de tiempo que programan cuándo debe ocurrir la operación de E/S, y ambas rutinas devuelven un identificador de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el administrador de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar almacenes. También admite operaciones para consultar los usos de recursos y opciones admitidas por la tienda. Finalmente, el administrador de almacenamiento también tiene un procedimiento de descarte que puede ser utilizado por el administrador de políticas para informar a la tienda que elimine contenido de la tienda. 3. IMPLEMENTACIÓN Y CASOS DE USO En esta sección describimos nuestra implementación de Spectrum y cómo puede ser utilizada. 3.1 Implementación Hemos implementado las tres capas de Spectrum en C como parte de una biblioteca que puede ser enlazada con aplicaciones basadas en Spectrum. Cada capa lleva un registro de su estado a través de un conjunto de archivos de datos locales que persisten a través de reinicios, lo que permite a Spectrum manejar los ciclos de energía de manera fluida. Para las capas que residen en sistemas remotos (por ejemplo, una tienda remota), solo se almacena localmente la meta-información necesaria para contactar al administrador de políticas del gestor de contenido remoto, el gestor de almacenamiento, el recuperador de almacenamiento, los listados de programas, la interfaz de usuario gráfica, el DVR habilitado para red, la información del programa, la aplicación de DVR de contenido en la red habilitada para DVR. Figura 2: Espectro en un nodo de DVR habilitado para red. Nuestra aplicación de prueba utiliza un administrador de políticas y almacenamiento local para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficientemente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas de API de Spectrums admiten tanto modos síncronos como asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada a la API toma un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de la llamada y el estado de retorno. Para las llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamada. Para utilizar una función de la API de Spectrum, el llamante primero elige entre el modo sincrónico o asincrónico y asigna una estructura reqinfo. Para llamadas de sincronización, la reqinfo puede ser asignada en la pila, de lo contrario se asigna con malloc. Para llamadas asíncronas, se debe proporcionar una función de devolución de llamada al asignar el reqinfo. A continuación, el llamante invoca la función API de Spectrum deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas asincrónicas exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada asíncrona se completa o se produce un tiempo de espera, se llama a la función de devolución de llamada asíncrona con la información adecuada necesaria para completar el procesamiento. El diseño modular/capas de la arquitectura Spectrum simplifica el objetivo de distribución de funcionalidad. Además, la comunicación entre funciones suele ser de naturaleza maestro-esclavo(s). Esto significa que son posibles varios enfoques para la operación distribuida que cumplirían con los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un diseño modular simple. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y elegir el método de codificación que se debe utilizar con los datos a transferir. Los protocolos de transporte pueden variar desde protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP simple para la mayoría de nuestro transporte. Las llamadas a funciones a través de las diferentes APIs de Spectrum pueden ser codificadas utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos utilizando la biblioteca XML eXpat [4] para codificar nuestras llamadas. Mientras actualmente estamos transfiriendo nuestros mensajes codificados en XML utilizando una conexión TCP simple, en un entorno del mundo real esto puede ser fácilmente reemplazado con una implementación basada en capa de sockets seguros (SSL) para mejorar la seguridad al agregar SSL como protocolo de transporte. Un aspecto importante de Spectrum es que puede gestionar contenido basado en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la Sección 2.2, imagina un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben comprender las políticas de nivel base y cómo pueden ser parametrizadas. Para abordar este problema, tratamos cada política de nivel base como si fuera un programa separado. Cada política de nivel base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada utilizando una función similar a getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de los bytes no es un problema en una cadena. Dado que esta parte de Spectrum no se encuentra en la ruta crítica de los datos, este tipo de formato no representa un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos de Spectrum En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos de Spectrum en nuestro entorno. El enfoque de nuestro trabajo anterior ha sido la distribución de contenido para contenido de medios en streaming [2] y la grabación de video digital habilitada para redes [3]. El sistema Spectrum es aplicable a ambos escenarios de la siguiente manera. La Figura 2 muestra la arquitectura del DVR habilitado para red (NED). En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación de DVR obtiene listados de programas de alguna fuente de red, maneja la presentación al usuario a través de una interfaz gráfica de usuario (GUI) e interactúa con el sistema Spectrum a través de las APIs de la capa de gestión de contenido. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento que se aplicarán a dicho contenido. La obtención del contenido (a través de la red o localmente) y su posterior almacenamiento en el sistema local son manejados por los gestores de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenido en streaming (por ejemplo, PRISM [2]) está representado en la Figura 3. En este entorno, el contenido de medios en streaming (tanto en vivo, enlatado en vivo y a la carta) se distribuye a los portales periféricos desde donde se sirven los puntos finales de streaming. En nuestro entorno, la distribución y almacenamiento de contenido se realiza desde una estación centralizada de gestión de contenido que controla varios de los portales periféricos. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenido sin necesidad de una comunicación continua entre el gestor de contenido y los dispositivos periféricos, es decir, una vez que se han dado instrucciones a los dispositivos periféricos, pueden operar de forma independiente hasta que se deban realizar cambios. Ejemplo operativo de Spectrum 3.3 Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación de PVR basada en Spectrum programada para almacenar un día de contenido de transmisión en una ventana móvil. Para configurar la ventana deslizante, la aplicación utilizaría la API del gestor de contenido para crear un grupo de políticas y una referencia de política al contenido deseado. El establecimiento de la política de ventana de un día en movimiento haría que el gerente de políticas le pida al gerente de almacenamiento que comience a recibir el flujo. A medida que llega cada fragmento de datos en streaming, el gestor de políticas ejecuta la función newclip de las referencias de política. La función newclip agrega una referencia a cada fragmento que llega y programa una devolución de llamada para un día después. En ese momento, la política eliminará su referencia actual de un día al contenido y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considera el caso en el que el usuario decide guardar parte del contenido (por ejemplo, un programa específico) en la ventana deslizante durante una semana adicional. Para hacer esto, la aplicación solicita que el gestor de contenido agregue una nueva referencia de política adicional a la parte del contenido que se va a preservar. Por lo tanto, el contenido preservado tiene dos referencias: una del marco de tiempo móvil y otra de la solicitud de preservar el contenido por una semana adicional. Después de un día, la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. datos base url1 url2 (archivos multimedia...) (archivos multimedia...) almacenamiento de metadatos (información general...) url1 fragmentos preferencias rangos fragmentos multimedia, etc. url2 host poli ref1 ref1.archivos ref1.estado Figura 4: Diseño de datos de la tienda de políticas de Spectrum preservado por la segunda referencia. Después de que haya transcurrido la semana adicional, se llamará a la función de devolución de llamada para la segunda referencia. Esta función descartará la referencia restante al contenido y, como no hay referencias restantes, el contenido será liberado. Para poder funcionar en escenarios como los descritos anteriormente, el gestor de políticas de Spectrums debe administrar y mantener todas las referencias a diferentes fragmentos de medios. Estas referencias son persistentes y, por lo tanto, deben poder sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestro implementación del gestor de políticas de Spectrum logra esto utilizando la estructura de archivos y directorios mostrada en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el gestor de almacenamiento para almacenar los fragmentos de medios de cada URL activa. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Ten en cuenta que este directorio se utiliza solo si el gestor de almacenamiento es local. Si el administrador de políticas está utilizando un administrador de almacenamiento externo (por ejemplo, un dispositivo de almacenamiento), entonces los archivos multimedia se almacenan de forma remota y solo son referenciados de forma remota por el administrador de políticas. meta: este directorio contiene información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) y la información sobre los tipos de fragmentos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los fragmentos de datos almacenados. El archivo de fragmentos contiene una lista de fragmentos almacenados actualmente y sus recuentos de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de intervalos de tiempo de los datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato del medio que se está almacenando bajo la URL actual. poly: este directorio contiene un conjunto de subdirectorios de host. Cada subdirectorio de host contiene el conjunto de referencias de políticas creadas por ese host. La información de cada referencia de política está dividida en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files y ref1.state. El archivo ref1 contiene información sobre la referencia de la política que no cambia con frecuencia. Esta información incluye la política base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a fragmentos que posee el prefijo ref1. Finalmente, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Ten en cuenta que otras implementaciones son posibles. Por ejemplo, un administrador de espectro de calidad de operador podría almacenar toda su información de políticas y referencias en un sistema de base de datos de alto rendimiento. 10 4. TRABAJO RELACIONADO Varios autores han abordado el problema de la gestión de contenido en redes distribuidas. Gran parte del trabajo se centra en el aspecto de gestión de políticas. Por ejemplo, en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda del usuario utilizando un Protocolo de Diseminación de Demanda. El rendimiento del esquema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Enrutador Central, una Base de Conocimiento en Caché, Subcachés y un juez de expulsión de Subcaché. La base de conocimientos de caché permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenido en el entorno de red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenido, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de televisión que se utilizan en los PVR para seleccionar automáticamente contenido para los usuarios, por ejemplo [6]. En el caso de que Spectrum se utilice en una configuración de PVR, este tipo de sistema realizaría una función de nivel superior y claramente se beneficiaría de las funcionalidades de la arquitectura de Spectrum. Finalmente, en el entorno comercial de CDN, los proveedores (por ejemplo, Cisco y Netapp han desarrollado e implementado productos y herramientas de gestión de contenido. A diferencia de la arquitectura Spectrum que permite que los dispositivos periféricos operen de manera autónoma en gran medida, las soluciones de los proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. CONCLUSIÓN Y TRABAJOS FUTUROS En este artículo presentamos el diseño e implementación de la arquitectura de gestión de contenido Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que son conscientes del tiempo, lo que permite gestionar de manera efectiva el almacenamiento de contenido multimedia continuo. Finalmente, el diseño modular de la arquitectura Spectrum permite tanto realizaciones independientes como distribuidas para que el sistema pueda ser desplegado en una variedad de aplicaciones. Existen varios problemas abiertos que requerirán trabajo futuro. Algunos de estos problemas incluyen: • Visualizamos que Spectrum pueda gestionar contenido en sistemas que van desde grandes CDNs hasta dispositivos más pequeños como TiVO [8]. Para que estos sistemas más pequeños puedan soportar Spectrum, necesitarán de una red y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo se puede integrar en la arquitectura de Spectrum. • Spectrum nombra el contenido por URL, pero intencionalmente no hemos definido el formato de las URL de Spectrum, cómo se relacionan con el nombre real del contenido, o cómo los nombres y las URL deben presentarse al usuario. Si bien anteriormente abordamos estos temas en otro lugar [2], creemos que hay más trabajo por hacer y que se deben redactar estándares basados en consenso sobre la nomenclatura. En este documento nos hemos centrado en la gestión de contenido para objetos de medios continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero aún no hemos resuelto los detalles necesarios para admitir esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que el contenido multimedia se comparta fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. REFERENCIAS [1] K. . Cheng y Y. Kambayashi. Gestión de contenido basada en multicache para el almacenamiento en caché web. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información en la Web, junio de 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. Arquitectura PRISM: Apoyo a Servicios de Streaming Mejorados en una Red de Distribución de Contenidos. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de video digital habilitado para red. 11º Taller de la IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji y P. Shenoy. Una arquitectura de clúster de servidores de medios en streaming adaptativa a la demanda y consciente de la localidad (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Un recomendador de televisión multiagente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "policy manager": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E.",
                "van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices.",
                "Keeping track of (or managing) such content remains challenging due to the sheer volume of data.",
                "Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with.",
                "Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system.",
                "In this paper we present the design and implementation of the Spectrum content management system, which deals with rich media content effectively in this environment.",
                "Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios.",
                "A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system.",
                "This means that there are no eviction policies.",
                "Content that no longer has a retention policy applied to it is simply removed from the system.",
                "Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication.",
                "This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content.",
                "We not only describe the details of the Spectrum architecture but also give typical use cases.",
                "Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1.",
                "INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer.",
                "Initial computing applications include text formatters and program compilers.",
                "Content was initially managed by explicit user interaction through the use of files and filesystems.",
                "As technology has advanced, both the types of content and the way people wish to use it have greatly changed.",
                "New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies.",
                "For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive.",
                "This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7].",
                "Another example is the combination of encoding and broadband networking technology.",
                "This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository.",
                "The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data.",
                "The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms.",
                "The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content.",
                "Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic.",
                "First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems.",
                "Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints.",
                "This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level.",
                "For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event.",
                "At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult.",
                "However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible.",
                "This scenario is increasingly common in network based content distribution systems and is likely to also become important in home-networking scenarios.",
                "It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed.",
                "This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences.",
                "The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general).",
                "The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content.",
                "Addressing this distributed content management problem is difficult due to the number of requirements placed on the system.",
                "For example: • The content management system must operate on a large number of heterogeneous systems.",
                "In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance.",
                "The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer.",
                "A application program interface (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies.",
                "These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded.",
                "This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams.",
                "It needs to be able to package this content in such a way that it is convenient for users to access.",
                "To address these issues we have designed and implemented the Spectrum content management system architecture.",
                "Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers.",
                "It allows multiple applications to reference content using differing policies.",
                "Note that the Spectrum architecture assumes the existence of a content distribution network (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]).",
                "The rest of this paper is organized as follows.",
                "Section 2 describes the architecture of our content management system.",
                "In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use.",
                "Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2.",
                "THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1.",
                "The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences.",
                "For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. <br>policy manager</br>: implements and enforces various storage polices that the content manager uses to refer to content.",
                "The <br>policy manager</br> exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy.",
                "Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized.",
                "It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time).",
                "A key aspect of the <br>policy manager</br> is that it allows different policies to be simultaneously applied to the same content (or parts of the same content).",
                "Furthermore content can only exist in the system so long as it is referenced by at least one existing policy.",
                "Policy conflicts are eliminated by having the <br>policy manager</br> deal exclusively with retention policies rather than with a mix of retention and eviction policies.",
                "This means that content with no policy associated with it is immediately and automatically removed from the system.",
                "This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects.",
                "Note that a key difference between the content manager and the <br>policy manager</br> is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content.",
                "On the other hand, the <br>policy manager</br> is only concerned with the policy used to manage standalone pieces of content.",
                "For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace.",
                "However, at the <br>policy manager</br> level, each piece of content has 5 Content Manager <br>policy manager</br> Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers.",
                "Specifically the storage manager stores content in sub-object chunks.",
                "This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR.",
                "Note that the storage manager has no knowledge of the policies being used by the content and policy managers.",
                "Another unique part of our approach is that the interfaces between the layers can either be local or distributed.",
                "Figure 1 shows the four possible cases.",
                "The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box.",
                "This configuration would be used in selfcontained applications such as PVRs.",
                "The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage.",
                "In this case although the remote devices are controlled by the central manager they operate much more independently.",
                "For example, once they receive instructions from the central manager they typically operate in autonomous fashion.",
                "An example of this type of configuration is a content distribution network (CDN) that distributes and stores content based on a schedule determined by some centralized controller.",
                "For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment.",
                "Allowing a single <br>policy manager</br> to control several storage managers leads to the next combination of functions and the most distributed case.",
                "The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single <br>policy manager</br>.",
                "The final case shows a content manager combined with a <br>policy manager</br> controlling a remote storage manager.",
                "This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the <br>policy manager</br>.",
                "We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture.",
                "As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity.",
                "The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system.",
                "Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction.",
                "Once a device is mapped into the application through this interface, the system tracks its type and location.",
                "Users simply refer to the content through an application-provided label.",
                "Stores: Stores are subsets of physical storage devices.",
                "Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it.",
                "Stores can only be created in physical devices that are mapped into the system.",
                "Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content.",
                "Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy.",
                "Policy groups are created within existing stores in the system.",
                "The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage.",
                "In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time.",
                "For example, a simple time-based policy could evict content from the system at a certain absolute or relative time.",
                "A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system).",
                "Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system.",
                "Content is specified to the system by means of a uniform resource locator (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it.",
                "Optionally a time specification can be associated with content.",
                "This allows content to be fetched into the system at some future time, or at future time intervals.",
                "Again, this is particularly useful for dealing with the storage and management of live content. 2.2 <br>policy manager</br> The <br>policy manager</br> layer of the Spectrum architecture has two main types of API functions.",
                "First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there.",
                "Second, there are sets of functions used to implement each management policy.",
                "The first class of functions is used by the content manager layer to access storage.",
                "Operations include: create, open, and close: These operations are used by the content manager to control its access to storage.",
                "The policy managers create operation is used to establish contact with a store for the first time.",
                "Once this is done, the store can be open and closed using the appropriate routines.",
                "Note that the parameters used to create a store contain information on how to reach it.",
                "For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them.",
                "The information only needs to be passed to the <br>policy manager</br> once at create time.",
                "For open operations, the <br>policy manager</br> will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the <br>policy manager</br> about what content is currently present for a given URL.",
                "For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the <br>policy manager</br> about its current resource usage.",
                "There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference.",
                "The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store.",
                "If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available).",
                "Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy.",
                "The result of a successful pref establish operation is a policy reference ID string.",
                "This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely.",
                "The second group of <br>policy manager</br> functions are used to implement all the polices supported by Spectrum.",
                "We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly.",
                "Note that the <br>policy manager</br> is only concerned with executing a specific policy.",
                "The higher-level reasons for choosing a given policy are handled by the content and application manager.",
                "A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters.",
                "The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time.",
                "It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest.",
                "The base policy typically arranges for newclip to be called for a given URL when the pref is established.",
                "When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback.",
                "This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down.",
                "The boot operation is typically used to schedule initial callbacks or start I/O operations.",
                "The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store.",
                "Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance).",
                "For continuous media, at the storage manager level content is stored as a collection of time-based chunks.",
                "Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database.",
                "The two main storage manager operations are input and output.",
                "The input routine is used to store content in a store under a given name.",
                "The output routine is used to send data from the store to a client.",
                "For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future.",
                "Much like the <br>policy manager</br>, the storage manager also provides API functions to create, open, and close stores.",
                "It also supports operations to query the resource usages and options supported by the store.",
                "Finally, the storage manager also has a discard routine that may be used by the <br>policy manager</br> to inform the store to remove content from the store. 3.",
                "IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications.",
                "Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles.",
                "For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager <br>policy manager</br> Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally.",
                "Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem.",
                "To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure.",
                "Each API call takes a pointer to a reqinfo structure as one of its arguments.",
                "This structure is used to hold the call state and return status.",
                "For async calls, the reqinfo also contains a pointer to a callback function.",
                "To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure.",
                "For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc.",
                "For async calls, a callback function must be provided when the reqinfo is allocated.",
                "Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument.",
                "For sync calls, the result of the calls is returned immediately in the reqinfo structure.",
                "For successful async calls, a call in progress value is returned.",
                "Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing.",
                "The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality.",
                "Furthermore, communication between functions is typically of a master-slave(s) nature.",
                "This means that several approaches to distributed operation are possible that would satisfy the architectural requirements.",
                "In our implementation we have opted to realize this functionality with a simple modular design.",
                "We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred.",
                "Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP.",
                "We currently are using plain TCP for most of our transport.",
                "Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML.",
                "We are currently using the eXpat XML library [4] to encode our calls.",
                "While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol.",
                "An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms.",
                "As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized.",
                "To address this issue, we treat each base-level policy as if it was a separate program.",
                "Each base-level policy should have a well known name and command line options for parameterization.",
                "In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function.",
                "This format is easily understood and provides portability since byte order is not an issue in a string.",
                "Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment.",
                "The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3].",
                "The Spectrum system is applicable to both scenarios as follows.",
                "Figure 2 shows the Network Enabled DVR (NED) architecture.",
                "In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration.",
                "The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs.",
                "This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface <br>policy manager</br> Storage Manager Storage Fetcher Edge Portal Server <br>policy manager</br> Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content.",
                "Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers.",
                "The use of Spectrum in a streaming content distribution architecture (e.g.",
                "PRISM [2]) is depicted in Figure 3.",
                "In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served.",
                "In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals.",
                "The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window.",
                "To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content.",
                "The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream.",
                "As each chunk of streaming data arrives, the <br>policy manager</br> executes the policy references newclip function.",
                "The newclip function adds a reference to each arriving chunk, and schedules a callback a day later.",
                "At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy.",
                "Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week.",
                "To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved.",
                "Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week.",
                "After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference.",
                "After the additional week has past, the callback function for the second reference will be called.",
                "This function will discard the remaining reference to the content and as there are no remaining references the content will be freed.",
                "In order to function in scenarios like the ones described above, Spectrums <br>policy manager</br> must manage and maintain all the references to various chunks of media.",
                "These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted.",
                "Our Spectrum <br>policy manager</br> implementation accomplishes this using the file and directory structure shown in Figure 4.",
                "There are three classes of data stored, and each class has its own top level directory.",
                "The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media.",
                "The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime.",
                "Note that this directory is used only if the storage manager is local.",
                "If the <br>policy manager</br> is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the <br>policy manager</br>. meta: this directory contains general meta information about the storage manager being used and the data it is storing.",
                "General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle.",
                "The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored.",
                "The chunks file contains a list of chunks currently stored and their reference counts.",
                "The prefs file contains a list of active policy references that point to this URL.",
                "The ranges file contains a list of time ranges of data currently stored.",
                "Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories.",
                "Each host subdirectory contains the set of policy references created by that host.",
                "Information on each policy reference is broken up into three files.",
                "For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state.",
                "The ref1 file contains information about the policy reference that does not change frequently.",
                "This information includes the base-policy and the parameters used to create the reference.",
                "The ref1.files file contains the list of references to chunks that pref ref1 owns.",
                "Finally, the ref1.state file contains optional policy-specific state information that can change over time.",
                "Together, these files and directories are used to track references in our implementation of Spectrum.",
                "Note that other implementations are possible.",
                "For example, a carrier-grade Spectrum manager might store all its policy and reference information in a high-performance database system. 10 4.",
                "RELATED WORK Several authors have addressed the problem of the management of content in distributed networks.",
                "Much of the work focuses on the policy management aspect.",
                "For example in [5], the problem of serving multimedia content via distributed servers is considered.",
                "Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol.",
                "The performance of the scheme is benchmarked via simulation.",
                "In [1] content is distributed among sub-caches.",
                "The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge.",
                "The Cache Knowledge base allows sophisticated policies to be employed.",
                "Simulation is used to compare the proposed scheme with well-known replacement algorithms.",
                "Our work differs in that we are considering more than the policy management aspects of the problem.",
                "After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, <br>policy manager</br> and Storage manager.",
                "This has allowed us to easily implement and experiment with a prototype system.",
                "Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6].",
                "In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture.",
                "Finally, in the commercial CDN environment vendors (e.g.",
                "Cisco and Netapp) have developed and implemented content management products and tools.",
                "Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5.",
                "CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture.",
                "Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage.",
                "Specifically, the system allows different policies to be applied to the same content without replication.",
                "Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content.",
                "Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications.",
                "There are a number of open issues that will require future work.",
                "Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8].",
                "In order for these smaller systems to support Spectrum they will require networking and an external API.",
                "When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user.",
                "While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects.",
                "We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance.",
                "Adapting Spectrum to meet legal requirements will likely require more technical work. 6.",
                "REFERENCES [1] K. .",
                "Cheng and Y. Kambayashi.",
                "Multicache-based Content Management for Web Caching.",
                "Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "PRISM Architecture: Supporting Enhanced Streaming Services in a Content Distribution Network.",
                "IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy.",
                "A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture.",
                "NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman.",
                "A multi-agent TV recommender.",
                "Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11"
            ],
            "original_annotated_samples": [
                "For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. <br>policy manager</br>: implements and enforces various storage polices that the content manager uses to refer to content.",
                "The <br>policy manager</br> exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy.",
                "A key aspect of the <br>policy manager</br> is that it allows different policies to be simultaneously applied to the same content (or parts of the same content).",
                "Policy conflicts are eliminated by having the <br>policy manager</br> deal exclusively with retention policies rather than with a mix of retention and eviction policies.",
                "Note that a key difference between the content manager and the <br>policy manager</br> is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content."
            ],
            "translated_annotated_samples": [
                "Por ejemplo, en una aplicación de grabadora de video personal (PVR), el administrador de contenido recibe solicitudes de contenido desde una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y gestionar contenido en el dispositivo. El <br>administrador de políticas</br> implementa y hace cumplir varias políticas de almacenamiento que el administrador de contenido utiliza para hacer referencia al contenido.",
                "El <br>gestor de políticas</br> exporta una interfaz al gestor de contenido que le permite al gestor de contenido solicitar que un contenido sea tratado de acuerdo con una política específica.",
                "Un aspecto clave del <br>gestor de políticas</br> es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido).",
                "Los conflictos de políticas se eliminan al hacer que el <br>administrador de políticas</br> se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo.",
                "Ten en cuenta que una diferencia clave entre el gestor de contenido y el <br>gestor de políticas</br> es que el gestor de contenido gestiona referencias a múltiples piezas de contenido, es decir, tiene una vista de aplicación del contenido."
            ],
            "translated_text": "Diseño e Implementación de un Sistema de Gestión de Contenido Distribuido por C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ y J.E. La convergencia de avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan y se intercambian rutinariamente entre dispositivos habilitados para redes. El seguimiento (o gestión) de dicho contenido sigue siendo un desafío debido a la gran cantidad de datos. Almacenar medios continuos en vivo (como contenido de televisión o radio) aumenta la complejidad debido a que este contenido no tiene un inicio o fin bien definido y, por lo tanto, resulta engorroso de manejar. El almacenamiento en red permite que el contenido que se ve lógicamente como parte de la misma colección esté distribuido en una red, lo que hace que la gestión de contenido sea casi imposible de manejar sin un sistema de gestión de contenido. En este documento presentamos el diseño e implementación del sistema de gestión de contenido Spectrum, que maneja de manera efectiva el contenido de medios enriquecidos en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto en escenarios independientes como en diferentes entornos de red. Un aspecto único de Spectrum es que requiere que se aplique una (o más) políticas de retención a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido al que ya no se le aplica una política de retención simplemente se elimina del sistema. Diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo, que son bloques de construcción básicos necesarios para manejar el almacenamiento de medios continuos en vivo, al contenido. No solo describimos los detalles de la arquitectura del Spectrum, sino que también proporcionamos casos de uso típicos. Categorías y Descriptores de Asignaturas C.2.4 [Organización de Sistemas Informáticos]: Redes de comunicación informática-sistemas distribuidos; H.3.4 [Sistemas de Información]: Almacenamiento de información y recuperación-sistemas y software Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar contenido es y siempre ha sido una de las funciones principales de una computadora. Las aplicaciones iniciales de computación incluyen formateadores de texto y compiladores de programas. El contenido era gestionado inicialmente mediante la interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que las personas desean utilizarlo han cambiado considerablemente. Nuevos tipos de contenido, como las transmisiones multimedia continuas, se han vuelto comunes debido a la convergencia de avances en tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de video codificado de calidad televisiva en un solo disco duro. Esto ha llevado a la introducción de sistemas de grabación de video digital independientes o personales, como TiVO y ReplayTV. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas, con la red misma actuando como un gran repositorio de datos. La proliferación de contenido de alta calidad habilitada por estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. El enfoque de nuestro trabajo se centra en el almacenamiento de contenido multimedia y, en particular, en el almacenamiento de contenido multimedia continuo en forma preempaquetada o en vivo. La necesidad de gestión de contenido en esta área es evidente cuando se considera lo siguiente: • Los aumentos en la capacidad y las disminuciones en el costo de almacenamiento significan que incluso los sistemas de escritorio modestos de hoy tienen la capacidad de almacenar grandes cantidades de contenido. La gestión manual de dicho contenido (o más correctamente, la falta de gestión manual de dicho contenido) conduce a grandes ineficiencias donde el contenido no deseado y olvidado se acumula y donde el contenido deseado no se puede encontrar. • Aunque es cierto para todos los tipos de contenido, el almacenamiento de contenido de medios continuos es especialmente problemático. El primer contenido de medios continuos sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque sin política para almacenarlo no funcionará para todos, excepto para los sistemas más pequeños. Segundo, el almacenamiento de contenido en vivo como la televisión o la radio es inherentemente problemático ya que estas señales son flujos continuos sin puntos finales. Esto significa que antes de siquiera pensar en gestionar dicho contenido, es necesario abstraerlo en algo que pueda ser manipulado y gestionado. Al tratar con medios continuos almacenados, es necesario gestionar dicho contenido tanto a un nivel detallado como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar solo los momentos destacados de un evento deportivo en particular no debería estar obligado a tener que almacenar el contenido relacionado con todo el evento. Al mismo tiempo, el usuario podría querer considerar el contenido en su totalidad, por ejemplo, eliminar todo el contenido que no he visto en el último mes, excepto aquel contenido que fue marcado explícitamente para archivar. • Como se indicó anteriormente, tratar de mantener un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenido es muy difícil. Sin embargo, cuando los dispositivos de almacenamiento reales están distribuidos en una red, la tarea de llevar un registro del contenido es casi imposible. Este escenario es cada vez más común en sistemas de distribución de contenido basados en redes y es probable que también cobre importancia en escenarios de redes domésticas. Parecería claro entonces que se necesita un sistema de gestión de contenido que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que aproveche la capacidad de almacenamiento en red de los dispositivos. Este sistema debería permitir el almacenamiento eficiente y el acceso al contenido en dispositivos de almacenamiento de red heterogéneos de acuerdo a las preferencias del usuario. El sistema de gestión de contenido debe traducir las preferencias del usuario en políticas de almacenamiento de bajo nivel apropiadas y permitir que esas preferencias se expresen a un nivel de granularidad fino (sin requerirlo en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar sobre (es decir, cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenido distribuido es difícil debido a la cantidad de requisitos impuestos en el sistema. Por ejemplo: • El sistema de gestión de contenidos debe operar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando contenido almacenado en un sistema de archivos local, mientras que en otros el contenido puede estar almacenado en un dispositivo de almacenamiento de red separado. El administrador de contenido puede ser responsable de implementar las políticas que utiliza para hacer referencia al contenido o ese rol puede ser delegado a un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. El sistema de gestión de contenidos debe ser flexible y capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe ser obtenido, cuándo debe ser recuperado, cuánto tiempo debe ser retenido y en qué circunstancias debe ser descartado. Esto significa que el sistema de gestión de contenido debe permitir que múltiples aplicaciones hagan referencia al contenido con un conjunto amplio de políticas y que todo funcione de manera integrada. • El sistema de gestión de contenido debe ser capaz de monitorear las referencias al contenido y utilizar esa información para ubicar el contenido en la ubicación correcta en la red para un acceso eficiente de las aplicaciones. • El sistema de gestión de contenido debe manejar la interacción entre la población implícita y explícita del contenido en el borde de la red. • El sistema de contenido debe ser capaz de gestionar eficientemente grandes conjuntos de contenido, incluidos flujos continuos. Debe ser capaz de empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas, hemos diseñado e implementado la arquitectura del sistema de gestión de contenido Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan ya sea en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite que múltiples aplicaciones hagan referencia al contenido utilizando políticas diferentes. Se debe tener en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenido (CDN) que puede facilitar la distribución eficiente de contenido (por ejemplo, la arquitectura CDN PRISM [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. El trabajo relacionado se describe en la Sección 4, y la Sección 5 contiene nuestra conclusión y sugerencias para trabajos futuros. 2. La arquitectura del sistema de gestión de contenido distribuido Spectrum consta de tres capas de gestión distintas que pueden o no estar distribuidas en múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todo el contenido de una aplicación según las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de video personal (PVR), el administrador de contenido recibe solicitudes de contenido desde una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y gestionar contenido en el dispositivo. El <br>administrador de políticas</br> implementa y hace cumplir varias políticas de almacenamiento que el administrador de contenido utiliza para hacer referencia al contenido. El <br>gestor de políticas</br> exporta una interfaz al gestor de contenido que le permite al gestor de contenido solicitar que un contenido sea tratado de acuerdo con una política específica. Spectrum permite que se realicen políticas arbitrarias al proporcionar un conjunto fijo de plantillas de políticas base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (de lo contrario, Spectrum se puede extender fácilmente para cargar dinámicamente nuevo código de plantilla de política base en tiempo de ejecución). Un aspecto clave del <br>gestor de políticas</br> es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido solo puede existir en el sistema siempre y cuando esté referenciado por al menos una política existente. Los conflictos de políticas se eliminan al hacer que el <br>administrador de políticas</br> se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin política asociada se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar de forma natural el intercambio de contenido entre diferentes políticas, lo cual es fundamental para el almacenamiento eficiente de objetos grandes. Ten en cuenta que una diferencia clave entre el gestor de contenido y el <br>gestor de políticas</br> es que el gestor de contenido gestiona referencias a múltiples piezas de contenido, es decir, tiene una vista de aplicación del contenido. ",
            "candidates": [],
            "error": [
                [
                    "administrador de políticas",
                    "gestor de políticas",
                    "gestor de políticas",
                    "administrador de políticas",
                    "gestor de políticas"
                ]
            ]
        },
        "network enabled dvr": {
            "translated_key": "DVR habilitado para red",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E.",
                "van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices.",
                "Keeping track of (or managing) such content remains challenging due to the sheer volume of data.",
                "Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with.",
                "Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system.",
                "In this paper we present the design and implementation of the Spectrum content management system, which deals with rich media content effectively in this environment.",
                "Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios.",
                "A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system.",
                "This means that there are no eviction policies.",
                "Content that no longer has a retention policy applied to it is simply removed from the system.",
                "Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication.",
                "This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content.",
                "We not only describe the details of the Spectrum architecture but also give typical use cases.",
                "Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1.",
                "INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer.",
                "Initial computing applications include text formatters and program compilers.",
                "Content was initially managed by explicit user interaction through the use of files and filesystems.",
                "As technology has advanced, both the types of content and the way people wish to use it have greatly changed.",
                "New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies.",
                "For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive.",
                "This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7].",
                "Another example is the combination of encoding and broadband networking technology.",
                "This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository.",
                "The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data.",
                "The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms.",
                "The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content.",
                "Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic.",
                "First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems.",
                "Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints.",
                "This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level.",
                "For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event.",
                "At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult.",
                "However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible.",
                "This scenario is increasingly common in network based content distribution systems and is likely to also become important in home-networking scenarios.",
                "It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed.",
                "This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences.",
                "The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general).",
                "The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content.",
                "Addressing this distributed content management problem is difficult due to the number of requirements placed on the system.",
                "For example: • The content management system must operate on a large number of heterogeneous systems.",
                "In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance.",
                "The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer.",
                "A application program interface (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies.",
                "These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded.",
                "This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams.",
                "It needs to be able to package this content in such a way that it is convenient for users to access.",
                "To address these issues we have designed and implemented the Spectrum content management system architecture.",
                "Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers.",
                "It allows multiple applications to reference content using differing policies.",
                "Note that the Spectrum architecture assumes the existence of a content distribution network (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]).",
                "The rest of this paper is organized as follows.",
                "Section 2 describes the architecture of our content management system.",
                "In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use.",
                "Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2.",
                "THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1.",
                "The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences.",
                "For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. policy manager: implements and enforces various storage polices that the content manager uses to refer to content.",
                "The policy manager exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy.",
                "Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized.",
                "It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time).",
                "A key aspect of the policy manager is that it allows different policies to be simultaneously applied to the same content (or parts of the same content).",
                "Furthermore content can only exist in the system so long as it is referenced by at least one existing policy.",
                "Policy conflicts are eliminated by having the policy manager deal exclusively with retention policies rather than with a mix of retention and eviction policies.",
                "This means that content with no policy associated with it is immediately and automatically removed from the system.",
                "This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects.",
                "Note that a key difference between the content manager and the policy manager is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content.",
                "On the other hand, the policy manager is only concerned with the policy used to manage standalone pieces of content.",
                "For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace.",
                "However, at the policy manager level, each piece of content has 5 Content Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers.",
                "Specifically the storage manager stores content in sub-object chunks.",
                "This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR.",
                "Note that the storage manager has no knowledge of the policies being used by the content and policy managers.",
                "Another unique part of our approach is that the interfaces between the layers can either be local or distributed.",
                "Figure 1 shows the four possible cases.",
                "The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box.",
                "This configuration would be used in selfcontained applications such as PVRs.",
                "The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage.",
                "In this case although the remote devices are controlled by the central manager they operate much more independently.",
                "For example, once they receive instructions from the central manager they typically operate in autonomous fashion.",
                "An example of this type of configuration is a content distribution network (CDN) that distributes and stores content based on a schedule determined by some centralized controller.",
                "For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment.",
                "Allowing a single policy manager to control several storage managers leads to the next combination of functions and the most distributed case.",
                "The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single policy manager.",
                "The final case shows a content manager combined with a policy manager controlling a remote storage manager.",
                "This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the policy manager.",
                "We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture.",
                "As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity.",
                "The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system.",
                "Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction.",
                "Once a device is mapped into the application through this interface, the system tracks its type and location.",
                "Users simply refer to the content through an application-provided label.",
                "Stores: Stores are subsets of physical storage devices.",
                "Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it.",
                "Stores can only be created in physical devices that are mapped into the system.",
                "Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content.",
                "Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy.",
                "Policy groups are created within existing stores in the system.",
                "The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage.",
                "In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time.",
                "For example, a simple time-based policy could evict content from the system at a certain absolute or relative time.",
                "A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system).",
                "Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system.",
                "Content is specified to the system by means of a uniform resource locator (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it.",
                "Optionally a time specification can be associated with content.",
                "This allows content to be fetched into the system at some future time, or at future time intervals.",
                "Again, this is particularly useful for dealing with the storage and management of live content. 2.2 Policy Manager The policy manager layer of the Spectrum architecture has two main types of API functions.",
                "First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there.",
                "Second, there are sets of functions used to implement each management policy.",
                "The first class of functions is used by the content manager layer to access storage.",
                "Operations include: create, open, and close: These operations are used by the content manager to control its access to storage.",
                "The policy managers create operation is used to establish contact with a store for the first time.",
                "Once this is done, the store can be open and closed using the appropriate routines.",
                "Note that the parameters used to create a store contain information on how to reach it.",
                "For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them.",
                "The information only needs to be passed to the policy manager once at create time.",
                "For open operations, the policy manager will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the policy manager about what content is currently present for a given URL.",
                "For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the policy manager about its current resource usage.",
                "There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference.",
                "The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store.",
                "If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available).",
                "Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy.",
                "The result of a successful pref establish operation is a policy reference ID string.",
                "This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely.",
                "The second group of policy manager functions are used to implement all the polices supported by Spectrum.",
                "We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly.",
                "Note that the policy manager is only concerned with executing a specific policy.",
                "The higher-level reasons for choosing a given policy are handled by the content and application manager.",
                "A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters.",
                "The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time.",
                "It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest.",
                "The base policy typically arranges for newclip to be called for a given URL when the pref is established.",
                "When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback.",
                "This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down.",
                "The boot operation is typically used to schedule initial callbacks or start I/O operations.",
                "The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store.",
                "Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance).",
                "For continuous media, at the storage manager level content is stored as a collection of time-based chunks.",
                "Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database.",
                "The two main storage manager operations are input and output.",
                "The input routine is used to store content in a store under a given name.",
                "The output routine is used to send data from the store to a client.",
                "For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future.",
                "Much like the policy manager, the storage manager also provides API functions to create, open, and close stores.",
                "It also supports operations to query the resource usages and options supported by the store.",
                "Finally, the storage manager also has a discard routine that may be used by the policy manager to inform the store to remove content from the store. 3.",
                "IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications.",
                "Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles.",
                "For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface <br>network enabled dvr</br> Program Information Content DVR Application Figure 2: Spectrum in a <br>network enabled dvr</br> node is stored locally.",
                "Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem.",
                "To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure.",
                "Each API call takes a pointer to a reqinfo structure as one of its arguments.",
                "This structure is used to hold the call state and return status.",
                "For async calls, the reqinfo also contains a pointer to a callback function.",
                "To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure.",
                "For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc.",
                "For async calls, a callback function must be provided when the reqinfo is allocated.",
                "Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument.",
                "For sync calls, the result of the calls is returned immediately in the reqinfo structure.",
                "For successful async calls, a call in progress value is returned.",
                "Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing.",
                "The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality.",
                "Furthermore, communication between functions is typically of a master-slave(s) nature.",
                "This means that several approaches to distributed operation are possible that would satisfy the architectural requirements.",
                "In our implementation we have opted to realize this functionality with a simple modular design.",
                "We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred.",
                "Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP.",
                "We currently are using plain TCP for most of our transport.",
                "Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML.",
                "We are currently using the eXpat XML library [4] to encode our calls.",
                "While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol.",
                "An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms.",
                "As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized.",
                "To address this issue, we treat each base-level policy as if it was a separate program.",
                "Each base-level policy should have a well known name and command line options for parameterization.",
                "In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function.",
                "This format is easily understood and provides portability since byte order is not an issue in a string.",
                "Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment.",
                "The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3].",
                "The Spectrum system is applicable to both scenarios as follows.",
                "Figure 2 shows the <br>network enabled dvr</br> (NED) architecture.",
                "In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration.",
                "The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs.",
                "This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content.",
                "Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers.",
                "The use of Spectrum in a streaming content distribution architecture (e.g.",
                "PRISM [2]) is depicted in Figure 3.",
                "In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served.",
                "In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals.",
                "The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window.",
                "To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content.",
                "The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream.",
                "As each chunk of streaming data arrives, the policy manager executes the policy references newclip function.",
                "The newclip function adds a reference to each arriving chunk, and schedules a callback a day later.",
                "At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy.",
                "Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week.",
                "To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved.",
                "Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week.",
                "After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference.",
                "After the additional week has past, the callback function for the second reference will be called.",
                "This function will discard the remaining reference to the content and as there are no remaining references the content will be freed.",
                "In order to function in scenarios like the ones described above, Spectrums policy manager must manage and maintain all the references to various chunks of media.",
                "These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted.",
                "Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure 4.",
                "There are three classes of data stored, and each class has its own top level directory.",
                "The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media.",
                "The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime.",
                "Note that this directory is used only if the storage manager is local.",
                "If the policy manager is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the policy manager. meta: this directory contains general meta information about the storage manager being used and the data it is storing.",
                "General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle.",
                "The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored.",
                "The chunks file contains a list of chunks currently stored and their reference counts.",
                "The prefs file contains a list of active policy references that point to this URL.",
                "The ranges file contains a list of time ranges of data currently stored.",
                "Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories.",
                "Each host subdirectory contains the set of policy references created by that host.",
                "Information on each policy reference is broken up into three files.",
                "For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state.",
                "The ref1 file contains information about the policy reference that does not change frequently.",
                "This information includes the base-policy and the parameters used to create the reference.",
                "The ref1.files file contains the list of references to chunks that pref ref1 owns.",
                "Finally, the ref1.state file contains optional policy-specific state information that can change over time.",
                "Together, these files and directories are used to track references in our implementation of Spectrum.",
                "Note that other implementations are possible.",
                "For example, a carrier-grade Spectrum manager might store all its policy and reference information in a high-performance database system. 10 4.",
                "RELATED WORK Several authors have addressed the problem of the management of content in distributed networks.",
                "Much of the work focuses on the policy management aspect.",
                "For example in [5], the problem of serving multimedia content via distributed servers is considered.",
                "Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol.",
                "The performance of the scheme is benchmarked via simulation.",
                "In [1] content is distributed among sub-caches.",
                "The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge.",
                "The Cache Knowledge base allows sophisticated policies to be employed.",
                "Simulation is used to compare the proposed scheme with well-known replacement algorithms.",
                "Our work differs in that we are considering more than the policy management aspects of the problem.",
                "After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, Policy manager and Storage manager.",
                "This has allowed us to easily implement and experiment with a prototype system.",
                "Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6].",
                "In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture.",
                "Finally, in the commercial CDN environment vendors (e.g.",
                "Cisco and Netapp) have developed and implemented content management products and tools.",
                "Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5.",
                "CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture.",
                "Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage.",
                "Specifically, the system allows different policies to be applied to the same content without replication.",
                "Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content.",
                "Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications.",
                "There are a number of open issues that will require future work.",
                "Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8].",
                "In order for these smaller systems to support Spectrum they will require networking and an external API.",
                "When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user.",
                "While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects.",
                "We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance.",
                "Adapting Spectrum to meet legal requirements will likely require more technical work. 6.",
                "REFERENCES [1] K. .",
                "Cheng and Y. Kambayashi.",
                "Multicache-based Content Management for Web Caching.",
                "Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "PRISM Architecture: Supporting Enhanced Streaming Services in a Content Distribution Network.",
                "IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy.",
                "A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture.",
                "NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman.",
                "A multi-agent TV recommender.",
                "Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11"
            ],
            "original_annotated_samples": [
                "For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface <br>network enabled dvr</br> Program Information Content DVR Application Figure 2: Spectrum in a <br>network enabled dvr</br> node is stored locally.",
                "Figure 2 shows the <br>network enabled dvr</br> (NED) architecture."
            ],
            "translated_annotated_samples": [
                "Para las capas que residen en sistemas remotos (por ejemplo, una tienda remota), solo se almacena localmente la meta-información necesaria para contactar al administrador de políticas del gestor de contenido remoto, el gestor de almacenamiento, el recuperador de almacenamiento, los listados de programas, la interfaz de usuario gráfica, el <br>DVR habilitado para red</br>, la información del programa, la aplicación de DVR de contenido en la red habilitada para DVR. Figura 2: Espectro en un nodo de <br>DVR habilitado para red</br>.",
                "La Figura 2 muestra la arquitectura del <br>DVR habilitado para red</br> (NED)."
            ],
            "translated_text": "Diseño e Implementación de un Sistema de Gestión de Contenido Distribuido por C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ y J.E. La convergencia de avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan y se intercambian rutinariamente entre dispositivos habilitados para redes. El seguimiento (o gestión) de dicho contenido sigue siendo un desafío debido a la gran cantidad de datos. Almacenar medios continuos en vivo (como contenido de televisión o radio) aumenta la complejidad debido a que este contenido no tiene un inicio o fin bien definido y, por lo tanto, resulta engorroso de manejar. El almacenamiento en red permite que el contenido que se ve lógicamente como parte de la misma colección esté distribuido en una red, lo que hace que la gestión de contenido sea casi imposible de manejar sin un sistema de gestión de contenido. En este documento presentamos el diseño e implementación del sistema de gestión de contenido Spectrum, que maneja de manera efectiva el contenido de medios enriquecidos en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto en escenarios independientes como en diferentes entornos de red. Un aspecto único de Spectrum es que requiere que se aplique una (o más) políticas de retención a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido al que ya no se le aplica una política de retención simplemente se elimina del sistema. Diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo, que son bloques de construcción básicos necesarios para manejar el almacenamiento de medios continuos en vivo, al contenido. No solo describimos los detalles de la arquitectura del Spectrum, sino que también proporcionamos casos de uso típicos. Categorías y Descriptores de Asignaturas C.2.4 [Organización de Sistemas Informáticos]: Redes de comunicación informática-sistemas distribuidos; H.3.4 [Sistemas de Información]: Almacenamiento de información y recuperación-sistemas y software Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar contenido es y siempre ha sido una de las funciones principales de una computadora. Las aplicaciones iniciales de computación incluyen formateadores de texto y compiladores de programas. El contenido era gestionado inicialmente mediante la interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que las personas desean utilizarlo han cambiado considerablemente. Nuevos tipos de contenido, como las transmisiones multimedia continuas, se han vuelto comunes debido a la convergencia de avances en tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de video codificado de calidad televisiva en un solo disco duro. Esto ha llevado a la introducción de sistemas de grabación de video digital independientes o personales, como TiVO y ReplayTV. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas, con la red misma actuando como un gran repositorio de datos. La proliferación de contenido de alta calidad habilitada por estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. El enfoque de nuestro trabajo se centra en el almacenamiento de contenido multimedia y, en particular, en el almacenamiento de contenido multimedia continuo en forma preempaquetada o en vivo. La necesidad de gestión de contenido en esta área es evidente cuando se considera lo siguiente: • Los aumentos en la capacidad y las disminuciones en el costo de almacenamiento significan que incluso los sistemas de escritorio modestos de hoy tienen la capacidad de almacenar grandes cantidades de contenido. La gestión manual de dicho contenido (o más correctamente, la falta de gestión manual de dicho contenido) conduce a grandes ineficiencias donde el contenido no deseado y olvidado se acumula y donde el contenido deseado no se puede encontrar. • Aunque es cierto para todos los tipos de contenido, el almacenamiento de contenido de medios continuos es especialmente problemático. El primer contenido de medios continuos sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque sin política para almacenarlo no funcionará para todos, excepto para los sistemas más pequeños. Segundo, el almacenamiento de contenido en vivo como la televisión o la radio es inherentemente problemático ya que estas señales son flujos continuos sin puntos finales. Esto significa que antes de siquiera pensar en gestionar dicho contenido, es necesario abstraerlo en algo que pueda ser manipulado y gestionado. Al tratar con medios continuos almacenados, es necesario gestionar dicho contenido tanto a un nivel detallado como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar solo los momentos destacados de un evento deportivo en particular no debería estar obligado a tener que almacenar el contenido relacionado con todo el evento. Al mismo tiempo, el usuario podría querer considerar el contenido en su totalidad, por ejemplo, eliminar todo el contenido que no he visto en el último mes, excepto aquel contenido que fue marcado explícitamente para archivar. • Como se indicó anteriormente, tratar de mantener un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenido es muy difícil. Sin embargo, cuando los dispositivos de almacenamiento reales están distribuidos en una red, la tarea de llevar un registro del contenido es casi imposible. Este escenario es cada vez más común en sistemas de distribución de contenido basados en redes y es probable que también cobre importancia en escenarios de redes domésticas. Parecería claro entonces que se necesita un sistema de gestión de contenido que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que aproveche la capacidad de almacenamiento en red de los dispositivos. Este sistema debería permitir el almacenamiento eficiente y el acceso al contenido en dispositivos de almacenamiento de red heterogéneos de acuerdo a las preferencias del usuario. El sistema de gestión de contenido debe traducir las preferencias del usuario en políticas de almacenamiento de bajo nivel apropiadas y permitir que esas preferencias se expresen a un nivel de granularidad fino (sin requerirlo en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar sobre (es decir, cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenido distribuido es difícil debido a la cantidad de requisitos impuestos en el sistema. Por ejemplo: • El sistema de gestión de contenidos debe operar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando contenido almacenado en un sistema de archivos local, mientras que en otros el contenido puede estar almacenado en un dispositivo de almacenamiento de red separado. El administrador de contenido puede ser responsable de implementar las políticas que utiliza para hacer referencia al contenido o ese rol puede ser delegado a un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. El sistema de gestión de contenidos debe ser flexible y capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe ser obtenido, cuándo debe ser recuperado, cuánto tiempo debe ser retenido y en qué circunstancias debe ser descartado. Esto significa que el sistema de gestión de contenido debe permitir que múltiples aplicaciones hagan referencia al contenido con un conjunto amplio de políticas y que todo funcione de manera integrada. • El sistema de gestión de contenido debe ser capaz de monitorear las referencias al contenido y utilizar esa información para ubicar el contenido en la ubicación correcta en la red para un acceso eficiente de las aplicaciones. • El sistema de gestión de contenido debe manejar la interacción entre la población implícita y explícita del contenido en el borde de la red. • El sistema de contenido debe ser capaz de gestionar eficientemente grandes conjuntos de contenido, incluidos flujos continuos. Debe ser capaz de empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas, hemos diseñado e implementado la arquitectura del sistema de gestión de contenido Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan ya sea en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite que múltiples aplicaciones hagan referencia al contenido utilizando políticas diferentes. Se debe tener en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenido (CDN) que puede facilitar la distribución eficiente de contenido (por ejemplo, la arquitectura CDN PRISM [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. El trabajo relacionado se describe en la Sección 4, y la Sección 5 contiene nuestra conclusión y sugerencias para trabajos futuros. 2. La arquitectura del sistema de gestión de contenido distribuido Spectrum consta de tres capas de gestión distintas que pueden o no estar distribuidas en múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todo el contenido de una aplicación según las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de video personal (PVR), el administrador de contenido recibe solicitudes de contenido desde una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y gestionar contenido en el dispositivo. El administrador de políticas implementa y hace cumplir varias políticas de almacenamiento que el administrador de contenido utiliza para hacer referencia al contenido. El gestor de políticas exporta una interfaz al gestor de contenido que le permite al gestor de contenido solicitar que un contenido sea tratado de acuerdo con una política específica. Spectrum permite que se realicen políticas arbitrarias al proporcionar un conjunto fijo de plantillas de políticas base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (de lo contrario, Spectrum se puede extender fácilmente para cargar dinámicamente nuevo código de plantilla de política base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido solo puede existir en el sistema siempre y cuando esté referenciado por al menos una política existente. Los conflictos de políticas se eliminan al hacer que el administrador de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin política asociada se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar de forma natural el intercambio de contenido entre diferentes políticas, lo cual es fundamental para el almacenamiento eficiente de objetos grandes. Ten en cuenta que una diferencia clave entre el gestor de contenido y el gestor de políticas es que el gestor de contenido gestiona referencias a múltiples piezas de contenido, es decir, tiene una vista de aplicación del contenido. Por otro lado, el gerente de políticas solo se preocupa por la política utilizada para gestionar piezas de contenido independientes. Por ejemplo, en una aplicación de PVR, la capa del gestor de contenido conocería los diferentes grupos de contenido gestionado, como mantener indefinidamente, mantener por un día y mantener si hay espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada pieza de contenido tiene su propia política (o políticas) aplicada a ella y es independiente de otro contenido. El gestor de almacenamiento: almacena contenido de manera eficiente mientras facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento guarda el contenido en fragmentos de subobjetos. Este enfoque tiene ventajas para la recuperación eficiente de contenido, pero lo más importante es que permite aplicar políticas a nivel de subobjeto, lo cual es críticamente importante al tratar con objetos muy grandes como partes de medios continuos, por ejemplo, piezas seleccionadas de contenido de televisión almacenadas en un PVR. Ten en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas que están siendo utilizadas por los gestores de contenido y de políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la figura muestra el caso más simple (no distribuido) donde todas las capas están implementadas en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como los PVRs. El siguiente caso corresponde al caso en el que hay un gestor de contenido centralizado que controla dispositivos de almacenamiento distribuido, cada uno de los cuales es responsable de implementar almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, operan de manera mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, típicamente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido según un horario determinado por algún controlador centralizado. Por ejemplo, la CDN podría precargar dispositivos periféricos con contenido que se espera que sea muy popular o distribuir archivos grandes a sucursales durante las horas de menor tráfico en un entorno empresarial con limitaciones de ancho de banda. Permitir que un único administrador de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y al caso más distribuido. La necesidad de este tipo de separación puede surgir por razones de escalabilidad o cuando se requiere controlar diferentes dispositivos de almacenamiento especializados con un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas controlando un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo detallado por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de Contenidos La capa del gestor de contenidos es la interfaz principal a través de la cual las aplicaciones específicas utilizan la arquitectura Spectrum. Por lo tanto, la capa del gestor de contenido proporciona una API para que la aplicación pueda manipular todos los aspectos de la arquitectura de Spectrum en diferentes niveles de granularidad. La API del gestor de contenido tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite agregar dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo el control del gestor de contenido y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos; este es el único lugar en la arquitectura donde la aplicación debe ser consciente de esta distinción. Una vez que un dispositivo es mapeado en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Almacenes: Los almacenes son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (por ejemplo, espacio en disco) a la misma. Las tiendas solo se pueden crear en dispositivos físicos que estén mapeados en el sistema. Grupos de Políticas: Los grupos de políticas son el medio por el cual una aplicación especifica, instancia y modifica las políticas que se aplican al contenido del Espectro. El uso típico de este conjunto de funciones es seleccionar una de un pequeño conjunto de políticas base y parametrizar esta instancia específica de la política. Los grupos de políticas se crean dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento y que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que incluyen una especificación de tiempo sofisticada permiten un almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría expulsar el contenido del sistema en un momento absoluto o relativo específico. Una política basada en el tiempo un poco más compleja habilitada por la arquitectura Spectrum podría permitir que el contenido se almacene en una ventana de tiempo de un número de horas (por ejemplo, las N horas más recientes se mantienen en el sistema). Las políticas basadas en el tiempo son de particular utilidad al tratar con contenido continuo como una transmisión en vivo. 6 Contenido: En el nivel más fino de granularidad, el contenido puede ser añadido o eliminado del sistema. El contenido se especifica al sistema mediante un localizador uniforme de recursos (URL) que indica de manera concisa la ubicación del contenido, así como el protocolo a utilizar para recuperarlo. Opcionalmente se puede asociar una especificación de tiempo con el contenido. Esto permite que el contenido sea recuperado en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Nuevamente, esto es particularmente útil para tratar con el almacenamiento y gestión de contenido en vivo. 2.2 Gestor de Políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones de API. Primero, hay funciones que operan en áreas de almacenamiento gestionadas y referencias basadas en políticas (prefs) al contenido almacenado allí. Segundo, hay conjuntos de funciones utilizadas para implementar cada política de gestión. La primera clase de funciones es utilizada por la capa de gestión de contenido para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar. Estas operaciones son utilizadas por el gestor de contenido para controlar su acceso al almacenamiento. El proceso de creación de políticas de gestión de operaciones se utiliza para establecer contacto con una tienda por primera vez. Una vez que esto se haya hecho, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Ten en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información solo necesita ser transmitida al administrador de políticas una vez al momento de la creación. Para operaciones abiertas, el administrador de políticas utilizará la información en caché para contactar a la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el administrador de contenido consulte al administrador de políticas sobre qué contenido está actualmente presente para una URL dada. Para medios continuos, se devolverán rangos de tiempo de medios presentes. recurso: Las rutinas de recurso se utilizan para consultar al administrador de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su totalidad y otra que se aplica a una referencia de política en particular. La API de recursos es extensible, actualmente admitimos consultas sobre el uso de disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer se utiliza por el gestor de contenido para hacer referencia al contenido en la tienda. Si el contenido no está presente, esta llamada resultará en la obtención del contenido (o en la programación para obtenerlo si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL donde se almacenará, la URL desde la cual se obtendrán los datos si no están presentes, la política para almacenar el contenido y los argumentos utilizados para parametrizar la política. El resultado de una operación de establecimiento de prefijo exitosa es una cadena de identificación de referencia de política. Este identificador se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones del gestor de políticas se utilizan para implementar todas las políticas respaldadas por Spectrum. Visualizamos un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitiva puede ser parametrizada para funcionar diariamente, semanalmente o mensualmente. Ten en cuenta que el gestor de políticas solo se preocupa por ejecutar una política específica. Las razones de nivel superior para elegir una política determinada son manejadas por el gerente de contenido y aplicación. Una política base se implementa utilizando seis funciones: establecer: se llama cuando se establece una preferencia con las URL requeridas y los parámetros de la política base. El rutina establecida hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar acción (por ejemplo, iniciar una descarga) y programa una devolución de llamada para ese momento. También puede registrarse para recibir devoluciones de llamada si se recibe nuevo contenido para una URL específica. actualizar: se llama para cambiar los parámetros de una preferencia, o para descartar la referencia de la política. newclip: se llama cuando se recibe un fragmento de nuevo contenido para una URL de interés. La política base normalmente establece que se llame a newclip para una URL dada cuando se establece la preferencia. Cuando se llama a newclip, la política base verifica sus parámetros para determinar si desea agregar una referencia al clip recién recibido. callback: llamado cuando la preferencia programa una devolución de llamada basada en temporizador. Este es un mecanismo útil de activación para preferencias que necesitan estar inactivas durante un largo período de tiempo (por ejemplo, entre programas). arranque/apagado: se llama cuando el sistema de gestión de contenidos se está iniciando o apagando. La operación de arranque se utiliza típicamente para programar devoluciones de llamada iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para cerrar de forma ordenada los flujos de entrada/salida y guardar el estado. 2.3 Gestor de almacenamiento El rol del gestor de almacenamiento de Spectrum es controlar todas las operaciones de entrada/salida asociadas con una tienda dada. El gestor de almacenamiento de Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo, un dispositivo de almacenamiento). Para los medios continuos, a nivel del gestor de almacenamiento, el contenido se almacena como una colección de fragmentos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un fragmento podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión en continuo, tanto las rutinas de entrada como de salida toman rangos de tiempo que programan cuándo debe ocurrir la operación de E/S, y ambas rutinas devuelven un identificador de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el administrador de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar almacenes. También admite operaciones para consultar los usos de recursos y opciones admitidas por la tienda. Finalmente, el administrador de almacenamiento también tiene un procedimiento de descarte que puede ser utilizado por el administrador de políticas para informar a la tienda que elimine contenido de la tienda. 3. IMPLEMENTACIÓN Y CASOS DE USO En esta sección describimos nuestra implementación de Spectrum y cómo puede ser utilizada. 3.1 Implementación Hemos implementado las tres capas de Spectrum en C como parte de una biblioteca que puede ser enlazada con aplicaciones basadas en Spectrum. Cada capa lleva un registro de su estado a través de un conjunto de archivos de datos locales que persisten a través de reinicios, lo que permite a Spectrum manejar los ciclos de energía de manera fluida. Para las capas que residen en sistemas remotos (por ejemplo, una tienda remota), solo se almacena localmente la meta-información necesaria para contactar al administrador de políticas del gestor de contenido remoto, el gestor de almacenamiento, el recuperador de almacenamiento, los listados de programas, la interfaz de usuario gráfica, el <br>DVR habilitado para red</br>, la información del programa, la aplicación de DVR de contenido en la red habilitada para DVR. Figura 2: Espectro en un nodo de <br>DVR habilitado para red</br>. Nuestra aplicación de prueba utiliza un administrador de políticas y almacenamiento local para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficientemente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas de API de Spectrums admiten tanto modos síncronos como asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada a la API toma un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de la llamada y el estado de retorno. Para las llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamada. Para utilizar una función de la API de Spectrum, el llamante primero elige entre el modo sincrónico o asincrónico y asigna una estructura reqinfo. Para llamadas de sincronización, la reqinfo puede ser asignada en la pila, de lo contrario se asigna con malloc. Para llamadas asíncronas, se debe proporcionar una función de devolución de llamada al asignar el reqinfo. A continuación, el llamante invoca la función API de Spectrum deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas asincrónicas exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada asíncrona se completa o se produce un tiempo de espera, se llama a la función de devolución de llamada asíncrona con la información adecuada necesaria para completar el procesamiento. El diseño modular/capas de la arquitectura Spectrum simplifica el objetivo de distribución de funcionalidad. Además, la comunicación entre funciones suele ser de naturaleza maestro-esclavo(s). Esto significa que son posibles varios enfoques para la operación distribuida que cumplirían con los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un diseño modular simple. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y elegir el método de codificación que se debe utilizar con los datos a transferir. Los protocolos de transporte pueden variar desde protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP simple para la mayoría de nuestro transporte. Las llamadas a funciones a través de las diferentes APIs de Spectrum pueden ser codificadas utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos utilizando la biblioteca XML eXpat [4] para codificar nuestras llamadas. Mientras actualmente estamos transfiriendo nuestros mensajes codificados en XML utilizando una conexión TCP simple, en un entorno del mundo real esto puede ser fácilmente reemplazado con una implementación basada en capa de sockets seguros (SSL) para mejorar la seguridad al agregar SSL como protocolo de transporte. Un aspecto importante de Spectrum es que puede gestionar contenido basado en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la Sección 2.2, imagina un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben comprender las políticas de nivel base y cómo pueden ser parametrizadas. Para abordar este problema, tratamos cada política de nivel base como si fuera un programa separado. Cada política de nivel base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada utilizando una función similar a getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de los bytes no es un problema en una cadena. Dado que esta parte de Spectrum no se encuentra en la ruta crítica de los datos, este tipo de formato no representa un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos de Spectrum En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos de Spectrum en nuestro entorno. El enfoque de nuestro trabajo anterior ha sido la distribución de contenido para contenido de medios en streaming [2] y la grabación de video digital habilitada para redes [3]. El sistema Spectrum es aplicable a ambos escenarios de la siguiente manera. La Figura 2 muestra la arquitectura del <br>DVR habilitado para red</br> (NED). En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación de DVR obtiene listados de programas de alguna fuente de red, maneja la presentación al usuario a través de una interfaz gráfica de usuario (GUI) e interactúa con el sistema Spectrum a través de las APIs de la capa de gestión de contenido. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento que se aplicarán a dicho contenido. La obtención del contenido (a través de la red o localmente) y su posterior almacenamiento en el sistema local son manejados por los gestores de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenido en streaming (por ejemplo, PRISM [2]) está representado en la Figura 3. En este entorno, el contenido de medios en streaming (tanto en vivo, enlatado en vivo y a la carta) se distribuye a los portales periféricos desde donde se sirven los puntos finales de streaming. En nuestro entorno, la distribución y almacenamiento de contenido se realiza desde una estación centralizada de gestión de contenido que controla varios de los portales periféricos. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenido sin necesidad de una comunicación continua entre el gestor de contenido y los dispositivos periféricos, es decir, una vez que se han dado instrucciones a los dispositivos periféricos, pueden operar de forma independiente hasta que se deban realizar cambios. Ejemplo operativo de Spectrum 3.3 Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación de PVR basada en Spectrum programada para almacenar un día de contenido de transmisión en una ventana móvil. Para configurar la ventana deslizante, la aplicación utilizaría la API del gestor de contenido para crear un grupo de políticas y una referencia de política al contenido deseado. El establecimiento de la política de ventana de un día en movimiento haría que el gerente de políticas le pida al gerente de almacenamiento que comience a recibir el flujo. A medida que llega cada fragmento de datos en streaming, el gestor de políticas ejecuta la función newclip de las referencias de política. La función newclip agrega una referencia a cada fragmento que llega y programa una devolución de llamada para un día después. En ese momento, la política eliminará su referencia actual de un día al contenido y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considera el caso en el que el usuario decide guardar parte del contenido (por ejemplo, un programa específico) en la ventana deslizante durante una semana adicional. Para hacer esto, la aplicación solicita que el gestor de contenido agregue una nueva referencia de política adicional a la parte del contenido que se va a preservar. Por lo tanto, el contenido preservado tiene dos referencias: una del marco de tiempo móvil y otra de la solicitud de preservar el contenido por una semana adicional. Después de un día, la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. datos base url1 url2 (archivos multimedia...) (archivos multimedia...) almacenamiento de metadatos (información general...) url1 fragmentos preferencias rangos fragmentos multimedia, etc. url2 host poli ref1 ref1.archivos ref1.estado Figura 4: Diseño de datos de la tienda de políticas de Spectrum preservado por la segunda referencia. Después de que haya transcurrido la semana adicional, se llamará a la función de devolución de llamada para la segunda referencia. Esta función descartará la referencia restante al contenido y, como no hay referencias restantes, el contenido será liberado. Para poder funcionar en escenarios como los descritos anteriormente, el gestor de políticas de Spectrums debe administrar y mantener todas las referencias a diferentes fragmentos de medios. Estas referencias son persistentes y, por lo tanto, deben poder sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestro implementación del gestor de políticas de Spectrum logra esto utilizando la estructura de archivos y directorios mostrada en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el gestor de almacenamiento para almacenar los fragmentos de medios de cada URL activa. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Ten en cuenta que este directorio se utiliza solo si el gestor de almacenamiento es local. Si el administrador de políticas está utilizando un administrador de almacenamiento externo (por ejemplo, un dispositivo de almacenamiento), entonces los archivos multimedia se almacenan de forma remota y solo son referenciados de forma remota por el administrador de políticas. meta: este directorio contiene información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) y la información sobre los tipos de fragmentos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los fragmentos de datos almacenados. El archivo de fragmentos contiene una lista de fragmentos almacenados actualmente y sus recuentos de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de intervalos de tiempo de los datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato del medio que se está almacenando bajo la URL actual. poly: este directorio contiene un conjunto de subdirectorios de host. Cada subdirectorio de host contiene el conjunto de referencias de políticas creadas por ese host. La información de cada referencia de política está dividida en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files y ref1.state. El archivo ref1 contiene información sobre la referencia de la política que no cambia con frecuencia. Esta información incluye la política base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a fragmentos que posee el prefijo ref1. Finalmente, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Ten en cuenta que otras implementaciones son posibles. Por ejemplo, un administrador de espectro de calidad de operador podría almacenar toda su información de políticas y referencias en un sistema de base de datos de alto rendimiento. 10 4. TRABAJO RELACIONADO Varios autores han abordado el problema de la gestión de contenido en redes distribuidas. Gran parte del trabajo se centra en el aspecto de gestión de políticas. Por ejemplo, en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda del usuario utilizando un Protocolo de Diseminación de Demanda. El rendimiento del esquema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Enrutador Central, una Base de Conocimiento en Caché, Subcachés y un juez de expulsión de Subcaché. La base de conocimientos de caché permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenido en el entorno de red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenido, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de televisión que se utilizan en los PVR para seleccionar automáticamente contenido para los usuarios, por ejemplo [6]. En el caso de que Spectrum se utilice en una configuración de PVR, este tipo de sistema realizaría una función de nivel superior y claramente se beneficiaría de las funcionalidades de la arquitectura de Spectrum. Finalmente, en el entorno comercial de CDN, los proveedores (por ejemplo, Cisco y Netapp han desarrollado e implementado productos y herramientas de gestión de contenido. A diferencia de la arquitectura Spectrum que permite que los dispositivos periféricos operen de manera autónoma en gran medida, las soluciones de los proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. CONCLUSIÓN Y TRABAJOS FUTUROS En este artículo presentamos el diseño e implementación de la arquitectura de gestión de contenido Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que son conscientes del tiempo, lo que permite gestionar de manera efectiva el almacenamiento de contenido multimedia continuo. Finalmente, el diseño modular de la arquitectura Spectrum permite tanto realizaciones independientes como distribuidas para que el sistema pueda ser desplegado en una variedad de aplicaciones. Existen varios problemas abiertos que requerirán trabajo futuro. Algunos de estos problemas incluyen: • Visualizamos que Spectrum pueda gestionar contenido en sistemas que van desde grandes CDNs hasta dispositivos más pequeños como TiVO [8]. Para que estos sistemas más pequeños puedan soportar Spectrum, necesitarán de una red y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo se puede integrar en la arquitectura de Spectrum. • Spectrum nombra el contenido por URL, pero intencionalmente no hemos definido el formato de las URL de Spectrum, cómo se relacionan con el nombre real del contenido, o cómo los nombres y las URL deben presentarse al usuario. Si bien anteriormente abordamos estos temas en otro lugar [2], creemos que hay más trabajo por hacer y que se deben redactar estándares basados en consenso sobre la nomenclatura. En este documento nos hemos centrado en la gestión de contenido para objetos de medios continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero aún no hemos resuelto los detalles necesarios para admitir esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que el contenido multimedia se comparta fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. REFERENCIAS [1] K. . Cheng y Y. Kambayashi. Gestión de contenido basada en multicache para el almacenamiento en caché web. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información en la Web, junio de 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. Arquitectura PRISM: Apoyo a Servicios de Streaming Mejorados en una Red de Distribución de Contenidos. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de video digital habilitado para red. 11º Taller de la IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji y P. Shenoy. Una arquitectura de clúster de servidores de medios en streaming adaptativa a la demanda y consciente de la localidad (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Un recomendador de televisión multiagente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "high-performance database system": {
            "translated_key": "sistema de base de datos de alto rendimiento",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E.",
                "van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices.",
                "Keeping track of (or managing) such content remains challenging due to the sheer volume of data.",
                "Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with.",
                "Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system.",
                "In this paper we present the design and implementation of the Spectrum content management system, which deals with rich media content effectively in this environment.",
                "Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios.",
                "A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system.",
                "This means that there are no eviction policies.",
                "Content that no longer has a retention policy applied to it is simply removed from the system.",
                "Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication.",
                "This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content.",
                "We not only describe the details of the Spectrum architecture but also give typical use cases.",
                "Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1.",
                "INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer.",
                "Initial computing applications include text formatters and program compilers.",
                "Content was initially managed by explicit user interaction through the use of files and filesystems.",
                "As technology has advanced, both the types of content and the way people wish to use it have greatly changed.",
                "New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies.",
                "For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive.",
                "This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7].",
                "Another example is the combination of encoding and broadband networking technology.",
                "This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository.",
                "The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data.",
                "The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms.",
                "The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content.",
                "Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic.",
                "First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems.",
                "Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints.",
                "This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level.",
                "For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event.",
                "At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult.",
                "However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible.",
                "This scenario is increasingly common in network based content distribution systems and is likely to also become important in home-networking scenarios.",
                "It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed.",
                "This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences.",
                "The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general).",
                "The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content.",
                "Addressing this distributed content management problem is difficult due to the number of requirements placed on the system.",
                "For example: • The content management system must operate on a large number of heterogeneous systems.",
                "In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance.",
                "The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer.",
                "A application program interface (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies.",
                "These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded.",
                "This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams.",
                "It needs to be able to package this content in such a way that it is convenient for users to access.",
                "To address these issues we have designed and implemented the Spectrum content management system architecture.",
                "Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers.",
                "It allows multiple applications to reference content using differing policies.",
                "Note that the Spectrum architecture assumes the existence of a content distribution network (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]).",
                "The rest of this paper is organized as follows.",
                "Section 2 describes the architecture of our content management system.",
                "In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use.",
                "Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2.",
                "THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1.",
                "The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences.",
                "For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. policy manager: implements and enforces various storage polices that the content manager uses to refer to content.",
                "The policy manager exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy.",
                "Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized.",
                "It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time).",
                "A key aspect of the policy manager is that it allows different policies to be simultaneously applied to the same content (or parts of the same content).",
                "Furthermore content can only exist in the system so long as it is referenced by at least one existing policy.",
                "Policy conflicts are eliminated by having the policy manager deal exclusively with retention policies rather than with a mix of retention and eviction policies.",
                "This means that content with no policy associated with it is immediately and automatically removed from the system.",
                "This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects.",
                "Note that a key difference between the content manager and the policy manager is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content.",
                "On the other hand, the policy manager is only concerned with the policy used to manage standalone pieces of content.",
                "For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace.",
                "However, at the policy manager level, each piece of content has 5 Content Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers.",
                "Specifically the storage manager stores content in sub-object chunks.",
                "This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR.",
                "Note that the storage manager has no knowledge of the policies being used by the content and policy managers.",
                "Another unique part of our approach is that the interfaces between the layers can either be local or distributed.",
                "Figure 1 shows the four possible cases.",
                "The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box.",
                "This configuration would be used in selfcontained applications such as PVRs.",
                "The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage.",
                "In this case although the remote devices are controlled by the central manager they operate much more independently.",
                "For example, once they receive instructions from the central manager they typically operate in autonomous fashion.",
                "An example of this type of configuration is a content distribution network (CDN) that distributes and stores content based on a schedule determined by some centralized controller.",
                "For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment.",
                "Allowing a single policy manager to control several storage managers leads to the next combination of functions and the most distributed case.",
                "The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single policy manager.",
                "The final case shows a content manager combined with a policy manager controlling a remote storage manager.",
                "This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the policy manager.",
                "We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture.",
                "As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity.",
                "The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system.",
                "Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction.",
                "Once a device is mapped into the application through this interface, the system tracks its type and location.",
                "Users simply refer to the content through an application-provided label.",
                "Stores: Stores are subsets of physical storage devices.",
                "Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it.",
                "Stores can only be created in physical devices that are mapped into the system.",
                "Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content.",
                "Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy.",
                "Policy groups are created within existing stores in the system.",
                "The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage.",
                "In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time.",
                "For example, a simple time-based policy could evict content from the system at a certain absolute or relative time.",
                "A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system).",
                "Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system.",
                "Content is specified to the system by means of a uniform resource locator (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it.",
                "Optionally a time specification can be associated with content.",
                "This allows content to be fetched into the system at some future time, or at future time intervals.",
                "Again, this is particularly useful for dealing with the storage and management of live content. 2.2 Policy Manager The policy manager layer of the Spectrum architecture has two main types of API functions.",
                "First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there.",
                "Second, there are sets of functions used to implement each management policy.",
                "The first class of functions is used by the content manager layer to access storage.",
                "Operations include: create, open, and close: These operations are used by the content manager to control its access to storage.",
                "The policy managers create operation is used to establish contact with a store for the first time.",
                "Once this is done, the store can be open and closed using the appropriate routines.",
                "Note that the parameters used to create a store contain information on how to reach it.",
                "For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them.",
                "The information only needs to be passed to the policy manager once at create time.",
                "For open operations, the policy manager will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the policy manager about what content is currently present for a given URL.",
                "For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the policy manager about its current resource usage.",
                "There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference.",
                "The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store.",
                "If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available).",
                "Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy.",
                "The result of a successful pref establish operation is a policy reference ID string.",
                "This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely.",
                "The second group of policy manager functions are used to implement all the polices supported by Spectrum.",
                "We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly.",
                "Note that the policy manager is only concerned with executing a specific policy.",
                "The higher-level reasons for choosing a given policy are handled by the content and application manager.",
                "A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters.",
                "The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time.",
                "It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest.",
                "The base policy typically arranges for newclip to be called for a given URL when the pref is established.",
                "When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback.",
                "This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down.",
                "The boot operation is typically used to schedule initial callbacks or start I/O operations.",
                "The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store.",
                "Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance).",
                "For continuous media, at the storage manager level content is stored as a collection of time-based chunks.",
                "Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database.",
                "The two main storage manager operations are input and output.",
                "The input routine is used to store content in a store under a given name.",
                "The output routine is used to send data from the store to a client.",
                "For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future.",
                "Much like the policy manager, the storage manager also provides API functions to create, open, and close stores.",
                "It also supports operations to query the resource usages and options supported by the store.",
                "Finally, the storage manager also has a discard routine that may be used by the policy manager to inform the store to remove content from the store. 3.",
                "IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications.",
                "Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles.",
                "For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally.",
                "Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem.",
                "To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure.",
                "Each API call takes a pointer to a reqinfo structure as one of its arguments.",
                "This structure is used to hold the call state and return status.",
                "For async calls, the reqinfo also contains a pointer to a callback function.",
                "To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure.",
                "For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc.",
                "For async calls, a callback function must be provided when the reqinfo is allocated.",
                "Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument.",
                "For sync calls, the result of the calls is returned immediately in the reqinfo structure.",
                "For successful async calls, a call in progress value is returned.",
                "Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing.",
                "The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality.",
                "Furthermore, communication between functions is typically of a master-slave(s) nature.",
                "This means that several approaches to distributed operation are possible that would satisfy the architectural requirements.",
                "In our implementation we have opted to realize this functionality with a simple modular design.",
                "We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred.",
                "Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP.",
                "We currently are using plain TCP for most of our transport.",
                "Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML.",
                "We are currently using the eXpat XML library [4] to encode our calls.",
                "While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol.",
                "An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms.",
                "As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized.",
                "To address this issue, we treat each base-level policy as if it was a separate program.",
                "Each base-level policy should have a well known name and command line options for parameterization.",
                "In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function.",
                "This format is easily understood and provides portability since byte order is not an issue in a string.",
                "Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment.",
                "The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3].",
                "The Spectrum system is applicable to both scenarios as follows.",
                "Figure 2 shows the Network Enabled DVR (NED) architecture.",
                "In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration.",
                "The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs.",
                "This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content.",
                "Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers.",
                "The use of Spectrum in a streaming content distribution architecture (e.g.",
                "PRISM [2]) is depicted in Figure 3.",
                "In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served.",
                "In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals.",
                "The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window.",
                "To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content.",
                "The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream.",
                "As each chunk of streaming data arrives, the policy manager executes the policy references newclip function.",
                "The newclip function adds a reference to each arriving chunk, and schedules a callback a day later.",
                "At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy.",
                "Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week.",
                "To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved.",
                "Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week.",
                "After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference.",
                "After the additional week has past, the callback function for the second reference will be called.",
                "This function will discard the remaining reference to the content and as there are no remaining references the content will be freed.",
                "In order to function in scenarios like the ones described above, Spectrums policy manager must manage and maintain all the references to various chunks of media.",
                "These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted.",
                "Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure 4.",
                "There are three classes of data stored, and each class has its own top level directory.",
                "The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media.",
                "The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime.",
                "Note that this directory is used only if the storage manager is local.",
                "If the policy manager is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the policy manager. meta: this directory contains general meta information about the storage manager being used and the data it is storing.",
                "General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle.",
                "The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored.",
                "The chunks file contains a list of chunks currently stored and their reference counts.",
                "The prefs file contains a list of active policy references that point to this URL.",
                "The ranges file contains a list of time ranges of data currently stored.",
                "Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories.",
                "Each host subdirectory contains the set of policy references created by that host.",
                "Information on each policy reference is broken up into three files.",
                "For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state.",
                "The ref1 file contains information about the policy reference that does not change frequently.",
                "This information includes the base-policy and the parameters used to create the reference.",
                "The ref1.files file contains the list of references to chunks that pref ref1 owns.",
                "Finally, the ref1.state file contains optional policy-specific state information that can change over time.",
                "Together, these files and directories are used to track references in our implementation of Spectrum.",
                "Note that other implementations are possible.",
                "For example, a carrier-grade Spectrum manager might store all its policy and reference information in a <br>high-performance database system</br>. 10 4.",
                "RELATED WORK Several authors have addressed the problem of the management of content in distributed networks.",
                "Much of the work focuses on the policy management aspect.",
                "For example in [5], the problem of serving multimedia content via distributed servers is considered.",
                "Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol.",
                "The performance of the scheme is benchmarked via simulation.",
                "In [1] content is distributed among sub-caches.",
                "The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge.",
                "The Cache Knowledge base allows sophisticated policies to be employed.",
                "Simulation is used to compare the proposed scheme with well-known replacement algorithms.",
                "Our work differs in that we are considering more than the policy management aspects of the problem.",
                "After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, Policy manager and Storage manager.",
                "This has allowed us to easily implement and experiment with a prototype system.",
                "Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6].",
                "In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture.",
                "Finally, in the commercial CDN environment vendors (e.g.",
                "Cisco and Netapp) have developed and implemented content management products and tools.",
                "Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5.",
                "CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture.",
                "Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage.",
                "Specifically, the system allows different policies to be applied to the same content without replication.",
                "Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content.",
                "Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications.",
                "There are a number of open issues that will require future work.",
                "Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8].",
                "In order for these smaller systems to support Spectrum they will require networking and an external API.",
                "When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user.",
                "While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects.",
                "We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance.",
                "Adapting Spectrum to meet legal requirements will likely require more technical work. 6.",
                "REFERENCES [1] K. .",
                "Cheng and Y. Kambayashi.",
                "Multicache-based Content Management for Web Caching.",
                "Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "PRISM Architecture: Supporting Enhanced Streaming Services in a Content Distribution Network.",
                "IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy.",
                "A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture.",
                "NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman.",
                "A multi-agent TV recommender.",
                "Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11"
            ],
            "original_annotated_samples": [
                "For example, a carrier-grade Spectrum manager might store all its policy and reference information in a <br>high-performance database system</br>. 10 4."
            ],
            "translated_annotated_samples": [
                "Por ejemplo, un administrador de espectro de calidad de operador podría almacenar toda su información de políticas y referencias en un <br>sistema de base de datos de alto rendimiento</br>. 10 4."
            ],
            "translated_text": "Diseño e Implementación de un Sistema de Gestión de Contenido Distribuido por C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ y J.E. La convergencia de avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan y se intercambian rutinariamente entre dispositivos habilitados para redes. El seguimiento (o gestión) de dicho contenido sigue siendo un desafío debido a la gran cantidad de datos. Almacenar medios continuos en vivo (como contenido de televisión o radio) aumenta la complejidad debido a que este contenido no tiene un inicio o fin bien definido y, por lo tanto, resulta engorroso de manejar. El almacenamiento en red permite que el contenido que se ve lógicamente como parte de la misma colección esté distribuido en una red, lo que hace que la gestión de contenido sea casi imposible de manejar sin un sistema de gestión de contenido. En este documento presentamos el diseño e implementación del sistema de gestión de contenido Spectrum, que maneja de manera efectiva el contenido de medios enriquecidos en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto en escenarios independientes como en diferentes entornos de red. Un aspecto único de Spectrum es que requiere que se aplique una (o más) políticas de retención a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido al que ya no se le aplica una política de retención simplemente se elimina del sistema. Diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo, que son bloques de construcción básicos necesarios para manejar el almacenamiento de medios continuos en vivo, al contenido. No solo describimos los detalles de la arquitectura del Spectrum, sino que también proporcionamos casos de uso típicos. Categorías y Descriptores de Asignaturas C.2.4 [Organización de Sistemas Informáticos]: Redes de comunicación informática-sistemas distribuidos; H.3.4 [Sistemas de Información]: Almacenamiento de información y recuperación-sistemas y software Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar contenido es y siempre ha sido una de las funciones principales de una computadora. Las aplicaciones iniciales de computación incluyen formateadores de texto y compiladores de programas. El contenido era gestionado inicialmente mediante la interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que las personas desean utilizarlo han cambiado considerablemente. Nuevos tipos de contenido, como las transmisiones multimedia continuas, se han vuelto comunes debido a la convergencia de avances en tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de video codificado de calidad televisiva en un solo disco duro. Esto ha llevado a la introducción de sistemas de grabación de video digital independientes o personales, como TiVO y ReplayTV. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas, con la red misma actuando como un gran repositorio de datos. La proliferación de contenido de alta calidad habilitada por estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. El enfoque de nuestro trabajo se centra en el almacenamiento de contenido multimedia y, en particular, en el almacenamiento de contenido multimedia continuo en forma preempaquetada o en vivo. La necesidad de gestión de contenido en esta área es evidente cuando se considera lo siguiente: • Los aumentos en la capacidad y las disminuciones en el costo de almacenamiento significan que incluso los sistemas de escritorio modestos de hoy tienen la capacidad de almacenar grandes cantidades de contenido. La gestión manual de dicho contenido (o más correctamente, la falta de gestión manual de dicho contenido) conduce a grandes ineficiencias donde el contenido no deseado y olvidado se acumula y donde el contenido deseado no se puede encontrar. • Aunque es cierto para todos los tipos de contenido, el almacenamiento de contenido de medios continuos es especialmente problemático. El primer contenido de medios continuos sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque sin política para almacenarlo no funcionará para todos, excepto para los sistemas más pequeños. Segundo, el almacenamiento de contenido en vivo como la televisión o la radio es inherentemente problemático ya que estas señales son flujos continuos sin puntos finales. Esto significa que antes de siquiera pensar en gestionar dicho contenido, es necesario abstraerlo en algo que pueda ser manipulado y gestionado. Al tratar con medios continuos almacenados, es necesario gestionar dicho contenido tanto a un nivel detallado como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar solo los momentos destacados de un evento deportivo en particular no debería estar obligado a tener que almacenar el contenido relacionado con todo el evento. Al mismo tiempo, el usuario podría querer considerar el contenido en su totalidad, por ejemplo, eliminar todo el contenido que no he visto en el último mes, excepto aquel contenido que fue marcado explícitamente para archivar. • Como se indicó anteriormente, tratar de mantener un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenido es muy difícil. Sin embargo, cuando los dispositivos de almacenamiento reales están distribuidos en una red, la tarea de llevar un registro del contenido es casi imposible. Este escenario es cada vez más común en sistemas de distribución de contenido basados en redes y es probable que también cobre importancia en escenarios de redes domésticas. Parecería claro entonces que se necesita un sistema de gestión de contenido que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que aproveche la capacidad de almacenamiento en red de los dispositivos. Este sistema debería permitir el almacenamiento eficiente y el acceso al contenido en dispositivos de almacenamiento de red heterogéneos de acuerdo a las preferencias del usuario. El sistema de gestión de contenido debe traducir las preferencias del usuario en políticas de almacenamiento de bajo nivel apropiadas y permitir que esas preferencias se expresen a un nivel de granularidad fino (sin requerirlo en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar sobre (es decir, cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenido distribuido es difícil debido a la cantidad de requisitos impuestos en el sistema. Por ejemplo: • El sistema de gestión de contenidos debe operar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando contenido almacenado en un sistema de archivos local, mientras que en otros el contenido puede estar almacenado en un dispositivo de almacenamiento de red separado. El administrador de contenido puede ser responsable de implementar las políticas que utiliza para hacer referencia al contenido o ese rol puede ser delegado a un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. El sistema de gestión de contenidos debe ser flexible y capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe ser obtenido, cuándo debe ser recuperado, cuánto tiempo debe ser retenido y en qué circunstancias debe ser descartado. Esto significa que el sistema de gestión de contenido debe permitir que múltiples aplicaciones hagan referencia al contenido con un conjunto amplio de políticas y que todo funcione de manera integrada. • El sistema de gestión de contenido debe ser capaz de monitorear las referencias al contenido y utilizar esa información para ubicar el contenido en la ubicación correcta en la red para un acceso eficiente de las aplicaciones. • El sistema de gestión de contenido debe manejar la interacción entre la población implícita y explícita del contenido en el borde de la red. • El sistema de contenido debe ser capaz de gestionar eficientemente grandes conjuntos de contenido, incluidos flujos continuos. Debe ser capaz de empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas, hemos diseñado e implementado la arquitectura del sistema de gestión de contenido Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan ya sea en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite que múltiples aplicaciones hagan referencia al contenido utilizando políticas diferentes. Se debe tener en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenido (CDN) que puede facilitar la distribución eficiente de contenido (por ejemplo, la arquitectura CDN PRISM [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. El trabajo relacionado se describe en la Sección 4, y la Sección 5 contiene nuestra conclusión y sugerencias para trabajos futuros. 2. La arquitectura del sistema de gestión de contenido distribuido Spectrum consta de tres capas de gestión distintas que pueden o no estar distribuidas en múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todo el contenido de una aplicación según las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de video personal (PVR), el administrador de contenido recibe solicitudes de contenido desde una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y gestionar contenido en el dispositivo. El administrador de políticas implementa y hace cumplir varias políticas de almacenamiento que el administrador de contenido utiliza para hacer referencia al contenido. El gestor de políticas exporta una interfaz al gestor de contenido que le permite al gestor de contenido solicitar que un contenido sea tratado de acuerdo con una política específica. Spectrum permite que se realicen políticas arbitrarias al proporcionar un conjunto fijo de plantillas de políticas base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (de lo contrario, Spectrum se puede extender fácilmente para cargar dinámicamente nuevo código de plantilla de política base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido solo puede existir en el sistema siempre y cuando esté referenciado por al menos una política existente. Los conflictos de políticas se eliminan al hacer que el administrador de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin política asociada se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar de forma natural el intercambio de contenido entre diferentes políticas, lo cual es fundamental para el almacenamiento eficiente de objetos grandes. Ten en cuenta que una diferencia clave entre el gestor de contenido y el gestor de políticas es que el gestor de contenido gestiona referencias a múltiples piezas de contenido, es decir, tiene una vista de aplicación del contenido. Por otro lado, el gerente de políticas solo se preocupa por la política utilizada para gestionar piezas de contenido independientes. Por ejemplo, en una aplicación de PVR, la capa del gestor de contenido conocería los diferentes grupos de contenido gestionado, como mantener indefinidamente, mantener por un día y mantener si hay espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada pieza de contenido tiene su propia política (o políticas) aplicada a ella y es independiente de otro contenido. El gestor de almacenamiento: almacena contenido de manera eficiente mientras facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento guarda el contenido en fragmentos de subobjetos. Este enfoque tiene ventajas para la recuperación eficiente de contenido, pero lo más importante es que permite aplicar políticas a nivel de subobjeto, lo cual es críticamente importante al tratar con objetos muy grandes como partes de medios continuos, por ejemplo, piezas seleccionadas de contenido de televisión almacenadas en un PVR. Ten en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas que están siendo utilizadas por los gestores de contenido y de políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la figura muestra el caso más simple (no distribuido) donde todas las capas están implementadas en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como los PVRs. El siguiente caso corresponde al caso en el que hay un gestor de contenido centralizado que controla dispositivos de almacenamiento distribuido, cada uno de los cuales es responsable de implementar almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, operan de manera mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, típicamente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido según un horario determinado por algún controlador centralizado. Por ejemplo, la CDN podría precargar dispositivos periféricos con contenido que se espera que sea muy popular o distribuir archivos grandes a sucursales durante las horas de menor tráfico en un entorno empresarial con limitaciones de ancho de banda. Permitir que un único administrador de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y al caso más distribuido. La necesidad de este tipo de separación puede surgir por razones de escalabilidad o cuando se requiere controlar diferentes dispositivos de almacenamiento especializados con un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas controlando un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo detallado por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de Contenidos La capa del gestor de contenidos es la interfaz principal a través de la cual las aplicaciones específicas utilizan la arquitectura Spectrum. Por lo tanto, la capa del gestor de contenido proporciona una API para que la aplicación pueda manipular todos los aspectos de la arquitectura de Spectrum en diferentes niveles de granularidad. La API del gestor de contenido tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite agregar dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo el control del gestor de contenido y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos; este es el único lugar en la arquitectura donde la aplicación debe ser consciente de esta distinción. Una vez que un dispositivo es mapeado en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Almacenes: Los almacenes son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (por ejemplo, espacio en disco) a la misma. Las tiendas solo se pueden crear en dispositivos físicos que estén mapeados en el sistema. Grupos de Políticas: Los grupos de políticas son el medio por el cual una aplicación especifica, instancia y modifica las políticas que se aplican al contenido del Espectro. El uso típico de este conjunto de funciones es seleccionar una de un pequeño conjunto de políticas base y parametrizar esta instancia específica de la política. Los grupos de políticas se crean dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento y que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que incluyen una especificación de tiempo sofisticada permiten un almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría expulsar el contenido del sistema en un momento absoluto o relativo específico. Una política basada en el tiempo un poco más compleja habilitada por la arquitectura Spectrum podría permitir que el contenido se almacene en una ventana de tiempo de un número de horas (por ejemplo, las N horas más recientes se mantienen en el sistema). Las políticas basadas en el tiempo son de particular utilidad al tratar con contenido continuo como una transmisión en vivo. 6 Contenido: En el nivel más fino de granularidad, el contenido puede ser añadido o eliminado del sistema. El contenido se especifica al sistema mediante un localizador uniforme de recursos (URL) que indica de manera concisa la ubicación del contenido, así como el protocolo a utilizar para recuperarlo. Opcionalmente se puede asociar una especificación de tiempo con el contenido. Esto permite que el contenido sea recuperado en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Nuevamente, esto es particularmente útil para tratar con el almacenamiento y gestión de contenido en vivo. 2.2 Gestor de Políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones de API. Primero, hay funciones que operan en áreas de almacenamiento gestionadas y referencias basadas en políticas (prefs) al contenido almacenado allí. Segundo, hay conjuntos de funciones utilizadas para implementar cada política de gestión. La primera clase de funciones es utilizada por la capa de gestión de contenido para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar. Estas operaciones son utilizadas por el gestor de contenido para controlar su acceso al almacenamiento. El proceso de creación de políticas de gestión de operaciones se utiliza para establecer contacto con una tienda por primera vez. Una vez que esto se haya hecho, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Ten en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información solo necesita ser transmitida al administrador de políticas una vez al momento de la creación. Para operaciones abiertas, el administrador de políticas utilizará la información en caché para contactar a la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el administrador de contenido consulte al administrador de políticas sobre qué contenido está actualmente presente para una URL dada. Para medios continuos, se devolverán rangos de tiempo de medios presentes. recurso: Las rutinas de recurso se utilizan para consultar al administrador de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su totalidad y otra que se aplica a una referencia de política en particular. La API de recursos es extensible, actualmente admitimos consultas sobre el uso de disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer se utiliza por el gestor de contenido para hacer referencia al contenido en la tienda. Si el contenido no está presente, esta llamada resultará en la obtención del contenido (o en la programación para obtenerlo si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL donde se almacenará, la URL desde la cual se obtendrán los datos si no están presentes, la política para almacenar el contenido y los argumentos utilizados para parametrizar la política. El resultado de una operación de establecimiento de prefijo exitosa es una cadena de identificación de referencia de política. Este identificador se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones del gestor de políticas se utilizan para implementar todas las políticas respaldadas por Spectrum. Visualizamos un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitiva puede ser parametrizada para funcionar diariamente, semanalmente o mensualmente. Ten en cuenta que el gestor de políticas solo se preocupa por ejecutar una política específica. Las razones de nivel superior para elegir una política determinada son manejadas por el gerente de contenido y aplicación. Una política base se implementa utilizando seis funciones: establecer: se llama cuando se establece una preferencia con las URL requeridas y los parámetros de la política base. El rutina establecida hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar acción (por ejemplo, iniciar una descarga) y programa una devolución de llamada para ese momento. También puede registrarse para recibir devoluciones de llamada si se recibe nuevo contenido para una URL específica. actualizar: se llama para cambiar los parámetros de una preferencia, o para descartar la referencia de la política. newclip: se llama cuando se recibe un fragmento de nuevo contenido para una URL de interés. La política base normalmente establece que se llame a newclip para una URL dada cuando se establece la preferencia. Cuando se llama a newclip, la política base verifica sus parámetros para determinar si desea agregar una referencia al clip recién recibido. callback: llamado cuando la preferencia programa una devolución de llamada basada en temporizador. Este es un mecanismo útil de activación para preferencias que necesitan estar inactivas durante un largo período de tiempo (por ejemplo, entre programas). arranque/apagado: se llama cuando el sistema de gestión de contenidos se está iniciando o apagando. La operación de arranque se utiliza típicamente para programar devoluciones de llamada iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para cerrar de forma ordenada los flujos de entrada/salida y guardar el estado. 2.3 Gestor de almacenamiento El rol del gestor de almacenamiento de Spectrum es controlar todas las operaciones de entrada/salida asociadas con una tienda dada. El gestor de almacenamiento de Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo, un dispositivo de almacenamiento). Para los medios continuos, a nivel del gestor de almacenamiento, el contenido se almacena como una colección de fragmentos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un fragmento podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión en continuo, tanto las rutinas de entrada como de salida toman rangos de tiempo que programan cuándo debe ocurrir la operación de E/S, y ambas rutinas devuelven un identificador de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el administrador de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar almacenes. También admite operaciones para consultar los usos de recursos y opciones admitidas por la tienda. Finalmente, el administrador de almacenamiento también tiene un procedimiento de descarte que puede ser utilizado por el administrador de políticas para informar a la tienda que elimine contenido de la tienda. 3. IMPLEMENTACIÓN Y CASOS DE USO En esta sección describimos nuestra implementación de Spectrum y cómo puede ser utilizada. 3.1 Implementación Hemos implementado las tres capas de Spectrum en C como parte de una biblioteca que puede ser enlazada con aplicaciones basadas en Spectrum. Cada capa lleva un registro de su estado a través de un conjunto de archivos de datos locales que persisten a través de reinicios, lo que permite a Spectrum manejar los ciclos de energía de manera fluida. Para las capas que residen en sistemas remotos (por ejemplo, una tienda remota), solo se almacena localmente la meta-información necesaria para contactar al administrador de políticas del gestor de contenido remoto, el gestor de almacenamiento, el recuperador de almacenamiento, los listados de programas, la interfaz de usuario gráfica, el DVR habilitado para red, la información del programa, la aplicación de DVR de contenido en la red habilitada para DVR. Figura 2: Espectro en un nodo de DVR habilitado para red. Nuestra aplicación de prueba utiliza un administrador de políticas y almacenamiento local para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficientemente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas de API de Spectrums admiten tanto modos síncronos como asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada a la API toma un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de la llamada y el estado de retorno. Para las llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamada. Para utilizar una función de la API de Spectrum, el llamante primero elige entre el modo sincrónico o asincrónico y asigna una estructura reqinfo. Para llamadas de sincronización, la reqinfo puede ser asignada en la pila, de lo contrario se asigna con malloc. Para llamadas asíncronas, se debe proporcionar una función de devolución de llamada al asignar el reqinfo. A continuación, el llamante invoca la función API de Spectrum deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas asincrónicas exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada asíncrona se completa o se produce un tiempo de espera, se llama a la función de devolución de llamada asíncrona con la información adecuada necesaria para completar el procesamiento. El diseño modular/capas de la arquitectura Spectrum simplifica el objetivo de distribución de funcionalidad. Además, la comunicación entre funciones suele ser de naturaleza maestro-esclavo(s). Esto significa que son posibles varios enfoques para la operación distribuida que cumplirían con los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un diseño modular simple. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y elegir el método de codificación que se debe utilizar con los datos a transferir. Los protocolos de transporte pueden variar desde protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP simple para la mayoría de nuestro transporte. Las llamadas a funciones a través de las diferentes APIs de Spectrum pueden ser codificadas utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos utilizando la biblioteca XML eXpat [4] para codificar nuestras llamadas. Mientras actualmente estamos transfiriendo nuestros mensajes codificados en XML utilizando una conexión TCP simple, en un entorno del mundo real esto puede ser fácilmente reemplazado con una implementación basada en capa de sockets seguros (SSL) para mejorar la seguridad al agregar SSL como protocolo de transporte. Un aspecto importante de Spectrum es que puede gestionar contenido basado en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la Sección 2.2, imagina un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben comprender las políticas de nivel base y cómo pueden ser parametrizadas. Para abordar este problema, tratamos cada política de nivel base como si fuera un programa separado. Cada política de nivel base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada utilizando una función similar a getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de los bytes no es un problema en una cadena. Dado que esta parte de Spectrum no se encuentra en la ruta crítica de los datos, este tipo de formato no representa un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos de Spectrum En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos de Spectrum en nuestro entorno. El enfoque de nuestro trabajo anterior ha sido la distribución de contenido para contenido de medios en streaming [2] y la grabación de video digital habilitada para redes [3]. El sistema Spectrum es aplicable a ambos escenarios de la siguiente manera. La Figura 2 muestra la arquitectura del DVR habilitado para red (NED). En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación de DVR obtiene listados de programas de alguna fuente de red, maneja la presentación al usuario a través de una interfaz gráfica de usuario (GUI) e interactúa con el sistema Spectrum a través de las APIs de la capa de gestión de contenido. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento que se aplicarán a dicho contenido. La obtención del contenido (a través de la red o localmente) y su posterior almacenamiento en el sistema local son manejados por los gestores de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenido en streaming (por ejemplo, PRISM [2]) está representado en la Figura 3. En este entorno, el contenido de medios en streaming (tanto en vivo, enlatado en vivo y a la carta) se distribuye a los portales periféricos desde donde se sirven los puntos finales de streaming. En nuestro entorno, la distribución y almacenamiento de contenido se realiza desde una estación centralizada de gestión de contenido que controla varios de los portales periféricos. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenido sin necesidad de una comunicación continua entre el gestor de contenido y los dispositivos periféricos, es decir, una vez que se han dado instrucciones a los dispositivos periféricos, pueden operar de forma independiente hasta que se deban realizar cambios. Ejemplo operativo de Spectrum 3.3 Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación de PVR basada en Spectrum programada para almacenar un día de contenido de transmisión en una ventana móvil. Para configurar la ventana deslizante, la aplicación utilizaría la API del gestor de contenido para crear un grupo de políticas y una referencia de política al contenido deseado. El establecimiento de la política de ventana de un día en movimiento haría que el gerente de políticas le pida al gerente de almacenamiento que comience a recibir el flujo. A medida que llega cada fragmento de datos en streaming, el gestor de políticas ejecuta la función newclip de las referencias de política. La función newclip agrega una referencia a cada fragmento que llega y programa una devolución de llamada para un día después. En ese momento, la política eliminará su referencia actual de un día al contenido y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considera el caso en el que el usuario decide guardar parte del contenido (por ejemplo, un programa específico) en la ventana deslizante durante una semana adicional. Para hacer esto, la aplicación solicita que el gestor de contenido agregue una nueva referencia de política adicional a la parte del contenido que se va a preservar. Por lo tanto, el contenido preservado tiene dos referencias: una del marco de tiempo móvil y otra de la solicitud de preservar el contenido por una semana adicional. Después de un día, la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. datos base url1 url2 (archivos multimedia...) (archivos multimedia...) almacenamiento de metadatos (información general...) url1 fragmentos preferencias rangos fragmentos multimedia, etc. url2 host poli ref1 ref1.archivos ref1.estado Figura 4: Diseño de datos de la tienda de políticas de Spectrum preservado por la segunda referencia. Después de que haya transcurrido la semana adicional, se llamará a la función de devolución de llamada para la segunda referencia. Esta función descartará la referencia restante al contenido y, como no hay referencias restantes, el contenido será liberado. Para poder funcionar en escenarios como los descritos anteriormente, el gestor de políticas de Spectrums debe administrar y mantener todas las referencias a diferentes fragmentos de medios. Estas referencias son persistentes y, por lo tanto, deben poder sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestro implementación del gestor de políticas de Spectrum logra esto utilizando la estructura de archivos y directorios mostrada en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el gestor de almacenamiento para almacenar los fragmentos de medios de cada URL activa. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Ten en cuenta que este directorio se utiliza solo si el gestor de almacenamiento es local. Si el administrador de políticas está utilizando un administrador de almacenamiento externo (por ejemplo, un dispositivo de almacenamiento), entonces los archivos multimedia se almacenan de forma remota y solo son referenciados de forma remota por el administrador de políticas. meta: este directorio contiene información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) y la información sobre los tipos de fragmentos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los fragmentos de datos almacenados. El archivo de fragmentos contiene una lista de fragmentos almacenados actualmente y sus recuentos de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de intervalos de tiempo de los datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato del medio que se está almacenando bajo la URL actual. poly: este directorio contiene un conjunto de subdirectorios de host. Cada subdirectorio de host contiene el conjunto de referencias de políticas creadas por ese host. La información de cada referencia de política está dividida en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files y ref1.state. El archivo ref1 contiene información sobre la referencia de la política que no cambia con frecuencia. Esta información incluye la política base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a fragmentos que posee el prefijo ref1. Finalmente, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Ten en cuenta que otras implementaciones son posibles. Por ejemplo, un administrador de espectro de calidad de operador podría almacenar toda su información de políticas y referencias en un <br>sistema de base de datos de alto rendimiento</br>. 10 4. TRABAJO RELACIONADO Varios autores han abordado el problema de la gestión de contenido en redes distribuidas. Gran parte del trabajo se centra en el aspecto de gestión de políticas. Por ejemplo, en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda del usuario utilizando un Protocolo de Diseminación de Demanda. El rendimiento del esquema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Enrutador Central, una Base de Conocimiento en Caché, Subcachés y un juez de expulsión de Subcaché. La base de conocimientos de caché permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenido en el entorno de red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenido, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de televisión que se utilizan en los PVR para seleccionar automáticamente contenido para los usuarios, por ejemplo [6]. En el caso de que Spectrum se utilice en una configuración de PVR, este tipo de sistema realizaría una función de nivel superior y claramente se beneficiaría de las funcionalidades de la arquitectura de Spectrum. Finalmente, en el entorno comercial de CDN, los proveedores (por ejemplo, Cisco y Netapp han desarrollado e implementado productos y herramientas de gestión de contenido. A diferencia de la arquitectura Spectrum que permite que los dispositivos periféricos operen de manera autónoma en gran medida, las soluciones de los proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. CONCLUSIÓN Y TRABAJOS FUTUROS En este artículo presentamos el diseño e implementación de la arquitectura de gestión de contenido Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que son conscientes del tiempo, lo que permite gestionar de manera efectiva el almacenamiento de contenido multimedia continuo. Finalmente, el diseño modular de la arquitectura Spectrum permite tanto realizaciones independientes como distribuidas para que el sistema pueda ser desplegado en una variedad de aplicaciones. Existen varios problemas abiertos que requerirán trabajo futuro. Algunos de estos problemas incluyen: • Visualizamos que Spectrum pueda gestionar contenido en sistemas que van desde grandes CDNs hasta dispositivos más pequeños como TiVO [8]. Para que estos sistemas más pequeños puedan soportar Spectrum, necesitarán de una red y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo se puede integrar en la arquitectura de Spectrum. • Spectrum nombra el contenido por URL, pero intencionalmente no hemos definido el formato de las URL de Spectrum, cómo se relacionan con el nombre real del contenido, o cómo los nombres y las URL deben presentarse al usuario. Si bien anteriormente abordamos estos temas en otro lugar [2], creemos que hay más trabajo por hacer y que se deben redactar estándares basados en consenso sobre la nomenclatura. En este documento nos hemos centrado en la gestión de contenido para objetos de medios continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero aún no hemos resuelto los detalles necesarios para admitir esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que el contenido multimedia se comparta fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. REFERENCIAS [1] K. . Cheng y Y. Kambayashi. Gestión de contenido basada en multicache para el almacenamiento en caché web. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información en la Web, junio de 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. Arquitectura PRISM: Apoyo a Servicios de Streaming Mejorados en una Red de Distribución de Contenidos. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de video digital habilitado para red. 11º Taller de la IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji y P. Shenoy. Una arquitectura de clúster de servidores de medios en streaming adaptativa a la demanda y consciente de la localidad (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Un recomendador de televisión multiagente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "carrier-grade spectrum manager": {
            "translated_key": "administrador de espectro de calidad de operador",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E.",
                "van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices.",
                "Keeping track of (or managing) such content remains challenging due to the sheer volume of data.",
                "Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with.",
                "Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system.",
                "In this paper we present the design and implementation of the Spectrum content management system, which deals with rich media content effectively in this environment.",
                "Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios.",
                "A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system.",
                "This means that there are no eviction policies.",
                "Content that no longer has a retention policy applied to it is simply removed from the system.",
                "Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication.",
                "This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content.",
                "We not only describe the details of the Spectrum architecture but also give typical use cases.",
                "Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1.",
                "INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer.",
                "Initial computing applications include text formatters and program compilers.",
                "Content was initially managed by explicit user interaction through the use of files and filesystems.",
                "As technology has advanced, both the types of content and the way people wish to use it have greatly changed.",
                "New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies.",
                "For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive.",
                "This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7].",
                "Another example is the combination of encoding and broadband networking technology.",
                "This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository.",
                "The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data.",
                "The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms.",
                "The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content.",
                "Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic.",
                "First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems.",
                "Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints.",
                "This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level.",
                "For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event.",
                "At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult.",
                "However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible.",
                "This scenario is increasingly common in network based content distribution systems and is likely to also become important in home-networking scenarios.",
                "It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed.",
                "This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences.",
                "The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general).",
                "The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content.",
                "Addressing this distributed content management problem is difficult due to the number of requirements placed on the system.",
                "For example: • The content management system must operate on a large number of heterogeneous systems.",
                "In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance.",
                "The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer.",
                "A application program interface (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies.",
                "These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded.",
                "This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams.",
                "It needs to be able to package this content in such a way that it is convenient for users to access.",
                "To address these issues we have designed and implemented the Spectrum content management system architecture.",
                "Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers.",
                "It allows multiple applications to reference content using differing policies.",
                "Note that the Spectrum architecture assumes the existence of a content distribution network (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]).",
                "The rest of this paper is organized as follows.",
                "Section 2 describes the architecture of our content management system.",
                "In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use.",
                "Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2.",
                "THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1.",
                "The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences.",
                "For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. policy manager: implements and enforces various storage polices that the content manager uses to refer to content.",
                "The policy manager exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy.",
                "Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized.",
                "It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time).",
                "A key aspect of the policy manager is that it allows different policies to be simultaneously applied to the same content (or parts of the same content).",
                "Furthermore content can only exist in the system so long as it is referenced by at least one existing policy.",
                "Policy conflicts are eliminated by having the policy manager deal exclusively with retention policies rather than with a mix of retention and eviction policies.",
                "This means that content with no policy associated with it is immediately and automatically removed from the system.",
                "This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects.",
                "Note that a key difference between the content manager and the policy manager is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content.",
                "On the other hand, the policy manager is only concerned with the policy used to manage standalone pieces of content.",
                "For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace.",
                "However, at the policy manager level, each piece of content has 5 Content Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers.",
                "Specifically the storage manager stores content in sub-object chunks.",
                "This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR.",
                "Note that the storage manager has no knowledge of the policies being used by the content and policy managers.",
                "Another unique part of our approach is that the interfaces between the layers can either be local or distributed.",
                "Figure 1 shows the four possible cases.",
                "The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box.",
                "This configuration would be used in selfcontained applications such as PVRs.",
                "The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage.",
                "In this case although the remote devices are controlled by the central manager they operate much more independently.",
                "For example, once they receive instructions from the central manager they typically operate in autonomous fashion.",
                "An example of this type of configuration is a content distribution network (CDN) that distributes and stores content based on a schedule determined by some centralized controller.",
                "For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment.",
                "Allowing a single policy manager to control several storage managers leads to the next combination of functions and the most distributed case.",
                "The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single policy manager.",
                "The final case shows a content manager combined with a policy manager controlling a remote storage manager.",
                "This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the policy manager.",
                "We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture.",
                "As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity.",
                "The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system.",
                "Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction.",
                "Once a device is mapped into the application through this interface, the system tracks its type and location.",
                "Users simply refer to the content through an application-provided label.",
                "Stores: Stores are subsets of physical storage devices.",
                "Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it.",
                "Stores can only be created in physical devices that are mapped into the system.",
                "Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content.",
                "Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy.",
                "Policy groups are created within existing stores in the system.",
                "The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage.",
                "In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time.",
                "For example, a simple time-based policy could evict content from the system at a certain absolute or relative time.",
                "A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system).",
                "Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system.",
                "Content is specified to the system by means of a uniform resource locator (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it.",
                "Optionally a time specification can be associated with content.",
                "This allows content to be fetched into the system at some future time, or at future time intervals.",
                "Again, this is particularly useful for dealing with the storage and management of live content. 2.2 Policy Manager The policy manager layer of the Spectrum architecture has two main types of API functions.",
                "First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there.",
                "Second, there are sets of functions used to implement each management policy.",
                "The first class of functions is used by the content manager layer to access storage.",
                "Operations include: create, open, and close: These operations are used by the content manager to control its access to storage.",
                "The policy managers create operation is used to establish contact with a store for the first time.",
                "Once this is done, the store can be open and closed using the appropriate routines.",
                "Note that the parameters used to create a store contain information on how to reach it.",
                "For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them.",
                "The information only needs to be passed to the policy manager once at create time.",
                "For open operations, the policy manager will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the policy manager about what content is currently present for a given URL.",
                "For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the policy manager about its current resource usage.",
                "There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference.",
                "The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store.",
                "If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available).",
                "Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy.",
                "The result of a successful pref establish operation is a policy reference ID string.",
                "This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely.",
                "The second group of policy manager functions are used to implement all the polices supported by Spectrum.",
                "We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly.",
                "Note that the policy manager is only concerned with executing a specific policy.",
                "The higher-level reasons for choosing a given policy are handled by the content and application manager.",
                "A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters.",
                "The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time.",
                "It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest.",
                "The base policy typically arranges for newclip to be called for a given URL when the pref is established.",
                "When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback.",
                "This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down.",
                "The boot operation is typically used to schedule initial callbacks or start I/O operations.",
                "The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store.",
                "Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance).",
                "For continuous media, at the storage manager level content is stored as a collection of time-based chunks.",
                "Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database.",
                "The two main storage manager operations are input and output.",
                "The input routine is used to store content in a store under a given name.",
                "The output routine is used to send data from the store to a client.",
                "For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future.",
                "Much like the policy manager, the storage manager also provides API functions to create, open, and close stores.",
                "It also supports operations to query the resource usages and options supported by the store.",
                "Finally, the storage manager also has a discard routine that may be used by the policy manager to inform the store to remove content from the store. 3.",
                "IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications.",
                "Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles.",
                "For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally.",
                "Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem.",
                "To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure.",
                "Each API call takes a pointer to a reqinfo structure as one of its arguments.",
                "This structure is used to hold the call state and return status.",
                "For async calls, the reqinfo also contains a pointer to a callback function.",
                "To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure.",
                "For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc.",
                "For async calls, a callback function must be provided when the reqinfo is allocated.",
                "Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument.",
                "For sync calls, the result of the calls is returned immediately in the reqinfo structure.",
                "For successful async calls, a call in progress value is returned.",
                "Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing.",
                "The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality.",
                "Furthermore, communication between functions is typically of a master-slave(s) nature.",
                "This means that several approaches to distributed operation are possible that would satisfy the architectural requirements.",
                "In our implementation we have opted to realize this functionality with a simple modular design.",
                "We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred.",
                "Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP.",
                "We currently are using plain TCP for most of our transport.",
                "Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML.",
                "We are currently using the eXpat XML library [4] to encode our calls.",
                "While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol.",
                "An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms.",
                "As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized.",
                "To address this issue, we treat each base-level policy as if it was a separate program.",
                "Each base-level policy should have a well known name and command line options for parameterization.",
                "In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function.",
                "This format is easily understood and provides portability since byte order is not an issue in a string.",
                "Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment.",
                "The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3].",
                "The Spectrum system is applicable to both scenarios as follows.",
                "Figure 2 shows the Network Enabled DVR (NED) architecture.",
                "In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration.",
                "The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs.",
                "This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content.",
                "Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers.",
                "The use of Spectrum in a streaming content distribution architecture (e.g.",
                "PRISM [2]) is depicted in Figure 3.",
                "In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served.",
                "In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals.",
                "The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window.",
                "To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content.",
                "The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream.",
                "As each chunk of streaming data arrives, the policy manager executes the policy references newclip function.",
                "The newclip function adds a reference to each arriving chunk, and schedules a callback a day later.",
                "At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy.",
                "Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week.",
                "To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved.",
                "Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week.",
                "After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference.",
                "After the additional week has past, the callback function for the second reference will be called.",
                "This function will discard the remaining reference to the content and as there are no remaining references the content will be freed.",
                "In order to function in scenarios like the ones described above, Spectrums policy manager must manage and maintain all the references to various chunks of media.",
                "These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted.",
                "Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure 4.",
                "There are three classes of data stored, and each class has its own top level directory.",
                "The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media.",
                "The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime.",
                "Note that this directory is used only if the storage manager is local.",
                "If the policy manager is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the policy manager. meta: this directory contains general meta information about the storage manager being used and the data it is storing.",
                "General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle.",
                "The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored.",
                "The chunks file contains a list of chunks currently stored and their reference counts.",
                "The prefs file contains a list of active policy references that point to this URL.",
                "The ranges file contains a list of time ranges of data currently stored.",
                "Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories.",
                "Each host subdirectory contains the set of policy references created by that host.",
                "Information on each policy reference is broken up into three files.",
                "For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state.",
                "The ref1 file contains information about the policy reference that does not change frequently.",
                "This information includes the base-policy and the parameters used to create the reference.",
                "The ref1.files file contains the list of references to chunks that pref ref1 owns.",
                "Finally, the ref1.state file contains optional policy-specific state information that can change over time.",
                "Together, these files and directories are used to track references in our implementation of Spectrum.",
                "Note that other implementations are possible.",
                "For example, a <br>carrier-grade spectrum manager</br> might store all its policy and reference information in a high-performance database system. 10 4.",
                "RELATED WORK Several authors have addressed the problem of the management of content in distributed networks.",
                "Much of the work focuses on the policy management aspect.",
                "For example in [5], the problem of serving multimedia content via distributed servers is considered.",
                "Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol.",
                "The performance of the scheme is benchmarked via simulation.",
                "In [1] content is distributed among sub-caches.",
                "The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge.",
                "The Cache Knowledge base allows sophisticated policies to be employed.",
                "Simulation is used to compare the proposed scheme with well-known replacement algorithms.",
                "Our work differs in that we are considering more than the policy management aspects of the problem.",
                "After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, Policy manager and Storage manager.",
                "This has allowed us to easily implement and experiment with a prototype system.",
                "Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6].",
                "In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture.",
                "Finally, in the commercial CDN environment vendors (e.g.",
                "Cisco and Netapp) have developed and implemented content management products and tools.",
                "Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5.",
                "CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture.",
                "Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage.",
                "Specifically, the system allows different policies to be applied to the same content without replication.",
                "Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content.",
                "Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications.",
                "There are a number of open issues that will require future work.",
                "Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8].",
                "In order for these smaller systems to support Spectrum they will require networking and an external API.",
                "When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user.",
                "While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects.",
                "We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance.",
                "Adapting Spectrum to meet legal requirements will likely require more technical work. 6.",
                "REFERENCES [1] K. .",
                "Cheng and Y. Kambayashi.",
                "Multicache-based Content Management for Web Caching.",
                "Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "PRISM Architecture: Supporting Enhanced Streaming Services in a Content Distribution Network.",
                "IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy.",
                "A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture.",
                "NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman.",
                "A multi-agent TV recommender.",
                "Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11"
            ],
            "original_annotated_samples": [
                "For example, a <br>carrier-grade spectrum manager</br> might store all its policy and reference information in a high-performance database system. 10 4."
            ],
            "translated_annotated_samples": [
                "Por ejemplo, un <br>administrador de espectro de calidad de operador</br> podría almacenar toda su información de políticas y referencias en un sistema de base de datos de alto rendimiento. 10 4."
            ],
            "translated_text": "Diseño e Implementación de un Sistema de Gestión de Contenido Distribuido por C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ y J.E. La convergencia de avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan y se intercambian rutinariamente entre dispositivos habilitados para redes. El seguimiento (o gestión) de dicho contenido sigue siendo un desafío debido a la gran cantidad de datos. Almacenar medios continuos en vivo (como contenido de televisión o radio) aumenta la complejidad debido a que este contenido no tiene un inicio o fin bien definido y, por lo tanto, resulta engorroso de manejar. El almacenamiento en red permite que el contenido que se ve lógicamente como parte de la misma colección esté distribuido en una red, lo que hace que la gestión de contenido sea casi imposible de manejar sin un sistema de gestión de contenido. En este documento presentamos el diseño e implementación del sistema de gestión de contenido Spectrum, que maneja de manera efectiva el contenido de medios enriquecidos en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto en escenarios independientes como en diferentes entornos de red. Un aspecto único de Spectrum es que requiere que se aplique una (o más) políticas de retención a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido al que ya no se le aplica una política de retención simplemente se elimina del sistema. Diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo, que son bloques de construcción básicos necesarios para manejar el almacenamiento de medios continuos en vivo, al contenido. No solo describimos los detalles de la arquitectura del Spectrum, sino que también proporcionamos casos de uso típicos. Categorías y Descriptores de Asignaturas C.2.4 [Organización de Sistemas Informáticos]: Redes de comunicación informática-sistemas distribuidos; H.3.4 [Sistemas de Información]: Almacenamiento de información y recuperación-sistemas y software Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar contenido es y siempre ha sido una de las funciones principales de una computadora. Las aplicaciones iniciales de computación incluyen formateadores de texto y compiladores de programas. El contenido era gestionado inicialmente mediante la interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que las personas desean utilizarlo han cambiado considerablemente. Nuevos tipos de contenido, como las transmisiones multimedia continuas, se han vuelto comunes debido a la convergencia de avances en tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de video codificado de calidad televisiva en un solo disco duro. Esto ha llevado a la introducción de sistemas de grabación de video digital independientes o personales, como TiVO y ReplayTV. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas, con la red misma actuando como un gran repositorio de datos. La proliferación de contenido de alta calidad habilitada por estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. El enfoque de nuestro trabajo se centra en el almacenamiento de contenido multimedia y, en particular, en el almacenamiento de contenido multimedia continuo en forma preempaquetada o en vivo. La necesidad de gestión de contenido en esta área es evidente cuando se considera lo siguiente: • Los aumentos en la capacidad y las disminuciones en el costo de almacenamiento significan que incluso los sistemas de escritorio modestos de hoy tienen la capacidad de almacenar grandes cantidades de contenido. La gestión manual de dicho contenido (o más correctamente, la falta de gestión manual de dicho contenido) conduce a grandes ineficiencias donde el contenido no deseado y olvidado se acumula y donde el contenido deseado no se puede encontrar. • Aunque es cierto para todos los tipos de contenido, el almacenamiento de contenido de medios continuos es especialmente problemático. El primer contenido de medios continuos sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque sin política para almacenarlo no funcionará para todos, excepto para los sistemas más pequeños. Segundo, el almacenamiento de contenido en vivo como la televisión o la radio es inherentemente problemático ya que estas señales son flujos continuos sin puntos finales. Esto significa que antes de siquiera pensar en gestionar dicho contenido, es necesario abstraerlo en algo que pueda ser manipulado y gestionado. Al tratar con medios continuos almacenados, es necesario gestionar dicho contenido tanto a un nivel detallado como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar solo los momentos destacados de un evento deportivo en particular no debería estar obligado a tener que almacenar el contenido relacionado con todo el evento. Al mismo tiempo, el usuario podría querer considerar el contenido en su totalidad, por ejemplo, eliminar todo el contenido que no he visto en el último mes, excepto aquel contenido que fue marcado explícitamente para archivar. • Como se indicó anteriormente, tratar de mantener un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenido es muy difícil. Sin embargo, cuando los dispositivos de almacenamiento reales están distribuidos en una red, la tarea de llevar un registro del contenido es casi imposible. Este escenario es cada vez más común en sistemas de distribución de contenido basados en redes y es probable que también cobre importancia en escenarios de redes domésticas. Parecería claro entonces que se necesita un sistema de gestión de contenido que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que aproveche la capacidad de almacenamiento en red de los dispositivos. Este sistema debería permitir el almacenamiento eficiente y el acceso al contenido en dispositivos de almacenamiento de red heterogéneos de acuerdo a las preferencias del usuario. El sistema de gestión de contenido debe traducir las preferencias del usuario en políticas de almacenamiento de bajo nivel apropiadas y permitir que esas preferencias se expresen a un nivel de granularidad fino (sin requerirlo en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar sobre (es decir, cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenido distribuido es difícil debido a la cantidad de requisitos impuestos en el sistema. Por ejemplo: • El sistema de gestión de contenidos debe operar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando contenido almacenado en un sistema de archivos local, mientras que en otros el contenido puede estar almacenado en un dispositivo de almacenamiento de red separado. El administrador de contenido puede ser responsable de implementar las políticas que utiliza para hacer referencia al contenido o ese rol puede ser delegado a un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. El sistema de gestión de contenidos debe ser flexible y capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe ser obtenido, cuándo debe ser recuperado, cuánto tiempo debe ser retenido y en qué circunstancias debe ser descartado. Esto significa que el sistema de gestión de contenido debe permitir que múltiples aplicaciones hagan referencia al contenido con un conjunto amplio de políticas y que todo funcione de manera integrada. • El sistema de gestión de contenido debe ser capaz de monitorear las referencias al contenido y utilizar esa información para ubicar el contenido en la ubicación correcta en la red para un acceso eficiente de las aplicaciones. • El sistema de gestión de contenido debe manejar la interacción entre la población implícita y explícita del contenido en el borde de la red. • El sistema de contenido debe ser capaz de gestionar eficientemente grandes conjuntos de contenido, incluidos flujos continuos. Debe ser capaz de empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas, hemos diseñado e implementado la arquitectura del sistema de gestión de contenido Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan ya sea en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite que múltiples aplicaciones hagan referencia al contenido utilizando políticas diferentes. Se debe tener en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenido (CDN) que puede facilitar la distribución eficiente de contenido (por ejemplo, la arquitectura CDN PRISM [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. El trabajo relacionado se describe en la Sección 4, y la Sección 5 contiene nuestra conclusión y sugerencias para trabajos futuros. 2. La arquitectura del sistema de gestión de contenido distribuido Spectrum consta de tres capas de gestión distintas que pueden o no estar distribuidas en múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todo el contenido de una aplicación según las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de video personal (PVR), el administrador de contenido recibe solicitudes de contenido desde una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y gestionar contenido en el dispositivo. El administrador de políticas implementa y hace cumplir varias políticas de almacenamiento que el administrador de contenido utiliza para hacer referencia al contenido. El gestor de políticas exporta una interfaz al gestor de contenido que le permite al gestor de contenido solicitar que un contenido sea tratado de acuerdo con una política específica. Spectrum permite que se realicen políticas arbitrarias al proporcionar un conjunto fijo de plantillas de políticas base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (de lo contrario, Spectrum se puede extender fácilmente para cargar dinámicamente nuevo código de plantilla de política base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido solo puede existir en el sistema siempre y cuando esté referenciado por al menos una política existente. Los conflictos de políticas se eliminan al hacer que el administrador de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin política asociada se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar de forma natural el intercambio de contenido entre diferentes políticas, lo cual es fundamental para el almacenamiento eficiente de objetos grandes. Ten en cuenta que una diferencia clave entre el gestor de contenido y el gestor de políticas es que el gestor de contenido gestiona referencias a múltiples piezas de contenido, es decir, tiene una vista de aplicación del contenido. Por otro lado, el gerente de políticas solo se preocupa por la política utilizada para gestionar piezas de contenido independientes. Por ejemplo, en una aplicación de PVR, la capa del gestor de contenido conocería los diferentes grupos de contenido gestionado, como mantener indefinidamente, mantener por un día y mantener si hay espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada pieza de contenido tiene su propia política (o políticas) aplicada a ella y es independiente de otro contenido. El gestor de almacenamiento: almacena contenido de manera eficiente mientras facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento guarda el contenido en fragmentos de subobjetos. Este enfoque tiene ventajas para la recuperación eficiente de contenido, pero lo más importante es que permite aplicar políticas a nivel de subobjeto, lo cual es críticamente importante al tratar con objetos muy grandes como partes de medios continuos, por ejemplo, piezas seleccionadas de contenido de televisión almacenadas en un PVR. Ten en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas que están siendo utilizadas por los gestores de contenido y de políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la figura muestra el caso más simple (no distribuido) donde todas las capas están implementadas en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como los PVRs. El siguiente caso corresponde al caso en el que hay un gestor de contenido centralizado que controla dispositivos de almacenamiento distribuido, cada uno de los cuales es responsable de implementar almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, operan de manera mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, típicamente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido según un horario determinado por algún controlador centralizado. Por ejemplo, la CDN podría precargar dispositivos periféricos con contenido que se espera que sea muy popular o distribuir archivos grandes a sucursales durante las horas de menor tráfico en un entorno empresarial con limitaciones de ancho de banda. Permitir que un único administrador de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y al caso más distribuido. La necesidad de este tipo de separación puede surgir por razones de escalabilidad o cuando se requiere controlar diferentes dispositivos de almacenamiento especializados con un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas controlando un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo detallado por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de Contenidos La capa del gestor de contenidos es la interfaz principal a través de la cual las aplicaciones específicas utilizan la arquitectura Spectrum. Por lo tanto, la capa del gestor de contenido proporciona una API para que la aplicación pueda manipular todos los aspectos de la arquitectura de Spectrum en diferentes niveles de granularidad. La API del gestor de contenido tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite agregar dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo el control del gestor de contenido y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos; este es el único lugar en la arquitectura donde la aplicación debe ser consciente de esta distinción. Una vez que un dispositivo es mapeado en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Almacenes: Los almacenes son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (por ejemplo, espacio en disco) a la misma. Las tiendas solo se pueden crear en dispositivos físicos que estén mapeados en el sistema. Grupos de Políticas: Los grupos de políticas son el medio por el cual una aplicación especifica, instancia y modifica las políticas que se aplican al contenido del Espectro. El uso típico de este conjunto de funciones es seleccionar una de un pequeño conjunto de políticas base y parametrizar esta instancia específica de la política. Los grupos de políticas se crean dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento y que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que incluyen una especificación de tiempo sofisticada permiten un almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría expulsar el contenido del sistema en un momento absoluto o relativo específico. Una política basada en el tiempo un poco más compleja habilitada por la arquitectura Spectrum podría permitir que el contenido se almacene en una ventana de tiempo de un número de horas (por ejemplo, las N horas más recientes se mantienen en el sistema). Las políticas basadas en el tiempo son de particular utilidad al tratar con contenido continuo como una transmisión en vivo. 6 Contenido: En el nivel más fino de granularidad, el contenido puede ser añadido o eliminado del sistema. El contenido se especifica al sistema mediante un localizador uniforme de recursos (URL) que indica de manera concisa la ubicación del contenido, así como el protocolo a utilizar para recuperarlo. Opcionalmente se puede asociar una especificación de tiempo con el contenido. Esto permite que el contenido sea recuperado en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Nuevamente, esto es particularmente útil para tratar con el almacenamiento y gestión de contenido en vivo. 2.2 Gestor de Políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones de API. Primero, hay funciones que operan en áreas de almacenamiento gestionadas y referencias basadas en políticas (prefs) al contenido almacenado allí. Segundo, hay conjuntos de funciones utilizadas para implementar cada política de gestión. La primera clase de funciones es utilizada por la capa de gestión de contenido para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar. Estas operaciones son utilizadas por el gestor de contenido para controlar su acceso al almacenamiento. El proceso de creación de políticas de gestión de operaciones se utiliza para establecer contacto con una tienda por primera vez. Una vez que esto se haya hecho, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Ten en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información solo necesita ser transmitida al administrador de políticas una vez al momento de la creación. Para operaciones abiertas, el administrador de políticas utilizará la información en caché para contactar a la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el administrador de contenido consulte al administrador de políticas sobre qué contenido está actualmente presente para una URL dada. Para medios continuos, se devolverán rangos de tiempo de medios presentes. recurso: Las rutinas de recurso se utilizan para consultar al administrador de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su totalidad y otra que se aplica a una referencia de política en particular. La API de recursos es extensible, actualmente admitimos consultas sobre el uso de disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer se utiliza por el gestor de contenido para hacer referencia al contenido en la tienda. Si el contenido no está presente, esta llamada resultará en la obtención del contenido (o en la programación para obtenerlo si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL donde se almacenará, la URL desde la cual se obtendrán los datos si no están presentes, la política para almacenar el contenido y los argumentos utilizados para parametrizar la política. El resultado de una operación de establecimiento de prefijo exitosa es una cadena de identificación de referencia de política. Este identificador se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones del gestor de políticas se utilizan para implementar todas las políticas respaldadas por Spectrum. Visualizamos un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitiva puede ser parametrizada para funcionar diariamente, semanalmente o mensualmente. Ten en cuenta que el gestor de políticas solo se preocupa por ejecutar una política específica. Las razones de nivel superior para elegir una política determinada son manejadas por el gerente de contenido y aplicación. Una política base se implementa utilizando seis funciones: establecer: se llama cuando se establece una preferencia con las URL requeridas y los parámetros de la política base. El rutina establecida hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar acción (por ejemplo, iniciar una descarga) y programa una devolución de llamada para ese momento. También puede registrarse para recibir devoluciones de llamada si se recibe nuevo contenido para una URL específica. actualizar: se llama para cambiar los parámetros de una preferencia, o para descartar la referencia de la política. newclip: se llama cuando se recibe un fragmento de nuevo contenido para una URL de interés. La política base normalmente establece que se llame a newclip para una URL dada cuando se establece la preferencia. Cuando se llama a newclip, la política base verifica sus parámetros para determinar si desea agregar una referencia al clip recién recibido. callback: llamado cuando la preferencia programa una devolución de llamada basada en temporizador. Este es un mecanismo útil de activación para preferencias que necesitan estar inactivas durante un largo período de tiempo (por ejemplo, entre programas). arranque/apagado: se llama cuando el sistema de gestión de contenidos se está iniciando o apagando. La operación de arranque se utiliza típicamente para programar devoluciones de llamada iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para cerrar de forma ordenada los flujos de entrada/salida y guardar el estado. 2.3 Gestor de almacenamiento El rol del gestor de almacenamiento de Spectrum es controlar todas las operaciones de entrada/salida asociadas con una tienda dada. El gestor de almacenamiento de Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo, un dispositivo de almacenamiento). Para los medios continuos, a nivel del gestor de almacenamiento, el contenido se almacena como una colección de fragmentos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un fragmento podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión en continuo, tanto las rutinas de entrada como de salida toman rangos de tiempo que programan cuándo debe ocurrir la operación de E/S, y ambas rutinas devuelven un identificador de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el administrador de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar almacenes. También admite operaciones para consultar los usos de recursos y opciones admitidas por la tienda. Finalmente, el administrador de almacenamiento también tiene un procedimiento de descarte que puede ser utilizado por el administrador de políticas para informar a la tienda que elimine contenido de la tienda. 3. IMPLEMENTACIÓN Y CASOS DE USO En esta sección describimos nuestra implementación de Spectrum y cómo puede ser utilizada. 3.1 Implementación Hemos implementado las tres capas de Spectrum en C como parte de una biblioteca que puede ser enlazada con aplicaciones basadas en Spectrum. Cada capa lleva un registro de su estado a través de un conjunto de archivos de datos locales que persisten a través de reinicios, lo que permite a Spectrum manejar los ciclos de energía de manera fluida. Para las capas que residen en sistemas remotos (por ejemplo, una tienda remota), solo se almacena localmente la meta-información necesaria para contactar al administrador de políticas del gestor de contenido remoto, el gestor de almacenamiento, el recuperador de almacenamiento, los listados de programas, la interfaz de usuario gráfica, el DVR habilitado para red, la información del programa, la aplicación de DVR de contenido en la red habilitada para DVR. Figura 2: Espectro en un nodo de DVR habilitado para red. Nuestra aplicación de prueba utiliza un administrador de políticas y almacenamiento local para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficientemente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas de API de Spectrums admiten tanto modos síncronos como asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada a la API toma un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de la llamada y el estado de retorno. Para las llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamada. Para utilizar una función de la API de Spectrum, el llamante primero elige entre el modo sincrónico o asincrónico y asigna una estructura reqinfo. Para llamadas de sincronización, la reqinfo puede ser asignada en la pila, de lo contrario se asigna con malloc. Para llamadas asíncronas, se debe proporcionar una función de devolución de llamada al asignar el reqinfo. A continuación, el llamante invoca la función API de Spectrum deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas asincrónicas exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada asíncrona se completa o se produce un tiempo de espera, se llama a la función de devolución de llamada asíncrona con la información adecuada necesaria para completar el procesamiento. El diseño modular/capas de la arquitectura Spectrum simplifica el objetivo de distribución de funcionalidad. Además, la comunicación entre funciones suele ser de naturaleza maestro-esclavo(s). Esto significa que son posibles varios enfoques para la operación distribuida que cumplirían con los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un diseño modular simple. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y elegir el método de codificación que se debe utilizar con los datos a transferir. Los protocolos de transporte pueden variar desde protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP simple para la mayoría de nuestro transporte. Las llamadas a funciones a través de las diferentes APIs de Spectrum pueden ser codificadas utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos utilizando la biblioteca XML eXpat [4] para codificar nuestras llamadas. Mientras actualmente estamos transfiriendo nuestros mensajes codificados en XML utilizando una conexión TCP simple, en un entorno del mundo real esto puede ser fácilmente reemplazado con una implementación basada en capa de sockets seguros (SSL) para mejorar la seguridad al agregar SSL como protocolo de transporte. Un aspecto importante de Spectrum es que puede gestionar contenido basado en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la Sección 2.2, imagina un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben comprender las políticas de nivel base y cómo pueden ser parametrizadas. Para abordar este problema, tratamos cada política de nivel base como si fuera un programa separado. Cada política de nivel base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada utilizando una función similar a getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de los bytes no es un problema en una cadena. Dado que esta parte de Spectrum no se encuentra en la ruta crítica de los datos, este tipo de formato no representa un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos de Spectrum En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos de Spectrum en nuestro entorno. El enfoque de nuestro trabajo anterior ha sido la distribución de contenido para contenido de medios en streaming [2] y la grabación de video digital habilitada para redes [3]. El sistema Spectrum es aplicable a ambos escenarios de la siguiente manera. La Figura 2 muestra la arquitectura del DVR habilitado para red (NED). En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación de DVR obtiene listados de programas de alguna fuente de red, maneja la presentación al usuario a través de una interfaz gráfica de usuario (GUI) e interactúa con el sistema Spectrum a través de las APIs de la capa de gestión de contenido. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento que se aplicarán a dicho contenido. La obtención del contenido (a través de la red o localmente) y su posterior almacenamiento en el sistema local son manejados por los gestores de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenido en streaming (por ejemplo, PRISM [2]) está representado en la Figura 3. En este entorno, el contenido de medios en streaming (tanto en vivo, enlatado en vivo y a la carta) se distribuye a los portales periféricos desde donde se sirven los puntos finales de streaming. En nuestro entorno, la distribución y almacenamiento de contenido se realiza desde una estación centralizada de gestión de contenido que controla varios de los portales periféricos. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenido sin necesidad de una comunicación continua entre el gestor de contenido y los dispositivos periféricos, es decir, una vez que se han dado instrucciones a los dispositivos periféricos, pueden operar de forma independiente hasta que se deban realizar cambios. Ejemplo operativo de Spectrum 3.3 Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación de PVR basada en Spectrum programada para almacenar un día de contenido de transmisión en una ventana móvil. Para configurar la ventana deslizante, la aplicación utilizaría la API del gestor de contenido para crear un grupo de políticas y una referencia de política al contenido deseado. El establecimiento de la política de ventana de un día en movimiento haría que el gerente de políticas le pida al gerente de almacenamiento que comience a recibir el flujo. A medida que llega cada fragmento de datos en streaming, el gestor de políticas ejecuta la función newclip de las referencias de política. La función newclip agrega una referencia a cada fragmento que llega y programa una devolución de llamada para un día después. En ese momento, la política eliminará su referencia actual de un día al contenido y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considera el caso en el que el usuario decide guardar parte del contenido (por ejemplo, un programa específico) en la ventana deslizante durante una semana adicional. Para hacer esto, la aplicación solicita que el gestor de contenido agregue una nueva referencia de política adicional a la parte del contenido que se va a preservar. Por lo tanto, el contenido preservado tiene dos referencias: una del marco de tiempo móvil y otra de la solicitud de preservar el contenido por una semana adicional. Después de un día, la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. datos base url1 url2 (archivos multimedia...) (archivos multimedia...) almacenamiento de metadatos (información general...) url1 fragmentos preferencias rangos fragmentos multimedia, etc. url2 host poli ref1 ref1.archivos ref1.estado Figura 4: Diseño de datos de la tienda de políticas de Spectrum preservado por la segunda referencia. Después de que haya transcurrido la semana adicional, se llamará a la función de devolución de llamada para la segunda referencia. Esta función descartará la referencia restante al contenido y, como no hay referencias restantes, el contenido será liberado. Para poder funcionar en escenarios como los descritos anteriormente, el gestor de políticas de Spectrums debe administrar y mantener todas las referencias a diferentes fragmentos de medios. Estas referencias son persistentes y, por lo tanto, deben poder sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestro implementación del gestor de políticas de Spectrum logra esto utilizando la estructura de archivos y directorios mostrada en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el gestor de almacenamiento para almacenar los fragmentos de medios de cada URL activa. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Ten en cuenta que este directorio se utiliza solo si el gestor de almacenamiento es local. Si el administrador de políticas está utilizando un administrador de almacenamiento externo (por ejemplo, un dispositivo de almacenamiento), entonces los archivos multimedia se almacenan de forma remota y solo son referenciados de forma remota por el administrador de políticas. meta: este directorio contiene información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) y la información sobre los tipos de fragmentos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los fragmentos de datos almacenados. El archivo de fragmentos contiene una lista de fragmentos almacenados actualmente y sus recuentos de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de intervalos de tiempo de los datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato del medio que se está almacenando bajo la URL actual. poly: este directorio contiene un conjunto de subdirectorios de host. Cada subdirectorio de host contiene el conjunto de referencias de políticas creadas por ese host. La información de cada referencia de política está dividida en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files y ref1.state. El archivo ref1 contiene información sobre la referencia de la política que no cambia con frecuencia. Esta información incluye la política base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a fragmentos que posee el prefijo ref1. Finalmente, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Ten en cuenta que otras implementaciones son posibles. Por ejemplo, un <br>administrador de espectro de calidad de operador</br> podría almacenar toda su información de políticas y referencias en un sistema de base de datos de alto rendimiento. 10 4. TRABAJO RELACIONADO Varios autores han abordado el problema de la gestión de contenido en redes distribuidas. Gran parte del trabajo se centra en el aspecto de gestión de políticas. Por ejemplo, en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda del usuario utilizando un Protocolo de Diseminación de Demanda. El rendimiento del esquema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Enrutador Central, una Base de Conocimiento en Caché, Subcachés y un juez de expulsión de Subcaché. La base de conocimientos de caché permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenido en el entorno de red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenido, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de televisión que se utilizan en los PVR para seleccionar automáticamente contenido para los usuarios, por ejemplo [6]. En el caso de que Spectrum se utilice en una configuración de PVR, este tipo de sistema realizaría una función de nivel superior y claramente se beneficiaría de las funcionalidades de la arquitectura de Spectrum. Finalmente, en el entorno comercial de CDN, los proveedores (por ejemplo, Cisco y Netapp han desarrollado e implementado productos y herramientas de gestión de contenido. A diferencia de la arquitectura Spectrum que permite que los dispositivos periféricos operen de manera autónoma en gran medida, las soluciones de los proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. CONCLUSIÓN Y TRABAJOS FUTUROS En este artículo presentamos el diseño e implementación de la arquitectura de gestión de contenido Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que son conscientes del tiempo, lo que permite gestionar de manera efectiva el almacenamiento de contenido multimedia continuo. Finalmente, el diseño modular de la arquitectura Spectrum permite tanto realizaciones independientes como distribuidas para que el sistema pueda ser desplegado en una variedad de aplicaciones. Existen varios problemas abiertos que requerirán trabajo futuro. Algunos de estos problemas incluyen: • Visualizamos que Spectrum pueda gestionar contenido en sistemas que van desde grandes CDNs hasta dispositivos más pequeños como TiVO [8]. Para que estos sistemas más pequeños puedan soportar Spectrum, necesitarán de una red y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo se puede integrar en la arquitectura de Spectrum. • Spectrum nombra el contenido por URL, pero intencionalmente no hemos definido el formato de las URL de Spectrum, cómo se relacionan con el nombre real del contenido, o cómo los nombres y las URL deben presentarse al usuario. Si bien anteriormente abordamos estos temas en otro lugar [2], creemos que hay más trabajo por hacer y que se deben redactar estándares basados en consenso sobre la nomenclatura. En este documento nos hemos centrado en la gestión de contenido para objetos de medios continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero aún no hemos resuelto los detalles necesarios para admitir esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que el contenido multimedia se comparta fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. REFERENCIAS [1] K. . Cheng y Y. Kambayashi. Gestión de contenido basada en multicache para el almacenamiento en caché web. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información en la Web, junio de 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. Arquitectura PRISM: Apoyo a Servicios de Streaming Mejorados en una Red de Distribución de Contenidos. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de video digital habilitado para red. 11º Taller de la IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji y P. Shenoy. Una arquitectura de clúster de servidores de medios en streaming adaptativa a la demanda y consciente de la localidad (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Un recomendador de televisión multiagente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "distribute content management": {
            "translated_key": "gestionar la distribución de contenido",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E.",
                "van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices.",
                "Keeping track of (or managing) such content remains challenging due to the sheer volume of data.",
                "Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with.",
                "Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system.",
                "In this paper we present the design and implementation of the Spectrum content management system, which deals with rich media content effectively in this environment.",
                "Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios.",
                "A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system.",
                "This means that there are no eviction policies.",
                "Content that no longer has a retention policy applied to it is simply removed from the system.",
                "Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication.",
                "This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content.",
                "We not only describe the details of the Spectrum architecture but also give typical use cases.",
                "Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1.",
                "INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer.",
                "Initial computing applications include text formatters and program compilers.",
                "Content was initially managed by explicit user interaction through the use of files and filesystems.",
                "As technology has advanced, both the types of content and the way people wish to use it have greatly changed.",
                "New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies.",
                "For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive.",
                "This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7].",
                "Another example is the combination of encoding and broadband networking technology.",
                "This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository.",
                "The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data.",
                "The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms.",
                "The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content.",
                "Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic.",
                "First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems.",
                "Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints.",
                "This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level.",
                "For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event.",
                "At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult.",
                "However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible.",
                "This scenario is increasingly common in network based content distribution systems and is likely to also become important in home-networking scenarios.",
                "It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed.",
                "This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences.",
                "The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general).",
                "The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content.",
                "Addressing this distributed content management problem is difficult due to the number of requirements placed on the system.",
                "For example: • The content management system must operate on a large number of heterogeneous systems.",
                "In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance.",
                "The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer.",
                "A application program interface (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies.",
                "These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded.",
                "This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams.",
                "It needs to be able to package this content in such a way that it is convenient for users to access.",
                "To address these issues we have designed and implemented the Spectrum content management system architecture.",
                "Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers.",
                "It allows multiple applications to reference content using differing policies.",
                "Note that the Spectrum architecture assumes the existence of a content distribution network (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]).",
                "The rest of this paper is organized as follows.",
                "Section 2 describes the architecture of our content management system.",
                "In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use.",
                "Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2.",
                "THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1.",
                "The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences.",
                "For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. policy manager: implements and enforces various storage polices that the content manager uses to refer to content.",
                "The policy manager exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy.",
                "Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized.",
                "It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time).",
                "A key aspect of the policy manager is that it allows different policies to be simultaneously applied to the same content (or parts of the same content).",
                "Furthermore content can only exist in the system so long as it is referenced by at least one existing policy.",
                "Policy conflicts are eliminated by having the policy manager deal exclusively with retention policies rather than with a mix of retention and eviction policies.",
                "This means that content with no policy associated with it is immediately and automatically removed from the system.",
                "This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects.",
                "Note that a key difference between the content manager and the policy manager is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content.",
                "On the other hand, the policy manager is only concerned with the policy used to manage standalone pieces of content.",
                "For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace.",
                "However, at the policy manager level, each piece of content has 5 Content Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers.",
                "Specifically the storage manager stores content in sub-object chunks.",
                "This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR.",
                "Note that the storage manager has no knowledge of the policies being used by the content and policy managers.",
                "Another unique part of our approach is that the interfaces between the layers can either be local or distributed.",
                "Figure 1 shows the four possible cases.",
                "The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box.",
                "This configuration would be used in selfcontained applications such as PVRs.",
                "The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage.",
                "In this case although the remote devices are controlled by the central manager they operate much more independently.",
                "For example, once they receive instructions from the central manager they typically operate in autonomous fashion.",
                "An example of this type of configuration is a content distribution network (CDN) that distributes and stores content based on a schedule determined by some centralized controller.",
                "For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment.",
                "Allowing a single policy manager to control several storage managers leads to the next combination of functions and the most distributed case.",
                "The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single policy manager.",
                "The final case shows a content manager combined with a policy manager controlling a remote storage manager.",
                "This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the policy manager.",
                "We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture.",
                "As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity.",
                "The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system.",
                "Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction.",
                "Once a device is mapped into the application through this interface, the system tracks its type and location.",
                "Users simply refer to the content through an application-provided label.",
                "Stores: Stores are subsets of physical storage devices.",
                "Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it.",
                "Stores can only be created in physical devices that are mapped into the system.",
                "Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content.",
                "Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy.",
                "Policy groups are created within existing stores in the system.",
                "The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage.",
                "In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time.",
                "For example, a simple time-based policy could evict content from the system at a certain absolute or relative time.",
                "A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system).",
                "Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system.",
                "Content is specified to the system by means of a uniform resource locator (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it.",
                "Optionally a time specification can be associated with content.",
                "This allows content to be fetched into the system at some future time, or at future time intervals.",
                "Again, this is particularly useful for dealing with the storage and management of live content. 2.2 Policy Manager The policy manager layer of the Spectrum architecture has two main types of API functions.",
                "First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there.",
                "Second, there are sets of functions used to implement each management policy.",
                "The first class of functions is used by the content manager layer to access storage.",
                "Operations include: create, open, and close: These operations are used by the content manager to control its access to storage.",
                "The policy managers create operation is used to establish contact with a store for the first time.",
                "Once this is done, the store can be open and closed using the appropriate routines.",
                "Note that the parameters used to create a store contain information on how to reach it.",
                "For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them.",
                "The information only needs to be passed to the policy manager once at create time.",
                "For open operations, the policy manager will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the policy manager about what content is currently present for a given URL.",
                "For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the policy manager about its current resource usage.",
                "There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference.",
                "The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store.",
                "If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available).",
                "Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy.",
                "The result of a successful pref establish operation is a policy reference ID string.",
                "This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely.",
                "The second group of policy manager functions are used to implement all the polices supported by Spectrum.",
                "We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly.",
                "Note that the policy manager is only concerned with executing a specific policy.",
                "The higher-level reasons for choosing a given policy are handled by the content and application manager.",
                "A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters.",
                "The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time.",
                "It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest.",
                "The base policy typically arranges for newclip to be called for a given URL when the pref is established.",
                "When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback.",
                "This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down.",
                "The boot operation is typically used to schedule initial callbacks or start I/O operations.",
                "The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store.",
                "Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance).",
                "For continuous media, at the storage manager level content is stored as a collection of time-based chunks.",
                "Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database.",
                "The two main storage manager operations are input and output.",
                "The input routine is used to store content in a store under a given name.",
                "The output routine is used to send data from the store to a client.",
                "For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future.",
                "Much like the policy manager, the storage manager also provides API functions to create, open, and close stores.",
                "It also supports operations to query the resource usages and options supported by the store.",
                "Finally, the storage manager also has a discard routine that may be used by the policy manager to inform the store to remove content from the store. 3.",
                "IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications.",
                "Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles.",
                "For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally.",
                "Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem.",
                "To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure.",
                "Each API call takes a pointer to a reqinfo structure as one of its arguments.",
                "This structure is used to hold the call state and return status.",
                "For async calls, the reqinfo also contains a pointer to a callback function.",
                "To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure.",
                "For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc.",
                "For async calls, a callback function must be provided when the reqinfo is allocated.",
                "Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument.",
                "For sync calls, the result of the calls is returned immediately in the reqinfo structure.",
                "For successful async calls, a call in progress value is returned.",
                "Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing.",
                "The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality.",
                "Furthermore, communication between functions is typically of a master-slave(s) nature.",
                "This means that several approaches to distributed operation are possible that would satisfy the architectural requirements.",
                "In our implementation we have opted to realize this functionality with a simple modular design.",
                "We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred.",
                "Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP.",
                "We currently are using plain TCP for most of our transport.",
                "Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML.",
                "We are currently using the eXpat XML library [4] to encode our calls.",
                "While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol.",
                "An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms.",
                "As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices.",
                "In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized.",
                "To address this issue, we treat each base-level policy as if it was a separate program.",
                "Each base-level policy should have a well known name and command line options for parameterization.",
                "In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function.",
                "This format is easily understood and provides portability since byte order is not an issue in a string.",
                "Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment.",
                "The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3].",
                "The Spectrum system is applicable to both scenarios as follows.",
                "Figure 2 shows the Network Enabled DVR (NED) architecture.",
                "In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration.",
                "The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs.",
                "This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content.",
                "Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers.",
                "The use of Spectrum in a streaming content distribution architecture (e.g.",
                "PRISM [2]) is depicted in Figure 3.",
                "In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served.",
                "In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals.",
                "The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window.",
                "To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content.",
                "The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream.",
                "As each chunk of streaming data arrives, the policy manager executes the policy references newclip function.",
                "The newclip function adds a reference to each arriving chunk, and schedules a callback a day later.",
                "At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy.",
                "Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week.",
                "To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved.",
                "Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week.",
                "After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference.",
                "After the additional week has past, the callback function for the second reference will be called.",
                "This function will discard the remaining reference to the content and as there are no remaining references the content will be freed.",
                "In order to function in scenarios like the ones described above, Spectrums policy manager must manage and maintain all the references to various chunks of media.",
                "These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted.",
                "Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure 4.",
                "There are three classes of data stored, and each class has its own top level directory.",
                "The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media.",
                "The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime.",
                "Note that this directory is used only if the storage manager is local.",
                "If the policy manager is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the policy manager. meta: this directory contains general meta information about the storage manager being used and the data it is storing.",
                "General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle.",
                "The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored.",
                "The chunks file contains a list of chunks currently stored and their reference counts.",
                "The prefs file contains a list of active policy references that point to this URL.",
                "The ranges file contains a list of time ranges of data currently stored.",
                "Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories.",
                "Each host subdirectory contains the set of policy references created by that host.",
                "Information on each policy reference is broken up into three files.",
                "For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state.",
                "The ref1 file contains information about the policy reference that does not change frequently.",
                "This information includes the base-policy and the parameters used to create the reference.",
                "The ref1.files file contains the list of references to chunks that pref ref1 owns.",
                "Finally, the ref1.state file contains optional policy-specific state information that can change over time.",
                "Together, these files and directories are used to track references in our implementation of Spectrum.",
                "Note that other implementations are possible.",
                "For example, a carrier-grade Spectrum manager might store all its policy and reference information in a high-performance database system. 10 4.",
                "RELATED WORK Several authors have addressed the problem of the management of content in distributed networks.",
                "Much of the work focuses on the policy management aspect.",
                "For example in [5], the problem of serving multimedia content via distributed servers is considered.",
                "Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol.",
                "The performance of the scheme is benchmarked via simulation.",
                "In [1] content is distributed among sub-caches.",
                "The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge.",
                "The Cache Knowledge base allows sophisticated policies to be employed.",
                "Simulation is used to compare the proposed scheme with well-known replacement algorithms.",
                "Our work differs in that we are considering more than the policy management aspects of the problem.",
                "After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, Policy manager and Storage manager.",
                "This has allowed us to easily implement and experiment with a prototype system.",
                "Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6].",
                "In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture.",
                "Finally, in the commercial CDN environment vendors (e.g.",
                "Cisco and Netapp) have developed and implemented content management products and tools.",
                "Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5.",
                "CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture.",
                "Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage.",
                "Specifically, the system allows different policies to be applied to the same content without replication.",
                "Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content.",
                "Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications.",
                "There are a number of open issues that will require future work.",
                "Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8].",
                "In order for these smaller systems to support Spectrum they will require networking and an external API.",
                "When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user.",
                "While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects.",
                "We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance.",
                "Adapting Spectrum to meet legal requirements will likely require more technical work. 6.",
                "REFERENCES [1] K. .",
                "Cheng and Y. Kambayashi.",
                "Multicache-based Content Management for Web Caching.",
                "Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "PRISM Architecture: Supporting Enhanced Streaming Services in a Content Distribution Network.",
                "IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe.",
                "NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy.",
                "A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture.",
                "NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman.",
                "A multi-agent TV recommender.",
                "Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        }
    }
}