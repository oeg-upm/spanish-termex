{
    "id": "I-5",
    "original_text": "Towards Self-organising Agent-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation. These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments. In this paper we propose a distributed algorithm that solves the resource allocation problem in distributed multiagent systems. Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer. The resource allocation in the system is a purely emergent effect. We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment. Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1. INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks. In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks. It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources. Hence, distributed solutions of the resource allocation problem are required. Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation. A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets. Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9]. Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22]. In this paper we propose a distributed solution of the resource allocation problem based on self-organisation of the resource consumers in a system with limited resources. In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources. In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation. All control needed for our algorithm is distributed among the agents in the system. They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions. The only information available to all agents are resource load and allocation success information from past resource allocations. Additional resource load information about servers is not disseminated. The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2]. The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server. We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes. In addition, the overall system performance is not affected in case agents or servers fail or become unavailable. The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-agent system tendencies toward autonomy, heterogeneity and unreliability of resources and agents. This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11]. Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers. This can be achieved by the mutual interactions between agents by applying techniques from complex system theory. Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21]. The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling. Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation. Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results. A summary, conclusion and outlook to future work finish this paper. 2. RELATED WORK Resource allocation is an important problem in the area of computer science. Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10]. Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers. In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated. The broker usually has full knowledge about all system resources. All incoming requests are directed to the broker who is the solely decision maker. In those approaches, the resource consumer cannot influence the allocation decision process. Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers. This mechanism works best in a homogeneous system. A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11]. From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation. This technique can only provide a good supplement for distributed resource allocation mechanisms. Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager. Those coordinators usually need to have global knowledge on the state of all system resources. An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs. The value of distributed solutions for the resource allocation problem has been recognised by research [10]. Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid. These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model. Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity. A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10]. Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints. The Agent based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents. Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure. Subtasks of a job migrate through the network until they find a resource that meets the price constraints. The jobs migration itinerary is determined by the resources in connecting them in different topologies [17]. The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources. There has been considerable work on decentralised resource allocation techniques using game theory published over recent years. Most of them are formulated as repetitive games in an idealistic and simplified environment. For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution. It is an ill-defined decision problem that assumes and models inductive reasoning. It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems. A variation of the El Farol problem is the so called minority game [8]. In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority. Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents. They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent. Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18]. Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience. In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit. A resource allocation approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes. We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents. A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks. Agents make their decisions themselves based on forecasts of the server utilisation. In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3. MODEL DESCRIPTION We model a distributed multi-agent system as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}. Each agent has a number of tasks Ti that needs to be executed during its lifetime. A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server. Resources for the execution of tasks are provided by each server li. The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources. We write LS (ai) The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai. Resources in the system can be used by all agents for the execution of tasks. The amount of provided resources C(li, t) of each server can vary over time. The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles. U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests. That is, the overall shared resource capacity is lower than the amount of requested resources by agents. In this case, some agents must wait with their allocation request until free resources are expected. The multi-agent system model used for our simulations is illustrated in Fig. 1. 4. SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each agent. The only information required in order to make a resource allocation decision for a task is the server utilisation from completed task allocations at those servers. There is no additional information dissemination about server resource utilisation or information about free resources. Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead. Additionally, we do not have any central controlling authority. All behaviour that leads to the resource allocation is created by the effective competition of the agents for shared resources and is a purely emergent effect. The agents in our multi-agent system compete for resources or a set of resources to execute tasks. The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment. Our approach is based on different agent beliefs, represented by predictors and different information about their environment. Agents prefer a task allocation at a server with free resources. However, there is no way to be sure of the amount of free server resources in advance. All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution. There is no communication between agents. Actions taken by agents influence the actions of other agents indirectly. The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2]. It is derived from the human way of deciding ill-defined problems. Humans tend to keep in mind many hypotheses and act on the most plausible one. Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation. All necessary control is integrated in the agents themselves. There is no higher controlling authority, management layer for decision support or information distribution. All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation. To do so, agents use historical information from past task allocations at those resources. Based on the forecasted resource utilisation, the agent will make its resource allocation decision. After the task has finished its execution and returned the results back to the agent, the predictor performances are evaluated and history information is updated. Algorithm 1 shows the resource allocation algorithm for each agent. The agent first predicts the next steps resource load for each server with historical information (line 3-7). If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation. The agent then evaluates if any free shared resources for the task allocation are expected. In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information. This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available. The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server. One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load. Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value. For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource. A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi. The most recent history item is h0. Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs. Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation. All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions. As the result, the server would have a large amount of free resources. A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19]. An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a). It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary. This may change in the future as the resource load has significantly increased recently. In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation. We have implemented two alternative algorithms for the selection of a server for the task allocation. Algorithm 1 Resource Allocation algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation. A probability distribution is calculated from the confidence levels of the resource predictions. The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3. The server with the highest confidence level has the biggest chance to be selected as the active server. G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3. The server with most expected free resources from the set L of server with expected free resources is chosen. In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs. However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation. In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended. The agent will not allocate the task at a resource. This case happens only if a resource load prediction for all servers is possible but no free resources are expected. After the agent execution has finished, the evaluation process described in algorithm 4 is preformed. This process is divided into three cases. First, the task was not allocated at a resource. In this case, the agent cannot decide if the decision not to allocate the task was correct or not. The agent then removes old historical data. This is necessary for a successful adaptation in the future. If the agent would not delete old historical information, the prediction would always forecast that no free resources are available. The agent would never allocate a task at one of the resources in the future. Old historical information is removed from the agents resource history using a decay rate. The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age. The current implementation uses a constant probability density function in a configurable domain. Figure 3 shows an example of such a cumulative distribution function for the decay rate. Depending on the environment, the probability density function must be altered. If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources. In addition, a dynamic environment requires more up-to-date information to make more reliable predictions. The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time. The agent creates a new predictor set for this server and records the historical information. All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource. The agent evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data. Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating. This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation. All predictors that predicted values which would lead to wrong decisions will receive negative ratings. In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors. Based on these performance ratings, the confidence levels are calculated using equation 4. The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor. These values are transformed into a probability distribution. According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection. Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels. Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor. This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors. The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration. Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources. In fact, enough resources for the execution would be available. A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred. The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server. The oldest history data is overwritten if already m history values are recorded for the server. Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor. This method assures that agents can compete more effectively in a changing environment. Different types of predictors are suitable for different situations and environments. Therefore, all predictors are being evaluated after each decision and the active predictor is selected. This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision. Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19]. Our self-organising approach is robust against failures of resources or agents in the system. If they join or leave, the system can self-organise quickly and adapts to the new conditions. There is no classical bottleneck or single point of failure like in centralised mechanisms. The limitations are the reliance on historical resource utilisation information about other servers. A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource. If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers. This problem occurs if the amount of provided shared resources 78 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers. In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one. In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5. EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment. In the rest of the section, results of the experiments are presented and discussed. All experiments are conducted in a special testbed that simulates and models a multi-agent system. We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit. It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers. An event-driven model is used to trigger all activities in the system. For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each agent. All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type. Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources. Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server. The total resource load of the system is calculated as the sum of the resources load of all resources. The self-organising resource allocation algorithm has random elements. Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process. We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation. This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution. The resource consumption is assigned randomly to each task prior to its allocation from an interval. Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server. The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources. The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation. The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform. For this time the task consumes the assigned amount of server resources. This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion. This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase. This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism. The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources. The second experiment was conducted in a dynamic server environment with a constant number of agents. The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units. The resource capacity of each server remains constant over the experiment. We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units. The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units. Figure 4 shows the results from 100 repetitions of this experiment. Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average. At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units. This initial exploration phase shows that the average resource load of each server has a similar level. This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2. Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers. They find free resources at server 2. After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks. The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run. This experiment used algorithm 2 for the selection of the active server. We also ran the same experiment with the most free resources selection mechanism to select the active server. The resource allocation for each server is similar. The absolute amount of free resources per server is almost the same. Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents. The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant. Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units. The change in capacity starts after 150 time units, which is approximately the end of the learning phase. Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment. All agents use the deterministic most free resources selection mechanism to select the active server. It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources. This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes. The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources. The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp. Fig. 4(a)). 6. CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-agent systems was presented. We enable agents to select the execution platform for their tasks themselves before each execution at run-time. In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource. Agents sense their server environment and adopt their action to compete more efficient in the new created environment. This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents. The resource allocation is a purely emergent effect. Our mechanism demonstrates that resource allocation can be done by the effective competition of individual and autonomous agents. Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required. This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment. In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible. Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required. Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources. The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-agent system environment. It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources. All control is implemented in the agents. A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective resource allocation. This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources. Our approach adapts to changes in the environment but it is not evolutionary. There is no discovery of new strategies by the agents. The set of predictors stays the same over the whole life. In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future. The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results. In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance. The decay rate is currently predefined and must be altered manually depending on the environment. A large number of shared resources requires older historical information to avoid a too frequently resources exploration. In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions. We are aware of the long learning phase in environments with a large number of shared resources known by each agent. In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers. This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided. In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again. In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers. This issue needs more investigation in the future. 7. REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf. Cactus Tools for Grid Applications. In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001. Kluwer Academic Publishers. [2] W. B. Arthur. Inductive Reasoning and Bounded Rationality. American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke. Server Load Balancing. OReilly Media, 1 edition, August 2001. [4] R. Buyya. Economic-based Distributed Resource Management and Scheduling for Grid Computing. PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger. Economic Models for Resource Management and Scheduling in Grid Computing. Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci. Architectural Models for Resource Management in the Grid. In Proceedings of the First International Workshop on Grid Computing, pages 18-35. Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl. A taxonomy of scheduling in general-purpose distributed computing systems. IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang. Emergence of Cooperation and Organization in an Evolutionary Game. Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok. On load balancing for distributed multiagent computing. In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801. IEEE, August 2002. [10] S. H. Clearwater. Market-based control. A Paradigm for Distributed Resource Allocation. World Scientific, Singapore, 1996. [11] C. Fl¨us. Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications. PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I. Foster and C. Kesselman. Globus: A Metacomputing Infrastructure Toolkit. International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I. Foster, M. Livny, and S. Tuecke. Condor-G: A Computation Management Agent for Multi-Institutional Grids. Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman. Resource allocation games with changing resource capacities. In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003. ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana. Combining state and model-based approaches for mobile agent load balancing. In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003. ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh. Decentralized Adaptive Resource Allocation for Sensor Networks. In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad. An Agent-based Resource Allocation Model for Computational Grids. Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz. Adaptive Load Balancing: A Study in Multi-Agent Learning. In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk. Towards Autonomous Mobile Agents with Emergent Migration Behaviour. In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592. ACM Press, May 2006. [20] W3C. Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop. Complexity: The Emerging Science at the Edge of Order and Chaos. Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan. Analyzing Market-Based Resource Allocation Strategies for the Computational Grid. In International Journal of High Performance Computing Applications, volume 15, pages 258-281. Sage Science Press, 2001. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81",
    "original_translation": "Hacia la asignación de recursos basada en agentes autoorganizados en un entorno de múltiples servidores. Tino Schlegel1, Ryszard Kowalczyk2. Universidad de Tecnología Swinburne, Facultad de Tecnologías de la Información y la Comunicación, Hawthorn, 3122 Victoria, Australia {tschlegel1, rkowalczyk2}@ict.swin.edu.au. RESUMEN Las aplicaciones distribuidas requieren técnicas distribuidas para una asignación eficiente de recursos. Estas técnicas deben tener en cuenta la heterogeneidad y la posible falta de fiabilidad de los recursos y consumidores de recursos en entornos distribuidos. En este artículo proponemos un algoritmo distribuido que resuelve el problema de asignación de recursos en sistemas multiagentes distribuidos. Nuestra solución se basa en la autoorganización de agentes, la cual no requiere ningún facilitador o capa de gestión. La asignación de recursos en el sistema es un efecto puramente emergente. Presentamos los resultados del mecanismo de asignación de recursos propuesto en el entorno simulado de servidores múltiples estáticos y dinámicos. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Coherencia y coordinación Términos Generales Algoritmos 1. INTRODUCCIÓN Con la creciente popularidad de tecnologías de computación distribuida como Grid [12] y servicios web [20], Internet se está convirtiendo en una plataforma informática poderosa donde diferentes pares de software (por ejemplo, agentes) pueden utilizar recursos informáticos existentes para realizar tareas. En este sentido, cada agente es un consumidor de recursos que adquiere una cierta cantidad de recursos para la ejecución de sus tareas. Es difícil para un mecanismo central de asignación de recursos recopilar y gestionar la información sobre todos los recursos compartidos y consumidores de recursos para realizar de manera efectiva la asignación de recursos. Por lo tanto, se requieren soluciones distribuidas del problema de asignación de recursos. Los investigadores han reconocido estos requisitos [10] y han propuesto técnicas para la asignación de recursos distribuidos. Un tipo prometedor de enfoques distribuidos se basa en modelos de mercado económico [4], inspirados en los principios de los mercados de valores reales. Aunque esos enfoques estén distribuidos, generalmente requieren un facilitador para la fijación de precios, la búsqueda de recursos y la asignación de trabajos a los recursos [5, 9]. Otro problema principalmente sin resolver de esos enfoques es el ajuste fino del precio y el tiempo, las restricciones presupuestarias para permitir una asignación eficiente de recursos en sistemas grandes y dinámicos [22]. En este documento proponemos una solución distribuida del problema de asignación de recursos basada en la autoorganización de los consumidores de recursos en un sistema con recursos limitados. En nuestro enfoque, los agentes asignan dinámicamente tareas a servidores que proporcionan una cantidad limitada de recursos. En nuestro enfoque, los agentes seleccionan de forma autónoma la plataforma de ejecución para la tarea en lugar de pedir a un intermediario de recursos que realice la asignación. Todo el control necesario para nuestro algoritmo está distribuido entre los agentes en el sistema. Optimizan continuamente el proceso de asignación de recursos a lo largo de su vida para adaptarse a los cambios en la disponibilidad de recursos compartidos, aprendiendo de decisiones de asignación pasadas. La única información disponible para todos los agentes son la carga de recursos y la información sobre el éxito de la asignación de recursos de asignaciones pasadas. La información adicional sobre la carga de recursos de los servidores no se difunde. El concepto básico de nuestra solución está inspirado en el razonamiento inductivo y la racionalidad limitada introducida por W. Brian Arthur [2]. El mecanismo propuesto no requiere una autoridad central de control, una capa de gestión de recursos o introducir comunicación adicional entre agentes para decidir qué tarea se asigna en qué servidor. Demostramos que este mecanismo funciona bien en sistemas dinámicos con un gran número de tareas y puede adaptarse fácilmente a diferentes tamaños de sistemas. Además, el rendimiento general del sistema no se ve afectado en caso de que los agentes o servidores fallen o no estén disponibles. El enfoque propuesto proporciona una forma sencilla de implementar la asignación de recursos distribuidos y tiene en cuenta las tendencias del sistema multiagente hacia la autonomía, la heterogeneidad y la falta de fiabilidad de los recursos y agentes. Esta técnica propuesta puede ser fácilmente complementada por técnicas para encolar o rechazar solicitudes de asignación de recursos de agentes [11]. Tales capacidades de auto-gestión de agentes de software permiten una asignación de recursos confiable incluso en un entorno con proveedores de recursos poco confiables. Esto se puede lograr mediante las interacciones mutuas entre agentes aplicando técnicas de la teoría de sistemas complejos. La autoorganización de todos los agentes conduce a una autoorganización de los recursos del sistema 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS y es una propiedad emergente del sistema [21]. El resto del documento está estructurado de la siguiente manera: La siguiente sección proporciona una visión general del trabajo relacionado ya realizado en el área de equilibrio de carga, asignación de recursos o programación. La sección 3 describe el modelo de un entorno multiagente que se utilizó para realizar simulaciones con el fin de evaluar el rendimiento. Las secciones 4 y 5 describen el algoritmo de asignación de recursos distribuidos y presentan varios resultados experimentales. Un resumen, una conclusión y una perspectiva del trabajo futuro finalizan este documento. El trabajo relacionado La asignación de recursos es un problema importante en el área de la informática. En los últimos años, diferentes grupos de investigación han propuesto soluciones basadas en diferentes suposiciones y restricciones [7, 3, 15, 10]. En términos generales, la asignación de recursos es un mecanismo o política para la gestión eficiente y efectiva del acceso a un recurso limitado o conjunto de recursos por parte de sus consumidores. En el caso más simple, los consumidores de recursos solicitan a un intermediario central o despachador los recursos disponibles donde el consumidor de recursos será asignado. El corredor generalmente tiene pleno conocimiento de todos los recursos del sistema. Todas las solicitudes entrantes son dirigidas al corredor, quien es el único tomador de decisiones. En esos enfoques, el consumidor de recursos no puede influir en el proceso de decisión de asignación. El equilibrio de carga [3] es un caso especial del problema de asignación de recursos que utiliza un intermediario que intenta ser justo con todos los recursos al equilibrar la carga del sistema de manera equitativa entre todos los proveedores de recursos. Este mecanismo funciona mejor en un sistema homogéneo. Una técnica distribuida simple para la gestión de recursos es la planificación de capacidad mediante la negativa o encolamiento de agentes entrantes para evitar la sobrecarga de recursos [11]. Desde la perspectiva del propietario de recursos, esta técnica es importante para prevenir la sobrecarga en el recurso, pero no es suficiente para una asignación efectiva de recursos. Esta técnica solo puede proporcionar un buen complemento para los mecanismos de asignación de recursos distribuidos. La mayoría de las técnicas actuales para la asignación de recursos en herramientas de computación en malla como Globus [12] o Condor-G [13] coordinan la asignación de recursos con un subastador, árbitro, despachador, programador o gestor. Esos coordinadores suelen necesitar tener conocimiento global sobre el estado de todos los recursos del sistema. Un ejemplo de un algoritmo de asignación de recursos dinámicos es el proyecto Cactus [1] para la asignación de trabajos computacionales muy costosos. El valor de las soluciones distribuidas para el problema de asignación de recursos ha sido reconocido por la investigación [10]. Inspirados en los principios de los mercados de valores, se han desarrollado modelos de mercado económico para negociar recursos con el fin de regular la oferta y la demanda en la red. Estos enfoques utilizan diferentes estrategias de precios como modelos de precios publicados, diferentes métodos de subasta o un modelo de mercado de productos básicos. Los usuarios intentan comprar recursos baratos necesarios para ejecutar el trabajo, mientras que los proveedores intentan obtener la mayor ganancia posible y operar los recursos disponibles a plena capacidad. Se presenta una colección de diferentes técnicas de asignación de recursos distribuidos basadas en modelos de mercado en Clearwater [10]. Buyya et al. desarrollaron un marco de asignación de recursos basado en la regulación de la oferta y la demanda [4] para Nimrod-G [6] con el enfoque principal en los plazos de entrega de trabajos y las restricciones presupuestarias. El Modelo de Asignación de Recursos basado en Agentes (ARAM) para redes está diseñado para programar trabajos computacionalmente costosos utilizando agentes. La desventaja de este modelo es el extenso uso de intercambio de mensajes entre agentes para monitoreo periódico e intercambio de información dentro de la estructura jerárquica. Las subtareas de un trabajo migran a través de la red hasta que encuentran un recurso que cumpla con las restricciones de precio. El itinerario de migración de trabajos está determinado por los recursos que los conectan en diferentes topologías [17]. El mecanismo propuesto en este documento elimina la necesidad de intercambio periódico de información sobre las cargas de recursos y no requiere una topología de conexión entre los recursos. Se ha realizado un considerable trabajo sobre técnicas de asignación descentralizada de recursos utilizando teoría de juegos publicado en los últimos años. La mayoría de ellos están formulados como juegos repetitivos en un entorno idealista y simplificado. Por ejemplo, Arthur introdujo el problema del bar El Farol, que no permite una solución perfecta, lógica y racional. Es un problema de decisión mal definido que asume y modela el razonamiento inductivo. Probablemente sea uno de los ejemplos más estudiados de sistemas adaptativos complejos derivados de la forma en que los humanos deciden problemas mal definidos. Una variación del problema de El Farol es el llamado juego de la minoría [8]. En este juego de decisión repetitivo, un número impar de agentes debe elegir entre dos recursos basándose en información de éxito pasado, tratando de asignarse al recurso con la minoría. Galstyan et al. [14] estudiaron una variación con más de dos recursos, cambiando las capacidades de los recursos y la información de los agentes vecinos. Demostraron que los agentes pueden adaptarse de manera efectiva a las capacidades cambiantes en este entorno utilizando un conjunto de simples tablas de búsqueda (estrategias) por agente. Otra técnica distribuida que se emplea para resolver el problema de asignación de recursos se basa en el aprendizaje por refuerzo [18]. Similar a nuestro enfoque, un conjunto de agentes compiten por un número limitado de recursos basados únicamente en experiencias individuales previas. En este documento, el objetivo del sistema es maximizar el rendimiento del sistema garantizando la equidad de los recursos, medida como el tiempo promedio de procesamiento por unidad de trabajo. Se presenta un enfoque de asignación de recursos para redes de sensores basado en técnicas de autoorganización y aprendizaje por refuerzo en [16], con un enfoque principal en la optimización del consumo de energía de los nodos de la red. Propusimos un enfoque de equilibrio de carga autoorganizado para un único servidor con el objetivo de optimizar los costos de comunicación de agentes móviles. Un agente móvil rechazará una migración a un servidor de agente remoto si espera que el servidor de destino ya esté sobrecargado por otros agentes o tareas del servidor. Los agentes toman sus decisiones por sí mismos basándose en pronósticos de la utilización del servidor. En este documento se presenta una solución para un entorno de múltiples servidores sin tener en cuenta los costos de comunicación o migración. 3. DESCRIPCIÓN DEL MODELO Modelamos un sistema multiagente distribuido como una red de servidores L = {l1, . . . , lm}, agentes A = {a1, . . . , an} y tareas T = {T1, ..., Tm}. Cada agente tiene un número de tareas Ti que deben ser ejecutadas durante su vida útil. Una tarea Ti requiere U(Ti, t) recursos para su ejecución en el tiempo t, independientemente de su servidor de ejecución. Los recursos para la ejecución de tareas son proporcionados por cada servidor li. La ubicación de la ejecución de las tareas en general está especificada por el mapa L: T × t → L. Un agente debe conocer la existencia de recursos del servidor para asignar tareas en esos recursos. Escribimos LS (ai) The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 75 Recursos del Sistema Anfitrión l4 Anfitrión l3 Anfitrión l2 2a 3a 4a a Anfitrión l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figura 1: Una ilustración de nuestro modelo de múltiples servidores con recursos exclusivos y compartidos para la ejecución del agente. para abordar el conjunto de recursos conocidos por el agente ai. Los recursos en el sistema pueden ser utilizados por todos los agentes para la ejecución de tareas. La cantidad de recursos proporcionados C(li, t) de cada servidor puede variar con el tiempo. La utilización de recursos de un servidor en el tiempo t se calcula utilizando la ecuación 1, sumando el consumo de recursos U(Tj, t) de cada tarea Tj que se ejecuta en el recurso en el tiempo t. Todas las unidades de recursos utilizadas en nuestro modelo representan métricas reales como memoria o ciclos de procesador. Además del caso en que la cantidad total de recursos del sistema es suficiente para ejecutar todas las tareas, también nos interesa el caso en que no se proporcionan suficientes recursos del sistema para cumplir con todas las solicitudes de asignación. Es decir, la capacidad total de recursos compartidos es menor que la cantidad de recursos solicitados por los agentes. En este caso, algunos agentes deben esperar con su solicitud de asignación hasta que se esperen recursos libres. El modelo de sistema multiagente utilizado para nuestras simulaciones está ilustrado en la Figura 1.4. ASIGNACIÓN DE RECURSOS AUTOORGANIZADA El algoritmo de asignación de recursos descrito en esta sección está integrado en cada agente. La única información necesaria para tomar una decisión de asignación de recursos para una tarea es la utilización del servidor de las asignaciones de tareas completadas en esos servidores. No hay una difusión adicional de información sobre la utilización de recursos del servidor o información sobre recursos libres. Nuestra solución demuestra que los agentes pueden autoorganizarse en un entorno dinámico sin necesidad de información de monitoreo activo que genere una gran sobrecarga de tráfico en la red. Además, no tenemos ninguna autoridad central de control. Todo comportamiento que conduce a la asignación de recursos es creado por la competencia efectiva de los agentes por recursos compartidos y es un efecto puramente emergente. Los agentes en nuestro sistema multiagente compiten por recursos o un conjunto de recursos para ejecutar tareas. La acción colectiva de estos agentes cambia el entorno y, con el paso del tiempo, tienen que adaptarse a estos cambios para competir de manera más efectiva en el entorno recién creado. Nuestro enfoque se basa en diferentes creencias de los agentes, representadas por predictores y diferente información sobre su entorno. Los agentes prefieren una asignación de tareas en un servidor con recursos disponibles. Sin embargo, no hay forma de estar seguro de la cantidad de recursos del servidor disponibles de antemano. Todos los agentes tienen las mismas preferencias y un agente asignará una tarea en un servidor si espera tener suficientes recursos libres para su ejecución. No hay comunicación entre agentes. Las acciones tomadas por los agentes influyen en las acciones de otros agentes de forma indirecta. El mecanismo aplicado está inspirado en el razonamiento inductivo y los principios de racionalidad limitada [2]. Se deriva de la forma humana de resolver problemas mal definidos. Los humanos tienden a tener en cuenta muchas hipótesis y actuar en base a la más plausible. Por lo tanto, cada agente lleva un registro del rendimiento de una colección privada de sus predictores y selecciona aquel que actualmente sea más prometedor para la toma de decisiones. 4.1 Algoritmo de asignación de recursos Esta sección describe el mecanismo de decisión para nuestra asignación de recursos autoorganizada. Todo el control necesario está integrado en los propios agentes. No hay una autoridad superior de control, capa de gestión para apoyo en la toma de decisiones o distribución de información. Todos los agentes tienen un conjunto de predictores para cada recurso con el fin de pronosticar la futura utilización de estos servidores para la asignación potencial de tareas. Para hacerlo, los agentes utilizan información histórica de asignaciones de tareas pasadas en esos recursos. Basándose en la utilización de recursos pronosticada, el agente tomará su decisión de asignación de recursos. Después de que la tarea haya finalizado su ejecución y devuelto los resultados al agente, se evalúan las actuaciones del predictor y se actualiza la información histórica. El Algoritmo 1 muestra el algoritmo de asignación de recursos para cada agente. El agente primero predice la carga de recursos de los próximos pasos para cada servidor con información histórica (línea 3-7). Si la carga de recursos predicha más el consumo de recursos de las tareas está por debajo de la última capacidad de servidor conocida, este servidor se agrega a la lista de candidatos para la asignación. El agente luego evalúa si se esperan recursos compartidos gratuitos para la asignación de tareas. En el caso de que no se esperen recursos gratuitos (línea 9), el agente explorará los recursos asignando la tarea a un servidor seleccionado al azar de entre todos los servidores no predecibles para recopilar información sobre la carga de recursos. Este es el caso estándar al comienzo del ciclo de vida del agente, ya que no hay información disponible sobre el entorno. La predicción de la carga de recursos en sí misma utiliza un conjunto de r predictores P(a, l) := {pi|1 ≤ i ≤ r} por servidor. Uno de los predictores pA ∈ P de cada conjunto se llama predictor activo, el cual pronostica la carga de recursos de los próximos pasos. Cada predictor es una función P: H → ℵ+ ∪ {0} del espacio de datos históricos H a un número entero no negativo, que es el valor pronosticado. Por ejemplo, un predictor podría pronosticar una carga de recursos igual a la cantidad promedio de recursos ocupados durante la última ejecución en este recurso. Un historial H de información de carga de recursos es una lista de hasta m elementos de historial hi = (xi, yi), que incluyen la fecha de observación xi y el valor observado yi. El elemento más reciente del historial es h0. Nuestro algoritmo utiliza un conjunto de predictores en lugar de solo uno, para evitar que todos los agentes tomen la misma decisión basada en el valor predicho, lo que invalidaría sus creencias. Imagina que solo un recurso compartido es conocido por un número de agentes que utilizan un predictor para pronosticar el 76 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Carga de Recursos Tiempo (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figura 2: (a) Información de carga de recursos recopilada de asignaciones de tareas anteriores que se utiliza para predicciones futuras. (b) Distribución de probabilidad de los predictores para seleccionar el nuevo predictor activo. mismo valor que la última utilización conocida de recursos del servidor. Todos los agentes que asignaron una tarea en un servidor que estaba ligeramente sobrecargado rechazarían otra asignación en este servidor, ya que esperan que el servidor vuelva a estar sobrecargado según las predicciones. Como resultado, el servidor tendría una gran cantidad de recursos libres. Un conjunto de diferentes predictores que predicen diferentes valores evita esta situación de invalidar las creencias de los agentes [19]. Un ejemplo de información de carga de recursos recopilada de las últimas 5 visitas de un agente a un recurso compartido se puede ver en la Figura 2(a). Muestra que el recurso fue visitado con frecuencia, lo que significa que había recursos gratuitos disponibles para la ejecución y no era necesario explorar otros servidores. Esto puede cambiar en el futuro ya que la carga de recursos ha aumentado significativamente recientemente. En el caso en que el conjunto de servidores que se predice que tienen recursos disponibles no esté vacío (línea 13), el agente selecciona uno de ellos para su asignación. Hemos implementado dos algoritmos alternativos para la selección de un servidor para la asignación de tareas. Algoritmo 1 Algoritmo de asignación de recursos de un agente 1 L ← ∅ //servidor con recursos libres 2 u ← U(T, t + 1) //consumo de recursos de la tarea 3 para todo P(a, l)|l ∈ LS (a) hacer 4 U(l) ← predicción de carga de recursos (P(a, l), t + 1) 5 si U(l) + u ≤ C(l) entonces 6 L ← L ∪ {P(a, l)} 7 fin si 8 fin para 9 si L = ∅ entonces 10 //todos los recursos compartidos impredecibles 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← un elemento aleatorio de E 13 else 14 allocationServer ← selección de servidor (L) 15 fin si 16 devolver allocationServer El Algoritmo 2 muestra el primer método, que es una selección no determinista según la previsibilidad de la utilización de recursos del servidor. Una distribución de probabilidad se calcula a partir de los niveles de confianza de las predicciones de recursos. El nivel de confianza depende de tres factores: la precisión del predictor activo, la cantidad de información histórica sobre el servidor y la edad promedio de la información histórica (ver Ecuación 3). El servidor con el nivel de confianza más alto tiene la mayor probabilidad de ser seleccionado como el servidor activo. G(P) = w1 · tamaño(H) m + w2 · Edad(H) máx Edad(H) + w3 · g(p) máx (g(p)) (3) donde: wi − pesos tamaño(H) − número de datos en el historial m − número máximo de valores históricos Edad(H) − edad promedio de los datos históricos g(p) − ver ecuación 4 Algoritmo 2 selecciónServidor(L) - mejor servidor predecible 1 para todos los P(a, l) ∈ L hacer 2 calcular G(P) 3 fin para 4 transformar todos los G(P) en una distribución de probabilidad 5 devolver l ∈ LS seleccionado de acuerdo con la distribución de probabilidad Algoritmo 3 selecciónServidor(L) - más recursos libres 1 para todos los P(a, l) ∈ L hacer 2 c(l) ← C(l) − Ul 3 fin para 4 devolver l ∈ LS |c(l) es máximo El segundo método de selección alternativo de un servidor del conjunto de servidores predichos con recursos libres es determinista y se muestra en el algoritmo 3. Se elige el servidor con la mayor cantidad esperada de recursos gratuitos del conjunto L de servidores con recursos gratuitos esperados. En el caso en que todos los agentes predigan que hay más recursos disponibles en un servidor en particular, todos los agentes asignarán la tarea a este servidor, lo que invalidaría las creencias de los agentes. Sin embargo, nuestros experimentos muestran que la información de historial individual y la selección no determinista del predictor activo generalmente evitan esta situación. En caso de que el algoritmo de asignación de recursos no devuelva ningún servidor (Alg. 1, línea 16), no se recomienda asignar un recurso. El agente no asignará la tarea a un recurso. Este caso ocurre solo si es posible predecir la carga de recursos para todos los servidores pero no se esperan recursos libres. Después de que la ejecución del agente haya finalizado, se realiza el proceso de evaluación descrito en el algoritmo 4. Este proceso se divide en tres casos. Primero, la tarea no fue asignada a un recurso. En este caso, el agente no puede decidir si la decisión de no asignar la tarea fue correcta o no. El agente luego elimina los datos históricos antiguos. Esto es necesario para una adaptación exitosa en el futuro. Si el agente no eliminara la información histórica antigua, la predicción siempre pronosticaría que no hay recursos disponibles gratuitos. El agente nunca asignaría una tarea a uno de los recursos en el futuro. La información histórica antigua se elimina del historial de recursos de los agentes utilizando una tasa de descomposición. La tasa de decaimiento es una función de distribución acumulativa que calcula la probabilidad de que un elemento histórico sea eliminado después de haber alcanzado un cierto The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 77 Edad de los datos históricos Tasa de decaimiento 0 1 más antiguo Figura 3: Tasa de decaimiento de la edad de la información histórica. La implementación actual utiliza una función de densidad de probabilidad constante en un dominio configurable. La Figura 3 muestra un ejemplo de una función de distribución acumulativa para la tasa de decaimiento. Dependiendo del entorno, la función de densidad de probabilidad debe ser modificada. Si el número de servidores potenciales por agente es alto, la información histórica debe mantenerse por más tiempo para evitar la exploración de recursos no explorados. Además, un entorno dinámico requiere información más actualizada para realizar predicciones más fiables. El segundo caso en el proceso de evaluación (Alg. 4, línea 5) describe las acciones tomadas después de que un servidor fue visitado por primera vez. El agente crea un nuevo conjunto de predictores para este servidor y registra la información histórica. Todos los predictores para este conjunto son elegidos al azar de un conjunto predefinido. g(p) = l i=0 ri (4) donde: ri = ⎧ ⎨ ⎩ 1 si la decisión i-ésima es correcta 0 si el resultado i-ésimo es desconocido −1 si la decisión i-ésima es incorrecta El caso general (Alg. 4, línea 8) es la evaluación después de que el agente asignó la tarea a un recurso. El agente evalúa todos los predictores del conjunto de predictores para este recurso al predecir la carga del recurso con todos los predictores basados en los datos históricos antiguos. Los predictores que hicieron una predicción correcta, lo que significa que la asignación de recursos fue correcta, recibirán una calificación positiva. Este es el caso en el que el recurso no estaba sobrecargado y se predijeron recursos libres para la ejecución, o el recurso estaba sobrecargado y este predictor habría evitado la asignación. Todos los predictores que predijeron valores que llevarían a decisiones incorrectas recibirán calificaciones negativas. En todos los demás casos, que incluye cuando no era posible hacer una predicción, se otorga una calificación neutral a los pronosticadores. Basándose en estas calificaciones de rendimiento, los niveles de confianza se calculan utilizando la ecuación 4. La confianza para todos los predictores que no pueden predecir con la información histórica actual sobre el servidor se establece en cero para evitar la selección de estos como el nuevo predictor activo. Estos valores se transforman en una distribución de probabilidad. Según esta distribución de probabilidad, el nuevo predictor activo se elige e implementa mediante una selección de ruleta. La Figura 2(b) ilustra las probabilidades de un conjunto de 10 predictores, las cuales han sido calculadas a partir de los niveles de confianza de los predictores. Aunque el predictor 9 tiene la probabilidad de selección más alta, no fue elegido por el proceso de selección de la ruleta como el predictor activo. Esta selección no determinista de predictores evita la invalidación de las creencias de los agentes en caso de que los agentes tengan el mismo conjunto de predictores. La precisión de la predicción, que es el error de la predicción en comparación con el valor observado, no se tiene en cuenta. Supongamos que el predictor activo predice ligeramente por encima de la capacidad de recursos, lo que no conduce a una asignación de recursos. De hecho, habría suficientes recursos disponibles para la ejecución. Una predicción menos precisa que está muy por debajo de la capacidad llevaría a la decisión correcta y, por lo tanto, es preferible. La última acción del algoritmo de evaluación (Alg. 4, línea 22) actualiza el historial con la información más reciente de carga de recursos del servidor. Los datos de la historia más antigua se sobrescriben si ya se han registrado m valores de historia para el servidor. Algoritmo 4 Evaluación de Decisiones 1 si l ∈ LE entonces 2 para todos los P(a, l)|l ∈ LS (a) hacer 3 evaporar datos históricos antiguos 4 fin para 5 sino si P(a, l) = nulo entonces 6 crear (P(a, l)) 7 actualizar H(l) 8 sino 9 para todos los p ∈ P(a, l) hacer 10 pred ← predicción de carga de recursos(p) 11 si (U(l) ≤ C(l) Y pred + U(a, t) ≤ C(l)) O (U(l) > C(l) Y pred + U(a, t) > C(l)) entonces 12 agregar calificación positiva(p) 13 sino si U(l) ≤ C(l) Y pred + U(a, t) > C(l) O U(l) ≤ C(l) Y pred + U(a, t) > C(l) entonces 14 agregar calificación negativa(p) 15 sino 16 agregar calificación neutral(p) 17 fin si 18 fin para 19 calcular todos los g(p); g(p) ← 0, si p no está funcionando 20 transformar todos los g(p) en una distribución de probabilidad 21 pA ← p ∈ P(a, l) es seleccionado de acuerdo a esta distribución de probabilidad 22 actualizar H(l) 23 fin si 4.2 Observaciones y Limitaciones del Enfoque Nuestro mecanismo de predicción utiliza varios tipos de predictores simples en lugar de uno sofisticado. Este método asegura que los agentes puedan competir de manera más efectiva en un entorno cambiante. Diferentes tipos de predictores son adecuados para diferentes situaciones y entornos. Por lo tanto, todos los predictores se evalúan después de cada decisión y se selecciona el predictor activo. Este carácter no determinista del nuevo predictor activo respalda que las creencias de los agentes no serán invalidadas, lo cual ocurre en el caso de que todos los predictores estén tomando la misma decisión. Especialmente si solo hay un recurso compartido disponible y todos los agentes tienen la opción de ir a este recurso compartido o no [19]. Nuestro enfoque de autoorganización es robusto frente a fallos de recursos o agentes en el sistema. Si se unen o se van, el sistema puede autoorganizarse rápidamente y adaptarse a las nuevas condiciones. No hay cuellos de botella clásicos ni un único punto de falla como en los mecanismos centralizados. Las limitaciones son la dependencia de la información de utilización de recursos históricos de otros servidores. Un pronóstico de la utilización de recursos de un servidor remoto solo es posible si un agente tiene una cantidad de información histórica sobre un recurso compartido. Si el número de servidores por agente es muy grande, no hay una manera eficiente de recopilar información histórica sobre los servidores remotos. Este problema ocurre si la cantidad de recursos compartidos proporcionados es de 78. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) es limitada y no es suficiente para todos los consumidores de recursos. En este caso, un agente intentaría aleatoriamente todos los servidores conocidos hasta encontrar uno con recursos disponibles o no haya ninguno. En el peor de los casos, para cuando se prueben todos los servidores, la información histórica de los servidores ya estará desactualizada. EVALUACIÓN EXPERIMENTAL La primera parte de esta sección ofrece un breve resumen de la configuración de nuestro entorno de simulación. En el resto de la sección, se presentan y discuten los resultados de los experimentos. Todos los experimentos se llevan a cabo en un banco de pruebas especial que simula y modela un sistema multiagente. Hemos implementado este banco de pruebas en el lenguaje de programación Java, independiente de cualquier conjunto de herramientas de agente específico. Permite una variedad de experimentos en entornos estables y dinámicos con un número configurable de agentes, tareas y servidores. Se utiliza un modelo basado en eventos para activar todas las actividades en el sistema. Para todas las simulaciones, limitamos el número de datos históricos para cada servidor a 10, el número de calificaciones de rendimiento por predictor a 10 y asignamos 10 predictores a cada conjunto de predictores para cada agente. Todos los predictores son elegidos al azar de un conjunto predefinido arbitrario de 32 predictores del siguiente tipo. Los predictores difieren en diferentes ciclos o tamaños de ventana. - Predictor de n-ciclos: p(n) = yn utiliza el valor de la historia en la posición n-ésima desde el final. - Predictor de n-media: p(n) = 1 n · n i=1 yi utiliza el valor medio de los n últimos valores de la historia. - Predictor de regresión lineal de n: p(n, t) = a·t+b utiliza el valor de regresión lineal de los últimos n valores de la historia, donde a, b se calculan utilizando regresión lineal con ajuste de mínimos cuadrados considerando los últimos n datos de la historia. - Predictor de distribución de n: utiliza un valor aleatorio de la distribución de frecuencia de los n últimos valores de la historia. - Predictor de espejo de n: p(n) = 2 · H − yn utiliza la imagen de espejo alrededor de la media de todos los valores de la historia del n-ésimo valor de la historia. La eficiencia de nuestra propuesta de asignación de recursos autoorganizada se evalúa mediante el desarrollo de carga de recursos de cada servidor durante la simulación, así como el desarrollo acumulado de carga de recursos totales sobre todos los recursos compartidos. Las cargas de recursos para cada servidor se calculan utilizando la ecuación 1 como la suma del consumo de recursos de todos los agentes actualmente ejecutados en este servidor. La carga total de recursos del sistema se calcula como la suma de la carga de recursos de todos los recursos. El algoritmo de asignación de recursos autoorganizado tiene elementos aleatorios. Por lo tanto, los resultados presentados muestran valores medios y desviación estándar calculados sobre 100 experimentos repetidos. 5.1 Configuración Experimental Los siguientes parámetros tienen un impacto en el proceso de asignación de recursos. Damos una visión general de los parámetros y una breve descripción. - Agentes: El número de agentes involucrados en la asignación de recursos. Este número varía en los experimentos entre 650 y 750 dependiendo de la cantidad total de recursos del sistema disponibles. - Consumo de recursos: Cada tarea consume recursos del servidor para su ejecución. El consumo de recursos se asigna aleatoriamente a cada tarea antes de su asignación de un intervalo. El consumo de recursos se especifica en unidades de recursos que corresponden a métricas del mundo real como la memoria o los ciclos del procesador. - Servidor de inicio de agentes: Todos los agentes se encuentran en un servidor de inicio de agentes. Los recursos de esos servidores no son considerados en nuestra simulación y no afectan el rendimiento de la asignación de recursos. - Recursos del servidor: Los experimentos utilizan servidores con diferentes cantidades de recursos compartidos disponibles. El primer experimento se lleva a cabo en un entorno de servidor estático que proporciona la misma cantidad de recursos compartidos, mientras que el otro experimento varía los recursos de servidor disponibles durante la simulación. La cantidad total de recursos permanece constante en ambos experimentos. - Tiempo de ejecución: El tiempo de ejecución de una tarea para la ejecución, independiente de la plataforma de ejecución. Por esta vez, la tarea consume la cantidad asignada de recursos del servidor. Este parámetro se asigna aleatoriamente antes de la ejecución. - Tiempo de creación de la tarea: El tiempo antes de que se cree la siguiente tarea después de la finalización exitosa o fallida. Este parámetro influye en la antigüedad de la información histórica sobre los recursos y tiene una gran influencia en la duración de la fase inicial de adaptación. Este parámetro se asigna aleatoriamente después de que se haya completado la tarea. 5.2 Resultados Experimentales Esta sección muestra los resultados de experimentos seleccionados que demuestran el rendimiento de nuestro mecanismo propuesto de asignación de recursos. El primer experimento muestra el rendimiento en un entorno estable donde un número de agentes asignan tareas a servidores que proporcionan una cantidad constante de recursos. El segundo experimento se llevó a cabo en un entorno de servidor dinámico con un número constante de agentes. El primer experimento muestra nuestro modelo en un entorno estable de 3 servidores que proporcionan un total de 7000 unidades de recursos. La capacidad de recursos de cada servidor permanece constante durante el experimento. Utilizamos 650 agentes con los parámetros del tiempo de ejecución entre 1 y 15 unidades de tiempo y un tiempo de creación de tarea en el intervalo [0 − 30] unidades de tiempo. El consumo de recursos de las tareas se asigna aleatoriamente en el intervalo de [1 - 45] unidades de recurso. La Figura 4 muestra los resultados de 100 repeticiones de este experimento. La Figura 4(a) muestra que la cantidad total de recursos proporcionados es mayor que la demanda de recursos en promedio. Al comienzo del experimento, todos los agentes asignan sus tareas aleatoriamente en uno de los servidores disponibles y exploran las capacidades y utilizaciones de recursos disponibles durante aproximadamente 150 unidades de tiempo. Esta fase inicial de exploración muestra que la carga promedio de recursos de cada servidor tiene un nivel similar. Esto provoca una situación de sobrecarga en el servidor 1 debido a su baja capacidad de recursos compartidos, y una gran cantidad de recursos libres en el servidor 2. Los agentes que asignaron tareas al servidor 1 detectan la situación de sobrecarga y exploran de forma aleatoria otros servidores disponibles. Encuentran recursos gratuitos en el servidor 2. Después del período de aprendizaje, los agentes se han autoorganizado en este entorno estable y han encontrado una solución estable para la asignación de The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Tiempo 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (b) Carga de recursos servidor 0 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (c) Carga de recursos servidor 1 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 2 Figura 4: Resultados del experimento 1 en un entorno estático de 3 servidores promediados sobre 100 repeticiones. todas las tareas. La desviación estándar de las cargas de recursos es pequeña para cada servidor, lo que indica que nuestro enfoque distribuido encuentra soluciones estables en casi cada ejecución. Este experimento utilizó el algoritmo 2 para la selección del servidor activo. También realizamos el mismo experimento con el mecanismo de selección de recursos más libre para seleccionar el servidor activo. La asignación de recursos para cada servidor es similar. La cantidad absoluta de recursos gratuitos por servidor es casi la misma. El Experimento 2 se llevó a cabo en un entorno dinámico de 3 servidores con un total de 750 agentes. La cantidad de recursos del servidor 0 y del servidor 1 cambia periódicamente, mientras que la cantidad total de recursos disponibles permanece constante. El servidor 0 tiene una capacidad inicial de 1000 unidades, mientras que el servidor 1 comienza con una capacidad de 4000 unidades. El cambio en la capacidad comienza después de 150 unidades de tiempo, que es aproximadamente al final de la fase de aprendizaje. La figura 5 (b, c, d) muestra el comportamiento de nuestra asignación de recursos autoorganizada en este entorno. Todos los agentes utilizan el mecanismo de selección de recursos más libres determinístico para seleccionar el servidor activo. Se puede observar en la Fig. 5(b) y 5(c) que el número de recursos asignados al servidor 0 y al servidor 1 cambia periódicamente con la cantidad de recursos proporcionados. Esto demuestra que los agentes pueden percibir los recursos disponibles en este entorno dinámico y son capaces de adaptarse a esos cambios. El desarrollo de la carga de recursos del servidor 2 (ver Fig. 5(d)) muestra un cambio periódico porque algunos agentes intentan asignar tareas a este servidor en caso de que su servidor previamente preferido reduzca la cantidad de recursos compartidos. La carga total de recursos de todos los recursos compartidos es constante a lo largo de los experimentos, lo que indica que todos los agentes asignan sus tareas a uno de los recursos compartidos. Fig. 4(a)). 6.\nFig. 4(a)). 6. CONCLUSIONES Y TRABAJO FUTURO En este artículo se presentó una técnica de asignación de recursos distribuida autoorganizativa para sistemas multiagente. Permitimos a los agentes seleccionar la plataforma de ejecución para sus tareas ellos mismos antes de cada ejecución en tiempo de ejecución. En nuestro enfoque, los agentes compiten por una asignación en uno de los 0 500 1,000 1,500 2,000 Tiempo 0 2,500 5,000 7,500 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (b) Carga de recursos servidor 1 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (c) Carga de recursos servidor 2 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 3 Figura 5: Resultados del experimento 2 en un entorno de servidor dinámico promediado en 100 repeticiones. recurso compartido disponible. Los agentes perciben su entorno de servidor y adaptan sus acciones para competir de manera más eficiente en el nuevo entorno creado. Este proceso es adaptativo y tiene un fuerte retroalimentación, ya que las decisiones de asignación influencian indirectamente las decisiones de otros agentes. La asignación de recursos es un efecto puramente emergente. Nuestro mecanismo demuestra que la asignación de recursos puede ser realizada mediante la competencia efectiva de agentes individuales y autónomos. Ni necesitan coordinación o información de una autoridad superior ni se requiere una comunicación directa adicional entre agentes. Este mecanismo fue inspirado por el razonamiento inductivo y los principios de racionalidad limitada, lo que permite a los agentes adaptar sus estrategias para competir de manera efectiva en un entorno dinámico. En caso de que un servidor no esté disponible, los agentes pueden adaptarse rápidamente a esta nueva situación explorando nuevos recursos o permaneciendo en el servidor local si no es posible una asignación. Especialmente en entornos dinámicos y escalables como los sistemas de rejilla, se requiere un mecanismo robusto y distribuido para la asignación de recursos. Nuestro enfoque de asignación de recursos autoorganizados fue evaluado con una serie de experimentos de simulación en un entorno dinámico de agentes y recursos del servidor. Los resultados presentados para este nuevo enfoque de optimización de migración estratégica son muy prometedores y justifican una mayor investigación en un entorno real de sistema multiagente. Es una política distribuida, escalable y fácil de entender para la regulación de la oferta y la demanda de recursos. Todo el control se implementa en los agentes. Un mecanismo de decisión simple basado en diferentes creencias del agente crea un comportamiento emergente que conduce a una asignación efectiva de recursos. Este enfoque puede ser fácilmente ampliado o respaldado por mecanismos de equilibrio/cola de recursos proporcionados por los recursos. Nuestro enfoque se adapta a los cambios en el entorno pero no es evolutivo. No hay descubrimiento de nuevas estrategias por parte de los agentes. El conjunto de predictores permanece igual a lo largo de toda la vida. De hecho, creemos que esto podría mejorar aún más el comportamiento de los sistemas a lo largo de un período prolongado y podría ser el 80 The Sixth Intl. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) investigará en el futuro. La evolución sería muy lenta y selectiva y no influiría en el comportamiento del sistema en un período a corto plazo que está cubierto por nuestros resultados experimentales. En un futuro cercano investigaremos si es posible una adaptación automática de la tasa de decaimiento de la información histórica en nuestro algoritmo y si puede mejorar el rendimiento de la asignación de recursos. La tasa de descomposición está actualmente predefinida y debe ser alterada manualmente dependiendo del entorno. Un gran número de recursos compartidos requiere información histórica más antigua para evitar una exploración de recursos demasiado frecuente. Por el contrario, un entorno dinámico con capacidades variables requiere información más actualizada para realizar predicciones más fiables. Somos conscientes de la larga fase de aprendizaje en entornos con un gran número de recursos compartidos conocidos por cada agente. En caso de que los agentes soliciten más recursos de los que los servidores compartidos proporcionan, todos los agentes explorarán aleatoriamente todos los servidores conocidos. Este proceso de adquirir información de carga de recursos sobre todos los servidores puede llevar mucho tiempo en el caso de que no se proporcionen recursos compartidos suficientes para todas las tareas. En el peor de los casos, para cuando se explore todos los servidores, la información histórica de algunos servidores podría estar desactualizada y la exploración comenzará de nuevo. En esta situación, es difícil para un agente recopilar eficientemente información histórica sobre todos los servidores remotos. Este tema necesita más investigación en el futuro. REFERENCIAS [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel y J. Shalf. Herramientas de Cactus para Aplicaciones de Red. En Cluster Computing, volumen 4, páginas 179-188, Hingham, MA, EE. UU., 2001. Kluwer Academic Publishers. [2] W. B. Arthur.\nEditorial Kluwer Academic. [2] W. B. Arthur. Razonamiento inductivo y racionalidad limitada. American Economic Review (Papers and Proceedings), 84(2):406-411, mayo de 1994. [3] T. Bourke. Balanceo de carga del servidor. OReilly Media, 1ª edición, agosto de 2001. [4] R. Buyya. Gestión y programación de recursos distribuidos basada en economía para la computación en malla. Tesis doctoral, Universidad de Monash, Melbourne, Australia, mayo de 2002. [5] R. Buyya, D. Abramson, J. Giddy y H. Stockinger. Modelos económicos para la gestión de recursos y programación en la computación en malla. Número especial sobre Entornos de Computación en Red de la Revista Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin y D. DiNucci. Modelos arquitectónicos para la gestión de recursos en la red. En Actas del Primer Taller Internacional sobre Computación en Red, páginas 18-35. Springer LNCS, 2000. [7] T. L. Casavant y J. G. Kuhl. Una taxonomía de programación en sistemas informáticos distribuidos de propósito general. IEEE Transactions on Software Engineering, 14(2):141-154, febrero de 1988. [8] D. Challet y Y. Zhang. Aparición de la cooperación y la organización en un juego evolutivo. Physica A, 407(246), 1997. [9] K.-P. Chow y Y.-K. Kwok. En equilibrio de carga para computación multiagente distribuida. En IEEE Transactions on Parallel and Distributed Systems, volumen 13, páginas 787-801. IEEE, agosto de 2002. [10] S. H. Clearwater. Control basado en el mercado. Un paradigma para la asignación distribuida de recursos. World Scientific, Singapur, 1996. [11] C. Fl¨us. Planificación de capacidad de sistemas de agentes móviles para el diseño eficiente de aplicaciones de intranet. Tesis doctoral, Universidad de Duisburg-Essen (Alemania), febrero de 2005. [12] I. Foster y C. Kesselman. Globus: Un conjunto de herramientas de infraestructura de metacomputación. Revista Internacional de Aplicaciones de Supercomputación, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I. Foster, M. Livny y S. Tuecke. Condor-G: Un agente de gestión de computación para redes de múltiples instituciones. Computación en clúster, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar y K. Lerman. Juegos de asignación de recursos con capacidades de recursos cambiantes. En Actas de la segunda conferencia internacional conjunta sobre agentes autónomos y sistemas multiagente, páginas 145 - 152, Melbourne, Australia, 2003. ACM Press, Nueva York, NY, EE. UU. [15] C. Georgousopoulos y O. F. Rana. Combinando enfoques basados en el estado y en el modelo para el equilibrio de carga de agentes móviles. En SAC 03: Actas del simposio de computación aplicada de ACM de 2003, páginas 878-885, Nueva York, NY, EE. UU., 2003. ACM Press. [16] G. Mainland, D. C. Parkes y M. Welsh. Asignación descentralizada y adaptativa de recursos para redes de sensores. En Actas del 2º Simposio USENIX sobre Diseño e Implementación de Sistemas de Red (NSDI 05), mayo de 2005. [17] S. Manvi, M. Birje y B. Prasad. Un modelo de asignación de recursos basado en agentes para rejillas computacionales. Sistemas Multiagente y de Red - Una Revista Internacional, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham y M. Tennenholtz. Equilibrio de carga adaptativo: Un estudio en el aprendizaje multiagente. En Journal of Artificial Intelligence Research, volumen 2, páginas 475-500, 1995. [19] T. Schlegel, P. Braun y R. Kowalczyk. Hacia Agentes Móviles Autónomos con Comportamiento de Migración Emergente. En Actas de la Quinta Conferencia Internacional Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 2006), Hakodate (Japón), páginas 585-592. ACM Press, mayo de 2006. [20] W3C. Actividad de servicios web, 2002. http://www.w3.org/2002/ws - última visita 23.10.2006. [21] M. M. Waldrop. Complejidad: La ciencia emergente en el límite entre el orden y el caos. Simon & Schuster, 1ª edición, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik y T. Bryan. Analizando estrategias de asignación de recursos basadas en el mercado para la red computacional. En la Revista Internacional de Aplicaciones de Computación de Alto Rendimiento, volumen 15, páginas 258-281. Sage Science Press, 2001. \n\nEditorial Sage Science, 2001. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 81",
    "original_sentences": [
        "Towards Self-organising Agent-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
        "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
        "In this paper we propose a distributed algorithm that solves the resource allocation problem in distributed multiagent systems.",
        "Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer.",
        "The resource allocation in the system is a purely emergent effect.",
        "We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment.",
        "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
        "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
        "In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
        "It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
        "Hence, distributed solutions of the resource allocation problem are required.",
        "Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation.",
        "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
        "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
        "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].",
        "In this paper we propose a distributed solution of the resource allocation problem based on self-organisation of the resource consumers in a system with limited resources.",
        "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
        "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
        "All control needed for our algorithm is distributed among the agents in the system.",
        "They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
        "The only information available to all agents are resource load and allocation success information from past resource allocations.",
        "Additional resource load information about servers is not disseminated.",
        "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
        "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
        "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
        "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
        "The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-agent system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
        "This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11].",
        "Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.",
        "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
        "Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
        "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.",
        "Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.",
        "Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results.",
        "A summary, conclusion and outlook to future work finish this paper. 2.",
        "RELATED WORK Resource allocation is an important problem in the area of computer science.",
        "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
        "Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
        "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
        "The broker usually has full knowledge about all system resources.",
        "All incoming requests are directed to the broker who is the solely decision maker.",
        "In those approaches, the resource consumer cannot influence the allocation decision process.",
        "Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
        "This mechanism works best in a homogeneous system.",
        "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
        "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation.",
        "This technique can only provide a good supplement for distributed resource allocation mechanisms.",
        "Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
        "Those coordinators usually need to have global knowledge on the state of all system resources.",
        "An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
        "The value of distributed solutions for the resource allocation problem has been recognised by research [10].",
        "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
        "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
        "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
        "A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10].",
        "Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
        "The Agent based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
        "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
        "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
        "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
        "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
        "There has been considerable work on decentralised resource allocation techniques using game theory published over recent years.",
        "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
        "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
        "It is an ill-defined decision problem that assumes and models inductive reasoning.",
        "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
        "A variation of the El Farol problem is the so called minority game [8].",
        "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
        "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
        "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent.",
        "Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18].",
        "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
        "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
        "A resource allocation approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
        "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
        "A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks.",
        "Agents make their decisions themselves based on forecasts of the server utilisation.",
        "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
        "MODEL DESCRIPTION We model a distributed multi-agent system as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
        "Each agent has a number of tasks Ti that needs to be executed during its lifetime.",
        "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
        "Resources for the execution of tasks are provided by each server li.",
        "The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources.",
        "We write LS (ai) The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai.",
        "Resources in the system can be used by all agents for the execution of tasks.",
        "The amount of provided resources C(li, t) of each server can vary over time.",
        "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
        "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
        "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
        "In this case, some agents must wait with their allocation request until free resources are expected.",
        "The multi-agent system model used for our simulations is illustrated in Fig. 1. 4.",
        "SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each agent.",
        "The only information required in order to make a resource allocation decision for a task is the server utilisation from completed task allocations at those servers.",
        "There is no additional information dissemination about server resource utilisation or information about free resources.",
        "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
        "Additionally, we do not have any central controlling authority.",
        "All behaviour that leads to the resource allocation is created by the effective competition of the agents for shared resources and is a purely emergent effect.",
        "The agents in our multi-agent system compete for resources or a set of resources to execute tasks.",
        "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
        "Our approach is based on different agent beliefs, represented by predictors and different information about their environment.",
        "Agents prefer a task allocation at a server with free resources.",
        "However, there is no way to be sure of the amount of free server resources in advance.",
        "All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution.",
        "There is no communication between agents.",
        "Actions taken by agents influence the actions of other agents indirectly.",
        "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
        "It is derived from the human way of deciding ill-defined problems.",
        "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
        "Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation.",
        "All necessary control is integrated in the agents themselves.",
        "There is no higher controlling authority, management layer for decision support or information distribution.",
        "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
        "To do so, agents use historical information from past task allocations at those resources.",
        "Based on the forecasted resource utilisation, the agent will make its resource allocation decision.",
        "After the task has finished its execution and returned the results back to the agent, the predictor performances are evaluated and history information is updated.",
        "Algorithm 1 shows the resource allocation algorithm for each agent.",
        "The agent first predicts the next steps resource load for each server with historical information (line 3-7).",
        "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
        "The agent then evaluates if any free shared resources for the task allocation are expected.",
        "In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
        "This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available.",
        "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
        "One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load.",
        "Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
        "For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
        "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
        "The most recent history item is h0.",
        "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
        "Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
        "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
        "As the result, the server would have a large amount of free resources.",
        "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
        "An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a).",
        "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
        "This may change in the future as the resource load has significantly increased recently.",
        "In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation.",
        "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
        "Algorithm 1 Resource Allocation algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
        "A probability distribution is calculated from the confidence levels of the resource predictions.",
        "The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
        "The server with the highest confidence level has the biggest chance to be selected as the active server.",
        "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
        "The server with most expected free resources from the set L of server with expected free resources is chosen.",
        "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
        "However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation.",
        "In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
        "The agent will not allocate the task at a resource.",
        "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
        "After the agent execution has finished, the evaluation process described in algorithm 4 is preformed.",
        "This process is divided into three cases.",
        "First, the task was not allocated at a resource.",
        "In this case, the agent cannot decide if the decision not to allocate the task was correct or not.",
        "The agent then removes old historical data.",
        "This is necessary for a successful adaptation in the future.",
        "If the agent would not delete old historical information, the prediction would always forecast that no free resources are available.",
        "The agent would never allocate a task at one of the resources in the future.",
        "Old historical information is removed from the agents resource history using a decay rate.",
        "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
        "The current implementation uses a constant probability density function in a configurable domain.",
        "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
        "Depending on the environment, the probability density function must be altered.",
        "If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
        "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
        "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
        "The agent creates a new predictor set for this server and records the historical information.",
        "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource.",
        "The agent evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data.",
        "Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating.",
        "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation.",
        "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
        "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
        "Based on these performance ratings, the confidence levels are calculated using equation 4.",
        "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor.",
        "These values are transformed into a probability distribution.",
        "According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection.",
        "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels.",
        "Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor.",
        "This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
        "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
        "Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources.",
        "In fact, enough resources for the execution would be available.",
        "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
        "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
        "The oldest history data is overwritten if already m history values are recorded for the server.",
        "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor.",
        "This method assures that agents can compete more effectively in a changing environment.",
        "Different types of predictors are suitable for different situations and environments.",
        "Therefore, all predictors are being evaluated after each decision and the active predictor is selected.",
        "This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
        "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
        "Our self-organising approach is robust against failures of resources or agents in the system.",
        "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
        "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
        "The limitations are the reliance on historical resource utilisation information about other servers.",
        "A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource.",
        "If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers.",
        "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers.",
        "In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one.",
        "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
        "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
        "In the rest of the section, results of the experiments are presented and discussed.",
        "All experiments are conducted in a special testbed that simulates and models a multi-agent system.",
        "We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit.",
        "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
        "An event-driven model is used to trigger all activities in the system.",
        "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each agent.",
        "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
        "Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
        "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
        "The total resource load of the system is calculated as the sum of the resources load of all resources.",
        "The self-organising resource allocation algorithm has random elements.",
        "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process.",
        "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation.",
        "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
        "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
        "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server.",
        "The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources.",
        "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
        "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
        "For this time the task consumes the assigned amount of server resources.",
        "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
        "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
        "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism.",
        "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
        "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
        "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
        "The resource capacity of each server remains constant over the experiment.",
        "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
        "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
        "Figure 4 shows the results from 100 repetitions of this experiment.",
        "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
        "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
        "This initial exploration phase shows that the average resource load of each server has a similar level.",
        "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
        "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
        "They find free resources at server 2.",
        "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
        "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
        "This experiment used algorithm 2 for the selection of the active server.",
        "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
        "The resource allocation for each server is similar.",
        "The absolute amount of free resources per server is almost the same.",
        "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
        "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
        "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
        "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
        "Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment.",
        "All agents use the deterministic most free resources selection mechanism to select the active server.",
        "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
        "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
        "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
        "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
        "Fig. 4(a)). 6.",
        "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-agent systems was presented.",
        "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
        "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
        "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
        "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
        "The resource allocation is a purely emergent effect.",
        "Our mechanism demonstrates that resource allocation can be done by the effective competition of individual and autonomous agents.",
        "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
        "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
        "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
        "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required.",
        "Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
        "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-agent system environment.",
        "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
        "All control is implemented in the agents.",
        "A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective resource allocation.",
        "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
        "Our approach adapts to changes in the environment but it is not evolutionary.",
        "There is no discovery of new strategies by the agents.",
        "The set of predictors stays the same over the whole life.",
        "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future.",
        "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
        "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance.",
        "The decay rate is currently predefined and must be altered manually depending on the environment.",
        "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
        "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
        "We are aware of the long learning phase in environments with a large number of shared resources known by each agent.",
        "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
        "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
        "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
        "In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers.",
        "This issue needs more investigation in the future. 7.",
        "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
        "Cactus Tools for Grid Applications.",
        "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
        "Kluwer Academic Publishers. [2] W. B. Arthur.",
        "Inductive Reasoning and Bounded Rationality.",
        "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
        "Server Load Balancing.",
        "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
        "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
        "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
        "Economic Models for Resource Management and Scheduling in Grid Computing.",
        "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
        "Architectural Models for Resource Management in the Grid.",
        "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
        "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
        "A taxonomy of scheduling in general-purpose distributed computing systems.",
        "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
        "Emergence of Cooperation and Organization in an Evolutionary Game.",
        "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
        "On load balancing for distributed multiagent computing.",
        "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
        "IEEE, August 2002. [10] S. H. Clearwater.",
        "Market-based control.",
        "A Paradigm for Distributed Resource Allocation.",
        "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
        "Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications.",
        "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
        "Foster and C. Kesselman.",
        "Globus: A Metacomputing Infrastructure Toolkit.",
        "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
        "Foster, M. Livny, and S. Tuecke.",
        "Condor-G: A Computation Management Agent for Multi-Institutional Grids.",
        "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
        "Resource allocation games with changing resource capacities.",
        "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
        "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
        "Combining state and model-based approaches for mobile agent load balancing.",
        "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
        "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
        "Decentralized Adaptive Resource Allocation for Sensor Networks.",
        "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
        "An Agent-based Resource Allocation Model for Computational Grids.",
        "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
        "Adaptive Load Balancing: A Study in Multi-Agent Learning.",
        "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
        "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
        "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
        "ACM Press, May 2006. [20] W3C.",
        "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
        "Complexity: The Emerging Science at the Edge of Order and Chaos.",
        "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
        "Analyzing Market-Based Resource Allocation Strategies for the Computational Grid.",
        "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
        "Sage Science Press, 2001.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81"
    ],
    "translated_text_sentences": [
        "Hacia la asignación de recursos basada en agentes autoorganizados en un entorno de múltiples servidores. Tino Schlegel1, Ryszard Kowalczyk2. Universidad de Tecnología Swinburne, Facultad de Tecnologías de la Información y la Comunicación, Hawthorn, 3122 Victoria, Australia {tschlegel1, rkowalczyk2}@ict.swin.edu.au. RESUMEN Las aplicaciones distribuidas requieren técnicas distribuidas para una asignación eficiente de recursos.",
        "Estas técnicas deben tener en cuenta la heterogeneidad y la posible falta de fiabilidad de los recursos y consumidores de recursos en entornos distribuidos.",
        "En este artículo proponemos un algoritmo distribuido que resuelve el problema de asignación de recursos en sistemas multiagentes distribuidos.",
        "Nuestra solución se basa en la autoorganización de agentes, la cual no requiere ningún facilitador o capa de gestión.",
        "La asignación de recursos en el sistema es un efecto puramente emergente.",
        "Presentamos los resultados del mecanismo de asignación de recursos propuesto en el entorno simulado de servidores múltiples estáticos y dinámicos.",
        "Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Coherencia y coordinación Términos Generales Algoritmos 1.",
        "INTRODUCCIÓN Con la creciente popularidad de tecnologías de computación distribuida como Grid [12] y servicios web [20], Internet se está convirtiendo en una plataforma informática poderosa donde diferentes pares de software (por ejemplo, agentes) pueden utilizar recursos informáticos existentes para realizar tareas.",
        "En este sentido, cada agente es un consumidor de recursos que adquiere una cierta cantidad de recursos para la ejecución de sus tareas.",
        "Es difícil para un mecanismo central de asignación de recursos recopilar y gestionar la información sobre todos los recursos compartidos y consumidores de recursos para realizar de manera efectiva la asignación de recursos.",
        "Por lo tanto, se requieren soluciones distribuidas del problema de asignación de recursos.",
        "Los investigadores han reconocido estos requisitos [10] y han propuesto técnicas para la asignación de recursos distribuidos.",
        "Un tipo prometedor de enfoques distribuidos se basa en modelos de mercado económico [4], inspirados en los principios de los mercados de valores reales.",
        "Aunque esos enfoques estén distribuidos, generalmente requieren un facilitador para la fijación de precios, la búsqueda de recursos y la asignación de trabajos a los recursos [5, 9].",
        "Otro problema principalmente sin resolver de esos enfoques es el ajuste fino del precio y el tiempo, las restricciones presupuestarias para permitir una asignación eficiente de recursos en sistemas grandes y dinámicos [22].",
        "En este documento proponemos una solución distribuida del problema de asignación de recursos basada en la autoorganización de los consumidores de recursos en un sistema con recursos limitados.",
        "En nuestro enfoque, los agentes asignan dinámicamente tareas a servidores que proporcionan una cantidad limitada de recursos.",
        "En nuestro enfoque, los agentes seleccionan de forma autónoma la plataforma de ejecución para la tarea en lugar de pedir a un intermediario de recursos que realice la asignación.",
        "Todo el control necesario para nuestro algoritmo está distribuido entre los agentes en el sistema.",
        "Optimizan continuamente el proceso de asignación de recursos a lo largo de su vida para adaptarse a los cambios en la disponibilidad de recursos compartidos, aprendiendo de decisiones de asignación pasadas.",
        "La única información disponible para todos los agentes son la carga de recursos y la información sobre el éxito de la asignación de recursos de asignaciones pasadas.",
        "La información adicional sobre la carga de recursos de los servidores no se difunde.",
        "El concepto básico de nuestra solución está inspirado en el razonamiento inductivo y la racionalidad limitada introducida por W. Brian Arthur [2].",
        "El mecanismo propuesto no requiere una autoridad central de control, una capa de gestión de recursos o introducir comunicación adicional entre agentes para decidir qué tarea se asigna en qué servidor.",
        "Demostramos que este mecanismo funciona bien en sistemas dinámicos con un gran número de tareas y puede adaptarse fácilmente a diferentes tamaños de sistemas.",
        "Además, el rendimiento general del sistema no se ve afectado en caso de que los agentes o servidores fallen o no estén disponibles.",
        "El enfoque propuesto proporciona una forma sencilla de implementar la asignación de recursos distribuidos y tiene en cuenta las tendencias del sistema multiagente hacia la autonomía, la heterogeneidad y la falta de fiabilidad de los recursos y agentes.",
        "Esta técnica propuesta puede ser fácilmente complementada por técnicas para encolar o rechazar solicitudes de asignación de recursos de agentes [11].",
        "Tales capacidades de auto-gestión de agentes de software permiten una asignación de recursos confiable incluso en un entorno con proveedores de recursos poco confiables.",
        "Esto se puede lograr mediante las interacciones mutuas entre agentes aplicando técnicas de la teoría de sistemas complejos.",
        "La autoorganización de todos los agentes conduce a una autoorganización de los recursos del sistema 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS y es una propiedad emergente del sistema [21].",
        "El resto del documento está estructurado de la siguiente manera: La siguiente sección proporciona una visión general del trabajo relacionado ya realizado en el área de equilibrio de carga, asignación de recursos o programación.",
        "La sección 3 describe el modelo de un entorno multiagente que se utilizó para realizar simulaciones con el fin de evaluar el rendimiento.",
        "Las secciones 4 y 5 describen el algoritmo de asignación de recursos distribuidos y presentan varios resultados experimentales.",
        "Un resumen, una conclusión y una perspectiva del trabajo futuro finalizan este documento.",
        "El trabajo relacionado La asignación de recursos es un problema importante en el área de la informática.",
        "En los últimos años, diferentes grupos de investigación han propuesto soluciones basadas en diferentes suposiciones y restricciones [7, 3, 15, 10].",
        "En términos generales, la asignación de recursos es un mecanismo o política para la gestión eficiente y efectiva del acceso a un recurso limitado o conjunto de recursos por parte de sus consumidores.",
        "En el caso más simple, los consumidores de recursos solicitan a un intermediario central o despachador los recursos disponibles donde el consumidor de recursos será asignado.",
        "El corredor generalmente tiene pleno conocimiento de todos los recursos del sistema.",
        "Todas las solicitudes entrantes son dirigidas al corredor, quien es el único tomador de decisiones.",
        "En esos enfoques, el consumidor de recursos no puede influir en el proceso de decisión de asignación.",
        "El equilibrio de carga [3] es un caso especial del problema de asignación de recursos que utiliza un intermediario que intenta ser justo con todos los recursos al equilibrar la carga del sistema de manera equitativa entre todos los proveedores de recursos.",
        "Este mecanismo funciona mejor en un sistema homogéneo.",
        "Una técnica distribuida simple para la gestión de recursos es la planificación de capacidad mediante la negativa o encolamiento de agentes entrantes para evitar la sobrecarga de recursos [11].",
        "Desde la perspectiva del propietario de recursos, esta técnica es importante para prevenir la sobrecarga en el recurso, pero no es suficiente para una asignación efectiva de recursos.",
        "Esta técnica solo puede proporcionar un buen complemento para los mecanismos de asignación de recursos distribuidos.",
        "La mayoría de las técnicas actuales para la asignación de recursos en herramientas de computación en malla como Globus [12] o Condor-G [13] coordinan la asignación de recursos con un subastador, árbitro, despachador, programador o gestor.",
        "Esos coordinadores suelen necesitar tener conocimiento global sobre el estado de todos los recursos del sistema.",
        "Un ejemplo de un algoritmo de asignación de recursos dinámicos es el proyecto Cactus [1] para la asignación de trabajos computacionales muy costosos.",
        "El valor de las soluciones distribuidas para el problema de asignación de recursos ha sido reconocido por la investigación [10].",
        "Inspirados en los principios de los mercados de valores, se han desarrollado modelos de mercado económico para negociar recursos con el fin de regular la oferta y la demanda en la red.",
        "Estos enfoques utilizan diferentes estrategias de precios como modelos de precios publicados, diferentes métodos de subasta o un modelo de mercado de productos básicos.",
        "Los usuarios intentan comprar recursos baratos necesarios para ejecutar el trabajo, mientras que los proveedores intentan obtener la mayor ganancia posible y operar los recursos disponibles a plena capacidad.",
        "Se presenta una colección de diferentes técnicas de asignación de recursos distribuidos basadas en modelos de mercado en Clearwater [10].",
        "Buyya et al. desarrollaron un marco de asignación de recursos basado en la regulación de la oferta y la demanda [4] para Nimrod-G [6] con el enfoque principal en los plazos de entrega de trabajos y las restricciones presupuestarias.",
        "El Modelo de Asignación de Recursos basado en Agentes (ARAM) para redes está diseñado para programar trabajos computacionalmente costosos utilizando agentes.",
        "La desventaja de este modelo es el extenso uso de intercambio de mensajes entre agentes para monitoreo periódico e intercambio de información dentro de la estructura jerárquica.",
        "Las subtareas de un trabajo migran a través de la red hasta que encuentran un recurso que cumpla con las restricciones de precio.",
        "El itinerario de migración de trabajos está determinado por los recursos que los conectan en diferentes topologías [17].",
        "El mecanismo propuesto en este documento elimina la necesidad de intercambio periódico de información sobre las cargas de recursos y no requiere una topología de conexión entre los recursos.",
        "Se ha realizado un considerable trabajo sobre técnicas de asignación descentralizada de recursos utilizando teoría de juegos publicado en los últimos años.",
        "La mayoría de ellos están formulados como juegos repetitivos en un entorno idealista y simplificado.",
        "Por ejemplo, Arthur introdujo el problema del bar El Farol, que no permite una solución perfecta, lógica y racional.",
        "Es un problema de decisión mal definido que asume y modela el razonamiento inductivo.",
        "Probablemente sea uno de los ejemplos más estudiados de sistemas adaptativos complejos derivados de la forma en que los humanos deciden problemas mal definidos.",
        "Una variación del problema de El Farol es el llamado juego de la minoría [8].",
        "En este juego de decisión repetitivo, un número impar de agentes debe elegir entre dos recursos basándose en información de éxito pasado, tratando de asignarse al recurso con la minoría.",
        "Galstyan et al. [14] estudiaron una variación con más de dos recursos, cambiando las capacidades de los recursos y la información de los agentes vecinos.",
        "Demostraron que los agentes pueden adaptarse de manera efectiva a las capacidades cambiantes en este entorno utilizando un conjunto de simples tablas de búsqueda (estrategias) por agente.",
        "Otra técnica distribuida que se emplea para resolver el problema de asignación de recursos se basa en el aprendizaje por refuerzo [18].",
        "Similar a nuestro enfoque, un conjunto de agentes compiten por un número limitado de recursos basados únicamente en experiencias individuales previas.",
        "En este documento, el objetivo del sistema es maximizar el rendimiento del sistema garantizando la equidad de los recursos, medida como el tiempo promedio de procesamiento por unidad de trabajo.",
        "Se presenta un enfoque de asignación de recursos para redes de sensores basado en técnicas de autoorganización y aprendizaje por refuerzo en [16], con un enfoque principal en la optimización del consumo de energía de los nodos de la red.",
        "Propusimos un enfoque de equilibrio de carga autoorganizado para un único servidor con el objetivo de optimizar los costos de comunicación de agentes móviles.",
        "Un agente móvil rechazará una migración a un servidor de agente remoto si espera que el servidor de destino ya esté sobrecargado por otros agentes o tareas del servidor.",
        "Los agentes toman sus decisiones por sí mismos basándose en pronósticos de la utilización del servidor.",
        "En este documento se presenta una solución para un entorno de múltiples servidores sin tener en cuenta los costos de comunicación o migración. 3.",
        "DESCRIPCIÓN DEL MODELO Modelamos un sistema multiagente distribuido como una red de servidores L = {l1, . . . , lm}, agentes A = {a1, . . . , an} y tareas T = {T1, ..., Tm}.",
        "Cada agente tiene un número de tareas Ti que deben ser ejecutadas durante su vida útil.",
        "Una tarea Ti requiere U(Ti, t) recursos para su ejecución en el tiempo t, independientemente de su servidor de ejecución.",
        "Los recursos para la ejecución de tareas son proporcionados por cada servidor li.",
        "La ubicación de la ejecución de las tareas en general está especificada por el mapa L: T × t → L. Un agente debe conocer la existencia de recursos del servidor para asignar tareas en esos recursos.",
        "Escribimos LS (ai) The Sixth Intl.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 75 Recursos del Sistema Anfitrión l4 Anfitrión l3 Anfitrión l2 2a 3a 4a a Anfitrión l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figura 1: Una ilustración de nuestro modelo de múltiples servidores con recursos exclusivos y compartidos para la ejecución del agente. para abordar el conjunto de recursos conocidos por el agente ai.",
        "Los recursos en el sistema pueden ser utilizados por todos los agentes para la ejecución de tareas.",
        "La cantidad de recursos proporcionados C(li, t) de cada servidor puede variar con el tiempo.",
        "La utilización de recursos de un servidor en el tiempo t se calcula utilizando la ecuación 1, sumando el consumo de recursos U(Tj, t) de cada tarea Tj que se ejecuta en el recurso en el tiempo t. Todas las unidades de recursos utilizadas en nuestro modelo representan métricas reales como memoria o ciclos de procesador.",
        "Además del caso en que la cantidad total de recursos del sistema es suficiente para ejecutar todas las tareas, también nos interesa el caso en que no se proporcionan suficientes recursos del sistema para cumplir con todas las solicitudes de asignación.",
        "Es decir, la capacidad total de recursos compartidos es menor que la cantidad de recursos solicitados por los agentes.",
        "En este caso, algunos agentes deben esperar con su solicitud de asignación hasta que se esperen recursos libres.",
        "El modelo de sistema multiagente utilizado para nuestras simulaciones está ilustrado en la Figura 1.4.",
        "ASIGNACIÓN DE RECURSOS AUTOORGANIZADA El algoritmo de asignación de recursos descrito en esta sección está integrado en cada agente.",
        "La única información necesaria para tomar una decisión de asignación de recursos para una tarea es la utilización del servidor de las asignaciones de tareas completadas en esos servidores.",
        "No hay una difusión adicional de información sobre la utilización de recursos del servidor o información sobre recursos libres.",
        "Nuestra solución demuestra que los agentes pueden autoorganizarse en un entorno dinámico sin necesidad de información de monitoreo activo que genere una gran sobrecarga de tráfico en la red.",
        "Además, no tenemos ninguna autoridad central de control.",
        "Todo comportamiento que conduce a la asignación de recursos es creado por la competencia efectiva de los agentes por recursos compartidos y es un efecto puramente emergente.",
        "Los agentes en nuestro sistema multiagente compiten por recursos o un conjunto de recursos para ejecutar tareas.",
        "La acción colectiva de estos agentes cambia el entorno y, con el paso del tiempo, tienen que adaptarse a estos cambios para competir de manera más efectiva en el entorno recién creado.",
        "Nuestro enfoque se basa en diferentes creencias de los agentes, representadas por predictores y diferente información sobre su entorno.",
        "Los agentes prefieren una asignación de tareas en un servidor con recursos disponibles.",
        "Sin embargo, no hay forma de estar seguro de la cantidad de recursos del servidor disponibles de antemano.",
        "Todos los agentes tienen las mismas preferencias y un agente asignará una tarea en un servidor si espera tener suficientes recursos libres para su ejecución.",
        "No hay comunicación entre agentes.",
        "Las acciones tomadas por los agentes influyen en las acciones de otros agentes de forma indirecta.",
        "El mecanismo aplicado está inspirado en el razonamiento inductivo y los principios de racionalidad limitada [2].",
        "Se deriva de la forma humana de resolver problemas mal definidos.",
        "Los humanos tienden a tener en cuenta muchas hipótesis y actuar en base a la más plausible.",
        "Por lo tanto, cada agente lleva un registro del rendimiento de una colección privada de sus predictores y selecciona aquel que actualmente sea más prometedor para la toma de decisiones. 4.1 Algoritmo de asignación de recursos Esta sección describe el mecanismo de decisión para nuestra asignación de recursos autoorganizada.",
        "Todo el control necesario está integrado en los propios agentes.",
        "No hay una autoridad superior de control, capa de gestión para apoyo en la toma de decisiones o distribución de información.",
        "Todos los agentes tienen un conjunto de predictores para cada recurso con el fin de pronosticar la futura utilización de estos servidores para la asignación potencial de tareas.",
        "Para hacerlo, los agentes utilizan información histórica de asignaciones de tareas pasadas en esos recursos.",
        "Basándose en la utilización de recursos pronosticada, el agente tomará su decisión de asignación de recursos.",
        "Después de que la tarea haya finalizado su ejecución y devuelto los resultados al agente, se evalúan las actuaciones del predictor y se actualiza la información histórica.",
        "El Algoritmo 1 muestra el algoritmo de asignación de recursos para cada agente.",
        "El agente primero predice la carga de recursos de los próximos pasos para cada servidor con información histórica (línea 3-7).",
        "Si la carga de recursos predicha más el consumo de recursos de las tareas está por debajo de la última capacidad de servidor conocida, este servidor se agrega a la lista de candidatos para la asignación.",
        "El agente luego evalúa si se esperan recursos compartidos gratuitos para la asignación de tareas.",
        "En el caso de que no se esperen recursos gratuitos (línea 9), el agente explorará los recursos asignando la tarea a un servidor seleccionado al azar de entre todos los servidores no predecibles para recopilar información sobre la carga de recursos.",
        "Este es el caso estándar al comienzo del ciclo de vida del agente, ya que no hay información disponible sobre el entorno.",
        "La predicción de la carga de recursos en sí misma utiliza un conjunto de r predictores P(a, l) := {pi|1 ≤ i ≤ r} por servidor.",
        "Uno de los predictores pA ∈ P de cada conjunto se llama predictor activo, el cual pronostica la carga de recursos de los próximos pasos.",
        "Cada predictor es una función P: H → ℵ+ ∪ {0} del espacio de datos históricos H a un número entero no negativo, que es el valor pronosticado.",
        "Por ejemplo, un predictor podría pronosticar una carga de recursos igual a la cantidad promedio de recursos ocupados durante la última ejecución en este recurso.",
        "Un historial H de información de carga de recursos es una lista de hasta m elementos de historial hi = (xi, yi), que incluyen la fecha de observación xi y el valor observado yi.",
        "El elemento más reciente del historial es h0.",
        "Nuestro algoritmo utiliza un conjunto de predictores en lugar de solo uno, para evitar que todos los agentes tomen la misma decisión basada en el valor predicho, lo que invalidaría sus creencias.",
        "Imagina que solo un recurso compartido es conocido por un número de agentes que utilizan un predictor para pronosticar el 76 The Sixth Intl.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Carga de Recursos Tiempo (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figura 2: (a) Información de carga de recursos recopilada de asignaciones de tareas anteriores que se utiliza para predicciones futuras. (b) Distribución de probabilidad de los predictores para seleccionar el nuevo predictor activo. mismo valor que la última utilización conocida de recursos del servidor.",
        "Todos los agentes que asignaron una tarea en un servidor que estaba ligeramente sobrecargado rechazarían otra asignación en este servidor, ya que esperan que el servidor vuelva a estar sobrecargado según las predicciones.",
        "Como resultado, el servidor tendría una gran cantidad de recursos libres.",
        "Un conjunto de diferentes predictores que predicen diferentes valores evita esta situación de invalidar las creencias de los agentes [19].",
        "Un ejemplo de información de carga de recursos recopilada de las últimas 5 visitas de un agente a un recurso compartido se puede ver en la Figura 2(a).",
        "Muestra que el recurso fue visitado con frecuencia, lo que significa que había recursos gratuitos disponibles para la ejecución y no era necesario explorar otros servidores.",
        "Esto puede cambiar en el futuro ya que la carga de recursos ha aumentado significativamente recientemente.",
        "En el caso en que el conjunto de servidores que se predice que tienen recursos disponibles no esté vacío (línea 13), el agente selecciona uno de ellos para su asignación.",
        "Hemos implementado dos algoritmos alternativos para la selección de un servidor para la asignación de tareas.",
        "Algoritmo 1 Algoritmo de asignación de recursos de un agente 1 L ← ∅ //servidor con recursos libres 2 u ← U(T, t + 1) //consumo de recursos de la tarea 3 para todo P(a, l)|l ∈ LS (a) hacer 4 U(l) ← predicción de carga de recursos (P(a, l), t + 1) 5 si U(l) + u ≤ C(l) entonces 6 L ← L ∪ {P(a, l)} 7 fin si 8 fin para 9 si L = ∅ entonces 10 //todos los recursos compartidos impredecibles 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← un elemento aleatorio de E 13 else 14 allocationServer ← selección de servidor (L) 15 fin si 16 devolver allocationServer El Algoritmo 2 muestra el primer método, que es una selección no determinista según la previsibilidad de la utilización de recursos del servidor.",
        "Una distribución de probabilidad se calcula a partir de los niveles de confianza de las predicciones de recursos.",
        "El nivel de confianza depende de tres factores: la precisión del predictor activo, la cantidad de información histórica sobre el servidor y la edad promedio de la información histórica (ver Ecuación 3).",
        "El servidor con el nivel de confianza más alto tiene la mayor probabilidad de ser seleccionado como el servidor activo.",
        "G(P) = w1 · tamaño(H) m + w2 · Edad(H) máx Edad(H) + w3 · g(p) máx (g(p)) (3) donde: wi − pesos tamaño(H) − número de datos en el historial m − número máximo de valores históricos Edad(H) − edad promedio de los datos históricos g(p) − ver ecuación 4 Algoritmo 2 selecciónServidor(L) - mejor servidor predecible 1 para todos los P(a, l) ∈ L hacer 2 calcular G(P) 3 fin para 4 transformar todos los G(P) en una distribución de probabilidad 5 devolver l ∈ LS seleccionado de acuerdo con la distribución de probabilidad Algoritmo 3 selecciónServidor(L) - más recursos libres 1 para todos los P(a, l) ∈ L hacer 2 c(l) ← C(l) − Ul 3 fin para 4 devolver l ∈ LS |c(l) es máximo El segundo método de selección alternativo de un servidor del conjunto de servidores predichos con recursos libres es determinista y se muestra en el algoritmo 3.",
        "Se elige el servidor con la mayor cantidad esperada de recursos gratuitos del conjunto L de servidores con recursos gratuitos esperados.",
        "En el caso en que todos los agentes predigan que hay más recursos disponibles en un servidor en particular, todos los agentes asignarán la tarea a este servidor, lo que invalidaría las creencias de los agentes.",
        "Sin embargo, nuestros experimentos muestran que la información de historial individual y la selección no determinista del predictor activo generalmente evitan esta situación.",
        "En caso de que el algoritmo de asignación de recursos no devuelva ningún servidor (Alg. 1, línea 16), no se recomienda asignar un recurso.",
        "El agente no asignará la tarea a un recurso.",
        "Este caso ocurre solo si es posible predecir la carga de recursos para todos los servidores pero no se esperan recursos libres.",
        "Después de que la ejecución del agente haya finalizado, se realiza el proceso de evaluación descrito en el algoritmo 4.",
        "Este proceso se divide en tres casos.",
        "Primero, la tarea no fue asignada a un recurso.",
        "En este caso, el agente no puede decidir si la decisión de no asignar la tarea fue correcta o no.",
        "El agente luego elimina los datos históricos antiguos.",
        "Esto es necesario para una adaptación exitosa en el futuro.",
        "Si el agente no eliminara la información histórica antigua, la predicción siempre pronosticaría que no hay recursos disponibles gratuitos.",
        "El agente nunca asignaría una tarea a uno de los recursos en el futuro.",
        "La información histórica antigua se elimina del historial de recursos de los agentes utilizando una tasa de descomposición.",
        "La tasa de decaimiento es una función de distribución acumulativa que calcula la probabilidad de que un elemento histórico sea eliminado después de haber alcanzado un cierto The Sixth Intl.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 77 Edad de los datos históricos Tasa de decaimiento 0 1 más antiguo Figura 3: Tasa de decaimiento de la edad de la información histórica.",
        "La implementación actual utiliza una función de densidad de probabilidad constante en un dominio configurable.",
        "La Figura 3 muestra un ejemplo de una función de distribución acumulativa para la tasa de decaimiento.",
        "Dependiendo del entorno, la función de densidad de probabilidad debe ser modificada.",
        "Si el número de servidores potenciales por agente es alto, la información histórica debe mantenerse por más tiempo para evitar la exploración de recursos no explorados.",
        "Además, un entorno dinámico requiere información más actualizada para realizar predicciones más fiables.",
        "El segundo caso en el proceso de evaluación (Alg. 4, línea 5) describe las acciones tomadas después de que un servidor fue visitado por primera vez.",
        "El agente crea un nuevo conjunto de predictores para este servidor y registra la información histórica.",
        "Todos los predictores para este conjunto son elegidos al azar de un conjunto predefinido. g(p) = l i=0 ri (4) donde: ri = ⎧ ⎨ ⎩ 1 si la decisión i-ésima es correcta 0 si el resultado i-ésimo es desconocido −1 si la decisión i-ésima es incorrecta El caso general (Alg. 4, línea 8) es la evaluación después de que el agente asignó la tarea a un recurso.",
        "El agente evalúa todos los predictores del conjunto de predictores para este recurso al predecir la carga del recurso con todos los predictores basados en los datos históricos antiguos.",
        "Los predictores que hicieron una predicción correcta, lo que significa que la asignación de recursos fue correcta, recibirán una calificación positiva.",
        "Este es el caso en el que el recurso no estaba sobrecargado y se predijeron recursos libres para la ejecución, o el recurso estaba sobrecargado y este predictor habría evitado la asignación.",
        "Todos los predictores que predijeron valores que llevarían a decisiones incorrectas recibirán calificaciones negativas.",
        "En todos los demás casos, que incluye cuando no era posible hacer una predicción, se otorga una calificación neutral a los pronosticadores.",
        "Basándose en estas calificaciones de rendimiento, los niveles de confianza se calculan utilizando la ecuación 4.",
        "La confianza para todos los predictores que no pueden predecir con la información histórica actual sobre el servidor se establece en cero para evitar la selección de estos como el nuevo predictor activo.",
        "Estos valores se transforman en una distribución de probabilidad.",
        "Según esta distribución de probabilidad, el nuevo predictor activo se elige e implementa mediante una selección de ruleta.",
        "La Figura 2(b) ilustra las probabilidades de un conjunto de 10 predictores, las cuales han sido calculadas a partir de los niveles de confianza de los predictores.",
        "Aunque el predictor 9 tiene la probabilidad de selección más alta, no fue elegido por el proceso de selección de la ruleta como el predictor activo.",
        "Esta selección no determinista de predictores evita la invalidación de las creencias de los agentes en caso de que los agentes tengan el mismo conjunto de predictores.",
        "La precisión de la predicción, que es el error de la predicción en comparación con el valor observado, no se tiene en cuenta.",
        "Supongamos que el predictor activo predice ligeramente por encima de la capacidad de recursos, lo que no conduce a una asignación de recursos.",
        "De hecho, habría suficientes recursos disponibles para la ejecución.",
        "Una predicción menos precisa que está muy por debajo de la capacidad llevaría a la decisión correcta y, por lo tanto, es preferible.",
        "La última acción del algoritmo de evaluación (Alg. 4, línea 22) actualiza el historial con la información más reciente de carga de recursos del servidor.",
        "Los datos de la historia más antigua se sobrescriben si ya se han registrado m valores de historia para el servidor.",
        "Algoritmo 4 Evaluación de Decisiones 1 si l ∈ LE entonces 2 para todos los P(a, l)|l ∈ LS (a) hacer 3 evaporar datos históricos antiguos 4 fin para 5 sino si P(a, l) = nulo entonces 6 crear (P(a, l)) 7 actualizar H(l) 8 sino 9 para todos los p ∈ P(a, l) hacer 10 pred ← predicción de carga de recursos(p) 11 si (U(l) ≤ C(l) Y pred + U(a, t) ≤ C(l)) O (U(l) > C(l) Y pred + U(a, t) > C(l)) entonces 12 agregar calificación positiva(p) 13 sino si U(l) ≤ C(l) Y pred + U(a, t) > C(l) O U(l) ≤ C(l) Y pred + U(a, t) > C(l) entonces 14 agregar calificación negativa(p) 15 sino 16 agregar calificación neutral(p) 17 fin si 18 fin para 19 calcular todos los g(p); g(p) ← 0, si p no está funcionando 20 transformar todos los g(p) en una distribución de probabilidad 21 pA ← p ∈ P(a, l) es seleccionado de acuerdo a esta distribución de probabilidad 22 actualizar H(l) 23 fin si 4.2 Observaciones y Limitaciones del Enfoque Nuestro mecanismo de predicción utiliza varios tipos de predictores simples en lugar de uno sofisticado.",
        "Este método asegura que los agentes puedan competir de manera más efectiva en un entorno cambiante.",
        "Diferentes tipos de predictores son adecuados para diferentes situaciones y entornos.",
        "Por lo tanto, todos los predictores se evalúan después de cada decisión y se selecciona el predictor activo.",
        "Este carácter no determinista del nuevo predictor activo respalda que las creencias de los agentes no serán invalidadas, lo cual ocurre en el caso de que todos los predictores estén tomando la misma decisión.",
        "Especialmente si solo hay un recurso compartido disponible y todos los agentes tienen la opción de ir a este recurso compartido o no [19].",
        "Nuestro enfoque de autoorganización es robusto frente a fallos de recursos o agentes en el sistema.",
        "Si se unen o se van, el sistema puede autoorganizarse rápidamente y adaptarse a las nuevas condiciones.",
        "No hay cuellos de botella clásicos ni un único punto de falla como en los mecanismos centralizados.",
        "Las limitaciones son la dependencia de la información de utilización de recursos históricos de otros servidores.",
        "Un pronóstico de la utilización de recursos de un servidor remoto solo es posible si un agente tiene una cantidad de información histórica sobre un recurso compartido.",
        "Si el número de servidores por agente es muy grande, no hay una manera eficiente de recopilar información histórica sobre los servidores remotos.",
        "Este problema ocurre si la cantidad de recursos compartidos proporcionados es de 78.",
        "La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) es limitada y no es suficiente para todos los consumidores de recursos.",
        "En este caso, un agente intentaría aleatoriamente todos los servidores conocidos hasta encontrar uno con recursos disponibles o no haya ninguno.",
        "En el peor de los casos, para cuando se prueben todos los servidores, la información histórica de los servidores ya estará desactualizada.",
        "EVALUACIÓN EXPERIMENTAL La primera parte de esta sección ofrece un breve resumen de la configuración de nuestro entorno de simulación.",
        "En el resto de la sección, se presentan y discuten los resultados de los experimentos.",
        "Todos los experimentos se llevan a cabo en un banco de pruebas especial que simula y modela un sistema multiagente.",
        "Hemos implementado este banco de pruebas en el lenguaje de programación Java, independiente de cualquier conjunto de herramientas de agente específico.",
        "Permite una variedad de experimentos en entornos estables y dinámicos con un número configurable de agentes, tareas y servidores.",
        "Se utiliza un modelo basado en eventos para activar todas las actividades en el sistema.",
        "Para todas las simulaciones, limitamos el número de datos históricos para cada servidor a 10, el número de calificaciones de rendimiento por predictor a 10 y asignamos 10 predictores a cada conjunto de predictores para cada agente.",
        "Todos los predictores son elegidos al azar de un conjunto predefinido arbitrario de 32 predictores del siguiente tipo.",
        "Los predictores difieren en diferentes ciclos o tamaños de ventana. - Predictor de n-ciclos: p(n) = yn utiliza el valor de la historia en la posición n-ésima desde el final. - Predictor de n-media: p(n) = 1 n · n i=1 yi utiliza el valor medio de los n últimos valores de la historia. - Predictor de regresión lineal de n: p(n, t) = a·t+b utiliza el valor de regresión lineal de los últimos n valores de la historia, donde a, b se calculan utilizando regresión lineal con ajuste de mínimos cuadrados considerando los últimos n datos de la historia. - Predictor de distribución de n: utiliza un valor aleatorio de la distribución de frecuencia de los n últimos valores de la historia. - Predictor de espejo de n: p(n) = 2 · H − yn utiliza la imagen de espejo alrededor de la media de todos los valores de la historia del n-ésimo valor de la historia. La eficiencia de nuestra propuesta de asignación de recursos autoorganizada se evalúa mediante el desarrollo de carga de recursos de cada servidor durante la simulación, así como el desarrollo acumulado de carga de recursos totales sobre todos los recursos compartidos.",
        "Las cargas de recursos para cada servidor se calculan utilizando la ecuación 1 como la suma del consumo de recursos de todos los agentes actualmente ejecutados en este servidor.",
        "La carga total de recursos del sistema se calcula como la suma de la carga de recursos de todos los recursos.",
        "El algoritmo de asignación de recursos autoorganizado tiene elementos aleatorios.",
        "Por lo tanto, los resultados presentados muestran valores medios y desviación estándar calculados sobre 100 experimentos repetidos. 5.1 Configuración Experimental Los siguientes parámetros tienen un impacto en el proceso de asignación de recursos.",
        "Damos una visión general de los parámetros y una breve descripción. - Agentes: El número de agentes involucrados en la asignación de recursos.",
        "Este número varía en los experimentos entre 650 y 750 dependiendo de la cantidad total de recursos del sistema disponibles. - Consumo de recursos: Cada tarea consume recursos del servidor para su ejecución.",
        "El consumo de recursos se asigna aleatoriamente a cada tarea antes de su asignación de un intervalo.",
        "El consumo de recursos se especifica en unidades de recursos que corresponden a métricas del mundo real como la memoria o los ciclos del procesador. - Servidor de inicio de agentes: Todos los agentes se encuentran en un servidor de inicio de agentes.",
        "Los recursos de esos servidores no son considerados en nuestra simulación y no afectan el rendimiento de la asignación de recursos. - Recursos del servidor: Los experimentos utilizan servidores con diferentes cantidades de recursos compartidos disponibles.",
        "El primer experimento se lleva a cabo en un entorno de servidor estático que proporciona la misma cantidad de recursos compartidos, mientras que el otro experimento varía los recursos de servidor disponibles durante la simulación.",
        "La cantidad total de recursos permanece constante en ambos experimentos. - Tiempo de ejecución: El tiempo de ejecución de una tarea para la ejecución, independiente de la plataforma de ejecución.",
        "Por esta vez, la tarea consume la cantidad asignada de recursos del servidor.",
        "Este parámetro se asigna aleatoriamente antes de la ejecución. - Tiempo de creación de la tarea: El tiempo antes de que se cree la siguiente tarea después de la finalización exitosa o fallida.",
        "Este parámetro influye en la antigüedad de la información histórica sobre los recursos y tiene una gran influencia en la duración de la fase inicial de adaptación.",
        "Este parámetro se asigna aleatoriamente después de que se haya completado la tarea. 5.2 Resultados Experimentales Esta sección muestra los resultados de experimentos seleccionados que demuestran el rendimiento de nuestro mecanismo propuesto de asignación de recursos.",
        "El primer experimento muestra el rendimiento en un entorno estable donde un número de agentes asignan tareas a servidores que proporcionan una cantidad constante de recursos.",
        "El segundo experimento se llevó a cabo en un entorno de servidor dinámico con un número constante de agentes.",
        "El primer experimento muestra nuestro modelo en un entorno estable de 3 servidores que proporcionan un total de 7000 unidades de recursos.",
        "La capacidad de recursos de cada servidor permanece constante durante el experimento.",
        "Utilizamos 650 agentes con los parámetros del tiempo de ejecución entre 1 y 15 unidades de tiempo y un tiempo de creación de tarea en el intervalo [0 − 30] unidades de tiempo.",
        "El consumo de recursos de las tareas se asigna aleatoriamente en el intervalo de [1 - 45] unidades de recurso.",
        "La Figura 4 muestra los resultados de 100 repeticiones de este experimento.",
        "La Figura 4(a) muestra que la cantidad total de recursos proporcionados es mayor que la demanda de recursos en promedio.",
        "Al comienzo del experimento, todos los agentes asignan sus tareas aleatoriamente en uno de los servidores disponibles y exploran las capacidades y utilizaciones de recursos disponibles durante aproximadamente 150 unidades de tiempo.",
        "Esta fase inicial de exploración muestra que la carga promedio de recursos de cada servidor tiene un nivel similar.",
        "Esto provoca una situación de sobrecarga en el servidor 1 debido a su baja capacidad de recursos compartidos, y una gran cantidad de recursos libres en el servidor 2.",
        "Los agentes que asignaron tareas al servidor 1 detectan la situación de sobrecarga y exploran de forma aleatoria otros servidores disponibles.",
        "Encuentran recursos gratuitos en el servidor 2.",
        "Después del período de aprendizaje, los agentes se han autoorganizado en este entorno estable y han encontrado una solución estable para la asignación de The Sixth Intl.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Tiempo 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (b) Carga de recursos servidor 0 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (c) Carga de recursos servidor 1 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 2 Figura 4: Resultados del experimento 1 en un entorno estático de 3 servidores promediados sobre 100 repeticiones. todas las tareas.",
        "La desviación estándar de las cargas de recursos es pequeña para cada servidor, lo que indica que nuestro enfoque distribuido encuentra soluciones estables en casi cada ejecución.",
        "Este experimento utilizó el algoritmo 2 para la selección del servidor activo.",
        "También realizamos el mismo experimento con el mecanismo de selección de recursos más libre para seleccionar el servidor activo.",
        "La asignación de recursos para cada servidor es similar.",
        "La cantidad absoluta de recursos gratuitos por servidor es casi la misma.",
        "El Experimento 2 se llevó a cabo en un entorno dinámico de 3 servidores con un total de 750 agentes.",
        "La cantidad de recursos del servidor 0 y del servidor 1 cambia periódicamente, mientras que la cantidad total de recursos disponibles permanece constante.",
        "El servidor 0 tiene una capacidad inicial de 1000 unidades, mientras que el servidor 1 comienza con una capacidad de 4000 unidades.",
        "El cambio en la capacidad comienza después de 150 unidades de tiempo, que es aproximadamente al final de la fase de aprendizaje.",
        "La figura 5 (b, c, d) muestra el comportamiento de nuestra asignación de recursos autoorganizada en este entorno.",
        "Todos los agentes utilizan el mecanismo de selección de recursos más libres determinístico para seleccionar el servidor activo.",
        "Se puede observar en la Fig. 5(b) y 5(c) que el número de recursos asignados al servidor 0 y al servidor 1 cambia periódicamente con la cantidad de recursos proporcionados.",
        "Esto demuestra que los agentes pueden percibir los recursos disponibles en este entorno dinámico y son capaces de adaptarse a esos cambios.",
        "El desarrollo de la carga de recursos del servidor 2 (ver Fig. 5(d)) muestra un cambio periódico porque algunos agentes intentan asignar tareas a este servidor en caso de que su servidor previamente preferido reduzca la cantidad de recursos compartidos.",
        "La carga total de recursos de todos los recursos compartidos es constante a lo largo de los experimentos, lo que indica que todos los agentes asignan sus tareas a uno de los recursos compartidos.",
        "Fig. 4(a)). 6.\nFig. 4(a)). 6.",
        "CONCLUSIONES Y TRABAJO FUTURO En este artículo se presentó una técnica de asignación de recursos distribuida autoorganizativa para sistemas multiagente.",
        "Permitimos a los agentes seleccionar la plataforma de ejecución para sus tareas ellos mismos antes de cada ejecución en tiempo de ejecución.",
        "En nuestro enfoque, los agentes compiten por una asignación en uno de los 0 500 1,000 1,500 2,000 Tiempo 0 2,500 5,000 7,500 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (b) Carga de recursos servidor 1 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (c) Carga de recursos servidor 2 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 3 Figura 5: Resultados del experimento 2 en un entorno de servidor dinámico promediado en 100 repeticiones. recurso compartido disponible.",
        "Los agentes perciben su entorno de servidor y adaptan sus acciones para competir de manera más eficiente en el nuevo entorno creado.",
        "Este proceso es adaptativo y tiene un fuerte retroalimentación, ya que las decisiones de asignación influencian indirectamente las decisiones de otros agentes.",
        "La asignación de recursos es un efecto puramente emergente.",
        "Nuestro mecanismo demuestra que la asignación de recursos puede ser realizada mediante la competencia efectiva de agentes individuales y autónomos.",
        "Ni necesitan coordinación o información de una autoridad superior ni se requiere una comunicación directa adicional entre agentes.",
        "Este mecanismo fue inspirado por el razonamiento inductivo y los principios de racionalidad limitada, lo que permite a los agentes adaptar sus estrategias para competir de manera efectiva en un entorno dinámico.",
        "En caso de que un servidor no esté disponible, los agentes pueden adaptarse rápidamente a esta nueva situación explorando nuevos recursos o permaneciendo en el servidor local si no es posible una asignación.",
        "Especialmente en entornos dinámicos y escalables como los sistemas de rejilla, se requiere un mecanismo robusto y distribuido para la asignación de recursos.",
        "Nuestro enfoque de asignación de recursos autoorganizados fue evaluado con una serie de experimentos de simulación en un entorno dinámico de agentes y recursos del servidor.",
        "Los resultados presentados para este nuevo enfoque de optimización de migración estratégica son muy prometedores y justifican una mayor investigación en un entorno real de sistema multiagente.",
        "Es una política distribuida, escalable y fácil de entender para la regulación de la oferta y la demanda de recursos.",
        "Todo el control se implementa en los agentes.",
        "Un mecanismo de decisión simple basado en diferentes creencias del agente crea un comportamiento emergente que conduce a una asignación efectiva de recursos.",
        "Este enfoque puede ser fácilmente ampliado o respaldado por mecanismos de equilibrio/cola de recursos proporcionados por los recursos.",
        "Nuestro enfoque se adapta a los cambios en el entorno pero no es evolutivo.",
        "No hay descubrimiento de nuevas estrategias por parte de los agentes.",
        "El conjunto de predictores permanece igual a lo largo de toda la vida.",
        "De hecho, creemos que esto podría mejorar aún más el comportamiento de los sistemas a lo largo de un período prolongado y podría ser el 80 The Sixth Intl.",
        "La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) investigará en el futuro.",
        "La evolución sería muy lenta y selectiva y no influiría en el comportamiento del sistema en un período a corto plazo que está cubierto por nuestros resultados experimentales.",
        "En un futuro cercano investigaremos si es posible una adaptación automática de la tasa de decaimiento de la información histórica en nuestro algoritmo y si puede mejorar el rendimiento de la asignación de recursos.",
        "La tasa de descomposición está actualmente predefinida y debe ser alterada manualmente dependiendo del entorno.",
        "Un gran número de recursos compartidos requiere información histórica más antigua para evitar una exploración de recursos demasiado frecuente.",
        "Por el contrario, un entorno dinámico con capacidades variables requiere información más actualizada para realizar predicciones más fiables.",
        "Somos conscientes de la larga fase de aprendizaje en entornos con un gran número de recursos compartidos conocidos por cada agente.",
        "En caso de que los agentes soliciten más recursos de los que los servidores compartidos proporcionan, todos los agentes explorarán aleatoriamente todos los servidores conocidos.",
        "Este proceso de adquirir información de carga de recursos sobre todos los servidores puede llevar mucho tiempo en el caso de que no se proporcionen recursos compartidos suficientes para todas las tareas.",
        "En el peor de los casos, para cuando se explore todos los servidores, la información histórica de algunos servidores podría estar desactualizada y la exploración comenzará de nuevo.",
        "En esta situación, es difícil para un agente recopilar eficientemente información histórica sobre todos los servidores remotos.",
        "Este tema necesita más investigación en el futuro.",
        "REFERENCIAS [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel y J. Shalf.",
        "Herramientas de Cactus para Aplicaciones de Red.",
        "En Cluster Computing, volumen 4, páginas 179-188, Hingham, MA, EE. UU., 2001.",
        "Kluwer Academic Publishers. [2] W. B. Arthur.\nEditorial Kluwer Academic. [2] W. B. Arthur.",
        "Razonamiento inductivo y racionalidad limitada.",
        "American Economic Review (Papers and Proceedings), 84(2):406-411, mayo de 1994. [3] T. Bourke.",
        "Balanceo de carga del servidor.",
        "OReilly Media, 1ª edición, agosto de 2001. [4] R. Buyya.",
        "Gestión y programación de recursos distribuidos basada en economía para la computación en malla.",
        "Tesis doctoral, Universidad de Monash, Melbourne, Australia, mayo de 2002. [5] R. Buyya, D. Abramson, J. Giddy y H. Stockinger.",
        "Modelos económicos para la gestión de recursos y programación en la computación en malla.",
        "Número especial sobre Entornos de Computación en Red de la Revista Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin y D. DiNucci.",
        "Modelos arquitectónicos para la gestión de recursos en la red.",
        "En Actas del Primer Taller Internacional sobre Computación en Red, páginas 18-35.",
        "Springer LNCS, 2000. [7] T. L. Casavant y J. G. Kuhl.",
        "Una taxonomía de programación en sistemas informáticos distribuidos de propósito general.",
        "IEEE Transactions on Software Engineering, 14(2):141-154, febrero de 1988. [8] D. Challet y Y. Zhang.",
        "Aparición de la cooperación y la organización en un juego evolutivo.",
        "Physica A, 407(246), 1997. [9] K.-P. Chow y Y.-K. Kwok.",
        "En equilibrio de carga para computación multiagente distribuida.",
        "En IEEE Transactions on Parallel and Distributed Systems, volumen 13, páginas 787-801.",
        "IEEE, agosto de 2002. [10] S. H. Clearwater.",
        "Control basado en el mercado.",
        "Un paradigma para la asignación distribuida de recursos.",
        "World Scientific, Singapur, 1996. [11] C. Fl¨us.",
        "Planificación de capacidad de sistemas de agentes móviles para el diseño eficiente de aplicaciones de intranet.",
        "Tesis doctoral, Universidad de Duisburg-Essen (Alemania), febrero de 2005. [12] I.",
        "Foster y C. Kesselman.",
        "Globus: Un conjunto de herramientas de infraestructura de metacomputación.",
        "Revista Internacional de Aplicaciones de Supercomputación, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
        "Foster, M. Livny y S. Tuecke.",
        "Condor-G: Un agente de gestión de computación para redes de múltiples instituciones.",
        "Computación en clúster, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar y K. Lerman.",
        "Juegos de asignación de recursos con capacidades de recursos cambiantes.",
        "En Actas de la segunda conferencia internacional conjunta sobre agentes autónomos y sistemas multiagente, páginas 145 - 152, Melbourne, Australia, 2003.",
        "ACM Press, Nueva York, NY, EE. UU. [15] C. Georgousopoulos y O. F. Rana.",
        "Combinando enfoques basados en el estado y en el modelo para el equilibrio de carga de agentes móviles.",
        "En SAC 03: Actas del simposio de computación aplicada de ACM de 2003, páginas 878-885, Nueva York, NY, EE. UU., 2003.",
        "ACM Press. [16] G. Mainland, D. C. Parkes y M. Welsh.",
        "Asignación descentralizada y adaptativa de recursos para redes de sensores.",
        "En Actas del 2º Simposio USENIX sobre Diseño e Implementación de Sistemas de Red (NSDI 05), mayo de 2005. [17] S. Manvi, M. Birje y B. Prasad.",
        "Un modelo de asignación de recursos basado en agentes para rejillas computacionales.",
        "Sistemas Multiagente y de Red - Una Revista Internacional, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham y M. Tennenholtz.",
        "Equilibrio de carga adaptativo: Un estudio en el aprendizaje multiagente.",
        "En Journal of Artificial Intelligence Research, volumen 2, páginas 475-500, 1995. [19] T. Schlegel, P. Braun y R. Kowalczyk.",
        "Hacia Agentes Móviles Autónomos con Comportamiento de Migración Emergente.",
        "En Actas de la Quinta Conferencia Internacional Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 2006), Hakodate (Japón), páginas 585-592.",
        "ACM Press, mayo de 2006. [20] W3C.",
        "Actividad de servicios web, 2002. http://www.w3.org/2002/ws - última visita 23.10.2006. [21] M. M. Waldrop.",
        "Complejidad: La ciencia emergente en el límite entre el orden y el caos.",
        "Simon & Schuster, 1ª edición, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik y T. Bryan.",
        "Analizando estrategias de asignación de recursos basadas en el mercado para la red computacional.",
        "En la Revista Internacional de Aplicaciones de Computación de Alto Rendimiento, volumen 15, páginas 258-281.",
        "Sage Science Press, 2001. \n\nEditorial Sage Science, 2001.",
        "El Sexto Internacional.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 81"
    ],
    "error_count": 6,
    "keys": {
        "multi-agent system": {
            "translated_key": "sistema multiagente",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Towards Self-organising Agent-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
                "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
                "In this paper we propose a distributed algorithm that solves the resource allocation problem in distributed multiagent systems.",
                "Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer.",
                "The resource allocation in the system is a purely emergent effect.",
                "We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
                "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
                "In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
                "Hence, distributed solutions of the resource allocation problem are required.",
                "Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation.",
                "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
                "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
                "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].",
                "In this paper we propose a distributed solution of the resource allocation problem based on self-organisation of the resource consumers in a system with limited resources.",
                "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
                "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
                "All control needed for our algorithm is distributed among the agents in the system.",
                "They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
                "The only information available to all agents are resource load and allocation success information from past resource allocations.",
                "Additional resource load information about servers is not disseminated.",
                "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
                "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
                "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
                "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account <br>multi-agent system</br> tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11].",
                "Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.",
                "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
                "Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.",
                "Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.",
                "Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results.",
                "A summary, conclusion and outlook to future work finish this paper. 2.",
                "RELATED WORK Resource allocation is an important problem in the area of computer science.",
                "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
                "Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
                "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
                "The broker usually has full knowledge about all system resources.",
                "All incoming requests are directed to the broker who is the solely decision maker.",
                "In those approaches, the resource consumer cannot influence the allocation decision process.",
                "Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
                "This mechanism works best in a homogeneous system.",
                "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
                "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation.",
                "This technique can only provide a good supplement for distributed resource allocation mechanisms.",
                "Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
                "Those coordinators usually need to have global knowledge on the state of all system resources.",
                "An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
                "The value of distributed solutions for the resource allocation problem has been recognised by research [10].",
                "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
                "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
                "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
                "A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10].",
                "Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
                "The Agent based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
                "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
                "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
                "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
                "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
                "There has been considerable work on decentralised resource allocation techniques using game theory published over recent years.",
                "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
                "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
                "It is an ill-defined decision problem that assumes and models inductive reasoning.",
                "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
                "A variation of the El Farol problem is the so called minority game [8].",
                "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
                "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
                "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent.",
                "Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18].",
                "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
                "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
                "A resource allocation approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
                "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
                "A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks.",
                "Agents make their decisions themselves based on forecasts of the server utilisation.",
                "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
                "MODEL DESCRIPTION We model a distributed <br>multi-agent system</br> as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "Each agent has a number of tasks Ti that needs to be executed during its lifetime.",
                "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
                "Resources for the execution of tasks are provided by each server li.",
                "The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources.",
                "We write LS (ai) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai.",
                "Resources in the system can be used by all agents for the execution of tasks.",
                "The amount of provided resources C(li, t) of each server can vary over time.",
                "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
                "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
                "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
                "In this case, some agents must wait with their allocation request until free resources are expected.",
                "The <br>multi-agent system</br> model used for our simulations is illustrated in Fig. 1. 4.",
                "SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each agent.",
                "The only information required in order to make a resource allocation decision for a task is the server utilisation from completed task allocations at those servers.",
                "There is no additional information dissemination about server resource utilisation or information about free resources.",
                "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
                "Additionally, we do not have any central controlling authority.",
                "All behaviour that leads to the resource allocation is created by the effective competition of the agents for shared resources and is a purely emergent effect.",
                "The agents in our <br>multi-agent system</br> compete for resources or a set of resources to execute tasks.",
                "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
                "Our approach is based on different agent beliefs, represented by predictors and different information about their environment.",
                "Agents prefer a task allocation at a server with free resources.",
                "However, there is no way to be sure of the amount of free server resources in advance.",
                "All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution.",
                "There is no communication between agents.",
                "Actions taken by agents influence the actions of other agents indirectly.",
                "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
                "It is derived from the human way of deciding ill-defined problems.",
                "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
                "Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation.",
                "All necessary control is integrated in the agents themselves.",
                "There is no higher controlling authority, management layer for decision support or information distribution.",
                "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
                "To do so, agents use historical information from past task allocations at those resources.",
                "Based on the forecasted resource utilisation, the agent will make its resource allocation decision.",
                "After the task has finished its execution and returned the results back to the agent, the predictor performances are evaluated and history information is updated.",
                "Algorithm 1 shows the resource allocation algorithm for each agent.",
                "The agent first predicts the next steps resource load for each server with historical information (line 3-7).",
                "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
                "The agent then evaluates if any free shared resources for the task allocation are expected.",
                "In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
                "This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available.",
                "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
                "One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load.",
                "Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
                "The most recent history item is h0.",
                "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
                "Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
                "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
                "As the result, the server would have a large amount of free resources.",
                "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
                "An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a).",
                "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
                "This may change in the future as the resource load has significantly increased recently.",
                "In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation.",
                "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
                "Algorithm 1 Resource Allocation algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
                "A probability distribution is calculated from the confidence levels of the resource predictions.",
                "The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
                "The server with the highest confidence level has the biggest chance to be selected as the active server.",
                "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
                "The server with most expected free resources from the set L of server with expected free resources is chosen.",
                "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
                "However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation.",
                "In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
                "The agent will not allocate the task at a resource.",
                "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
                "After the agent execution has finished, the evaluation process described in algorithm 4 is preformed.",
                "This process is divided into three cases.",
                "First, the task was not allocated at a resource.",
                "In this case, the agent cannot decide if the decision not to allocate the task was correct or not.",
                "The agent then removes old historical data.",
                "This is necessary for a successful adaptation in the future.",
                "If the agent would not delete old historical information, the prediction would always forecast that no free resources are available.",
                "The agent would never allocate a task at one of the resources in the future.",
                "Old historical information is removed from the agents resource history using a decay rate.",
                "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
                "The current implementation uses a constant probability density function in a configurable domain.",
                "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
                "Depending on the environment, the probability density function must be altered.",
                "If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
                "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
                "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
                "The agent creates a new predictor set for this server and records the historical information.",
                "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource.",
                "The agent evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data.",
                "Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating.",
                "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation.",
                "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
                "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
                "Based on these performance ratings, the confidence levels are calculated using equation 4.",
                "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor.",
                "These values are transformed into a probability distribution.",
                "According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection.",
                "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels.",
                "Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor.",
                "This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
                "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
                "Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources.",
                "In fact, enough resources for the execution would be available.",
                "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
                "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
                "The oldest history data is overwritten if already m history values are recorded for the server.",
                "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor.",
                "This method assures that agents can compete more effectively in a changing environment.",
                "Different types of predictors are suitable for different situations and environments.",
                "Therefore, all predictors are being evaluated after each decision and the active predictor is selected.",
                "This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
                "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
                "Our self-organising approach is robust against failures of resources or agents in the system.",
                "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
                "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
                "The limitations are the reliance on historical resource utilisation information about other servers.",
                "A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource.",
                "If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers.",
                "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers.",
                "In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one.",
                "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
                "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
                "In the rest of the section, results of the experiments are presented and discussed.",
                "All experiments are conducted in a special testbed that simulates and models a <br>multi-agent system</br>.",
                "We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit.",
                "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
                "An event-driven model is used to trigger all activities in the system.",
                "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each agent.",
                "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
                "Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
                "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
                "The total resource load of the system is calculated as the sum of the resources load of all resources.",
                "The self-organising resource allocation algorithm has random elements.",
                "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process.",
                "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation.",
                "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
                "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
                "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server.",
                "The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources.",
                "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
                "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
                "For this time the task consumes the assigned amount of server resources.",
                "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
                "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
                "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism.",
                "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
                "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
                "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
                "The resource capacity of each server remains constant over the experiment.",
                "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
                "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
                "Figure 4 shows the results from 100 repetitions of this experiment.",
                "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
                "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
                "This initial exploration phase shows that the average resource load of each server has a similar level.",
                "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
                "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
                "They find free resources at server 2.",
                "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
                "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
                "This experiment used algorithm 2 for the selection of the active server.",
                "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
                "The resource allocation for each server is similar.",
                "The absolute amount of free resources per server is almost the same.",
                "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
                "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
                "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
                "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
                "Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment.",
                "All agents use the deterministic most free resources selection mechanism to select the active server.",
                "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
                "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
                "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
                "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
                "Fig. 4(a)). 6.",
                "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-agent systems was presented.",
                "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
                "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
                "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
                "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
                "The resource allocation is a purely emergent effect.",
                "Our mechanism demonstrates that resource allocation can be done by the effective competition of individual and autonomous agents.",
                "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
                "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
                "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
                "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required.",
                "Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
                "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real <br>multi-agent system</br> environment.",
                "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
                "All control is implemented in the agents.",
                "A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective resource allocation.",
                "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
                "Our approach adapts to changes in the environment but it is not evolutionary.",
                "There is no discovery of new strategies by the agents.",
                "The set of predictors stays the same over the whole life.",
                "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future.",
                "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
                "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance.",
                "The decay rate is currently predefined and must be altered manually depending on the environment.",
                "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
                "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
                "We are aware of the long learning phase in environments with a large number of shared resources known by each agent.",
                "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
                "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
                "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
                "In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers.",
                "This issue needs more investigation in the future. 7.",
                "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
                "Cactus Tools for Grid Applications.",
                "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
                "Kluwer Academic Publishers. [2] W. B. Arthur.",
                "Inductive Reasoning and Bounded Rationality.",
                "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
                "Server Load Balancing.",
                "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
                "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
                "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
                "Economic Models for Resource Management and Scheduling in Grid Computing.",
                "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
                "Architectural Models for Resource Management in the Grid.",
                "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
                "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
                "A taxonomy of scheduling in general-purpose distributed computing systems.",
                "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
                "Emergence of Cooperation and Organization in an Evolutionary Game.",
                "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
                "On load balancing for distributed multiagent computing.",
                "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
                "IEEE, August 2002. [10] S. H. Clearwater.",
                "Market-based control.",
                "A Paradigm for Distributed Resource Allocation.",
                "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
                "Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications.",
                "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
                "Foster and C. Kesselman.",
                "Globus: A Metacomputing Infrastructure Toolkit.",
                "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
                "Foster, M. Livny, and S. Tuecke.",
                "Condor-G: A Computation Management Agent for Multi-Institutional Grids.",
                "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
                "Resource allocation games with changing resource capacities.",
                "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
                "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
                "Combining state and model-based approaches for mobile agent load balancing.",
                "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
                "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
                "Decentralized Adaptive Resource Allocation for Sensor Networks.",
                "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
                "An Agent-based Resource Allocation Model for Computational Grids.",
                "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
                "Adaptive Load Balancing: A Study in Multi-Agent Learning.",
                "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
                "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
                "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
                "ACM Press, May 2006. [20] W3C.",
                "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
                "Complexity: The Emerging Science at the Edge of Order and Chaos.",
                "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
                "Analyzing Market-Based Resource Allocation Strategies for the Computational Grid.",
                "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
                "Sage Science Press, 2001.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81"
            ],
            "original_annotated_samples": [
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account <br>multi-agent system</br> tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "MODEL DESCRIPTION We model a distributed <br>multi-agent system</br> as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "The <br>multi-agent system</br> model used for our simulations is illustrated in Fig. 1. 4.",
                "The agents in our <br>multi-agent system</br> compete for resources or a set of resources to execute tasks.",
                "All experiments are conducted in a special testbed that simulates and models a <br>multi-agent system</br>."
            ],
            "translated_annotated_samples": [
                "El enfoque propuesto proporciona una forma sencilla de implementar la asignación de recursos distribuidos y tiene en cuenta las tendencias del <br>sistema multiagente</br> hacia la autonomía, la heterogeneidad y la falta de fiabilidad de los recursos y agentes.",
                "DESCRIPCIÓN DEL MODELO Modelamos un <br>sistema multiagente</br> distribuido como una red de servidores L = {l1, . . . , lm}, agentes A = {a1, . . . , an} y tareas T = {T1, ..., Tm}.",
                "El modelo de <br>sistema multiagente</br> utilizado para nuestras simulaciones está ilustrado en la Figura 1.4.",
                "Los agentes en nuestro <br>sistema multiagente</br> compiten por recursos o un conjunto de recursos para ejecutar tareas.",
                "Todos los experimentos se llevan a cabo en un banco de pruebas especial que simula y modela un <br>sistema multiagente</br>."
            ],
            "translated_text": "Hacia la asignación de recursos basada en agentes autoorganizados en un entorno de múltiples servidores. Tino Schlegel1, Ryszard Kowalczyk2. Universidad de Tecnología Swinburne, Facultad de Tecnologías de la Información y la Comunicación, Hawthorn, 3122 Victoria, Australia {tschlegel1, rkowalczyk2}@ict.swin.edu.au. RESUMEN Las aplicaciones distribuidas requieren técnicas distribuidas para una asignación eficiente de recursos. Estas técnicas deben tener en cuenta la heterogeneidad y la posible falta de fiabilidad de los recursos y consumidores de recursos en entornos distribuidos. En este artículo proponemos un algoritmo distribuido que resuelve el problema de asignación de recursos en sistemas multiagentes distribuidos. Nuestra solución se basa en la autoorganización de agentes, la cual no requiere ningún facilitador o capa de gestión. La asignación de recursos en el sistema es un efecto puramente emergente. Presentamos los resultados del mecanismo de asignación de recursos propuesto en el entorno simulado de servidores múltiples estáticos y dinámicos. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Coherencia y coordinación Términos Generales Algoritmos 1. INTRODUCCIÓN Con la creciente popularidad de tecnologías de computación distribuida como Grid [12] y servicios web [20], Internet se está convirtiendo en una plataforma informática poderosa donde diferentes pares de software (por ejemplo, agentes) pueden utilizar recursos informáticos existentes para realizar tareas. En este sentido, cada agente es un consumidor de recursos que adquiere una cierta cantidad de recursos para la ejecución de sus tareas. Es difícil para un mecanismo central de asignación de recursos recopilar y gestionar la información sobre todos los recursos compartidos y consumidores de recursos para realizar de manera efectiva la asignación de recursos. Por lo tanto, se requieren soluciones distribuidas del problema de asignación de recursos. Los investigadores han reconocido estos requisitos [10] y han propuesto técnicas para la asignación de recursos distribuidos. Un tipo prometedor de enfoques distribuidos se basa en modelos de mercado económico [4], inspirados en los principios de los mercados de valores reales. Aunque esos enfoques estén distribuidos, generalmente requieren un facilitador para la fijación de precios, la búsqueda de recursos y la asignación de trabajos a los recursos [5, 9]. Otro problema principalmente sin resolver de esos enfoques es el ajuste fino del precio y el tiempo, las restricciones presupuestarias para permitir una asignación eficiente de recursos en sistemas grandes y dinámicos [22]. En este documento proponemos una solución distribuida del problema de asignación de recursos basada en la autoorganización de los consumidores de recursos en un sistema con recursos limitados. En nuestro enfoque, los agentes asignan dinámicamente tareas a servidores que proporcionan una cantidad limitada de recursos. En nuestro enfoque, los agentes seleccionan de forma autónoma la plataforma de ejecución para la tarea en lugar de pedir a un intermediario de recursos que realice la asignación. Todo el control necesario para nuestro algoritmo está distribuido entre los agentes en el sistema. Optimizan continuamente el proceso de asignación de recursos a lo largo de su vida para adaptarse a los cambios en la disponibilidad de recursos compartidos, aprendiendo de decisiones de asignación pasadas. La única información disponible para todos los agentes son la carga de recursos y la información sobre el éxito de la asignación de recursos de asignaciones pasadas. La información adicional sobre la carga de recursos de los servidores no se difunde. El concepto básico de nuestra solución está inspirado en el razonamiento inductivo y la racionalidad limitada introducida por W. Brian Arthur [2]. El mecanismo propuesto no requiere una autoridad central de control, una capa de gestión de recursos o introducir comunicación adicional entre agentes para decidir qué tarea se asigna en qué servidor. Demostramos que este mecanismo funciona bien en sistemas dinámicos con un gran número de tareas y puede adaptarse fácilmente a diferentes tamaños de sistemas. Además, el rendimiento general del sistema no se ve afectado en caso de que los agentes o servidores fallen o no estén disponibles. El enfoque propuesto proporciona una forma sencilla de implementar la asignación de recursos distribuidos y tiene en cuenta las tendencias del <br>sistema multiagente</br> hacia la autonomía, la heterogeneidad y la falta de fiabilidad de los recursos y agentes. Esta técnica propuesta puede ser fácilmente complementada por técnicas para encolar o rechazar solicitudes de asignación de recursos de agentes [11]. Tales capacidades de auto-gestión de agentes de software permiten una asignación de recursos confiable incluso en un entorno con proveedores de recursos poco confiables. Esto se puede lograr mediante las interacciones mutuas entre agentes aplicando técnicas de la teoría de sistemas complejos. La autoorganización de todos los agentes conduce a una autoorganización de los recursos del sistema 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS y es una propiedad emergente del sistema [21]. El resto del documento está estructurado de la siguiente manera: La siguiente sección proporciona una visión general del trabajo relacionado ya realizado en el área de equilibrio de carga, asignación de recursos o programación. La sección 3 describe el modelo de un entorno multiagente que se utilizó para realizar simulaciones con el fin de evaluar el rendimiento. Las secciones 4 y 5 describen el algoritmo de asignación de recursos distribuidos y presentan varios resultados experimentales. Un resumen, una conclusión y una perspectiva del trabajo futuro finalizan este documento. El trabajo relacionado La asignación de recursos es un problema importante en el área de la informática. En los últimos años, diferentes grupos de investigación han propuesto soluciones basadas en diferentes suposiciones y restricciones [7, 3, 15, 10]. En términos generales, la asignación de recursos es un mecanismo o política para la gestión eficiente y efectiva del acceso a un recurso limitado o conjunto de recursos por parte de sus consumidores. En el caso más simple, los consumidores de recursos solicitan a un intermediario central o despachador los recursos disponibles donde el consumidor de recursos será asignado. El corredor generalmente tiene pleno conocimiento de todos los recursos del sistema. Todas las solicitudes entrantes son dirigidas al corredor, quien es el único tomador de decisiones. En esos enfoques, el consumidor de recursos no puede influir en el proceso de decisión de asignación. El equilibrio de carga [3] es un caso especial del problema de asignación de recursos que utiliza un intermediario que intenta ser justo con todos los recursos al equilibrar la carga del sistema de manera equitativa entre todos los proveedores de recursos. Este mecanismo funciona mejor en un sistema homogéneo. Una técnica distribuida simple para la gestión de recursos es la planificación de capacidad mediante la negativa o encolamiento de agentes entrantes para evitar la sobrecarga de recursos [11]. Desde la perspectiva del propietario de recursos, esta técnica es importante para prevenir la sobrecarga en el recurso, pero no es suficiente para una asignación efectiva de recursos. Esta técnica solo puede proporcionar un buen complemento para los mecanismos de asignación de recursos distribuidos. La mayoría de las técnicas actuales para la asignación de recursos en herramientas de computación en malla como Globus [12] o Condor-G [13] coordinan la asignación de recursos con un subastador, árbitro, despachador, programador o gestor. Esos coordinadores suelen necesitar tener conocimiento global sobre el estado de todos los recursos del sistema. Un ejemplo de un algoritmo de asignación de recursos dinámicos es el proyecto Cactus [1] para la asignación de trabajos computacionales muy costosos. El valor de las soluciones distribuidas para el problema de asignación de recursos ha sido reconocido por la investigación [10]. Inspirados en los principios de los mercados de valores, se han desarrollado modelos de mercado económico para negociar recursos con el fin de regular la oferta y la demanda en la red. Estos enfoques utilizan diferentes estrategias de precios como modelos de precios publicados, diferentes métodos de subasta o un modelo de mercado de productos básicos. Los usuarios intentan comprar recursos baratos necesarios para ejecutar el trabajo, mientras que los proveedores intentan obtener la mayor ganancia posible y operar los recursos disponibles a plena capacidad. Se presenta una colección de diferentes técnicas de asignación de recursos distribuidos basadas en modelos de mercado en Clearwater [10]. Buyya et al. desarrollaron un marco de asignación de recursos basado en la regulación de la oferta y la demanda [4] para Nimrod-G [6] con el enfoque principal en los plazos de entrega de trabajos y las restricciones presupuestarias. El Modelo de Asignación de Recursos basado en Agentes (ARAM) para redes está diseñado para programar trabajos computacionalmente costosos utilizando agentes. La desventaja de este modelo es el extenso uso de intercambio de mensajes entre agentes para monitoreo periódico e intercambio de información dentro de la estructura jerárquica. Las subtareas de un trabajo migran a través de la red hasta que encuentran un recurso que cumpla con las restricciones de precio. El itinerario de migración de trabajos está determinado por los recursos que los conectan en diferentes topologías [17]. El mecanismo propuesto en este documento elimina la necesidad de intercambio periódico de información sobre las cargas de recursos y no requiere una topología de conexión entre los recursos. Se ha realizado un considerable trabajo sobre técnicas de asignación descentralizada de recursos utilizando teoría de juegos publicado en los últimos años. La mayoría de ellos están formulados como juegos repetitivos en un entorno idealista y simplificado. Por ejemplo, Arthur introdujo el problema del bar El Farol, que no permite una solución perfecta, lógica y racional. Es un problema de decisión mal definido que asume y modela el razonamiento inductivo. Probablemente sea uno de los ejemplos más estudiados de sistemas adaptativos complejos derivados de la forma en que los humanos deciden problemas mal definidos. Una variación del problema de El Farol es el llamado juego de la minoría [8]. En este juego de decisión repetitivo, un número impar de agentes debe elegir entre dos recursos basándose en información de éxito pasado, tratando de asignarse al recurso con la minoría. Galstyan et al. [14] estudiaron una variación con más de dos recursos, cambiando las capacidades de los recursos y la información de los agentes vecinos. Demostraron que los agentes pueden adaptarse de manera efectiva a las capacidades cambiantes en este entorno utilizando un conjunto de simples tablas de búsqueda (estrategias) por agente. Otra técnica distribuida que se emplea para resolver el problema de asignación de recursos se basa en el aprendizaje por refuerzo [18]. Similar a nuestro enfoque, un conjunto de agentes compiten por un número limitado de recursos basados únicamente en experiencias individuales previas. En este documento, el objetivo del sistema es maximizar el rendimiento del sistema garantizando la equidad de los recursos, medida como el tiempo promedio de procesamiento por unidad de trabajo. Se presenta un enfoque de asignación de recursos para redes de sensores basado en técnicas de autoorganización y aprendizaje por refuerzo en [16], con un enfoque principal en la optimización del consumo de energía de los nodos de la red. Propusimos un enfoque de equilibrio de carga autoorganizado para un único servidor con el objetivo de optimizar los costos de comunicación de agentes móviles. Un agente móvil rechazará una migración a un servidor de agente remoto si espera que el servidor de destino ya esté sobrecargado por otros agentes o tareas del servidor. Los agentes toman sus decisiones por sí mismos basándose en pronósticos de la utilización del servidor. En este documento se presenta una solución para un entorno de múltiples servidores sin tener en cuenta los costos de comunicación o migración. 3. DESCRIPCIÓN DEL MODELO Modelamos un <br>sistema multiagente</br> distribuido como una red de servidores L = {l1, . . . , lm}, agentes A = {a1, . . . , an} y tareas T = {T1, ..., Tm}. Cada agente tiene un número de tareas Ti que deben ser ejecutadas durante su vida útil. Una tarea Ti requiere U(Ti, t) recursos para su ejecución en el tiempo t, independientemente de su servidor de ejecución. Los recursos para la ejecución de tareas son proporcionados por cada servidor li. La ubicación de la ejecución de las tareas en general está especificada por el mapa L: T × t → L. Un agente debe conocer la existencia de recursos del servidor para asignar tareas en esos recursos. Escribimos LS (ai) The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 75 Recursos del Sistema Anfitrión l4 Anfitrión l3 Anfitrión l2 2a 3a 4a a Anfitrión l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figura 1: Una ilustración de nuestro modelo de múltiples servidores con recursos exclusivos y compartidos para la ejecución del agente. para abordar el conjunto de recursos conocidos por el agente ai. Los recursos en el sistema pueden ser utilizados por todos los agentes para la ejecución de tareas. La cantidad de recursos proporcionados C(li, t) de cada servidor puede variar con el tiempo. La utilización de recursos de un servidor en el tiempo t se calcula utilizando la ecuación 1, sumando el consumo de recursos U(Tj, t) de cada tarea Tj que se ejecuta en el recurso en el tiempo t. Todas las unidades de recursos utilizadas en nuestro modelo representan métricas reales como memoria o ciclos de procesador. Además del caso en que la cantidad total de recursos del sistema es suficiente para ejecutar todas las tareas, también nos interesa el caso en que no se proporcionan suficientes recursos del sistema para cumplir con todas las solicitudes de asignación. Es decir, la capacidad total de recursos compartidos es menor que la cantidad de recursos solicitados por los agentes. En este caso, algunos agentes deben esperar con su solicitud de asignación hasta que se esperen recursos libres. El modelo de <br>sistema multiagente</br> utilizado para nuestras simulaciones está ilustrado en la Figura 1.4. ASIGNACIÓN DE RECURSOS AUTOORGANIZADA El algoritmo de asignación de recursos descrito en esta sección está integrado en cada agente. La única información necesaria para tomar una decisión de asignación de recursos para una tarea es la utilización del servidor de las asignaciones de tareas completadas en esos servidores. No hay una difusión adicional de información sobre la utilización de recursos del servidor o información sobre recursos libres. Nuestra solución demuestra que los agentes pueden autoorganizarse en un entorno dinámico sin necesidad de información de monitoreo activo que genere una gran sobrecarga de tráfico en la red. Además, no tenemos ninguna autoridad central de control. Todo comportamiento que conduce a la asignación de recursos es creado por la competencia efectiva de los agentes por recursos compartidos y es un efecto puramente emergente. Los agentes en nuestro <br>sistema multiagente</br> compiten por recursos o un conjunto de recursos para ejecutar tareas. La acción colectiva de estos agentes cambia el entorno y, con el paso del tiempo, tienen que adaptarse a estos cambios para competir de manera más efectiva en el entorno recién creado. Nuestro enfoque se basa en diferentes creencias de los agentes, representadas por predictores y diferente información sobre su entorno. Los agentes prefieren una asignación de tareas en un servidor con recursos disponibles. Sin embargo, no hay forma de estar seguro de la cantidad de recursos del servidor disponibles de antemano. Todos los agentes tienen las mismas preferencias y un agente asignará una tarea en un servidor si espera tener suficientes recursos libres para su ejecución. No hay comunicación entre agentes. Las acciones tomadas por los agentes influyen en las acciones de otros agentes de forma indirecta. El mecanismo aplicado está inspirado en el razonamiento inductivo y los principios de racionalidad limitada [2]. Se deriva de la forma humana de resolver problemas mal definidos. Los humanos tienden a tener en cuenta muchas hipótesis y actuar en base a la más plausible. Por lo tanto, cada agente lleva un registro del rendimiento de una colección privada de sus predictores y selecciona aquel que actualmente sea más prometedor para la toma de decisiones. 4.1 Algoritmo de asignación de recursos Esta sección describe el mecanismo de decisión para nuestra asignación de recursos autoorganizada. Todo el control necesario está integrado en los propios agentes. No hay una autoridad superior de control, capa de gestión para apoyo en la toma de decisiones o distribución de información. Todos los agentes tienen un conjunto de predictores para cada recurso con el fin de pronosticar la futura utilización de estos servidores para la asignación potencial de tareas. Para hacerlo, los agentes utilizan información histórica de asignaciones de tareas pasadas en esos recursos. Basándose en la utilización de recursos pronosticada, el agente tomará su decisión de asignación de recursos. Después de que la tarea haya finalizado su ejecución y devuelto los resultados al agente, se evalúan las actuaciones del predictor y se actualiza la información histórica. El Algoritmo 1 muestra el algoritmo de asignación de recursos para cada agente. El agente primero predice la carga de recursos de los próximos pasos para cada servidor con información histórica (línea 3-7). Si la carga de recursos predicha más el consumo de recursos de las tareas está por debajo de la última capacidad de servidor conocida, este servidor se agrega a la lista de candidatos para la asignación. El agente luego evalúa si se esperan recursos compartidos gratuitos para la asignación de tareas. En el caso de que no se esperen recursos gratuitos (línea 9), el agente explorará los recursos asignando la tarea a un servidor seleccionado al azar de entre todos los servidores no predecibles para recopilar información sobre la carga de recursos. Este es el caso estándar al comienzo del ciclo de vida del agente, ya que no hay información disponible sobre el entorno. La predicción de la carga de recursos en sí misma utiliza un conjunto de r predictores P(a, l) := {pi|1 ≤ i ≤ r} por servidor. Uno de los predictores pA ∈ P de cada conjunto se llama predictor activo, el cual pronostica la carga de recursos de los próximos pasos. Cada predictor es una función P: H → ℵ+ ∪ {0} del espacio de datos históricos H a un número entero no negativo, que es el valor pronosticado. Por ejemplo, un predictor podría pronosticar una carga de recursos igual a la cantidad promedio de recursos ocupados durante la última ejecución en este recurso. Un historial H de información de carga de recursos es una lista de hasta m elementos de historial hi = (xi, yi), que incluyen la fecha de observación xi y el valor observado yi. El elemento más reciente del historial es h0. Nuestro algoritmo utiliza un conjunto de predictores en lugar de solo uno, para evitar que todos los agentes tomen la misma decisión basada en el valor predicho, lo que invalidaría sus creencias. Imagina que solo un recurso compartido es conocido por un número de agentes que utilizan un predictor para pronosticar el 76 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Carga de Recursos Tiempo (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figura 2: (a) Información de carga de recursos recopilada de asignaciones de tareas anteriores que se utiliza para predicciones futuras. (b) Distribución de probabilidad de los predictores para seleccionar el nuevo predictor activo. mismo valor que la última utilización conocida de recursos del servidor. Todos los agentes que asignaron una tarea en un servidor que estaba ligeramente sobrecargado rechazarían otra asignación en este servidor, ya que esperan que el servidor vuelva a estar sobrecargado según las predicciones. Como resultado, el servidor tendría una gran cantidad de recursos libres. Un conjunto de diferentes predictores que predicen diferentes valores evita esta situación de invalidar las creencias de los agentes [19]. Un ejemplo de información de carga de recursos recopilada de las últimas 5 visitas de un agente a un recurso compartido se puede ver en la Figura 2(a). Muestra que el recurso fue visitado con frecuencia, lo que significa que había recursos gratuitos disponibles para la ejecución y no era necesario explorar otros servidores. Esto puede cambiar en el futuro ya que la carga de recursos ha aumentado significativamente recientemente. En el caso en que el conjunto de servidores que se predice que tienen recursos disponibles no esté vacío (línea 13), el agente selecciona uno de ellos para su asignación. Hemos implementado dos algoritmos alternativos para la selección de un servidor para la asignación de tareas. Algoritmo 1 Algoritmo de asignación de recursos de un agente 1 L ← ∅ //servidor con recursos libres 2 u ← U(T, t + 1) //consumo de recursos de la tarea 3 para todo P(a, l)|l ∈ LS (a) hacer 4 U(l) ← predicción de carga de recursos (P(a, l), t + 1) 5 si U(l) + u ≤ C(l) entonces 6 L ← L ∪ {P(a, l)} 7 fin si 8 fin para 9 si L = ∅ entonces 10 //todos los recursos compartidos impredecibles 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← un elemento aleatorio de E 13 else 14 allocationServer ← selección de servidor (L) 15 fin si 16 devolver allocationServer El Algoritmo 2 muestra el primer método, que es una selección no determinista según la previsibilidad de la utilización de recursos del servidor. Una distribución de probabilidad se calcula a partir de los niveles de confianza de las predicciones de recursos. El nivel de confianza depende de tres factores: la precisión del predictor activo, la cantidad de información histórica sobre el servidor y la edad promedio de la información histórica (ver Ecuación 3). El servidor con el nivel de confianza más alto tiene la mayor probabilidad de ser seleccionado como el servidor activo. G(P) = w1 · tamaño(H) m + w2 · Edad(H) máx Edad(H) + w3 · g(p) máx (g(p)) (3) donde: wi − pesos tamaño(H) − número de datos en el historial m − número máximo de valores históricos Edad(H) − edad promedio de los datos históricos g(p) − ver ecuación 4 Algoritmo 2 selecciónServidor(L) - mejor servidor predecible 1 para todos los P(a, l) ∈ L hacer 2 calcular G(P) 3 fin para 4 transformar todos los G(P) en una distribución de probabilidad 5 devolver l ∈ LS seleccionado de acuerdo con la distribución de probabilidad Algoritmo 3 selecciónServidor(L) - más recursos libres 1 para todos los P(a, l) ∈ L hacer 2 c(l) ← C(l) − Ul 3 fin para 4 devolver l ∈ LS |c(l) es máximo El segundo método de selección alternativo de un servidor del conjunto de servidores predichos con recursos libres es determinista y se muestra en el algoritmo 3. Se elige el servidor con la mayor cantidad esperada de recursos gratuitos del conjunto L de servidores con recursos gratuitos esperados. En el caso en que todos los agentes predigan que hay más recursos disponibles en un servidor en particular, todos los agentes asignarán la tarea a este servidor, lo que invalidaría las creencias de los agentes. Sin embargo, nuestros experimentos muestran que la información de historial individual y la selección no determinista del predictor activo generalmente evitan esta situación. En caso de que el algoritmo de asignación de recursos no devuelva ningún servidor (Alg. 1, línea 16), no se recomienda asignar un recurso. El agente no asignará la tarea a un recurso. Este caso ocurre solo si es posible predecir la carga de recursos para todos los servidores pero no se esperan recursos libres. Después de que la ejecución del agente haya finalizado, se realiza el proceso de evaluación descrito en el algoritmo 4. Este proceso se divide en tres casos. Primero, la tarea no fue asignada a un recurso. En este caso, el agente no puede decidir si la decisión de no asignar la tarea fue correcta o no. El agente luego elimina los datos históricos antiguos. Esto es necesario para una adaptación exitosa en el futuro. Si el agente no eliminara la información histórica antigua, la predicción siempre pronosticaría que no hay recursos disponibles gratuitos. El agente nunca asignaría una tarea a uno de los recursos en el futuro. La información histórica antigua se elimina del historial de recursos de los agentes utilizando una tasa de descomposición. La tasa de decaimiento es una función de distribución acumulativa que calcula la probabilidad de que un elemento histórico sea eliminado después de haber alcanzado un cierto The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 77 Edad de los datos históricos Tasa de decaimiento 0 1 más antiguo Figura 3: Tasa de decaimiento de la edad de la información histórica. La implementación actual utiliza una función de densidad de probabilidad constante en un dominio configurable. La Figura 3 muestra un ejemplo de una función de distribución acumulativa para la tasa de decaimiento. Dependiendo del entorno, la función de densidad de probabilidad debe ser modificada. Si el número de servidores potenciales por agente es alto, la información histórica debe mantenerse por más tiempo para evitar la exploración de recursos no explorados. Además, un entorno dinámico requiere información más actualizada para realizar predicciones más fiables. El segundo caso en el proceso de evaluación (Alg. 4, línea 5) describe las acciones tomadas después de que un servidor fue visitado por primera vez. El agente crea un nuevo conjunto de predictores para este servidor y registra la información histórica. Todos los predictores para este conjunto son elegidos al azar de un conjunto predefinido. g(p) = l i=0 ri (4) donde: ri = ⎧ ⎨ ⎩ 1 si la decisión i-ésima es correcta 0 si el resultado i-ésimo es desconocido −1 si la decisión i-ésima es incorrecta El caso general (Alg. 4, línea 8) es la evaluación después de que el agente asignó la tarea a un recurso. El agente evalúa todos los predictores del conjunto de predictores para este recurso al predecir la carga del recurso con todos los predictores basados en los datos históricos antiguos. Los predictores que hicieron una predicción correcta, lo que significa que la asignación de recursos fue correcta, recibirán una calificación positiva. Este es el caso en el que el recurso no estaba sobrecargado y se predijeron recursos libres para la ejecución, o el recurso estaba sobrecargado y este predictor habría evitado la asignación. Todos los predictores que predijeron valores que llevarían a decisiones incorrectas recibirán calificaciones negativas. En todos los demás casos, que incluye cuando no era posible hacer una predicción, se otorga una calificación neutral a los pronosticadores. Basándose en estas calificaciones de rendimiento, los niveles de confianza se calculan utilizando la ecuación 4. La confianza para todos los predictores que no pueden predecir con la información histórica actual sobre el servidor se establece en cero para evitar la selección de estos como el nuevo predictor activo. Estos valores se transforman en una distribución de probabilidad. Según esta distribución de probabilidad, el nuevo predictor activo se elige e implementa mediante una selección de ruleta. La Figura 2(b) ilustra las probabilidades de un conjunto de 10 predictores, las cuales han sido calculadas a partir de los niveles de confianza de los predictores. Aunque el predictor 9 tiene la probabilidad de selección más alta, no fue elegido por el proceso de selección de la ruleta como el predictor activo. Esta selección no determinista de predictores evita la invalidación de las creencias de los agentes en caso de que los agentes tengan el mismo conjunto de predictores. La precisión de la predicción, que es el error de la predicción en comparación con el valor observado, no se tiene en cuenta. Supongamos que el predictor activo predice ligeramente por encima de la capacidad de recursos, lo que no conduce a una asignación de recursos. De hecho, habría suficientes recursos disponibles para la ejecución. Una predicción menos precisa que está muy por debajo de la capacidad llevaría a la decisión correcta y, por lo tanto, es preferible. La última acción del algoritmo de evaluación (Alg. 4, línea 22) actualiza el historial con la información más reciente de carga de recursos del servidor. Los datos de la historia más antigua se sobrescriben si ya se han registrado m valores de historia para el servidor. Algoritmo 4 Evaluación de Decisiones 1 si l ∈ LE entonces 2 para todos los P(a, l)|l ∈ LS (a) hacer 3 evaporar datos históricos antiguos 4 fin para 5 sino si P(a, l) = nulo entonces 6 crear (P(a, l)) 7 actualizar H(l) 8 sino 9 para todos los p ∈ P(a, l) hacer 10 pred ← predicción de carga de recursos(p) 11 si (U(l) ≤ C(l) Y pred + U(a, t) ≤ C(l)) O (U(l) > C(l) Y pred + U(a, t) > C(l)) entonces 12 agregar calificación positiva(p) 13 sino si U(l) ≤ C(l) Y pred + U(a, t) > C(l) O U(l) ≤ C(l) Y pred + U(a, t) > C(l) entonces 14 agregar calificación negativa(p) 15 sino 16 agregar calificación neutral(p) 17 fin si 18 fin para 19 calcular todos los g(p); g(p) ← 0, si p no está funcionando 20 transformar todos los g(p) en una distribución de probabilidad 21 pA ← p ∈ P(a, l) es seleccionado de acuerdo a esta distribución de probabilidad 22 actualizar H(l) 23 fin si 4.2 Observaciones y Limitaciones del Enfoque Nuestro mecanismo de predicción utiliza varios tipos de predictores simples en lugar de uno sofisticado. Este método asegura que los agentes puedan competir de manera más efectiva en un entorno cambiante. Diferentes tipos de predictores son adecuados para diferentes situaciones y entornos. Por lo tanto, todos los predictores se evalúan después de cada decisión y se selecciona el predictor activo. Este carácter no determinista del nuevo predictor activo respalda que las creencias de los agentes no serán invalidadas, lo cual ocurre en el caso de que todos los predictores estén tomando la misma decisión. Especialmente si solo hay un recurso compartido disponible y todos los agentes tienen la opción de ir a este recurso compartido o no [19]. Nuestro enfoque de autoorganización es robusto frente a fallos de recursos o agentes en el sistema. Si se unen o se van, el sistema puede autoorganizarse rápidamente y adaptarse a las nuevas condiciones. No hay cuellos de botella clásicos ni un único punto de falla como en los mecanismos centralizados. Las limitaciones son la dependencia de la información de utilización de recursos históricos de otros servidores. Un pronóstico de la utilización de recursos de un servidor remoto solo es posible si un agente tiene una cantidad de información histórica sobre un recurso compartido. Si el número de servidores por agente es muy grande, no hay una manera eficiente de recopilar información histórica sobre los servidores remotos. Este problema ocurre si la cantidad de recursos compartidos proporcionados es de 78. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) es limitada y no es suficiente para todos los consumidores de recursos. En este caso, un agente intentaría aleatoriamente todos los servidores conocidos hasta encontrar uno con recursos disponibles o no haya ninguno. En el peor de los casos, para cuando se prueben todos los servidores, la información histórica de los servidores ya estará desactualizada. EVALUACIÓN EXPERIMENTAL La primera parte de esta sección ofrece un breve resumen de la configuración de nuestro entorno de simulación. En el resto de la sección, se presentan y discuten los resultados de los experimentos. Todos los experimentos se llevan a cabo en un banco de pruebas especial que simula y modela un <br>sistema multiagente</br>. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "agent": {
            "translated_key": "agente",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Towards Self-organising <br>agent</br>-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
                "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
                "In this paper we propose a distributed algorithm that solves the resource allocation problem in distributed multiagent systems.",
                "Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer.",
                "The resource allocation in the system is a purely emergent effect.",
                "We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
                "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
                "In this sense, each <br>agent</br> is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
                "Hence, distributed solutions of the resource allocation problem are required.",
                "Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation.",
                "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
                "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
                "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].",
                "In this paper we propose a distributed solution of the resource allocation problem based on self-organisation of the resource consumers in a system with limited resources.",
                "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
                "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
                "All control needed for our algorithm is distributed among the agents in the system.",
                "They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
                "The only information available to all agents are resource load and allocation success information from past resource allocations.",
                "Additional resource load information about servers is not disseminated.",
                "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
                "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
                "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
                "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-<br>agent</br> system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11].",
                "Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.",
                "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
                "Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.",
                "Section 3 describes the model of a multi-<br>agent</br> environment that was used to conduct simulations for a performance evaluation.",
                "Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results.",
                "A summary, conclusion and outlook to future work finish this paper. 2.",
                "RELATED WORK Resource allocation is an important problem in the area of computer science.",
                "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
                "Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
                "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
                "The broker usually has full knowledge about all system resources.",
                "All incoming requests are directed to the broker who is the solely decision maker.",
                "In those approaches, the resource consumer cannot influence the allocation decision process.",
                "Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
                "This mechanism works best in a homogeneous system.",
                "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
                "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation.",
                "This technique can only provide a good supplement for distributed resource allocation mechanisms.",
                "Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
                "Those coordinators usually need to have global knowledge on the state of all system resources.",
                "An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
                "The value of distributed solutions for the resource allocation problem has been recognised by research [10].",
                "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
                "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
                "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
                "A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10].",
                "Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
                "The <br>agent</br> based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
                "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
                "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
                "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
                "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
                "There has been considerable work on decentralised resource allocation techniques using game theory published over recent years.",
                "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
                "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
                "It is an ill-defined decision problem that assumes and models inductive reasoning.",
                "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
                "A variation of the El Farol problem is the so called minority game [8].",
                "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
                "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
                "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per <br>agent</br>.",
                "Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18].",
                "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
                "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
                "A resource allocation approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
                "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
                "A mobile <br>agent</br> will reject a migration to a remote <br>agent</br> server, if it expects the destination server to be already overloaded by other agents or server tasks.",
                "Agents make their decisions themselves based on forecasts of the server utilisation.",
                "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
                "MODEL DESCRIPTION We model a distributed multi-<br>agent</br> system as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "Each <br>agent</br> has a number of tasks Ti that needs to be executed during its lifetime.",
                "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
                "Resources for the execution of tasks are provided by each server li.",
                "The tasks execution location in general is specified by the map L : T ×t → L. An <br>agent</br> has to know about the existence of server resources in order to allocate tasks at those resources.",
                "We write LS (ai) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the <br>agent</br> execution. to address the set of resources known by agent ai.",
                "Resources in the system can be used by all agents for the execution of tasks.",
                "The amount of provided resources C(li, t) of each server can vary over time.",
                "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
                "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
                "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
                "In this case, some agents must wait with their allocation request until free resources are expected.",
                "The multi-<br>agent</br> system model used for our simulations is illustrated in Fig. 1. 4.",
                "SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each <br>agent</br>.",
                "The only information required in order to make a resource allocation decision for a task is the server utilisation from completed task allocations at those servers.",
                "There is no additional information dissemination about server resource utilisation or information about free resources.",
                "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
                "Additionally, we do not have any central controlling authority.",
                "All behaviour that leads to the resource allocation is created by the effective competition of the agents for shared resources and is a purely emergent effect.",
                "The agents in our multi-<br>agent</br> system compete for resources or a set of resources to execute tasks.",
                "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
                "Our approach is based on different <br>agent</br> beliefs, represented by predictors and different information about their environment.",
                "Agents prefer a task allocation at a server with free resources.",
                "However, there is no way to be sure of the amount of free server resources in advance.",
                "All agents have the same preferences and a <br>agent</br> will allocate a task on a server if it expects enough free resources for its execution.",
                "There is no communication between agents.",
                "Actions taken by agents influence the actions of other agents indirectly.",
                "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
                "It is derived from the human way of deciding ill-defined problems.",
                "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
                "Therefore, each <br>agent</br> keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation.",
                "All necessary control is integrated in the agents themselves.",
                "There is no higher controlling authority, management layer for decision support or information distribution.",
                "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
                "To do so, agents use historical information from past task allocations at those resources.",
                "Based on the forecasted resource utilisation, the <br>agent</br> will make its resource allocation decision.",
                "After the task has finished its execution and returned the results back to the <br>agent</br>, the predictor performances are evaluated and history information is updated.",
                "Algorithm 1 shows the resource allocation algorithm for each <br>agent</br>.",
                "The <br>agent</br> first predicts the next steps resource load for each server with historical information (line 3-7).",
                "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
                "The <br>agent</br> then evaluates if any free shared resources for the task allocation are expected.",
                "In the case, no free resources are expected (line 9), the <br>agent</br> will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
                "This is the standard case at the beginning of the <br>agent</br> life-cycle as there is no information about the environment available.",
                "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
                "One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load.",
                "Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
                "The most recent history item is h0.",
                "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
                "Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
                "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
                "As the result, the server would have a large amount of free resources.",
                "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
                "An example of a collected resource load information from the last 5 visits of an <br>agent</br> at a shared resource can be seen in Fig. 2(a).",
                "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
                "This may change in the future as the resource load has significantly increased recently.",
                "In the case where the set of servers predicted having free resources available is not empty (line 13), the <br>agent</br> selects one of those for allocation.",
                "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
                "Algorithm 1 Resource Allocation algorithm of an <br>agent</br> 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
                "A probability distribution is calculated from the confidence levels of the resource predictions.",
                "The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
                "The server with the highest confidence level has the biggest chance to be selected as the active server.",
                "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
                "The server with most expected free resources from the set L of server with expected free resources is chosen.",
                "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
                "However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation.",
                "In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
                "The <br>agent</br> will not allocate the task at a resource.",
                "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
                "After the <br>agent</br> execution has finished, the evaluation process described in algorithm 4 is preformed.",
                "This process is divided into three cases.",
                "First, the task was not allocated at a resource.",
                "In this case, the <br>agent</br> cannot decide if the decision not to allocate the task was correct or not.",
                "The <br>agent</br> then removes old historical data.",
                "This is necessary for a successful adaptation in the future.",
                "If the <br>agent</br> would not delete old historical information, the prediction would always forecast that no free resources are available.",
                "The <br>agent</br> would never allocate a task at one of the resources in the future.",
                "Old historical information is removed from the agents resource history using a decay rate.",
                "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
                "The current implementation uses a constant probability density function in a configurable domain.",
                "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
                "Depending on the environment, the probability density function must be altered.",
                "If the number of potential server per <br>agent</br> is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
                "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
                "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
                "The <br>agent</br> creates a new predictor set for this server and records the historical information.",
                "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the <br>agent</br> allocated the task at a resource.",
                "The <br>agent</br> evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data.",
                "Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating.",
                "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation.",
                "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
                "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
                "Based on these performance ratings, the confidence levels are calculated using equation 4.",
                "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor.",
                "These values are transformed into a probability distribution.",
                "According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection.",
                "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels.",
                "Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor.",
                "This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
                "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
                "Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources.",
                "In fact, enough resources for the execution would be available.",
                "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
                "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
                "The oldest history data is overwritten if already m history values are recorded for the server.",
                "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor.",
                "This method assures that agents can compete more effectively in a changing environment.",
                "Different types of predictors are suitable for different situations and environments.",
                "Therefore, all predictors are being evaluated after each decision and the active predictor is selected.",
                "This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
                "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
                "Our self-organising approach is robust against failures of resources or agents in the system.",
                "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
                "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
                "The limitations are the reliance on historical resource utilisation information about other servers.",
                "A forecast of the resource utilisation of a remote server is only possible if an <br>agent</br> has a number of historical information about a shared resource.",
                "If the number of servers per <br>agent</br> is very large, there is no efficient way to gather historical information about remote servers.",
                "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) is limited and not enough for all resource consumers.",
                "In this case, the an <br>agent</br> would randomly try all known servers until it will find one with free resources or there is no one.",
                "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
                "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
                "In the rest of the section, results of the experiments are presented and discussed.",
                "All experiments are conducted in a special testbed that simulates and models a multi-<br>agent</br> system.",
                "We have implemented this test-bed in the Java programming language, independent from any specific <br>agent</br> toolkit.",
                "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
                "An event-driven model is used to trigger all activities in the system.",
                "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each <br>agent</br>.",
                "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
                "Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
                "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
                "The total resource load of the system is calculated as the sum of the resources load of all resources.",
                "The self-organising resource allocation algorithm has random elements.",
                "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process.",
                "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation.",
                "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
                "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
                "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - <br>agent</br> home server: All agents are located on a home <br>agent</br> server.",
                "The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources.",
                "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
                "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
                "For this time the task consumes the assigned amount of server resources.",
                "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
                "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
                "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism.",
                "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
                "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
                "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
                "The resource capacity of each server remains constant over the experiment.",
                "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
                "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
                "Figure 4 shows the results from 100 repetitions of this experiment.",
                "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
                "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
                "This initial exploration phase shows that the average resource load of each server has a similar level.",
                "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
                "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
                "They find free resources at server 2.",
                "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
                "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
                "This experiment used algorithm 2 for the selection of the active server.",
                "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
                "The resource allocation for each server is similar.",
                "The absolute amount of free resources per server is almost the same.",
                "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
                "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
                "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
                "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
                "Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment.",
                "All agents use the deterministic most free resources selection mechanism to select the active server.",
                "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
                "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
                "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some <br>agent</br> try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
                "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
                "Fig. 4(a)). 6.",
                "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-<br>agent</br> systems was presented.",
                "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
                "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
                "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
                "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
                "The resource allocation is a purely emergent effect.",
                "Our mechanism demonstrates that resource allocation can be done by the effective competition of individual and autonomous agents.",
                "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
                "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
                "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
                "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required.",
                "Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
                "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-<br>agent</br> system environment.",
                "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
                "All control is implemented in the agents.",
                "A simple decision mechanism based on different beliefs of the <br>agent</br> creates an emergent behaviour that leads to effective resource allocation.",
                "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
                "Our approach adapts to changes in the environment but it is not evolutionary.",
                "There is no discovery of new strategies by the agents.",
                "The set of predictors stays the same over the whole life.",
                "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) investigated in the future.",
                "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
                "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance.",
                "The decay rate is currently predefined and must be altered manually depending on the environment.",
                "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
                "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
                "We are aware of the long learning phase in environments with a large number of shared resources known by each <br>agent</br>.",
                "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
                "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
                "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
                "In this situation, it is difficult for an <br>agent</br> to efficiently gather historical information about all remote servers.",
                "This issue needs more investigation in the future. 7.",
                "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
                "Cactus Tools for Grid Applications.",
                "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
                "Kluwer Academic Publishers. [2] W. B. Arthur.",
                "Inductive Reasoning and Bounded Rationality.",
                "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
                "Server Load Balancing.",
                "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
                "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
                "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
                "Economic Models for Resource Management and Scheduling in Grid Computing.",
                "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
                "Architectural Models for Resource Management in the Grid.",
                "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
                "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
                "A taxonomy of scheduling in general-purpose distributed computing systems.",
                "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
                "Emergence of Cooperation and Organization in an Evolutionary Game.",
                "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
                "On load balancing for distributed multiagent computing.",
                "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
                "IEEE, August 2002. [10] S. H. Clearwater.",
                "Market-based control.",
                "A Paradigm for Distributed Resource Allocation.",
                "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
                "Capacity Planning of Mobile <br>agent</br> Systems Designing Efficient Intranet Applications.",
                "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
                "Foster and C. Kesselman.",
                "Globus: A Metacomputing Infrastructure Toolkit.",
                "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
                "Foster, M. Livny, and S. Tuecke.",
                "Condor-G: A Computation Management <br>agent</br> for Multi-Institutional Grids.",
                "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
                "Resource allocation games with changing resource capacities.",
                "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
                "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
                "Combining state and model-based approaches for mobile <br>agent</br> load balancing.",
                "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
                "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
                "Decentralized Adaptive Resource Allocation for Sensor Networks.",
                "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
                "An <br>agent</br>-based Resource Allocation Model for Computational Grids.",
                "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
                "Adaptive Load Balancing: A Study in Multi-<br>agent</br> Learning.",
                "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
                "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
                "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi <br>agent</br> Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
                "ACM Press, May 2006. [20] W3C.",
                "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
                "Complexity: The Emerging Science at the Edge of Order and Chaos.",
                "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
                "Analyzing Market-Based Resource Allocation Strategies for the Computational Grid.",
                "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
                "Sage Science Press, 2001.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 81"
            ],
            "original_annotated_samples": [
                "Towards Self-organising <br>agent</br>-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
                "In this sense, each <br>agent</br> is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-<br>agent</br> system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "Section 3 describes the model of a multi-<br>agent</br> environment that was used to conduct simulations for a performance evaluation.",
                "The <br>agent</br> based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents."
            ],
            "translated_annotated_samples": [
                "Hacia la asignación de recursos basada en <br>agente</br>s autoorganizados en un entorno de múltiples servidores. Tino Schlegel1, Ryszard Kowalczyk2. Universidad de Tecnología Swinburne, Facultad de Tecnologías de la Información y la Comunicación, Hawthorn, 3122 Victoria, Australia {tschlegel1, rkowalczyk2}@ict.swin.edu.au. RESUMEN Las aplicaciones distribuidas requieren técnicas distribuidas para una asignación eficiente de recursos.",
                "En este sentido, cada <br>agente</br> es un consumidor de recursos que adquiere una cierta cantidad de recursos para la ejecución de sus tareas.",
                "El enfoque propuesto proporciona una forma sencilla de implementar la asignación de recursos distribuidos y tiene en cuenta las tendencias del sistema multi<br>agente</br> hacia la autonomía, la heterogeneidad y la falta de fiabilidad de los recursos y <br>agente</br>s.",
                "La sección 3 describe el modelo de un entorno multi<br>agente</br> que se utilizó para realizar simulaciones con el fin de evaluar el rendimiento.",
                "El Modelo de Asignación de Recursos basado en Agentes (ARAM) para redes está diseñado para programar trabajos computacionalmente costosos utilizando <br>agente</br>s."
            ],
            "translated_text": "Hacia la asignación de recursos basada en <br>agente</br>s autoorganizados en un entorno de múltiples servidores. Tino Schlegel1, Ryszard Kowalczyk2. Universidad de Tecnología Swinburne, Facultad de Tecnologías de la Información y la Comunicación, Hawthorn, 3122 Victoria, Australia {tschlegel1, rkowalczyk2}@ict.swin.edu.au. RESUMEN Las aplicaciones distribuidas requieren técnicas distribuidas para una asignación eficiente de recursos. Estas técnicas deben tener en cuenta la heterogeneidad y la posible falta de fiabilidad de los recursos y consumidores de recursos en entornos distribuidos. En este artículo proponemos un algoritmo distribuido que resuelve el problema de asignación de recursos en sistemas multiagentes distribuidos. Nuestra solución se basa en la autoorganización de agentes, la cual no requiere ningún facilitador o capa de gestión. La asignación de recursos en el sistema es un efecto puramente emergente. Presentamos los resultados del mecanismo de asignación de recursos propuesto en el entorno simulado de servidores múltiples estáticos y dinámicos. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Coherencia y coordinación Términos Generales Algoritmos 1. INTRODUCCIÓN Con la creciente popularidad de tecnologías de computación distribuida como Grid [12] y servicios web [20], Internet se está convirtiendo en una plataforma informática poderosa donde diferentes pares de software (por ejemplo, agentes) pueden utilizar recursos informáticos existentes para realizar tareas. En este sentido, cada <br>agente</br> es un consumidor de recursos que adquiere una cierta cantidad de recursos para la ejecución de sus tareas. Es difícil para un mecanismo central de asignación de recursos recopilar y gestionar la información sobre todos los recursos compartidos y consumidores de recursos para realizar de manera efectiva la asignación de recursos. Por lo tanto, se requieren soluciones distribuidas del problema de asignación de recursos. Los investigadores han reconocido estos requisitos [10] y han propuesto técnicas para la asignación de recursos distribuidos. Un tipo prometedor de enfoques distribuidos se basa en modelos de mercado económico [4], inspirados en los principios de los mercados de valores reales. Aunque esos enfoques estén distribuidos, generalmente requieren un facilitador para la fijación de precios, la búsqueda de recursos y la asignación de trabajos a los recursos [5, 9]. Otro problema principalmente sin resolver de esos enfoques es el ajuste fino del precio y el tiempo, las restricciones presupuestarias para permitir una asignación eficiente de recursos en sistemas grandes y dinámicos [22]. En este documento proponemos una solución distribuida del problema de asignación de recursos basada en la autoorganización de los consumidores de recursos en un sistema con recursos limitados. En nuestro enfoque, los agentes asignan dinámicamente tareas a servidores que proporcionan una cantidad limitada de recursos. En nuestro enfoque, los agentes seleccionan de forma autónoma la plataforma de ejecución para la tarea en lugar de pedir a un intermediario de recursos que realice la asignación. Todo el control necesario para nuestro algoritmo está distribuido entre los agentes en el sistema. Optimizan continuamente el proceso de asignación de recursos a lo largo de su vida para adaptarse a los cambios en la disponibilidad de recursos compartidos, aprendiendo de decisiones de asignación pasadas. La única información disponible para todos los agentes son la carga de recursos y la información sobre el éxito de la asignación de recursos de asignaciones pasadas. La información adicional sobre la carga de recursos de los servidores no se difunde. El concepto básico de nuestra solución está inspirado en el razonamiento inductivo y la racionalidad limitada introducida por W. Brian Arthur [2]. El mecanismo propuesto no requiere una autoridad central de control, una capa de gestión de recursos o introducir comunicación adicional entre agentes para decidir qué tarea se asigna en qué servidor. Demostramos que este mecanismo funciona bien en sistemas dinámicos con un gran número de tareas y puede adaptarse fácilmente a diferentes tamaños de sistemas. Además, el rendimiento general del sistema no se ve afectado en caso de que los agentes o servidores fallen o no estén disponibles. El enfoque propuesto proporciona una forma sencilla de implementar la asignación de recursos distribuidos y tiene en cuenta las tendencias del sistema multi<br>agente</br> hacia la autonomía, la heterogeneidad y la falta de fiabilidad de los recursos y <br>agente</br>s. Esta técnica propuesta puede ser fácilmente complementada por técnicas para encolar o rechazar solicitudes de asignación de recursos de agentes [11]. Tales capacidades de auto-gestión de agentes de software permiten una asignación de recursos confiable incluso en un entorno con proveedores de recursos poco confiables. Esto se puede lograr mediante las interacciones mutuas entre agentes aplicando técnicas de la teoría de sistemas complejos. La autoorganización de todos los agentes conduce a una autoorganización de los recursos del sistema 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS y es una propiedad emergente del sistema [21]. El resto del documento está estructurado de la siguiente manera: La siguiente sección proporciona una visión general del trabajo relacionado ya realizado en el área de equilibrio de carga, asignación de recursos o programación. La sección 3 describe el modelo de un entorno multi<br>agente</br> que se utilizó para realizar simulaciones con el fin de evaluar el rendimiento. Las secciones 4 y 5 describen el algoritmo de asignación de recursos distribuidos y presentan varios resultados experimentales. Un resumen, una conclusión y una perspectiva del trabajo futuro finalizan este documento. El trabajo relacionado La asignación de recursos es un problema importante en el área de la informática. En los últimos años, diferentes grupos de investigación han propuesto soluciones basadas en diferentes suposiciones y restricciones [7, 3, 15, 10]. En términos generales, la asignación de recursos es un mecanismo o política para la gestión eficiente y efectiva del acceso a un recurso limitado o conjunto de recursos por parte de sus consumidores. En el caso más simple, los consumidores de recursos solicitan a un intermediario central o despachador los recursos disponibles donde el consumidor de recursos será asignado. El corredor generalmente tiene pleno conocimiento de todos los recursos del sistema. Todas las solicitudes entrantes son dirigidas al corredor, quien es el único tomador de decisiones. En esos enfoques, el consumidor de recursos no puede influir en el proceso de decisión de asignación. El equilibrio de carga [3] es un caso especial del problema de asignación de recursos que utiliza un intermediario que intenta ser justo con todos los recursos al equilibrar la carga del sistema de manera equitativa entre todos los proveedores de recursos. Este mecanismo funciona mejor en un sistema homogéneo. Una técnica distribuida simple para la gestión de recursos es la planificación de capacidad mediante la negativa o encolamiento de agentes entrantes para evitar la sobrecarga de recursos [11]. Desde la perspectiva del propietario de recursos, esta técnica es importante para prevenir la sobrecarga en el recurso, pero no es suficiente para una asignación efectiva de recursos. Esta técnica solo puede proporcionar un buen complemento para los mecanismos de asignación de recursos distribuidos. La mayoría de las técnicas actuales para la asignación de recursos en herramientas de computación en malla como Globus [12] o Condor-G [13] coordinan la asignación de recursos con un subastador, árbitro, despachador, programador o gestor. Esos coordinadores suelen necesitar tener conocimiento global sobre el estado de todos los recursos del sistema. Un ejemplo de un algoritmo de asignación de recursos dinámicos es el proyecto Cactus [1] para la asignación de trabajos computacionales muy costosos. El valor de las soluciones distribuidas para el problema de asignación de recursos ha sido reconocido por la investigación [10]. Inspirados en los principios de los mercados de valores, se han desarrollado modelos de mercado económico para negociar recursos con el fin de regular la oferta y la demanda en la red. Estos enfoques utilizan diferentes estrategias de precios como modelos de precios publicados, diferentes métodos de subasta o un modelo de mercado de productos básicos. Los usuarios intentan comprar recursos baratos necesarios para ejecutar el trabajo, mientras que los proveedores intentan obtener la mayor ganancia posible y operar los recursos disponibles a plena capacidad. Se presenta una colección de diferentes técnicas de asignación de recursos distribuidos basadas en modelos de mercado en Clearwater [10]. Buyya et al. desarrollaron un marco de asignación de recursos basado en la regulación de la oferta y la demanda [4] para Nimrod-G [6] con el enfoque principal en los plazos de entrega de trabajos y las restricciones presupuestarias. El Modelo de Asignación de Recursos basado en Agentes (ARAM) para redes está diseñado para programar trabajos computacionalmente costosos utilizando <br>agente</br>s. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "resource allocation": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Towards Self-organising Agent-based <br>resource allocation</br> in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient <br>resource allocation</br>.",
                "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
                "In this paper we propose a distributed algorithm that solves the <br>resource allocation</br> problem in distributed multiagent systems.",
                "Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer.",
                "The <br>resource allocation</br> in the system is a purely emergent effect.",
                "We present results of the proposed <br>resource allocation</br> mechanism in the simulated static and dynamic multi-server environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
                "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
                "In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "It is difficult for a central <br>resource allocation</br> mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
                "Hence, distributed solutions of the <br>resource allocation</br> problem are required.",
                "Researchers have recognised these requirements [10] and proposed techniques for distributed <br>resource allocation</br>.",
                "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
                "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
                "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient <br>resource allocation</br> in large, dynamic systems [22].",
                "In this paper we propose a distributed solution of the <br>resource allocation</br> problem based on self-organisation of the resource consumers in a system with limited resources.",
                "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
                "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
                "All control needed for our algorithm is distributed among the agents in the system.",
                "They optimise the <br>resource allocation</br> process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
                "The only information available to all agents are resource load and allocation success information from past resource allocations.",
                "Additional resource load information about servers is not disseminated.",
                "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
                "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
                "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
                "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
                "The proposed approach provides an easy way to implement distributed <br>resource allocation</br> and takes into account multi-agent system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "This proposed technique can be easily supplemented by techniques for queuing or rejecting <br>resource allocation</br> requests of agents [11].",
                "Such self-managing capabilities of software agents allow a reliable <br>resource allocation</br> even in an environment with unreliable resource providers.",
                "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
                "Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, <br>resource allocation</br> or scheduling.",
                "Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.",
                "Sections 4 and 5 describe the distributed <br>resource allocation</br> algorithm and presents various experimental results.",
                "A summary, conclusion and outlook to future work finish this paper. 2.",
                "RELATED WORK <br>resource allocation</br> is an important problem in the area of computer science.",
                "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
                "Generally speaking, <br>resource allocation</br> is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
                "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
                "The broker usually has full knowledge about all system resources.",
                "All incoming requests are directed to the broker who is the solely decision maker.",
                "In those approaches, the resource consumer cannot influence the allocation decision process.",
                "Load balancing [3] is a special case of the <br>resource allocation</br> problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
                "This mechanism works best in a homogeneous system.",
                "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
                "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective <br>resource allocation</br>.",
                "This technique can only provide a good supplement for distributed <br>resource allocation</br> mechanisms.",
                "Most of todays techniques for <br>resource allocation</br> in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the <br>resource allocation</br> with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
                "Those coordinators usually need to have global knowledge on the state of all system resources.",
                "An example of a dynamic <br>resource allocation</br> algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
                "The value of distributed solutions for the <br>resource allocation</br> problem has been recognised by research [10].",
                "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
                "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
                "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
                "A collection of different distributed <br>resource allocation</br> techniques based on market models is presented in Clearwater [10].",
                "Buyya et al. developed a <br>resource allocation</br> framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
                "The Agent based <br>resource allocation</br> Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
                "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
                "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
                "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
                "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
                "There has been considerable work on decentralised <br>resource allocation</br> techniques using game theory published over recent years.",
                "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
                "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
                "It is an ill-defined decision problem that assumes and models inductive reasoning.",
                "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
                "A variation of the El Farol problem is the so called minority game [8].",
                "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
                "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
                "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent.",
                "Another distributed technique that is employed for solving the <br>resource allocation</br> problem is based on reinforcement learning [18].",
                "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
                "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
                "A <br>resource allocation</br> approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
                "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
                "A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks.",
                "Agents make their decisions themselves based on forecasts of the server utilisation.",
                "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
                "MODEL DESCRIPTION We model a distributed multi-agent system as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "Each agent has a number of tasks Ti that needs to be executed during its lifetime.",
                "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
                "Resources for the execution of tasks are provided by each server li.",
                "The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources.",
                "We write LS (ai) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai.",
                "Resources in the system can be used by all agents for the execution of tasks.",
                "The amount of provided resources C(li, t) of each server can vary over time.",
                "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
                "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
                "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
                "In this case, some agents must wait with their allocation request until free resources are expected.",
                "The multi-agent system model used for our simulations is illustrated in Fig. 1. 4.",
                "SELF-ORGANISING <br>resource allocation</br> The <br>resource allocation</br> algorithm as described in this section is integrated in each agent.",
                "The only information required in order to make a <br>resource allocation</br> decision for a task is the server utilisation from completed task allocations at those servers.",
                "There is no additional information dissemination about server resource utilisation or information about free resources.",
                "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
                "Additionally, we do not have any central controlling authority.",
                "All behaviour that leads to the <br>resource allocation</br> is created by the effective competition of the agents for shared resources and is a purely emergent effect.",
                "The agents in our multi-agent system compete for resources or a set of resources to execute tasks.",
                "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
                "Our approach is based on different agent beliefs, represented by predictors and different information about their environment.",
                "Agents prefer a task allocation at a server with free resources.",
                "However, there is no way to be sure of the amount of free server resources in advance.",
                "All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution.",
                "There is no communication between agents.",
                "Actions taken by agents influence the actions of other agents indirectly.",
                "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
                "It is derived from the human way of deciding ill-defined problems.",
                "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
                "Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 <br>resource allocation</br> Algorithm This section describes the decision mechanism for our selforganising <br>resource allocation</br>.",
                "All necessary control is integrated in the agents themselves.",
                "There is no higher controlling authority, management layer for decision support or information distribution.",
                "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
                "To do so, agents use historical information from past task allocations at those resources.",
                "Based on the forecasted resource utilisation, the agent will make its <br>resource allocation</br> decision.",
                "After the task has finished its execution and returned the results back to the agent, the predictor performances are evaluated and history information is updated.",
                "Algorithm 1 shows the <br>resource allocation</br> algorithm for each agent.",
                "The agent first predicts the next steps resource load for each server with historical information (line 3-7).",
                "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
                "The agent then evaluates if any free shared resources for the task allocation are expected.",
                "In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
                "This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available.",
                "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
                "One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load.",
                "Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
                "The most recent history item is h0.",
                "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
                "Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
                "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
                "As the result, the server would have a large amount of free resources.",
                "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
                "An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a).",
                "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
                "This may change in the future as the resource load has significantly increased recently.",
                "In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation.",
                "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
                "Algorithm 1 <br>resource allocation</br> algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
                "A probability distribution is calculated from the confidence levels of the resource predictions.",
                "The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
                "The server with the highest confidence level has the biggest chance to be selected as the active server.",
                "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
                "The server with most expected free resources from the set L of server with expected free resources is chosen.",
                "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
                "However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation.",
                "In the case, the <br>resource allocation</br> algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
                "The agent will not allocate the task at a resource.",
                "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
                "After the agent execution has finished, the evaluation process described in algorithm 4 is preformed.",
                "This process is divided into three cases.",
                "First, the task was not allocated at a resource.",
                "In this case, the agent cannot decide if the decision not to allocate the task was correct or not.",
                "The agent then removes old historical data.",
                "This is necessary for a successful adaptation in the future.",
                "If the agent would not delete old historical information, the prediction would always forecast that no free resources are available.",
                "The agent would never allocate a task at one of the resources in the future.",
                "Old historical information is removed from the agents resource history using a decay rate.",
                "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
                "The current implementation uses a constant probability density function in a configurable domain.",
                "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
                "Depending on the environment, the probability density function must be altered.",
                "If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
                "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
                "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
                "The agent creates a new predictor set for this server and records the historical information.",
                "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource.",
                "The agent evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data.",
                "Predictors that made a correct prediction meaning the <br>resource allocation</br> was correct, will receive a positive rating.",
                "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation.",
                "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
                "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
                "Based on these performance ratings, the confidence levels are calculated using equation 4.",
                "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor.",
                "These values are transformed into a probability distribution.",
                "According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection.",
                "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels.",
                "Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor.",
                "This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
                "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
                "Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources.",
                "In fact, enough resources for the execution would be available.",
                "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
                "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
                "The oldest history data is overwritten if already m history values are recorded for the server.",
                "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor.",
                "This method assures that agents can compete more effectively in a changing environment.",
                "Different types of predictors are suitable for different situations and environments.",
                "Therefore, all predictors are being evaluated after each decision and the active predictor is selected.",
                "This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
                "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
                "Our self-organising approach is robust against failures of resources or agents in the system.",
                "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
                "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
                "The limitations are the reliance on historical resource utilisation information about other servers.",
                "A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource.",
                "If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers.",
                "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers.",
                "In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one.",
                "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
                "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
                "In the rest of the section, results of the experiments are presented and discussed.",
                "All experiments are conducted in a special testbed that simulates and models a multi-agent system.",
                "We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit.",
                "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
                "An event-driven model is used to trigger all activities in the system.",
                "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each agent.",
                "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
                "Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising <br>resource allocation</br> is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
                "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
                "The total resource load of the system is calculated as the sum of the resources load of all resources.",
                "The self-organising <br>resource allocation</br> algorithm has random elements.",
                "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the <br>resource allocation</br> process.",
                "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the <br>resource allocation</br>.",
                "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
                "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
                "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server.",
                "The resources of those servers not considered in our simulation and does not affect the <br>resource allocation</br> performance. - Server resources: Experiments use servers with different amount of available shared resources.",
                "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
                "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
                "For this time the task consumes the assigned amount of server resources.",
                "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
                "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
                "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed <br>resource allocation</br> mechanism.",
                "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
                "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
                "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
                "The resource capacity of each server remains constant over the experiment.",
                "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
                "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
                "Figure 4 shows the results from 100 repetitions of this experiment.",
                "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
                "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
                "This initial exploration phase shows that the average resource load of each server has a similar level.",
                "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
                "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
                "They find free resources at server 2.",
                "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
                "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
                "This experiment used algorithm 2 for the selection of the active server.",
                "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
                "The <br>resource allocation</br> for each server is similar.",
                "The absolute amount of free resources per server is almost the same.",
                "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
                "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
                "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
                "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
                "Figure 5 (b, c, d) shows the behaviour of our self-organising <br>resource allocation</br> in this environment.",
                "All agents use the deterministic most free resources selection mechanism to select the active server.",
                "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
                "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
                "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
                "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
                "Fig. 4(a)). 6.",
                "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed <br>resource allocation</br> technique for multi-agent systems was presented.",
                "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
                "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
                "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
                "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
                "The <br>resource allocation</br> is a purely emergent effect.",
                "Our mechanism demonstrates that <br>resource allocation</br> can be done by the effective competition of individual and autonomous agents.",
                "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
                "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
                "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
                "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for <br>resource allocation</br> is required.",
                "Our self-organising <br>resource allocation</br> approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
                "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-agent system environment.",
                "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
                "All control is implemented in the agents.",
                "A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective <br>resource allocation</br>.",
                "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
                "Our approach adapts to changes in the environment but it is not evolutionary.",
                "There is no discovery of new strategies by the agents.",
                "The set of predictors stays the same over the whole life.",
                "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future.",
                "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
                "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the <br>resource allocation</br> performance.",
                "The decay rate is currently predefined and must be altered manually depending on the environment.",
                "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
                "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
                "We are aware of the long learning phase in environments with a large number of shared resources known by each agent.",
                "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
                "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
                "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
                "In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers.",
                "This issue needs more investigation in the future. 7.",
                "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
                "Cactus Tools for Grid Applications.",
                "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
                "Kluwer Academic Publishers. [2] W. B. Arthur.",
                "Inductive Reasoning and Bounded Rationality.",
                "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
                "Server Load Balancing.",
                "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
                "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
                "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
                "Economic Models for Resource Management and Scheduling in Grid Computing.",
                "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
                "Architectural Models for Resource Management in the Grid.",
                "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
                "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
                "A taxonomy of scheduling in general-purpose distributed computing systems.",
                "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
                "Emergence of Cooperation and Organization in an Evolutionary Game.",
                "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
                "On load balancing for distributed multiagent computing.",
                "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
                "IEEE, August 2002. [10] S. H. Clearwater.",
                "Market-based control.",
                "A Paradigm for Distributed <br>resource allocation</br>.",
                "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
                "Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications.",
                "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
                "Foster and C. Kesselman.",
                "Globus: A Metacomputing Infrastructure Toolkit.",
                "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
                "Foster, M. Livny, and S. Tuecke.",
                "Condor-G: A Computation Management Agent for Multi-Institutional Grids.",
                "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
                "<br>resource allocation</br> games with changing resource capacities.",
                "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
                "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
                "Combining state and model-based approaches for mobile agent load balancing.",
                "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
                "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
                "Decentralized Adaptive <br>resource allocation</br> for Sensor Networks.",
                "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
                "An Agent-based <br>resource allocation</br> Model for Computational Grids.",
                "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
                "Adaptive Load Balancing: A Study in Multi-Agent Learning.",
                "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
                "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
                "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
                "ACM Press, May 2006. [20] W3C.",
                "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
                "Complexity: The Emerging Science at the Edge of Order and Chaos.",
                "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
                "Analyzing Market-Based <br>resource allocation</br> Strategies for the Computational Grid.",
                "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
                "Sage Science Press, 2001.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81"
            ],
            "original_annotated_samples": [
                "Towards Self-organising Agent-based <br>resource allocation</br> in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient <br>resource allocation</br>.",
                "In this paper we propose a distributed algorithm that solves the <br>resource allocation</br> problem in distributed multiagent systems.",
                "The <br>resource allocation</br> in the system is a purely emergent effect.",
                "We present results of the proposed <br>resource allocation</br> mechanism in the simulated static and dynamic multi-server environment.",
                "It is difficult for a central <br>resource allocation</br> mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources."
            ],
            "translated_annotated_samples": [
                "Hacia la <br>asignación de recursos</br> basada en agentes autoorganizados en un entorno de múltiples servidores. Tino Schlegel1, Ryszard Kowalczyk2. Universidad de Tecnología Swinburne, Facultad de Tecnologías de la Información y la Comunicación, Hawthorn, 3122 Victoria, Australia {tschlegel1, rkowalczyk2}@ict.swin.edu.au. RESUMEN Las aplicaciones distribuidas requieren técnicas distribuidas para una asignación eficiente de recursos.",
                "En este artículo proponemos un algoritmo distribuido que resuelve el <br>problema de asignación de recursos</br> en sistemas multiagentes distribuidos.",
                "La <br>asignación de recursos</br> en el sistema es un efecto puramente emergente.",
                "Presentamos los resultados del mecanismo de <br>asignación de recursos</br> propuesto en el entorno simulado de servidores múltiples estáticos y dinámicos.",
                "Es difícil para un mecanismo central de <br>asignación de recursos</br> recopilar y gestionar la información sobre todos los recursos compartidos y consumidores de recursos para realizar de manera efectiva la <br>asignación de recursos</br>."
            ],
            "translated_text": "Hacia la <br>asignación de recursos</br> basada en agentes autoorganizados en un entorno de múltiples servidores. Tino Schlegel1, Ryszard Kowalczyk2. Universidad de Tecnología Swinburne, Facultad de Tecnologías de la Información y la Comunicación, Hawthorn, 3122 Victoria, Australia {tschlegel1, rkowalczyk2}@ict.swin.edu.au. RESUMEN Las aplicaciones distribuidas requieren técnicas distribuidas para una asignación eficiente de recursos. Estas técnicas deben tener en cuenta la heterogeneidad y la posible falta de fiabilidad de los recursos y consumidores de recursos en entornos distribuidos. En este artículo proponemos un algoritmo distribuido que resuelve el <br>problema de asignación de recursos</br> en sistemas multiagentes distribuidos. Nuestra solución se basa en la autoorganización de agentes, la cual no requiere ningún facilitador o capa de gestión. La <br>asignación de recursos</br> en el sistema es un efecto puramente emergente. Presentamos los resultados del mecanismo de <br>asignación de recursos</br> propuesto en el entorno simulado de servidores múltiples estáticos y dinámicos. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Coherencia y coordinación Términos Generales Algoritmos 1. INTRODUCCIÓN Con la creciente popularidad de tecnologías de computación distribuida como Grid [12] y servicios web [20], Internet se está convirtiendo en una plataforma informática poderosa donde diferentes pares de software (por ejemplo, agentes) pueden utilizar recursos informáticos existentes para realizar tareas. En este sentido, cada agente es un consumidor de recursos que adquiere una cierta cantidad de recursos para la ejecución de sus tareas. Es difícil para un mecanismo central de <br>asignación de recursos</br> recopilar y gestionar la información sobre todos los recursos compartidos y consumidores de recursos para realizar de manera efectiva la <br>asignación de recursos</br>. ",
            "candidates": [],
            "error": [
                [
                    "asignación de recursos",
                    "problema de asignación de recursos",
                    "asignación de recursos",
                    "asignación de recursos",
                    "asignación de recursos",
                    "asignación de recursos"
                ]
            ]
        },
        "distributed algorithm": {
            "translated_key": "algoritmo distribuido",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Towards Self-organising Agent-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
                "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
                "In this paper we propose a <br>distributed algorithm</br> that solves the resource allocation problem in distributed multiagent systems.",
                "Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer.",
                "The resource allocation in the system is a purely emergent effect.",
                "We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
                "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
                "In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
                "Hence, distributed solutions of the resource allocation problem are required.",
                "Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation.",
                "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
                "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
                "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].",
                "In this paper we propose a distributed solution of the resource allocation problem based on self-organisation of the resource consumers in a system with limited resources.",
                "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
                "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
                "All control needed for our algorithm is distributed among the agents in the system.",
                "They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
                "The only information available to all agents are resource load and allocation success information from past resource allocations.",
                "Additional resource load information about servers is not disseminated.",
                "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
                "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
                "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
                "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-agent system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11].",
                "Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.",
                "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
                "Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.",
                "Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.",
                "Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results.",
                "A summary, conclusion and outlook to future work finish this paper. 2.",
                "RELATED WORK Resource allocation is an important problem in the area of computer science.",
                "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
                "Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
                "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
                "The broker usually has full knowledge about all system resources.",
                "All incoming requests are directed to the broker who is the solely decision maker.",
                "In those approaches, the resource consumer cannot influence the allocation decision process.",
                "Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
                "This mechanism works best in a homogeneous system.",
                "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
                "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation.",
                "This technique can only provide a good supplement for distributed resource allocation mechanisms.",
                "Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
                "Those coordinators usually need to have global knowledge on the state of all system resources.",
                "An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
                "The value of distributed solutions for the resource allocation problem has been recognised by research [10].",
                "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
                "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
                "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
                "A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10].",
                "Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
                "The Agent based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
                "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
                "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
                "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
                "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
                "There has been considerable work on decentralised resource allocation techniques using game theory published over recent years.",
                "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
                "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
                "It is an ill-defined decision problem that assumes and models inductive reasoning.",
                "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
                "A variation of the El Farol problem is the so called minority game [8].",
                "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
                "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
                "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent.",
                "Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18].",
                "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
                "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
                "A resource allocation approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
                "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
                "A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks.",
                "Agents make their decisions themselves based on forecasts of the server utilisation.",
                "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
                "MODEL DESCRIPTION We model a distributed multi-agent system as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "Each agent has a number of tasks Ti that needs to be executed during its lifetime.",
                "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
                "Resources for the execution of tasks are provided by each server li.",
                "The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources.",
                "We write LS (ai) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai.",
                "Resources in the system can be used by all agents for the execution of tasks.",
                "The amount of provided resources C(li, t) of each server can vary over time.",
                "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
                "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
                "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
                "In this case, some agents must wait with their allocation request until free resources are expected.",
                "The multi-agent system model used for our simulations is illustrated in Fig. 1. 4.",
                "SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each agent.",
                "The only information required in order to make a resource allocation decision for a task is the server utilisation from completed task allocations at those servers.",
                "There is no additional information dissemination about server resource utilisation or information about free resources.",
                "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
                "Additionally, we do not have any central controlling authority.",
                "All behaviour that leads to the resource allocation is created by the effective competition of the agents for shared resources and is a purely emergent effect.",
                "The agents in our multi-agent system compete for resources or a set of resources to execute tasks.",
                "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
                "Our approach is based on different agent beliefs, represented by predictors and different information about their environment.",
                "Agents prefer a task allocation at a server with free resources.",
                "However, there is no way to be sure of the amount of free server resources in advance.",
                "All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution.",
                "There is no communication between agents.",
                "Actions taken by agents influence the actions of other agents indirectly.",
                "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
                "It is derived from the human way of deciding ill-defined problems.",
                "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
                "Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation.",
                "All necessary control is integrated in the agents themselves.",
                "There is no higher controlling authority, management layer for decision support or information distribution.",
                "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
                "To do so, agents use historical information from past task allocations at those resources.",
                "Based on the forecasted resource utilisation, the agent will make its resource allocation decision.",
                "After the task has finished its execution and returned the results back to the agent, the predictor performances are evaluated and history information is updated.",
                "Algorithm 1 shows the resource allocation algorithm for each agent.",
                "The agent first predicts the next steps resource load for each server with historical information (line 3-7).",
                "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
                "The agent then evaluates if any free shared resources for the task allocation are expected.",
                "In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
                "This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available.",
                "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
                "One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load.",
                "Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
                "The most recent history item is h0.",
                "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
                "Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
                "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
                "As the result, the server would have a large amount of free resources.",
                "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
                "An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a).",
                "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
                "This may change in the future as the resource load has significantly increased recently.",
                "In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation.",
                "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
                "Algorithm 1 Resource Allocation algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
                "A probability distribution is calculated from the confidence levels of the resource predictions.",
                "The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
                "The server with the highest confidence level has the biggest chance to be selected as the active server.",
                "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
                "The server with most expected free resources from the set L of server with expected free resources is chosen.",
                "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
                "However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation.",
                "In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
                "The agent will not allocate the task at a resource.",
                "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
                "After the agent execution has finished, the evaluation process described in algorithm 4 is preformed.",
                "This process is divided into three cases.",
                "First, the task was not allocated at a resource.",
                "In this case, the agent cannot decide if the decision not to allocate the task was correct or not.",
                "The agent then removes old historical data.",
                "This is necessary for a successful adaptation in the future.",
                "If the agent would not delete old historical information, the prediction would always forecast that no free resources are available.",
                "The agent would never allocate a task at one of the resources in the future.",
                "Old historical information is removed from the agents resource history using a decay rate.",
                "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
                "The current implementation uses a constant probability density function in a configurable domain.",
                "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
                "Depending on the environment, the probability density function must be altered.",
                "If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
                "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
                "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
                "The agent creates a new predictor set for this server and records the historical information.",
                "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource.",
                "The agent evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data.",
                "Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating.",
                "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation.",
                "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
                "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
                "Based on these performance ratings, the confidence levels are calculated using equation 4.",
                "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor.",
                "These values are transformed into a probability distribution.",
                "According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection.",
                "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels.",
                "Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor.",
                "This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
                "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
                "Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources.",
                "In fact, enough resources for the execution would be available.",
                "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
                "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
                "The oldest history data is overwritten if already m history values are recorded for the server.",
                "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor.",
                "This method assures that agents can compete more effectively in a changing environment.",
                "Different types of predictors are suitable for different situations and environments.",
                "Therefore, all predictors are being evaluated after each decision and the active predictor is selected.",
                "This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
                "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
                "Our self-organising approach is robust against failures of resources or agents in the system.",
                "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
                "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
                "The limitations are the reliance on historical resource utilisation information about other servers.",
                "A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource.",
                "If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers.",
                "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers.",
                "In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one.",
                "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
                "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
                "In the rest of the section, results of the experiments are presented and discussed.",
                "All experiments are conducted in a special testbed that simulates and models a multi-agent system.",
                "We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit.",
                "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
                "An event-driven model is used to trigger all activities in the system.",
                "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each agent.",
                "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
                "Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
                "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
                "The total resource load of the system is calculated as the sum of the resources load of all resources.",
                "The self-organising resource allocation algorithm has random elements.",
                "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process.",
                "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation.",
                "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
                "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
                "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server.",
                "The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources.",
                "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
                "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
                "For this time the task consumes the assigned amount of server resources.",
                "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
                "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
                "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism.",
                "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
                "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
                "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
                "The resource capacity of each server remains constant over the experiment.",
                "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
                "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
                "Figure 4 shows the results from 100 repetitions of this experiment.",
                "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
                "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
                "This initial exploration phase shows that the average resource load of each server has a similar level.",
                "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
                "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
                "They find free resources at server 2.",
                "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
                "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
                "This experiment used algorithm 2 for the selection of the active server.",
                "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
                "The resource allocation for each server is similar.",
                "The absolute amount of free resources per server is almost the same.",
                "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
                "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
                "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
                "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
                "Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment.",
                "All agents use the deterministic most free resources selection mechanism to select the active server.",
                "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
                "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
                "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
                "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
                "Fig. 4(a)). 6.",
                "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-agent systems was presented.",
                "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
                "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
                "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
                "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
                "The resource allocation is a purely emergent effect.",
                "Our mechanism demonstrates that resource allocation can be done by the effective competition of individual and autonomous agents.",
                "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
                "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
                "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
                "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required.",
                "Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
                "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-agent system environment.",
                "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
                "All control is implemented in the agents.",
                "A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective resource allocation.",
                "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
                "Our approach adapts to changes in the environment but it is not evolutionary.",
                "There is no discovery of new strategies by the agents.",
                "The set of predictors stays the same over the whole life.",
                "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future.",
                "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
                "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance.",
                "The decay rate is currently predefined and must be altered manually depending on the environment.",
                "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
                "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
                "We are aware of the long learning phase in environments with a large number of shared resources known by each agent.",
                "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
                "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
                "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
                "In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers.",
                "This issue needs more investigation in the future. 7.",
                "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
                "Cactus Tools for Grid Applications.",
                "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
                "Kluwer Academic Publishers. [2] W. B. Arthur.",
                "Inductive Reasoning and Bounded Rationality.",
                "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
                "Server Load Balancing.",
                "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
                "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
                "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
                "Economic Models for Resource Management and Scheduling in Grid Computing.",
                "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
                "Architectural Models for Resource Management in the Grid.",
                "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
                "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
                "A taxonomy of scheduling in general-purpose distributed computing systems.",
                "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
                "Emergence of Cooperation and Organization in an Evolutionary Game.",
                "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
                "On load balancing for distributed multiagent computing.",
                "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
                "IEEE, August 2002. [10] S. H. Clearwater.",
                "Market-based control.",
                "A Paradigm for Distributed Resource Allocation.",
                "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
                "Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications.",
                "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
                "Foster and C. Kesselman.",
                "Globus: A Metacomputing Infrastructure Toolkit.",
                "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
                "Foster, M. Livny, and S. Tuecke.",
                "Condor-G: A Computation Management Agent for Multi-Institutional Grids.",
                "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
                "Resource allocation games with changing resource capacities.",
                "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
                "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
                "Combining state and model-based approaches for mobile agent load balancing.",
                "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
                "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
                "Decentralized Adaptive Resource Allocation for Sensor Networks.",
                "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
                "An Agent-based Resource Allocation Model for Computational Grids.",
                "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
                "Adaptive Load Balancing: A Study in Multi-Agent Learning.",
                "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
                "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
                "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
                "ACM Press, May 2006. [20] W3C.",
                "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
                "Complexity: The Emerging Science at the Edge of Order and Chaos.",
                "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
                "Analyzing Market-Based Resource Allocation Strategies for the Computational Grid.",
                "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
                "Sage Science Press, 2001.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81"
            ],
            "original_annotated_samples": [
                "In this paper we propose a <br>distributed algorithm</br> that solves the resource allocation problem in distributed multiagent systems."
            ],
            "translated_annotated_samples": [
                "En este artículo proponemos un <br>algoritmo distribuido</br> que resuelve el problema de asignación de recursos en sistemas multiagentes distribuidos."
            ],
            "translated_text": "Hacia la asignación de recursos basada en agentes autoorganizados en un entorno de múltiples servidores. Tino Schlegel1, Ryszard Kowalczyk2. Universidad de Tecnología Swinburne, Facultad de Tecnologías de la Información y la Comunicación, Hawthorn, 3122 Victoria, Australia {tschlegel1, rkowalczyk2}@ict.swin.edu.au. RESUMEN Las aplicaciones distribuidas requieren técnicas distribuidas para una asignación eficiente de recursos. Estas técnicas deben tener en cuenta la heterogeneidad y la posible falta de fiabilidad de los recursos y consumidores de recursos en entornos distribuidos. En este artículo proponemos un <br>algoritmo distribuido</br> que resuelve el problema de asignación de recursos en sistemas multiagentes distribuidos. Nuestra solución se basa en la autoorganización de agentes, la cual no requiere ningún facilitador o capa de gestión. La asignación de recursos en el sistema es un efecto puramente emergente. Presentamos los resultados del mecanismo de asignación de recursos propuesto en el entorno simulado de servidores múltiples estáticos y dinámicos. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Coherencia y coordinación Términos Generales Algoritmos 1. INTRODUCCIÓN Con la creciente popularidad de tecnologías de computación distribuida como Grid [12] y servicios web [20], Internet se está convirtiendo en una plataforma informática poderosa donde diferentes pares de software (por ejemplo, agentes) pueden utilizar recursos informáticos existentes para realizar tareas. En este sentido, cada agente es un consumidor de recursos que adquiere una cierta cantidad de recursos para la ejecución de sus tareas. Es difícil para un mecanismo central de asignación de recursos recopilar y gestionar la información sobre todos los recursos compartidos y consumidores de recursos para realizar de manera efectiva la asignación de recursos. Por lo tanto, se requieren soluciones distribuidas del problema de asignación de recursos. Los investigadores han reconocido estos requisitos [10] y han propuesto técnicas para la asignación de recursos distribuidos. Un tipo prometedor de enfoques distribuidos se basa en modelos de mercado económico [4], inspirados en los principios de los mercados de valores reales. Aunque esos enfoques estén distribuidos, generalmente requieren un facilitador para la fijación de precios, la búsqueda de recursos y la asignación de trabajos a los recursos [5, 9]. Otro problema principalmente sin resolver de esos enfoques es el ajuste fino del precio y el tiempo, las restricciones presupuestarias para permitir una asignación eficiente de recursos en sistemas grandes y dinámicos [22]. En este documento proponemos una solución distribuida del problema de asignación de recursos basada en la autoorganización de los consumidores de recursos en un sistema con recursos limitados. En nuestro enfoque, los agentes asignan dinámicamente tareas a servidores que proporcionan una cantidad limitada de recursos. En nuestro enfoque, los agentes seleccionan de forma autónoma la plataforma de ejecución para la tarea en lugar de pedir a un intermediario de recursos que realice la asignación. Todo el control necesario para nuestro algoritmo está distribuido entre los agentes en el sistema. Optimizan continuamente el proceso de asignación de recursos a lo largo de su vida para adaptarse a los cambios en la disponibilidad de recursos compartidos, aprendiendo de decisiones de asignación pasadas. La única información disponible para todos los agentes son la carga de recursos y la información sobre el éxito de la asignación de recursos de asignaciones pasadas. La información adicional sobre la carga de recursos de los servidores no se difunde. El concepto básico de nuestra solución está inspirado en el razonamiento inductivo y la racionalidad limitada introducida por W. Brian Arthur [2]. El mecanismo propuesto no requiere una autoridad central de control, una capa de gestión de recursos o introducir comunicación adicional entre agentes para decidir qué tarea se asigna en qué servidor. Demostramos que este mecanismo funciona bien en sistemas dinámicos con un gran número de tareas y puede adaptarse fácilmente a diferentes tamaños de sistemas. Además, el rendimiento general del sistema no se ve afectado en caso de que los agentes o servidores fallen o no estén disponibles. El enfoque propuesto proporciona una forma sencilla de implementar la asignación de recursos distribuidos y tiene en cuenta las tendencias del sistema multiagente hacia la autonomía, la heterogeneidad y la falta de fiabilidad de los recursos y agentes. Esta técnica propuesta puede ser fácilmente complementada por técnicas para encolar o rechazar solicitudes de asignación de recursos de agentes [11]. Tales capacidades de auto-gestión de agentes de software permiten una asignación de recursos confiable incluso en un entorno con proveedores de recursos poco confiables. Esto se puede lograr mediante las interacciones mutuas entre agentes aplicando técnicas de la teoría de sistemas complejos. La autoorganización de todos los agentes conduce a una autoorganización de los recursos del sistema 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS y es una propiedad emergente del sistema [21]. El resto del documento está estructurado de la siguiente manera: La siguiente sección proporciona una visión general del trabajo relacionado ya realizado en el área de equilibrio de carga, asignación de recursos o programación. La sección 3 describe el modelo de un entorno multiagente que se utilizó para realizar simulaciones con el fin de evaluar el rendimiento. Las secciones 4 y 5 describen el algoritmo de asignación de recursos distribuidos y presentan varios resultados experimentales. Un resumen, una conclusión y una perspectiva del trabajo futuro finalizan este documento. El trabajo relacionado La asignación de recursos es un problema importante en el área de la informática. En los últimos años, diferentes grupos de investigación han propuesto soluciones basadas en diferentes suposiciones y restricciones [7, 3, 15, 10]. En términos generales, la asignación de recursos es un mecanismo o política para la gestión eficiente y efectiva del acceso a un recurso limitado o conjunto de recursos por parte de sus consumidores. En el caso más simple, los consumidores de recursos solicitan a un intermediario central o despachador los recursos disponibles donde el consumidor de recursos será asignado. El corredor generalmente tiene pleno conocimiento de todos los recursos del sistema. Todas las solicitudes entrantes son dirigidas al corredor, quien es el único tomador de decisiones. En esos enfoques, el consumidor de recursos no puede influir en el proceso de decisión de asignación. El equilibrio de carga [3] es un caso especial del problema de asignación de recursos que utiliza un intermediario que intenta ser justo con todos los recursos al equilibrar la carga del sistema de manera equitativa entre todos los proveedores de recursos. Este mecanismo funciona mejor en un sistema homogéneo. Una técnica distribuida simple para la gestión de recursos es la planificación de capacidad mediante la negativa o encolamiento de agentes entrantes para evitar la sobrecarga de recursos [11]. Desde la perspectiva del propietario de recursos, esta técnica es importante para prevenir la sobrecarga en el recurso, pero no es suficiente para una asignación efectiva de recursos. Esta técnica solo puede proporcionar un buen complemento para los mecanismos de asignación de recursos distribuidos. La mayoría de las técnicas actuales para la asignación de recursos en herramientas de computación en malla como Globus [12] o Condor-G [13] coordinan la asignación de recursos con un subastador, árbitro, despachador, programador o gestor. Esos coordinadores suelen necesitar tener conocimiento global sobre el estado de todos los recursos del sistema. Un ejemplo de un algoritmo de asignación de recursos dinámicos es el proyecto Cactus [1] para la asignación de trabajos computacionales muy costosos. El valor de las soluciones distribuidas para el problema de asignación de recursos ha sido reconocido por la investigación [10]. Inspirados en los principios de los mercados de valores, se han desarrollado modelos de mercado económico para negociar recursos con el fin de regular la oferta y la demanda en la red. Estos enfoques utilizan diferentes estrategias de precios como modelos de precios publicados, diferentes métodos de subasta o un modelo de mercado de productos básicos. Los usuarios intentan comprar recursos baratos necesarios para ejecutar el trabajo, mientras que los proveedores intentan obtener la mayor ganancia posible y operar los recursos disponibles a plena capacidad. Se presenta una colección de diferentes técnicas de asignación de recursos distribuidos basadas en modelos de mercado en Clearwater [10]. Buyya et al. desarrollaron un marco de asignación de recursos basado en la regulación de la oferta y la demanda [4] para Nimrod-G [6] con el enfoque principal en los plazos de entrega de trabajos y las restricciones presupuestarias. El Modelo de Asignación de Recursos basado en Agentes (ARAM) para redes está diseñado para programar trabajos computacionalmente costosos utilizando agentes. La desventaja de este modelo es el extenso uso de intercambio de mensajes entre agentes para monitoreo periódico e intercambio de información dentro de la estructura jerárquica. Las subtareas de un trabajo migran a través de la red hasta que encuentran un recurso que cumpla con las restricciones de precio. El itinerario de migración de trabajos está determinado por los recursos que los conectan en diferentes topologías [17]. El mecanismo propuesto en este documento elimina la necesidad de intercambio periódico de información sobre las cargas de recursos y no requiere una topología de conexión entre los recursos. Se ha realizado un considerable trabajo sobre técnicas de asignación descentralizada de recursos utilizando teoría de juegos publicado en los últimos años. La mayoría de ellos están formulados como juegos repetitivos en un entorno idealista y simplificado. Por ejemplo, Arthur introdujo el problema del bar El Farol, que no permite una solución perfecta, lógica y racional. Es un problema de decisión mal definido que asume y modela el razonamiento inductivo. Probablemente sea uno de los ejemplos más estudiados de sistemas adaptativos complejos derivados de la forma en que los humanos deciden problemas mal definidos. Una variación del problema de El Farol es el llamado juego de la minoría [8]. En este juego de decisión repetitivo, un número impar de agentes debe elegir entre dos recursos basándose en información de éxito pasado, tratando de asignarse al recurso con la minoría. Galstyan et al. [14] estudiaron una variación con más de dos recursos, cambiando las capacidades de los recursos y la información de los agentes vecinos. Demostraron que los agentes pueden adaptarse de manera efectiva a las capacidades cambiantes en este entorno utilizando un conjunto de simples tablas de búsqueda (estrategias) por agente. Otra técnica distribuida que se emplea para resolver el problema de asignación de recursos se basa en el aprendizaje por refuerzo [18]. Similar a nuestro enfoque, un conjunto de agentes compiten por un número limitado de recursos basados únicamente en experiencias individuales previas. En este documento, el objetivo del sistema es maximizar el rendimiento del sistema garantizando la equidad de los recursos, medida como el tiempo promedio de procesamiento por unidad de trabajo. Se presenta un enfoque de asignación de recursos para redes de sensores basado en técnicas de autoorganización y aprendizaje por refuerzo en [16], con un enfoque principal en la optimización del consumo de energía de los nodos de la red. Propusimos un enfoque de equilibrio de carga autoorganizado para un único servidor con el objetivo de optimizar los costos de comunicación de agentes móviles. Un agente móvil rechazará una migración a un servidor de agente remoto si espera que el servidor de destino ya esté sobrecargado por otros agentes o tareas del servidor. Los agentes toman sus decisiones por sí mismos basándose en pronósticos de la utilización del servidor. En este documento se presenta una solución para un entorno de múltiples servidores sin tener en cuenta los costos de comunicación o migración. 3. DESCRIPCIÓN DEL MODELO Modelamos un sistema multiagente distribuido como una red de servidores L = {l1, . . . , lm}, agentes A = {a1, . . . , an} y tareas T = {T1, ..., Tm}. Cada agente tiene un número de tareas Ti que deben ser ejecutadas durante su vida útil. Una tarea Ti requiere U(Ti, t) recursos para su ejecución en el tiempo t, independientemente de su servidor de ejecución. Los recursos para la ejecución de tareas son proporcionados por cada servidor li. La ubicación de la ejecución de las tareas en general está especificada por el mapa L: T × t → L. Un agente debe conocer la existencia de recursos del servidor para asignar tareas en esos recursos. Escribimos LS (ai) The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 75 Recursos del Sistema Anfitrión l4 Anfitrión l3 Anfitrión l2 2a 3a 4a a Anfitrión l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figura 1: Una ilustración de nuestro modelo de múltiples servidores con recursos exclusivos y compartidos para la ejecución del agente. para abordar el conjunto de recursos conocidos por el agente ai. Los recursos en el sistema pueden ser utilizados por todos los agentes para la ejecución de tareas. La cantidad de recursos proporcionados C(li, t) de cada servidor puede variar con el tiempo. La utilización de recursos de un servidor en el tiempo t se calcula utilizando la ecuación 1, sumando el consumo de recursos U(Tj, t) de cada tarea Tj que se ejecuta en el recurso en el tiempo t. Todas las unidades de recursos utilizadas en nuestro modelo representan métricas reales como memoria o ciclos de procesador. Además del caso en que la cantidad total de recursos del sistema es suficiente para ejecutar todas las tareas, también nos interesa el caso en que no se proporcionan suficientes recursos del sistema para cumplir con todas las solicitudes de asignación. Es decir, la capacidad total de recursos compartidos es menor que la cantidad de recursos solicitados por los agentes. En este caso, algunos agentes deben esperar con su solicitud de asignación hasta que se esperen recursos libres. El modelo de sistema multiagente utilizado para nuestras simulaciones está ilustrado en la Figura 1.4. ASIGNACIÓN DE RECURSOS AUTOORGANIZADA El algoritmo de asignación de recursos descrito en esta sección está integrado en cada agente. La única información necesaria para tomar una decisión de asignación de recursos para una tarea es la utilización del servidor de las asignaciones de tareas completadas en esos servidores. No hay una difusión adicional de información sobre la utilización de recursos del servidor o información sobre recursos libres. Nuestra solución demuestra que los agentes pueden autoorganizarse en un entorno dinámico sin necesidad de información de monitoreo activo que genere una gran sobrecarga de tráfico en la red. Además, no tenemos ninguna autoridad central de control. Todo comportamiento que conduce a la asignación de recursos es creado por la competencia efectiva de los agentes por recursos compartidos y es un efecto puramente emergente. Los agentes en nuestro sistema multiagente compiten por recursos o un conjunto de recursos para ejecutar tareas. La acción colectiva de estos agentes cambia el entorno y, con el paso del tiempo, tienen que adaptarse a estos cambios para competir de manera más efectiva en el entorno recién creado. Nuestro enfoque se basa en diferentes creencias de los agentes, representadas por predictores y diferente información sobre su entorno. Los agentes prefieren una asignación de tareas en un servidor con recursos disponibles. Sin embargo, no hay forma de estar seguro de la cantidad de recursos del servidor disponibles de antemano. Todos los agentes tienen las mismas preferencias y un agente asignará una tarea en un servidor si espera tener suficientes recursos libres para su ejecución. No hay comunicación entre agentes. Las acciones tomadas por los agentes influyen en las acciones de otros agentes de forma indirecta. El mecanismo aplicado está inspirado en el razonamiento inductivo y los principios de racionalidad limitada [2]. Se deriva de la forma humana de resolver problemas mal definidos. Los humanos tienden a tener en cuenta muchas hipótesis y actuar en base a la más plausible. Por lo tanto, cada agente lleva un registro del rendimiento de una colección privada de sus predictores y selecciona aquel que actualmente sea más prometedor para la toma de decisiones. 4.1 Algoritmo de asignación de recursos Esta sección describe el mecanismo de decisión para nuestra asignación de recursos autoorganizada. Todo el control necesario está integrado en los propios agentes. No hay una autoridad superior de control, capa de gestión para apoyo en la toma de decisiones o distribución de información. Todos los agentes tienen un conjunto de predictores para cada recurso con el fin de pronosticar la futura utilización de estos servidores para la asignación potencial de tareas. Para hacerlo, los agentes utilizan información histórica de asignaciones de tareas pasadas en esos recursos. Basándose en la utilización de recursos pronosticada, el agente tomará su decisión de asignación de recursos. Después de que la tarea haya finalizado su ejecución y devuelto los resultados al agente, se evalúan las actuaciones del predictor y se actualiza la información histórica. El Algoritmo 1 muestra el algoritmo de asignación de recursos para cada agente. El agente primero predice la carga de recursos de los próximos pasos para cada servidor con información histórica (línea 3-7). Si la carga de recursos predicha más el consumo de recursos de las tareas está por debajo de la última capacidad de servidor conocida, este servidor se agrega a la lista de candidatos para la asignación. El agente luego evalúa si se esperan recursos compartidos gratuitos para la asignación de tareas. En el caso de que no se esperen recursos gratuitos (línea 9), el agente explorará los recursos asignando la tarea a un servidor seleccionado al azar de entre todos los servidores no predecibles para recopilar información sobre la carga de recursos. Este es el caso estándar al comienzo del ciclo de vida del agente, ya que no hay información disponible sobre el entorno. La predicción de la carga de recursos en sí misma utiliza un conjunto de r predictores P(a, l) := {pi|1 ≤ i ≤ r} por servidor. Uno de los predictores pA ∈ P de cada conjunto se llama predictor activo, el cual pronostica la carga de recursos de los próximos pasos. Cada predictor es una función P: H → ℵ+ ∪ {0} del espacio de datos históricos H a un número entero no negativo, que es el valor pronosticado. Por ejemplo, un predictor podría pronosticar una carga de recursos igual a la cantidad promedio de recursos ocupados durante la última ejecución en este recurso. Un historial H de información de carga de recursos es una lista de hasta m elementos de historial hi = (xi, yi), que incluyen la fecha de observación xi y el valor observado yi. El elemento más reciente del historial es h0. Nuestro algoritmo utiliza un conjunto de predictores en lugar de solo uno, para evitar que todos los agentes tomen la misma decisión basada en el valor predicho, lo que invalidaría sus creencias. Imagina que solo un recurso compartido es conocido por un número de agentes que utilizan un predictor para pronosticar el 76 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Carga de Recursos Tiempo (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figura 2: (a) Información de carga de recursos recopilada de asignaciones de tareas anteriores que se utiliza para predicciones futuras. (b) Distribución de probabilidad de los predictores para seleccionar el nuevo predictor activo. mismo valor que la última utilización conocida de recursos del servidor. Todos los agentes que asignaron una tarea en un servidor que estaba ligeramente sobrecargado rechazarían otra asignación en este servidor, ya que esperan que el servidor vuelva a estar sobrecargado según las predicciones. Como resultado, el servidor tendría una gran cantidad de recursos libres. Un conjunto de diferentes predictores que predicen diferentes valores evita esta situación de invalidar las creencias de los agentes [19]. Un ejemplo de información de carga de recursos recopilada de las últimas 5 visitas de un agente a un recurso compartido se puede ver en la Figura 2(a). Muestra que el recurso fue visitado con frecuencia, lo que significa que había recursos gratuitos disponibles para la ejecución y no era necesario explorar otros servidores. Esto puede cambiar en el futuro ya que la carga de recursos ha aumentado significativamente recientemente. En el caso en que el conjunto de servidores que se predice que tienen recursos disponibles no esté vacío (línea 13), el agente selecciona uno de ellos para su asignación. Hemos implementado dos algoritmos alternativos para la selección de un servidor para la asignación de tareas. Algoritmo 1 Algoritmo de asignación de recursos de un agente 1 L ← ∅ //servidor con recursos libres 2 u ← U(T, t + 1) //consumo de recursos de la tarea 3 para todo P(a, l)|l ∈ LS (a) hacer 4 U(l) ← predicción de carga de recursos (P(a, l), t + 1) 5 si U(l) + u ≤ C(l) entonces 6 L ← L ∪ {P(a, l)} 7 fin si 8 fin para 9 si L = ∅ entonces 10 //todos los recursos compartidos impredecibles 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← un elemento aleatorio de E 13 else 14 allocationServer ← selección de servidor (L) 15 fin si 16 devolver allocationServer El Algoritmo 2 muestra el primer método, que es una selección no determinista según la previsibilidad de la utilización de recursos del servidor. Una distribución de probabilidad se calcula a partir de los niveles de confianza de las predicciones de recursos. El nivel de confianza depende de tres factores: la precisión del predictor activo, la cantidad de información histórica sobre el servidor y la edad promedio de la información histórica (ver Ecuación 3). El servidor con el nivel de confianza más alto tiene la mayor probabilidad de ser seleccionado como el servidor activo. G(P) = w1 · tamaño(H) m + w2 · Edad(H) máx Edad(H) + w3 · g(p) máx (g(p)) (3) donde: wi − pesos tamaño(H) − número de datos en el historial m − número máximo de valores históricos Edad(H) − edad promedio de los datos históricos g(p) − ver ecuación 4 Algoritmo 2 selecciónServidor(L) - mejor servidor predecible 1 para todos los P(a, l) ∈ L hacer 2 calcular G(P) 3 fin para 4 transformar todos los G(P) en una distribución de probabilidad 5 devolver l ∈ LS seleccionado de acuerdo con la distribución de probabilidad Algoritmo 3 selecciónServidor(L) - más recursos libres 1 para todos los P(a, l) ∈ L hacer 2 c(l) ← C(l) − Ul 3 fin para 4 devolver l ∈ LS |c(l) es máximo El segundo método de selección alternativo de un servidor del conjunto de servidores predichos con recursos libres es determinista y se muestra en el algoritmo 3. Se elige el servidor con la mayor cantidad esperada de recursos gratuitos del conjunto L de servidores con recursos gratuitos esperados. En el caso en que todos los agentes predigan que hay más recursos disponibles en un servidor en particular, todos los agentes asignarán la tarea a este servidor, lo que invalidaría las creencias de los agentes. Sin embargo, nuestros experimentos muestran que la información de historial individual y la selección no determinista del predictor activo generalmente evitan esta situación. En caso de que el algoritmo de asignación de recursos no devuelva ningún servidor (Alg. 1, línea 16), no se recomienda asignar un recurso. El agente no asignará la tarea a un recurso. Este caso ocurre solo si es posible predecir la carga de recursos para todos los servidores pero no se esperan recursos libres. Después de que la ejecución del agente haya finalizado, se realiza el proceso de evaluación descrito en el algoritmo 4. Este proceso se divide en tres casos. Primero, la tarea no fue asignada a un recurso. En este caso, el agente no puede decidir si la decisión de no asignar la tarea fue correcta o no. El agente luego elimina los datos históricos antiguos. Esto es necesario para una adaptación exitosa en el futuro. Si el agente no eliminara la información histórica antigua, la predicción siempre pronosticaría que no hay recursos disponibles gratuitos. El agente nunca asignaría una tarea a uno de los recursos en el futuro. La información histórica antigua se elimina del historial de recursos de los agentes utilizando una tasa de descomposición. La tasa de decaimiento es una función de distribución acumulativa que calcula la probabilidad de que un elemento histórico sea eliminado después de haber alcanzado un cierto The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 77 Edad de los datos históricos Tasa de decaimiento 0 1 más antiguo Figura 3: Tasa de decaimiento de la edad de la información histórica. La implementación actual utiliza una función de densidad de probabilidad constante en un dominio configurable. La Figura 3 muestra un ejemplo de una función de distribución acumulativa para la tasa de decaimiento. Dependiendo del entorno, la función de densidad de probabilidad debe ser modificada. Si el número de servidores potenciales por agente es alto, la información histórica debe mantenerse por más tiempo para evitar la exploración de recursos no explorados. Además, un entorno dinámico requiere información más actualizada para realizar predicciones más fiables. El segundo caso en el proceso de evaluación (Alg. 4, línea 5) describe las acciones tomadas después de que un servidor fue visitado por primera vez. El agente crea un nuevo conjunto de predictores para este servidor y registra la información histórica. Todos los predictores para este conjunto son elegidos al azar de un conjunto predefinido. g(p) = l i=0 ri (4) donde: ri = ⎧ ⎨ ⎩ 1 si la decisión i-ésima es correcta 0 si el resultado i-ésimo es desconocido −1 si la decisión i-ésima es incorrecta El caso general (Alg. 4, línea 8) es la evaluación después de que el agente asignó la tarea a un recurso. El agente evalúa todos los predictores del conjunto de predictores para este recurso al predecir la carga del recurso con todos los predictores basados en los datos históricos antiguos. Los predictores que hicieron una predicción correcta, lo que significa que la asignación de recursos fue correcta, recibirán una calificación positiva. Este es el caso en el que el recurso no estaba sobrecargado y se predijeron recursos libres para la ejecución, o el recurso estaba sobrecargado y este predictor habría evitado la asignación. Todos los predictores que predijeron valores que llevarían a decisiones incorrectas recibirán calificaciones negativas. En todos los demás casos, que incluye cuando no era posible hacer una predicción, se otorga una calificación neutral a los pronosticadores. Basándose en estas calificaciones de rendimiento, los niveles de confianza se calculan utilizando la ecuación 4. La confianza para todos los predictores que no pueden predecir con la información histórica actual sobre el servidor se establece en cero para evitar la selección de estos como el nuevo predictor activo. Estos valores se transforman en una distribución de probabilidad. Según esta distribución de probabilidad, el nuevo predictor activo se elige e implementa mediante una selección de ruleta. La Figura 2(b) ilustra las probabilidades de un conjunto de 10 predictores, las cuales han sido calculadas a partir de los niveles de confianza de los predictores. Aunque el predictor 9 tiene la probabilidad de selección más alta, no fue elegido por el proceso de selección de la ruleta como el predictor activo. Esta selección no determinista de predictores evita la invalidación de las creencias de los agentes en caso de que los agentes tengan el mismo conjunto de predictores. La precisión de la predicción, que es el error de la predicción en comparación con el valor observado, no se tiene en cuenta. Supongamos que el predictor activo predice ligeramente por encima de la capacidad de recursos, lo que no conduce a una asignación de recursos. De hecho, habría suficientes recursos disponibles para la ejecución. Una predicción menos precisa que está muy por debajo de la capacidad llevaría a la decisión correcta y, por lo tanto, es preferible. La última acción del algoritmo de evaluación (Alg. 4, línea 22) actualiza el historial con la información más reciente de carga de recursos del servidor. Los datos de la historia más antigua se sobrescriben si ya se han registrado m valores de historia para el servidor. Algoritmo 4 Evaluación de Decisiones 1 si l ∈ LE entonces 2 para todos los P(a, l)|l ∈ LS (a) hacer 3 evaporar datos históricos antiguos 4 fin para 5 sino si P(a, l) = nulo entonces 6 crear (P(a, l)) 7 actualizar H(l) 8 sino 9 para todos los p ∈ P(a, l) hacer 10 pred ← predicción de carga de recursos(p) 11 si (U(l) ≤ C(l) Y pred + U(a, t) ≤ C(l)) O (U(l) > C(l) Y pred + U(a, t) > C(l)) entonces 12 agregar calificación positiva(p) 13 sino si U(l) ≤ C(l) Y pred + U(a, t) > C(l) O U(l) ≤ C(l) Y pred + U(a, t) > C(l) entonces 14 agregar calificación negativa(p) 15 sino 16 agregar calificación neutral(p) 17 fin si 18 fin para 19 calcular todos los g(p); g(p) ← 0, si p no está funcionando 20 transformar todos los g(p) en una distribución de probabilidad 21 pA ← p ∈ P(a, l) es seleccionado de acuerdo a esta distribución de probabilidad 22 actualizar H(l) 23 fin si 4.2 Observaciones y Limitaciones del Enfoque Nuestro mecanismo de predicción utiliza varios tipos de predictores simples en lugar de uno sofisticado. Este método asegura que los agentes puedan competir de manera más efectiva en un entorno cambiante. Diferentes tipos de predictores son adecuados para diferentes situaciones y entornos. Por lo tanto, todos los predictores se evalúan después de cada decisión y se selecciona el predictor activo. Este carácter no determinista del nuevo predictor activo respalda que las creencias de los agentes no serán invalidadas, lo cual ocurre en el caso de que todos los predictores estén tomando la misma decisión. Especialmente si solo hay un recurso compartido disponible y todos los agentes tienen la opción de ir a este recurso compartido o no [19]. Nuestro enfoque de autoorganización es robusto frente a fallos de recursos o agentes en el sistema. Si se unen o se van, el sistema puede autoorganizarse rápidamente y adaptarse a las nuevas condiciones. No hay cuellos de botella clásicos ni un único punto de falla como en los mecanismos centralizados. Las limitaciones son la dependencia de la información de utilización de recursos históricos de otros servidores. Un pronóstico de la utilización de recursos de un servidor remoto solo es posible si un agente tiene una cantidad de información histórica sobre un recurso compartido. Si el número de servidores por agente es muy grande, no hay una manera eficiente de recopilar información histórica sobre los servidores remotos. Este problema ocurre si la cantidad de recursos compartidos proporcionados es de 78. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) es limitada y no es suficiente para todos los consumidores de recursos. En este caso, un agente intentaría aleatoriamente todos los servidores conocidos hasta encontrar uno con recursos disponibles o no haya ninguno. En el peor de los casos, para cuando se prueben todos los servidores, la información histórica de los servidores ya estará desactualizada. EVALUACIÓN EXPERIMENTAL La primera parte de esta sección ofrece un breve resumen de la configuración de nuestro entorno de simulación. En el resto de la sección, se presentan y discuten los resultados de los experimentos. Todos los experimentos se llevan a cabo en un banco de pruebas especial que simula y modela un sistema multiagente. Hemos implementado este banco de pruebas en el lenguaje de programación Java, independiente de cualquier conjunto de herramientas de agente específico. Permite una variedad de experimentos en entornos estables y dinámicos con un número configurable de agentes, tareas y servidores. Se utiliza un modelo basado en eventos para activar todas las actividades en el sistema. Para todas las simulaciones, limitamos el número de datos históricos para cada servidor a 10, el número de calificaciones de rendimiento por predictor a 10 y asignamos 10 predictores a cada conjunto de predictores para cada agente. Todos los predictores son elegidos al azar de un conjunto predefinido arbitrario de 32 predictores del siguiente tipo. Los predictores difieren en diferentes ciclos o tamaños de ventana. - Predictor de n-ciclos: p(n) = yn utiliza el valor de la historia en la posición n-ésima desde el final. - Predictor de n-media: p(n) = 1 n · n i=1 yi utiliza el valor medio de los n últimos valores de la historia. - Predictor de regresión lineal de n: p(n, t) = a·t+b utiliza el valor de regresión lineal de los últimos n valores de la historia, donde a, b se calculan utilizando regresión lineal con ajuste de mínimos cuadrados considerando los últimos n datos de la historia. - Predictor de distribución de n: utiliza un valor aleatorio de la distribución de frecuencia de los n últimos valores de la historia. - Predictor de espejo de n: p(n) = 2 · H − yn utiliza la imagen de espejo alrededor de la media de todos los valores de la historia del n-ésimo valor de la historia. La eficiencia de nuestra propuesta de asignación de recursos autoorganizada se evalúa mediante el desarrollo de carga de recursos de cada servidor durante la simulación, así como el desarrollo acumulado de carga de recursos totales sobre todos los recursos compartidos. Las cargas de recursos para cada servidor se calculan utilizando la ecuación 1 como la suma del consumo de recursos de todos los agentes actualmente ejecutados en este servidor. La carga total de recursos del sistema se calcula como la suma de la carga de recursos de todos los recursos. El algoritmo de asignación de recursos autoorganizado tiene elementos aleatorios. Por lo tanto, los resultados presentados muestran valores medios y desviación estándar calculados sobre 100 experimentos repetidos. 5.1 Configuración Experimental Los siguientes parámetros tienen un impacto en el proceso de asignación de recursos. Damos una visión general de los parámetros y una breve descripción. - Agentes: El número de agentes involucrados en la asignación de recursos. Este número varía en los experimentos entre 650 y 750 dependiendo de la cantidad total de recursos del sistema disponibles. - Consumo de recursos: Cada tarea consume recursos del servidor para su ejecución. El consumo de recursos se asigna aleatoriamente a cada tarea antes de su asignación de un intervalo. El consumo de recursos se especifica en unidades de recursos que corresponden a métricas del mundo real como la memoria o los ciclos del procesador. - Servidor de inicio de agentes: Todos los agentes se encuentran en un servidor de inicio de agentes. Los recursos de esos servidores no son considerados en nuestra simulación y no afectan el rendimiento de la asignación de recursos. - Recursos del servidor: Los experimentos utilizan servidores con diferentes cantidades de recursos compartidos disponibles. El primer experimento se lleva a cabo en un entorno de servidor estático que proporciona la misma cantidad de recursos compartidos, mientras que el otro experimento varía los recursos de servidor disponibles durante la simulación. La cantidad total de recursos permanece constante en ambos experimentos. - Tiempo de ejecución: El tiempo de ejecución de una tarea para la ejecución, independiente de la plataforma de ejecución. Por esta vez, la tarea consume la cantidad asignada de recursos del servidor. Este parámetro se asigna aleatoriamente antes de la ejecución. - Tiempo de creación de la tarea: El tiempo antes de que se cree la siguiente tarea después de la finalización exitosa o fallida. Este parámetro influye en la antigüedad de la información histórica sobre los recursos y tiene una gran influencia en la duración de la fase inicial de adaptación. Este parámetro se asigna aleatoriamente después de que se haya completado la tarea. 5.2 Resultados Experimentales Esta sección muestra los resultados de experimentos seleccionados que demuestran el rendimiento de nuestro mecanismo propuesto de asignación de recursos. El primer experimento muestra el rendimiento en un entorno estable donde un número de agentes asignan tareas a servidores que proporcionan una cantidad constante de recursos. El segundo experimento se llevó a cabo en un entorno de servidor dinámico con un número constante de agentes. El primer experimento muestra nuestro modelo en un entorno estable de 3 servidores que proporcionan un total de 7000 unidades de recursos. La capacidad de recursos de cada servidor permanece constante durante el experimento. Utilizamos 650 agentes con los parámetros del tiempo de ejecución entre 1 y 15 unidades de tiempo y un tiempo de creación de tarea en el intervalo [0 − 30] unidades de tiempo. El consumo de recursos de las tareas se asigna aleatoriamente en el intervalo de [1 - 45] unidades de recurso. La Figura 4 muestra los resultados de 100 repeticiones de este experimento. La Figura 4(a) muestra que la cantidad total de recursos proporcionados es mayor que la demanda de recursos en promedio. Al comienzo del experimento, todos los agentes asignan sus tareas aleatoriamente en uno de los servidores disponibles y exploran las capacidades y utilizaciones de recursos disponibles durante aproximadamente 150 unidades de tiempo. Esta fase inicial de exploración muestra que la carga promedio de recursos de cada servidor tiene un nivel similar. Esto provoca una situación de sobrecarga en el servidor 1 debido a su baja capacidad de recursos compartidos, y una gran cantidad de recursos libres en el servidor 2. Los agentes que asignaron tareas al servidor 1 detectan la situación de sobrecarga y exploran de forma aleatoria otros servidores disponibles. Encuentran recursos gratuitos en el servidor 2. Después del período de aprendizaje, los agentes se han autoorganizado en este entorno estable y han encontrado una solución estable para la asignación de The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Tiempo 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (b) Carga de recursos servidor 0 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (c) Carga de recursos servidor 1 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 2 Figura 4: Resultados del experimento 1 en un entorno estático de 3 servidores promediados sobre 100 repeticiones. todas las tareas. La desviación estándar de las cargas de recursos es pequeña para cada servidor, lo que indica que nuestro enfoque distribuido encuentra soluciones estables en casi cada ejecución. Este experimento utilizó el algoritmo 2 para la selección del servidor activo. También realizamos el mismo experimento con el mecanismo de selección de recursos más libre para seleccionar el servidor activo. La asignación de recursos para cada servidor es similar. La cantidad absoluta de recursos gratuitos por servidor es casi la misma. El Experimento 2 se llevó a cabo en un entorno dinámico de 3 servidores con un total de 750 agentes. La cantidad de recursos del servidor 0 y del servidor 1 cambia periódicamente, mientras que la cantidad total de recursos disponibles permanece constante. El servidor 0 tiene una capacidad inicial de 1000 unidades, mientras que el servidor 1 comienza con una capacidad de 4000 unidades. El cambio en la capacidad comienza después de 150 unidades de tiempo, que es aproximadamente al final de la fase de aprendizaje. La figura 5 (b, c, d) muestra el comportamiento de nuestra asignación de recursos autoorganizada en este entorno. Todos los agentes utilizan el mecanismo de selección de recursos más libres determinístico para seleccionar el servidor activo. Se puede observar en la Fig. 5(b) y 5(c) que el número de recursos asignados al servidor 0 y al servidor 1 cambia periódicamente con la cantidad de recursos proporcionados. Esto demuestra que los agentes pueden percibir los recursos disponibles en este entorno dinámico y son capaces de adaptarse a esos cambios. El desarrollo de la carga de recursos del servidor 2 (ver Fig. 5(d)) muestra un cambio periódico porque algunos agentes intentan asignar tareas a este servidor en caso de que su servidor previamente preferido reduzca la cantidad de recursos compartidos. La carga total de recursos de todos los recursos compartidos es constante a lo largo de los experimentos, lo que indica que todos los agentes asignan sus tareas a uno de los recursos compartidos. Fig. 4(a)). 6.\nFig. 4(a)). 6. CONCLUSIONES Y TRABAJO FUTURO En este artículo se presentó una técnica de asignación de recursos distribuida autoorganizativa para sistemas multiagente. Permitimos a los agentes seleccionar la plataforma de ejecución para sus tareas ellos mismos antes de cada ejecución en tiempo de ejecución. En nuestro enfoque, los agentes compiten por una asignación en uno de los 0 500 1,000 1,500 2,000 Tiempo 0 2,500 5,000 7,500 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (b) Carga de recursos servidor 1 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (c) Carga de recursos servidor 2 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 3 Figura 5: Resultados del experimento 2 en un entorno de servidor dinámico promediado en 100 repeticiones. recurso compartido disponible. Los agentes perciben su entorno de servidor y adaptan sus acciones para competir de manera más eficiente en el nuevo entorno creado. Este proceso es adaptativo y tiene un fuerte retroalimentación, ya que las decisiones de asignación influencian indirectamente las decisiones de otros agentes. La asignación de recursos es un efecto puramente emergente. Nuestro mecanismo demuestra que la asignación de recursos puede ser realizada mediante la competencia efectiva de agentes individuales y autónomos. Ni necesitan coordinación o información de una autoridad superior ni se requiere una comunicación directa adicional entre agentes. Este mecanismo fue inspirado por el razonamiento inductivo y los principios de racionalidad limitada, lo que permite a los agentes adaptar sus estrategias para competir de manera efectiva en un entorno dinámico. En caso de que un servidor no esté disponible, los agentes pueden adaptarse rápidamente a esta nueva situación explorando nuevos recursos o permaneciendo en el servidor local si no es posible una asignación. Especialmente en entornos dinámicos y escalables como los sistemas de rejilla, se requiere un mecanismo robusto y distribuido para la asignación de recursos. Nuestro enfoque de asignación de recursos autoorganizados fue evaluado con una serie de experimentos de simulación en un entorno dinámico de agentes y recursos del servidor. Los resultados presentados para este nuevo enfoque de optimización de migración estratégica son muy prometedores y justifican una mayor investigación en un entorno real de sistema multiagente. Es una política distribuida, escalable y fácil de entender para la regulación de la oferta y la demanda de recursos. Todo el control se implementa en los agentes. Un mecanismo de decisión simple basado en diferentes creencias del agente crea un comportamiento emergente que conduce a una asignación efectiva de recursos. Este enfoque puede ser fácilmente ampliado o respaldado por mecanismos de equilibrio/cola de recursos proporcionados por los recursos. Nuestro enfoque se adapta a los cambios en el entorno pero no es evolutivo. No hay descubrimiento de nuevas estrategias por parte de los agentes. El conjunto de predictores permanece igual a lo largo de toda la vida. De hecho, creemos que esto podría mejorar aún más el comportamiento de los sistemas a lo largo de un período prolongado y podría ser el 80 The Sixth Intl. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) investigará en el futuro. La evolución sería muy lenta y selectiva y no influiría en el comportamiento del sistema en un período a corto plazo que está cubierto por nuestros resultados experimentales. En un futuro cercano investigaremos si es posible una adaptación automática de la tasa de decaimiento de la información histórica en nuestro algoritmo y si puede mejorar el rendimiento de la asignación de recursos. La tasa de descomposición está actualmente predefinida y debe ser alterada manualmente dependiendo del entorno. Un gran número de recursos compartidos requiere información histórica más antigua para evitar una exploración de recursos demasiado frecuente. Por el contrario, un entorno dinámico con capacidades variables requiere información más actualizada para realizar predicciones más fiables. Somos conscientes de la larga fase de aprendizaje en entornos con un gran número de recursos compartidos conocidos por cada agente. En caso de que los agentes soliciten más recursos de los que los servidores compartidos proporcionan, todos los agentes explorarán aleatoriamente todos los servidores conocidos. Este proceso de adquirir información de carga de recursos sobre todos los servidores puede llevar mucho tiempo en el caso de que no se proporcionen recursos compartidos suficientes para todas las tareas. En el peor de los casos, para cuando se explore todos los servidores, la información histórica de algunos servidores podría estar desactualizada y la exploración comenzará de nuevo. En esta situación, es difícil para un agente recopilar eficientemente información histórica sobre todos los servidores remotos. Este tema necesita más investigación en el futuro. REFERENCIAS [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel y J. Shalf. Herramientas de Cactus para Aplicaciones de Red. En Cluster Computing, volumen 4, páginas 179-188, Hingham, MA, EE. UU., 2001. Kluwer Academic Publishers. [2] W. B. Arthur.\nEditorial Kluwer Academic. [2] W. B. Arthur. Razonamiento inductivo y racionalidad limitada. American Economic Review (Papers and Proceedings), 84(2):406-411, mayo de 1994. [3] T. Bourke. Balanceo de carga del servidor. OReilly Media, 1ª edición, agosto de 2001. [4] R. Buyya. Gestión y programación de recursos distribuidos basada en economía para la computación en malla. Tesis doctoral, Universidad de Monash, Melbourne, Australia, mayo de 2002. [5] R. Buyya, D. Abramson, J. Giddy y H. Stockinger. Modelos económicos para la gestión de recursos y programación en la computación en malla. Número especial sobre Entornos de Computación en Red de la Revista Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin y D. DiNucci. Modelos arquitectónicos para la gestión de recursos en la red. En Actas del Primer Taller Internacional sobre Computación en Red, páginas 18-35. Springer LNCS, 2000. [7] T. L. Casavant y J. G. Kuhl. Una taxonomía de programación en sistemas informáticos distribuidos de propósito general. IEEE Transactions on Software Engineering, 14(2):141-154, febrero de 1988. [8] D. Challet y Y. Zhang. Aparición de la cooperación y la organización en un juego evolutivo. Physica A, 407(246), 1997. [9] K.-P. Chow y Y.-K. Kwok. En equilibrio de carga para computación multiagente distribuida. En IEEE Transactions on Parallel and Distributed Systems, volumen 13, páginas 787-801. IEEE, agosto de 2002. [10] S. H. Clearwater. Control basado en el mercado. Un paradigma para la asignación distribuida de recursos. World Scientific, Singapur, 1996. [11] C. Fl¨us. Planificación de capacidad de sistemas de agentes móviles para el diseño eficiente de aplicaciones de intranet. Tesis doctoral, Universidad de Duisburg-Essen (Alemania), febrero de 2005. [12] I. Foster y C. Kesselman. Globus: Un conjunto de herramientas de infraestructura de metacomputación. Revista Internacional de Aplicaciones de Supercomputación, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I. Foster, M. Livny y S. Tuecke. Condor-G: Un agente de gestión de computación para redes de múltiples instituciones. Computación en clúster, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar y K. Lerman. Juegos de asignación de recursos con capacidades de recursos cambiantes. En Actas de la segunda conferencia internacional conjunta sobre agentes autónomos y sistemas multiagente, páginas 145 - 152, Melbourne, Australia, 2003. ACM Press, Nueva York, NY, EE. UU. [15] C. Georgousopoulos y O. F. Rana. Combinando enfoques basados en el estado y en el modelo para el equilibrio de carga de agentes móviles. En SAC 03: Actas del simposio de computación aplicada de ACM de 2003, páginas 878-885, Nueva York, NY, EE. UU., 2003. ACM Press. [16] G. Mainland, D. C. Parkes y M. Welsh. Asignación descentralizada y adaptativa de recursos para redes de sensores. En Actas del 2º Simposio USENIX sobre Diseño e Implementación de Sistemas de Red (NSDI 05), mayo de 2005. [17] S. Manvi, M. Birje y B. Prasad. Un modelo de asignación de recursos basado en agentes para rejillas computacionales. Sistemas Multiagente y de Red - Una Revista Internacional, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham y M. Tennenholtz. Equilibrio de carga adaptativo: Un estudio en el aprendizaje multiagente. En Journal of Artificial Intelligence Research, volumen 2, páginas 475-500, 1995. [19] T. Schlegel, P. Braun y R. Kowalczyk. Hacia Agentes Móviles Autónomos con Comportamiento de Migración Emergente. En Actas de la Quinta Conferencia Internacional Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 2006), Hakodate (Japón), páginas 585-592. ACM Press, mayo de 2006. [20] W3C. Actividad de servicios web, 2002. http://www.w3.org/2002/ws - última visita 23.10.2006. [21] M. M. Waldrop. Complejidad: La ciencia emergente en el límite entre el orden y el caos. Simon & Schuster, 1ª edición, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik y T. Bryan. Analizando estrategias de asignación de recursos basadas en el mercado para la red computacional. En la Revista Internacional de Aplicaciones de Computación de Alto Rendimiento, volumen 15, páginas 258-281. Sage Science Press, 2001. \n\nEditorial Sage Science, 2001. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 81 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "dynamically allocated task": {
            "translated_key": "tarea asignada dinámicamente",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Towards Self-organising Agent-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
                "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
                "In this paper we propose a distributed algorithm that solves the resource allocation problem in distributed multiagent systems.",
                "Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer.",
                "The resource allocation in the system is a purely emergent effect.",
                "We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
                "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
                "In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
                "Hence, distributed solutions of the resource allocation problem are required.",
                "Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation.",
                "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
                "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
                "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].",
                "In this paper we propose a distributed solution of the resource allocation problem based on self-organisation of the resource consumers in a system with limited resources.",
                "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
                "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
                "All control needed for our algorithm is distributed among the agents in the system.",
                "They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
                "The only information available to all agents are resource load and allocation success information from past resource allocations.",
                "Additional resource load information about servers is not disseminated.",
                "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
                "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
                "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
                "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-agent system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11].",
                "Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.",
                "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
                "Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.",
                "Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.",
                "Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results.",
                "A summary, conclusion and outlook to future work finish this paper. 2.",
                "RELATED WORK Resource allocation is an important problem in the area of computer science.",
                "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
                "Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
                "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
                "The broker usually has full knowledge about all system resources.",
                "All incoming requests are directed to the broker who is the solely decision maker.",
                "In those approaches, the resource consumer cannot influence the allocation decision process.",
                "Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
                "This mechanism works best in a homogeneous system.",
                "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
                "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation.",
                "This technique can only provide a good supplement for distributed resource allocation mechanisms.",
                "Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
                "Those coordinators usually need to have global knowledge on the state of all system resources.",
                "An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
                "The value of distributed solutions for the resource allocation problem has been recognised by research [10].",
                "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
                "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
                "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
                "A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10].",
                "Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
                "The Agent based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
                "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
                "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
                "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
                "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
                "There has been considerable work on decentralised resource allocation techniques using game theory published over recent years.",
                "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
                "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
                "It is an ill-defined decision problem that assumes and models inductive reasoning.",
                "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
                "A variation of the El Farol problem is the so called minority game [8].",
                "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
                "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
                "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent.",
                "Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18].",
                "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
                "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
                "A resource allocation approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
                "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
                "A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks.",
                "Agents make their decisions themselves based on forecasts of the server utilisation.",
                "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
                "MODEL DESCRIPTION We model a distributed multi-agent system as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "Each agent has a number of tasks Ti that needs to be executed during its lifetime.",
                "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
                "Resources for the execution of tasks are provided by each server li.",
                "The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources.",
                "We write LS (ai) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai.",
                "Resources in the system can be used by all agents for the execution of tasks.",
                "The amount of provided resources C(li, t) of each server can vary over time.",
                "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
                "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
                "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
                "In this case, some agents must wait with their allocation request until free resources are expected.",
                "The multi-agent system model used for our simulations is illustrated in Fig. 1. 4.",
                "SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each agent.",
                "The only information required in order to make a resource allocation decision for a task is the server utilisation from completed task allocations at those servers.",
                "There is no additional information dissemination about server resource utilisation or information about free resources.",
                "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
                "Additionally, we do not have any central controlling authority.",
                "All behaviour that leads to the resource allocation is created by the effective competition of the agents for shared resources and is a purely emergent effect.",
                "The agents in our multi-agent system compete for resources or a set of resources to execute tasks.",
                "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
                "Our approach is based on different agent beliefs, represented by predictors and different information about their environment.",
                "Agents prefer a task allocation at a server with free resources.",
                "However, there is no way to be sure of the amount of free server resources in advance.",
                "All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution.",
                "There is no communication between agents.",
                "Actions taken by agents influence the actions of other agents indirectly.",
                "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
                "It is derived from the human way of deciding ill-defined problems.",
                "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
                "Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation.",
                "All necessary control is integrated in the agents themselves.",
                "There is no higher controlling authority, management layer for decision support or information distribution.",
                "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
                "To do so, agents use historical information from past task allocations at those resources.",
                "Based on the forecasted resource utilisation, the agent will make its resource allocation decision.",
                "After the task has finished its execution and returned the results back to the agent, the predictor performances are evaluated and history information is updated.",
                "Algorithm 1 shows the resource allocation algorithm for each agent.",
                "The agent first predicts the next steps resource load for each server with historical information (line 3-7).",
                "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
                "The agent then evaluates if any free shared resources for the task allocation are expected.",
                "In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
                "This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available.",
                "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
                "One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load.",
                "Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
                "The most recent history item is h0.",
                "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
                "Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
                "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
                "As the result, the server would have a large amount of free resources.",
                "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
                "An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a).",
                "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
                "This may change in the future as the resource load has significantly increased recently.",
                "In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation.",
                "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
                "Algorithm 1 Resource Allocation algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
                "A probability distribution is calculated from the confidence levels of the resource predictions.",
                "The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
                "The server with the highest confidence level has the biggest chance to be selected as the active server.",
                "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
                "The server with most expected free resources from the set L of server with expected free resources is chosen.",
                "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
                "However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation.",
                "In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
                "The agent will not allocate the task at a resource.",
                "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
                "After the agent execution has finished, the evaluation process described in algorithm 4 is preformed.",
                "This process is divided into three cases.",
                "First, the task was not allocated at a resource.",
                "In this case, the agent cannot decide if the decision not to allocate the task was correct or not.",
                "The agent then removes old historical data.",
                "This is necessary for a successful adaptation in the future.",
                "If the agent would not delete old historical information, the prediction would always forecast that no free resources are available.",
                "The agent would never allocate a task at one of the resources in the future.",
                "Old historical information is removed from the agents resource history using a decay rate.",
                "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
                "The current implementation uses a constant probability density function in a configurable domain.",
                "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
                "Depending on the environment, the probability density function must be altered.",
                "If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
                "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
                "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
                "The agent creates a new predictor set for this server and records the historical information.",
                "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource.",
                "The agent evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data.",
                "Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating.",
                "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation.",
                "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
                "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
                "Based on these performance ratings, the confidence levels are calculated using equation 4.",
                "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor.",
                "These values are transformed into a probability distribution.",
                "According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection.",
                "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels.",
                "Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor.",
                "This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
                "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
                "Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources.",
                "In fact, enough resources for the execution would be available.",
                "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
                "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
                "The oldest history data is overwritten if already m history values are recorded for the server.",
                "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor.",
                "This method assures that agents can compete more effectively in a changing environment.",
                "Different types of predictors are suitable for different situations and environments.",
                "Therefore, all predictors are being evaluated after each decision and the active predictor is selected.",
                "This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
                "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
                "Our self-organising approach is robust against failures of resources or agents in the system.",
                "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
                "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
                "The limitations are the reliance on historical resource utilisation information about other servers.",
                "A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource.",
                "If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers.",
                "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers.",
                "In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one.",
                "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
                "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
                "In the rest of the section, results of the experiments are presented and discussed.",
                "All experiments are conducted in a special testbed that simulates and models a multi-agent system.",
                "We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit.",
                "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
                "An event-driven model is used to trigger all activities in the system.",
                "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each agent.",
                "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
                "Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
                "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
                "The total resource load of the system is calculated as the sum of the resources load of all resources.",
                "The self-organising resource allocation algorithm has random elements.",
                "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process.",
                "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation.",
                "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
                "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
                "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server.",
                "The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources.",
                "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
                "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
                "For this time the task consumes the assigned amount of server resources.",
                "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
                "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
                "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism.",
                "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
                "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
                "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
                "The resource capacity of each server remains constant over the experiment.",
                "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
                "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
                "Figure 4 shows the results from 100 repetitions of this experiment.",
                "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
                "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
                "This initial exploration phase shows that the average resource load of each server has a similar level.",
                "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
                "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
                "They find free resources at server 2.",
                "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
                "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
                "This experiment used algorithm 2 for the selection of the active server.",
                "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
                "The resource allocation for each server is similar.",
                "The absolute amount of free resources per server is almost the same.",
                "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
                "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
                "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
                "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
                "Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment.",
                "All agents use the deterministic most free resources selection mechanism to select the active server.",
                "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
                "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
                "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
                "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
                "Fig. 4(a)). 6.",
                "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-agent systems was presented.",
                "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
                "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
                "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
                "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
                "The resource allocation is a purely emergent effect.",
                "Our mechanism demonstrates that resource allocation can be done by the effective competition of individual and autonomous agents.",
                "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
                "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
                "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
                "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required.",
                "Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
                "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-agent system environment.",
                "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
                "All control is implemented in the agents.",
                "A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective resource allocation.",
                "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
                "Our approach adapts to changes in the environment but it is not evolutionary.",
                "There is no discovery of new strategies by the agents.",
                "The set of predictors stays the same over the whole life.",
                "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future.",
                "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
                "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance.",
                "The decay rate is currently predefined and must be altered manually depending on the environment.",
                "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
                "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
                "We are aware of the long learning phase in environments with a large number of shared resources known by each agent.",
                "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
                "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
                "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
                "In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers.",
                "This issue needs more investigation in the future. 7.",
                "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
                "Cactus Tools for Grid Applications.",
                "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
                "Kluwer Academic Publishers. [2] W. B. Arthur.",
                "Inductive Reasoning and Bounded Rationality.",
                "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
                "Server Load Balancing.",
                "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
                "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
                "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
                "Economic Models for Resource Management and Scheduling in Grid Computing.",
                "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
                "Architectural Models for Resource Management in the Grid.",
                "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
                "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
                "A taxonomy of scheduling in general-purpose distributed computing systems.",
                "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
                "Emergence of Cooperation and Organization in an Evolutionary Game.",
                "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
                "On load balancing for distributed multiagent computing.",
                "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
                "IEEE, August 2002. [10] S. H. Clearwater.",
                "Market-based control.",
                "A Paradigm for Distributed Resource Allocation.",
                "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
                "Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications.",
                "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
                "Foster and C. Kesselman.",
                "Globus: A Metacomputing Infrastructure Toolkit.",
                "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
                "Foster, M. Livny, and S. Tuecke.",
                "Condor-G: A Computation Management Agent for Multi-Institutional Grids.",
                "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
                "Resource allocation games with changing resource capacities.",
                "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
                "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
                "Combining state and model-based approaches for mobile agent load balancing.",
                "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
                "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
                "Decentralized Adaptive Resource Allocation for Sensor Networks.",
                "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
                "An Agent-based Resource Allocation Model for Computational Grids.",
                "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
                "Adaptive Load Balancing: A Study in Multi-Agent Learning.",
                "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
                "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
                "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
                "ACM Press, May 2006. [20] W3C.",
                "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
                "Complexity: The Emerging Science at the Edge of Order and Chaos.",
                "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
                "Analyzing Market-Based Resource Allocation Strategies for the Computational Grid.",
                "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
                "Sage Science Press, 2001.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "network of server": {
            "translated_key": "red de servidores",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Towards Self-organising Agent-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
                "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
                "In this paper we propose a distributed algorithm that solves the resource allocation problem in distributed multiagent systems.",
                "Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer.",
                "The resource allocation in the system is a purely emergent effect.",
                "We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
                "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
                "In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
                "Hence, distributed solutions of the resource allocation problem are required.",
                "Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation.",
                "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
                "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
                "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].",
                "In this paper we propose a distributed solution of the resource allocation problem based on self-organisation of the resource consumers in a system with limited resources.",
                "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
                "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
                "All control needed for our algorithm is distributed among the agents in the system.",
                "They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
                "The only information available to all agents are resource load and allocation success information from past resource allocations.",
                "Additional resource load information about servers is not disseminated.",
                "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
                "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
                "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
                "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-agent system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11].",
                "Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.",
                "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
                "Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.",
                "Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.",
                "Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results.",
                "A summary, conclusion and outlook to future work finish this paper. 2.",
                "RELATED WORK Resource allocation is an important problem in the area of computer science.",
                "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
                "Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
                "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
                "The broker usually has full knowledge about all system resources.",
                "All incoming requests are directed to the broker who is the solely decision maker.",
                "In those approaches, the resource consumer cannot influence the allocation decision process.",
                "Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
                "This mechanism works best in a homogeneous system.",
                "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
                "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation.",
                "This technique can only provide a good supplement for distributed resource allocation mechanisms.",
                "Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
                "Those coordinators usually need to have global knowledge on the state of all system resources.",
                "An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
                "The value of distributed solutions for the resource allocation problem has been recognised by research [10].",
                "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
                "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
                "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
                "A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10].",
                "Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
                "The Agent based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
                "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
                "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
                "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
                "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
                "There has been considerable work on decentralised resource allocation techniques using game theory published over recent years.",
                "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
                "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
                "It is an ill-defined decision problem that assumes and models inductive reasoning.",
                "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
                "A variation of the El Farol problem is the so called minority game [8].",
                "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
                "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
                "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent.",
                "Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18].",
                "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
                "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
                "A resource allocation approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
                "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
                "A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks.",
                "Agents make their decisions themselves based on forecasts of the server utilisation.",
                "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
                "MODEL DESCRIPTION We model a distributed multi-agent system as a <br>network of server</br>s L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "Each agent has a number of tasks Ti that needs to be executed during its lifetime.",
                "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
                "Resources for the execution of tasks are provided by each server li.",
                "The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources.",
                "We write LS (ai) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai.",
                "Resources in the system can be used by all agents for the execution of tasks.",
                "The amount of provided resources C(li, t) of each server can vary over time.",
                "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
                "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
                "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
                "In this case, some agents must wait with their allocation request until free resources are expected.",
                "The multi-agent system model used for our simulations is illustrated in Fig. 1. 4.",
                "SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each agent.",
                "The only information required in order to make a resource allocation decision for a task is the server utilisation from completed task allocations at those servers.",
                "There is no additional information dissemination about server resource utilisation or information about free resources.",
                "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
                "Additionally, we do not have any central controlling authority.",
                "All behaviour that leads to the resource allocation is created by the effective competition of the agents for shared resources and is a purely emergent effect.",
                "The agents in our multi-agent system compete for resources or a set of resources to execute tasks.",
                "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
                "Our approach is based on different agent beliefs, represented by predictors and different information about their environment.",
                "Agents prefer a task allocation at a server with free resources.",
                "However, there is no way to be sure of the amount of free server resources in advance.",
                "All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution.",
                "There is no communication between agents.",
                "Actions taken by agents influence the actions of other agents indirectly.",
                "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
                "It is derived from the human way of deciding ill-defined problems.",
                "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
                "Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation.",
                "All necessary control is integrated in the agents themselves.",
                "There is no higher controlling authority, management layer for decision support or information distribution.",
                "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
                "To do so, agents use historical information from past task allocations at those resources.",
                "Based on the forecasted resource utilisation, the agent will make its resource allocation decision.",
                "After the task has finished its execution and returned the results back to the agent, the predictor performances are evaluated and history information is updated.",
                "Algorithm 1 shows the resource allocation algorithm for each agent.",
                "The agent first predicts the next steps resource load for each server with historical information (line 3-7).",
                "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
                "The agent then evaluates if any free shared resources for the task allocation are expected.",
                "In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
                "This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available.",
                "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
                "One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load.",
                "Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
                "The most recent history item is h0.",
                "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
                "Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
                "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
                "As the result, the server would have a large amount of free resources.",
                "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
                "An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a).",
                "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
                "This may change in the future as the resource load has significantly increased recently.",
                "In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation.",
                "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
                "Algorithm 1 Resource Allocation algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
                "A probability distribution is calculated from the confidence levels of the resource predictions.",
                "The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
                "The server with the highest confidence level has the biggest chance to be selected as the active server.",
                "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
                "The server with most expected free resources from the set L of server with expected free resources is chosen.",
                "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
                "However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation.",
                "In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
                "The agent will not allocate the task at a resource.",
                "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
                "After the agent execution has finished, the evaluation process described in algorithm 4 is preformed.",
                "This process is divided into three cases.",
                "First, the task was not allocated at a resource.",
                "In this case, the agent cannot decide if the decision not to allocate the task was correct or not.",
                "The agent then removes old historical data.",
                "This is necessary for a successful adaptation in the future.",
                "If the agent would not delete old historical information, the prediction would always forecast that no free resources are available.",
                "The agent would never allocate a task at one of the resources in the future.",
                "Old historical information is removed from the agents resource history using a decay rate.",
                "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
                "The current implementation uses a constant probability density function in a configurable domain.",
                "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
                "Depending on the environment, the probability density function must be altered.",
                "If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
                "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
                "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
                "The agent creates a new predictor set for this server and records the historical information.",
                "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource.",
                "The agent evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data.",
                "Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating.",
                "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation.",
                "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
                "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
                "Based on these performance ratings, the confidence levels are calculated using equation 4.",
                "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor.",
                "These values are transformed into a probability distribution.",
                "According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection.",
                "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels.",
                "Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor.",
                "This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
                "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
                "Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources.",
                "In fact, enough resources for the execution would be available.",
                "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
                "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
                "The oldest history data is overwritten if already m history values are recorded for the server.",
                "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor.",
                "This method assures that agents can compete more effectively in a changing environment.",
                "Different types of predictors are suitable for different situations and environments.",
                "Therefore, all predictors are being evaluated after each decision and the active predictor is selected.",
                "This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
                "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
                "Our self-organising approach is robust against failures of resources or agents in the system.",
                "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
                "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
                "The limitations are the reliance on historical resource utilisation information about other servers.",
                "A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource.",
                "If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers.",
                "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers.",
                "In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one.",
                "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
                "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
                "In the rest of the section, results of the experiments are presented and discussed.",
                "All experiments are conducted in a special testbed that simulates and models a multi-agent system.",
                "We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit.",
                "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
                "An event-driven model is used to trigger all activities in the system.",
                "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each agent.",
                "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
                "Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
                "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
                "The total resource load of the system is calculated as the sum of the resources load of all resources.",
                "The self-organising resource allocation algorithm has random elements.",
                "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process.",
                "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation.",
                "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
                "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
                "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server.",
                "The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources.",
                "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
                "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
                "For this time the task consumes the assigned amount of server resources.",
                "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
                "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
                "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism.",
                "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
                "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
                "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
                "The resource capacity of each server remains constant over the experiment.",
                "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
                "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
                "Figure 4 shows the results from 100 repetitions of this experiment.",
                "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
                "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
                "This initial exploration phase shows that the average resource load of each server has a similar level.",
                "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
                "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
                "They find free resources at server 2.",
                "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
                "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
                "This experiment used algorithm 2 for the selection of the active server.",
                "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
                "The resource allocation for each server is similar.",
                "The absolute amount of free resources per server is almost the same.",
                "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
                "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
                "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
                "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
                "Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment.",
                "All agents use the deterministic most free resources selection mechanism to select the active server.",
                "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
                "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
                "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
                "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
                "Fig. 4(a)). 6.",
                "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-agent systems was presented.",
                "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
                "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
                "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
                "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
                "The resource allocation is a purely emergent effect.",
                "Our mechanism demonstrates that resource allocation can be done by the effective competition of individual and autonomous agents.",
                "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
                "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
                "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
                "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required.",
                "Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
                "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-agent system environment.",
                "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
                "All control is implemented in the agents.",
                "A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective resource allocation.",
                "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
                "Our approach adapts to changes in the environment but it is not evolutionary.",
                "There is no discovery of new strategies by the agents.",
                "The set of predictors stays the same over the whole life.",
                "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future.",
                "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
                "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance.",
                "The decay rate is currently predefined and must be altered manually depending on the environment.",
                "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
                "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
                "We are aware of the long learning phase in environments with a large number of shared resources known by each agent.",
                "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
                "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
                "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
                "In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers.",
                "This issue needs more investigation in the future. 7.",
                "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
                "Cactus Tools for Grid Applications.",
                "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
                "Kluwer Academic Publishers. [2] W. B. Arthur.",
                "Inductive Reasoning and Bounded Rationality.",
                "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
                "Server Load Balancing.",
                "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
                "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
                "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
                "Economic Models for Resource Management and Scheduling in Grid Computing.",
                "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
                "Architectural Models for Resource Management in the Grid.",
                "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
                "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
                "A taxonomy of scheduling in general-purpose distributed computing systems.",
                "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
                "Emergence of Cooperation and Organization in an Evolutionary Game.",
                "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
                "On load balancing for distributed multiagent computing.",
                "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
                "IEEE, August 2002. [10] S. H. Clearwater.",
                "Market-based control.",
                "A Paradigm for Distributed Resource Allocation.",
                "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
                "Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications.",
                "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
                "Foster and C. Kesselman.",
                "Globus: A Metacomputing Infrastructure Toolkit.",
                "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
                "Foster, M. Livny, and S. Tuecke.",
                "Condor-G: A Computation Management Agent for Multi-Institutional Grids.",
                "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
                "Resource allocation games with changing resource capacities.",
                "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
                "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
                "Combining state and model-based approaches for mobile agent load balancing.",
                "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
                "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
                "Decentralized Adaptive Resource Allocation for Sensor Networks.",
                "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
                "An Agent-based Resource Allocation Model for Computational Grids.",
                "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
                "Adaptive Load Balancing: A Study in Multi-Agent Learning.",
                "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
                "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
                "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
                "ACM Press, May 2006. [20] W3C.",
                "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
                "Complexity: The Emerging Science at the Edge of Order and Chaos.",
                "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
                "Analyzing Market-Based Resource Allocation Strategies for the Computational Grid.",
                "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
                "Sage Science Press, 2001.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81"
            ],
            "original_annotated_samples": [
                "MODEL DESCRIPTION We model a distributed multi-agent system as a <br>network of server</br>s L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}."
            ],
            "translated_annotated_samples": [
                "DESCRIPCIÓN DEL MODELO Modelamos un sistema multiagente distribuido como una <br>red de servidores</br> L = {l1, . . . , lm}, agentes A = {a1, . . . , an} y tareas T = {T1, ..., Tm}."
            ],
            "translated_text": "Hacia la asignación de recursos basada en agentes autoorganizados en un entorno de múltiples servidores. Tino Schlegel1, Ryszard Kowalczyk2. Universidad de Tecnología Swinburne, Facultad de Tecnologías de la Información y la Comunicación, Hawthorn, 3122 Victoria, Australia {tschlegel1, rkowalczyk2}@ict.swin.edu.au. RESUMEN Las aplicaciones distribuidas requieren técnicas distribuidas para una asignación eficiente de recursos. Estas técnicas deben tener en cuenta la heterogeneidad y la posible falta de fiabilidad de los recursos y consumidores de recursos en entornos distribuidos. En este artículo proponemos un algoritmo distribuido que resuelve el problema de asignación de recursos en sistemas multiagentes distribuidos. Nuestra solución se basa en la autoorganización de agentes, la cual no requiere ningún facilitador o capa de gestión. La asignación de recursos en el sistema es un efecto puramente emergente. Presentamos los resultados del mecanismo de asignación de recursos propuesto en el entorno simulado de servidores múltiples estáticos y dinámicos. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Coherencia y coordinación Términos Generales Algoritmos 1. INTRODUCCIÓN Con la creciente popularidad de tecnologías de computación distribuida como Grid [12] y servicios web [20], Internet se está convirtiendo en una plataforma informática poderosa donde diferentes pares de software (por ejemplo, agentes) pueden utilizar recursos informáticos existentes para realizar tareas. En este sentido, cada agente es un consumidor de recursos que adquiere una cierta cantidad de recursos para la ejecución de sus tareas. Es difícil para un mecanismo central de asignación de recursos recopilar y gestionar la información sobre todos los recursos compartidos y consumidores de recursos para realizar de manera efectiva la asignación de recursos. Por lo tanto, se requieren soluciones distribuidas del problema de asignación de recursos. Los investigadores han reconocido estos requisitos [10] y han propuesto técnicas para la asignación de recursos distribuidos. Un tipo prometedor de enfoques distribuidos se basa en modelos de mercado económico [4], inspirados en los principios de los mercados de valores reales. Aunque esos enfoques estén distribuidos, generalmente requieren un facilitador para la fijación de precios, la búsqueda de recursos y la asignación de trabajos a los recursos [5, 9]. Otro problema principalmente sin resolver de esos enfoques es el ajuste fino del precio y el tiempo, las restricciones presupuestarias para permitir una asignación eficiente de recursos en sistemas grandes y dinámicos [22]. En este documento proponemos una solución distribuida del problema de asignación de recursos basada en la autoorganización de los consumidores de recursos en un sistema con recursos limitados. En nuestro enfoque, los agentes asignan dinámicamente tareas a servidores que proporcionan una cantidad limitada de recursos. En nuestro enfoque, los agentes seleccionan de forma autónoma la plataforma de ejecución para la tarea en lugar de pedir a un intermediario de recursos que realice la asignación. Todo el control necesario para nuestro algoritmo está distribuido entre los agentes en el sistema. Optimizan continuamente el proceso de asignación de recursos a lo largo de su vida para adaptarse a los cambios en la disponibilidad de recursos compartidos, aprendiendo de decisiones de asignación pasadas. La única información disponible para todos los agentes son la carga de recursos y la información sobre el éxito de la asignación de recursos de asignaciones pasadas. La información adicional sobre la carga de recursos de los servidores no se difunde. El concepto básico de nuestra solución está inspirado en el razonamiento inductivo y la racionalidad limitada introducida por W. Brian Arthur [2]. El mecanismo propuesto no requiere una autoridad central de control, una capa de gestión de recursos o introducir comunicación adicional entre agentes para decidir qué tarea se asigna en qué servidor. Demostramos que este mecanismo funciona bien en sistemas dinámicos con un gran número de tareas y puede adaptarse fácilmente a diferentes tamaños de sistemas. Además, el rendimiento general del sistema no se ve afectado en caso de que los agentes o servidores fallen o no estén disponibles. El enfoque propuesto proporciona una forma sencilla de implementar la asignación de recursos distribuidos y tiene en cuenta las tendencias del sistema multiagente hacia la autonomía, la heterogeneidad y la falta de fiabilidad de los recursos y agentes. Esta técnica propuesta puede ser fácilmente complementada por técnicas para encolar o rechazar solicitudes de asignación de recursos de agentes [11]. Tales capacidades de auto-gestión de agentes de software permiten una asignación de recursos confiable incluso en un entorno con proveedores de recursos poco confiables. Esto se puede lograr mediante las interacciones mutuas entre agentes aplicando técnicas de la teoría de sistemas complejos. La autoorganización de todos los agentes conduce a una autoorganización de los recursos del sistema 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS y es una propiedad emergente del sistema [21]. El resto del documento está estructurado de la siguiente manera: La siguiente sección proporciona una visión general del trabajo relacionado ya realizado en el área de equilibrio de carga, asignación de recursos o programación. La sección 3 describe el modelo de un entorno multiagente que se utilizó para realizar simulaciones con el fin de evaluar el rendimiento. Las secciones 4 y 5 describen el algoritmo de asignación de recursos distribuidos y presentan varios resultados experimentales. Un resumen, una conclusión y una perspectiva del trabajo futuro finalizan este documento. El trabajo relacionado La asignación de recursos es un problema importante en el área de la informática. En los últimos años, diferentes grupos de investigación han propuesto soluciones basadas en diferentes suposiciones y restricciones [7, 3, 15, 10]. En términos generales, la asignación de recursos es un mecanismo o política para la gestión eficiente y efectiva del acceso a un recurso limitado o conjunto de recursos por parte de sus consumidores. En el caso más simple, los consumidores de recursos solicitan a un intermediario central o despachador los recursos disponibles donde el consumidor de recursos será asignado. El corredor generalmente tiene pleno conocimiento de todos los recursos del sistema. Todas las solicitudes entrantes son dirigidas al corredor, quien es el único tomador de decisiones. En esos enfoques, el consumidor de recursos no puede influir en el proceso de decisión de asignación. El equilibrio de carga [3] es un caso especial del problema de asignación de recursos que utiliza un intermediario que intenta ser justo con todos los recursos al equilibrar la carga del sistema de manera equitativa entre todos los proveedores de recursos. Este mecanismo funciona mejor en un sistema homogéneo. Una técnica distribuida simple para la gestión de recursos es la planificación de capacidad mediante la negativa o encolamiento de agentes entrantes para evitar la sobrecarga de recursos [11]. Desde la perspectiva del propietario de recursos, esta técnica es importante para prevenir la sobrecarga en el recurso, pero no es suficiente para una asignación efectiva de recursos. Esta técnica solo puede proporcionar un buen complemento para los mecanismos de asignación de recursos distribuidos. La mayoría de las técnicas actuales para la asignación de recursos en herramientas de computación en malla como Globus [12] o Condor-G [13] coordinan la asignación de recursos con un subastador, árbitro, despachador, programador o gestor. Esos coordinadores suelen necesitar tener conocimiento global sobre el estado de todos los recursos del sistema. Un ejemplo de un algoritmo de asignación de recursos dinámicos es el proyecto Cactus [1] para la asignación de trabajos computacionales muy costosos. El valor de las soluciones distribuidas para el problema de asignación de recursos ha sido reconocido por la investigación [10]. Inspirados en los principios de los mercados de valores, se han desarrollado modelos de mercado económico para negociar recursos con el fin de regular la oferta y la demanda en la red. Estos enfoques utilizan diferentes estrategias de precios como modelos de precios publicados, diferentes métodos de subasta o un modelo de mercado de productos básicos. Los usuarios intentan comprar recursos baratos necesarios para ejecutar el trabajo, mientras que los proveedores intentan obtener la mayor ganancia posible y operar los recursos disponibles a plena capacidad. Se presenta una colección de diferentes técnicas de asignación de recursos distribuidos basadas en modelos de mercado en Clearwater [10]. Buyya et al. desarrollaron un marco de asignación de recursos basado en la regulación de la oferta y la demanda [4] para Nimrod-G [6] con el enfoque principal en los plazos de entrega de trabajos y las restricciones presupuestarias. El Modelo de Asignación de Recursos basado en Agentes (ARAM) para redes está diseñado para programar trabajos computacionalmente costosos utilizando agentes. La desventaja de este modelo es el extenso uso de intercambio de mensajes entre agentes para monitoreo periódico e intercambio de información dentro de la estructura jerárquica. Las subtareas de un trabajo migran a través de la red hasta que encuentran un recurso que cumpla con las restricciones de precio. El itinerario de migración de trabajos está determinado por los recursos que los conectan en diferentes topologías [17]. El mecanismo propuesto en este documento elimina la necesidad de intercambio periódico de información sobre las cargas de recursos y no requiere una topología de conexión entre los recursos. Se ha realizado un considerable trabajo sobre técnicas de asignación descentralizada de recursos utilizando teoría de juegos publicado en los últimos años. La mayoría de ellos están formulados como juegos repetitivos en un entorno idealista y simplificado. Por ejemplo, Arthur introdujo el problema del bar El Farol, que no permite una solución perfecta, lógica y racional. Es un problema de decisión mal definido que asume y modela el razonamiento inductivo. Probablemente sea uno de los ejemplos más estudiados de sistemas adaptativos complejos derivados de la forma en que los humanos deciden problemas mal definidos. Una variación del problema de El Farol es el llamado juego de la minoría [8]. En este juego de decisión repetitivo, un número impar de agentes debe elegir entre dos recursos basándose en información de éxito pasado, tratando de asignarse al recurso con la minoría. Galstyan et al. [14] estudiaron una variación con más de dos recursos, cambiando las capacidades de los recursos y la información de los agentes vecinos. Demostraron que los agentes pueden adaptarse de manera efectiva a las capacidades cambiantes en este entorno utilizando un conjunto de simples tablas de búsqueda (estrategias) por agente. Otra técnica distribuida que se emplea para resolver el problema de asignación de recursos se basa en el aprendizaje por refuerzo [18]. Similar a nuestro enfoque, un conjunto de agentes compiten por un número limitado de recursos basados únicamente en experiencias individuales previas. En este documento, el objetivo del sistema es maximizar el rendimiento del sistema garantizando la equidad de los recursos, medida como el tiempo promedio de procesamiento por unidad de trabajo. Se presenta un enfoque de asignación de recursos para redes de sensores basado en técnicas de autoorganización y aprendizaje por refuerzo en [16], con un enfoque principal en la optimización del consumo de energía de los nodos de la red. Propusimos un enfoque de equilibrio de carga autoorganizado para un único servidor con el objetivo de optimizar los costos de comunicación de agentes móviles. Un agente móvil rechazará una migración a un servidor de agente remoto si espera que el servidor de destino ya esté sobrecargado por otros agentes o tareas del servidor. Los agentes toman sus decisiones por sí mismos basándose en pronósticos de la utilización del servidor. En este documento se presenta una solución para un entorno de múltiples servidores sin tener en cuenta los costos de comunicación o migración. 3. DESCRIPCIÓN DEL MODELO Modelamos un sistema multiagente distribuido como una <br>red de servidores</br> L = {l1, . . . , lm}, agentes A = {a1, . . . , an} y tareas T = {T1, ..., Tm}. Cada agente tiene un número de tareas Ti que deben ser ejecutadas durante su vida útil. Una tarea Ti requiere U(Ti, t) recursos para su ejecución en el tiempo t, independientemente de su servidor de ejecución. Los recursos para la ejecución de tareas son proporcionados por cada servidor li. La ubicación de la ejecución de las tareas en general está especificada por el mapa L: T × t → L. Un agente debe conocer la existencia de recursos del servidor para asignar tareas en esos recursos. Escribimos LS (ai) The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 75 Recursos del Sistema Anfitrión l4 Anfitrión l3 Anfitrión l2 2a 3a 4a a Anfitrión l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figura 1: Una ilustración de nuestro modelo de múltiples servidores con recursos exclusivos y compartidos para la ejecución del agente. para abordar el conjunto de recursos conocidos por el agente ai. Los recursos en el sistema pueden ser utilizados por todos los agentes para la ejecución de tareas. La cantidad de recursos proporcionados C(li, t) de cada servidor puede variar con el tiempo. La utilización de recursos de un servidor en el tiempo t se calcula utilizando la ecuación 1, sumando el consumo de recursos U(Tj, t) de cada tarea Tj que se ejecuta en el recurso en el tiempo t. Todas las unidades de recursos utilizadas en nuestro modelo representan métricas reales como memoria o ciclos de procesador. Además del caso en que la cantidad total de recursos del sistema es suficiente para ejecutar todas las tareas, también nos interesa el caso en que no se proporcionan suficientes recursos del sistema para cumplir con todas las solicitudes de asignación. Es decir, la capacidad total de recursos compartidos es menor que la cantidad de recursos solicitados por los agentes. En este caso, algunos agentes deben esperar con su solicitud de asignación hasta que se esperen recursos libres. El modelo de sistema multiagente utilizado para nuestras simulaciones está ilustrado en la Figura 1.4. ASIGNACIÓN DE RECURSOS AUTOORGANIZADA El algoritmo de asignación de recursos descrito en esta sección está integrado en cada agente. La única información necesaria para tomar una decisión de asignación de recursos para una tarea es la utilización del servidor de las asignaciones de tareas completadas en esos servidores. No hay una difusión adicional de información sobre la utilización de recursos del servidor o información sobre recursos libres. Nuestra solución demuestra que los agentes pueden autoorganizarse en un entorno dinámico sin necesidad de información de monitoreo activo que genere una gran sobrecarga de tráfico en la red. Además, no tenemos ninguna autoridad central de control. Todo comportamiento que conduce a la asignación de recursos es creado por la competencia efectiva de los agentes por recursos compartidos y es un efecto puramente emergente. Los agentes en nuestro sistema multiagente compiten por recursos o un conjunto de recursos para ejecutar tareas. La acción colectiva de estos agentes cambia el entorno y, con el paso del tiempo, tienen que adaptarse a estos cambios para competir de manera más efectiva en el entorno recién creado. Nuestro enfoque se basa en diferentes creencias de los agentes, representadas por predictores y diferente información sobre su entorno. Los agentes prefieren una asignación de tareas en un servidor con recursos disponibles. Sin embargo, no hay forma de estar seguro de la cantidad de recursos del servidor disponibles de antemano. Todos los agentes tienen las mismas preferencias y un agente asignará una tarea en un servidor si espera tener suficientes recursos libres para su ejecución. No hay comunicación entre agentes. Las acciones tomadas por los agentes influyen en las acciones de otros agentes de forma indirecta. El mecanismo aplicado está inspirado en el razonamiento inductivo y los principios de racionalidad limitada [2]. Se deriva de la forma humana de resolver problemas mal definidos. Los humanos tienden a tener en cuenta muchas hipótesis y actuar en base a la más plausible. Por lo tanto, cada agente lleva un registro del rendimiento de una colección privada de sus predictores y selecciona aquel que actualmente sea más prometedor para la toma de decisiones. 4.1 Algoritmo de asignación de recursos Esta sección describe el mecanismo de decisión para nuestra asignación de recursos autoorganizada. Todo el control necesario está integrado en los propios agentes. No hay una autoridad superior de control, capa de gestión para apoyo en la toma de decisiones o distribución de información. Todos los agentes tienen un conjunto de predictores para cada recurso con el fin de pronosticar la futura utilización de estos servidores para la asignación potencial de tareas. Para hacerlo, los agentes utilizan información histórica de asignaciones de tareas pasadas en esos recursos. Basándose en la utilización de recursos pronosticada, el agente tomará su decisión de asignación de recursos. Después de que la tarea haya finalizado su ejecución y devuelto los resultados al agente, se evalúan las actuaciones del predictor y se actualiza la información histórica. El Algoritmo 1 muestra el algoritmo de asignación de recursos para cada agente. El agente primero predice la carga de recursos de los próximos pasos para cada servidor con información histórica (línea 3-7). Si la carga de recursos predicha más el consumo de recursos de las tareas está por debajo de la última capacidad de servidor conocida, este servidor se agrega a la lista de candidatos para la asignación. El agente luego evalúa si se esperan recursos compartidos gratuitos para la asignación de tareas. En el caso de que no se esperen recursos gratuitos (línea 9), el agente explorará los recursos asignando la tarea a un servidor seleccionado al azar de entre todos los servidores no predecibles para recopilar información sobre la carga de recursos. Este es el caso estándar al comienzo del ciclo de vida del agente, ya que no hay información disponible sobre el entorno. La predicción de la carga de recursos en sí misma utiliza un conjunto de r predictores P(a, l) := {pi|1 ≤ i ≤ r} por servidor. Uno de los predictores pA ∈ P de cada conjunto se llama predictor activo, el cual pronostica la carga de recursos de los próximos pasos. Cada predictor es una función P: H → ℵ+ ∪ {0} del espacio de datos históricos H a un número entero no negativo, que es el valor pronosticado. Por ejemplo, un predictor podría pronosticar una carga de recursos igual a la cantidad promedio de recursos ocupados durante la última ejecución en este recurso. Un historial H de información de carga de recursos es una lista de hasta m elementos de historial hi = (xi, yi), que incluyen la fecha de observación xi y el valor observado yi. El elemento más reciente del historial es h0. Nuestro algoritmo utiliza un conjunto de predictores en lugar de solo uno, para evitar que todos los agentes tomen la misma decisión basada en el valor predicho, lo que invalidaría sus creencias. Imagina que solo un recurso compartido es conocido por un número de agentes que utilizan un predictor para pronosticar el 76 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Carga de Recursos Tiempo (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figura 2: (a) Información de carga de recursos recopilada de asignaciones de tareas anteriores que se utiliza para predicciones futuras. (b) Distribución de probabilidad de los predictores para seleccionar el nuevo predictor activo. mismo valor que la última utilización conocida de recursos del servidor. Todos los agentes que asignaron una tarea en un servidor que estaba ligeramente sobrecargado rechazarían otra asignación en este servidor, ya que esperan que el servidor vuelva a estar sobrecargado según las predicciones. Como resultado, el servidor tendría una gran cantidad de recursos libres. Un conjunto de diferentes predictores que predicen diferentes valores evita esta situación de invalidar las creencias de los agentes [19]. Un ejemplo de información de carga de recursos recopilada de las últimas 5 visitas de un agente a un recurso compartido se puede ver en la Figura 2(a). Muestra que el recurso fue visitado con frecuencia, lo que significa que había recursos gratuitos disponibles para la ejecución y no era necesario explorar otros servidores. Esto puede cambiar en el futuro ya que la carga de recursos ha aumentado significativamente recientemente. En el caso en que el conjunto de servidores que se predice que tienen recursos disponibles no esté vacío (línea 13), el agente selecciona uno de ellos para su asignación. Hemos implementado dos algoritmos alternativos para la selección de un servidor para la asignación de tareas. Algoritmo 1 Algoritmo de asignación de recursos de un agente 1 L ← ∅ //servidor con recursos libres 2 u ← U(T, t + 1) //consumo de recursos de la tarea 3 para todo P(a, l)|l ∈ LS (a) hacer 4 U(l) ← predicción de carga de recursos (P(a, l), t + 1) 5 si U(l) + u ≤ C(l) entonces 6 L ← L ∪ {P(a, l)} 7 fin si 8 fin para 9 si L = ∅ entonces 10 //todos los recursos compartidos impredecibles 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← un elemento aleatorio de E 13 else 14 allocationServer ← selección de servidor (L) 15 fin si 16 devolver allocationServer El Algoritmo 2 muestra el primer método, que es una selección no determinista según la previsibilidad de la utilización de recursos del servidor. Una distribución de probabilidad se calcula a partir de los niveles de confianza de las predicciones de recursos. El nivel de confianza depende de tres factores: la precisión del predictor activo, la cantidad de información histórica sobre el servidor y la edad promedio de la información histórica (ver Ecuación 3). El servidor con el nivel de confianza más alto tiene la mayor probabilidad de ser seleccionado como el servidor activo. G(P) = w1 · tamaño(H) m + w2 · Edad(H) máx Edad(H) + w3 · g(p) máx (g(p)) (3) donde: wi − pesos tamaño(H) − número de datos en el historial m − número máximo de valores históricos Edad(H) − edad promedio de los datos históricos g(p) − ver ecuación 4 Algoritmo 2 selecciónServidor(L) - mejor servidor predecible 1 para todos los P(a, l) ∈ L hacer 2 calcular G(P) 3 fin para 4 transformar todos los G(P) en una distribución de probabilidad 5 devolver l ∈ LS seleccionado de acuerdo con la distribución de probabilidad Algoritmo 3 selecciónServidor(L) - más recursos libres 1 para todos los P(a, l) ∈ L hacer 2 c(l) ← C(l) − Ul 3 fin para 4 devolver l ∈ LS |c(l) es máximo El segundo método de selección alternativo de un servidor del conjunto de servidores predichos con recursos libres es determinista y se muestra en el algoritmo 3. Se elige el servidor con la mayor cantidad esperada de recursos gratuitos del conjunto L de servidores con recursos gratuitos esperados. En el caso en que todos los agentes predigan que hay más recursos disponibles en un servidor en particular, todos los agentes asignarán la tarea a este servidor, lo que invalidaría las creencias de los agentes. Sin embargo, nuestros experimentos muestran que la información de historial individual y la selección no determinista del predictor activo generalmente evitan esta situación. En caso de que el algoritmo de asignación de recursos no devuelva ningún servidor (Alg. 1, línea 16), no se recomienda asignar un recurso. El agente no asignará la tarea a un recurso. Este caso ocurre solo si es posible predecir la carga de recursos para todos los servidores pero no se esperan recursos libres. Después de que la ejecución del agente haya finalizado, se realiza el proceso de evaluación descrito en el algoritmo 4. Este proceso se divide en tres casos. Primero, la tarea no fue asignada a un recurso. En este caso, el agente no puede decidir si la decisión de no asignar la tarea fue correcta o no. El agente luego elimina los datos históricos antiguos. Esto es necesario para una adaptación exitosa en el futuro. Si el agente no eliminara la información histórica antigua, la predicción siempre pronosticaría que no hay recursos disponibles gratuitos. El agente nunca asignaría una tarea a uno de los recursos en el futuro. La información histórica antigua se elimina del historial de recursos de los agentes utilizando una tasa de descomposición. La tasa de decaimiento es una función de distribución acumulativa que calcula la probabilidad de que un elemento histórico sea eliminado después de haber alcanzado un cierto The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 77 Edad de los datos históricos Tasa de decaimiento 0 1 más antiguo Figura 3: Tasa de decaimiento de la edad de la información histórica. La implementación actual utiliza una función de densidad de probabilidad constante en un dominio configurable. La Figura 3 muestra un ejemplo de una función de distribución acumulativa para la tasa de decaimiento. Dependiendo del entorno, la función de densidad de probabilidad debe ser modificada. Si el número de servidores potenciales por agente es alto, la información histórica debe mantenerse por más tiempo para evitar la exploración de recursos no explorados. Además, un entorno dinámico requiere información más actualizada para realizar predicciones más fiables. El segundo caso en el proceso de evaluación (Alg. 4, línea 5) describe las acciones tomadas después de que un servidor fue visitado por primera vez. El agente crea un nuevo conjunto de predictores para este servidor y registra la información histórica. Todos los predictores para este conjunto son elegidos al azar de un conjunto predefinido. g(p) = l i=0 ri (4) donde: ri = ⎧ ⎨ ⎩ 1 si la decisión i-ésima es correcta 0 si el resultado i-ésimo es desconocido −1 si la decisión i-ésima es incorrecta El caso general (Alg. 4, línea 8) es la evaluación después de que el agente asignó la tarea a un recurso. El agente evalúa todos los predictores del conjunto de predictores para este recurso al predecir la carga del recurso con todos los predictores basados en los datos históricos antiguos. Los predictores que hicieron una predicción correcta, lo que significa que la asignación de recursos fue correcta, recibirán una calificación positiva. Este es el caso en el que el recurso no estaba sobrecargado y se predijeron recursos libres para la ejecución, o el recurso estaba sobrecargado y este predictor habría evitado la asignación. Todos los predictores que predijeron valores que llevarían a decisiones incorrectas recibirán calificaciones negativas. En todos los demás casos, que incluye cuando no era posible hacer una predicción, se otorga una calificación neutral a los pronosticadores. Basándose en estas calificaciones de rendimiento, los niveles de confianza se calculan utilizando la ecuación 4. La confianza para todos los predictores que no pueden predecir con la información histórica actual sobre el servidor se establece en cero para evitar la selección de estos como el nuevo predictor activo. Estos valores se transforman en una distribución de probabilidad. Según esta distribución de probabilidad, el nuevo predictor activo se elige e implementa mediante una selección de ruleta. La Figura 2(b) ilustra las probabilidades de un conjunto de 10 predictores, las cuales han sido calculadas a partir de los niveles de confianza de los predictores. Aunque el predictor 9 tiene la probabilidad de selección más alta, no fue elegido por el proceso de selección de la ruleta como el predictor activo. Esta selección no determinista de predictores evita la invalidación de las creencias de los agentes en caso de que los agentes tengan el mismo conjunto de predictores. La precisión de la predicción, que es el error de la predicción en comparación con el valor observado, no se tiene en cuenta. Supongamos que el predictor activo predice ligeramente por encima de la capacidad de recursos, lo que no conduce a una asignación de recursos. De hecho, habría suficientes recursos disponibles para la ejecución. Una predicción menos precisa que está muy por debajo de la capacidad llevaría a la decisión correcta y, por lo tanto, es preferible. La última acción del algoritmo de evaluación (Alg. 4, línea 22) actualiza el historial con la información más reciente de carga de recursos del servidor. Los datos de la historia más antigua se sobrescriben si ya se han registrado m valores de historia para el servidor. Algoritmo 4 Evaluación de Decisiones 1 si l ∈ LE entonces 2 para todos los P(a, l)|l ∈ LS (a) hacer 3 evaporar datos históricos antiguos 4 fin para 5 sino si P(a, l) = nulo entonces 6 crear (P(a, l)) 7 actualizar H(l) 8 sino 9 para todos los p ∈ P(a, l) hacer 10 pred ← predicción de carga de recursos(p) 11 si (U(l) ≤ C(l) Y pred + U(a, t) ≤ C(l)) O (U(l) > C(l) Y pred + U(a, t) > C(l)) entonces 12 agregar calificación positiva(p) 13 sino si U(l) ≤ C(l) Y pred + U(a, t) > C(l) O U(l) ≤ C(l) Y pred + U(a, t) > C(l) entonces 14 agregar calificación negativa(p) 15 sino 16 agregar calificación neutral(p) 17 fin si 18 fin para 19 calcular todos los g(p); g(p) ← 0, si p no está funcionando 20 transformar todos los g(p) en una distribución de probabilidad 21 pA ← p ∈ P(a, l) es seleccionado de acuerdo a esta distribución de probabilidad 22 actualizar H(l) 23 fin si 4.2 Observaciones y Limitaciones del Enfoque Nuestro mecanismo de predicción utiliza varios tipos de predictores simples en lugar de uno sofisticado. Este método asegura que los agentes puedan competir de manera más efectiva en un entorno cambiante. Diferentes tipos de predictores son adecuados para diferentes situaciones y entornos. Por lo tanto, todos los predictores se evalúan después de cada decisión y se selecciona el predictor activo. Este carácter no determinista del nuevo predictor activo respalda que las creencias de los agentes no serán invalidadas, lo cual ocurre en el caso de que todos los predictores estén tomando la misma decisión. Especialmente si solo hay un recurso compartido disponible y todos los agentes tienen la opción de ir a este recurso compartido o no [19]. Nuestro enfoque de autoorganización es robusto frente a fallos de recursos o agentes en el sistema. Si se unen o se van, el sistema puede autoorganizarse rápidamente y adaptarse a las nuevas condiciones. No hay cuellos de botella clásicos ni un único punto de falla como en los mecanismos centralizados. Las limitaciones son la dependencia de la información de utilización de recursos históricos de otros servidores. Un pronóstico de la utilización de recursos de un servidor remoto solo es posible si un agente tiene una cantidad de información histórica sobre un recurso compartido. Si el número de servidores por agente es muy grande, no hay una manera eficiente de recopilar información histórica sobre los servidores remotos. Este problema ocurre si la cantidad de recursos compartidos proporcionados es de 78. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) es limitada y no es suficiente para todos los consumidores de recursos. En este caso, un agente intentaría aleatoriamente todos los servidores conocidos hasta encontrar uno con recursos disponibles o no haya ninguno. En el peor de los casos, para cuando se prueben todos los servidores, la información histórica de los servidores ya estará desactualizada. EVALUACIÓN EXPERIMENTAL La primera parte de esta sección ofrece un breve resumen de la configuración de nuestro entorno de simulación. En el resto de la sección, se presentan y discuten los resultados de los experimentos. Todos los experimentos se llevan a cabo en un banco de pruebas especial que simula y modela un sistema multiagente. Hemos implementado este banco de pruebas en el lenguaje de programación Java, independiente de cualquier conjunto de herramientas de agente específico. Permite una variedad de experimentos en entornos estables y dinámicos con un número configurable de agentes, tareas y servidores. Se utiliza un modelo basado en eventos para activar todas las actividades en el sistema. Para todas las simulaciones, limitamos el número de datos históricos para cada servidor a 10, el número de calificaciones de rendimiento por predictor a 10 y asignamos 10 predictores a cada conjunto de predictores para cada agente. Todos los predictores son elegidos al azar de un conjunto predefinido arbitrario de 32 predictores del siguiente tipo. Los predictores difieren en diferentes ciclos o tamaños de ventana. - Predictor de n-ciclos: p(n) = yn utiliza el valor de la historia en la posición n-ésima desde el final. - Predictor de n-media: p(n) = 1 n · n i=1 yi utiliza el valor medio de los n últimos valores de la historia. - Predictor de regresión lineal de n: p(n, t) = a·t+b utiliza el valor de regresión lineal de los últimos n valores de la historia, donde a, b se calculan utilizando regresión lineal con ajuste de mínimos cuadrados considerando los últimos n datos de la historia. - Predictor de distribución de n: utiliza un valor aleatorio de la distribución de frecuencia de los n últimos valores de la historia. - Predictor de espejo de n: p(n) = 2 · H − yn utiliza la imagen de espejo alrededor de la media de todos los valores de la historia del n-ésimo valor de la historia. La eficiencia de nuestra propuesta de asignación de recursos autoorganizada se evalúa mediante el desarrollo de carga de recursos de cada servidor durante la simulación, así como el desarrollo acumulado de carga de recursos totales sobre todos los recursos compartidos. Las cargas de recursos para cada servidor se calculan utilizando la ecuación 1 como la suma del consumo de recursos de todos los agentes actualmente ejecutados en este servidor. La carga total de recursos del sistema se calcula como la suma de la carga de recursos de todos los recursos. El algoritmo de asignación de recursos autoorganizado tiene elementos aleatorios. Por lo tanto, los resultados presentados muestran valores medios y desviación estándar calculados sobre 100 experimentos repetidos. 5.1 Configuración Experimental Los siguientes parámetros tienen un impacto en el proceso de asignación de recursos. Damos una visión general de los parámetros y una breve descripción. - Agentes: El número de agentes involucrados en la asignación de recursos. Este número varía en los experimentos entre 650 y 750 dependiendo de la cantidad total de recursos del sistema disponibles. - Consumo de recursos: Cada tarea consume recursos del servidor para su ejecución. El consumo de recursos se asigna aleatoriamente a cada tarea antes de su asignación de un intervalo. El consumo de recursos se especifica en unidades de recursos que corresponden a métricas del mundo real como la memoria o los ciclos del procesador. - Servidor de inicio de agentes: Todos los agentes se encuentran en un servidor de inicio de agentes. Los recursos de esos servidores no son considerados en nuestra simulación y no afectan el rendimiento de la asignación de recursos. - Recursos del servidor: Los experimentos utilizan servidores con diferentes cantidades de recursos compartidos disponibles. El primer experimento se lleva a cabo en un entorno de servidor estático que proporciona la misma cantidad de recursos compartidos, mientras que el otro experimento varía los recursos de servidor disponibles durante la simulación. La cantidad total de recursos permanece constante en ambos experimentos. - Tiempo de ejecución: El tiempo de ejecución de una tarea para la ejecución, independiente de la plataforma de ejecución. Por esta vez, la tarea consume la cantidad asignada de recursos del servidor. Este parámetro se asigna aleatoriamente antes de la ejecución. - Tiempo de creación de la tarea: El tiempo antes de que se cree la siguiente tarea después de la finalización exitosa o fallida. Este parámetro influye en la antigüedad de la información histórica sobre los recursos y tiene una gran influencia en la duración de la fase inicial de adaptación. Este parámetro se asigna aleatoriamente después de que se haya completado la tarea. 5.2 Resultados Experimentales Esta sección muestra los resultados de experimentos seleccionados que demuestran el rendimiento de nuestro mecanismo propuesto de asignación de recursos. El primer experimento muestra el rendimiento en un entorno estable donde un número de agentes asignan tareas a servidores que proporcionan una cantidad constante de recursos. El segundo experimento se llevó a cabo en un entorno de servidor dinámico con un número constante de agentes. El primer experimento muestra nuestro modelo en un entorno estable de 3 servidores que proporcionan un total de 7000 unidades de recursos. La capacidad de recursos de cada servidor permanece constante durante el experimento. Utilizamos 650 agentes con los parámetros del tiempo de ejecución entre 1 y 15 unidades de tiempo y un tiempo de creación de tarea en el intervalo [0 − 30] unidades de tiempo. El consumo de recursos de las tareas se asigna aleatoriamente en el intervalo de [1 - 45] unidades de recurso. La Figura 4 muestra los resultados de 100 repeticiones de este experimento. La Figura 4(a) muestra que la cantidad total de recursos proporcionados es mayor que la demanda de recursos en promedio. Al comienzo del experimento, todos los agentes asignan sus tareas aleatoriamente en uno de los servidores disponibles y exploran las capacidades y utilizaciones de recursos disponibles durante aproximadamente 150 unidades de tiempo. Esta fase inicial de exploración muestra que la carga promedio de recursos de cada servidor tiene un nivel similar. Esto provoca una situación de sobrecarga en el servidor 1 debido a su baja capacidad de recursos compartidos, y una gran cantidad de recursos libres en el servidor 2. Los agentes que asignaron tareas al servidor 1 detectan la situación de sobrecarga y exploran de forma aleatoria otros servidores disponibles. Encuentran recursos gratuitos en el servidor 2. Después del período de aprendizaje, los agentes se han autoorganizado en este entorno estable y han encontrado una solución estable para la asignación de The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Tiempo 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (b) Carga de recursos servidor 0 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (c) Carga de recursos servidor 1 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 2 Figura 4: Resultados del experimento 1 en un entorno estático de 3 servidores promediados sobre 100 repeticiones. todas las tareas. La desviación estándar de las cargas de recursos es pequeña para cada servidor, lo que indica que nuestro enfoque distribuido encuentra soluciones estables en casi cada ejecución. Este experimento utilizó el algoritmo 2 para la selección del servidor activo. También realizamos el mismo experimento con el mecanismo de selección de recursos más libre para seleccionar el servidor activo. La asignación de recursos para cada servidor es similar. La cantidad absoluta de recursos gratuitos por servidor es casi la misma. El Experimento 2 se llevó a cabo en un entorno dinámico de 3 servidores con un total de 750 agentes. La cantidad de recursos del servidor 0 y del servidor 1 cambia periódicamente, mientras que la cantidad total de recursos disponibles permanece constante. El servidor 0 tiene una capacidad inicial de 1000 unidades, mientras que el servidor 1 comienza con una capacidad de 4000 unidades. El cambio en la capacidad comienza después de 150 unidades de tiempo, que es aproximadamente al final de la fase de aprendizaje. La figura 5 (b, c, d) muestra el comportamiento de nuestra asignación de recursos autoorganizada en este entorno. Todos los agentes utilizan el mecanismo de selección de recursos más libres determinístico para seleccionar el servidor activo. Se puede observar en la Fig. 5(b) y 5(c) que el número de recursos asignados al servidor 0 y al servidor 1 cambia periódicamente con la cantidad de recursos proporcionados. Esto demuestra que los agentes pueden percibir los recursos disponibles en este entorno dinámico y son capaces de adaptarse a esos cambios. El desarrollo de la carga de recursos del servidor 2 (ver Fig. 5(d)) muestra un cambio periódico porque algunos agentes intentan asignar tareas a este servidor en caso de que su servidor previamente preferido reduzca la cantidad de recursos compartidos. La carga total de recursos de todos los recursos compartidos es constante a lo largo de los experimentos, lo que indica que todos los agentes asignan sus tareas a uno de los recursos compartidos. Fig. 4(a)). 6.\nFig. 4(a)). 6. CONCLUSIONES Y TRABAJO FUTURO En este artículo se presentó una técnica de asignación de recursos distribuida autoorganizativa para sistemas multiagente. Permitimos a los agentes seleccionar la plataforma de ejecución para sus tareas ellos mismos antes de cada ejecución en tiempo de ejecución. En nuestro enfoque, los agentes compiten por una asignación en uno de los 0 500 1,000 1,500 2,000 Tiempo 0 2,500 5,000 7,500 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (b) Carga de recursos servidor 1 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (c) Carga de recursos servidor 2 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 3 Figura 5: Resultados del experimento 2 en un entorno de servidor dinámico promediado en 100 repeticiones. recurso compartido disponible. Los agentes perciben su entorno de servidor y adaptan sus acciones para competir de manera más eficiente en el nuevo entorno creado. Este proceso es adaptativo y tiene un fuerte retroalimentación, ya que las decisiones de asignación influencian indirectamente las decisiones de otros agentes. La asignación de recursos es un efecto puramente emergente. Nuestro mecanismo demuestra que la asignación de recursos puede ser realizada mediante la competencia efectiva de agentes individuales y autónomos. Ni necesitan coordinación o información de una autoridad superior ni se requiere una comunicación directa adicional entre agentes. Este mecanismo fue inspirado por el razonamiento inductivo y los principios de racionalidad limitada, lo que permite a los agentes adaptar sus estrategias para competir de manera efectiva en un entorno dinámico. En caso de que un servidor no esté disponible, los agentes pueden adaptarse rápidamente a esta nueva situación explorando nuevos recursos o permaneciendo en el servidor local si no es posible una asignación. Especialmente en entornos dinámicos y escalables como los sistemas de rejilla, se requiere un mecanismo robusto y distribuido para la asignación de recursos. Nuestro enfoque de asignación de recursos autoorganizados fue evaluado con una serie de experimentos de simulación en un entorno dinámico de agentes y recursos del servidor. Los resultados presentados para este nuevo enfoque de optimización de migración estratégica son muy prometedores y justifican una mayor investigación en un entorno real de sistema multiagente. Es una política distribuida, escalable y fácil de entender para la regulación de la oferta y la demanda de recursos. Todo el control se implementa en los agentes. Un mecanismo de decisión simple basado en diferentes creencias del agente crea un comportamiento emergente que conduce a una asignación efectiva de recursos. Este enfoque puede ser fácilmente ampliado o respaldado por mecanismos de equilibrio/cola de recursos proporcionados por los recursos. Nuestro enfoque se adapta a los cambios en el entorno pero no es evolutivo. No hay descubrimiento de nuevas estrategias por parte de los agentes. El conjunto de predictores permanece igual a lo largo de toda la vida. De hecho, creemos que esto podría mejorar aún más el comportamiento de los sistemas a lo largo de un período prolongado y podría ser el 80 The Sixth Intl. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) investigará en el futuro. La evolución sería muy lenta y selectiva y no influiría en el comportamiento del sistema en un período a corto plazo que está cubierto por nuestros resultados experimentales. En un futuro cercano investigaremos si es posible una adaptación automática de la tasa de decaimiento de la información histórica en nuestro algoritmo y si puede mejorar el rendimiento de la asignación de recursos. La tasa de descomposición está actualmente predefinida y debe ser alterada manualmente dependiendo del entorno. Un gran número de recursos compartidos requiere información histórica más antigua para evitar una exploración de recursos demasiado frecuente. Por el contrario, un entorno dinámico con capacidades variables requiere información más actualizada para realizar predicciones más fiables. Somos conscientes de la larga fase de aprendizaje en entornos con un gran número de recursos compartidos conocidos por cada agente. En caso de que los agentes soliciten más recursos de los que los servidores compartidos proporcionan, todos los agentes explorarán aleatoriamente todos los servidores conocidos. Este proceso de adquirir información de carga de recursos sobre todos los servidores puede llevar mucho tiempo en el caso de que no se proporcionen recursos compartidos suficientes para todas las tareas. En el peor de los casos, para cuando se explore todos los servidores, la información histórica de algunos servidores podría estar desactualizada y la exploración comenzará de nuevo. En esta situación, es difícil para un agente recopilar eficientemente información histórica sobre todos los servidores remotos. Este tema necesita más investigación en el futuro. REFERENCIAS [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel y J. Shalf. Herramientas de Cactus para Aplicaciones de Red. En Cluster Computing, volumen 4, páginas 179-188, Hingham, MA, EE. UU., 2001. Kluwer Academic Publishers. [2] W. B. Arthur.\nEditorial Kluwer Academic. [2] W. B. Arthur. Razonamiento inductivo y racionalidad limitada. American Economic Review (Papers and Proceedings), 84(2):406-411, mayo de 1994. [3] T. Bourke. Balanceo de carga del servidor. OReilly Media, 1ª edición, agosto de 2001. [4] R. Buyya. Gestión y programación de recursos distribuidos basada en economía para la computación en malla. Tesis doctoral, Universidad de Monash, Melbourne, Australia, mayo de 2002. [5] R. Buyya, D. Abramson, J. Giddy y H. Stockinger. Modelos económicos para la gestión de recursos y programación en la computación en malla. Número especial sobre Entornos de Computación en Red de la Revista Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin y D. DiNucci. Modelos arquitectónicos para la gestión de recursos en la red. En Actas del Primer Taller Internacional sobre Computación en Red, páginas 18-35. Springer LNCS, 2000. [7] T. L. Casavant y J. G. Kuhl. Una taxonomía de programación en sistemas informáticos distribuidos de propósito general. IEEE Transactions on Software Engineering, 14(2):141-154, febrero de 1988. [8] D. Challet y Y. Zhang. Aparición de la cooperación y la organización en un juego evolutivo. Physica A, 407(246), 1997. [9] K.-P. Chow y Y.-K. Kwok. En equilibrio de carga para computación multiagente distribuida. En IEEE Transactions on Parallel and Distributed Systems, volumen 13, páginas 787-801. IEEE, agosto de 2002. [10] S. H. Clearwater. Control basado en el mercado. Un paradigma para la asignación distribuida de recursos. World Scientific, Singapur, 1996. [11] C. Fl¨us. Planificación de capacidad de sistemas de agentes móviles para el diseño eficiente de aplicaciones de intranet. Tesis doctoral, Universidad de Duisburg-Essen (Alemania), febrero de 2005. [12] I. Foster y C. Kesselman. Globus: Un conjunto de herramientas de infraestructura de metacomputación. Revista Internacional de Aplicaciones de Supercomputación, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I. Foster, M. Livny y S. Tuecke. Condor-G: Un agente de gestión de computación para redes de múltiples instituciones. Computación en clúster, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar y K. Lerman. Juegos de asignación de recursos con capacidades de recursos cambiantes. En Actas de la segunda conferencia internacional conjunta sobre agentes autónomos y sistemas multiagente, páginas 145 - 152, Melbourne, Australia, 2003. ACM Press, Nueva York, NY, EE. UU. [15] C. Georgousopoulos y O. F. Rana. Combinando enfoques basados en el estado y en el modelo para el equilibrio de carga de agentes móviles. En SAC 03: Actas del simposio de computación aplicada de ACM de 2003, páginas 878-885, Nueva York, NY, EE. UU., 2003. ACM Press. [16] G. Mainland, D. C. Parkes y M. Welsh. Asignación descentralizada y adaptativa de recursos para redes de sensores. En Actas del 2º Simposio USENIX sobre Diseño e Implementación de Sistemas de Red (NSDI 05), mayo de 2005. [17] S. Manvi, M. Birje y B. Prasad. Un modelo de asignación de recursos basado en agentes para rejillas computacionales. Sistemas Multiagente y de Red - Una Revista Internacional, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham y M. Tennenholtz. Equilibrio de carga adaptativo: Un estudio en el aprendizaje multiagente. En Journal of Artificial Intelligence Research, volumen 2, páginas 475-500, 1995. [19] T. Schlegel, P. Braun y R. Kowalczyk. Hacia Agentes Móviles Autónomos con Comportamiento de Migración Emergente. En Actas de la Quinta Conferencia Internacional Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 2006), Hakodate (Japón), páginas 585-592. ACM Press, mayo de 2006. [20] W3C. Actividad de servicios web, 2002. http://www.w3.org/2002/ws - última visita 23.10.2006. [21] M. M. Waldrop. Complejidad: La ciencia emergente en el límite entre el orden y el caos. Simon & Schuster, 1ª edición, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik y T. Bryan. Analizando estrategias de asignación de recursos basadas en el mercado para la red computacional. En la Revista Internacional de Aplicaciones de Computación de Alto Rendimiento, volumen 15, páginas 258-281. Sage Science Press, 2001. \n\nEditorial Sage Science, 2001. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 81 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "server network": {
            "translated_key": "red de servidores",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Towards Self-organising Agent-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
                "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
                "In this paper we propose a distributed algorithm that solves the resource allocation problem in distributed multiagent systems.",
                "Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer.",
                "The resource allocation in the system is a purely emergent effect.",
                "We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
                "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
                "In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
                "Hence, distributed solutions of the resource allocation problem are required.",
                "Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation.",
                "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
                "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
                "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].",
                "In this paper we propose a distributed solution of the resource allocation problem based on self-organisation of the resource consumers in a system with limited resources.",
                "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
                "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
                "All control needed for our algorithm is distributed among the agents in the system.",
                "They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
                "The only information available to all agents are resource load and allocation success information from past resource allocations.",
                "Additional resource load information about servers is not disseminated.",
                "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
                "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
                "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
                "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-agent system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11].",
                "Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.",
                "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
                "Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.",
                "Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.",
                "Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results.",
                "A summary, conclusion and outlook to future work finish this paper. 2.",
                "RELATED WORK Resource allocation is an important problem in the area of computer science.",
                "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
                "Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
                "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
                "The broker usually has full knowledge about all system resources.",
                "All incoming requests are directed to the broker who is the solely decision maker.",
                "In those approaches, the resource consumer cannot influence the allocation decision process.",
                "Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
                "This mechanism works best in a homogeneous system.",
                "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
                "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation.",
                "This technique can only provide a good supplement for distributed resource allocation mechanisms.",
                "Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
                "Those coordinators usually need to have global knowledge on the state of all system resources.",
                "An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
                "The value of distributed solutions for the resource allocation problem has been recognised by research [10].",
                "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
                "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
                "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
                "A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10].",
                "Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
                "The Agent based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
                "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
                "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
                "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
                "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
                "There has been considerable work on decentralised resource allocation techniques using game theory published over recent years.",
                "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
                "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
                "It is an ill-defined decision problem that assumes and models inductive reasoning.",
                "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
                "A variation of the El Farol problem is the so called minority game [8].",
                "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
                "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
                "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent.",
                "Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18].",
                "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
                "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
                "A resource allocation approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
                "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
                "A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks.",
                "Agents make their decisions themselves based on forecasts of the server utilisation.",
                "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
                "MODEL DESCRIPTION We model a distributed multi-agent system as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "Each agent has a number of tasks Ti that needs to be executed during its lifetime.",
                "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
                "Resources for the execution of tasks are provided by each server li.",
                "The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources.",
                "We write LS (ai) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai.",
                "Resources in the system can be used by all agents for the execution of tasks.",
                "The amount of provided resources C(li, t) of each server can vary over time.",
                "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
                "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
                "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
                "In this case, some agents must wait with their allocation request until free resources are expected.",
                "The multi-agent system model used for our simulations is illustrated in Fig. 1. 4.",
                "SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each agent.",
                "The only information required in order to make a resource allocation decision for a task is the server utilisation from completed task allocations at those servers.",
                "There is no additional information dissemination about server resource utilisation or information about free resources.",
                "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
                "Additionally, we do not have any central controlling authority.",
                "All behaviour that leads to the resource allocation is created by the effective competition of the agents for shared resources and is a purely emergent effect.",
                "The agents in our multi-agent system compete for resources or a set of resources to execute tasks.",
                "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
                "Our approach is based on different agent beliefs, represented by predictors and different information about their environment.",
                "Agents prefer a task allocation at a server with free resources.",
                "However, there is no way to be sure of the amount of free server resources in advance.",
                "All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution.",
                "There is no communication between agents.",
                "Actions taken by agents influence the actions of other agents indirectly.",
                "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
                "It is derived from the human way of deciding ill-defined problems.",
                "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
                "Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation.",
                "All necessary control is integrated in the agents themselves.",
                "There is no higher controlling authority, management layer for decision support or information distribution.",
                "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
                "To do so, agents use historical information from past task allocations at those resources.",
                "Based on the forecasted resource utilisation, the agent will make its resource allocation decision.",
                "After the task has finished its execution and returned the results back to the agent, the predictor performances are evaluated and history information is updated.",
                "Algorithm 1 shows the resource allocation algorithm for each agent.",
                "The agent first predicts the next steps resource load for each server with historical information (line 3-7).",
                "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
                "The agent then evaluates if any free shared resources for the task allocation are expected.",
                "In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
                "This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available.",
                "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
                "One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load.",
                "Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
                "The most recent history item is h0.",
                "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
                "Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
                "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
                "As the result, the server would have a large amount of free resources.",
                "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
                "An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a).",
                "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
                "This may change in the future as the resource load has significantly increased recently.",
                "In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation.",
                "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
                "Algorithm 1 Resource Allocation algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
                "A probability distribution is calculated from the confidence levels of the resource predictions.",
                "The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
                "The server with the highest confidence level has the biggest chance to be selected as the active server.",
                "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
                "The server with most expected free resources from the set L of server with expected free resources is chosen.",
                "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
                "However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation.",
                "In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
                "The agent will not allocate the task at a resource.",
                "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
                "After the agent execution has finished, the evaluation process described in algorithm 4 is preformed.",
                "This process is divided into three cases.",
                "First, the task was not allocated at a resource.",
                "In this case, the agent cannot decide if the decision not to allocate the task was correct or not.",
                "The agent then removes old historical data.",
                "This is necessary for a successful adaptation in the future.",
                "If the agent would not delete old historical information, the prediction would always forecast that no free resources are available.",
                "The agent would never allocate a task at one of the resources in the future.",
                "Old historical information is removed from the agents resource history using a decay rate.",
                "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
                "The current implementation uses a constant probability density function in a configurable domain.",
                "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
                "Depending on the environment, the probability density function must be altered.",
                "If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
                "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
                "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
                "The agent creates a new predictor set for this server and records the historical information.",
                "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource.",
                "The agent evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data.",
                "Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating.",
                "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation.",
                "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
                "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
                "Based on these performance ratings, the confidence levels are calculated using equation 4.",
                "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor.",
                "These values are transformed into a probability distribution.",
                "According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection.",
                "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels.",
                "Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor.",
                "This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
                "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
                "Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources.",
                "In fact, enough resources for the execution would be available.",
                "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
                "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
                "The oldest history data is overwritten if already m history values are recorded for the server.",
                "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor.",
                "This method assures that agents can compete more effectively in a changing environment.",
                "Different types of predictors are suitable for different situations and environments.",
                "Therefore, all predictors are being evaluated after each decision and the active predictor is selected.",
                "This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
                "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
                "Our self-organising approach is robust against failures of resources or agents in the system.",
                "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
                "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
                "The limitations are the reliance on historical resource utilisation information about other servers.",
                "A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource.",
                "If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers.",
                "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers.",
                "In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one.",
                "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
                "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
                "In the rest of the section, results of the experiments are presented and discussed.",
                "All experiments are conducted in a special testbed that simulates and models a multi-agent system.",
                "We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit.",
                "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
                "An event-driven model is used to trigger all activities in the system.",
                "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each agent.",
                "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
                "Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
                "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
                "The total resource load of the system is calculated as the sum of the resources load of all resources.",
                "The self-organising resource allocation algorithm has random elements.",
                "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process.",
                "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation.",
                "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
                "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
                "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server.",
                "The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources.",
                "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
                "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
                "For this time the task consumes the assigned amount of server resources.",
                "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
                "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
                "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism.",
                "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
                "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
                "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
                "The resource capacity of each server remains constant over the experiment.",
                "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
                "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
                "Figure 4 shows the results from 100 repetitions of this experiment.",
                "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
                "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
                "This initial exploration phase shows that the average resource load of each server has a similar level.",
                "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
                "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
                "They find free resources at server 2.",
                "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
                "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
                "This experiment used algorithm 2 for the selection of the active server.",
                "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
                "The resource allocation for each server is similar.",
                "The absolute amount of free resources per server is almost the same.",
                "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
                "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
                "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
                "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
                "Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment.",
                "All agents use the deterministic most free resources selection mechanism to select the active server.",
                "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
                "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
                "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
                "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
                "Fig. 4(a)). 6.",
                "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-agent systems was presented.",
                "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
                "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
                "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
                "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
                "The resource allocation is a purely emergent effect.",
                "Our mechanism demonstrates that resource allocation can be done by the effective competition of individual and autonomous agents.",
                "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
                "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
                "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
                "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required.",
                "Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
                "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-agent system environment.",
                "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
                "All control is implemented in the agents.",
                "A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective resource allocation.",
                "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
                "Our approach adapts to changes in the environment but it is not evolutionary.",
                "There is no discovery of new strategies by the agents.",
                "The set of predictors stays the same over the whole life.",
                "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future.",
                "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
                "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance.",
                "The decay rate is currently predefined and must be altered manually depending on the environment.",
                "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
                "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
                "We are aware of the long learning phase in environments with a large number of shared resources known by each agent.",
                "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
                "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
                "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
                "In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers.",
                "This issue needs more investigation in the future. 7.",
                "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
                "Cactus Tools for Grid Applications.",
                "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
                "Kluwer Academic Publishers. [2] W. B. Arthur.",
                "Inductive Reasoning and Bounded Rationality.",
                "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
                "Server Load Balancing.",
                "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
                "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
                "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
                "Economic Models for Resource Management and Scheduling in Grid Computing.",
                "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
                "Architectural Models for Resource Management in the Grid.",
                "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
                "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
                "A taxonomy of scheduling in general-purpose distributed computing systems.",
                "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
                "Emergence of Cooperation and Organization in an Evolutionary Game.",
                "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
                "On load balancing for distributed multiagent computing.",
                "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
                "IEEE, August 2002. [10] S. H. Clearwater.",
                "Market-based control.",
                "A Paradigm for Distributed Resource Allocation.",
                "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
                "Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications.",
                "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
                "Foster and C. Kesselman.",
                "Globus: A Metacomputing Infrastructure Toolkit.",
                "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
                "Foster, M. Livny, and S. Tuecke.",
                "Condor-G: A Computation Management Agent for Multi-Institutional Grids.",
                "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
                "Resource allocation games with changing resource capacities.",
                "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
                "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
                "Combining state and model-based approaches for mobile agent load balancing.",
                "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
                "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
                "Decentralized Adaptive Resource Allocation for Sensor Networks.",
                "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
                "An Agent-based Resource Allocation Model for Computational Grids.",
                "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
                "Adaptive Load Balancing: A Study in Multi-Agent Learning.",
                "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
                "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
                "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
                "ACM Press, May 2006. [20] W3C.",
                "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
                "Complexity: The Emerging Science at the Edge of Order and Chaos.",
                "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
                "Analyzing Market-Based Resource Allocation Strategies for the Computational Grid.",
                "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
                "Sage Science Press, 2001.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "server utilisation": {
            "translated_key": "utilización del servidor",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Towards Self-organising Agent-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
                "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
                "In this paper we propose a distributed algorithm that solves the resource allocation problem in distributed multiagent systems.",
                "Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer.",
                "The resource allocation in the system is a purely emergent effect.",
                "We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
                "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
                "In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
                "Hence, distributed solutions of the resource allocation problem are required.",
                "Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation.",
                "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
                "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
                "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].",
                "In this paper we propose a distributed solution of the resource allocation problem based on self-organisation of the resource consumers in a system with limited resources.",
                "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
                "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
                "All control needed for our algorithm is distributed among the agents in the system.",
                "They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
                "The only information available to all agents are resource load and allocation success information from past resource allocations.",
                "Additional resource load information about servers is not disseminated.",
                "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
                "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
                "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
                "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-agent system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11].",
                "Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.",
                "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
                "Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.",
                "Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.",
                "Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results.",
                "A summary, conclusion and outlook to future work finish this paper. 2.",
                "RELATED WORK Resource allocation is an important problem in the area of computer science.",
                "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
                "Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
                "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
                "The broker usually has full knowledge about all system resources.",
                "All incoming requests are directed to the broker who is the solely decision maker.",
                "In those approaches, the resource consumer cannot influence the allocation decision process.",
                "Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
                "This mechanism works best in a homogeneous system.",
                "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
                "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation.",
                "This technique can only provide a good supplement for distributed resource allocation mechanisms.",
                "Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
                "Those coordinators usually need to have global knowledge on the state of all system resources.",
                "An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
                "The value of distributed solutions for the resource allocation problem has been recognised by research [10].",
                "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
                "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
                "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
                "A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10].",
                "Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
                "The Agent based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
                "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
                "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
                "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
                "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
                "There has been considerable work on decentralised resource allocation techniques using game theory published over recent years.",
                "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
                "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
                "It is an ill-defined decision problem that assumes and models inductive reasoning.",
                "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
                "A variation of the El Farol problem is the so called minority game [8].",
                "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
                "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
                "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent.",
                "Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18].",
                "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
                "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
                "A resource allocation approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
                "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
                "A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks.",
                "Agents make their decisions themselves based on forecasts of the <br>server utilisation</br>.",
                "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
                "MODEL DESCRIPTION We model a distributed multi-agent system as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "Each agent has a number of tasks Ti that needs to be executed during its lifetime.",
                "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
                "Resources for the execution of tasks are provided by each server li.",
                "The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources.",
                "We write LS (ai) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai.",
                "Resources in the system can be used by all agents for the execution of tasks.",
                "The amount of provided resources C(li, t) of each server can vary over time.",
                "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
                "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
                "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
                "In this case, some agents must wait with their allocation request until free resources are expected.",
                "The multi-agent system model used for our simulations is illustrated in Fig. 1. 4.",
                "SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each agent.",
                "The only information required in order to make a resource allocation decision for a task is the <br>server utilisation</br> from completed task allocations at those servers.",
                "There is no additional information dissemination about server resource utilisation or information about free resources.",
                "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
                "Additionally, we do not have any central controlling authority.",
                "All behaviour that leads to the resource allocation is created by the effective competition of the agents for shared resources and is a purely emergent effect.",
                "The agents in our multi-agent system compete for resources or a set of resources to execute tasks.",
                "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
                "Our approach is based on different agent beliefs, represented by predictors and different information about their environment.",
                "Agents prefer a task allocation at a server with free resources.",
                "However, there is no way to be sure of the amount of free server resources in advance.",
                "All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution.",
                "There is no communication between agents.",
                "Actions taken by agents influence the actions of other agents indirectly.",
                "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
                "It is derived from the human way of deciding ill-defined problems.",
                "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
                "Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation.",
                "All necessary control is integrated in the agents themselves.",
                "There is no higher controlling authority, management layer for decision support or information distribution.",
                "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
                "To do so, agents use historical information from past task allocations at those resources.",
                "Based on the forecasted resource utilisation, the agent will make its resource allocation decision.",
                "After the task has finished its execution and returned the results back to the agent, the predictor performances are evaluated and history information is updated.",
                "Algorithm 1 shows the resource allocation algorithm for each agent.",
                "The agent first predicts the next steps resource load for each server with historical information (line 3-7).",
                "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
                "The agent then evaluates if any free shared resources for the task allocation are expected.",
                "In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
                "This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available.",
                "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
                "One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load.",
                "Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
                "The most recent history item is h0.",
                "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
                "Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
                "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
                "As the result, the server would have a large amount of free resources.",
                "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
                "An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a).",
                "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
                "This may change in the future as the resource load has significantly increased recently.",
                "In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation.",
                "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
                "Algorithm 1 Resource Allocation algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
                "A probability distribution is calculated from the confidence levels of the resource predictions.",
                "The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
                "The server with the highest confidence level has the biggest chance to be selected as the active server.",
                "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
                "The server with most expected free resources from the set L of server with expected free resources is chosen.",
                "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
                "However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation.",
                "In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
                "The agent will not allocate the task at a resource.",
                "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
                "After the agent execution has finished, the evaluation process described in algorithm 4 is preformed.",
                "This process is divided into three cases.",
                "First, the task was not allocated at a resource.",
                "In this case, the agent cannot decide if the decision not to allocate the task was correct or not.",
                "The agent then removes old historical data.",
                "This is necessary for a successful adaptation in the future.",
                "If the agent would not delete old historical information, the prediction would always forecast that no free resources are available.",
                "The agent would never allocate a task at one of the resources in the future.",
                "Old historical information is removed from the agents resource history using a decay rate.",
                "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
                "The current implementation uses a constant probability density function in a configurable domain.",
                "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
                "Depending on the environment, the probability density function must be altered.",
                "If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
                "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
                "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
                "The agent creates a new predictor set for this server and records the historical information.",
                "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource.",
                "The agent evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data.",
                "Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating.",
                "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation.",
                "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
                "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
                "Based on these performance ratings, the confidence levels are calculated using equation 4.",
                "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor.",
                "These values are transformed into a probability distribution.",
                "According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection.",
                "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels.",
                "Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor.",
                "This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
                "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
                "Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources.",
                "In fact, enough resources for the execution would be available.",
                "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
                "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
                "The oldest history data is overwritten if already m history values are recorded for the server.",
                "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor.",
                "This method assures that agents can compete more effectively in a changing environment.",
                "Different types of predictors are suitable for different situations and environments.",
                "Therefore, all predictors are being evaluated after each decision and the active predictor is selected.",
                "This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
                "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
                "Our self-organising approach is robust against failures of resources or agents in the system.",
                "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
                "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
                "The limitations are the reliance on historical resource utilisation information about other servers.",
                "A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource.",
                "If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers.",
                "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers.",
                "In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one.",
                "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
                "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
                "In the rest of the section, results of the experiments are presented and discussed.",
                "All experiments are conducted in a special testbed that simulates and models a multi-agent system.",
                "We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit.",
                "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
                "An event-driven model is used to trigger all activities in the system.",
                "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each agent.",
                "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
                "Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
                "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
                "The total resource load of the system is calculated as the sum of the resources load of all resources.",
                "The self-organising resource allocation algorithm has random elements.",
                "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process.",
                "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation.",
                "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
                "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
                "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server.",
                "The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources.",
                "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
                "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
                "For this time the task consumes the assigned amount of server resources.",
                "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
                "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
                "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism.",
                "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
                "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
                "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
                "The resource capacity of each server remains constant over the experiment.",
                "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
                "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
                "Figure 4 shows the results from 100 repetitions of this experiment.",
                "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
                "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
                "This initial exploration phase shows that the average resource load of each server has a similar level.",
                "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
                "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
                "They find free resources at server 2.",
                "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
                "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
                "This experiment used algorithm 2 for the selection of the active server.",
                "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
                "The resource allocation for each server is similar.",
                "The absolute amount of free resources per server is almost the same.",
                "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
                "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
                "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
                "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
                "Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment.",
                "All agents use the deterministic most free resources selection mechanism to select the active server.",
                "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
                "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
                "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
                "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
                "Fig. 4(a)). 6.",
                "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-agent systems was presented.",
                "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
                "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
                "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
                "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
                "The resource allocation is a purely emergent effect.",
                "Our mechanism demonstrates that resource allocation can be done by the effective competition of individual and autonomous agents.",
                "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
                "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
                "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
                "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required.",
                "Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
                "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-agent system environment.",
                "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
                "All control is implemented in the agents.",
                "A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective resource allocation.",
                "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
                "Our approach adapts to changes in the environment but it is not evolutionary.",
                "There is no discovery of new strategies by the agents.",
                "The set of predictors stays the same over the whole life.",
                "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future.",
                "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
                "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance.",
                "The decay rate is currently predefined and must be altered manually depending on the environment.",
                "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
                "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
                "We are aware of the long learning phase in environments with a large number of shared resources known by each agent.",
                "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
                "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
                "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
                "In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers.",
                "This issue needs more investigation in the future. 7.",
                "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
                "Cactus Tools for Grid Applications.",
                "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
                "Kluwer Academic Publishers. [2] W. B. Arthur.",
                "Inductive Reasoning and Bounded Rationality.",
                "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
                "Server Load Balancing.",
                "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
                "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
                "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
                "Economic Models for Resource Management and Scheduling in Grid Computing.",
                "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
                "Architectural Models for Resource Management in the Grid.",
                "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
                "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
                "A taxonomy of scheduling in general-purpose distributed computing systems.",
                "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
                "Emergence of Cooperation and Organization in an Evolutionary Game.",
                "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
                "On load balancing for distributed multiagent computing.",
                "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
                "IEEE, August 2002. [10] S. H. Clearwater.",
                "Market-based control.",
                "A Paradigm for Distributed Resource Allocation.",
                "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
                "Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications.",
                "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
                "Foster and C. Kesselman.",
                "Globus: A Metacomputing Infrastructure Toolkit.",
                "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
                "Foster, M. Livny, and S. Tuecke.",
                "Condor-G: A Computation Management Agent for Multi-Institutional Grids.",
                "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
                "Resource allocation games with changing resource capacities.",
                "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
                "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
                "Combining state and model-based approaches for mobile agent load balancing.",
                "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
                "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
                "Decentralized Adaptive Resource Allocation for Sensor Networks.",
                "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
                "An Agent-based Resource Allocation Model for Computational Grids.",
                "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
                "Adaptive Load Balancing: A Study in Multi-Agent Learning.",
                "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
                "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
                "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
                "ACM Press, May 2006. [20] W3C.",
                "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
                "Complexity: The Emerging Science at the Edge of Order and Chaos.",
                "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
                "Analyzing Market-Based Resource Allocation Strategies for the Computational Grid.",
                "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
                "Sage Science Press, 2001.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81"
            ],
            "original_annotated_samples": [
                "Agents make their decisions themselves based on forecasts of the <br>server utilisation</br>.",
                "The only information required in order to make a resource allocation decision for a task is the <br>server utilisation</br> from completed task allocations at those servers."
            ],
            "translated_annotated_samples": [
                "Los agentes toman sus decisiones por sí mismos basándose en pronósticos de la <br>utilización del servidor</br>.",
                "La única información necesaria para tomar una decisión de asignación de recursos para una tarea es la <br>utilización del servidor</br> de las asignaciones de tareas completadas en esos servidores."
            ],
            "translated_text": "Hacia la asignación de recursos basada en agentes autoorganizados en un entorno de múltiples servidores. Tino Schlegel1, Ryszard Kowalczyk2. Universidad de Tecnología Swinburne, Facultad de Tecnologías de la Información y la Comunicación, Hawthorn, 3122 Victoria, Australia {tschlegel1, rkowalczyk2}@ict.swin.edu.au. RESUMEN Las aplicaciones distribuidas requieren técnicas distribuidas para una asignación eficiente de recursos. Estas técnicas deben tener en cuenta la heterogeneidad y la posible falta de fiabilidad de los recursos y consumidores de recursos en entornos distribuidos. En este artículo proponemos un algoritmo distribuido que resuelve el problema de asignación de recursos en sistemas multiagentes distribuidos. Nuestra solución se basa en la autoorganización de agentes, la cual no requiere ningún facilitador o capa de gestión. La asignación de recursos en el sistema es un efecto puramente emergente. Presentamos los resultados del mecanismo de asignación de recursos propuesto en el entorno simulado de servidores múltiples estáticos y dinámicos. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Coherencia y coordinación Términos Generales Algoritmos 1. INTRODUCCIÓN Con la creciente popularidad de tecnologías de computación distribuida como Grid [12] y servicios web [20], Internet se está convirtiendo en una plataforma informática poderosa donde diferentes pares de software (por ejemplo, agentes) pueden utilizar recursos informáticos existentes para realizar tareas. En este sentido, cada agente es un consumidor de recursos que adquiere una cierta cantidad de recursos para la ejecución de sus tareas. Es difícil para un mecanismo central de asignación de recursos recopilar y gestionar la información sobre todos los recursos compartidos y consumidores de recursos para realizar de manera efectiva la asignación de recursos. Por lo tanto, se requieren soluciones distribuidas del problema de asignación de recursos. Los investigadores han reconocido estos requisitos [10] y han propuesto técnicas para la asignación de recursos distribuidos. Un tipo prometedor de enfoques distribuidos se basa en modelos de mercado económico [4], inspirados en los principios de los mercados de valores reales. Aunque esos enfoques estén distribuidos, generalmente requieren un facilitador para la fijación de precios, la búsqueda de recursos y la asignación de trabajos a los recursos [5, 9]. Otro problema principalmente sin resolver de esos enfoques es el ajuste fino del precio y el tiempo, las restricciones presupuestarias para permitir una asignación eficiente de recursos en sistemas grandes y dinámicos [22]. En este documento proponemos una solución distribuida del problema de asignación de recursos basada en la autoorganización de los consumidores de recursos en un sistema con recursos limitados. En nuestro enfoque, los agentes asignan dinámicamente tareas a servidores que proporcionan una cantidad limitada de recursos. En nuestro enfoque, los agentes seleccionan de forma autónoma la plataforma de ejecución para la tarea en lugar de pedir a un intermediario de recursos que realice la asignación. Todo el control necesario para nuestro algoritmo está distribuido entre los agentes en el sistema. Optimizan continuamente el proceso de asignación de recursos a lo largo de su vida para adaptarse a los cambios en la disponibilidad de recursos compartidos, aprendiendo de decisiones de asignación pasadas. La única información disponible para todos los agentes son la carga de recursos y la información sobre el éxito de la asignación de recursos de asignaciones pasadas. La información adicional sobre la carga de recursos de los servidores no se difunde. El concepto básico de nuestra solución está inspirado en el razonamiento inductivo y la racionalidad limitada introducida por W. Brian Arthur [2]. El mecanismo propuesto no requiere una autoridad central de control, una capa de gestión de recursos o introducir comunicación adicional entre agentes para decidir qué tarea se asigna en qué servidor. Demostramos que este mecanismo funciona bien en sistemas dinámicos con un gran número de tareas y puede adaptarse fácilmente a diferentes tamaños de sistemas. Además, el rendimiento general del sistema no se ve afectado en caso de que los agentes o servidores fallen o no estén disponibles. El enfoque propuesto proporciona una forma sencilla de implementar la asignación de recursos distribuidos y tiene en cuenta las tendencias del sistema multiagente hacia la autonomía, la heterogeneidad y la falta de fiabilidad de los recursos y agentes. Esta técnica propuesta puede ser fácilmente complementada por técnicas para encolar o rechazar solicitudes de asignación de recursos de agentes [11]. Tales capacidades de auto-gestión de agentes de software permiten una asignación de recursos confiable incluso en un entorno con proveedores de recursos poco confiables. Esto se puede lograr mediante las interacciones mutuas entre agentes aplicando técnicas de la teoría de sistemas complejos. La autoorganización de todos los agentes conduce a una autoorganización de los recursos del sistema 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS y es una propiedad emergente del sistema [21]. El resto del documento está estructurado de la siguiente manera: La siguiente sección proporciona una visión general del trabajo relacionado ya realizado en el área de equilibrio de carga, asignación de recursos o programación. La sección 3 describe el modelo de un entorno multiagente que se utilizó para realizar simulaciones con el fin de evaluar el rendimiento. Las secciones 4 y 5 describen el algoritmo de asignación de recursos distribuidos y presentan varios resultados experimentales. Un resumen, una conclusión y una perspectiva del trabajo futuro finalizan este documento. El trabajo relacionado La asignación de recursos es un problema importante en el área de la informática. En los últimos años, diferentes grupos de investigación han propuesto soluciones basadas en diferentes suposiciones y restricciones [7, 3, 15, 10]. En términos generales, la asignación de recursos es un mecanismo o política para la gestión eficiente y efectiva del acceso a un recurso limitado o conjunto de recursos por parte de sus consumidores. En el caso más simple, los consumidores de recursos solicitan a un intermediario central o despachador los recursos disponibles donde el consumidor de recursos será asignado. El corredor generalmente tiene pleno conocimiento de todos los recursos del sistema. Todas las solicitudes entrantes son dirigidas al corredor, quien es el único tomador de decisiones. En esos enfoques, el consumidor de recursos no puede influir en el proceso de decisión de asignación. El equilibrio de carga [3] es un caso especial del problema de asignación de recursos que utiliza un intermediario que intenta ser justo con todos los recursos al equilibrar la carga del sistema de manera equitativa entre todos los proveedores de recursos. Este mecanismo funciona mejor en un sistema homogéneo. Una técnica distribuida simple para la gestión de recursos es la planificación de capacidad mediante la negativa o encolamiento de agentes entrantes para evitar la sobrecarga de recursos [11]. Desde la perspectiva del propietario de recursos, esta técnica es importante para prevenir la sobrecarga en el recurso, pero no es suficiente para una asignación efectiva de recursos. Esta técnica solo puede proporcionar un buen complemento para los mecanismos de asignación de recursos distribuidos. La mayoría de las técnicas actuales para la asignación de recursos en herramientas de computación en malla como Globus [12] o Condor-G [13] coordinan la asignación de recursos con un subastador, árbitro, despachador, programador o gestor. Esos coordinadores suelen necesitar tener conocimiento global sobre el estado de todos los recursos del sistema. Un ejemplo de un algoritmo de asignación de recursos dinámicos es el proyecto Cactus [1] para la asignación de trabajos computacionales muy costosos. El valor de las soluciones distribuidas para el problema de asignación de recursos ha sido reconocido por la investigación [10]. Inspirados en los principios de los mercados de valores, se han desarrollado modelos de mercado económico para negociar recursos con el fin de regular la oferta y la demanda en la red. Estos enfoques utilizan diferentes estrategias de precios como modelos de precios publicados, diferentes métodos de subasta o un modelo de mercado de productos básicos. Los usuarios intentan comprar recursos baratos necesarios para ejecutar el trabajo, mientras que los proveedores intentan obtener la mayor ganancia posible y operar los recursos disponibles a plena capacidad. Se presenta una colección de diferentes técnicas de asignación de recursos distribuidos basadas en modelos de mercado en Clearwater [10]. Buyya et al. desarrollaron un marco de asignación de recursos basado en la regulación de la oferta y la demanda [4] para Nimrod-G [6] con el enfoque principal en los plazos de entrega de trabajos y las restricciones presupuestarias. El Modelo de Asignación de Recursos basado en Agentes (ARAM) para redes está diseñado para programar trabajos computacionalmente costosos utilizando agentes. La desventaja de este modelo es el extenso uso de intercambio de mensajes entre agentes para monitoreo periódico e intercambio de información dentro de la estructura jerárquica. Las subtareas de un trabajo migran a través de la red hasta que encuentran un recurso que cumpla con las restricciones de precio. El itinerario de migración de trabajos está determinado por los recursos que los conectan en diferentes topologías [17]. El mecanismo propuesto en este documento elimina la necesidad de intercambio periódico de información sobre las cargas de recursos y no requiere una topología de conexión entre los recursos. Se ha realizado un considerable trabajo sobre técnicas de asignación descentralizada de recursos utilizando teoría de juegos publicado en los últimos años. La mayoría de ellos están formulados como juegos repetitivos en un entorno idealista y simplificado. Por ejemplo, Arthur introdujo el problema del bar El Farol, que no permite una solución perfecta, lógica y racional. Es un problema de decisión mal definido que asume y modela el razonamiento inductivo. Probablemente sea uno de los ejemplos más estudiados de sistemas adaptativos complejos derivados de la forma en que los humanos deciden problemas mal definidos. Una variación del problema de El Farol es el llamado juego de la minoría [8]. En este juego de decisión repetitivo, un número impar de agentes debe elegir entre dos recursos basándose en información de éxito pasado, tratando de asignarse al recurso con la minoría. Galstyan et al. [14] estudiaron una variación con más de dos recursos, cambiando las capacidades de los recursos y la información de los agentes vecinos. Demostraron que los agentes pueden adaptarse de manera efectiva a las capacidades cambiantes en este entorno utilizando un conjunto de simples tablas de búsqueda (estrategias) por agente. Otra técnica distribuida que se emplea para resolver el problema de asignación de recursos se basa en el aprendizaje por refuerzo [18]. Similar a nuestro enfoque, un conjunto de agentes compiten por un número limitado de recursos basados únicamente en experiencias individuales previas. En este documento, el objetivo del sistema es maximizar el rendimiento del sistema garantizando la equidad de los recursos, medida como el tiempo promedio de procesamiento por unidad de trabajo. Se presenta un enfoque de asignación de recursos para redes de sensores basado en técnicas de autoorganización y aprendizaje por refuerzo en [16], con un enfoque principal en la optimización del consumo de energía de los nodos de la red. Propusimos un enfoque de equilibrio de carga autoorganizado para un único servidor con el objetivo de optimizar los costos de comunicación de agentes móviles. Un agente móvil rechazará una migración a un servidor de agente remoto si espera que el servidor de destino ya esté sobrecargado por otros agentes o tareas del servidor. Los agentes toman sus decisiones por sí mismos basándose en pronósticos de la <br>utilización del servidor</br>. En este documento se presenta una solución para un entorno de múltiples servidores sin tener en cuenta los costos de comunicación o migración. 3. DESCRIPCIÓN DEL MODELO Modelamos un sistema multiagente distribuido como una red de servidores L = {l1, . . . , lm}, agentes A = {a1, . . . , an} y tareas T = {T1, ..., Tm}. Cada agente tiene un número de tareas Ti que deben ser ejecutadas durante su vida útil. Una tarea Ti requiere U(Ti, t) recursos para su ejecución en el tiempo t, independientemente de su servidor de ejecución. Los recursos para la ejecución de tareas son proporcionados por cada servidor li. La ubicación de la ejecución de las tareas en general está especificada por el mapa L: T × t → L. Un agente debe conocer la existencia de recursos del servidor para asignar tareas en esos recursos. Escribimos LS (ai) The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 75 Recursos del Sistema Anfitrión l4 Anfitrión l3 Anfitrión l2 2a 3a 4a a Anfitrión l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figura 1: Una ilustración de nuestro modelo de múltiples servidores con recursos exclusivos y compartidos para la ejecución del agente. para abordar el conjunto de recursos conocidos por el agente ai. Los recursos en el sistema pueden ser utilizados por todos los agentes para la ejecución de tareas. La cantidad de recursos proporcionados C(li, t) de cada servidor puede variar con el tiempo. La utilización de recursos de un servidor en el tiempo t se calcula utilizando la ecuación 1, sumando el consumo de recursos U(Tj, t) de cada tarea Tj que se ejecuta en el recurso en el tiempo t. Todas las unidades de recursos utilizadas en nuestro modelo representan métricas reales como memoria o ciclos de procesador. Además del caso en que la cantidad total de recursos del sistema es suficiente para ejecutar todas las tareas, también nos interesa el caso en que no se proporcionan suficientes recursos del sistema para cumplir con todas las solicitudes de asignación. Es decir, la capacidad total de recursos compartidos es menor que la cantidad de recursos solicitados por los agentes. En este caso, algunos agentes deben esperar con su solicitud de asignación hasta que se esperen recursos libres. El modelo de sistema multiagente utilizado para nuestras simulaciones está ilustrado en la Figura 1.4. ASIGNACIÓN DE RECURSOS AUTOORGANIZADA El algoritmo de asignación de recursos descrito en esta sección está integrado en cada agente. La única información necesaria para tomar una decisión de asignación de recursos para una tarea es la <br>utilización del servidor</br> de las asignaciones de tareas completadas en esos servidores. No hay una difusión adicional de información sobre la utilización de recursos del servidor o información sobre recursos libres. Nuestra solución demuestra que los agentes pueden autoorganizarse en un entorno dinámico sin necesidad de información de monitoreo activo que genere una gran sobrecarga de tráfico en la red. Además, no tenemos ninguna autoridad central de control. Todo comportamiento que conduce a la asignación de recursos es creado por la competencia efectiva de los agentes por recursos compartidos y es un efecto puramente emergente. Los agentes en nuestro sistema multiagente compiten por recursos o un conjunto de recursos para ejecutar tareas. La acción colectiva de estos agentes cambia el entorno y, con el paso del tiempo, tienen que adaptarse a estos cambios para competir de manera más efectiva en el entorno recién creado. Nuestro enfoque se basa en diferentes creencias de los agentes, representadas por predictores y diferente información sobre su entorno. Los agentes prefieren una asignación de tareas en un servidor con recursos disponibles. Sin embargo, no hay forma de estar seguro de la cantidad de recursos del servidor disponibles de antemano. Todos los agentes tienen las mismas preferencias y un agente asignará una tarea en un servidor si espera tener suficientes recursos libres para su ejecución. No hay comunicación entre agentes. Las acciones tomadas por los agentes influyen en las acciones de otros agentes de forma indirecta. El mecanismo aplicado está inspirado en el razonamiento inductivo y los principios de racionalidad limitada [2]. Se deriva de la forma humana de resolver problemas mal definidos. Los humanos tienden a tener en cuenta muchas hipótesis y actuar en base a la más plausible. Por lo tanto, cada agente lleva un registro del rendimiento de una colección privada de sus predictores y selecciona aquel que actualmente sea más prometedor para la toma de decisiones. 4.1 Algoritmo de asignación de recursos Esta sección describe el mecanismo de decisión para nuestra asignación de recursos autoorganizada. Todo el control necesario está integrado en los propios agentes. No hay una autoridad superior de control, capa de gestión para apoyo en la toma de decisiones o distribución de información. Todos los agentes tienen un conjunto de predictores para cada recurso con el fin de pronosticar la futura utilización de estos servidores para la asignación potencial de tareas. Para hacerlo, los agentes utilizan información histórica de asignaciones de tareas pasadas en esos recursos. Basándose en la utilización de recursos pronosticada, el agente tomará su decisión de asignación de recursos. Después de que la tarea haya finalizado su ejecución y devuelto los resultados al agente, se evalúan las actuaciones del predictor y se actualiza la información histórica. El Algoritmo 1 muestra el algoritmo de asignación de recursos para cada agente. El agente primero predice la carga de recursos de los próximos pasos para cada servidor con información histórica (línea 3-7). Si la carga de recursos predicha más el consumo de recursos de las tareas está por debajo de la última capacidad de servidor conocida, este servidor se agrega a la lista de candidatos para la asignación. El agente luego evalúa si se esperan recursos compartidos gratuitos para la asignación de tareas. En el caso de que no se esperen recursos gratuitos (línea 9), el agente explorará los recursos asignando la tarea a un servidor seleccionado al azar de entre todos los servidores no predecibles para recopilar información sobre la carga de recursos. Este es el caso estándar al comienzo del ciclo de vida del agente, ya que no hay información disponible sobre el entorno. La predicción de la carga de recursos en sí misma utiliza un conjunto de r predictores P(a, l) := {pi|1 ≤ i ≤ r} por servidor. Uno de los predictores pA ∈ P de cada conjunto se llama predictor activo, el cual pronostica la carga de recursos de los próximos pasos. Cada predictor es una función P: H → ℵ+ ∪ {0} del espacio de datos históricos H a un número entero no negativo, que es el valor pronosticado. Por ejemplo, un predictor podría pronosticar una carga de recursos igual a la cantidad promedio de recursos ocupados durante la última ejecución en este recurso. Un historial H de información de carga de recursos es una lista de hasta m elementos de historial hi = (xi, yi), que incluyen la fecha de observación xi y el valor observado yi. El elemento más reciente del historial es h0. Nuestro algoritmo utiliza un conjunto de predictores en lugar de solo uno, para evitar que todos los agentes tomen la misma decisión basada en el valor predicho, lo que invalidaría sus creencias. Imagina que solo un recurso compartido es conocido por un número de agentes que utilizan un predictor para pronosticar el 76 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Carga de Recursos Tiempo (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figura 2: (a) Información de carga de recursos recopilada de asignaciones de tareas anteriores que se utiliza para predicciones futuras. (b) Distribución de probabilidad de los predictores para seleccionar el nuevo predictor activo. mismo valor que la última utilización conocida de recursos del servidor. Todos los agentes que asignaron una tarea en un servidor que estaba ligeramente sobrecargado rechazarían otra asignación en este servidor, ya que esperan que el servidor vuelva a estar sobrecargado según las predicciones. Como resultado, el servidor tendría una gran cantidad de recursos libres. Un conjunto de diferentes predictores que predicen diferentes valores evita esta situación de invalidar las creencias de los agentes [19]. Un ejemplo de información de carga de recursos recopilada de las últimas 5 visitas de un agente a un recurso compartido se puede ver en la Figura 2(a). Muestra que el recurso fue visitado con frecuencia, lo que significa que había recursos gratuitos disponibles para la ejecución y no era necesario explorar otros servidores. Esto puede cambiar en el futuro ya que la carga de recursos ha aumentado significativamente recientemente. En el caso en que el conjunto de servidores que se predice que tienen recursos disponibles no esté vacío (línea 13), el agente selecciona uno de ellos para su asignación. Hemos implementado dos algoritmos alternativos para la selección de un servidor para la asignación de tareas. Algoritmo 1 Algoritmo de asignación de recursos de un agente 1 L ← ∅ //servidor con recursos libres 2 u ← U(T, t + 1) //consumo de recursos de la tarea 3 para todo P(a, l)|l ∈ LS (a) hacer 4 U(l) ← predicción de carga de recursos (P(a, l), t + 1) 5 si U(l) + u ≤ C(l) entonces 6 L ← L ∪ {P(a, l)} 7 fin si 8 fin para 9 si L = ∅ entonces 10 //todos los recursos compartidos impredecibles 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← un elemento aleatorio de E 13 else 14 allocationServer ← selección de servidor (L) 15 fin si 16 devolver allocationServer El Algoritmo 2 muestra el primer método, que es una selección no determinista según la previsibilidad de la utilización de recursos del servidor. Una distribución de probabilidad se calcula a partir de los niveles de confianza de las predicciones de recursos. El nivel de confianza depende de tres factores: la precisión del predictor activo, la cantidad de información histórica sobre el servidor y la edad promedio de la información histórica (ver Ecuación 3). El servidor con el nivel de confianza más alto tiene la mayor probabilidad de ser seleccionado como el servidor activo. G(P) = w1 · tamaño(H) m + w2 · Edad(H) máx Edad(H) + w3 · g(p) máx (g(p)) (3) donde: wi − pesos tamaño(H) − número de datos en el historial m − número máximo de valores históricos Edad(H) − edad promedio de los datos históricos g(p) − ver ecuación 4 Algoritmo 2 selecciónServidor(L) - mejor servidor predecible 1 para todos los P(a, l) ∈ L hacer 2 calcular G(P) 3 fin para 4 transformar todos los G(P) en una distribución de probabilidad 5 devolver l ∈ LS seleccionado de acuerdo con la distribución de probabilidad Algoritmo 3 selecciónServidor(L) - más recursos libres 1 para todos los P(a, l) ∈ L hacer 2 c(l) ← C(l) − Ul 3 fin para 4 devolver l ∈ LS |c(l) es máximo El segundo método de selección alternativo de un servidor del conjunto de servidores predichos con recursos libres es determinista y se muestra en el algoritmo 3. Se elige el servidor con la mayor cantidad esperada de recursos gratuitos del conjunto L de servidores con recursos gratuitos esperados. En el caso en que todos los agentes predigan que hay más recursos disponibles en un servidor en particular, todos los agentes asignarán la tarea a este servidor, lo que invalidaría las creencias de los agentes. Sin embargo, nuestros experimentos muestran que la información de historial individual y la selección no determinista del predictor activo generalmente evitan esta situación. En caso de que el algoritmo de asignación de recursos no devuelva ningún servidor (Alg. 1, línea 16), no se recomienda asignar un recurso. El agente no asignará la tarea a un recurso. Este caso ocurre solo si es posible predecir la carga de recursos para todos los servidores pero no se esperan recursos libres. Después de que la ejecución del agente haya finalizado, se realiza el proceso de evaluación descrito en el algoritmo 4. Este proceso se divide en tres casos. Primero, la tarea no fue asignada a un recurso. En este caso, el agente no puede decidir si la decisión de no asignar la tarea fue correcta o no. El agente luego elimina los datos históricos antiguos. Esto es necesario para una adaptación exitosa en el futuro. Si el agente no eliminara la información histórica antigua, la predicción siempre pronosticaría que no hay recursos disponibles gratuitos. El agente nunca asignaría una tarea a uno de los recursos en el futuro. La información histórica antigua se elimina del historial de recursos de los agentes utilizando una tasa de descomposición. La tasa de decaimiento es una función de distribución acumulativa que calcula la probabilidad de que un elemento histórico sea eliminado después de haber alcanzado un cierto The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 77 Edad de los datos históricos Tasa de decaimiento 0 1 más antiguo Figura 3: Tasa de decaimiento de la edad de la información histórica. La implementación actual utiliza una función de densidad de probabilidad constante en un dominio configurable. La Figura 3 muestra un ejemplo de una función de distribución acumulativa para la tasa de decaimiento. Dependiendo del entorno, la función de densidad de probabilidad debe ser modificada. Si el número de servidores potenciales por agente es alto, la información histórica debe mantenerse por más tiempo para evitar la exploración de recursos no explorados. Además, un entorno dinámico requiere información más actualizada para realizar predicciones más fiables. El segundo caso en el proceso de evaluación (Alg. 4, línea 5) describe las acciones tomadas después de que un servidor fue visitado por primera vez. El agente crea un nuevo conjunto de predictores para este servidor y registra la información histórica. Todos los predictores para este conjunto son elegidos al azar de un conjunto predefinido. g(p) = l i=0 ri (4) donde: ri = ⎧ ⎨ ⎩ 1 si la decisión i-ésima es correcta 0 si el resultado i-ésimo es desconocido −1 si la decisión i-ésima es incorrecta El caso general (Alg. 4, línea 8) es la evaluación después de que el agente asignó la tarea a un recurso. El agente evalúa todos los predictores del conjunto de predictores para este recurso al predecir la carga del recurso con todos los predictores basados en los datos históricos antiguos. Los predictores que hicieron una predicción correcta, lo que significa que la asignación de recursos fue correcta, recibirán una calificación positiva. Este es el caso en el que el recurso no estaba sobrecargado y se predijeron recursos libres para la ejecución, o el recurso estaba sobrecargado y este predictor habría evitado la asignación. Todos los predictores que predijeron valores que llevarían a decisiones incorrectas recibirán calificaciones negativas. En todos los demás casos, que incluye cuando no era posible hacer una predicción, se otorga una calificación neutral a los pronosticadores. Basándose en estas calificaciones de rendimiento, los niveles de confianza se calculan utilizando la ecuación 4. La confianza para todos los predictores que no pueden predecir con la información histórica actual sobre el servidor se establece en cero para evitar la selección de estos como el nuevo predictor activo. Estos valores se transforman en una distribución de probabilidad. Según esta distribución de probabilidad, el nuevo predictor activo se elige e implementa mediante una selección de ruleta. La Figura 2(b) ilustra las probabilidades de un conjunto de 10 predictores, las cuales han sido calculadas a partir de los niveles de confianza de los predictores. Aunque el predictor 9 tiene la probabilidad de selección más alta, no fue elegido por el proceso de selección de la ruleta como el predictor activo. Esta selección no determinista de predictores evita la invalidación de las creencias de los agentes en caso de que los agentes tengan el mismo conjunto de predictores. La precisión de la predicción, que es el error de la predicción en comparación con el valor observado, no se tiene en cuenta. Supongamos que el predictor activo predice ligeramente por encima de la capacidad de recursos, lo que no conduce a una asignación de recursos. De hecho, habría suficientes recursos disponibles para la ejecución. Una predicción menos precisa que está muy por debajo de la capacidad llevaría a la decisión correcta y, por lo tanto, es preferible. La última acción del algoritmo de evaluación (Alg. 4, línea 22) actualiza el historial con la información más reciente de carga de recursos del servidor. Los datos de la historia más antigua se sobrescriben si ya se han registrado m valores de historia para el servidor. Algoritmo 4 Evaluación de Decisiones 1 si l ∈ LE entonces 2 para todos los P(a, l)|l ∈ LS (a) hacer 3 evaporar datos históricos antiguos 4 fin para 5 sino si P(a, l) = nulo entonces 6 crear (P(a, l)) 7 actualizar H(l) 8 sino 9 para todos los p ∈ P(a, l) hacer 10 pred ← predicción de carga de recursos(p) 11 si (U(l) ≤ C(l) Y pred + U(a, t) ≤ C(l)) O (U(l) > C(l) Y pred + U(a, t) > C(l)) entonces 12 agregar calificación positiva(p) 13 sino si U(l) ≤ C(l) Y pred + U(a, t) > C(l) O U(l) ≤ C(l) Y pred + U(a, t) > C(l) entonces 14 agregar calificación negativa(p) 15 sino 16 agregar calificación neutral(p) 17 fin si 18 fin para 19 calcular todos los g(p); g(p) ← 0, si p no está funcionando 20 transformar todos los g(p) en una distribución de probabilidad 21 pA ← p ∈ P(a, l) es seleccionado de acuerdo a esta distribución de probabilidad 22 actualizar H(l) 23 fin si 4.2 Observaciones y Limitaciones del Enfoque Nuestro mecanismo de predicción utiliza varios tipos de predictores simples en lugar de uno sofisticado. Este método asegura que los agentes puedan competir de manera más efectiva en un entorno cambiante. Diferentes tipos de predictores son adecuados para diferentes situaciones y entornos. Por lo tanto, todos los predictores se evalúan después de cada decisión y se selecciona el predictor activo. Este carácter no determinista del nuevo predictor activo respalda que las creencias de los agentes no serán invalidadas, lo cual ocurre en el caso de que todos los predictores estén tomando la misma decisión. Especialmente si solo hay un recurso compartido disponible y todos los agentes tienen la opción de ir a este recurso compartido o no [19]. Nuestro enfoque de autoorganización es robusto frente a fallos de recursos o agentes en el sistema. Si se unen o se van, el sistema puede autoorganizarse rápidamente y adaptarse a las nuevas condiciones. No hay cuellos de botella clásicos ni un único punto de falla como en los mecanismos centralizados. Las limitaciones son la dependencia de la información de utilización de recursos históricos de otros servidores. Un pronóstico de la utilización de recursos de un servidor remoto solo es posible si un agente tiene una cantidad de información histórica sobre un recurso compartido. Si el número de servidores por agente es muy grande, no hay una manera eficiente de recopilar información histórica sobre los servidores remotos. Este problema ocurre si la cantidad de recursos compartidos proporcionados es de 78. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) es limitada y no es suficiente para todos los consumidores de recursos. En este caso, un agente intentaría aleatoriamente todos los servidores conocidos hasta encontrar uno con recursos disponibles o no haya ninguno. En el peor de los casos, para cuando se prueben todos los servidores, la información histórica de los servidores ya estará desactualizada. EVALUACIÓN EXPERIMENTAL La primera parte de esta sección ofrece un breve resumen de la configuración de nuestro entorno de simulación. En el resto de la sección, se presentan y discuten los resultados de los experimentos. Todos los experimentos se llevan a cabo en un banco de pruebas especial que simula y modela un sistema multiagente. Hemos implementado este banco de pruebas en el lenguaje de programación Java, independiente de cualquier conjunto de herramientas de agente específico. Permite una variedad de experimentos en entornos estables y dinámicos con un número configurable de agentes, tareas y servidores. Se utiliza un modelo basado en eventos para activar todas las actividades en el sistema. Para todas las simulaciones, limitamos el número de datos históricos para cada servidor a 10, el número de calificaciones de rendimiento por predictor a 10 y asignamos 10 predictores a cada conjunto de predictores para cada agente. Todos los predictores son elegidos al azar de un conjunto predefinido arbitrario de 32 predictores del siguiente tipo. Los predictores difieren en diferentes ciclos o tamaños de ventana. - Predictor de n-ciclos: p(n) = yn utiliza el valor de la historia en la posición n-ésima desde el final. - Predictor de n-media: p(n) = 1 n · n i=1 yi utiliza el valor medio de los n últimos valores de la historia. - Predictor de regresión lineal de n: p(n, t) = a·t+b utiliza el valor de regresión lineal de los últimos n valores de la historia, donde a, b se calculan utilizando regresión lineal con ajuste de mínimos cuadrados considerando los últimos n datos de la historia. - Predictor de distribución de n: utiliza un valor aleatorio de la distribución de frecuencia de los n últimos valores de la historia. - Predictor de espejo de n: p(n) = 2 · H − yn utiliza la imagen de espejo alrededor de la media de todos los valores de la historia del n-ésimo valor de la historia. La eficiencia de nuestra propuesta de asignación de recursos autoorganizada se evalúa mediante el desarrollo de carga de recursos de cada servidor durante la simulación, así como el desarrollo acumulado de carga de recursos totales sobre todos los recursos compartidos. Las cargas de recursos para cada servidor se calculan utilizando la ecuación 1 como la suma del consumo de recursos de todos los agentes actualmente ejecutados en este servidor. La carga total de recursos del sistema se calcula como la suma de la carga de recursos de todos los recursos. El algoritmo de asignación de recursos autoorganizado tiene elementos aleatorios. Por lo tanto, los resultados presentados muestran valores medios y desviación estándar calculados sobre 100 experimentos repetidos. 5.1 Configuración Experimental Los siguientes parámetros tienen un impacto en el proceso de asignación de recursos. Damos una visión general de los parámetros y una breve descripción. - Agentes: El número de agentes involucrados en la asignación de recursos. Este número varía en los experimentos entre 650 y 750 dependiendo de la cantidad total de recursos del sistema disponibles. - Consumo de recursos: Cada tarea consume recursos del servidor para su ejecución. El consumo de recursos se asigna aleatoriamente a cada tarea antes de su asignación de un intervalo. El consumo de recursos se especifica en unidades de recursos que corresponden a métricas del mundo real como la memoria o los ciclos del procesador. - Servidor de inicio de agentes: Todos los agentes se encuentran en un servidor de inicio de agentes. Los recursos de esos servidores no son considerados en nuestra simulación y no afectan el rendimiento de la asignación de recursos. - Recursos del servidor: Los experimentos utilizan servidores con diferentes cantidades de recursos compartidos disponibles. El primer experimento se lleva a cabo en un entorno de servidor estático que proporciona la misma cantidad de recursos compartidos, mientras que el otro experimento varía los recursos de servidor disponibles durante la simulación. La cantidad total de recursos permanece constante en ambos experimentos. - Tiempo de ejecución: El tiempo de ejecución de una tarea para la ejecución, independiente de la plataforma de ejecución. Por esta vez, la tarea consume la cantidad asignada de recursos del servidor. Este parámetro se asigna aleatoriamente antes de la ejecución. - Tiempo de creación de la tarea: El tiempo antes de que se cree la siguiente tarea después de la finalización exitosa o fallida. Este parámetro influye en la antigüedad de la información histórica sobre los recursos y tiene una gran influencia en la duración de la fase inicial de adaptación. Este parámetro se asigna aleatoriamente después de que se haya completado la tarea. 5.2 Resultados Experimentales Esta sección muestra los resultados de experimentos seleccionados que demuestran el rendimiento de nuestro mecanismo propuesto de asignación de recursos. El primer experimento muestra el rendimiento en un entorno estable donde un número de agentes asignan tareas a servidores que proporcionan una cantidad constante de recursos. El segundo experimento se llevó a cabo en un entorno de servidor dinámico con un número constante de agentes. El primer experimento muestra nuestro modelo en un entorno estable de 3 servidores que proporcionan un total de 7000 unidades de recursos. La capacidad de recursos de cada servidor permanece constante durante el experimento. Utilizamos 650 agentes con los parámetros del tiempo de ejecución entre 1 y 15 unidades de tiempo y un tiempo de creación de tarea en el intervalo [0 − 30] unidades de tiempo. El consumo de recursos de las tareas se asigna aleatoriamente en el intervalo de [1 - 45] unidades de recurso. La Figura 4 muestra los resultados de 100 repeticiones de este experimento. La Figura 4(a) muestra que la cantidad total de recursos proporcionados es mayor que la demanda de recursos en promedio. Al comienzo del experimento, todos los agentes asignan sus tareas aleatoriamente en uno de los servidores disponibles y exploran las capacidades y utilizaciones de recursos disponibles durante aproximadamente 150 unidades de tiempo. Esta fase inicial de exploración muestra que la carga promedio de recursos de cada servidor tiene un nivel similar. Esto provoca una situación de sobrecarga en el servidor 1 debido a su baja capacidad de recursos compartidos, y una gran cantidad de recursos libres en el servidor 2. Los agentes que asignaron tareas al servidor 1 detectan la situación de sobrecarga y exploran de forma aleatoria otros servidores disponibles. Encuentran recursos gratuitos en el servidor 2. Después del período de aprendizaje, los agentes se han autoorganizado en este entorno estable y han encontrado una solución estable para la asignación de The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Tiempo 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (b) Carga de recursos servidor 0 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (c) Carga de recursos servidor 1 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 2 Figura 4: Resultados del experimento 1 en un entorno estático de 3 servidores promediados sobre 100 repeticiones. todas las tareas. La desviación estándar de las cargas de recursos es pequeña para cada servidor, lo que indica que nuestro enfoque distribuido encuentra soluciones estables en casi cada ejecución. Este experimento utilizó el algoritmo 2 para la selección del servidor activo. También realizamos el mismo experimento con el mecanismo de selección de recursos más libre para seleccionar el servidor activo. La asignación de recursos para cada servidor es similar. La cantidad absoluta de recursos gratuitos por servidor es casi la misma. El Experimento 2 se llevó a cabo en un entorno dinámico de 3 servidores con un total de 750 agentes. La cantidad de recursos del servidor 0 y del servidor 1 cambia periódicamente, mientras que la cantidad total de recursos disponibles permanece constante. El servidor 0 tiene una capacidad inicial de 1000 unidades, mientras que el servidor 1 comienza con una capacidad de 4000 unidades. El cambio en la capacidad comienza después de 150 unidades de tiempo, que es aproximadamente al final de la fase de aprendizaje. La figura 5 (b, c, d) muestra el comportamiento de nuestra asignación de recursos autoorganizada en este entorno. Todos los agentes utilizan el mecanismo de selección de recursos más libres determinístico para seleccionar el servidor activo. Se puede observar en la Fig. 5(b) y 5(c) que el número de recursos asignados al servidor 0 y al servidor 1 cambia periódicamente con la cantidad de recursos proporcionados. Esto demuestra que los agentes pueden percibir los recursos disponibles en este entorno dinámico y son capaces de adaptarse a esos cambios. El desarrollo de la carga de recursos del servidor 2 (ver Fig. 5(d)) muestra un cambio periódico porque algunos agentes intentan asignar tareas a este servidor en caso de que su servidor previamente preferido reduzca la cantidad de recursos compartidos. La carga total de recursos de todos los recursos compartidos es constante a lo largo de los experimentos, lo que indica que todos los agentes asignan sus tareas a uno de los recursos compartidos. Fig. 4(a)). 6.\nFig. 4(a)). 6. CONCLUSIONES Y TRABAJO FUTURO En este artículo se presentó una técnica de asignación de recursos distribuida autoorganizativa para sistemas multiagente. Permitimos a los agentes seleccionar la plataforma de ejecución para sus tareas ellos mismos antes de cada ejecución en tiempo de ejecución. En nuestro enfoque, los agentes compiten por una asignación en uno de los 0 500 1,000 1,500 2,000 Tiempo 0 2,500 5,000 7,500 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (b) Carga de recursos servidor 1 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (c) Carga de recursos servidor 2 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 3 Figura 5: Resultados del experimento 2 en un entorno de servidor dinámico promediado en 100 repeticiones. recurso compartido disponible. Los agentes perciben su entorno de servidor y adaptan sus acciones para competir de manera más eficiente en el nuevo entorno creado. Este proceso es adaptativo y tiene un fuerte retroalimentación, ya que las decisiones de asignación influencian indirectamente las decisiones de otros agentes. La asignación de recursos es un efecto puramente emergente. Nuestro mecanismo demuestra que la asignación de recursos puede ser realizada mediante la competencia efectiva de agentes individuales y autónomos. Ni necesitan coordinación o información de una autoridad superior ni se requiere una comunicación directa adicional entre agentes. Este mecanismo fue inspirado por el razonamiento inductivo y los principios de racionalidad limitada, lo que permite a los agentes adaptar sus estrategias para competir de manera efectiva en un entorno dinámico. En caso de que un servidor no esté disponible, los agentes pueden adaptarse rápidamente a esta nueva situación explorando nuevos recursos o permaneciendo en el servidor local si no es posible una asignación. Especialmente en entornos dinámicos y escalables como los sistemas de rejilla, se requiere un mecanismo robusto y distribuido para la asignación de recursos. Nuestro enfoque de asignación de recursos autoorganizados fue evaluado con una serie de experimentos de simulación en un entorno dinámico de agentes y recursos del servidor. Los resultados presentados para este nuevo enfoque de optimización de migración estratégica son muy prometedores y justifican una mayor investigación en un entorno real de sistema multiagente. Es una política distribuida, escalable y fácil de entender para la regulación de la oferta y la demanda de recursos. Todo el control se implementa en los agentes. Un mecanismo de decisión simple basado en diferentes creencias del agente crea un comportamiento emergente que conduce a una asignación efectiva de recursos. Este enfoque puede ser fácilmente ampliado o respaldado por mecanismos de equilibrio/cola de recursos proporcionados por los recursos. Nuestro enfoque se adapta a los cambios en el entorno pero no es evolutivo. No hay descubrimiento de nuevas estrategias por parte de los agentes. El conjunto de predictores permanece igual a lo largo de toda la vida. De hecho, creemos que esto podría mejorar aún más el comportamiento de los sistemas a lo largo de un período prolongado y podría ser el 80 The Sixth Intl. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) investigará en el futuro. La evolución sería muy lenta y selectiva y no influiría en el comportamiento del sistema en un período a corto plazo que está cubierto por nuestros resultados experimentales. En un futuro cercano investigaremos si es posible una adaptación automática de la tasa de decaimiento de la información histórica en nuestro algoritmo y si puede mejorar el rendimiento de la asignación de recursos. La tasa de descomposición está actualmente predefinida y debe ser alterada manualmente dependiendo del entorno. Un gran número de recursos compartidos requiere información histórica más antigua para evitar una exploración de recursos demasiado frecuente. Por el contrario, un entorno dinámico con capacidades variables requiere información más actualizada para realizar predicciones más fiables. Somos conscientes de la larga fase de aprendizaje en entornos con un gran número de recursos compartidos conocidos por cada agente. En caso de que los agentes soliciten más recursos de los que los servidores compartidos proporcionan, todos los agentes explorarán aleatoriamente todos los servidores conocidos. Este proceso de adquirir información de carga de recursos sobre todos los servidores puede llevar mucho tiempo en el caso de que no se proporcionen recursos compartidos suficientes para todas las tareas. En el peor de los casos, para cuando se explore todos los servidores, la información histórica de algunos servidores podría estar desactualizada y la exploración comenzará de nuevo. En esta situación, es difícil para un agente recopilar eficientemente información histórica sobre todos los servidores remotos. Este tema necesita más investigación en el futuro. REFERENCIAS [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel y J. Shalf. Herramientas de Cactus para Aplicaciones de Red. En Cluster Computing, volumen 4, páginas 179-188, Hingham, MA, EE. UU., 2001. Kluwer Academic Publishers. [2] W. B. Arthur.\nEditorial Kluwer Academic. [2] W. B. Arthur. Razonamiento inductivo y racionalidad limitada. American Economic Review (Papers and Proceedings), 84(2):406-411, mayo de 1994. [3] T. Bourke. Balanceo de carga del servidor. OReilly Media, 1ª edición, agosto de 2001. [4] R. Buyya. Gestión y programación de recursos distribuidos basada en economía para la computación en malla. Tesis doctoral, Universidad de Monash, Melbourne, Australia, mayo de 2002. [5] R. Buyya, D. Abramson, J. Giddy y H. Stockinger. Modelos económicos para la gestión de recursos y programación en la computación en malla. Número especial sobre Entornos de Computación en Red de la Revista Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin y D. DiNucci. Modelos arquitectónicos para la gestión de recursos en la red. En Actas del Primer Taller Internacional sobre Computación en Red, páginas 18-35. Springer LNCS, 2000. [7] T. L. Casavant y J. G. Kuhl. Una taxonomía de programación en sistemas informáticos distribuidos de propósito general. IEEE Transactions on Software Engineering, 14(2):141-154, febrero de 1988. [8] D. Challet y Y. Zhang. Aparición de la cooperación y la organización en un juego evolutivo. Physica A, 407(246), 1997. [9] K.-P. Chow y Y.-K. Kwok. En equilibrio de carga para computación multiagente distribuida. En IEEE Transactions on Parallel and Distributed Systems, volumen 13, páginas 787-801. IEEE, agosto de 2002. [10] S. H. Clearwater. Control basado en el mercado. Un paradigma para la asignación distribuida de recursos. World Scientific, Singapur, 1996. [11] C. Fl¨us. Planificación de capacidad de sistemas de agentes móviles para el diseño eficiente de aplicaciones de intranet. Tesis doctoral, Universidad de Duisburg-Essen (Alemania), febrero de 2005. [12] I. Foster y C. Kesselman. Globus: Un conjunto de herramientas de infraestructura de metacomputación. Revista Internacional de Aplicaciones de Supercomputación, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I. Foster, M. Livny y S. Tuecke. Condor-G: Un agente de gestión de computación para redes de múltiples instituciones. Computación en clúster, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar y K. Lerman. Juegos de asignación de recursos con capacidades de recursos cambiantes. En Actas de la segunda conferencia internacional conjunta sobre agentes autónomos y sistemas multiagente, páginas 145 - 152, Melbourne, Australia, 2003. ACM Press, Nueva York, NY, EE. UU. [15] C. Georgousopoulos y O. F. Rana. Combinando enfoques basados en el estado y en el modelo para el equilibrio de carga de agentes móviles. En SAC 03: Actas del simposio de computación aplicada de ACM de 2003, páginas 878-885, Nueva York, NY, EE. UU., 2003. ACM Press. [16] G. Mainland, D. C. Parkes y M. Welsh. Asignación descentralizada y adaptativa de recursos para redes de sensores. En Actas del 2º Simposio USENIX sobre Diseño e Implementación de Sistemas de Red (NSDI 05), mayo de 2005. [17] S. Manvi, M. Birje y B. Prasad. Un modelo de asignación de recursos basado en agentes para rejillas computacionales. Sistemas Multiagente y de Red - Una Revista Internacional, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham y M. Tennenholtz. Equilibrio de carga adaptativo: Un estudio en el aprendizaje multiagente. En Journal of Artificial Intelligence Research, volumen 2, páginas 475-500, 1995. [19] T. Schlegel, P. Braun y R. Kowalczyk. Hacia Agentes Móviles Autónomos con Comportamiento de Migración Emergente. En Actas de la Quinta Conferencia Internacional Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 2006), Hakodate (Japón), páginas 585-592. ACM Press, mayo de 2006. [20] W3C. Actividad de servicios web, 2002. http://www.w3.org/2002/ws - última visita 23.10.2006. [21] M. M. Waldrop. Complejidad: La ciencia emergente en el límite entre el orden y el caos. Simon & Schuster, 1ª edición, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik y T. Bryan. Analizando estrategias de asignación de recursos basadas en el mercado para la red computacional. En la Revista Internacional de Aplicaciones de Computación de Alto Rendimiento, volumen 15, páginas 258-281. Sage Science Press, 2001. \n\nEditorial Sage Science, 2001. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 81 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "adaptive process": {
            "translated_key": "proceso adaptativo",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Towards Self-organising Agent-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
                "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
                "In this paper we propose a distributed algorithm that solves the resource allocation problem in distributed multiagent systems.",
                "Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer.",
                "The resource allocation in the system is a purely emergent effect.",
                "We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
                "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
                "In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
                "Hence, distributed solutions of the resource allocation problem are required.",
                "Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation.",
                "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
                "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
                "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].",
                "In this paper we propose a distributed solution of the resource allocation problem based on self-organisation of the resource consumers in a system with limited resources.",
                "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
                "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
                "All control needed for our algorithm is distributed among the agents in the system.",
                "They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
                "The only information available to all agents are resource load and allocation success information from past resource allocations.",
                "Additional resource load information about servers is not disseminated.",
                "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
                "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
                "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
                "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-agent system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11].",
                "Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.",
                "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
                "Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.",
                "Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.",
                "Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results.",
                "A summary, conclusion and outlook to future work finish this paper. 2.",
                "RELATED WORK Resource allocation is an important problem in the area of computer science.",
                "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
                "Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
                "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
                "The broker usually has full knowledge about all system resources.",
                "All incoming requests are directed to the broker who is the solely decision maker.",
                "In those approaches, the resource consumer cannot influence the allocation decision process.",
                "Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
                "This mechanism works best in a homogeneous system.",
                "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
                "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation.",
                "This technique can only provide a good supplement for distributed resource allocation mechanisms.",
                "Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
                "Those coordinators usually need to have global knowledge on the state of all system resources.",
                "An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
                "The value of distributed solutions for the resource allocation problem has been recognised by research [10].",
                "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
                "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
                "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
                "A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10].",
                "Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
                "The Agent based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
                "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
                "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
                "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
                "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
                "There has been considerable work on decentralised resource allocation techniques using game theory published over recent years.",
                "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
                "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
                "It is an ill-defined decision problem that assumes and models inductive reasoning.",
                "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
                "A variation of the El Farol problem is the so called minority game [8].",
                "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
                "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
                "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent.",
                "Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18].",
                "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
                "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
                "A resource allocation approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
                "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
                "A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks.",
                "Agents make their decisions themselves based on forecasts of the server utilisation.",
                "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
                "MODEL DESCRIPTION We model a distributed multi-agent system as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "Each agent has a number of tasks Ti that needs to be executed during its lifetime.",
                "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
                "Resources for the execution of tasks are provided by each server li.",
                "The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources.",
                "We write LS (ai) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai.",
                "Resources in the system can be used by all agents for the execution of tasks.",
                "The amount of provided resources C(li, t) of each server can vary over time.",
                "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
                "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
                "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
                "In this case, some agents must wait with their allocation request until free resources are expected.",
                "The multi-agent system model used for our simulations is illustrated in Fig. 1. 4.",
                "SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each agent.",
                "The only information required in order to make a resource allocation decision for a task is the server utilisation from completed task allocations at those servers.",
                "There is no additional information dissemination about server resource utilisation or information about free resources.",
                "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
                "Additionally, we do not have any central controlling authority.",
                "All behaviour that leads to the resource allocation is created by the effective competition of the agents for shared resources and is a purely emergent effect.",
                "The agents in our multi-agent system compete for resources or a set of resources to execute tasks.",
                "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
                "Our approach is based on different agent beliefs, represented by predictors and different information about their environment.",
                "Agents prefer a task allocation at a server with free resources.",
                "However, there is no way to be sure of the amount of free server resources in advance.",
                "All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution.",
                "There is no communication between agents.",
                "Actions taken by agents influence the actions of other agents indirectly.",
                "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
                "It is derived from the human way of deciding ill-defined problems.",
                "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
                "Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation.",
                "All necessary control is integrated in the agents themselves.",
                "There is no higher controlling authority, management layer for decision support or information distribution.",
                "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
                "To do so, agents use historical information from past task allocations at those resources.",
                "Based on the forecasted resource utilisation, the agent will make its resource allocation decision.",
                "After the task has finished its execution and returned the results back to the agent, the predictor performances are evaluated and history information is updated.",
                "Algorithm 1 shows the resource allocation algorithm for each agent.",
                "The agent first predicts the next steps resource load for each server with historical information (line 3-7).",
                "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
                "The agent then evaluates if any free shared resources for the task allocation are expected.",
                "In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
                "This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available.",
                "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
                "One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load.",
                "Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
                "The most recent history item is h0.",
                "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
                "Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
                "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
                "As the result, the server would have a large amount of free resources.",
                "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
                "An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a).",
                "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
                "This may change in the future as the resource load has significantly increased recently.",
                "In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation.",
                "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
                "Algorithm 1 Resource Allocation algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
                "A probability distribution is calculated from the confidence levels of the resource predictions.",
                "The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
                "The server with the highest confidence level has the biggest chance to be selected as the active server.",
                "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
                "The server with most expected free resources from the set L of server with expected free resources is chosen.",
                "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
                "However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation.",
                "In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
                "The agent will not allocate the task at a resource.",
                "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
                "After the agent execution has finished, the evaluation process described in algorithm 4 is preformed.",
                "This process is divided into three cases.",
                "First, the task was not allocated at a resource.",
                "In this case, the agent cannot decide if the decision not to allocate the task was correct or not.",
                "The agent then removes old historical data.",
                "This is necessary for a successful adaptation in the future.",
                "If the agent would not delete old historical information, the prediction would always forecast that no free resources are available.",
                "The agent would never allocate a task at one of the resources in the future.",
                "Old historical information is removed from the agents resource history using a decay rate.",
                "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
                "The current implementation uses a constant probability density function in a configurable domain.",
                "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
                "Depending on the environment, the probability density function must be altered.",
                "If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
                "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
                "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
                "The agent creates a new predictor set for this server and records the historical information.",
                "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource.",
                "The agent evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data.",
                "Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating.",
                "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation.",
                "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
                "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
                "Based on these performance ratings, the confidence levels are calculated using equation 4.",
                "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor.",
                "These values are transformed into a probability distribution.",
                "According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection.",
                "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels.",
                "Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor.",
                "This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
                "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
                "Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources.",
                "In fact, enough resources for the execution would be available.",
                "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
                "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
                "The oldest history data is overwritten if already m history values are recorded for the server.",
                "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor.",
                "This method assures that agents can compete more effectively in a changing environment.",
                "Different types of predictors are suitable for different situations and environments.",
                "Therefore, all predictors are being evaluated after each decision and the active predictor is selected.",
                "This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
                "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
                "Our self-organising approach is robust against failures of resources or agents in the system.",
                "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
                "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
                "The limitations are the reliance on historical resource utilisation information about other servers.",
                "A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource.",
                "If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers.",
                "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers.",
                "In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one.",
                "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
                "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
                "In the rest of the section, results of the experiments are presented and discussed.",
                "All experiments are conducted in a special testbed that simulates and models a multi-agent system.",
                "We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit.",
                "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
                "An event-driven model is used to trigger all activities in the system.",
                "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each agent.",
                "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
                "Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
                "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
                "The total resource load of the system is calculated as the sum of the resources load of all resources.",
                "The self-organising resource allocation algorithm has random elements.",
                "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process.",
                "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation.",
                "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
                "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
                "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server.",
                "The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources.",
                "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
                "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
                "For this time the task consumes the assigned amount of server resources.",
                "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
                "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
                "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism.",
                "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
                "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
                "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
                "The resource capacity of each server remains constant over the experiment.",
                "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
                "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
                "Figure 4 shows the results from 100 repetitions of this experiment.",
                "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
                "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
                "This initial exploration phase shows that the average resource load of each server has a similar level.",
                "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
                "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
                "They find free resources at server 2.",
                "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
                "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
                "This experiment used algorithm 2 for the selection of the active server.",
                "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
                "The resource allocation for each server is similar.",
                "The absolute amount of free resources per server is almost the same.",
                "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
                "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
                "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
                "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
                "Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment.",
                "All agents use the deterministic most free resources selection mechanism to select the active server.",
                "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
                "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
                "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
                "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
                "Fig. 4(a)). 6.",
                "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-agent systems was presented.",
                "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
                "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
                "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
                "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
                "The resource allocation is a purely emergent effect.",
                "Our mechanism demonstrates that resource allocation can be done by the effective competition of individual and autonomous agents.",
                "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
                "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
                "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
                "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required.",
                "Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
                "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-agent system environment.",
                "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
                "All control is implemented in the agents.",
                "A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective resource allocation.",
                "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
                "Our approach adapts to changes in the environment but it is not evolutionary.",
                "There is no discovery of new strategies by the agents.",
                "The set of predictors stays the same over the whole life.",
                "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future.",
                "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
                "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance.",
                "The decay rate is currently predefined and must be altered manually depending on the environment.",
                "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
                "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
                "We are aware of the long learning phase in environments with a large number of shared resources known by each agent.",
                "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
                "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
                "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
                "In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers.",
                "This issue needs more investigation in the future. 7.",
                "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
                "Cactus Tools for Grid Applications.",
                "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
                "Kluwer Academic Publishers. [2] W. B. Arthur.",
                "Inductive Reasoning and Bounded Rationality.",
                "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
                "Server Load Balancing.",
                "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
                "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
                "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
                "Economic Models for Resource Management and Scheduling in Grid Computing.",
                "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
                "Architectural Models for Resource Management in the Grid.",
                "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
                "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
                "A taxonomy of scheduling in general-purpose distributed computing systems.",
                "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
                "Emergence of Cooperation and Organization in an Evolutionary Game.",
                "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
                "On load balancing for distributed multiagent computing.",
                "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
                "IEEE, August 2002. [10] S. H. Clearwater.",
                "Market-based control.",
                "A Paradigm for Distributed Resource Allocation.",
                "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
                "Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications.",
                "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
                "Foster and C. Kesselman.",
                "Globus: A Metacomputing Infrastructure Toolkit.",
                "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
                "Foster, M. Livny, and S. Tuecke.",
                "Condor-G: A Computation Management Agent for Multi-Institutional Grids.",
                "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
                "Resource allocation games with changing resource capacities.",
                "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
                "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
                "Combining state and model-based approaches for mobile agent load balancing.",
                "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
                "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
                "Decentralized Adaptive Resource Allocation for Sensor Networks.",
                "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
                "An Agent-based Resource Allocation Model for Computational Grids.",
                "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
                "Adaptive Load Balancing: A Study in Multi-Agent Learning.",
                "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
                "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
                "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
                "ACM Press, May 2006. [20] W3C.",
                "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
                "Complexity: The Emerging Science at the Edge of Order and Chaos.",
                "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
                "Analyzing Market-Based Resource Allocation Strategies for the Computational Grid.",
                "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
                "Sage Science Press, 2001.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "competition": {
            "translated_key": "competencia",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Towards Self-organising Agent-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
                "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
                "In this paper we propose a distributed algorithm that solves the resource allocation problem in distributed multiagent systems.",
                "Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer.",
                "The resource allocation in the system is a purely emergent effect.",
                "We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
                "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
                "In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
                "Hence, distributed solutions of the resource allocation problem are required.",
                "Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation.",
                "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
                "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
                "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].",
                "In this paper we propose a distributed solution of the resource allocation problem based on self-organisation of the resource consumers in a system with limited resources.",
                "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
                "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
                "All control needed for our algorithm is distributed among the agents in the system.",
                "They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
                "The only information available to all agents are resource load and allocation success information from past resource allocations.",
                "Additional resource load information about servers is not disseminated.",
                "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
                "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
                "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
                "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-agent system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11].",
                "Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.",
                "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
                "Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.",
                "Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.",
                "Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results.",
                "A summary, conclusion and outlook to future work finish this paper. 2.",
                "RELATED WORK Resource allocation is an important problem in the area of computer science.",
                "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
                "Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
                "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
                "The broker usually has full knowledge about all system resources.",
                "All incoming requests are directed to the broker who is the solely decision maker.",
                "In those approaches, the resource consumer cannot influence the allocation decision process.",
                "Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
                "This mechanism works best in a homogeneous system.",
                "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
                "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation.",
                "This technique can only provide a good supplement for distributed resource allocation mechanisms.",
                "Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
                "Those coordinators usually need to have global knowledge on the state of all system resources.",
                "An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
                "The value of distributed solutions for the resource allocation problem has been recognised by research [10].",
                "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
                "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
                "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
                "A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10].",
                "Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
                "The Agent based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
                "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
                "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
                "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
                "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
                "There has been considerable work on decentralised resource allocation techniques using game theory published over recent years.",
                "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
                "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
                "It is an ill-defined decision problem that assumes and models inductive reasoning.",
                "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
                "A variation of the El Farol problem is the so called minority game [8].",
                "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
                "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
                "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent.",
                "Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18].",
                "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
                "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
                "A resource allocation approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
                "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
                "A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks.",
                "Agents make their decisions themselves based on forecasts of the server utilisation.",
                "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
                "MODEL DESCRIPTION We model a distributed multi-agent system as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "Each agent has a number of tasks Ti that needs to be executed during its lifetime.",
                "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
                "Resources for the execution of tasks are provided by each server li.",
                "The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources.",
                "We write LS (ai) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai.",
                "Resources in the system can be used by all agents for the execution of tasks.",
                "The amount of provided resources C(li, t) of each server can vary over time.",
                "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
                "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
                "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
                "In this case, some agents must wait with their allocation request until free resources are expected.",
                "The multi-agent system model used for our simulations is illustrated in Fig. 1. 4.",
                "SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each agent.",
                "The only information required in order to make a resource allocation decision for a task is the server utilisation from completed task allocations at those servers.",
                "There is no additional information dissemination about server resource utilisation or information about free resources.",
                "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
                "Additionally, we do not have any central controlling authority.",
                "All behaviour that leads to the resource allocation is created by the effective <br>competition</br> of the agents for shared resources and is a purely emergent effect.",
                "The agents in our multi-agent system compete for resources or a set of resources to execute tasks.",
                "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
                "Our approach is based on different agent beliefs, represented by predictors and different information about their environment.",
                "Agents prefer a task allocation at a server with free resources.",
                "However, there is no way to be sure of the amount of free server resources in advance.",
                "All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution.",
                "There is no communication between agents.",
                "Actions taken by agents influence the actions of other agents indirectly.",
                "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
                "It is derived from the human way of deciding ill-defined problems.",
                "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
                "Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation.",
                "All necessary control is integrated in the agents themselves.",
                "There is no higher controlling authority, management layer for decision support or information distribution.",
                "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
                "To do so, agents use historical information from past task allocations at those resources.",
                "Based on the forecasted resource utilisation, the agent will make its resource allocation decision.",
                "After the task has finished its execution and returned the results back to the agent, the predictor performances are evaluated and history information is updated.",
                "Algorithm 1 shows the resource allocation algorithm for each agent.",
                "The agent first predicts the next steps resource load for each server with historical information (line 3-7).",
                "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
                "The agent then evaluates if any free shared resources for the task allocation are expected.",
                "In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
                "This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available.",
                "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
                "One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load.",
                "Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
                "The most recent history item is h0.",
                "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
                "Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
                "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
                "As the result, the server would have a large amount of free resources.",
                "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
                "An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a).",
                "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
                "This may change in the future as the resource load has significantly increased recently.",
                "In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation.",
                "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
                "Algorithm 1 Resource Allocation algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
                "A probability distribution is calculated from the confidence levels of the resource predictions.",
                "The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
                "The server with the highest confidence level has the biggest chance to be selected as the active server.",
                "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
                "The server with most expected free resources from the set L of server with expected free resources is chosen.",
                "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
                "However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation.",
                "In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
                "The agent will not allocate the task at a resource.",
                "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
                "After the agent execution has finished, the evaluation process described in algorithm 4 is preformed.",
                "This process is divided into three cases.",
                "First, the task was not allocated at a resource.",
                "In this case, the agent cannot decide if the decision not to allocate the task was correct or not.",
                "The agent then removes old historical data.",
                "This is necessary for a successful adaptation in the future.",
                "If the agent would not delete old historical information, the prediction would always forecast that no free resources are available.",
                "The agent would never allocate a task at one of the resources in the future.",
                "Old historical information is removed from the agents resource history using a decay rate.",
                "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
                "The current implementation uses a constant probability density function in a configurable domain.",
                "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
                "Depending on the environment, the probability density function must be altered.",
                "If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
                "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
                "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
                "The agent creates a new predictor set for this server and records the historical information.",
                "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource.",
                "The agent evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data.",
                "Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating.",
                "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation.",
                "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
                "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
                "Based on these performance ratings, the confidence levels are calculated using equation 4.",
                "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor.",
                "These values are transformed into a probability distribution.",
                "According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection.",
                "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels.",
                "Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor.",
                "This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
                "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
                "Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources.",
                "In fact, enough resources for the execution would be available.",
                "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
                "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
                "The oldest history data is overwritten if already m history values are recorded for the server.",
                "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor.",
                "This method assures that agents can compete more effectively in a changing environment.",
                "Different types of predictors are suitable for different situations and environments.",
                "Therefore, all predictors are being evaluated after each decision and the active predictor is selected.",
                "This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
                "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
                "Our self-organising approach is robust against failures of resources or agents in the system.",
                "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
                "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
                "The limitations are the reliance on historical resource utilisation information about other servers.",
                "A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource.",
                "If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers.",
                "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers.",
                "In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one.",
                "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
                "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
                "In the rest of the section, results of the experiments are presented and discussed.",
                "All experiments are conducted in a special testbed that simulates and models a multi-agent system.",
                "We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit.",
                "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
                "An event-driven model is used to trigger all activities in the system.",
                "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each agent.",
                "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
                "Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
                "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
                "The total resource load of the system is calculated as the sum of the resources load of all resources.",
                "The self-organising resource allocation algorithm has random elements.",
                "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process.",
                "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation.",
                "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
                "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
                "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server.",
                "The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources.",
                "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
                "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
                "For this time the task consumes the assigned amount of server resources.",
                "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
                "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
                "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism.",
                "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
                "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
                "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
                "The resource capacity of each server remains constant over the experiment.",
                "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
                "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
                "Figure 4 shows the results from 100 repetitions of this experiment.",
                "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
                "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
                "This initial exploration phase shows that the average resource load of each server has a similar level.",
                "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
                "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
                "They find free resources at server 2.",
                "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
                "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
                "This experiment used algorithm 2 for the selection of the active server.",
                "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
                "The resource allocation for each server is similar.",
                "The absolute amount of free resources per server is almost the same.",
                "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
                "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
                "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
                "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
                "Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment.",
                "All agents use the deterministic most free resources selection mechanism to select the active server.",
                "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
                "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
                "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
                "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
                "Fig. 4(a)). 6.",
                "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-agent systems was presented.",
                "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
                "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
                "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
                "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
                "The resource allocation is a purely emergent effect.",
                "Our mechanism demonstrates that resource allocation can be done by the effective <br>competition</br> of individual and autonomous agents.",
                "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
                "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
                "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
                "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required.",
                "Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
                "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-agent system environment.",
                "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
                "All control is implemented in the agents.",
                "A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective resource allocation.",
                "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
                "Our approach adapts to changes in the environment but it is not evolutionary.",
                "There is no discovery of new strategies by the agents.",
                "The set of predictors stays the same over the whole life.",
                "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future.",
                "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
                "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance.",
                "The decay rate is currently predefined and must be altered manually depending on the environment.",
                "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
                "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
                "We are aware of the long learning phase in environments with a large number of shared resources known by each agent.",
                "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
                "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
                "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
                "In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers.",
                "This issue needs more investigation in the future. 7.",
                "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
                "Cactus Tools for Grid Applications.",
                "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
                "Kluwer Academic Publishers. [2] W. B. Arthur.",
                "Inductive Reasoning and Bounded Rationality.",
                "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
                "Server Load Balancing.",
                "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
                "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
                "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
                "Economic Models for Resource Management and Scheduling in Grid Computing.",
                "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
                "Architectural Models for Resource Management in the Grid.",
                "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
                "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
                "A taxonomy of scheduling in general-purpose distributed computing systems.",
                "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
                "Emergence of Cooperation and Organization in an Evolutionary Game.",
                "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
                "On load balancing for distributed multiagent computing.",
                "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
                "IEEE, August 2002. [10] S. H. Clearwater.",
                "Market-based control.",
                "A Paradigm for Distributed Resource Allocation.",
                "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
                "Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications.",
                "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
                "Foster and C. Kesselman.",
                "Globus: A Metacomputing Infrastructure Toolkit.",
                "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
                "Foster, M. Livny, and S. Tuecke.",
                "Condor-G: A Computation Management Agent for Multi-Institutional Grids.",
                "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
                "Resource allocation games with changing resource capacities.",
                "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
                "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
                "Combining state and model-based approaches for mobile agent load balancing.",
                "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
                "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
                "Decentralized Adaptive Resource Allocation for Sensor Networks.",
                "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
                "An Agent-based Resource Allocation Model for Computational Grids.",
                "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
                "Adaptive Load Balancing: A Study in Multi-Agent Learning.",
                "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
                "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
                "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
                "ACM Press, May 2006. [20] W3C.",
                "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
                "Complexity: The Emerging Science at the Edge of Order and Chaos.",
                "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
                "Analyzing Market-Based Resource Allocation Strategies for the Computational Grid.",
                "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
                "Sage Science Press, 2001.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81"
            ],
            "original_annotated_samples": [
                "All behaviour that leads to the resource allocation is created by the effective <br>competition</br> of the agents for shared resources and is a purely emergent effect.",
                "Our mechanism demonstrates that resource allocation can be done by the effective <br>competition</br> of individual and autonomous agents."
            ],
            "translated_annotated_samples": [
                "Todo comportamiento que conduce a la asignación de recursos es creado por la <br>competencia</br> efectiva de los agentes por recursos compartidos y es un efecto puramente emergente.",
                "Nuestro mecanismo demuestra que la asignación de recursos puede ser realizada mediante la <br>competencia</br> efectiva de agentes individuales y autónomos."
            ],
            "translated_text": "Hacia la asignación de recursos basada en agentes autoorganizados en un entorno de múltiples servidores. Tino Schlegel1, Ryszard Kowalczyk2. Universidad de Tecnología Swinburne, Facultad de Tecnologías de la Información y la Comunicación, Hawthorn, 3122 Victoria, Australia {tschlegel1, rkowalczyk2}@ict.swin.edu.au. RESUMEN Las aplicaciones distribuidas requieren técnicas distribuidas para una asignación eficiente de recursos. Estas técnicas deben tener en cuenta la heterogeneidad y la posible falta de fiabilidad de los recursos y consumidores de recursos en entornos distribuidos. En este artículo proponemos un algoritmo distribuido que resuelve el problema de asignación de recursos en sistemas multiagentes distribuidos. Nuestra solución se basa en la autoorganización de agentes, la cual no requiere ningún facilitador o capa de gestión. La asignación de recursos en el sistema es un efecto puramente emergente. Presentamos los resultados del mecanismo de asignación de recursos propuesto en el entorno simulado de servidores múltiples estáticos y dinámicos. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Coherencia y coordinación Términos Generales Algoritmos 1. INTRODUCCIÓN Con la creciente popularidad de tecnologías de computación distribuida como Grid [12] y servicios web [20], Internet se está convirtiendo en una plataforma informática poderosa donde diferentes pares de software (por ejemplo, agentes) pueden utilizar recursos informáticos existentes para realizar tareas. En este sentido, cada agente es un consumidor de recursos que adquiere una cierta cantidad de recursos para la ejecución de sus tareas. Es difícil para un mecanismo central de asignación de recursos recopilar y gestionar la información sobre todos los recursos compartidos y consumidores de recursos para realizar de manera efectiva la asignación de recursos. Por lo tanto, se requieren soluciones distribuidas del problema de asignación de recursos. Los investigadores han reconocido estos requisitos [10] y han propuesto técnicas para la asignación de recursos distribuidos. Un tipo prometedor de enfoques distribuidos se basa en modelos de mercado económico [4], inspirados en los principios de los mercados de valores reales. Aunque esos enfoques estén distribuidos, generalmente requieren un facilitador para la fijación de precios, la búsqueda de recursos y la asignación de trabajos a los recursos [5, 9]. Otro problema principalmente sin resolver de esos enfoques es el ajuste fino del precio y el tiempo, las restricciones presupuestarias para permitir una asignación eficiente de recursos en sistemas grandes y dinámicos [22]. En este documento proponemos una solución distribuida del problema de asignación de recursos basada en la autoorganización de los consumidores de recursos en un sistema con recursos limitados. En nuestro enfoque, los agentes asignan dinámicamente tareas a servidores que proporcionan una cantidad limitada de recursos. En nuestro enfoque, los agentes seleccionan de forma autónoma la plataforma de ejecución para la tarea en lugar de pedir a un intermediario de recursos que realice la asignación. Todo el control necesario para nuestro algoritmo está distribuido entre los agentes en el sistema. Optimizan continuamente el proceso de asignación de recursos a lo largo de su vida para adaptarse a los cambios en la disponibilidad de recursos compartidos, aprendiendo de decisiones de asignación pasadas. La única información disponible para todos los agentes son la carga de recursos y la información sobre el éxito de la asignación de recursos de asignaciones pasadas. La información adicional sobre la carga de recursos de los servidores no se difunde. El concepto básico de nuestra solución está inspirado en el razonamiento inductivo y la racionalidad limitada introducida por W. Brian Arthur [2]. El mecanismo propuesto no requiere una autoridad central de control, una capa de gestión de recursos o introducir comunicación adicional entre agentes para decidir qué tarea se asigna en qué servidor. Demostramos que este mecanismo funciona bien en sistemas dinámicos con un gran número de tareas y puede adaptarse fácilmente a diferentes tamaños de sistemas. Además, el rendimiento general del sistema no se ve afectado en caso de que los agentes o servidores fallen o no estén disponibles. El enfoque propuesto proporciona una forma sencilla de implementar la asignación de recursos distribuidos y tiene en cuenta las tendencias del sistema multiagente hacia la autonomía, la heterogeneidad y la falta de fiabilidad de los recursos y agentes. Esta técnica propuesta puede ser fácilmente complementada por técnicas para encolar o rechazar solicitudes de asignación de recursos de agentes [11]. Tales capacidades de auto-gestión de agentes de software permiten una asignación de recursos confiable incluso en un entorno con proveedores de recursos poco confiables. Esto se puede lograr mediante las interacciones mutuas entre agentes aplicando técnicas de la teoría de sistemas complejos. La autoorganización de todos los agentes conduce a una autoorganización de los recursos del sistema 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS y es una propiedad emergente del sistema [21]. El resto del documento está estructurado de la siguiente manera: La siguiente sección proporciona una visión general del trabajo relacionado ya realizado en el área de equilibrio de carga, asignación de recursos o programación. La sección 3 describe el modelo de un entorno multiagente que se utilizó para realizar simulaciones con el fin de evaluar el rendimiento. Las secciones 4 y 5 describen el algoritmo de asignación de recursos distribuidos y presentan varios resultados experimentales. Un resumen, una conclusión y una perspectiva del trabajo futuro finalizan este documento. El trabajo relacionado La asignación de recursos es un problema importante en el área de la informática. En los últimos años, diferentes grupos de investigación han propuesto soluciones basadas en diferentes suposiciones y restricciones [7, 3, 15, 10]. En términos generales, la asignación de recursos es un mecanismo o política para la gestión eficiente y efectiva del acceso a un recurso limitado o conjunto de recursos por parte de sus consumidores. En el caso más simple, los consumidores de recursos solicitan a un intermediario central o despachador los recursos disponibles donde el consumidor de recursos será asignado. El corredor generalmente tiene pleno conocimiento de todos los recursos del sistema. Todas las solicitudes entrantes son dirigidas al corredor, quien es el único tomador de decisiones. En esos enfoques, el consumidor de recursos no puede influir en el proceso de decisión de asignación. El equilibrio de carga [3] es un caso especial del problema de asignación de recursos que utiliza un intermediario que intenta ser justo con todos los recursos al equilibrar la carga del sistema de manera equitativa entre todos los proveedores de recursos. Este mecanismo funciona mejor en un sistema homogéneo. Una técnica distribuida simple para la gestión de recursos es la planificación de capacidad mediante la negativa o encolamiento de agentes entrantes para evitar la sobrecarga de recursos [11]. Desde la perspectiva del propietario de recursos, esta técnica es importante para prevenir la sobrecarga en el recurso, pero no es suficiente para una asignación efectiva de recursos. Esta técnica solo puede proporcionar un buen complemento para los mecanismos de asignación de recursos distribuidos. La mayoría de las técnicas actuales para la asignación de recursos en herramientas de computación en malla como Globus [12] o Condor-G [13] coordinan la asignación de recursos con un subastador, árbitro, despachador, programador o gestor. Esos coordinadores suelen necesitar tener conocimiento global sobre el estado de todos los recursos del sistema. Un ejemplo de un algoritmo de asignación de recursos dinámicos es el proyecto Cactus [1] para la asignación de trabajos computacionales muy costosos. El valor de las soluciones distribuidas para el problema de asignación de recursos ha sido reconocido por la investigación [10]. Inspirados en los principios de los mercados de valores, se han desarrollado modelos de mercado económico para negociar recursos con el fin de regular la oferta y la demanda en la red. Estos enfoques utilizan diferentes estrategias de precios como modelos de precios publicados, diferentes métodos de subasta o un modelo de mercado de productos básicos. Los usuarios intentan comprar recursos baratos necesarios para ejecutar el trabajo, mientras que los proveedores intentan obtener la mayor ganancia posible y operar los recursos disponibles a plena capacidad. Se presenta una colección de diferentes técnicas de asignación de recursos distribuidos basadas en modelos de mercado en Clearwater [10]. Buyya et al. desarrollaron un marco de asignación de recursos basado en la regulación de la oferta y la demanda [4] para Nimrod-G [6] con el enfoque principal en los plazos de entrega de trabajos y las restricciones presupuestarias. El Modelo de Asignación de Recursos basado en Agentes (ARAM) para redes está diseñado para programar trabajos computacionalmente costosos utilizando agentes. La desventaja de este modelo es el extenso uso de intercambio de mensajes entre agentes para monitoreo periódico e intercambio de información dentro de la estructura jerárquica. Las subtareas de un trabajo migran a través de la red hasta que encuentran un recurso que cumpla con las restricciones de precio. El itinerario de migración de trabajos está determinado por los recursos que los conectan en diferentes topologías [17]. El mecanismo propuesto en este documento elimina la necesidad de intercambio periódico de información sobre las cargas de recursos y no requiere una topología de conexión entre los recursos. Se ha realizado un considerable trabajo sobre técnicas de asignación descentralizada de recursos utilizando teoría de juegos publicado en los últimos años. La mayoría de ellos están formulados como juegos repetitivos en un entorno idealista y simplificado. Por ejemplo, Arthur introdujo el problema del bar El Farol, que no permite una solución perfecta, lógica y racional. Es un problema de decisión mal definido que asume y modela el razonamiento inductivo. Probablemente sea uno de los ejemplos más estudiados de sistemas adaptativos complejos derivados de la forma en que los humanos deciden problemas mal definidos. Una variación del problema de El Farol es el llamado juego de la minoría [8]. En este juego de decisión repetitivo, un número impar de agentes debe elegir entre dos recursos basándose en información de éxito pasado, tratando de asignarse al recurso con la minoría. Galstyan et al. [14] estudiaron una variación con más de dos recursos, cambiando las capacidades de los recursos y la información de los agentes vecinos. Demostraron que los agentes pueden adaptarse de manera efectiva a las capacidades cambiantes en este entorno utilizando un conjunto de simples tablas de búsqueda (estrategias) por agente. Otra técnica distribuida que se emplea para resolver el problema de asignación de recursos se basa en el aprendizaje por refuerzo [18]. Similar a nuestro enfoque, un conjunto de agentes compiten por un número limitado de recursos basados únicamente en experiencias individuales previas. En este documento, el objetivo del sistema es maximizar el rendimiento del sistema garantizando la equidad de los recursos, medida como el tiempo promedio de procesamiento por unidad de trabajo. Se presenta un enfoque de asignación de recursos para redes de sensores basado en técnicas de autoorganización y aprendizaje por refuerzo en [16], con un enfoque principal en la optimización del consumo de energía de los nodos de la red. Propusimos un enfoque de equilibrio de carga autoorganizado para un único servidor con el objetivo de optimizar los costos de comunicación de agentes móviles. Un agente móvil rechazará una migración a un servidor de agente remoto si espera que el servidor de destino ya esté sobrecargado por otros agentes o tareas del servidor. Los agentes toman sus decisiones por sí mismos basándose en pronósticos de la utilización del servidor. En este documento se presenta una solución para un entorno de múltiples servidores sin tener en cuenta los costos de comunicación o migración. 3. DESCRIPCIÓN DEL MODELO Modelamos un sistema multiagente distribuido como una red de servidores L = {l1, . . . , lm}, agentes A = {a1, . . . , an} y tareas T = {T1, ..., Tm}. Cada agente tiene un número de tareas Ti que deben ser ejecutadas durante su vida útil. Una tarea Ti requiere U(Ti, t) recursos para su ejecución en el tiempo t, independientemente de su servidor de ejecución. Los recursos para la ejecución de tareas son proporcionados por cada servidor li. La ubicación de la ejecución de las tareas en general está especificada por el mapa L: T × t → L. Un agente debe conocer la existencia de recursos del servidor para asignar tareas en esos recursos. Escribimos LS (ai) The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 75 Recursos del Sistema Anfitrión l4 Anfitrión l3 Anfitrión l2 2a 3a 4a a Anfitrión l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figura 1: Una ilustración de nuestro modelo de múltiples servidores con recursos exclusivos y compartidos para la ejecución del agente. para abordar el conjunto de recursos conocidos por el agente ai. Los recursos en el sistema pueden ser utilizados por todos los agentes para la ejecución de tareas. La cantidad de recursos proporcionados C(li, t) de cada servidor puede variar con el tiempo. La utilización de recursos de un servidor en el tiempo t se calcula utilizando la ecuación 1, sumando el consumo de recursos U(Tj, t) de cada tarea Tj que se ejecuta en el recurso en el tiempo t. Todas las unidades de recursos utilizadas en nuestro modelo representan métricas reales como memoria o ciclos de procesador. Además del caso en que la cantidad total de recursos del sistema es suficiente para ejecutar todas las tareas, también nos interesa el caso en que no se proporcionan suficientes recursos del sistema para cumplir con todas las solicitudes de asignación. Es decir, la capacidad total de recursos compartidos es menor que la cantidad de recursos solicitados por los agentes. En este caso, algunos agentes deben esperar con su solicitud de asignación hasta que se esperen recursos libres. El modelo de sistema multiagente utilizado para nuestras simulaciones está ilustrado en la Figura 1.4. ASIGNACIÓN DE RECURSOS AUTOORGANIZADA El algoritmo de asignación de recursos descrito en esta sección está integrado en cada agente. La única información necesaria para tomar una decisión de asignación de recursos para una tarea es la utilización del servidor de las asignaciones de tareas completadas en esos servidores. No hay una difusión adicional de información sobre la utilización de recursos del servidor o información sobre recursos libres. Nuestra solución demuestra que los agentes pueden autoorganizarse en un entorno dinámico sin necesidad de información de monitoreo activo que genere una gran sobrecarga de tráfico en la red. Además, no tenemos ninguna autoridad central de control. Todo comportamiento que conduce a la asignación de recursos es creado por la <br>competencia</br> efectiva de los agentes por recursos compartidos y es un efecto puramente emergente. Los agentes en nuestro sistema multiagente compiten por recursos o un conjunto de recursos para ejecutar tareas. La acción colectiva de estos agentes cambia el entorno y, con el paso del tiempo, tienen que adaptarse a estos cambios para competir de manera más efectiva en el entorno recién creado. Nuestro enfoque se basa en diferentes creencias de los agentes, representadas por predictores y diferente información sobre su entorno. Los agentes prefieren una asignación de tareas en un servidor con recursos disponibles. Sin embargo, no hay forma de estar seguro de la cantidad de recursos del servidor disponibles de antemano. Todos los agentes tienen las mismas preferencias y un agente asignará una tarea en un servidor si espera tener suficientes recursos libres para su ejecución. No hay comunicación entre agentes. Las acciones tomadas por los agentes influyen en las acciones de otros agentes de forma indirecta. El mecanismo aplicado está inspirado en el razonamiento inductivo y los principios de racionalidad limitada [2]. Se deriva de la forma humana de resolver problemas mal definidos. Los humanos tienden a tener en cuenta muchas hipótesis y actuar en base a la más plausible. Por lo tanto, cada agente lleva un registro del rendimiento de una colección privada de sus predictores y selecciona aquel que actualmente sea más prometedor para la toma de decisiones. 4.1 Algoritmo de asignación de recursos Esta sección describe el mecanismo de decisión para nuestra asignación de recursos autoorganizada. Todo el control necesario está integrado en los propios agentes. No hay una autoridad superior de control, capa de gestión para apoyo en la toma de decisiones o distribución de información. Todos los agentes tienen un conjunto de predictores para cada recurso con el fin de pronosticar la futura utilización de estos servidores para la asignación potencial de tareas. Para hacerlo, los agentes utilizan información histórica de asignaciones de tareas pasadas en esos recursos. Basándose en la utilización de recursos pronosticada, el agente tomará su decisión de asignación de recursos. Después de que la tarea haya finalizado su ejecución y devuelto los resultados al agente, se evalúan las actuaciones del predictor y se actualiza la información histórica. El Algoritmo 1 muestra el algoritmo de asignación de recursos para cada agente. El agente primero predice la carga de recursos de los próximos pasos para cada servidor con información histórica (línea 3-7). Si la carga de recursos predicha más el consumo de recursos de las tareas está por debajo de la última capacidad de servidor conocida, este servidor se agrega a la lista de candidatos para la asignación. El agente luego evalúa si se esperan recursos compartidos gratuitos para la asignación de tareas. En el caso de que no se esperen recursos gratuitos (línea 9), el agente explorará los recursos asignando la tarea a un servidor seleccionado al azar de entre todos los servidores no predecibles para recopilar información sobre la carga de recursos. Este es el caso estándar al comienzo del ciclo de vida del agente, ya que no hay información disponible sobre el entorno. La predicción de la carga de recursos en sí misma utiliza un conjunto de r predictores P(a, l) := {pi|1 ≤ i ≤ r} por servidor. Uno de los predictores pA ∈ P de cada conjunto se llama predictor activo, el cual pronostica la carga de recursos de los próximos pasos. Cada predictor es una función P: H → ℵ+ ∪ {0} del espacio de datos históricos H a un número entero no negativo, que es el valor pronosticado. Por ejemplo, un predictor podría pronosticar una carga de recursos igual a la cantidad promedio de recursos ocupados durante la última ejecución en este recurso. Un historial H de información de carga de recursos es una lista de hasta m elementos de historial hi = (xi, yi), que incluyen la fecha de observación xi y el valor observado yi. El elemento más reciente del historial es h0. Nuestro algoritmo utiliza un conjunto de predictores en lugar de solo uno, para evitar que todos los agentes tomen la misma decisión basada en el valor predicho, lo que invalidaría sus creencias. Imagina que solo un recurso compartido es conocido por un número de agentes que utilizan un predictor para pronosticar el 76 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Carga de Recursos Tiempo (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figura 2: (a) Información de carga de recursos recopilada de asignaciones de tareas anteriores que se utiliza para predicciones futuras. (b) Distribución de probabilidad de los predictores para seleccionar el nuevo predictor activo. mismo valor que la última utilización conocida de recursos del servidor. Todos los agentes que asignaron una tarea en un servidor que estaba ligeramente sobrecargado rechazarían otra asignación en este servidor, ya que esperan que el servidor vuelva a estar sobrecargado según las predicciones. Como resultado, el servidor tendría una gran cantidad de recursos libres. Un conjunto de diferentes predictores que predicen diferentes valores evita esta situación de invalidar las creencias de los agentes [19]. Un ejemplo de información de carga de recursos recopilada de las últimas 5 visitas de un agente a un recurso compartido se puede ver en la Figura 2(a). Muestra que el recurso fue visitado con frecuencia, lo que significa que había recursos gratuitos disponibles para la ejecución y no era necesario explorar otros servidores. Esto puede cambiar en el futuro ya que la carga de recursos ha aumentado significativamente recientemente. En el caso en que el conjunto de servidores que se predice que tienen recursos disponibles no esté vacío (línea 13), el agente selecciona uno de ellos para su asignación. Hemos implementado dos algoritmos alternativos para la selección de un servidor para la asignación de tareas. Algoritmo 1 Algoritmo de asignación de recursos de un agente 1 L ← ∅ //servidor con recursos libres 2 u ← U(T, t + 1) //consumo de recursos de la tarea 3 para todo P(a, l)|l ∈ LS (a) hacer 4 U(l) ← predicción de carga de recursos (P(a, l), t + 1) 5 si U(l) + u ≤ C(l) entonces 6 L ← L ∪ {P(a, l)} 7 fin si 8 fin para 9 si L = ∅ entonces 10 //todos los recursos compartidos impredecibles 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← un elemento aleatorio de E 13 else 14 allocationServer ← selección de servidor (L) 15 fin si 16 devolver allocationServer El Algoritmo 2 muestra el primer método, que es una selección no determinista según la previsibilidad de la utilización de recursos del servidor. Una distribución de probabilidad se calcula a partir de los niveles de confianza de las predicciones de recursos. El nivel de confianza depende de tres factores: la precisión del predictor activo, la cantidad de información histórica sobre el servidor y la edad promedio de la información histórica (ver Ecuación 3). El servidor con el nivel de confianza más alto tiene la mayor probabilidad de ser seleccionado como el servidor activo. G(P) = w1 · tamaño(H) m + w2 · Edad(H) máx Edad(H) + w3 · g(p) máx (g(p)) (3) donde: wi − pesos tamaño(H) − número de datos en el historial m − número máximo de valores históricos Edad(H) − edad promedio de los datos históricos g(p) − ver ecuación 4 Algoritmo 2 selecciónServidor(L) - mejor servidor predecible 1 para todos los P(a, l) ∈ L hacer 2 calcular G(P) 3 fin para 4 transformar todos los G(P) en una distribución de probabilidad 5 devolver l ∈ LS seleccionado de acuerdo con la distribución de probabilidad Algoritmo 3 selecciónServidor(L) - más recursos libres 1 para todos los P(a, l) ∈ L hacer 2 c(l) ← C(l) − Ul 3 fin para 4 devolver l ∈ LS |c(l) es máximo El segundo método de selección alternativo de un servidor del conjunto de servidores predichos con recursos libres es determinista y se muestra en el algoritmo 3. Se elige el servidor con la mayor cantidad esperada de recursos gratuitos del conjunto L de servidores con recursos gratuitos esperados. En el caso en que todos los agentes predigan que hay más recursos disponibles en un servidor en particular, todos los agentes asignarán la tarea a este servidor, lo que invalidaría las creencias de los agentes. Sin embargo, nuestros experimentos muestran que la información de historial individual y la selección no determinista del predictor activo generalmente evitan esta situación. En caso de que el algoritmo de asignación de recursos no devuelva ningún servidor (Alg. 1, línea 16), no se recomienda asignar un recurso. El agente no asignará la tarea a un recurso. Este caso ocurre solo si es posible predecir la carga de recursos para todos los servidores pero no se esperan recursos libres. Después de que la ejecución del agente haya finalizado, se realiza el proceso de evaluación descrito en el algoritmo 4. Este proceso se divide en tres casos. Primero, la tarea no fue asignada a un recurso. En este caso, el agente no puede decidir si la decisión de no asignar la tarea fue correcta o no. El agente luego elimina los datos históricos antiguos. Esto es necesario para una adaptación exitosa en el futuro. Si el agente no eliminara la información histórica antigua, la predicción siempre pronosticaría que no hay recursos disponibles gratuitos. El agente nunca asignaría una tarea a uno de los recursos en el futuro. La información histórica antigua se elimina del historial de recursos de los agentes utilizando una tasa de descomposición. La tasa de decaimiento es una función de distribución acumulativa que calcula la probabilidad de que un elemento histórico sea eliminado después de haber alcanzado un cierto The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 77 Edad de los datos históricos Tasa de decaimiento 0 1 más antiguo Figura 3: Tasa de decaimiento de la edad de la información histórica. La implementación actual utiliza una función de densidad de probabilidad constante en un dominio configurable. La Figura 3 muestra un ejemplo de una función de distribución acumulativa para la tasa de decaimiento. Dependiendo del entorno, la función de densidad de probabilidad debe ser modificada. Si el número de servidores potenciales por agente es alto, la información histórica debe mantenerse por más tiempo para evitar la exploración de recursos no explorados. Además, un entorno dinámico requiere información más actualizada para realizar predicciones más fiables. El segundo caso en el proceso de evaluación (Alg. 4, línea 5) describe las acciones tomadas después de que un servidor fue visitado por primera vez. El agente crea un nuevo conjunto de predictores para este servidor y registra la información histórica. Todos los predictores para este conjunto son elegidos al azar de un conjunto predefinido. g(p) = l i=0 ri (4) donde: ri = ⎧ ⎨ ⎩ 1 si la decisión i-ésima es correcta 0 si el resultado i-ésimo es desconocido −1 si la decisión i-ésima es incorrecta El caso general (Alg. 4, línea 8) es la evaluación después de que el agente asignó la tarea a un recurso. El agente evalúa todos los predictores del conjunto de predictores para este recurso al predecir la carga del recurso con todos los predictores basados en los datos históricos antiguos. Los predictores que hicieron una predicción correcta, lo que significa que la asignación de recursos fue correcta, recibirán una calificación positiva. Este es el caso en el que el recurso no estaba sobrecargado y se predijeron recursos libres para la ejecución, o el recurso estaba sobrecargado y este predictor habría evitado la asignación. Todos los predictores que predijeron valores que llevarían a decisiones incorrectas recibirán calificaciones negativas. En todos los demás casos, que incluye cuando no era posible hacer una predicción, se otorga una calificación neutral a los pronosticadores. Basándose en estas calificaciones de rendimiento, los niveles de confianza se calculan utilizando la ecuación 4. La confianza para todos los predictores que no pueden predecir con la información histórica actual sobre el servidor se establece en cero para evitar la selección de estos como el nuevo predictor activo. Estos valores se transforman en una distribución de probabilidad. Según esta distribución de probabilidad, el nuevo predictor activo se elige e implementa mediante una selección de ruleta. La Figura 2(b) ilustra las probabilidades de un conjunto de 10 predictores, las cuales han sido calculadas a partir de los niveles de confianza de los predictores. Aunque el predictor 9 tiene la probabilidad de selección más alta, no fue elegido por el proceso de selección de la ruleta como el predictor activo. Esta selección no determinista de predictores evita la invalidación de las creencias de los agentes en caso de que los agentes tengan el mismo conjunto de predictores. La precisión de la predicción, que es el error de la predicción en comparación con el valor observado, no se tiene en cuenta. Supongamos que el predictor activo predice ligeramente por encima de la capacidad de recursos, lo que no conduce a una asignación de recursos. De hecho, habría suficientes recursos disponibles para la ejecución. Una predicción menos precisa que está muy por debajo de la capacidad llevaría a la decisión correcta y, por lo tanto, es preferible. La última acción del algoritmo de evaluación (Alg. 4, línea 22) actualiza el historial con la información más reciente de carga de recursos del servidor. Los datos de la historia más antigua se sobrescriben si ya se han registrado m valores de historia para el servidor. Algoritmo 4 Evaluación de Decisiones 1 si l ∈ LE entonces 2 para todos los P(a, l)|l ∈ LS (a) hacer 3 evaporar datos históricos antiguos 4 fin para 5 sino si P(a, l) = nulo entonces 6 crear (P(a, l)) 7 actualizar H(l) 8 sino 9 para todos los p ∈ P(a, l) hacer 10 pred ← predicción de carga de recursos(p) 11 si (U(l) ≤ C(l) Y pred + U(a, t) ≤ C(l)) O (U(l) > C(l) Y pred + U(a, t) > C(l)) entonces 12 agregar calificación positiva(p) 13 sino si U(l) ≤ C(l) Y pred + U(a, t) > C(l) O U(l) ≤ C(l) Y pred + U(a, t) > C(l) entonces 14 agregar calificación negativa(p) 15 sino 16 agregar calificación neutral(p) 17 fin si 18 fin para 19 calcular todos los g(p); g(p) ← 0, si p no está funcionando 20 transformar todos los g(p) en una distribución de probabilidad 21 pA ← p ∈ P(a, l) es seleccionado de acuerdo a esta distribución de probabilidad 22 actualizar H(l) 23 fin si 4.2 Observaciones y Limitaciones del Enfoque Nuestro mecanismo de predicción utiliza varios tipos de predictores simples en lugar de uno sofisticado. Este método asegura que los agentes puedan competir de manera más efectiva en un entorno cambiante. Diferentes tipos de predictores son adecuados para diferentes situaciones y entornos. Por lo tanto, todos los predictores se evalúan después de cada decisión y se selecciona el predictor activo. Este carácter no determinista del nuevo predictor activo respalda que las creencias de los agentes no serán invalidadas, lo cual ocurre en el caso de que todos los predictores estén tomando la misma decisión. Especialmente si solo hay un recurso compartido disponible y todos los agentes tienen la opción de ir a este recurso compartido o no [19]. Nuestro enfoque de autoorganización es robusto frente a fallos de recursos o agentes en el sistema. Si se unen o se van, el sistema puede autoorganizarse rápidamente y adaptarse a las nuevas condiciones. No hay cuellos de botella clásicos ni un único punto de falla como en los mecanismos centralizados. Las limitaciones son la dependencia de la información de utilización de recursos históricos de otros servidores. Un pronóstico de la utilización de recursos de un servidor remoto solo es posible si un agente tiene una cantidad de información histórica sobre un recurso compartido. Si el número de servidores por agente es muy grande, no hay una manera eficiente de recopilar información histórica sobre los servidores remotos. Este problema ocurre si la cantidad de recursos compartidos proporcionados es de 78. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) es limitada y no es suficiente para todos los consumidores de recursos. En este caso, un agente intentaría aleatoriamente todos los servidores conocidos hasta encontrar uno con recursos disponibles o no haya ninguno. En el peor de los casos, para cuando se prueben todos los servidores, la información histórica de los servidores ya estará desactualizada. EVALUACIÓN EXPERIMENTAL La primera parte de esta sección ofrece un breve resumen de la configuración de nuestro entorno de simulación. En el resto de la sección, se presentan y discuten los resultados de los experimentos. Todos los experimentos se llevan a cabo en un banco de pruebas especial que simula y modela un sistema multiagente. Hemos implementado este banco de pruebas en el lenguaje de programación Java, independiente de cualquier conjunto de herramientas de agente específico. Permite una variedad de experimentos en entornos estables y dinámicos con un número configurable de agentes, tareas y servidores. Se utiliza un modelo basado en eventos para activar todas las actividades en el sistema. Para todas las simulaciones, limitamos el número de datos históricos para cada servidor a 10, el número de calificaciones de rendimiento por predictor a 10 y asignamos 10 predictores a cada conjunto de predictores para cada agente. Todos los predictores son elegidos al azar de un conjunto predefinido arbitrario de 32 predictores del siguiente tipo. Los predictores difieren en diferentes ciclos o tamaños de ventana. - Predictor de n-ciclos: p(n) = yn utiliza el valor de la historia en la posición n-ésima desde el final. - Predictor de n-media: p(n) = 1 n · n i=1 yi utiliza el valor medio de los n últimos valores de la historia. - Predictor de regresión lineal de n: p(n, t) = a·t+b utiliza el valor de regresión lineal de los últimos n valores de la historia, donde a, b se calculan utilizando regresión lineal con ajuste de mínimos cuadrados considerando los últimos n datos de la historia. - Predictor de distribución de n: utiliza un valor aleatorio de la distribución de frecuencia de los n últimos valores de la historia. - Predictor de espejo de n: p(n) = 2 · H − yn utiliza la imagen de espejo alrededor de la media de todos los valores de la historia del n-ésimo valor de la historia. La eficiencia de nuestra propuesta de asignación de recursos autoorganizada se evalúa mediante el desarrollo de carga de recursos de cada servidor durante la simulación, así como el desarrollo acumulado de carga de recursos totales sobre todos los recursos compartidos. Las cargas de recursos para cada servidor se calculan utilizando la ecuación 1 como la suma del consumo de recursos de todos los agentes actualmente ejecutados en este servidor. La carga total de recursos del sistema se calcula como la suma de la carga de recursos de todos los recursos. El algoritmo de asignación de recursos autoorganizado tiene elementos aleatorios. Por lo tanto, los resultados presentados muestran valores medios y desviación estándar calculados sobre 100 experimentos repetidos. 5.1 Configuración Experimental Los siguientes parámetros tienen un impacto en el proceso de asignación de recursos. Damos una visión general de los parámetros y una breve descripción. - Agentes: El número de agentes involucrados en la asignación de recursos. Este número varía en los experimentos entre 650 y 750 dependiendo de la cantidad total de recursos del sistema disponibles. - Consumo de recursos: Cada tarea consume recursos del servidor para su ejecución. El consumo de recursos se asigna aleatoriamente a cada tarea antes de su asignación de un intervalo. El consumo de recursos se especifica en unidades de recursos que corresponden a métricas del mundo real como la memoria o los ciclos del procesador. - Servidor de inicio de agentes: Todos los agentes se encuentran en un servidor de inicio de agentes. Los recursos de esos servidores no son considerados en nuestra simulación y no afectan el rendimiento de la asignación de recursos. - Recursos del servidor: Los experimentos utilizan servidores con diferentes cantidades de recursos compartidos disponibles. El primer experimento se lleva a cabo en un entorno de servidor estático que proporciona la misma cantidad de recursos compartidos, mientras que el otro experimento varía los recursos de servidor disponibles durante la simulación. La cantidad total de recursos permanece constante en ambos experimentos. - Tiempo de ejecución: El tiempo de ejecución de una tarea para la ejecución, independiente de la plataforma de ejecución. Por esta vez, la tarea consume la cantidad asignada de recursos del servidor. Este parámetro se asigna aleatoriamente antes de la ejecución. - Tiempo de creación de la tarea: El tiempo antes de que se cree la siguiente tarea después de la finalización exitosa o fallida. Este parámetro influye en la antigüedad de la información histórica sobre los recursos y tiene una gran influencia en la duración de la fase inicial de adaptación. Este parámetro se asigna aleatoriamente después de que se haya completado la tarea. 5.2 Resultados Experimentales Esta sección muestra los resultados de experimentos seleccionados que demuestran el rendimiento de nuestro mecanismo propuesto de asignación de recursos. El primer experimento muestra el rendimiento en un entorno estable donde un número de agentes asignan tareas a servidores que proporcionan una cantidad constante de recursos. El segundo experimento se llevó a cabo en un entorno de servidor dinámico con un número constante de agentes. El primer experimento muestra nuestro modelo en un entorno estable de 3 servidores que proporcionan un total de 7000 unidades de recursos. La capacidad de recursos de cada servidor permanece constante durante el experimento. Utilizamos 650 agentes con los parámetros del tiempo de ejecución entre 1 y 15 unidades de tiempo y un tiempo de creación de tarea en el intervalo [0 − 30] unidades de tiempo. El consumo de recursos de las tareas se asigna aleatoriamente en el intervalo de [1 - 45] unidades de recurso. La Figura 4 muestra los resultados de 100 repeticiones de este experimento. La Figura 4(a) muestra que la cantidad total de recursos proporcionados es mayor que la demanda de recursos en promedio. Al comienzo del experimento, todos los agentes asignan sus tareas aleatoriamente en uno de los servidores disponibles y exploran las capacidades y utilizaciones de recursos disponibles durante aproximadamente 150 unidades de tiempo. Esta fase inicial de exploración muestra que la carga promedio de recursos de cada servidor tiene un nivel similar. Esto provoca una situación de sobrecarga en el servidor 1 debido a su baja capacidad de recursos compartidos, y una gran cantidad de recursos libres en el servidor 2. Los agentes que asignaron tareas al servidor 1 detectan la situación de sobrecarga y exploran de forma aleatoria otros servidores disponibles. Encuentran recursos gratuitos en el servidor 2. Después del período de aprendizaje, los agentes se han autoorganizado en este entorno estable y han encontrado una solución estable para la asignación de The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Tiempo 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (b) Carga de recursos servidor 0 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (c) Carga de recursos servidor 1 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 2 Figura 4: Resultados del experimento 1 en un entorno estático de 3 servidores promediados sobre 100 repeticiones. todas las tareas. La desviación estándar de las cargas de recursos es pequeña para cada servidor, lo que indica que nuestro enfoque distribuido encuentra soluciones estables en casi cada ejecución. Este experimento utilizó el algoritmo 2 para la selección del servidor activo. También realizamos el mismo experimento con el mecanismo de selección de recursos más libre para seleccionar el servidor activo. La asignación de recursos para cada servidor es similar. La cantidad absoluta de recursos gratuitos por servidor es casi la misma. El Experimento 2 se llevó a cabo en un entorno dinámico de 3 servidores con un total de 750 agentes. La cantidad de recursos del servidor 0 y del servidor 1 cambia periódicamente, mientras que la cantidad total de recursos disponibles permanece constante. El servidor 0 tiene una capacidad inicial de 1000 unidades, mientras que el servidor 1 comienza con una capacidad de 4000 unidades. El cambio en la capacidad comienza después de 150 unidades de tiempo, que es aproximadamente al final de la fase de aprendizaje. La figura 5 (b, c, d) muestra el comportamiento de nuestra asignación de recursos autoorganizada en este entorno. Todos los agentes utilizan el mecanismo de selección de recursos más libres determinístico para seleccionar el servidor activo. Se puede observar en la Fig. 5(b) y 5(c) que el número de recursos asignados al servidor 0 y al servidor 1 cambia periódicamente con la cantidad de recursos proporcionados. Esto demuestra que los agentes pueden percibir los recursos disponibles en este entorno dinámico y son capaces de adaptarse a esos cambios. El desarrollo de la carga de recursos del servidor 2 (ver Fig. 5(d)) muestra un cambio periódico porque algunos agentes intentan asignar tareas a este servidor en caso de que su servidor previamente preferido reduzca la cantidad de recursos compartidos. La carga total de recursos de todos los recursos compartidos es constante a lo largo de los experimentos, lo que indica que todos los agentes asignan sus tareas a uno de los recursos compartidos. Fig. 4(a)). 6.\nFig. 4(a)). 6. CONCLUSIONES Y TRABAJO FUTURO En este artículo se presentó una técnica de asignación de recursos distribuida autoorganizativa para sistemas multiagente. Permitimos a los agentes seleccionar la plataforma de ejecución para sus tareas ellos mismos antes de cada ejecución en tiempo de ejecución. En nuestro enfoque, los agentes compiten por una asignación en uno de los 0 500 1,000 1,500 2,000 Tiempo 0 2,500 5,000 7,500 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (b) Carga de recursos servidor 1 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (c) Carga de recursos servidor 2 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 3 Figura 5: Resultados del experimento 2 en un entorno de servidor dinámico promediado en 100 repeticiones. recurso compartido disponible. Los agentes perciben su entorno de servidor y adaptan sus acciones para competir de manera más eficiente en el nuevo entorno creado. Este proceso es adaptativo y tiene un fuerte retroalimentación, ya que las decisiones de asignación influencian indirectamente las decisiones de otros agentes. La asignación de recursos es un efecto puramente emergente. Nuestro mecanismo demuestra que la asignación de recursos puede ser realizada mediante la <br>competencia</br> efectiva de agentes individuales y autónomos. Ni necesitan coordinación o información de una autoridad superior ni se requiere una comunicación directa adicional entre agentes. Este mecanismo fue inspirado por el razonamiento inductivo y los principios de racionalidad limitada, lo que permite a los agentes adaptar sus estrategias para competir de manera efectiva en un entorno dinámico. En caso de que un servidor no esté disponible, los agentes pueden adaptarse rápidamente a esta nueva situación explorando nuevos recursos o permaneciendo en el servidor local si no es posible una asignación. Especialmente en entornos dinámicos y escalables como los sistemas de rejilla, se requiere un mecanismo robusto y distribuido para la asignación de recursos. Nuestro enfoque de asignación de recursos autoorganizados fue evaluado con una serie de experimentos de simulación en un entorno dinámico de agentes y recursos del servidor. Los resultados presentados para este nuevo enfoque de optimización de migración estratégica son muy prometedores y justifican una mayor investigación en un entorno real de sistema multiagente. Es una política distribuida, escalable y fácil de entender para la regulación de la oferta y la demanda de recursos. Todo el control se implementa en los agentes. Un mecanismo de decisión simple basado en diferentes creencias del agente crea un comportamiento emergente que conduce a una asignación efectiva de recursos. Este enfoque puede ser fácilmente ampliado o respaldado por mecanismos de equilibrio/cola de recursos proporcionados por los recursos. Nuestro enfoque se adapta a los cambios en el entorno pero no es evolutivo. No hay descubrimiento de nuevas estrategias por parte de los agentes. El conjunto de predictores permanece igual a lo largo de toda la vida. De hecho, creemos que esto podría mejorar aún más el comportamiento de los sistemas a lo largo de un período prolongado y podría ser el 80 The Sixth Intl. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) investigará en el futuro. La evolución sería muy lenta y selectiva y no influiría en el comportamiento del sistema en un período a corto plazo que está cubierto por nuestros resultados experimentales. En un futuro cercano investigaremos si es posible una adaptación automática de la tasa de decaimiento de la información histórica en nuestro algoritmo y si puede mejorar el rendimiento de la asignación de recursos. La tasa de descomposición está actualmente predefinida y debe ser alterada manualmente dependiendo del entorno. Un gran número de recursos compartidos requiere información histórica más antigua para evitar una exploración de recursos demasiado frecuente. Por el contrario, un entorno dinámico con capacidades variables requiere información más actualizada para realizar predicciones más fiables. Somos conscientes de la larga fase de aprendizaje en entornos con un gran número de recursos compartidos conocidos por cada agente. En caso de que los agentes soliciten más recursos de los que los servidores compartidos proporcionan, todos los agentes explorarán aleatoriamente todos los servidores conocidos. Este proceso de adquirir información de carga de recursos sobre todos los servidores puede llevar mucho tiempo en el caso de que no se proporcionen recursos compartidos suficientes para todas las tareas. En el peor de los casos, para cuando se explore todos los servidores, la información histórica de algunos servidores podría estar desactualizada y la exploración comenzará de nuevo. En esta situación, es difícil para un agente recopilar eficientemente información histórica sobre todos los servidores remotos. Este tema necesita más investigación en el futuro. REFERENCIAS [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel y J. Shalf. Herramientas de Cactus para Aplicaciones de Red. En Cluster Computing, volumen 4, páginas 179-188, Hingham, MA, EE. UU., 2001. Kluwer Academic Publishers. [2] W. B. Arthur.\nEditorial Kluwer Academic. [2] W. B. Arthur. Razonamiento inductivo y racionalidad limitada. American Economic Review (Papers and Proceedings), 84(2):406-411, mayo de 1994. [3] T. Bourke. Balanceo de carga del servidor. OReilly Media, 1ª edición, agosto de 2001. [4] R. Buyya. Gestión y programación de recursos distribuidos basada en economía para la computación en malla. Tesis doctoral, Universidad de Monash, Melbourne, Australia, mayo de 2002. [5] R. Buyya, D. Abramson, J. Giddy y H. Stockinger. Modelos económicos para la gestión de recursos y programación en la computación en malla. Número especial sobre Entornos de Computación en Red de la Revista Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin y D. DiNucci. Modelos arquitectónicos para la gestión de recursos en la red. En Actas del Primer Taller Internacional sobre Computación en Red, páginas 18-35. Springer LNCS, 2000. [7] T. L. Casavant y J. G. Kuhl. Una taxonomía de programación en sistemas informáticos distribuidos de propósito general. IEEE Transactions on Software Engineering, 14(2):141-154, febrero de 1988. [8] D. Challet y Y. Zhang. Aparición de la cooperación y la organización en un juego evolutivo. Physica A, 407(246), 1997. [9] K.-P. Chow y Y.-K. Kwok. En equilibrio de carga para computación multiagente distribuida. En IEEE Transactions on Parallel and Distributed Systems, volumen 13, páginas 787-801. IEEE, agosto de 2002. [10] S. H. Clearwater. Control basado en el mercado. Un paradigma para la asignación distribuida de recursos. World Scientific, Singapur, 1996. [11] C. Fl¨us. Planificación de capacidad de sistemas de agentes móviles para el diseño eficiente de aplicaciones de intranet. Tesis doctoral, Universidad de Duisburg-Essen (Alemania), febrero de 2005. [12] I. Foster y C. Kesselman. Globus: Un conjunto de herramientas de infraestructura de metacomputación. Revista Internacional de Aplicaciones de Supercomputación, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I. Foster, M. Livny y S. Tuecke. Condor-G: Un agente de gestión de computación para redes de múltiples instituciones. Computación en clúster, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar y K. Lerman. Juegos de asignación de recursos con capacidades de recursos cambiantes. En Actas de la segunda conferencia internacional conjunta sobre agentes autónomos y sistemas multiagente, páginas 145 - 152, Melbourne, Australia, 2003. ACM Press, Nueva York, NY, EE. UU. [15] C. Georgousopoulos y O. F. Rana. Combinando enfoques basados en el estado y en el modelo para el equilibrio de carga de agentes móviles. En SAC 03: Actas del simposio de computación aplicada de ACM de 2003, páginas 878-885, Nueva York, NY, EE. UU., 2003. ACM Press. [16] G. Mainland, D. C. Parkes y M. Welsh. Asignación descentralizada y adaptativa de recursos para redes de sensores. En Actas del 2º Simposio USENIX sobre Diseño e Implementación de Sistemas de Red (NSDI 05), mayo de 2005. [17] S. Manvi, M. Birje y B. Prasad. Un modelo de asignación de recursos basado en agentes para rejillas computacionales. Sistemas Multiagente y de Red - Una Revista Internacional, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham y M. Tennenholtz. Equilibrio de carga adaptativo: Un estudio en el aprendizaje multiagente. En Journal of Artificial Intelligence Research, volumen 2, páginas 475-500, 1995. [19] T. Schlegel, P. Braun y R. Kowalczyk. Hacia Agentes Móviles Autónomos con Comportamiento de Migración Emergente. En Actas de la Quinta Conferencia Internacional Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 2006), Hakodate (Japón), páginas 585-592. ACM Press, mayo de 2006. [20] W3C. Actividad de servicios web, 2002. http://www.w3.org/2002/ws - última visita 23.10.2006. [21] M. M. Waldrop. Complejidad: La ciencia emergente en el límite entre el orden y el caos. Simon & Schuster, 1ª edición, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik y T. Bryan. Analizando estrategias de asignación de recursos basadas en el mercado para la red computacional. En la Revista Internacional de Aplicaciones de Computación de Alto Rendimiento, volumen 15, páginas 258-281. Sage Science Press, 2001. \n\nEditorial Sage Science, 2001. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 81 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "predictor": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Towards Self-organising Agent-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
                "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
                "In this paper we propose a distributed algorithm that solves the resource allocation problem in distributed multiagent systems.",
                "Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer.",
                "The resource allocation in the system is a purely emergent effect.",
                "We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
                "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
                "In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
                "Hence, distributed solutions of the resource allocation problem are required.",
                "Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation.",
                "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
                "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
                "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].",
                "In this paper we propose a distributed solution of the resource allocation problem based on self-organisation of the resource consumers in a system with limited resources.",
                "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
                "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
                "All control needed for our algorithm is distributed among the agents in the system.",
                "They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
                "The only information available to all agents are resource load and allocation success information from past resource allocations.",
                "Additional resource load information about servers is not disseminated.",
                "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
                "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
                "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
                "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-agent system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11].",
                "Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.",
                "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
                "Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.",
                "Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.",
                "Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results.",
                "A summary, conclusion and outlook to future work finish this paper. 2.",
                "RELATED WORK Resource allocation is an important problem in the area of computer science.",
                "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
                "Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
                "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
                "The broker usually has full knowledge about all system resources.",
                "All incoming requests are directed to the broker who is the solely decision maker.",
                "In those approaches, the resource consumer cannot influence the allocation decision process.",
                "Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
                "This mechanism works best in a homogeneous system.",
                "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
                "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation.",
                "This technique can only provide a good supplement for distributed resource allocation mechanisms.",
                "Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
                "Those coordinators usually need to have global knowledge on the state of all system resources.",
                "An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
                "The value of distributed solutions for the resource allocation problem has been recognised by research [10].",
                "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
                "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
                "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
                "A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10].",
                "Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
                "The Agent based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
                "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
                "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
                "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
                "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
                "There has been considerable work on decentralised resource allocation techniques using game theory published over recent years.",
                "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
                "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
                "It is an ill-defined decision problem that assumes and models inductive reasoning.",
                "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
                "A variation of the El Farol problem is the so called minority game [8].",
                "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
                "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
                "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent.",
                "Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18].",
                "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
                "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
                "A resource allocation approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
                "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
                "A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks.",
                "Agents make their decisions themselves based on forecasts of the server utilisation.",
                "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
                "MODEL DESCRIPTION We model a distributed multi-agent system as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "Each agent has a number of tasks Ti that needs to be executed during its lifetime.",
                "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
                "Resources for the execution of tasks are provided by each server li.",
                "The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources.",
                "We write LS (ai) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai.",
                "Resources in the system can be used by all agents for the execution of tasks.",
                "The amount of provided resources C(li, t) of each server can vary over time.",
                "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
                "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
                "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
                "In this case, some agents must wait with their allocation request until free resources are expected.",
                "The multi-agent system model used for our simulations is illustrated in Fig. 1. 4.",
                "SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each agent.",
                "The only information required in order to make a resource allocation decision for a task is the server utilisation from completed task allocations at those servers.",
                "There is no additional information dissemination about server resource utilisation or information about free resources.",
                "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
                "Additionally, we do not have any central controlling authority.",
                "All behaviour that leads to the resource allocation is created by the effective competition of the agents for shared resources and is a purely emergent effect.",
                "The agents in our multi-agent system compete for resources or a set of resources to execute tasks.",
                "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
                "Our approach is based on different agent beliefs, represented by predictors and different information about their environment.",
                "Agents prefer a task allocation at a server with free resources.",
                "However, there is no way to be sure of the amount of free server resources in advance.",
                "All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution.",
                "There is no communication between agents.",
                "Actions taken by agents influence the actions of other agents indirectly.",
                "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
                "It is derived from the human way of deciding ill-defined problems.",
                "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
                "Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation.",
                "All necessary control is integrated in the agents themselves.",
                "There is no higher controlling authority, management layer for decision support or information distribution.",
                "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
                "To do so, agents use historical information from past task allocations at those resources.",
                "Based on the forecasted resource utilisation, the agent will make its resource allocation decision.",
                "After the task has finished its execution and returned the results back to the agent, the <br>predictor</br> performances are evaluated and history information is updated.",
                "Algorithm 1 shows the resource allocation algorithm for each agent.",
                "The agent first predicts the next steps resource load for each server with historical information (line 3-7).",
                "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
                "The agent then evaluates if any free shared resources for the task allocation are expected.",
                "In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
                "This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available.",
                "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
                "One <br>predictor</br> pA ∈ P of each set is called active <br>predictor</br>, which forecasts the next steps resource load.",
                "Each <br>predictor</br> is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a <br>predictor</br> could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
                "The most recent history item is h0.",
                "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
                "Imagine that only one shared resource is known by a number of agents using one <br>predictor</br> forecasting the 76 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 <br>predictor</br> 8 Predictor9 Predictor10 Predictor2 <br>predictor</br> 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
                "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
                "As the result, the server would have a large amount of free resources.",
                "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
                "An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a).",
                "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
                "This may change in the future as the resource load has significantly increased recently.",
                "In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation.",
                "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
                "Algorithm 1 Resource Allocation algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
                "A probability distribution is calculated from the confidence levels of the resource predictions.",
                "The confidence level depends on three factors: the accuracy of the active <br>predictor</br>, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
                "The server with the highest confidence level has the biggest chance to be selected as the active server.",
                "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
                "The server with most expected free resources from the set L of server with expected free resources is chosen.",
                "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
                "However, our experiments show that different individual history information and the non-deterministic active <br>predictor</br> selection usually prevent this situation.",
                "In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
                "The agent will not allocate the task at a resource.",
                "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
                "After the agent execution has finished, the evaluation process described in algorithm 4 is preformed.",
                "This process is divided into three cases.",
                "First, the task was not allocated at a resource.",
                "In this case, the agent cannot decide if the decision not to allocate the task was correct or not.",
                "The agent then removes old historical data.",
                "This is necessary for a successful adaptation in the future.",
                "If the agent would not delete old historical information, the prediction would always forecast that no free resources are available.",
                "The agent would never allocate a task at one of the resources in the future.",
                "Old historical information is removed from the agents resource history using a decay rate.",
                "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
                "The current implementation uses a constant probability density function in a configurable domain.",
                "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
                "Depending on the environment, the probability density function must be altered.",
                "If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
                "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
                "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
                "The agent creates a new <br>predictor</br> set for this server and records the historical information.",
                "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource.",
                "The agent evaluates all predictors of the <br>predictor</br> set for this resource by predicting the resource load with all predictors based on the old historical data.",
                "Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating.",
                "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this <br>predictor</br> would have prevented the allocation.",
                "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
                "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
                "Based on these performance ratings, the confidence levels are calculated using equation 4.",
                "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active <br>predictor</br>.",
                "These values are transformed into a probability distribution.",
                "According to this probability distribution the new active <br>predictor</br> is chosen, implemented as a roulette wheel selection.",
                "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the <br>predictor</br> confidence levels.",
                "Even if <br>predictor</br> 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active <br>predictor</br>.",
                "This non-deterministic <br>predictor</br> selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
                "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
                "Suppose the active <br>predictor</br> predicts slightly above the resource capacity which leads not to a allocation on a resources.",
                "In fact, enough resources for the execution would be available.",
                "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
                "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
                "The oldest history data is overwritten if already m history values are recorded for the server.",
                "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated <br>predictor</br>.",
                "This method assures that agents can compete more effectively in a changing environment.",
                "Different types of predictors are suitable for different situations and environments.",
                "Therefore, all predictors are being evaluated after each decision and the active <br>predictor</br> is selected.",
                "This nondeterministic of the new active <br>predictor</br> supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
                "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
                "Our self-organising approach is robust against failures of resources or agents in the system.",
                "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
                "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
                "The limitations are the reliance on historical resource utilisation information about other servers.",
                "A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource.",
                "If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers.",
                "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers.",
                "In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one.",
                "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
                "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
                "In the rest of the section, results of the experiments are presented and discussed.",
                "All experiments are conducted in a special testbed that simulates and models a multi-agent system.",
                "We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit.",
                "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
                "An event-driven model is used to trigger all activities in the system.",
                "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per <br>predictor</br> to 10 and assigned 10 predictors to every <br>predictor</br> set for each agent.",
                "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
                "Predictors differ in different cycles or window sizes. - n-cycle <br>predictor</br>: p(n) = yn uses the nth -last history value - n-mean <br>predictor</br>: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
                "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
                "The total resource load of the system is calculated as the sum of the resources load of all resources.",
                "The self-organising resource allocation algorithm has random elements.",
                "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process.",
                "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation.",
                "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
                "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
                "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server.",
                "The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources.",
                "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
                "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
                "For this time the task consumes the assigned amount of server resources.",
                "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
                "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
                "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism.",
                "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
                "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
                "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
                "The resource capacity of each server remains constant over the experiment.",
                "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
                "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
                "Figure 4 shows the results from 100 repetitions of this experiment.",
                "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
                "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
                "This initial exploration phase shows that the average resource load of each server has a similar level.",
                "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
                "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
                "They find free resources at server 2.",
                "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
                "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
                "This experiment used algorithm 2 for the selection of the active server.",
                "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
                "The resource allocation for each server is similar.",
                "The absolute amount of free resources per server is almost the same.",
                "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
                "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
                "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
                "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
                "Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment.",
                "All agents use the deterministic most free resources selection mechanism to select the active server.",
                "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
                "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
                "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
                "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
                "Fig. 4(a)). 6.",
                "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-agent systems was presented.",
                "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
                "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
                "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
                "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
                "The resource allocation is a purely emergent effect.",
                "Our mechanism demonstrates that resource allocation can be done by the effective competition of individual and autonomous agents.",
                "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
                "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
                "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
                "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required.",
                "Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
                "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-agent system environment.",
                "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
                "All control is implemented in the agents.",
                "A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective resource allocation.",
                "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
                "Our approach adapts to changes in the environment but it is not evolutionary.",
                "There is no discovery of new strategies by the agents.",
                "The set of predictors stays the same over the whole life.",
                "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future.",
                "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
                "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance.",
                "The decay rate is currently predefined and must be altered manually depending on the environment.",
                "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
                "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
                "We are aware of the long learning phase in environments with a large number of shared resources known by each agent.",
                "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
                "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
                "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
                "In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers.",
                "This issue needs more investigation in the future. 7.",
                "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
                "Cactus Tools for Grid Applications.",
                "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
                "Kluwer Academic Publishers. [2] W. B. Arthur.",
                "Inductive Reasoning and Bounded Rationality.",
                "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
                "Server Load Balancing.",
                "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
                "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
                "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
                "Economic Models for Resource Management and Scheduling in Grid Computing.",
                "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
                "Architectural Models for Resource Management in the Grid.",
                "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
                "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
                "A taxonomy of scheduling in general-purpose distributed computing systems.",
                "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
                "Emergence of Cooperation and Organization in an Evolutionary Game.",
                "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
                "On load balancing for distributed multiagent computing.",
                "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
                "IEEE, August 2002. [10] S. H. Clearwater.",
                "Market-based control.",
                "A Paradigm for Distributed Resource Allocation.",
                "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
                "Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications.",
                "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
                "Foster and C. Kesselman.",
                "Globus: A Metacomputing Infrastructure Toolkit.",
                "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
                "Foster, M. Livny, and S. Tuecke.",
                "Condor-G: A Computation Management Agent for Multi-Institutional Grids.",
                "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
                "Resource allocation games with changing resource capacities.",
                "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
                "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
                "Combining state and model-based approaches for mobile agent load balancing.",
                "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
                "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
                "Decentralized Adaptive Resource Allocation for Sensor Networks.",
                "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
                "An Agent-based Resource Allocation Model for Computational Grids.",
                "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
                "Adaptive Load Balancing: A Study in Multi-Agent Learning.",
                "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
                "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
                "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
                "ACM Press, May 2006. [20] W3C.",
                "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
                "Complexity: The Emerging Science at the Edge of Order and Chaos.",
                "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
                "Analyzing Market-Based Resource Allocation Strategies for the Computational Grid.",
                "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
                "Sage Science Press, 2001.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81"
            ],
            "original_annotated_samples": [
                "After the task has finished its execution and returned the results back to the agent, the <br>predictor</br> performances are evaluated and history information is updated.",
                "One <br>predictor</br> pA ∈ P of each set is called active <br>predictor</br>, which forecasts the next steps resource load.",
                "Each <br>predictor</br> is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a <br>predictor</br> could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "Imagine that only one shared resource is known by a number of agents using one <br>predictor</br> forecasting the 76 The Sixth Intl."
            ],
            "translated_annotated_samples": [
                "Después de que la tarea haya finalizado su ejecución y devuelto los resultados al agente, se evalúan las actuaciones d<br>el predictor</br> y se actualiza la información histórica.",
                "Uno de los <br>predictor</br>es pA ∈ P de cada conjunto se llama <br>predictor</br> activo, el cual pronostica la carga de recursos de los próximos pasos.",
                "Cada <br>predictor</br> es una función P: H → ℵ+ ∪ {0} del espacio de datos históricos H a un número entero no negativo, que es el valor pronosticado.",
                "Por ejemplo, un predictor podría <br>pronosticar una carga de recursos igual a la cantidad promedio de recursos ocupados durante la última ejecución en este recurso</br>.",
                "Imagina que solo un recurso compartido es conocido por un número de agentes que utilizan un predictor para pronosticar el 76 The Sixth Intl."
            ],
            "translated_text": "Hacia la asignación de recursos basada en agentes autoorganizados en un entorno de múltiples servidores. Tino Schlegel1, Ryszard Kowalczyk2. Universidad de Tecnología Swinburne, Facultad de Tecnologías de la Información y la Comunicación, Hawthorn, 3122 Victoria, Australia {tschlegel1, rkowalczyk2}@ict.swin.edu.au. RESUMEN Las aplicaciones distribuidas requieren técnicas distribuidas para una asignación eficiente de recursos. Estas técnicas deben tener en cuenta la heterogeneidad y la posible falta de fiabilidad de los recursos y consumidores de recursos en entornos distribuidos. En este artículo proponemos un algoritmo distribuido que resuelve el problema de asignación de recursos en sistemas multiagentes distribuidos. Nuestra solución se basa en la autoorganización de agentes, la cual no requiere ningún facilitador o capa de gestión. La asignación de recursos en el sistema es un efecto puramente emergente. Presentamos los resultados del mecanismo de asignación de recursos propuesto en el entorno simulado de servidores múltiples estáticos y dinámicos. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Coherencia y coordinación Términos Generales Algoritmos 1. INTRODUCCIÓN Con la creciente popularidad de tecnologías de computación distribuida como Grid [12] y servicios web [20], Internet se está convirtiendo en una plataforma informática poderosa donde diferentes pares de software (por ejemplo, agentes) pueden utilizar recursos informáticos existentes para realizar tareas. En este sentido, cada agente es un consumidor de recursos que adquiere una cierta cantidad de recursos para la ejecución de sus tareas. Es difícil para un mecanismo central de asignación de recursos recopilar y gestionar la información sobre todos los recursos compartidos y consumidores de recursos para realizar de manera efectiva la asignación de recursos. Por lo tanto, se requieren soluciones distribuidas del problema de asignación de recursos. Los investigadores han reconocido estos requisitos [10] y han propuesto técnicas para la asignación de recursos distribuidos. Un tipo prometedor de enfoques distribuidos se basa en modelos de mercado económico [4], inspirados en los principios de los mercados de valores reales. Aunque esos enfoques estén distribuidos, generalmente requieren un facilitador para la fijación de precios, la búsqueda de recursos y la asignación de trabajos a los recursos [5, 9]. Otro problema principalmente sin resolver de esos enfoques es el ajuste fino del precio y el tiempo, las restricciones presupuestarias para permitir una asignación eficiente de recursos en sistemas grandes y dinámicos [22]. En este documento proponemos una solución distribuida del problema de asignación de recursos basada en la autoorganización de los consumidores de recursos en un sistema con recursos limitados. En nuestro enfoque, los agentes asignan dinámicamente tareas a servidores que proporcionan una cantidad limitada de recursos. En nuestro enfoque, los agentes seleccionan de forma autónoma la plataforma de ejecución para la tarea en lugar de pedir a un intermediario de recursos que realice la asignación. Todo el control necesario para nuestro algoritmo está distribuido entre los agentes en el sistema. Optimizan continuamente el proceso de asignación de recursos a lo largo de su vida para adaptarse a los cambios en la disponibilidad de recursos compartidos, aprendiendo de decisiones de asignación pasadas. La única información disponible para todos los agentes son la carga de recursos y la información sobre el éxito de la asignación de recursos de asignaciones pasadas. La información adicional sobre la carga de recursos de los servidores no se difunde. El concepto básico de nuestra solución está inspirado en el razonamiento inductivo y la racionalidad limitada introducida por W. Brian Arthur [2]. El mecanismo propuesto no requiere una autoridad central de control, una capa de gestión de recursos o introducir comunicación adicional entre agentes para decidir qué tarea se asigna en qué servidor. Demostramos que este mecanismo funciona bien en sistemas dinámicos con un gran número de tareas y puede adaptarse fácilmente a diferentes tamaños de sistemas. Además, el rendimiento general del sistema no se ve afectado en caso de que los agentes o servidores fallen o no estén disponibles. El enfoque propuesto proporciona una forma sencilla de implementar la asignación de recursos distribuidos y tiene en cuenta las tendencias del sistema multiagente hacia la autonomía, la heterogeneidad y la falta de fiabilidad de los recursos y agentes. Esta técnica propuesta puede ser fácilmente complementada por técnicas para encolar o rechazar solicitudes de asignación de recursos de agentes [11]. Tales capacidades de auto-gestión de agentes de software permiten una asignación de recursos confiable incluso en un entorno con proveedores de recursos poco confiables. Esto se puede lograr mediante las interacciones mutuas entre agentes aplicando técnicas de la teoría de sistemas complejos. La autoorganización de todos los agentes conduce a una autoorganización de los recursos del sistema 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS y es una propiedad emergente del sistema [21]. El resto del documento está estructurado de la siguiente manera: La siguiente sección proporciona una visión general del trabajo relacionado ya realizado en el área de equilibrio de carga, asignación de recursos o programación. La sección 3 describe el modelo de un entorno multiagente que se utilizó para realizar simulaciones con el fin de evaluar el rendimiento. Las secciones 4 y 5 describen el algoritmo de asignación de recursos distribuidos y presentan varios resultados experimentales. Un resumen, una conclusión y una perspectiva del trabajo futuro finalizan este documento. El trabajo relacionado La asignación de recursos es un problema importante en el área de la informática. En los últimos años, diferentes grupos de investigación han propuesto soluciones basadas en diferentes suposiciones y restricciones [7, 3, 15, 10]. En términos generales, la asignación de recursos es un mecanismo o política para la gestión eficiente y efectiva del acceso a un recurso limitado o conjunto de recursos por parte de sus consumidores. En el caso más simple, los consumidores de recursos solicitan a un intermediario central o despachador los recursos disponibles donde el consumidor de recursos será asignado. El corredor generalmente tiene pleno conocimiento de todos los recursos del sistema. Todas las solicitudes entrantes son dirigidas al corredor, quien es el único tomador de decisiones. En esos enfoques, el consumidor de recursos no puede influir en el proceso de decisión de asignación. El equilibrio de carga [3] es un caso especial del problema de asignación de recursos que utiliza un intermediario que intenta ser justo con todos los recursos al equilibrar la carga del sistema de manera equitativa entre todos los proveedores de recursos. Este mecanismo funciona mejor en un sistema homogéneo. Una técnica distribuida simple para la gestión de recursos es la planificación de capacidad mediante la negativa o encolamiento de agentes entrantes para evitar la sobrecarga de recursos [11]. Desde la perspectiva del propietario de recursos, esta técnica es importante para prevenir la sobrecarga en el recurso, pero no es suficiente para una asignación efectiva de recursos. Esta técnica solo puede proporcionar un buen complemento para los mecanismos de asignación de recursos distribuidos. La mayoría de las técnicas actuales para la asignación de recursos en herramientas de computación en malla como Globus [12] o Condor-G [13] coordinan la asignación de recursos con un subastador, árbitro, despachador, programador o gestor. Esos coordinadores suelen necesitar tener conocimiento global sobre el estado de todos los recursos del sistema. Un ejemplo de un algoritmo de asignación de recursos dinámicos es el proyecto Cactus [1] para la asignación de trabajos computacionales muy costosos. El valor de las soluciones distribuidas para el problema de asignación de recursos ha sido reconocido por la investigación [10]. Inspirados en los principios de los mercados de valores, se han desarrollado modelos de mercado económico para negociar recursos con el fin de regular la oferta y la demanda en la red. Estos enfoques utilizan diferentes estrategias de precios como modelos de precios publicados, diferentes métodos de subasta o un modelo de mercado de productos básicos. Los usuarios intentan comprar recursos baratos necesarios para ejecutar el trabajo, mientras que los proveedores intentan obtener la mayor ganancia posible y operar los recursos disponibles a plena capacidad. Se presenta una colección de diferentes técnicas de asignación de recursos distribuidos basadas en modelos de mercado en Clearwater [10]. Buyya et al. desarrollaron un marco de asignación de recursos basado en la regulación de la oferta y la demanda [4] para Nimrod-G [6] con el enfoque principal en los plazos de entrega de trabajos y las restricciones presupuestarias. El Modelo de Asignación de Recursos basado en Agentes (ARAM) para redes está diseñado para programar trabajos computacionalmente costosos utilizando agentes. La desventaja de este modelo es el extenso uso de intercambio de mensajes entre agentes para monitoreo periódico e intercambio de información dentro de la estructura jerárquica. Las subtareas de un trabajo migran a través de la red hasta que encuentran un recurso que cumpla con las restricciones de precio. El itinerario de migración de trabajos está determinado por los recursos que los conectan en diferentes topologías [17]. El mecanismo propuesto en este documento elimina la necesidad de intercambio periódico de información sobre las cargas de recursos y no requiere una topología de conexión entre los recursos. Se ha realizado un considerable trabajo sobre técnicas de asignación descentralizada de recursos utilizando teoría de juegos publicado en los últimos años. La mayoría de ellos están formulados como juegos repetitivos en un entorno idealista y simplificado. Por ejemplo, Arthur introdujo el problema del bar El Farol, que no permite una solución perfecta, lógica y racional. Es un problema de decisión mal definido que asume y modela el razonamiento inductivo. Probablemente sea uno de los ejemplos más estudiados de sistemas adaptativos complejos derivados de la forma en que los humanos deciden problemas mal definidos. Una variación del problema de El Farol es el llamado juego de la minoría [8]. En este juego de decisión repetitivo, un número impar de agentes debe elegir entre dos recursos basándose en información de éxito pasado, tratando de asignarse al recurso con la minoría. Galstyan et al. [14] estudiaron una variación con más de dos recursos, cambiando las capacidades de los recursos y la información de los agentes vecinos. Demostraron que los agentes pueden adaptarse de manera efectiva a las capacidades cambiantes en este entorno utilizando un conjunto de simples tablas de búsqueda (estrategias) por agente. Otra técnica distribuida que se emplea para resolver el problema de asignación de recursos se basa en el aprendizaje por refuerzo [18]. Similar a nuestro enfoque, un conjunto de agentes compiten por un número limitado de recursos basados únicamente en experiencias individuales previas. En este documento, el objetivo del sistema es maximizar el rendimiento del sistema garantizando la equidad de los recursos, medida como el tiempo promedio de procesamiento por unidad de trabajo. Se presenta un enfoque de asignación de recursos para redes de sensores basado en técnicas de autoorganización y aprendizaje por refuerzo en [16], con un enfoque principal en la optimización del consumo de energía de los nodos de la red. Propusimos un enfoque de equilibrio de carga autoorganizado para un único servidor con el objetivo de optimizar los costos de comunicación de agentes móviles. Un agente móvil rechazará una migración a un servidor de agente remoto si espera que el servidor de destino ya esté sobrecargado por otros agentes o tareas del servidor. Los agentes toman sus decisiones por sí mismos basándose en pronósticos de la utilización del servidor. En este documento se presenta una solución para un entorno de múltiples servidores sin tener en cuenta los costos de comunicación o migración. 3. DESCRIPCIÓN DEL MODELO Modelamos un sistema multiagente distribuido como una red de servidores L = {l1, . . . , lm}, agentes A = {a1, . . . , an} y tareas T = {T1, ..., Tm}. Cada agente tiene un número de tareas Ti que deben ser ejecutadas durante su vida útil. Una tarea Ti requiere U(Ti, t) recursos para su ejecución en el tiempo t, independientemente de su servidor de ejecución. Los recursos para la ejecución de tareas son proporcionados por cada servidor li. La ubicación de la ejecución de las tareas en general está especificada por el mapa L: T × t → L. Un agente debe conocer la existencia de recursos del servidor para asignar tareas en esos recursos. Escribimos LS (ai) The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 75 Recursos del Sistema Anfitrión l4 Anfitrión l3 Anfitrión l2 2a 3a 4a a Anfitrión l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figura 1: Una ilustración de nuestro modelo de múltiples servidores con recursos exclusivos y compartidos para la ejecución del agente. para abordar el conjunto de recursos conocidos por el agente ai. Los recursos en el sistema pueden ser utilizados por todos los agentes para la ejecución de tareas. La cantidad de recursos proporcionados C(li, t) de cada servidor puede variar con el tiempo. La utilización de recursos de un servidor en el tiempo t se calcula utilizando la ecuación 1, sumando el consumo de recursos U(Tj, t) de cada tarea Tj que se ejecuta en el recurso en el tiempo t. Todas las unidades de recursos utilizadas en nuestro modelo representan métricas reales como memoria o ciclos de procesador. Además del caso en que la cantidad total de recursos del sistema es suficiente para ejecutar todas las tareas, también nos interesa el caso en que no se proporcionan suficientes recursos del sistema para cumplir con todas las solicitudes de asignación. Es decir, la capacidad total de recursos compartidos es menor que la cantidad de recursos solicitados por los agentes. En este caso, algunos agentes deben esperar con su solicitud de asignación hasta que se esperen recursos libres. El modelo de sistema multiagente utilizado para nuestras simulaciones está ilustrado en la Figura 1.4. ASIGNACIÓN DE RECURSOS AUTOORGANIZADA El algoritmo de asignación de recursos descrito en esta sección está integrado en cada agente. La única información necesaria para tomar una decisión de asignación de recursos para una tarea es la utilización del servidor de las asignaciones de tareas completadas en esos servidores. No hay una difusión adicional de información sobre la utilización de recursos del servidor o información sobre recursos libres. Nuestra solución demuestra que los agentes pueden autoorganizarse en un entorno dinámico sin necesidad de información de monitoreo activo que genere una gran sobrecarga de tráfico en la red. Además, no tenemos ninguna autoridad central de control. Todo comportamiento que conduce a la asignación de recursos es creado por la competencia efectiva de los agentes por recursos compartidos y es un efecto puramente emergente. Los agentes en nuestro sistema multiagente compiten por recursos o un conjunto de recursos para ejecutar tareas. La acción colectiva de estos agentes cambia el entorno y, con el paso del tiempo, tienen que adaptarse a estos cambios para competir de manera más efectiva en el entorno recién creado. Nuestro enfoque se basa en diferentes creencias de los agentes, representadas por predictores y diferente información sobre su entorno. Los agentes prefieren una asignación de tareas en un servidor con recursos disponibles. Sin embargo, no hay forma de estar seguro de la cantidad de recursos del servidor disponibles de antemano. Todos los agentes tienen las mismas preferencias y un agente asignará una tarea en un servidor si espera tener suficientes recursos libres para su ejecución. No hay comunicación entre agentes. Las acciones tomadas por los agentes influyen en las acciones de otros agentes de forma indirecta. El mecanismo aplicado está inspirado en el razonamiento inductivo y los principios de racionalidad limitada [2]. Se deriva de la forma humana de resolver problemas mal definidos. Los humanos tienden a tener en cuenta muchas hipótesis y actuar en base a la más plausible. Por lo tanto, cada agente lleva un registro del rendimiento de una colección privada de sus predictores y selecciona aquel que actualmente sea más prometedor para la toma de decisiones. 4.1 Algoritmo de asignación de recursos Esta sección describe el mecanismo de decisión para nuestra asignación de recursos autoorganizada. Todo el control necesario está integrado en los propios agentes. No hay una autoridad superior de control, capa de gestión para apoyo en la toma de decisiones o distribución de información. Todos los agentes tienen un conjunto de predictores para cada recurso con el fin de pronosticar la futura utilización de estos servidores para la asignación potencial de tareas. Para hacerlo, los agentes utilizan información histórica de asignaciones de tareas pasadas en esos recursos. Basándose en la utilización de recursos pronosticada, el agente tomará su decisión de asignación de recursos. Después de que la tarea haya finalizado su ejecución y devuelto los resultados al agente, se evalúan las actuaciones d<br>el predictor</br> y se actualiza la información histórica. El Algoritmo 1 muestra el algoritmo de asignación de recursos para cada agente. El agente primero predice la carga de recursos de los próximos pasos para cada servidor con información histórica (línea 3-7). Si la carga de recursos predicha más el consumo de recursos de las tareas está por debajo de la última capacidad de servidor conocida, este servidor se agrega a la lista de candidatos para la asignación. El agente luego evalúa si se esperan recursos compartidos gratuitos para la asignación de tareas. En el caso de que no se esperen recursos gratuitos (línea 9), el agente explorará los recursos asignando la tarea a un servidor seleccionado al azar de entre todos los servidores no predecibles para recopilar información sobre la carga de recursos. Este es el caso estándar al comienzo del ciclo de vida del agente, ya que no hay información disponible sobre el entorno. La predicción de la carga de recursos en sí misma utiliza un conjunto de r predictores P(a, l) := {pi|1 ≤ i ≤ r} por servidor. Uno de los <br>predictor</br>es pA ∈ P de cada conjunto se llama <br>predictor</br> activo, el cual pronostica la carga de recursos de los próximos pasos. Cada <br>predictor</br> es una función P: H → ℵ+ ∪ {0} del espacio de datos históricos H a un número entero no negativo, que es el valor pronosticado. Por ejemplo, un predictor podría <br>pronosticar una carga de recursos igual a la cantidad promedio de recursos ocupados durante la última ejecución en este recurso</br>. Un historial H de información de carga de recursos es una lista de hasta m elementos de historial hi = (xi, yi), que incluyen la fecha de observación xi y el valor observado yi. El elemento más reciente del historial es h0. Nuestro algoritmo utiliza un conjunto de predictores en lugar de solo uno, para evitar que todos los agentes tomen la misma decisión basada en el valor predicho, lo que invalidaría sus creencias. Imagina que solo un recurso compartido es conocido por un número de agentes que utilizan un predictor para pronosticar el 76 The Sixth Intl. ",
            "candidates": [],
            "error": [
                [
                    "el predictor",
                    "predictor",
                    "predictor",
                    "predictor",
                    "pronosticar una carga de recursos igual a la cantidad promedio de recursos ocupados durante la última ejecución en este recurso"
                ]
            ]
        },
        "distribute control": {
            "translated_key": "control distribuido",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Towards Self-organising Agent-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
                "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
                "In this paper we propose a distributed algorithm that solves the resource allocation problem in distributed multiagent systems.",
                "Our solution is based on the self-organisation of agents, which does not require any facilitator or management layer.",
                "The resource allocation in the system is a purely emergent effect.",
                "We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
                "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
                "In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
                "Hence, distributed solutions of the resource allocation problem are required.",
                "Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation.",
                "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
                "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
                "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].",
                "In this paper we propose a distributed solution of the resource allocation problem based on self-organisation of the resource consumers in a system with limited resources.",
                "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
                "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
                "All control needed for our algorithm is distributed among the agents in the system.",
                "They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
                "The only information available to all agents are resource load and allocation success information from past resource allocations.",
                "Additional resource load information about servers is not disseminated.",
                "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
                "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
                "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
                "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-agent system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11].",
                "Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.",
                "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
                "Selforganisation of all agents leads to a self-organisation of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.",
                "Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.",
                "Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results.",
                "A summary, conclusion and outlook to future work finish this paper. 2.",
                "RELATED WORK Resource allocation is an important problem in the area of computer science.",
                "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
                "Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
                "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
                "The broker usually has full knowledge about all system resources.",
                "All incoming requests are directed to the broker who is the solely decision maker.",
                "In those approaches, the resource consumer cannot influence the allocation decision process.",
                "Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
                "This mechanism works best in a homogeneous system.",
                "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
                "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation.",
                "This technique can only provide a good supplement for distributed resource allocation mechanisms.",
                "Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
                "Those coordinators usually need to have global knowledge on the state of all system resources.",
                "An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
                "The value of distributed solutions for the resource allocation problem has been recognised by research [10].",
                "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
                "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
                "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
                "A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10].",
                "Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
                "The Agent based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
                "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
                "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
                "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
                "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
                "There has been considerable work on decentralised resource allocation techniques using game theory published over recent years.",
                "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
                "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
                "It is an ill-defined decision problem that assumes and models inductive reasoning.",
                "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
                "A variation of the El Farol problem is the so called minority game [8].",
                "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
                "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
                "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent.",
                "Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18].",
                "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
                "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
                "A resource allocation approach for sensor networks based on self-organisation techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
                "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
                "A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks.",
                "Agents make their decisions themselves based on forecasts of the server utilisation.",
                "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
                "MODEL DESCRIPTION We model a distributed multi-agent system as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "Each agent has a number of tasks Ti that needs to be executed during its lifetime.",
                "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
                "Resources for the execution of tasks are provided by each server li.",
                "The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources.",
                "We write LS (ai) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai.",
                "Resources in the system can be used by all agents for the execution of tasks.",
                "The amount of provided resources C(li, t) of each server can vary over time.",
                "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
                "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
                "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
                "In this case, some agents must wait with their allocation request until free resources are expected.",
                "The multi-agent system model used for our simulations is illustrated in Fig. 1. 4.",
                "SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each agent.",
                "The only information required in order to make a resource allocation decision for a task is the server utilisation from completed task allocations at those servers.",
                "There is no additional information dissemination about server resource utilisation or information about free resources.",
                "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
                "Additionally, we do not have any central controlling authority.",
                "All behaviour that leads to the resource allocation is created by the effective competition of the agents for shared resources and is a purely emergent effect.",
                "The agents in our multi-agent system compete for resources or a set of resources to execute tasks.",
                "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
                "Our approach is based on different agent beliefs, represented by predictors and different information about their environment.",
                "Agents prefer a task allocation at a server with free resources.",
                "However, there is no way to be sure of the amount of free server resources in advance.",
                "All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution.",
                "There is no communication between agents.",
                "Actions taken by agents influence the actions of other agents indirectly.",
                "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
                "It is derived from the human way of deciding ill-defined problems.",
                "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
                "Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation.",
                "All necessary control is integrated in the agents themselves.",
                "There is no higher controlling authority, management layer for decision support or information distribution.",
                "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
                "To do so, agents use historical information from past task allocations at those resources.",
                "Based on the forecasted resource utilisation, the agent will make its resource allocation decision.",
                "After the task has finished its execution and returned the results back to the agent, the predictor performances are evaluated and history information is updated.",
                "Algorithm 1 shows the resource allocation algorithm for each agent.",
                "The agent first predicts the next steps resource load for each server with historical information (line 3-7).",
                "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
                "The agent then evaluates if any free shared resources for the task allocation are expected.",
                "In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
                "This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available.",
                "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
                "One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load.",
                "Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
                "The most recent history item is h0.",
                "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
                "Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
                "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
                "As the result, the server would have a large amount of free resources.",
                "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
                "An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a).",
                "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
                "This may change in the future as the resource load has significantly increased recently.",
                "In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation.",
                "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
                "Algorithm 1 Resource Allocation algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
                "A probability distribution is calculated from the confidence levels of the resource predictions.",
                "The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
                "The server with the highest confidence level has the biggest chance to be selected as the active server.",
                "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
                "The server with most expected free resources from the set L of server with expected free resources is chosen.",
                "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
                "However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation.",
                "In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
                "The agent will not allocate the task at a resource.",
                "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
                "After the agent execution has finished, the evaluation process described in algorithm 4 is preformed.",
                "This process is divided into three cases.",
                "First, the task was not allocated at a resource.",
                "In this case, the agent cannot decide if the decision not to allocate the task was correct or not.",
                "The agent then removes old historical data.",
                "This is necessary for a successful adaptation in the future.",
                "If the agent would not delete old historical information, the prediction would always forecast that no free resources are available.",
                "The agent would never allocate a task at one of the resources in the future.",
                "Old historical information is removed from the agents resource history using a decay rate.",
                "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
                "The current implementation uses a constant probability density function in a configurable domain.",
                "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
                "Depending on the environment, the probability density function must be altered.",
                "If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
                "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
                "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
                "The agent creates a new predictor set for this server and records the historical information.",
                "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource.",
                "The agent evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data.",
                "Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating.",
                "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation.",
                "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
                "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
                "Based on these performance ratings, the confidence levels are calculated using equation 4.",
                "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor.",
                "These values are transformed into a probability distribution.",
                "According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection.",
                "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels.",
                "Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor.",
                "This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
                "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
                "Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources.",
                "In fact, enough resources for the execution would be available.",
                "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
                "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
                "The oldest history data is overwritten if already m history values are recorded for the server.",
                "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor.",
                "This method assures that agents can compete more effectively in a changing environment.",
                "Different types of predictors are suitable for different situations and environments.",
                "Therefore, all predictors are being evaluated after each decision and the active predictor is selected.",
                "This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
                "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
                "Our self-organising approach is robust against failures of resources or agents in the system.",
                "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
                "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
                "The limitations are the reliance on historical resource utilisation information about other servers.",
                "A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource.",
                "If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers.",
                "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers.",
                "In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one.",
                "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
                "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
                "In the rest of the section, results of the experiments are presented and discussed.",
                "All experiments are conducted in a special testbed that simulates and models a multi-agent system.",
                "We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit.",
                "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
                "An event-driven model is used to trigger all activities in the system.",
                "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each agent.",
                "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
                "Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
                "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
                "The total resource load of the system is calculated as the sum of the resources load of all resources.",
                "The self-organising resource allocation algorithm has random elements.",
                "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process.",
                "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation.",
                "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
                "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
                "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server.",
                "The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources.",
                "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
                "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
                "For this time the task consumes the assigned amount of server resources.",
                "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
                "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
                "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism.",
                "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
                "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
                "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
                "The resource capacity of each server remains constant over the experiment.",
                "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
                "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
                "Figure 4 shows the results from 100 repetitions of this experiment.",
                "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
                "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
                "This initial exploration phase shows that the average resource load of each server has a similar level.",
                "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
                "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
                "They find free resources at server 2.",
                "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
                "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
                "This experiment used algorithm 2 for the selection of the active server.",
                "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
                "The resource allocation for each server is similar.",
                "The absolute amount of free resources per server is almost the same.",
                "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
                "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
                "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
                "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
                "Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment.",
                "All agents use the deterministic most free resources selection mechanism to select the active server.",
                "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
                "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
                "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
                "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
                "Fig. 4(a)). 6.",
                "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-agent systems was presented.",
                "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
                "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
                "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
                "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
                "The resource allocation is a purely emergent effect.",
                "Our mechanism demonstrates that resource allocation can be done by the effective competition of individual and autonomous agents.",
                "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
                "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
                "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
                "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required.",
                "Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
                "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-agent system environment.",
                "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
                "All control is implemented in the agents.",
                "A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective resource allocation.",
                "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
                "Our approach adapts to changes in the environment but it is not evolutionary.",
                "There is no discovery of new strategies by the agents.",
                "The set of predictors stays the same over the whole life.",
                "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future.",
                "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
                "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance.",
                "The decay rate is currently predefined and must be altered manually depending on the environment.",
                "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
                "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
                "We are aware of the long learning phase in environments with a large number of shared resources known by each agent.",
                "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
                "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
                "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
                "In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers.",
                "This issue needs more investigation in the future. 7.",
                "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
                "Cactus Tools for Grid Applications.",
                "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
                "Kluwer Academic Publishers. [2] W. B. Arthur.",
                "Inductive Reasoning and Bounded Rationality.",
                "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
                "Server Load Balancing.",
                "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
                "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
                "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
                "Economic Models for Resource Management and Scheduling in Grid Computing.",
                "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
                "Architectural Models for Resource Management in the Grid.",
                "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
                "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
                "A taxonomy of scheduling in general-purpose distributed computing systems.",
                "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
                "Emergence of Cooperation and Organization in an Evolutionary Game.",
                "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
                "On load balancing for distributed multiagent computing.",
                "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
                "IEEE, August 2002. [10] S. H. Clearwater.",
                "Market-based control.",
                "A Paradigm for Distributed Resource Allocation.",
                "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
                "Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications.",
                "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
                "Foster and C. Kesselman.",
                "Globus: A Metacomputing Infrastructure Toolkit.",
                "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
                "Foster, M. Livny, and S. Tuecke.",
                "Condor-G: A Computation Management Agent for Multi-Institutional Grids.",
                "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
                "Resource allocation games with changing resource capacities.",
                "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
                "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
                "Combining state and model-based approaches for mobile agent load balancing.",
                "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
                "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
                "Decentralized Adaptive Resource Allocation for Sensor Networks.",
                "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
                "An Agent-based Resource Allocation Model for Computational Grids.",
                "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
                "Adaptive Load Balancing: A Study in Multi-Agent Learning.",
                "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
                "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
                "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
                "ACM Press, May 2006. [20] W3C.",
                "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
                "Complexity: The Emerging Science at the Edge of Order and Chaos.",
                "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
                "Analyzing Market-Based Resource Allocation Strategies for the Computational Grid.",
                "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
                "Sage Science Press, 2001.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "self-organisation": {
            "translated_key": "autoorganización",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Towards Self-organising Agent-based Resource Allocation in a Multi-Server Environment Tino Schlegel1 , Ryszard Kowalczyk2 Swinburne University of Technology Faculty of Information and Communication Technologies Hawthorn, 3122 Victoria, Australia {tschlegel1 ,rkowalczyk2 }@ict.swin.edu.au ABSTRACT Distributed applications require distributed techniques for efficient resource allocation.",
                "These techniques need to take into account the heterogeneity and potential unreliability of resources and resource consumers in a distributed environments.",
                "In this paper we propose a distributed algorithm that solves the resource allocation problem in distributed multiagent systems.",
                "Our solution is based on the <br>self-organisation</br> of agents, which does not require any facilitator or management layer.",
                "The resource allocation in the system is a purely emergent effect.",
                "We present results of the proposed resource allocation mechanism in the simulated static and dynamic multi-server environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Coherence and coordination General Terms Algorithms 1.",
                "INTRODUCTION With the increasing popularity of distributed computing technologies such as Grid [12] and Web services [20], the Internet is becoming a powerful computing platform where different software peers (e.g., agents) can use existing computing resources to perform tasks.",
                "In this sense, each agent is a resource consumer that acquires a certain amount of resources for the execution of its tasks.",
                "It is difficult for a central resource allocation mechanism to collect and manage the information about all shared resources and resource consumers to effectively perform the allocation of resources.",
                "Hence, distributed solutions of the resource allocation problem are required.",
                "Researchers have recognised these requirements [10] and proposed techniques for distributed resource allocation.",
                "A promising kind of such distributed approaches are based on economic market models [4], inspired by principles of real stock markets.",
                "Even if those approaches are distributed, they usually require a facilitator for pricing, resource discovery and dispatching jobs to resources [5, 9].",
                "Another mainly unsolved problem of those approaches is the fine-tuning of price and time, budget constraints to enable efficient resource allocation in large, dynamic systems [22].",
                "In this paper we propose a distributed solution of the resource allocation problem based on <br>self-organisation</br> of the resource consumers in a system with limited resources.",
                "In our approach, agents dynamically allocate tasks to servers that provide a limited amount of resources.",
                "In our approach, agents select autonomously the execution platform for the task rather than ask a resource broker to do the allocation.",
                "All control needed for our algorithm is distributed among the agents in the system.",
                "They optimise the resource allocation process continuously over their lifetime to changes in the availability of shared resources by learning from past allocation decisions.",
                "The only information available to all agents are resource load and allocation success information from past resource allocations.",
                "Additional resource load information about servers is not disseminated.",
                "The basic concept of our solution is inspired by inductive reasoning and bounded rationality introduced by W. Brian Arthur [2].",
                "The proposed mechanism does not require a central controlling authority, resource management layer or introduce additional communication between agents to decide which task is allocated on which server.",
                "We demonstrate that this mechanism performs well dynamic systems with a large number of tasks and can easily be adapted to various system sizes.",
                "In addition, the overall system performance is not affected in case agents or servers fail or become unavailable.",
                "The proposed approach provides an easy way to implement distributed resource allocation and takes into account multi-agent system tendencies toward autonomy, heterogeneity and unreliability of resources and agents.",
                "This proposed technique can be easily supplemented by techniques for queuing or rejecting resource allocation requests of agents [11].",
                "Such self-managing capabilities of software agents allow a reliable resource allocation even in an environment with unreliable resource providers.",
                "This can be achieved by the mutual interactions between agents by applying techniques from complex system theory.",
                "Selforganisation of all agents leads to a <br>self-organisation</br> of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "The remainder of the paper is structured as follows: The next section gives an overview of the related work already done in the area of load balancing, resource allocation or scheduling.",
                "Section 3 describes the model of a multi-agent environment that was used to conduct simulations for a performance evaluation.",
                "Sections 4 and 5 describe the distributed resource allocation algorithm and presents various experimental results.",
                "A summary, conclusion and outlook to future work finish this paper. 2.",
                "RELATED WORK Resource allocation is an important problem in the area of computer science.",
                "Over the past years, solutions based on different assumptions and constraints have been proposed by different research groups [7, 3, 15, 10].",
                "Generally speaking, resource allocation is a mechanism or policy for the efficient and effective management of the access to a limited resource or set of resources by its consumers.",
                "In the simplest case, resource consumers ask a central broker or dispatcher for available resources where the resource consumer will be allocated.",
                "The broker usually has full knowledge about all system resources.",
                "All incoming requests are directed to the broker who is the solely decision maker.",
                "In those approaches, the resource consumer cannot influence the allocation decision process.",
                "Load balancing [3] is a special case of the resource allocation problem using a broker that tries to be fair to all resources by balancing the system load equally among all resource providers.",
                "This mechanism works best in a homogeneous system.",
                "A simple distributed technique for resource management is capacity planning by refusing or queuing incoming agents to avoid resource overload [11].",
                "From the resource owner perspective, this technique is important to prevent overload at the resource but it is not sufficient for effective resource allocation.",
                "This technique can only provide a good supplement for distributed resource allocation mechanisms.",
                "Most of todays techniques for resource allocation in grid computing toolkits like Globus [12] or Condor-G [13] coordinate the resource allocation with an auctioneer, arbitrator, dispatcher, scheduler or manager.",
                "Those coordinators usually need to have global knowledge on the state of all system resources.",
                "An example of a dynamic resource allocation algorithm is the Cactus project [1] for the allocation of computational very expensive jobs.",
                "The value of distributed solutions for the resource allocation problem has been recognised by research [10].",
                "Inspired by the principles in stock markets, economic market models have been developed for trading resources for the regulation of supply and demand in the grid.",
                "These approaches use different pricing strategies such as posted price models, different auction methods or a commodity market model.",
                "Users try to purchase cheap resources required to run the job while providers try to make as much profit as possible and operate the available resources at full capacity.",
                "A collection of different distributed resource allocation techniques based on market models is presented in Clearwater [10].",
                "Buyya et al. developed a resource allocation framework based on the regulation of supply and demand [4] for Nimrod-G [6] with the main focus on job deadlines and budget constraints.",
                "The Agent based Resource Allocation Model (ARAM) for grids is designed to schedule computational expensive jobs using agents.",
                "Drawback of this model is the extensive use of message exchange between agents for periodic monitoring and information exchange within the hierarchical structure.",
                "Subtasks of a job migrate through the network until they find a resource that meets the price constraints.",
                "The jobs migration itinerary is determined by the resources in connecting them in different topologies [17].",
                "The proposed mechanism in this paper eliminates the need of periodic information exchange about resource loads and does not need a connection topology between the resources.",
                "There has been considerable work on decentralised resource allocation techniques using game theory published over recent years.",
                "Most of them are formulated as repetitive games in an idealistic and simplified environment.",
                "For example, Arthur [2] introduced the so called El Farol bar problem that does not allow a perfect, logical and rational solution.",
                "It is an ill-defined decision problem that assumes and models inductive reasoning.",
                "It is probably one of the most studied examples of complex adaptive systems derived from the human way of deciding ill-defined problems.",
                "A variation of the El Farol problem is the so called minority game [8].",
                "In this repetitive decision game, an odd number of agents have to choose between two resources based on past success information trying to allocate itself at the resource with the minority.",
                "Galstyan et al. [14] studied a variation with more than two resources, changing resource capacities and information from neighbour agents.",
                "They showed that agents can adapt effectively to changing capacities in this environment using a set of simple look-up tables (strategies) per agent.",
                "Another distributed technique that is employed for solving the resource allocation problem is based on reinforcement learning [18].",
                "Similar to our approach, a set of agents compete for a limited number of resources based only on prior individual experience.",
                "In this paper, the system objective is to maximise system throughput while ensuring fairness to resources, measured as the average processing time per job unit.",
                "A resource allocation approach for sensor networks based on <br>self-organisation</br> techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes.",
                "We [19] proposed a self-organising load balancing approach for a single server with focus on optimising the communication costs of mobile agents.",
                "A mobile agent will reject a migration to a remote agent server, if it expects the destination server to be already overloaded by other agents or server tasks.",
                "Agents make their decisions themselves based on forecasts of the server utilisation.",
                "In this paper a solution for a multi-server environment is presented without consideration of communication or migration costs. 3.",
                "MODEL DESCRIPTION We model a distributed multi-agent system as a network of servers L = {l1, . . . , lm}, agents A = {a1, . . . , an} and tasks T = {T1, ..., Tm}.",
                "Each agent has a number of tasks Ti that needs to be executed during its lifetime.",
                "A task Ti requires U(Ti, t) resources for its execution at time t independent from its execution server.",
                "Resources for the execution of tasks are provided by each server li.",
                "The tasks execution location in general is specified by the map L : T ×t → L. An agent has to know about the existence of server resources in order to allocate tasks at those resources.",
                "We write LS (ai) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 75 Sysytem Resources Host l4Host l3Host l2 2a 3a 4a a Host l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figure 1: An illustration of our multi-server model with exclusive and shared resources for the agent execution. to address the set of resources known by agent ai.",
                "Resources in the system can be used by all agents for the execution of tasks.",
                "The amount of provided resources C(li, t) of each server can vary over time.",
                "The resource utilisation of a server li at time t is calculated using equation 1, by adding the resource consumption U(Tj, t) of each task Tj that is executed at the resource at time t. All resource units used in our model represent real metrics such as memory or processor cycles.",
                "U(li, t) = n j=1 U(Tj, t)| L(Tj, t) = li (1) Additional to the case that the total amount of system resources is enough to execute all tasks, we are also interested in the case that not enough system resources are provided to fulfil all allocation requests.",
                "That is, the overall shared resource capacity is lower than the amount of requested resources by agents.",
                "In this case, some agents must wait with their allocation request until free resources are expected.",
                "The multi-agent system model used for our simulations is illustrated in Fig. 1. 4.",
                "SELF-ORGANISING RESOURCE ALLOCATION The resource allocation algorithm as described in this section is integrated in each agent.",
                "The only information required in order to make a resource allocation decision for a task is the server utilisation from completed task allocations at those servers.",
                "There is no additional information dissemination about server resource utilisation or information about free resources.",
                "Our solution demonstrates that agents can self-organise in a dynamic environment without active monitoring information that causes a lot of network traffic overhead.",
                "Additionally, we do not have any central controlling authority.",
                "All behaviour that leads to the resource allocation is created by the effective competition of the agents for shared resources and is a purely emergent effect.",
                "The agents in our multi-agent system compete for resources or a set of resources to execute tasks.",
                "The collective action of these agents change the environment and, as time goes by, they have to adapt to these changes to compete more effectively in the newly created environment.",
                "Our approach is based on different agent beliefs, represented by predictors and different information about their environment.",
                "Agents prefer a task allocation at a server with free resources.",
                "However, there is no way to be sure of the amount of free server resources in advance.",
                "All agents have the same preferences and a agent will allocate a task on a server if it expects enough free resources for its execution.",
                "There is no communication between agents.",
                "Actions taken by agents influence the actions of other agents indirectly.",
                "The applied mechanism is inspired by inductive reasoning and bounded rationality principles [2].",
                "It is derived from the human way of deciding ill-defined problems.",
                "Humans tend to keep in mind many hypotheses and act on the most plausible one.",
                "Therefore, each agent keeps track of the performance of a private collection of its predictors and selects the one that is currently most promising for decision making. 4.1 Resource Allocation Algorithm This section describes the decision mechanism for our selforganising resource allocation.",
                "All necessary control is integrated in the agents themselves.",
                "There is no higher controlling authority, management layer for decision support or information distribution.",
                "All agents have a set of predictors for each resource to forecast the future resource utilisation of these servers for potential task allocation.",
                "To do so, agents use historical information from past task allocations at those resources.",
                "Based on the forecasted resource utilisation, the agent will make its resource allocation decision.",
                "After the task has finished its execution and returned the results back to the agent, the predictor performances are evaluated and history information is updated.",
                "Algorithm 1 shows the resource allocation algorithm for each agent.",
                "The agent first predicts the next steps resource load for each server with historical information (line 3-7).",
                "If the predicted resource load plus the tasks resource consumption is below the last known server capacity, this server is added to the list of candidates for the allocation.",
                "The agent then evaluates if any free shared resources for the task allocation are expected.",
                "In the case, no free resources are expected (line 9), the agent will explore resources by allocating the task at a randomly selected server from all not predictable servers to gather resource load information.",
                "This is the standard case at the beginning of the agent life-cycle as there is no information about the environment available.",
                "The resource load prediction itself uses a set of r predictors P(a, l) := {pi|1 ≤ i ≤ r} per server.",
                "One predictor pA ∈ P of each set is called active predictor, which forecasts the next steps resource load.",
                "Each predictor is a function P : H → ℵ+ ∪ {0} from the space of history data H to a non-negative integer, which is the forecasted value.",
                "For example, a predictor could forecast a resource load equal to the average amount of occupied resources during the last execution at this resource.",
                "A history H of resource load information is a list of up to m history items hi = (xi, yi), comprising the observation date xi and the observed value yi.",
                "The most recent history item is h0.",
                "Hm(li) = ((x0, y0), ..., (xk, yk))| 0 ≤ k < m (2) Our algorithm uses a set of predictors rather than only one, to avoid that all agents make the same decision based on the predicted value leading to an invalidation of their beliefs.",
                "Imagine that only one shared resource is known by a number of agents using one predictor forecasting the 76 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ResourceLoad Time (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figure 2: (a) Collected resource load information from previous task allocations that is used for future predictions. (b) Predictors probability distribution for selecting the new active predictor. same value as the last known server resource utilisation.",
                "All agents that allocated a task at a server that was slightly overloaded would dismiss another allocation at this server as they expect the server to be overloaded again based on the predictions.",
                "As the result, the server would have a large amount of free resources.",
                "A set of different predictors that predict different values avoids this situation of invalidating the beliefs of the agents [19].",
                "An example of a collected resource load information from the last 5 visits of an agent at a shared resource can be seen in Fig. 2(a).",
                "It shows that the resource was visited frequently, which means free resources for execution were available and an exploration of other servers was unnecessary.",
                "This may change in the future as the resource load has significantly increased recently.",
                "In the case where the set of servers predicted having free resources available is not empty (line 13), the agent selects one of those for allocation.",
                "We have implemented two alternative algorithms for the selection of a server for the task allocation.",
                "Algorithm 1 Resource Allocation algorithm of an agent 1 L ← ∅ //server with free resources 2 u ← U(T, t + 1) //task resource consumption 3 for all P(a, l)|l ∈ LS (a) do 4 U(l) ← resourceLoadPrediction(P(a, l), t + 1) 5 if U(l) + u ≤ C(l) then 6 L ← L ∪ {P(a, l)} 7 end if 8 end for 9 if L = ∅ then 10 //all unpredictable shared resources 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← a random element of E 13 else 14 allocationServer ← serverSelection (L) 15 end if 16 return allocationServer Algorithm 2 shows the first method, which is a non-deterministic selection according to the predictability of the server resource utilisation.",
                "A probability distribution is calculated from the confidence levels of the resource predictions.",
                "The confidence level depends on three factors: the accuracy of the active predictor, the amount of historical information about the server and the average age of the history information (see Eq. 3.",
                "The server with the highest confidence level has the biggest chance to be selected as the active server.",
                "G(P) = w1 · size(H) m + w2 · Age(H) max Age(H) + w3 · g(p) max (g(p)) (3) where: wi − weights size(H) − number of data in history m − maximal number of history values Age(H) − average age of historical data g(p) − see eq. 4 Algorithm 2 serverSelection(L)- best predictable server 1 for all P(a, l) ∈ L do 2 calculate G(P) 3 end for 4 transform all G(P) into a probability distribution 5 return l ∈ LS selected according to the probability distribution Algorithm 3 serverSelection(L) - most free resources 1 for all P(a, l) ∈ L do 2 c(l) ← C(l) − Ul 3 end for 4 return l ∈ LS |c(l) is maximum The second alternative selection method of a server from the set of predicted servers with free resources is deterministic and shown in algorithm 3.",
                "The server with most expected free resources from the set L of server with expected free resources is chosen.",
                "In the case where all agents predict the most free resources for one particular server, all agents will allocate the task at this server, which would invalidate the agents beliefs.",
                "However, our experiments show that different individual history information and the non-deterministic active predictor selection usually prevent this situation.",
                "In the case, the resource allocation algorithm does not return any server (Alg. 1, line 16), the allocation at a resource in not recommended.",
                "The agent will not allocate the task at a resource.",
                "This case happens only if a resource load prediction for all servers is possible but no free resources are expected.",
                "After the agent execution has finished, the evaluation process described in algorithm 4 is preformed.",
                "This process is divided into three cases.",
                "First, the task was not allocated at a resource.",
                "In this case, the agent cannot decide if the decision not to allocate the task was correct or not.",
                "The agent then removes old historical data.",
                "This is necessary for a successful adaptation in the future.",
                "If the agent would not delete old historical information, the prediction would always forecast that no free resources are available.",
                "The agent would never allocate a task at one of the resources in the future.",
                "Old historical information is removed from the agents resource history using a decay rate.",
                "The decay rate is a cumulative distribution function that calculates the probability that a history item is deleted after it has reached a certain The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 77 Age of the history data Decayrate 0 1 older Figure 3: Decay rate of historical information age.",
                "The current implementation uses a constant probability density function in a configurable domain.",
                "Figure 3 shows an example of such a cumulative distribution function for the decay rate.",
                "Depending on the environment, the probability density function must be altered.",
                "If the number of potential server per agent is high, historical information must be kept longer to avoid the exploration of unexplored resources.",
                "In addition, a dynamic environment requires more up-to-date information to make more reliable predictions.",
                "The second case in the evaluation process (Alg. 4, line 5) describes the actions taken after a server was visited the first time.",
                "The agent creates a new predictor set for this server and records the historical information.",
                "All predictors for this set are chosen randomly from some predefined set. g(p) = l i=0 ri (4) where: ri = ⎧ ⎨ ⎩ 1 if ith correct decision 0 if ith unknown outcome −1 if ith wrong decision The general case (Alg. 4, line 8) is the evaluation after the agent allocated the task at a resource.",
                "The agent evaluates all predictors of the predictor set for this resource by predicting the resource load with all predictors based on the old historical data.",
                "Predictors that made a correct prediction meaning the resource allocation was correct, will receive a positive rating.",
                "This is the case that the resource was not overloaded and free resources for execution were predicted, or the resource was overloaded and this predictor would have prevented the allocation.",
                "All predictors that predicted values which would lead to wrong decisions will receive negative ratings.",
                "In all other cases, which includes that no prediction was possible, a neutral rating is given to the predictors.",
                "Based on these performance ratings, the confidence levels are calculated using equation 4.",
                "The confidence for all predictors that cannot predict with the current historical information about the server is set to zero to prevent the selection of those as the new active predictor.",
                "These values are transformed into a probability distribution.",
                "According to this probability distribution the new active predictor is chosen, implemented as a roulette wheel selection.",
                "Figure 2(b) illustrates the probabilities of a set of 10 predictors, which have been calculated from the predictor confidence levels.",
                "Even if predictor 9 has the highest selection probability, its was not chosen by roulette wheel selection process as the active predictor.",
                "This non-deterministic predictor selection prevents the invalidation of the agents beliefs in case agents have the same set of predictors.",
                "The prediction accuracy that is the error of the prediction compared to the observed value is not taken into consideration.",
                "Suppose the active predictor predicts slightly above the resource capacity which leads not to a allocation on a resources.",
                "In fact, enough resources for the execution would be available.",
                "A less accurate prediction which is far below the capacity would lead to the correct decision and is therefore preferred.",
                "The last action of the evaluation algorithm (Alg. 4, line 22) updates the history with the latest resource load information of the server.",
                "The oldest history data is overwritten if already m history values are recorded for the server.",
                "Algorithm 4 Decision Evaluation 1 if l ∈ LE then 2 for all P(a, l)|l ∈ LS (a) do 3 evaporate old historical data 4 end for 5 else if P(a, l) = null then 6 create (P(a, l)) 7 update H(l) 8 else 9 for all p ∈ P(a, l) do 10 pred ← resourceLoadPrediction(p) 11 if (U(l) ≤ C(l) AND pred + U(a, t) ≤ C(l)) OR (U(l) > C(l) AND pred + U(a, t) > C(l)) then 12 addPositiveRating(p) 13 else if U(l) ≤ C(l) AND pred + U(a, t) > C(l) OR U(l) ≤ C(l) AND pred + U(a, t) > C(l) then 14 addNegativeRating(p) 15 else 16 addNeutralRating(p) 17 end if 18 end for 19 calculate all g(p); g(p) ← 0, if p is not working 20 transform all g(p) into a probability distribution 21 pA ← p ∈ P(a, l) is selected according to this probability distribution 22 update H(l) 23 end if 4.2 Remarks and Limitation of the Approach Our prediction mechanism uses a number of different types of simple predictors rather than of one sophisticated predictor.",
                "This method assures that agents can compete more effectively in a changing environment.",
                "Different types of predictors are suitable for different situations and environments.",
                "Therefore, all predictors are being evaluated after each decision and the active predictor is selected.",
                "This nondeterministic of the new active predictor supports that the agents beliefs will not be invalidated, which happens in the case that all predictors are making the same decision.",
                "Especially if there is only one shared resource available and all agents have only the choice to go the this one shared resource or not [19].",
                "Our self-organising approach is robust against failures of resources or agents in the system.",
                "If they join or leave, the system can self-organise quickly and adapts to the new conditions.",
                "There is no classical bottleneck or single point of failure like in centralised mechanisms.",
                "The limitations are the reliance on historical resource utilisation information about other servers.",
                "A forecast of the resource utilisation of a remote server is only possible if an agent has a number of historical information about a shared resource.",
                "If the number of servers per agent is very large, there is no efficient way to gather historical information about remote servers.",
                "This problem occurs if the amount of provided shared resources 78 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) is limited and not enough for all resource consumers.",
                "In this case, the an agent would randomly try all known servers until it will find one with free resources or there is no one.",
                "In the worst case, by the time for trying all servers, historical information of the servers is already outdated. 5.",
                "EXPERIMENTAL EVALUATION The first part of this section gives a short overview of the setup of our simulation environment.",
                "In the rest of the section, results of the experiments are presented and discussed.",
                "All experiments are conducted in a special testbed that simulates and models a multi-agent system.",
                "We have implemented this test-bed in the Java programming language, independent from any specific agent toolkit.",
                "It allows a variety of experiments in in stable as well as dynamic environments with a configurable number of agents, tasks and servers.",
                "An event-driven model is used to trigger all activities in the system.",
                "For all simulations, we limited the number of history data for each server to 10, the number of performance ratings per predictor to 10 and assigned 10 predictors to every predictor set for each agent.",
                "All predictors are chosen randomly from a arbitrary predefined set of 32 predictors of the following type.",
                "Predictors differ in different cycles or window sizes. - n-cycle predictor: p(n) = yn uses the nth -last history value - n-mean predictor: p(n) = 1 n · n i=1 yi uses the mean value of the n-last history values - n-linear regression predictor: p(n, t) = a·t+b uses the linear regression value from the last n history values where a, b are calculated using linear regression with least squares fitting under consideration of the last n history data. - n-distribution predictor: uses a random value from the frequency distribution of the n last history values - n-mirror predictor: p(n) = 2 · H − yn uses the mirror image around the mean of all history values of the nth last history value The efficiency of our proposed self-organising resource allocation is assessed by the resource load development of each server over the simulation as well as the total resource load development cumulated over all shared resources.",
                "Resource loads for each server are calculated using equation 1 as the sum of the resource consumption of all currently executed agents at this server.",
                "The total resource load of the system is calculated as the sum of the resources load of all resources.",
                "The self-organising resource allocation algorithm has random elements.",
                "Therefore, the presented results show mean values and standard derivation calculated over 100 repeated experiments. 5.1 Experimental Setup The following parameters have an impact on the resource allocation process.",
                "We give an overview of the parameters and a short description. - Agents: The number of agents involved in the resource allocation.",
                "This number varies in the experiments between 650 and 750 dependent on the total amount of available system resources. - Resource consumption: Each task consumes server resources for its execution.",
                "The resource consumption is assigned randomly to each task prior to its allocation from an interval.",
                "Resource consumption is specified in resource units which corresponds to real world metrics like memory or processor cycles. - Agent home server: All agents are located on a home agent server.",
                "The resources of those servers not considered in our simulation and does not affect the resource allocation performance. - Server resources: Experiments use servers with different amount of available shared resources.",
                "The first experiment is conducted in a static server environment that provides the same amount of shared resources, while the other experiment varies the available server resource during the simulation.",
                "The total amount of resources remains constant in both experiments. - Execution time: The execution time of a task for the execution, independent from the execution platform.",
                "For this time the task consumes the assigned amount of server resources.",
                "This parameter is randomly assigned before the execution. - Task creation time: The time before the next task is created after successful or unsuccessful completion.",
                "This parameter influences the age of the historical information about resources and has a major influence on the length of the initial adaptation phase.",
                "This parameter is randomly assigned after the task was completed. 5.2 Experimental Results This section shows results from selected experiments that demonstrate the performance of our proposed resource allocation mechanism.",
                "The first experiment show the performance in a stable environment where a number of agents allocate tasks to servers that provide a constant amount of resources.",
                "The second experiment was conducted in a dynamic server environment with a constant number of agents.",
                "The first experiment shows our model in a stable 3-server environment that provide a total amount of 7000 resource units.",
                "The resource capacity of each server remains constant over the experiment.",
                "We used 650 agents with the parameters of the execution time between 1 and 15 time units and a task creation time in the interval [0 − 30] time units.",
                "The tasks resource consumption is randomly assigned from the interval [1 − 45] resource units.",
                "Figure 4 shows the results from 100 repetitions of this experiment.",
                "Figure 4(a) shows that the total amount of provided resources is larger than the demand of resource in average.",
                "At the beginning of the experiment, all agents allocate their tasks randomly at one of the available servers and explore the available capacities and resource utilisations for about 150 time units.",
                "This initial exploration phase shows that the average resource load of each server has a similar level.",
                "This causes an overload situation at server 1 because of its low capacity of shared resources, and a large amount of free resources on server 2.",
                "Agents that allocated tasks to server 1 detect the overload situation and explore randomly other available servers.",
                "They find free resources at server 2.",
                "After learning period, the agents have self-organised themselves in this stable environment and find a stable solution for the allocation of The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Time 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 ResourceLoad (a) Total resource load versus total shared resource capacity 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (b) Resource load server 0 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 ResourceLoad (c) Resource load server 1 0 250 500 750 1,000 1,250 1,500 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 2 Figure 4: Results of experiment 1 in a static 3-server environment averaged over 100 repetitions. all tasks.",
                "The standard deviation of the resource loads are small for each server, which indicates that our distributed approach find stable solutions in almost every run.",
                "This experiment used algorithm 2 for the selection of the active server.",
                "We also ran the same experiment with the most free resources selection mechanism to select the active server.",
                "The resource allocation for each server is similar.",
                "The absolute amount of free resources per server is almost the same.",
                "Experiment 2 was conducted in a dynamic 3-server environment with a number of 750 agents.",
                "The amount of resources of server 0 and server 1 changes periodically, while the total amount of available resources remains constant.",
                "Server 0 has an initial capacity of 1000 units, server 1 start with a capacity of 4000 units.",
                "The change in capacity starts after 150 time units, which is approximately the end of the learning phase.",
                "Figure 5 (b, c, d) shows the behaviour of our self-organising resource allocation in this environment.",
                "All agents use the deterministic most free resources selection mechanism to select the active server.",
                "It can bee seen in Fig. 5(b) and 5(c) that the number of allocated resources to server 0 and server 1 changes periodically with the amount of provided resources.",
                "This shows that agents can sense available resources in this dynamic environment and are able to adapt to those changes.",
                "The resource load development of server 2 (see Fig. 5(d)) shows a periodic change because some agent try to be allocated tasks to this server in case their previously favoured server reduce the amount of shared resources.",
                "The total resource load of all shared resources is constant over the experiments, which indicates the all agents allocate their tasks to one of the shared resource (comp.",
                "Fig. 4(a)). 6.",
                "CONCLUSIONS AND FUTURE WORK In this paper a self-organising distributed resource allocation technique for multi-agent systems was presented.",
                "We enable agents to select the execution platform for their tasks themselves before each execution at run-time.",
                "In our approach the agents compete for an allocation at one of the 0 500 1,000 1,500 2,000 Time 0 2,500 5,000 7,500 ResourceLoad (a) Total resource load versus total shared resource capacity 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (b) Resource load server 1 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (c) Resource load server 2 0 500 1,000 1,500 2,000 Time 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 ResourceLoad (d) Resource load server 3 Figure 5: Results of experiment 2 in a dynamic server environment averaged over 100 repetitions. available shared resource.",
                "Agents sense their server environment and adopt their action to compete more efficient in the new created environment.",
                "This process is adaptive and has a strong feedback as allocation decisions influence indirectly decisions of other agents.",
                "The resource allocation is a purely emergent effect.",
                "Our mechanism demonstrates that resource allocation can be done by the effective competition of individual and autonomous agents.",
                "Neither do they need coordination or information from a higher authority nor is an additional direct communication between agents required.",
                "This mechanism was inspired by inductive reasoning and bounded rationality principles which enables the agents adaptation of their strategies to compete effectively in a dynamic environment.",
                "In the case of a server becomes unavailable, the agents can adapt quickly to this new situation by exploring new resources or remain at the home server if an allocation is not possible.",
                "Especially in dynamic and scalable environments such as grid systems, a robust and distributed mechanism for resource allocation is required.",
                "Our self-organising resource allocation approach was evaluated with a number of simulation experiments in a dynamic environment of agents and server resources.",
                "The presented results for this new approach for strategic migration optimisation are very promising and justify further investigation in a real multi-agent system environment.",
                "It is a distributed, scalable and easy-to-understand policy for the regulation of supply and demand of resources.",
                "All control is implemented in the agents.",
                "A simple decision mechanism based on different beliefs of the agent creates an emergent behaviour that leads to effective resource allocation.",
                "This approach can be easily extended or supported by resource balancing/queuing mechanisms provided by resources.",
                "Our approach adapts to changes in the environment but it is not evolutionary.",
                "There is no discovery of new strategies by the agents.",
                "The set of predictors stays the same over the whole life.",
                "In fact, we believe that this could further improve the systems behaviour over a long term period and could be 80 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) investigated in the future.",
                "The evolution would be very slow and selective and will not influence the system behaviour in a short-term period that is covered by our experimental results.",
                "In the near future we will investigate if an automatic adaptation of the decay rate of historical information our algorithm is possible and can improve the resource allocation performance.",
                "The decay rate is currently predefined and must be altered manually depending on the environment.",
                "A large number of shared resources requires older historical information to avoid a too frequently resources exploration.",
                "In contrast, a dynamic environment with varying capacities requires more up-to-date information to make more reliable predictions.",
                "We are aware of the long learning phase in environments with a large number of shared resources known by each agent.",
                "In the case that more resources are requested by agents than shared resources are provided by all servers, all agents will randomly explore all known servers.",
                "This process of acquiring resource load information about all servers can take a long time in the case that no not enough shared resources for all tasks are provided.",
                "In the worst case, by the time for exploring all servers, historical information of some servers could be already outdated and the exploration starts again.",
                "In this situation, it is difficult for an agent to efficiently gather historical information about all remote servers.",
                "This issue needs more investigation in the future. 7.",
                "REFERENCES [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel, and J. Shalf.",
                "Cactus Tools for Grid Applications.",
                "In Cluster Computing, volume 4, pages 179-188, Hingham, MA, USA, 2001.",
                "Kluwer Academic Publishers. [2] W. B. Arthur.",
                "Inductive Reasoning and Bounded Rationality.",
                "American Economic Review (Papers and Proceedings), 84(2):406-411, May 1994. [3] T. Bourke.",
                "Server Load Balancing.",
                "OReilly Media, 1 edition, August 2001. [4] R. Buyya.",
                "Economic-based Distributed Resource Management and Scheduling for Grid Computing.",
                "PhD thesis, Monash University, Melbourne, Australia, May 2002. [5] R. Buyya, D. Abramson, J. Giddy, and H. Stockinger.",
                "Economic Models for Resource Management and Scheduling in Grid Computing.",
                "Special Issue on Grid Computing Environments of the Journal Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin, and D. DiNucci.",
                "Architectural Models for Resource Management in the Grid.",
                "In Proceedings of the First International Workshop on Grid Computing, pages 18-35.",
                "Springer LNCS, 2000. [7] T. L. Casavant and J. G. Kuhl.",
                "A taxonomy of scheduling in general-purpose distributed computing systems.",
                "IEEE Transactions on Software Engineering, 14(2):141-154, February 1988. [8] D. Challet and Y. Zhang.",
                "Emergence of Cooperation and Organization in an Evolutionary Game.",
                "Physica A, 407(246), 1997. [9] K.-P. Chow and Y.-K. Kwok.",
                "On load balancing for distributed multiagent computing.",
                "In IEEE Transactions on Parallel and Distributed Systems, volume 13, pages 787- 801.",
                "IEEE, August 2002. [10] S. H. Clearwater.",
                "Market-based control.",
                "A Paradigm for Distributed Resource Allocation.",
                "World Scientific, Singapore, 1996. [11] C. Fl¨us.",
                "Capacity Planning of Mobile Agent Systems Designing Efficient Intranet Applications.",
                "PhD thesis, Universit¨at Duisburg-Essen (Germany), Feb. 2005. [12] I.",
                "Foster and C. Kesselman.",
                "Globus: A Metacomputing Infrastructure Toolkit.",
                "International Journal of Supercomputing Applications, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I.",
                "Foster, M. Livny, and S. Tuecke.",
                "Condor-G: A Computation Management Agent for Multi-Institutional Grids.",
                "Cluster Computing, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar, and K. Lerman.",
                "Resource allocation games with changing resource capacities.",
                "In Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 145 - 152, Melbourne, Australia, 2003.",
                "ACM Press, New York, NY, USA. [15] C. Georgousopoulos and O. F. Rana.",
                "Combining state and model-based approaches for mobile agent load balancing.",
                "In SAC 03: Proceedings of the 2003 ACM symposium on Applied computing, pages 878-885, New York, NY, USA, 2003.",
                "ACM Press. [16] G. Mainland, D. C. Parkes, and M. Welsh.",
                "Decentralized Adaptive Resource Allocation for Sensor Networks.",
                "In Proceedings of the 2nd USENIX Symposium on Network Systems Design and Implementation(NSDI 05), May 2005. [17] S. Manvi, M. Birje, and B. Prasad.",
                "An Agent-based Resource Allocation Model for Computational Grids.",
                "Multiagent and Grid Systems - An International Journal, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham, and M. Tennenholtz.",
                "Adaptive Load Balancing: A Study in Multi-Agent Learning.",
                "In Journal of Artificial Intelligence Research, volume 2, pages 475-500, 1995. [19] T. Schlegel, P. Braun, and R. Kowalczyk.",
                "Towards Autonomous Mobile Agents with Emergent Migration Behaviour.",
                "In Proceedings of the Fifth International Joint Conference on Autonomous Agents & Multi Agent Systems (AAMAS 2006), Hakodate (Japan), pages 585-592.",
                "ACM Press, May 2006. [20] W3C.",
                "Web services activity, 2002. http://www.w3.org/2002/ws - last visited 23.10.2006. [21] M. M. Waldrop.",
                "Complexity: The Emerging Science at the Edge of Order and Chaos.",
                "Simon & Schuster, 1st edition, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik, and T. Bryan.",
                "Analyzing Market-Based Resource Allocation Strategies for the Computational Grid.",
                "In International Journal of High Performance Computing Applications, volume 15, pages 258-281.",
                "Sage Science Press, 2001.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 81"
            ],
            "original_annotated_samples": [
                "Our solution is based on the <br>self-organisation</br> of agents, which does not require any facilitator or management layer.",
                "In this paper we propose a distributed solution of the resource allocation problem based on <br>self-organisation</br> of the resource consumers in a system with limited resources.",
                "Selforganisation of all agents leads to a <br>self-organisation</br> of the 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS system resources and is an emergent property of the system [21].",
                "A resource allocation approach for sensor networks based on <br>self-organisation</br> techniques and reinforcement learning is presented in [16] with main focus on the optimisation of energy consumption of network nodes."
            ],
            "translated_annotated_samples": [
                "Nuestra solución se basa en la <br>autoorganización</br> de agentes, la cual no requiere ningún facilitador o capa de gestión.",
                "En este documento proponemos una solución distribuida del problema de asignación de recursos basada en la <br>autoorganización</br> de los consumidores de recursos en un sistema con recursos limitados.",
                "La <br>autoorganización</br> de todos los agentes conduce a una <br>autoorganización</br> de los recursos del sistema 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS y es una propiedad emergente del sistema [21].",
                "Se presenta un enfoque de asignación de recursos para redes de sensores basado en técnicas de <br>autoorganización</br> y aprendizaje por refuerzo en [16], con un enfoque principal en la optimización del consumo de energía de los nodos de la red."
            ],
            "translated_text": "Hacia la asignación de recursos basada en agentes autoorganizados en un entorno de múltiples servidores. Tino Schlegel1, Ryszard Kowalczyk2. Universidad de Tecnología Swinburne, Facultad de Tecnologías de la Información y la Comunicación, Hawthorn, 3122 Victoria, Australia {tschlegel1, rkowalczyk2}@ict.swin.edu.au. RESUMEN Las aplicaciones distribuidas requieren técnicas distribuidas para una asignación eficiente de recursos. Estas técnicas deben tener en cuenta la heterogeneidad y la posible falta de fiabilidad de los recursos y consumidores de recursos en entornos distribuidos. En este artículo proponemos un algoritmo distribuido que resuelve el problema de asignación de recursos en sistemas multiagentes distribuidos. Nuestra solución se basa en la <br>autoorganización</br> de agentes, la cual no requiere ningún facilitador o capa de gestión. La asignación de recursos en el sistema es un efecto puramente emergente. Presentamos los resultados del mecanismo de asignación de recursos propuesto en el entorno simulado de servidores múltiples estáticos y dinámicos. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Coherencia y coordinación Términos Generales Algoritmos 1. INTRODUCCIÓN Con la creciente popularidad de tecnologías de computación distribuida como Grid [12] y servicios web [20], Internet se está convirtiendo en una plataforma informática poderosa donde diferentes pares de software (por ejemplo, agentes) pueden utilizar recursos informáticos existentes para realizar tareas. En este sentido, cada agente es un consumidor de recursos que adquiere una cierta cantidad de recursos para la ejecución de sus tareas. Es difícil para un mecanismo central de asignación de recursos recopilar y gestionar la información sobre todos los recursos compartidos y consumidores de recursos para realizar de manera efectiva la asignación de recursos. Por lo tanto, se requieren soluciones distribuidas del problema de asignación de recursos. Los investigadores han reconocido estos requisitos [10] y han propuesto técnicas para la asignación de recursos distribuidos. Un tipo prometedor de enfoques distribuidos se basa en modelos de mercado económico [4], inspirados en los principios de los mercados de valores reales. Aunque esos enfoques estén distribuidos, generalmente requieren un facilitador para la fijación de precios, la búsqueda de recursos y la asignación de trabajos a los recursos [5, 9]. Otro problema principalmente sin resolver de esos enfoques es el ajuste fino del precio y el tiempo, las restricciones presupuestarias para permitir una asignación eficiente de recursos en sistemas grandes y dinámicos [22]. En este documento proponemos una solución distribuida del problema de asignación de recursos basada en la <br>autoorganización</br> de los consumidores de recursos en un sistema con recursos limitados. En nuestro enfoque, los agentes asignan dinámicamente tareas a servidores que proporcionan una cantidad limitada de recursos. En nuestro enfoque, los agentes seleccionan de forma autónoma la plataforma de ejecución para la tarea en lugar de pedir a un intermediario de recursos que realice la asignación. Todo el control necesario para nuestro algoritmo está distribuido entre los agentes en el sistema. Optimizan continuamente el proceso de asignación de recursos a lo largo de su vida para adaptarse a los cambios en la disponibilidad de recursos compartidos, aprendiendo de decisiones de asignación pasadas. La única información disponible para todos los agentes son la carga de recursos y la información sobre el éxito de la asignación de recursos de asignaciones pasadas. La información adicional sobre la carga de recursos de los servidores no se difunde. El concepto básico de nuestra solución está inspirado en el razonamiento inductivo y la racionalidad limitada introducida por W. Brian Arthur [2]. El mecanismo propuesto no requiere una autoridad central de control, una capa de gestión de recursos o introducir comunicación adicional entre agentes para decidir qué tarea se asigna en qué servidor. Demostramos que este mecanismo funciona bien en sistemas dinámicos con un gran número de tareas y puede adaptarse fácilmente a diferentes tamaños de sistemas. Además, el rendimiento general del sistema no se ve afectado en caso de que los agentes o servidores fallen o no estén disponibles. El enfoque propuesto proporciona una forma sencilla de implementar la asignación de recursos distribuidos y tiene en cuenta las tendencias del sistema multiagente hacia la autonomía, la heterogeneidad y la falta de fiabilidad de los recursos y agentes. Esta técnica propuesta puede ser fácilmente complementada por técnicas para encolar o rechazar solicitudes de asignación de recursos de agentes [11]. Tales capacidades de auto-gestión de agentes de software permiten una asignación de recursos confiable incluso en un entorno con proveedores de recursos poco confiables. Esto se puede lograr mediante las interacciones mutuas entre agentes aplicando técnicas de la teoría de sistemas complejos. La <br>autoorganización</br> de todos los agentes conduce a una <br>autoorganización</br> de los recursos del sistema 74 978-81-904262-7-5 (RPS) c 2007 IFAAMAS y es una propiedad emergente del sistema [21]. El resto del documento está estructurado de la siguiente manera: La siguiente sección proporciona una visión general del trabajo relacionado ya realizado en el área de equilibrio de carga, asignación de recursos o programación. La sección 3 describe el modelo de un entorno multiagente que se utilizó para realizar simulaciones con el fin de evaluar el rendimiento. Las secciones 4 y 5 describen el algoritmo de asignación de recursos distribuidos y presentan varios resultados experimentales. Un resumen, una conclusión y una perspectiva del trabajo futuro finalizan este documento. El trabajo relacionado La asignación de recursos es un problema importante en el área de la informática. En los últimos años, diferentes grupos de investigación han propuesto soluciones basadas en diferentes suposiciones y restricciones [7, 3, 15, 10]. En términos generales, la asignación de recursos es un mecanismo o política para la gestión eficiente y efectiva del acceso a un recurso limitado o conjunto de recursos por parte de sus consumidores. En el caso más simple, los consumidores de recursos solicitan a un intermediario central o despachador los recursos disponibles donde el consumidor de recursos será asignado. El corredor generalmente tiene pleno conocimiento de todos los recursos del sistema. Todas las solicitudes entrantes son dirigidas al corredor, quien es el único tomador de decisiones. En esos enfoques, el consumidor de recursos no puede influir en el proceso de decisión de asignación. El equilibrio de carga [3] es un caso especial del problema de asignación de recursos que utiliza un intermediario que intenta ser justo con todos los recursos al equilibrar la carga del sistema de manera equitativa entre todos los proveedores de recursos. Este mecanismo funciona mejor en un sistema homogéneo. Una técnica distribuida simple para la gestión de recursos es la planificación de capacidad mediante la negativa o encolamiento de agentes entrantes para evitar la sobrecarga de recursos [11]. Desde la perspectiva del propietario de recursos, esta técnica es importante para prevenir la sobrecarga en el recurso, pero no es suficiente para una asignación efectiva de recursos. Esta técnica solo puede proporcionar un buen complemento para los mecanismos de asignación de recursos distribuidos. La mayoría de las técnicas actuales para la asignación de recursos en herramientas de computación en malla como Globus [12] o Condor-G [13] coordinan la asignación de recursos con un subastador, árbitro, despachador, programador o gestor. Esos coordinadores suelen necesitar tener conocimiento global sobre el estado de todos los recursos del sistema. Un ejemplo de un algoritmo de asignación de recursos dinámicos es el proyecto Cactus [1] para la asignación de trabajos computacionales muy costosos. El valor de las soluciones distribuidas para el problema de asignación de recursos ha sido reconocido por la investigación [10]. Inspirados en los principios de los mercados de valores, se han desarrollado modelos de mercado económico para negociar recursos con el fin de regular la oferta y la demanda en la red. Estos enfoques utilizan diferentes estrategias de precios como modelos de precios publicados, diferentes métodos de subasta o un modelo de mercado de productos básicos. Los usuarios intentan comprar recursos baratos necesarios para ejecutar el trabajo, mientras que los proveedores intentan obtener la mayor ganancia posible y operar los recursos disponibles a plena capacidad. Se presenta una colección de diferentes técnicas de asignación de recursos distribuidos basadas en modelos de mercado en Clearwater [10]. Buyya et al. desarrollaron un marco de asignación de recursos basado en la regulación de la oferta y la demanda [4] para Nimrod-G [6] con el enfoque principal en los plazos de entrega de trabajos y las restricciones presupuestarias. El Modelo de Asignación de Recursos basado en Agentes (ARAM) para redes está diseñado para programar trabajos computacionalmente costosos utilizando agentes. La desventaja de este modelo es el extenso uso de intercambio de mensajes entre agentes para monitoreo periódico e intercambio de información dentro de la estructura jerárquica. Las subtareas de un trabajo migran a través de la red hasta que encuentran un recurso que cumpla con las restricciones de precio. El itinerario de migración de trabajos está determinado por los recursos que los conectan en diferentes topologías [17]. El mecanismo propuesto en este documento elimina la necesidad de intercambio periódico de información sobre las cargas de recursos y no requiere una topología de conexión entre los recursos. Se ha realizado un considerable trabajo sobre técnicas de asignación descentralizada de recursos utilizando teoría de juegos publicado en los últimos años. La mayoría de ellos están formulados como juegos repetitivos en un entorno idealista y simplificado. Por ejemplo, Arthur introdujo el problema del bar El Farol, que no permite una solución perfecta, lógica y racional. Es un problema de decisión mal definido que asume y modela el razonamiento inductivo. Probablemente sea uno de los ejemplos más estudiados de sistemas adaptativos complejos derivados de la forma en que los humanos deciden problemas mal definidos. Una variación del problema de El Farol es el llamado juego de la minoría [8]. En este juego de decisión repetitivo, un número impar de agentes debe elegir entre dos recursos basándose en información de éxito pasado, tratando de asignarse al recurso con la minoría. Galstyan et al. [14] estudiaron una variación con más de dos recursos, cambiando las capacidades de los recursos y la información de los agentes vecinos. Demostraron que los agentes pueden adaptarse de manera efectiva a las capacidades cambiantes en este entorno utilizando un conjunto de simples tablas de búsqueda (estrategias) por agente. Otra técnica distribuida que se emplea para resolver el problema de asignación de recursos se basa en el aprendizaje por refuerzo [18]. Similar a nuestro enfoque, un conjunto de agentes compiten por un número limitado de recursos basados únicamente en experiencias individuales previas. En este documento, el objetivo del sistema es maximizar el rendimiento del sistema garantizando la equidad de los recursos, medida como el tiempo promedio de procesamiento por unidad de trabajo. Se presenta un enfoque de asignación de recursos para redes de sensores basado en técnicas de <br>autoorganización</br> y aprendizaje por refuerzo en [16], con un enfoque principal en la optimización del consumo de energía de los nodos de la red. Propusimos un enfoque de equilibrio de carga autoorganizado para un único servidor con el objetivo de optimizar los costos de comunicación de agentes móviles. Un agente móvil rechazará una migración a un servidor de agente remoto si espera que el servidor de destino ya esté sobrecargado por otros agentes o tareas del servidor. Los agentes toman sus decisiones por sí mismos basándose en pronósticos de la utilización del servidor. En este documento se presenta una solución para un entorno de múltiples servidores sin tener en cuenta los costos de comunicación o migración. 3. DESCRIPCIÓN DEL MODELO Modelamos un sistema multiagente distribuido como una red de servidores L = {l1, . . . , lm}, agentes A = {a1, . . . , an} y tareas T = {T1, ..., Tm}. Cada agente tiene un número de tareas Ti que deben ser ejecutadas durante su vida útil. Una tarea Ti requiere U(Ti, t) recursos para su ejecución en el tiempo t, independientemente de su servidor de ejecución. Los recursos para la ejecución de tareas son proporcionados por cada servidor li. La ubicación de la ejecución de las tareas en general está especificada por el mapa L: T × t → L. Un agente debe conocer la existencia de recursos del servidor para asignar tareas en esos recursos. Escribimos LS (ai) The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 75 Recursos del Sistema Anfitrión l4 Anfitrión l3 Anfitrión l2 2a 3a 4a a Anfitrión l1 1a 6a5 T1 T2 T3 T4 T5 T6 Figura 1: Una ilustración de nuestro modelo de múltiples servidores con recursos exclusivos y compartidos para la ejecución del agente. para abordar el conjunto de recursos conocidos por el agente ai. Los recursos en el sistema pueden ser utilizados por todos los agentes para la ejecución de tareas. La cantidad de recursos proporcionados C(li, t) de cada servidor puede variar con el tiempo. La utilización de recursos de un servidor en el tiempo t se calcula utilizando la ecuación 1, sumando el consumo de recursos U(Tj, t) de cada tarea Tj que se ejecuta en el recurso en el tiempo t. Todas las unidades de recursos utilizadas en nuestro modelo representan métricas reales como memoria o ciclos de procesador. Además del caso en que la cantidad total de recursos del sistema es suficiente para ejecutar todas las tareas, también nos interesa el caso en que no se proporcionan suficientes recursos del sistema para cumplir con todas las solicitudes de asignación. Es decir, la capacidad total de recursos compartidos es menor que la cantidad de recursos solicitados por los agentes. En este caso, algunos agentes deben esperar con su solicitud de asignación hasta que se esperen recursos libres. El modelo de sistema multiagente utilizado para nuestras simulaciones está ilustrado en la Figura 1.4. ASIGNACIÓN DE RECURSOS AUTOORGANIZADA El algoritmo de asignación de recursos descrito en esta sección está integrado en cada agente. La única información necesaria para tomar una decisión de asignación de recursos para una tarea es la utilización del servidor de las asignaciones de tareas completadas en esos servidores. No hay una difusión adicional de información sobre la utilización de recursos del servidor o información sobre recursos libres. Nuestra solución demuestra que los agentes pueden autoorganizarse en un entorno dinámico sin necesidad de información de monitoreo activo que genere una gran sobrecarga de tráfico en la red. Además, no tenemos ninguna autoridad central de control. Todo comportamiento que conduce a la asignación de recursos es creado por la competencia efectiva de los agentes por recursos compartidos y es un efecto puramente emergente. Los agentes en nuestro sistema multiagente compiten por recursos o un conjunto de recursos para ejecutar tareas. La acción colectiva de estos agentes cambia el entorno y, con el paso del tiempo, tienen que adaptarse a estos cambios para competir de manera más efectiva en el entorno recién creado. Nuestro enfoque se basa en diferentes creencias de los agentes, representadas por predictores y diferente información sobre su entorno. Los agentes prefieren una asignación de tareas en un servidor con recursos disponibles. Sin embargo, no hay forma de estar seguro de la cantidad de recursos del servidor disponibles de antemano. Todos los agentes tienen las mismas preferencias y un agente asignará una tarea en un servidor si espera tener suficientes recursos libres para su ejecución. No hay comunicación entre agentes. Las acciones tomadas por los agentes influyen en las acciones de otros agentes de forma indirecta. El mecanismo aplicado está inspirado en el razonamiento inductivo y los principios de racionalidad limitada [2]. Se deriva de la forma humana de resolver problemas mal definidos. Los humanos tienden a tener en cuenta muchas hipótesis y actuar en base a la más plausible. Por lo tanto, cada agente lleva un registro del rendimiento de una colección privada de sus predictores y selecciona aquel que actualmente sea más prometedor para la toma de decisiones. 4.1 Algoritmo de asignación de recursos Esta sección describe el mecanismo de decisión para nuestra asignación de recursos autoorganizada. Todo el control necesario está integrado en los propios agentes. No hay una autoridad superior de control, capa de gestión para apoyo en la toma de decisiones o distribución de información. Todos los agentes tienen un conjunto de predictores para cada recurso con el fin de pronosticar la futura utilización de estos servidores para la asignación potencial de tareas. Para hacerlo, los agentes utilizan información histórica de asignaciones de tareas pasadas en esos recursos. Basándose en la utilización de recursos pronosticada, el agente tomará su decisión de asignación de recursos. Después de que la tarea haya finalizado su ejecución y devuelto los resultados al agente, se evalúan las actuaciones del predictor y se actualiza la información histórica. El Algoritmo 1 muestra el algoritmo de asignación de recursos para cada agente. El agente primero predice la carga de recursos de los próximos pasos para cada servidor con información histórica (línea 3-7). Si la carga de recursos predicha más el consumo de recursos de las tareas está por debajo de la última capacidad de servidor conocida, este servidor se agrega a la lista de candidatos para la asignación. El agente luego evalúa si se esperan recursos compartidos gratuitos para la asignación de tareas. En el caso de que no se esperen recursos gratuitos (línea 9), el agente explorará los recursos asignando la tarea a un servidor seleccionado al azar de entre todos los servidores no predecibles para recopilar información sobre la carga de recursos. Este es el caso estándar al comienzo del ciclo de vida del agente, ya que no hay información disponible sobre el entorno. La predicción de la carga de recursos en sí misma utiliza un conjunto de r predictores P(a, l) := {pi|1 ≤ i ≤ r} por servidor. Uno de los predictores pA ∈ P de cada conjunto se llama predictor activo, el cual pronostica la carga de recursos de los próximos pasos. Cada predictor es una función P: H → ℵ+ ∪ {0} del espacio de datos históricos H a un número entero no negativo, que es el valor pronosticado. Por ejemplo, un predictor podría pronosticar una carga de recursos igual a la cantidad promedio de recursos ocupados durante la última ejecución en este recurso. Un historial H de información de carga de recursos es una lista de hasta m elementos de historial hi = (xi, yi), que incluyen la fecha de observación xi y el valor observado yi. El elemento más reciente del historial es h0. Nuestro algoritmo utiliza un conjunto de predictores en lugar de solo uno, para evitar que todos los agentes tomen la misma decisión basada en el valor predicho, lo que invalidaría sus creencias. Imagina que solo un recurso compartido es conocido por un número de agentes que utilizan un predictor para pronosticar el 76 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Carga de Recursos Tiempo (a) Predictor6 Predictor7 Predictor 8 Predictor9 Predictor10 Predictor2 Predictor 4 Predictor 3 Predictor5 Predictor1 (b) Figura 2: (a) Información de carga de recursos recopilada de asignaciones de tareas anteriores que se utiliza para predicciones futuras. (b) Distribución de probabilidad de los predictores para seleccionar el nuevo predictor activo. mismo valor que la última utilización conocida de recursos del servidor. Todos los agentes que asignaron una tarea en un servidor que estaba ligeramente sobrecargado rechazarían otra asignación en este servidor, ya que esperan que el servidor vuelva a estar sobrecargado según las predicciones. Como resultado, el servidor tendría una gran cantidad de recursos libres. Un conjunto de diferentes predictores que predicen diferentes valores evita esta situación de invalidar las creencias de los agentes [19]. Un ejemplo de información de carga de recursos recopilada de las últimas 5 visitas de un agente a un recurso compartido se puede ver en la Figura 2(a). Muestra que el recurso fue visitado con frecuencia, lo que significa que había recursos gratuitos disponibles para la ejecución y no era necesario explorar otros servidores. Esto puede cambiar en el futuro ya que la carga de recursos ha aumentado significativamente recientemente. En el caso en que el conjunto de servidores que se predice que tienen recursos disponibles no esté vacío (línea 13), el agente selecciona uno de ellos para su asignación. Hemos implementado dos algoritmos alternativos para la selección de un servidor para la asignación de tareas. Algoritmo 1 Algoritmo de asignación de recursos de un agente 1 L ← ∅ //servidor con recursos libres 2 u ← U(T, t + 1) //consumo de recursos de la tarea 3 para todo P(a, l)|l ∈ LS (a) hacer 4 U(l) ← predicción de carga de recursos (P(a, l), t + 1) 5 si U(l) + u ≤ C(l) entonces 6 L ← L ∪ {P(a, l)} 7 fin si 8 fin para 9 si L = ∅ entonces 10 //todos los recursos compartidos impredecibles 11 E ← LS /{l ∈ LS (a)|P(a, l) ∈ L} 12 allocationServer ← un elemento aleatorio de E 13 else 14 allocationServer ← selección de servidor (L) 15 fin si 16 devolver allocationServer El Algoritmo 2 muestra el primer método, que es una selección no determinista según la previsibilidad de la utilización de recursos del servidor. Una distribución de probabilidad se calcula a partir de los niveles de confianza de las predicciones de recursos. El nivel de confianza depende de tres factores: la precisión del predictor activo, la cantidad de información histórica sobre el servidor y la edad promedio de la información histórica (ver Ecuación 3). El servidor con el nivel de confianza más alto tiene la mayor probabilidad de ser seleccionado como el servidor activo. G(P) = w1 · tamaño(H) m + w2 · Edad(H) máx Edad(H) + w3 · g(p) máx (g(p)) (3) donde: wi − pesos tamaño(H) − número de datos en el historial m − número máximo de valores históricos Edad(H) − edad promedio de los datos históricos g(p) − ver ecuación 4 Algoritmo 2 selecciónServidor(L) - mejor servidor predecible 1 para todos los P(a, l) ∈ L hacer 2 calcular G(P) 3 fin para 4 transformar todos los G(P) en una distribución de probabilidad 5 devolver l ∈ LS seleccionado de acuerdo con la distribución de probabilidad Algoritmo 3 selecciónServidor(L) - más recursos libres 1 para todos los P(a, l) ∈ L hacer 2 c(l) ← C(l) − Ul 3 fin para 4 devolver l ∈ LS |c(l) es máximo El segundo método de selección alternativo de un servidor del conjunto de servidores predichos con recursos libres es determinista y se muestra en el algoritmo 3. Se elige el servidor con la mayor cantidad esperada de recursos gratuitos del conjunto L de servidores con recursos gratuitos esperados. En el caso en que todos los agentes predigan que hay más recursos disponibles en un servidor en particular, todos los agentes asignarán la tarea a este servidor, lo que invalidaría las creencias de los agentes. Sin embargo, nuestros experimentos muestran que la información de historial individual y la selección no determinista del predictor activo generalmente evitan esta situación. En caso de que el algoritmo de asignación de recursos no devuelva ningún servidor (Alg. 1, línea 16), no se recomienda asignar un recurso. El agente no asignará la tarea a un recurso. Este caso ocurre solo si es posible predecir la carga de recursos para todos los servidores pero no se esperan recursos libres. Después de que la ejecución del agente haya finalizado, se realiza el proceso de evaluación descrito en el algoritmo 4. Este proceso se divide en tres casos. Primero, la tarea no fue asignada a un recurso. En este caso, el agente no puede decidir si la decisión de no asignar la tarea fue correcta o no. El agente luego elimina los datos históricos antiguos. Esto es necesario para una adaptación exitosa en el futuro. Si el agente no eliminara la información histórica antigua, la predicción siempre pronosticaría que no hay recursos disponibles gratuitos. El agente nunca asignaría una tarea a uno de los recursos en el futuro. La información histórica antigua se elimina del historial de recursos de los agentes utilizando una tasa de descomposición. La tasa de decaimiento es una función de distribución acumulativa que calcula la probabilidad de que un elemento histórico sea eliminado después de haber alcanzado un cierto The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 77 Edad de los datos históricos Tasa de decaimiento 0 1 más antiguo Figura 3: Tasa de decaimiento de la edad de la información histórica. La implementación actual utiliza una función de densidad de probabilidad constante en un dominio configurable. La Figura 3 muestra un ejemplo de una función de distribución acumulativa para la tasa de decaimiento. Dependiendo del entorno, la función de densidad de probabilidad debe ser modificada. Si el número de servidores potenciales por agente es alto, la información histórica debe mantenerse por más tiempo para evitar la exploración de recursos no explorados. Además, un entorno dinámico requiere información más actualizada para realizar predicciones más fiables. El segundo caso en el proceso de evaluación (Alg. 4, línea 5) describe las acciones tomadas después de que un servidor fue visitado por primera vez. El agente crea un nuevo conjunto de predictores para este servidor y registra la información histórica. Todos los predictores para este conjunto son elegidos al azar de un conjunto predefinido. g(p) = l i=0 ri (4) donde: ri = ⎧ ⎨ ⎩ 1 si la decisión i-ésima es correcta 0 si el resultado i-ésimo es desconocido −1 si la decisión i-ésima es incorrecta El caso general (Alg. 4, línea 8) es la evaluación después de que el agente asignó la tarea a un recurso. El agente evalúa todos los predictores del conjunto de predictores para este recurso al predecir la carga del recurso con todos los predictores basados en los datos históricos antiguos. Los predictores que hicieron una predicción correcta, lo que significa que la asignación de recursos fue correcta, recibirán una calificación positiva. Este es el caso en el que el recurso no estaba sobrecargado y se predijeron recursos libres para la ejecución, o el recurso estaba sobrecargado y este predictor habría evitado la asignación. Todos los predictores que predijeron valores que llevarían a decisiones incorrectas recibirán calificaciones negativas. En todos los demás casos, que incluye cuando no era posible hacer una predicción, se otorga una calificación neutral a los pronosticadores. Basándose en estas calificaciones de rendimiento, los niveles de confianza se calculan utilizando la ecuación 4. La confianza para todos los predictores que no pueden predecir con la información histórica actual sobre el servidor se establece en cero para evitar la selección de estos como el nuevo predictor activo. Estos valores se transforman en una distribución de probabilidad. Según esta distribución de probabilidad, el nuevo predictor activo se elige e implementa mediante una selección de ruleta. La Figura 2(b) ilustra las probabilidades de un conjunto de 10 predictores, las cuales han sido calculadas a partir de los niveles de confianza de los predictores. Aunque el predictor 9 tiene la probabilidad de selección más alta, no fue elegido por el proceso de selección de la ruleta como el predictor activo. Esta selección no determinista de predictores evita la invalidación de las creencias de los agentes en caso de que los agentes tengan el mismo conjunto de predictores. La precisión de la predicción, que es el error de la predicción en comparación con el valor observado, no se tiene en cuenta. Supongamos que el predictor activo predice ligeramente por encima de la capacidad de recursos, lo que no conduce a una asignación de recursos. De hecho, habría suficientes recursos disponibles para la ejecución. Una predicción menos precisa que está muy por debajo de la capacidad llevaría a la decisión correcta y, por lo tanto, es preferible. La última acción del algoritmo de evaluación (Alg. 4, línea 22) actualiza el historial con la información más reciente de carga de recursos del servidor. Los datos de la historia más antigua se sobrescriben si ya se han registrado m valores de historia para el servidor. Algoritmo 4 Evaluación de Decisiones 1 si l ∈ LE entonces 2 para todos los P(a, l)|l ∈ LS (a) hacer 3 evaporar datos históricos antiguos 4 fin para 5 sino si P(a, l) = nulo entonces 6 crear (P(a, l)) 7 actualizar H(l) 8 sino 9 para todos los p ∈ P(a, l) hacer 10 pred ← predicción de carga de recursos(p) 11 si (U(l) ≤ C(l) Y pred + U(a, t) ≤ C(l)) O (U(l) > C(l) Y pred + U(a, t) > C(l)) entonces 12 agregar calificación positiva(p) 13 sino si U(l) ≤ C(l) Y pred + U(a, t) > C(l) O U(l) ≤ C(l) Y pred + U(a, t) > C(l) entonces 14 agregar calificación negativa(p) 15 sino 16 agregar calificación neutral(p) 17 fin si 18 fin para 19 calcular todos los g(p); g(p) ← 0, si p no está funcionando 20 transformar todos los g(p) en una distribución de probabilidad 21 pA ← p ∈ P(a, l) es seleccionado de acuerdo a esta distribución de probabilidad 22 actualizar H(l) 23 fin si 4.2 Observaciones y Limitaciones del Enfoque Nuestro mecanismo de predicción utiliza varios tipos de predictores simples en lugar de uno sofisticado. Este método asegura que los agentes puedan competir de manera más efectiva en un entorno cambiante. Diferentes tipos de predictores son adecuados para diferentes situaciones y entornos. Por lo tanto, todos los predictores se evalúan después de cada decisión y se selecciona el predictor activo. Este carácter no determinista del nuevo predictor activo respalda que las creencias de los agentes no serán invalidadas, lo cual ocurre en el caso de que todos los predictores estén tomando la misma decisión. Especialmente si solo hay un recurso compartido disponible y todos los agentes tienen la opción de ir a este recurso compartido o no [19]. Nuestro enfoque de autoorganización es robusto frente a fallos de recursos o agentes en el sistema. Si se unen o se van, el sistema puede autoorganizarse rápidamente y adaptarse a las nuevas condiciones. No hay cuellos de botella clásicos ni un único punto de falla como en los mecanismos centralizados. Las limitaciones son la dependencia de la información de utilización de recursos históricos de otros servidores. Un pronóstico de la utilización de recursos de un servidor remoto solo es posible si un agente tiene una cantidad de información histórica sobre un recurso compartido. Si el número de servidores por agente es muy grande, no hay una manera eficiente de recopilar información histórica sobre los servidores remotos. Este problema ocurre si la cantidad de recursos compartidos proporcionados es de 78. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) es limitada y no es suficiente para todos los consumidores de recursos. En este caso, un agente intentaría aleatoriamente todos los servidores conocidos hasta encontrar uno con recursos disponibles o no haya ninguno. En el peor de los casos, para cuando se prueben todos los servidores, la información histórica de los servidores ya estará desactualizada. EVALUACIÓN EXPERIMENTAL La primera parte de esta sección ofrece un breve resumen de la configuración de nuestro entorno de simulación. En el resto de la sección, se presentan y discuten los resultados de los experimentos. Todos los experimentos se llevan a cabo en un banco de pruebas especial que simula y modela un sistema multiagente. Hemos implementado este banco de pruebas en el lenguaje de programación Java, independiente de cualquier conjunto de herramientas de agente específico. Permite una variedad de experimentos en entornos estables y dinámicos con un número configurable de agentes, tareas y servidores. Se utiliza un modelo basado en eventos para activar todas las actividades en el sistema. Para todas las simulaciones, limitamos el número de datos históricos para cada servidor a 10, el número de calificaciones de rendimiento por predictor a 10 y asignamos 10 predictores a cada conjunto de predictores para cada agente. Todos los predictores son elegidos al azar de un conjunto predefinido arbitrario de 32 predictores del siguiente tipo. Los predictores difieren en diferentes ciclos o tamaños de ventana. - Predictor de n-ciclos: p(n) = yn utiliza el valor de la historia en la posición n-ésima desde el final. - Predictor de n-media: p(n) = 1 n · n i=1 yi utiliza el valor medio de los n últimos valores de la historia. - Predictor de regresión lineal de n: p(n, t) = a·t+b utiliza el valor de regresión lineal de los últimos n valores de la historia, donde a, b se calculan utilizando regresión lineal con ajuste de mínimos cuadrados considerando los últimos n datos de la historia. - Predictor de distribución de n: utiliza un valor aleatorio de la distribución de frecuencia de los n últimos valores de la historia. - Predictor de espejo de n: p(n) = 2 · H − yn utiliza la imagen de espejo alrededor de la media de todos los valores de la historia del n-ésimo valor de la historia. La eficiencia de nuestra propuesta de asignación de recursos autoorganizada se evalúa mediante el desarrollo de carga de recursos de cada servidor durante la simulación, así como el desarrollo acumulado de carga de recursos totales sobre todos los recursos compartidos. Las cargas de recursos para cada servidor se calculan utilizando la ecuación 1 como la suma del consumo de recursos de todos los agentes actualmente ejecutados en este servidor. La carga total de recursos del sistema se calcula como la suma de la carga de recursos de todos los recursos. El algoritmo de asignación de recursos autoorganizado tiene elementos aleatorios. Por lo tanto, los resultados presentados muestran valores medios y desviación estándar calculados sobre 100 experimentos repetidos. 5.1 Configuración Experimental Los siguientes parámetros tienen un impacto en el proceso de asignación de recursos. Damos una visión general de los parámetros y una breve descripción. - Agentes: El número de agentes involucrados en la asignación de recursos. Este número varía en los experimentos entre 650 y 750 dependiendo de la cantidad total de recursos del sistema disponibles. - Consumo de recursos: Cada tarea consume recursos del servidor para su ejecución. El consumo de recursos se asigna aleatoriamente a cada tarea antes de su asignación de un intervalo. El consumo de recursos se especifica en unidades de recursos que corresponden a métricas del mundo real como la memoria o los ciclos del procesador. - Servidor de inicio de agentes: Todos los agentes se encuentran en un servidor de inicio de agentes. Los recursos de esos servidores no son considerados en nuestra simulación y no afectan el rendimiento de la asignación de recursos. - Recursos del servidor: Los experimentos utilizan servidores con diferentes cantidades de recursos compartidos disponibles. El primer experimento se lleva a cabo en un entorno de servidor estático que proporciona la misma cantidad de recursos compartidos, mientras que el otro experimento varía los recursos de servidor disponibles durante la simulación. La cantidad total de recursos permanece constante en ambos experimentos. - Tiempo de ejecución: El tiempo de ejecución de una tarea para la ejecución, independiente de la plataforma de ejecución. Por esta vez, la tarea consume la cantidad asignada de recursos del servidor. Este parámetro se asigna aleatoriamente antes de la ejecución. - Tiempo de creación de la tarea: El tiempo antes de que se cree la siguiente tarea después de la finalización exitosa o fallida. Este parámetro influye en la antigüedad de la información histórica sobre los recursos y tiene una gran influencia en la duración de la fase inicial de adaptación. Este parámetro se asigna aleatoriamente después de que se haya completado la tarea. 5.2 Resultados Experimentales Esta sección muestra los resultados de experimentos seleccionados que demuestran el rendimiento de nuestro mecanismo propuesto de asignación de recursos. El primer experimento muestra el rendimiento en un entorno estable donde un número de agentes asignan tareas a servidores que proporcionan una cantidad constante de recursos. El segundo experimento se llevó a cabo en un entorno de servidor dinámico con un número constante de agentes. El primer experimento muestra nuestro modelo en un entorno estable de 3 servidores que proporcionan un total de 7000 unidades de recursos. La capacidad de recursos de cada servidor permanece constante durante el experimento. Utilizamos 650 agentes con los parámetros del tiempo de ejecución entre 1 y 15 unidades de tiempo y un tiempo de creación de tarea en el intervalo [0 − 30] unidades de tiempo. El consumo de recursos de las tareas se asigna aleatoriamente en el intervalo de [1 - 45] unidades de recurso. La Figura 4 muestra los resultados de 100 repeticiones de este experimento. La Figura 4(a) muestra que la cantidad total de recursos proporcionados es mayor que la demanda de recursos en promedio. Al comienzo del experimento, todos los agentes asignan sus tareas aleatoriamente en uno de los servidores disponibles y exploran las capacidades y utilizaciones de recursos disponibles durante aproximadamente 150 unidades de tiempo. Esta fase inicial de exploración muestra que la carga promedio de recursos de cada servidor tiene un nivel similar. Esto provoca una situación de sobrecarga en el servidor 1 debido a su baja capacidad de recursos compartidos, y una gran cantidad de recursos libres en el servidor 2. Los agentes que asignaron tareas al servidor 1 detectan la situación de sobrecarga y exploran de forma aleatoria otros servidores disponibles. Encuentran recursos gratuitos en el servidor 2. Después del período de aprendizaje, los agentes se han autoorganizado en este entorno estable y han encontrado una solución estable para la asignación de The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 79 0 250 500 750 1,000 1,250 1,500 Tiempo 0 1,000 2,000 3,000 4,000 5,000 6,000 7,000 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (b) Carga de recursos servidor 0 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 Carga de Recursos (c) Carga de recursos servidor 1 0 250 500 750 1,000 1,250 1,500 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 2 Figura 4: Resultados del experimento 1 en un entorno estático de 3 servidores promediados sobre 100 repeticiones. todas las tareas. La desviación estándar de las cargas de recursos es pequeña para cada servidor, lo que indica que nuestro enfoque distribuido encuentra soluciones estables en casi cada ejecución. Este experimento utilizó el algoritmo 2 para la selección del servidor activo. También realizamos el mismo experimento con el mecanismo de selección de recursos más libre para seleccionar el servidor activo. La asignación de recursos para cada servidor es similar. La cantidad absoluta de recursos gratuitos por servidor es casi la misma. El Experimento 2 se llevó a cabo en un entorno dinámico de 3 servidores con un total de 750 agentes. La cantidad de recursos del servidor 0 y del servidor 1 cambia periódicamente, mientras que la cantidad total de recursos disponibles permanece constante. El servidor 0 tiene una capacidad inicial de 1000 unidades, mientras que el servidor 1 comienza con una capacidad de 4000 unidades. El cambio en la capacidad comienza después de 150 unidades de tiempo, que es aproximadamente al final de la fase de aprendizaje. La figura 5 (b, c, d) muestra el comportamiento de nuestra asignación de recursos autoorganizada en este entorno. Todos los agentes utilizan el mecanismo de selección de recursos más libres determinístico para seleccionar el servidor activo. Se puede observar en la Fig. 5(b) y 5(c) que el número de recursos asignados al servidor 0 y al servidor 1 cambia periódicamente con la cantidad de recursos proporcionados. Esto demuestra que los agentes pueden percibir los recursos disponibles en este entorno dinámico y son capaces de adaptarse a esos cambios. El desarrollo de la carga de recursos del servidor 2 (ver Fig. 5(d)) muestra un cambio periódico porque algunos agentes intentan asignar tareas a este servidor en caso de que su servidor previamente preferido reduzca la cantidad de recursos compartidos. La carga total de recursos de todos los recursos compartidos es constante a lo largo de los experimentos, lo que indica que todos los agentes asignan sus tareas a uno de los recursos compartidos. Fig. 4(a)). 6.\nFig. 4(a)). 6. CONCLUSIONES Y TRABAJO FUTURO En este artículo se presentó una técnica de asignación de recursos distribuida autoorganizativa para sistemas multiagente. Permitimos a los agentes seleccionar la plataforma de ejecución para sus tareas ellos mismos antes de cada ejecución en tiempo de ejecución. En nuestro enfoque, los agentes compiten por una asignación en uno de los 0 500 1,000 1,500 2,000 Tiempo 0 2,500 5,000 7,500 Carga de Recursos (a) Carga total de recursos versus capacidad total de recursos compartidos 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (b) Carga de recursos servidor 1 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (c) Carga de recursos servidor 2 0 500 1,000 1,500 2,000 Tiempo 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 Carga de Recursos (d) Carga de recursos servidor 3 Figura 5: Resultados del experimento 2 en un entorno de servidor dinámico promediado en 100 repeticiones. recurso compartido disponible. Los agentes perciben su entorno de servidor y adaptan sus acciones para competir de manera más eficiente en el nuevo entorno creado. Este proceso es adaptativo y tiene un fuerte retroalimentación, ya que las decisiones de asignación influencian indirectamente las decisiones de otros agentes. La asignación de recursos es un efecto puramente emergente. Nuestro mecanismo demuestra que la asignación de recursos puede ser realizada mediante la competencia efectiva de agentes individuales y autónomos. Ni necesitan coordinación o información de una autoridad superior ni se requiere una comunicación directa adicional entre agentes. Este mecanismo fue inspirado por el razonamiento inductivo y los principios de racionalidad limitada, lo que permite a los agentes adaptar sus estrategias para competir de manera efectiva en un entorno dinámico. En caso de que un servidor no esté disponible, los agentes pueden adaptarse rápidamente a esta nueva situación explorando nuevos recursos o permaneciendo en el servidor local si no es posible una asignación. Especialmente en entornos dinámicos y escalables como los sistemas de rejilla, se requiere un mecanismo robusto y distribuido para la asignación de recursos. Nuestro enfoque de asignación de recursos autoorganizados fue evaluado con una serie de experimentos de simulación en un entorno dinámico de agentes y recursos del servidor. Los resultados presentados para este nuevo enfoque de optimización de migración estratégica son muy prometedores y justifican una mayor investigación en un entorno real de sistema multiagente. Es una política distribuida, escalable y fácil de entender para la regulación de la oferta y la demanda de recursos. Todo el control se implementa en los agentes. Un mecanismo de decisión simple basado en diferentes creencias del agente crea un comportamiento emergente que conduce a una asignación efectiva de recursos. Este enfoque puede ser fácilmente ampliado o respaldado por mecanismos de equilibrio/cola de recursos proporcionados por los recursos. Nuestro enfoque se adapta a los cambios en el entorno pero no es evolutivo. No hay descubrimiento de nuevas estrategias por parte de los agentes. El conjunto de predictores permanece igual a lo largo de toda la vida. De hecho, creemos que esto podría mejorar aún más el comportamiento de los sistemas a lo largo de un período prolongado y podría ser el 80 The Sixth Intl. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) investigará en el futuro. La evolución sería muy lenta y selectiva y no influiría en el comportamiento del sistema en un período a corto plazo que está cubierto por nuestros resultados experimentales. En un futuro cercano investigaremos si es posible una adaptación automática de la tasa de decaimiento de la información histórica en nuestro algoritmo y si puede mejorar el rendimiento de la asignación de recursos. La tasa de descomposición está actualmente predefinida y debe ser alterada manualmente dependiendo del entorno. Un gran número de recursos compartidos requiere información histórica más antigua para evitar una exploración de recursos demasiado frecuente. Por el contrario, un entorno dinámico con capacidades variables requiere información más actualizada para realizar predicciones más fiables. Somos conscientes de la larga fase de aprendizaje en entornos con un gran número de recursos compartidos conocidos por cada agente. En caso de que los agentes soliciten más recursos de los que los servidores compartidos proporcionan, todos los agentes explorarán aleatoriamente todos los servidores conocidos. Este proceso de adquirir información de carga de recursos sobre todos los servidores puede llevar mucho tiempo en el caso de que no se proporcionen recursos compartidos suficientes para todas las tareas. En el peor de los casos, para cuando se explore todos los servidores, la información histórica de algunos servidores podría estar desactualizada y la exploración comenzará de nuevo. En esta situación, es difícil para un agente recopilar eficientemente información histórica sobre todos los servidores remotos. Este tema necesita más investigación en el futuro. REFERENCIAS [1] G. Allen, W. Benger, T. Dramlitsch, T. Goodale, H.-C. Hege, G. Lanfermann, A. Merzky, T. Radke, E. Seidel y J. Shalf. Herramientas de Cactus para Aplicaciones de Red. En Cluster Computing, volumen 4, páginas 179-188, Hingham, MA, EE. UU., 2001. Kluwer Academic Publishers. [2] W. B. Arthur.\nEditorial Kluwer Academic. [2] W. B. Arthur. Razonamiento inductivo y racionalidad limitada. American Economic Review (Papers and Proceedings), 84(2):406-411, mayo de 1994. [3] T. Bourke. Balanceo de carga del servidor. OReilly Media, 1ª edición, agosto de 2001. [4] R. Buyya. Gestión y programación de recursos distribuidos basada en economía para la computación en malla. Tesis doctoral, Universidad de Monash, Melbourne, Australia, mayo de 2002. [5] R. Buyya, D. Abramson, J. Giddy y H. Stockinger. Modelos económicos para la gestión de recursos y programación en la computación en malla. Número especial sobre Entornos de Computación en Red de la Revista Concurrency and Computation, 13-15(14):1507-1542, 2002. [6] R. Buyya, S. Chapin y D. DiNucci. Modelos arquitectónicos para la gestión de recursos en la red. En Actas del Primer Taller Internacional sobre Computación en Red, páginas 18-35. Springer LNCS, 2000. [7] T. L. Casavant y J. G. Kuhl. Una taxonomía de programación en sistemas informáticos distribuidos de propósito general. IEEE Transactions on Software Engineering, 14(2):141-154, febrero de 1988. [8] D. Challet y Y. Zhang. Aparición de la cooperación y la organización en un juego evolutivo. Physica A, 407(246), 1997. [9] K.-P. Chow y Y.-K. Kwok. En equilibrio de carga para computación multiagente distribuida. En IEEE Transactions on Parallel and Distributed Systems, volumen 13, páginas 787-801. IEEE, agosto de 2002. [10] S. H. Clearwater. Control basado en el mercado. Un paradigma para la asignación distribuida de recursos. World Scientific, Singapur, 1996. [11] C. Fl¨us. Planificación de capacidad de sistemas de agentes móviles para el diseño eficiente de aplicaciones de intranet. Tesis doctoral, Universidad de Duisburg-Essen (Alemania), febrero de 2005. [12] I. Foster y C. Kesselman. Globus: Un conjunto de herramientas de infraestructura de metacomputación. Revista Internacional de Aplicaciones de Supercomputación, 11(2):115-129, 1997. [13] J. Frey, T. Tannenbaum, I. Foster, M. Livny y S. Tuecke. Condor-G: Un agente de gestión de computación para redes de múltiples instituciones. Computación en clúster, 5(3):237-246, 2002. [14] A. Galstyan, S. Kolar y K. Lerman. Juegos de asignación de recursos con capacidades de recursos cambiantes. En Actas de la segunda conferencia internacional conjunta sobre agentes autónomos y sistemas multiagente, páginas 145 - 152, Melbourne, Australia, 2003. ACM Press, Nueva York, NY, EE. UU. [15] C. Georgousopoulos y O. F. Rana. Combinando enfoques basados en el estado y en el modelo para el equilibrio de carga de agentes móviles. En SAC 03: Actas del simposio de computación aplicada de ACM de 2003, páginas 878-885, Nueva York, NY, EE. UU., 2003. ACM Press. [16] G. Mainland, D. C. Parkes y M. Welsh. Asignación descentralizada y adaptativa de recursos para redes de sensores. En Actas del 2º Simposio USENIX sobre Diseño e Implementación de Sistemas de Red (NSDI 05), mayo de 2005. [17] S. Manvi, M. Birje y B. Prasad. Un modelo de asignación de recursos basado en agentes para rejillas computacionales. Sistemas Multiagente y de Red - Una Revista Internacional, 1(1):17-27, 2005. [18] A. Schaerf, Y. Shoham y M. Tennenholtz. Equilibrio de carga adaptativo: Un estudio en el aprendizaje multiagente. En Journal of Artificial Intelligence Research, volumen 2, páginas 475-500, 1995. [19] T. Schlegel, P. Braun y R. Kowalczyk. Hacia Agentes Móviles Autónomos con Comportamiento de Migración Emergente. En Actas de la Quinta Conferencia Internacional Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 2006), Hakodate (Japón), páginas 585-592. ACM Press, mayo de 2006. [20] W3C. Actividad de servicios web, 2002. http://www.w3.org/2002/ws - última visita 23.10.2006. [21] M. M. Waldrop. Complejidad: La ciencia emergente en el límite entre el orden y el caos. Simon & Schuster, 1ª edición, 1992. [22] R. Wolsk, J. S. Plank, J. Brevik y T. Bryan. Analizando estrategias de asignación de recursos basadas en el mercado para la red computacional. En la Revista Internacional de Aplicaciones de Computación de Alto Rendimiento, volumen 15, páginas 258-281. Sage Science Press, 2001. \n\nEditorial Sage Science, 2001. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 81 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        }
    }
}