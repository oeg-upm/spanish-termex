{
    "id": "I-34",
    "original_text": "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents. With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated. We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals. However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment. Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises. Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises. We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies. In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm. Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause. More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation. We illustrate our approach with an e-Science example in which agents support Grid services. Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1. INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9]. VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16]. VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated. The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6]. Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24]. However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged). We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs. We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect). This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values. For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify. We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence. In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20. This paper is organized as follows. In the next section we provide a minimalistic definition for norm-regulated VOs. In section 3 we formally define norm conflicts, and explain how they are detected and resolved. In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies. In section 5 we describe how our curtailed norms are used in norm-aware agent societies. In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms. In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid. In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2. VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving. This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9]. VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction. We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states. This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness). We show in Figure 1 a simple VO graphically represented as a finite-state machine1 . The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents. We define our virtual organizations as follows: DEF. 1. A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states. Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ). The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} . We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B). VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates. These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms. Another important concept we use is the roles of agents in VOs. Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform. Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities. We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels. We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded. Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events. In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 . In order to record the authorship of the action, we annotate the formulae with the agents unique identification. Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae. Each formula is a truthful record of an action specified in the VO. Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values. We thus define: DEF. 2. A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp. For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20. Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles. We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization. The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances. For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed. Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization. This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process. Our norms are defined as below: DEF. 3. A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula. We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms. Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ. We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels. We propose to formally represent the normative positions of all agents enacting a VO. By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them. This approach was introduced in [12] and is explained in section 5. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4. A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te. It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them. We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c). We also refer to the tuples in Ω as norms. Global normative states complement the execution states of VOs with information on the normative positions of individual agents. We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update. For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te. We might equally wish that only permitted actions be chosen for the next execution state. We do not legislate, or indeed recommend, any particular way to regulate VOs. We do, however, offer simple underpinnings to allow arbitrary policies to be put in place. In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state. For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}. The management (i.e., creation and updating) of global normative states is an interesting area of research. A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold. In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3. NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies. We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters. Initially we define substitutions: DEF. 5. A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term. We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ. Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers. We shall make use of the following definition: DEF. 6. Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ. We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ. We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13]. In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions. We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict. For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}). If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts. We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict. Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te . Initially, this annotation is empty. We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform. A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions. Each of these policies is possible: we do not legislate over any of them nor do we give preference over any. In this paper we are interested in formalising such policies within a simple mathematical framework. A prohibition can be in conflict with various permissions in Ω. We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection. This requires identifying the substitution between two pairs of norms that characterises a conflict. This is formally captured by the following definition: DEF. 7. A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3). Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition. The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts. For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds. We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8. The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification. We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition. We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right). The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z). The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) . The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission. If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections. The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms. It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved. The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided. Initially, Ω is set to be Ω. The algorithm operates in two stages. In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm. In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set. As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition. In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω. The maximal set is used to update the annotation of the prohibition. It is important to explain the need for updating the conflict set of prohibitions. Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents. Whenever new norms are added we must check for new conflicts and inconsistencies. If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved. The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again). If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation. The removal of obligations follows a similar process. Prohibitions are removed without the need to consider their relationships with other norms. Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc. The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation. The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition. It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time. The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop. The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω. We illustrate our algorithm with the following example. Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c . The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions. We show in Section 5.1 how annotations are used by norm-aware agents. 4. NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13]. The obligation demands that an agent performs an action that is forbidden. We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies. With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission. Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O. We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency. The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5. NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies. We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12]. This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour. We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . . I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents. The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω. Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment. Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents. We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent. The governor agent represents the external agent within the VO. As such, it has the unique identifier of the external agent. The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously. We define in Figure 5 how governor agents work - we use a logic program for this purpose. We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9. The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end. The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function. The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold. In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles. Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent). In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ. In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles. The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents. We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter. The definition, as a logic program, is shown in Figure 6. It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ. It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc. Finally, in line 7 it checks if the time of the action is within the norm temporal influence. The verification of non-unification of σ with any element of Σc deserves an explanation. The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence. The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6. ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action. However, conflicts and inconsistencies may also arise indirectly via relationships among actions. For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X). In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O. Relationships among actions are domain-dependent. Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships. We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above. Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9. The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae. Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}. By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains. A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651",
    "original_translation": "Resolviendo conflictos e inconsistencias en organizaciones virtuales reguladas por normas, Wamberto Vasconcelos Dept. Las organizaciones virtuales regidas por normas definen, regulan y facilitan el intercambio coordinado de recursos y la resolución de problemas en sociedades de agentes. Con una explicación detallada de las normas, la apertura en las organizaciones virtuales se puede lograr: los nuevos componentes, diseñados por diversas partes, pueden ser fácilmente incorporados. Nos enfocamos en organizaciones virtuales realizadas como sistemas multiagente, en las cuales agentes humanos y de software interactúan para lograr objetivos individuales y globales. Sin embargo, cualquier descripción realista de las normas debería abordar su naturaleza dinámica: las normas cambiarán a medida que los agentes interactúen entre sí y con su entorno. Debido a la naturaleza cambiante de las normas o a las normas derivadas de diferentes organizaciones virtuales, habrá situaciones en las que una acción sea simultáneamente permitida y prohibida, es decir, surge un conflicto. Asimismo, habrá situaciones en las que una acción esté tanto obligada como prohibida, es decir, surge una inconsistencia. Introducimos un enfoque, basado en unificación de primer orden, para detectar y resolver tales conflictos e inconsistencias. En nuestra solución propuesta, anotamos una norma con el conjunto de valores que sus variables no deben tener para evitar un conflicto o una inconsistencia con otra norma. Nuestro enfoque acomoda de manera ordenada las interrelaciones dependientes del dominio entre acciones y los conflictos/inconsistencias indirectos que estos pueden causar. Más generalmente, podemos capturar una noción útil de delegación de acciones y normas entre agentes (y roles) y utilizarla para abordar conflictos/inconsistencias causados por la delegación de acciones. Ilustramos nuestro enfoque con un ejemplo de e-Ciencia en el que agentes respaldan servicios de Grid. Categorías y Descriptores de Asignaturas I.2.4 [Inteligencia Artificial]: Aplicaciones y Sistemas Expertos en Derecho; I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida-Sistemas Multiagente Términos Generales Algoritmos, Teoría 1. Las organizaciones virtuales (VOs) facilitan el intercambio coordinado de recursos y la resolución de problemas que involucran a diversas partes geográficamente remotas [9]. Los VOs definen y regulan las interacciones (facilitando así la coordinación) entre agentes de software y/o humanos que se comunican para lograr objetivos individuales y globales [16]. Los VOs se realizan como sistemas multiagente y una característica muy deseable de tales sistemas es la apertura, mediante la cual los nuevos componentes diseñados por otras partes se integran sin problemas. El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de sistemas multiagente (MASs) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]. Las normas regulan el comportamiento observable de agentes de software auto-interesados y heterogéneos, diseñados por diversas partes que pueden no confiar del todo entre sí [3, 24]. Sin embargo, los VOs regulados por normas pueden experimentar problemas cuando las normas asignadas a sus agentes están en conflicto (es decir, una acción está simultáneamente prohibida y permitida) o son inconsistentes (es decir, una acción está simultáneamente prohibida y obligada). Proponemos un medio para detectar y resolver automáticamente conflictos e inconsistencias en los VO regulados por normas. Hacemos uso de la unificación de términos de primer orden [8] para averiguar si y cómo se superponen las normas en su influencia (es decir, los agentes y los valores de los parámetros en las acciones de los agentes que las normas pueden afectar). Esto permite una solución detallada en la que se reduce la influencia de normas conflictivas o inconsistentes para conjuntos particulares de valores. Por ejemplo, las normas en las que el agente x tiene permitido enviar la oferta (ag1, 20) y el agente ag2 tiene prohibido enviar la oferta (y, z) (donde x, y, z son variables y ag1, ag2, 20 son constantes) están en conflicto porque sus agentes, acciones y términos (dentro de las acciones) se unifican. Resolvemos el conflicto anotando normas con conjuntos de valores que sus variables no pueden tener, reduciendo así su influencia. En nuestro ejemplo, el conflicto se evita si requerimos que la variable y no puede ser ag1 y que z no puede ser 20. Este documento está organizado de la siguiente manera. En la siguiente sección proporcionamos una definición minimalista para los VOs regulados por normas. En la sección 3 definimos formalmente los conflictos de normas, y explicamos cómo se detectan y resuelven. En la sección 4 describimos cómo la maquinaria de la sección anterior puede adaptarse para detectar y resolver inconsistencias normativas. En la sección 5 describimos cómo se utilizan nuestras normas limitadas en sociedades de agentes conscientes de las normas. En la sección 6 explicamos cómo nuestra maquinaria puede ser utilizada para detectar y resolver conflictos/inconsistencias indirectos, es decir, aquellos causados a través de relaciones entre acciones; extendemos y adaptamos la maquinaria para dar cabida a la delegación de normas. En la sección 7 ilustramos nuestro enfoque con un ejemplo de agentes de software regulados por normas que sirven a la Red. En la sección 8 revisamos el trabajo relacionado y en la sección 9 discutimos nuestras contribuciones y damos direcciones para trabajos futuros. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2. Las organizaciones virtuales permiten que diversas partes se unan para compartir recursos y participar en la resolución de problemas. Este paradigma ha encontrado fuertes aplicaciones en la orquestación de servicios web [14], la e-Ciencia [16] y la Red [9]. Los VOs, en su formulación más genérica, pueden ser vistos como artefactos de coordinación, permitiendo que agentes de software y humanos participen en formas sofisticadas de interacción. Representamos formalmente nuestros VO como máquinas de estados finitos en las que las acciones de los agentes individuales etiquetan los bordes entre estados discretos. Esto nos proporciona un denominador común más bajo: hay formas mucho más sofisticadas, convenientes y expresivas de representar las interacciones entre agentes (por ejemplo, AUML [19] e instituciones electrónicas [20], por nombrar algunas), pero para generalizar nuestro enfoque, asumiremos que cualquier formalismo de nivel superior puede ser mapeado a una máquina de estados finitos (posiblemente con cierta pérdida de expresividad). Mostramos en la Figura 1 un simple VO representado gráficamente como una máquina de estados finitos. Las etiquetas en los bordes con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figura 1: Ejemplo de VO como una Máquina de Estados Finitos que conectan los estados son fórmulas atómicas de primer orden, denotadas genéricamente como ϕ; representan acciones realizadas por agentes individuales. Definimos nuestras organizaciones virtuales de la siguiente manera: DEF. 1. Una organización virtual I es el triple S, s0, E, T donde S = {s1, . . . , sn} es un conjunto finito y no vacío de estados, s0 ∈ S es el estado inicial, E es un conjunto finito de aristas (s, s , ϕ), s, s ∈ S conectando s con s con una fórmula atómica de primer orden ϕ como etiqueta, y T ⊆ S es el conjunto de estados terminales. Ten en cuenta que los bordes están dirigidos, por lo que (s, t, ϕ) = (t, s, ϕ). La muestra VO de la Figura 1 se representa formalmente como I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2}. Suponemos una cuantificación existencial implícita en cualquier variable en ϕ, de modo que, por ejemplo, s(A, B) representa ∃A, B s(A, B). Los VO deben permitir dos tipos de no determinismo correspondientes a las elecciones que los agentes autónomos pueden hacer, a saber, i) el que surge cuando hay más de un borde que sale de un estado; y ii) el que surge de las variables en las fórmulas ϕ que etiquetan un borde, para las cuales el agente que realiza la acción instancia. Estos tipos de no determinismo son deseables ya que ayudan a definir mecanismos de coordinación genéricos y flexibles. Otro concepto importante que utilizamos son los roles de los agentes en las Organizaciones Virtuales (OV). Los roles, tal como se explotan en, por ejemplo, [18] y [20], nos ayudan a abstraernos de los agentes individuales y definir un patrón de comportamiento al cual cualquier agente que adopte un rol debería conformarse. Además, todos los agentes con el mismo rol tienen garantizados los mismos derechos, deberes y oportunidades. Haremos uso de dos conjuntos finitos y no vacíos, Agentes = {ag1, . . . , agn} y Roles = {r1, . . . , rm}, que representan, respectivamente, los conjuntos de identificadores de agentes y etiquetas de roles. Nos referimos genéricamente a los términos de primer orden, es decir, constantes, variables y funciones (anidadas) como τ. 2.1 Semántica de los VO La especificación de un VO como una máquina de estados finitos da lugar a un conjunto posiblemente infinito de historias de comportamientos computacionales, en las que se registran las acciones que etiquetan los caminos desde el estado inicial hasta un estado final. Aunque las acciones que conforman un VO se llevan a cabo de manera distribuida, proponemos un registro global explícito de todos los eventos. En la práctica, esto se puede lograr si requerimos que los agentes individuales declaren/informen las acciones que han llevado a cabo; esto asume agentes de confianza, naturalmente. Para registrar la autoría de la acción, anotamos las fórmulas con la identificación única de los agentes. Nuestra cuenta global explícita de todos los eventos es un conjunto de fórmulas atómicas fundamentales ϕ, es decir, solo permitimos que aparezcan constantes como términos de las fórmulas. Cada fórmula es un registro veraz de una acción especificada en el VO. Sin embargo, hay que tener en cuenta que en la especificación de VO no restringimos la sintaxis de las fórmulas: las variables pueden aparecer en ellas, y cuando un agente realiza una acción real, entonces cualquier variable de la acción especificada debe asignarse valores. Por lo tanto, definimos: DEF. 2. Un estado de ejecución global de un VO, denotado como Ξ, es un conjunto finito, posiblemente vacío, de tuplas a : r, ¯ϕ, t donde a ∈ Agentes es un identificador de agente, r ∈ Roles es una etiqueta de rol, ¯ϕ es una fórmula atómica de primer orden concreta, y t ∈ IN es una marca de tiempo. Por ejemplo, ag1:comprador, p(a, 34), 20 indica que el agente ag1 adoptando el rol de comprador realizó la acción p(a, 34) en el instante 20. Dado un VO I = S, s0, E, T, un estado de ejecución Ξ y un estado s ∈ S, podemos definir una función que obtiene un posible próximo estado de ejecución, es decir, h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, para un (s, s , ϕ) ∈ E. Dicha función h debe abordar los dos tipos de no determinismo mencionados anteriormente, así como la elección de los agentes potenciales que pueden llevar a cabo la acción y sus roles adoptados. También definimos una función para calcular el conjunto de todos los posibles estados de ejecución, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 VOs Regulados por Normas Abogamos por una separación de preocupaciones en la que la organización virtual se complementa con un conjunto explícito y separado de normas que regulan aún más el comportamiento de los agentes mientras participan en la puesta en marcha de una organización. La libertad de elección dada a los agentes (capturada a través del no determinismo de los VO, explicado anteriormente) debe ser limitada en algunas circunstancias. Por ejemplo, podríamos necesitar describir que quien llevó a cabo ϕ está obligado a llevar a cabo ϕ, de modo que si hay un punto de elección en el que ϕ aparece como etiqueta de un borde, entonces ese borde debería ser seguido. En lugar de incorporar aspectos normativos en el diseño de los agentes (por ejemplo, codificando explícitamente aspectos normativos en el comportamiento de los agentes) o en el propio VO (por ejemplo, abordando excepciones y comportamientos desviados en el mecanismo en sí), adoptamos la perspectiva de que un VO debería complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes mientras participan en la puesta en marcha de la organización. Esta separación de preocupaciones debería facilitar el diseño de los Sistemas Multiagente (MAS); sin embargo, los diferentes componentes (VOs y normas) deben unirse en algún momento del proceso de diseño. Nuestras normas están definidas de la siguiente manera: DEF. 3. Una norma, genéricamente referida como ν, es cualquier construcción de la forma Oτ:τ ϕ, Pτ:τ ϕ, o Fτ:τ ϕ, donde τ, τ son variables o constantes y ϕ es una fórmula atómica de primer orden. Adoptamos la notación de [18]: Oτ:τ ϕ representa una obligación para el agente τ que asume el rol τ de llevar a cabo ϕ; recordamos que τ, τ son variables, constantes y funciones aplicadas a términos (anidados). Pτ:τ ϕ y Fτ:τ ϕ representan, respectivamente, un permiso y una prohibición para el agente τ, desempeñando el rol τ para lograr ϕ. Supondremos que los tipos se utilizan para manipular adecuadamente variables de identificadores de agentes y etiquetas de roles. Proponemos representar formalmente las posiciones normativas de todos los agentes que llevan a cabo un VO. Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 Agentes no confiables pueden ser acomodados en esta propuesta, si asociamos a cada uno de ellos un agente gobernador que supervise las acciones del agente externo e informe sobre ellas. Este enfoque fue introducido en [12] y se explica en la sección 5. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 645 DEF. 4. Un estado normativo global Ω es un conjunto finito y posiblemente vacío de tuplas ω = ν, td, ta, te donde ν es una norma como se mencionó anteriormente y td, ta, te ∈ IN son, respectivamente, el momento en que ν fue declarada (introducida), cuando ν se vuelve activa y cuando ν expira, td ≤ ta < te. Vale la pena notar que no requerimos que las fórmulas atómicas de las normas sean concretas: podrían contener variables. Suponemos una cuantificación universal implícita en las variables A, R de las normas XA:Rϕ (para las modalidades deónticas X ∈ {O, P, F}), de modo que, por ejemplo, PA:Rp(X, b, c) significa ∀A ∈ Agentes.∀R ∈ Roles.∃X.PA:Rp(X, b, c). También nos referimos a las tuplas en Ω como normas. Los estados normativos globales complementan los estados de ejecución de los VO con información sobre las posiciones normativas de los agentes individuales. Podemos relacionarlos a través de una función para obtener un estado de ejecución siguiente de VOs regulado por una norma, es decir, g(I, Ξ, s, Ω, t) = Ξ, donde t representa el tiempo de la actualización. Por ejemplo, podríamos querer que todas las acciones prohibidas se excluyan del próximo estado de ejecución, es decir, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E y Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te. Podríamos desear igualmente que solo se elijan acciones permitidas para el próximo estado de ejecución. No legislamos, ni recomendamos de hecho, ninguna forma particular de regular las ONG. Sin embargo, ofrecemos bases simples para permitir la implementación de políticas arbitrarias. Del mismo modo que un estado normativo es útil para obtener el siguiente estado de ejecución de un VO, podemos usar un estado de ejecución para actualizar un estado normativo. Por ejemplo, podríamos querer eliminar cualquier obligación específica de un agente y rol, que ha sido llevada a cabo por ese agente y rol específico, es decir, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}. La gestión (es decir, la creación y actualización) de estados normativos globales es un área de investigación interesante. Se reporta un enfoque simple pero útil en [11]: las reglas de producción representan genéricamente cómo se deben actualizar las normas para reflejar lo que los agentes han hecho y qué normas se mantienen actualmente. En este documento nuestro enfoque no es proponer cómo deberían ser gestionadas las Ωs; asumimos que existe algún mecanismo que se encarga de eso. 3. CONFLICTOS NORMATIVOS Ahora definimos medios para detectar y resolver conflictos e inconsistencias normativas. Hacemos uso del concepto de unificación [1, 8] de términos de primer orden τ, es decir, constantes, variables o funciones (anidadas) con términos como parámetros. Inicialmente definimos las sustituciones: DEF. 5. Una sustitución σ es un conjunto finito y posiblemente vacío de pares x/τ, donde x es una variable y τ es un término. Definimos la aplicación de una sustitución de la siguiente manera: 1. c · σ = c para una constante c 2. x · σ = τ · σ si x/τ ∈ σ; de lo contrario, x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Donde X se refiere genéricamente a cualquiera de las modalidades deónticas O, P, F. La unificación entre dos términos τ, τ consiste en encontrar una sustitución σ (también llamada, en este contexto, el unificador de τ y τ) tal que τ · σ = τ · σ. Se han propuesto muchos algoritmos para resolver el problema de unificación, un tema fundamental en la demostración automatizada de teoremas [8], y trabajos más recientes ofrecen formas muy eficientes de obtener unificadores. Haremos uso de la siguiente definición: DEF. 6. La relación unify(τ, τ , σ) se cumple si y solo si existe un σ posiblemente vacío tal que τ · σ = τ · σ. También definimos la unificación de fórmulas atómicas como unificar(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) lo cual se cumple si y solo si τi · σ = τi · σ, 0 ≤ i ≤ n. La relación de unificación verifica si una sustitución σ es realmente un unificador para τ, τ pero también puede usarse para encontrar dicho σ. Suponemos que unificar es una implementación adecuada de un algoritmo de unificación que i) siempre termina (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene una complejidad computacional lineal. 3.1 Detección de Conflictos Un conflicto normativo surge cuando una fórmula atómica que etiqueta un borde en el VO, es decir, una acción, está simultáneamente permitida y prohibida [13]. En este caso, ambas normas están en conflicto con respecto a sus agentes, roles y parámetros (términos) de acciones específicas. Proponemos utilizar la unificación para detectar cuándo se superponen una prohibición y un permiso y emplear el unificador para resolver el conflicto. Por ejemplo, PA:Rp(c, X) y Fa:bp(Y, Z) están en conflicto ya que se unifican bajo σ = {A/a, R/b, Y/c, X/d}. Si, sin embargo, las variables en Fa:bp(Y, Z) no obtienen los valores en σ, entonces no habrá conflictos. Por lo tanto, proponemos anotar las prohibiciones en Ω con unificadores, llamados conjuntos de conflictos, y utilizar estas anotaciones para determinar qué variables no pueden ser los variables de la prohibición en futuras unificaciones con el fin de evitar un conflicto. Cada prohibición se considera a partir de ahora como teniendo tal anotación, denotada como (Fτ1:τ2 ϕ) Σc, td, ta, te. Inicialmente, esta anotación está vacía. Proponemos reducir la influencia de las prohibiciones, dando así a los agentes más opciones en las acciones que pueden realizar. Un enfoque similar podría ser adoptado mediante la restricción de permisos, limitando así las acciones disponibles para los agentes. Cada una de estas políticas es posible: no legislamos sobre ninguna de ellas ni damos preferencia sobre ninguna. En este documento estamos interesados en formalizar dichas políticas dentro de un marco matemático simple. Una prohibición puede estar en conflicto con varias autorizaciones en Ω. Por lo tanto, debemos encontrar el conjunto máximo de pares conflictivos de permisos y prohibiciones en Ω, realizando una inspección por pares. Esto requiere identificar la sustitución entre dos pares de normas que caracteriza un conflicto. Esto se captura formalmente mediante la siguiente definición: DEF. 7. Surge un conflicto entre dos tuplas ω, ω ∈ Ω bajo una sustitución σ, denotado como cflct(ω, ω , σ), si se cumplen las siguientes condiciones: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unificar(τ1, τ1, σ), unificar(τ2, τ2, σ), y unificar(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| Es decir, un conflicto de prohibición y permiso (condición 1) si, y solo si, los agentes y roles a los que se aplican y sus acciones, respectivamente, se unifican bajo σ (condición 2) y sus períodos de activación se superponen (condición 3). La sustitución σ, el conjunto de conflictos, unifica a los agentes, roles y fórmulas atómicas de un permiso y una prohibición. La anotación Σc no juega ningún papel al detectar conflictos, pero, como mostramos a continuación, debemos actualizar la anotación para reflejar nuevas restricciones y resolver conflictos. Por ejemplo, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) se cumple. Definimos a continuación cómo obtenemos el conjunto de normas en conflicto de un estado normativo Ω: DEF. 8. El conjunto finito, posiblemente vacío, de normas en conflicto de un estado normativo Ω, denotado como CFLS(Ω), se define como CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Resolución de Conflictos Una forma detallada de resolver conflictos puede hacerse a través de la unificación. Detectamos la superposición de las influencias normativas, es decir, cómo afectan los comportamientos de los agentes en la VO, y limitamos el 646 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) influencia de la prohibición. Ilustramos con diagramas de Venn en la Figura 2 la superposición de las influencias normativas (izquierda) que caracterizan un conflicto y la reducción necesaria para resolver el conflicto (derecha). La ilustración muestra el espacio de valores posibles para p(X, Y) y p(X, Y) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y) Fa:bp(Y, Z) PA:Rp(c, X) Figura 2: Superposición de Influencia (Izquierda) y Restricción (Derecha) dos porciones de este espacio que definen el alcance de influencia de las normas PA:Rp(c, X) y Fa:bp(Y, Z). El alcance de estas normas se superponen, ilustrado por la intersección de las casillas a la izquierda, en acciones con valores, por ejemplo, a, b, p(c, 2), . . . , a, b, p(c, n). La reducción de la prohibición elimina la intersección: traslada el alcance de la influencia de la norma fuera de la influencia del permiso. Si hubiera múltiples superposiciones entre una prohibición y varias autorizaciones, lo cual es probable que ocurra, entonces la prohibición será restringida múltiples veces para desplazar el alcance de la norma y evitar todas las intersecciones. El algoritmo mostrado en la Figura 3 describe cómo obtenemos un conjunto de normas sin conflictos. Mapea un conjunto existente Ω posiblemente con el algoritmo de resolución de conflictos conflictResolution(Ω, Ω) entrada Ω salida Ω comenzar Ω := Ω para cada ω ∈ Ω tal que ω = (Fa:r ¯ϕ) Σc, td, ta, te hacer si ω, ω, σ ∈ CFLS(Ω) entonces Ω := Ω − {ω} fin si fin para para cada ω ∈ Ω tal que ω = (Fτ1:τ2 ϕ) Σc, td, ta, te hacer ΣMAX c := [ ω,ω,σc ∈CFLS(Ω) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c), td, ta, te } fin para fin Figura 3: Algoritmo para Resolver Conflictos en un Conjunto de Normas mapeando normas a un nuevo conjunto Ω en el que los conflictos (si los hay) están resueltos. El algoritmo forma Ω como un conjunto que es libre de conflictos, lo que significa que las prohibiciones están anotadas con un conjunto de conflictos que indica qué asignaciones para variables deben evitarse. Inicialmente, Ω se establece como Ω. El algoritmo opera en dos etapas. En la primera etapa (primera para cada bucle), eliminamos todas las prohibiciones conflictivas ω = (Fa:r ¯ϕ) Σc, td, ta, te con pares de agente/rol y fórmulas concretas en conflicto a : r y ¯ϕ: la única forma de resolver conflictos derivados de tales prohibiciones es eliminarlas por completo, ya que no podemos restringir una norma completamente concreta. En la segunda etapa (segunda para cada bucle), se examinan las prohibiciones restantes en Ω: el conjunto CFLS(Ω) contiene todos los conflictos entre permisos y las prohibiciones restantes en Ω representadas como tuplas ω, ω, σc, con σc representando el conjunto de conflictos. Dado que una prohibición puede tener conflictos con varias autorizaciones, el conjunto CFLS(Ω) puede contener más de una tupla para cada prohibición. Para proporcionar un Ω que refleje todos estos conflictos para una prohibición específica, debemos formar ΣMAX c que contenga todos los conjuntos de conflictos σc para una prohibición dada ω. El conjunto maximal se utiliza para actualizar la anotación de la prohibición. Es importante explicar la necesidad de actualizar el conjunto de prohibiciones del conflicto. Los estados normativos cambian como resultado de las acciones de los agentes [11]: las permisiones, prohibiciones y obligaciones existentes son revocadas y/o se establecen nuevas como resultado de las interacciones de los agentes con el entorno y otros agentes. Cada vez que se añadan nuevas normas, debemos verificar nuevos conflictos e inconsistencias. Si solo aplicamos nuestro algoritmo a un par que consiste en una norma antigua y una nueva, entonces se puede ahorrar algo de reprocesamiento de pares de normas antiguas (que ya fueron tratadas anteriormente). La eliminación de normas del conjunto Ω se aborda de manera eficiente: cada permiso que se vaya a eliminar debe ser verificado primero en busca de conflictos con cualquier prohibición existente (se puede evitar el reprocesamiento si registramos el conflicto en lugar de detectarlo nuevamente). Si hay un conflicto, entonces el conjunto de conflictos habrá sido registrado en la anotación de prohibiciones; este conjunto de conflictos es eliminado de la anotación de prohibiciones. La eliminación de obligaciones sigue un proceso similar. Las prohibiciones se eliminan sin necesidad de considerar sus relaciones con otras normas. Nuestro algoritmo es correcto en el sentido de que proporciona, para un Ω dado, un nuevo Ω en el que i) se han eliminado todas las prohibiciones fundamentales que entran en conflicto con los permisos; y ii) todas las prohibiciones anotadas restantes (Fτ:τ ¯ϕ) Σc, td, ta, te no se unificarán con ninguno de los permisos en Ω, siempre que el unificador no aparezca en Σc. El primer requisito se aborda con el primer bucle for each, que hace precisamente esto: elimina todas las prohibiciones de base que se unifican con una obligación. El segundo requisito se aborda mediante el segundo bucle for each: cada prohibición tiene su anotación Σc agregada con ΣMAX c, acomodando así los unificadores de todas las autorizaciones que se unifican con la prohibición. Es fácil ver que el algoritmo siempre termina: cada uno de sus dos bucles recorre un conjunto finito, procesando un elemento a la vez. El conjunto CFLS(Ω) se calcula en un número finito de pasos, al igual que las operaciones de conjunto realizadas dentro de cada bucle. El algoritmo tiene, sin embargo, complejidad exponencial, ya que el cálculo de CFLS(Ω) requiere una comparación de pares de todos los elementos en Ω. Ilustramos nuestro algoritmo con el siguiente ejemplo. Que exista el siguiente estado normativo global Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:rp(a, b), 3, 4, 8, (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9, ff. El primer bucle elimina la prohibición terrestre, obteniendo así el siguiente Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, Pe:fp(g, h), 3, 4, 9, ff. Luego tenemos el siguiente conjunto de normas en conflicto CFLS(Ω): 8 < : * (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, {A/a, R/b, X/c, Y/d} +, * (FA:Rp(X, Y)) {}, 2, 2, 9, Pe:fp(g, h), 3, 4, 9, {A/e, R/f, X/g, Y/h} +9 =; Para cada prohibición ω ∈ Ω recuperamos todos los elementos de w, w, σ ∈ CFLS(Ω) y recopilamos sus σ en ΣMAX c. El Ω final es así: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; El conjunto anotado de conjuntos de conflictos debe entenderse como un registro de unificaciones pasadas, que informa cómo deben utilizarse las prohibiciones en el futuro para evitar conflictos con permisos. Mostramos en la Sección 5.1 cómo los agentes conscientes de las normas utilizan las anotaciones. 4. INCONSISTENCIAS NORMATIVAS Si se puede encontrar una sustitución σ que unifique una obligación y una prohibición, entonces se produce una situación de inconsistencia normativa [13]. La obligación exige que un agente realice una acción que está prohibida. Podemos reutilizar la maquinaria, presentada anteriormente para resolver conflictos entre permisos y prohibiciones, con el fin de a) detectar y b) resolver tales inconsistencias. Con la Definición 7, nosotros 3 El esfuerzo combinatorio ya no es necesario si en su lugar mantenemos un conjunto de normas sin conflictos: cada vez que se introduce una nueva norma, la comparamos con las existentes, haciendo así que el proceso de mantenimiento sea de complejidad lineal. El Sexto Internacional. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 647 expresa la naturaleza de un conflicto entre una prohibición y un permiso. De igual manera, una situación de inconsistencia puede ser definida reutilizando esta definición y reemplazando la modalidad deontica P con O. Podemos reutilizar la maquinaria para la resolución de conflictos, desarrollada previamente, para resolver inconsistencias. El algoritmo de resolución de conflictos se puede aplicar sin cambios para acumular un conjunto de conflictos máximo ΣMAX c para cada prohibición en Ω que se unifica con las obligaciones. 5. Sociedades de agentes conscientes de normas. Ahora describimos cómo nuestros VO regulados por normas dan lugar a sociedades de agentes conscientes de normas. Abordamos Sistemas Multiagentes abiertos y heterogéneos: acomodamos agentes externos proporcionándoles a cada uno de ellos un agente gobernador correspondiente [12]. Este es un tipo de chaperón que interactúa con un agente externo, y observa e informa sobre su comportamiento. Mostramos nuestra arquitectura en la Figura 4 a continuación: un número de Agentes Gobernadores Externos Espacio de Tuplas de Agentes ag1 £ ¢ ¡ gov1 ⇐⇒ . . . . . . . . . . . . Yo, s, Ξ, Ω Yo, s, Ξ, Ω · · · agn £ ¢ ¡ govn ⇐⇒ Figura 4: Arquitectura para Sociedades de Agentes Conscientes de Normas de agentes externos interactúan (indicado por el ) con sus agentes gobernadores correspondientes. Los agentes del gobernador tienen acceso a la descripción del VO, el estado actual de la promulgación del VO, el estado de ejecución global Ξ y el estado normativo global Ω. Los agentes del gobernador pueden escribir y leer de (indicado por el ⇐⇒) un espacio de memoria compartida (por ejemplo, una solución tipo pizarra implementada como un espacio de tuplas), actualizando la configuración global (indicada por el ) para reflejar la dinámica de la ejecución del VO. Los agentes gubernamentales son necesarios porque no podemos anticipar ni legislar sobre el diseño o comportamiento de agentes externos. A continuación, representamos cómo los pares de gobernador/agentes externos trabajan juntos: cualquier elección no determinista en el VO es decidida por el agente externo; cualquier aspecto normativo es considerado por el agente gobernador. El agente gobernador representa el agente externo dentro del VO. Como tal, tiene el identificador único del agente externo. El agente gobernador lleva un registro de todos los roles que el agente externo está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un rol simultáneamente. Definimos en la Figura 5 cómo funcionan los agentes gobernadores: utilizamos un programa lógico con este propósito. Mostramos 1 main(Id, Roles) ← 2 obtener tupla( I, s, Ξ, Ω )∧ 3 terminar(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 obtener tupla( I, s, Ξ, Ω )∧ 6 filtrar normas(Id, Roles, Ω, ΩId )∧ 7 discutir normas(Id, Roles, I, s, Ξ, ΩId , Acciones)∧ 8 actualizar tupla(Roles, Acciones, NuevosRoles)∧ 9 main(Id, NuevosRoles) Figura 5: Agente Gobernador como un Programa Lógico las líneas de nuestras cláusulas numeradas 1-9. La primera cláusula (líneas 1-3) describe la condición de terminación: get tuple/1 (línea 2) recupera I, s, Ξ, Ω del espacio de tuplas compartido y terminate/4 verifica si la ejecución actual de VO (registrada en Ξ) ha llegado a su fin. El equipo de agentes del gobernador sincroniza su acceso al espacio de tuplas [12], asegurando así que cada uno tenga la oportunidad de funcionar. La segunda cláusula (líneas 4-9) representa un bucle genérico cuando la condición de terminación de la primera cláusula no se cumple. En este caso, la tupla se recupera nuevamente (línea 5) y el agente gobernador procede (línea 6) a analizar el estado normativo global actual Ω con el objetivo de obtener el subconjunto ΩId ⊆ Ω de normas que hacen referencia al agente Id bajo los roles Roles. El predicado filter norms/4 recopila las normas que se aplican al agente Id (el agente externo del agente gobernador). En la línea 7, el agente gobernador, en posesión de las normas aplicables y otra información relevante, interactúa con el agente externo para decidir sobre un conjunto de Acciones que cumplen con las normas; estas acciones se utilizarán para actualizar (línea 8) el estado de ejecución global Ξ. En el proceso de actualizar el estado de ejecución, un nuevo conjunto de roles debe ser asignado al agente externo, representado como NewRoles. El agente gobernador sigue en bucle (línea 9) utilizando el identificador del agente externo y su nuevo conjunto de roles. 5.1 Uso de normas anotadas Ahora explicamos cómo los agentes conscientes de las normas utilizan normas anotadas. Lo hacemos a través de la definición de comprobación de predicado/2, que se cumple si su primer argumento, una acción candidata (en el formato de los elementos de Ξ de la Def. 2), está dentro de la influencia de una prohibición anotada ω, su segundo parámetro. La definición, como un programa lógico, se muestra en la Figura 6. Comprueba (línea 4) si el identificador del agente 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unificar(a, τ1, σ) ∧ unificar(r, τ2, σ) ∧ unificar( ¯ϕ, ϕ, σ)∧ 5 para todo(σ , (σc ∈ Σc, unificar(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figura 6: Comprobar si la Acción está dentro de la Influencia de la Norma Recortada y el rol de la acción se unifica con los términos apropiados τ1, τ2 de ω y que las acciones ¯ϕ, ϕ mismas se unifican, todo bajo el mismo unificador σ. Luego verifica (líneas 5-6) que σ no unifica con ninguno de los conjuntos de conflictos en Σc. Finalmente, en la línea 7 se comprueba si el tiempo de la acción está dentro de la influencia temporal normativa. La verificación de la no unificación de σ con ningún elemento de Σc merece una explicación. Los elementos de Σc son unificadores que indican qué valores no pueden tener las variables de la norma, es decir, representan vacíos en el alcance original de la influencia de las normas. El test equivale a preguntar si la acción está fuera de tales brechas, es decir, si la acción se encuentra dentro del alcance limitado de influencia de la norma. 6. En nuestra discusión anterior, se detectaron conflictos y inconsistencias normativas a través de una comparación directa de las fórmulas atómicas que representan la acción. Sin embargo, los conflictos e inconsistencias también pueden surgir indirectamente a través de las relaciones entre acciones. Por ejemplo, si p(X) equivale a q(X, X), entonces las normas PA:Rp(X) y FA:Rq(X, X) están en conflicto, ya que PA:Rp(X) se puede reescribir como PA:Rq(X, X) y, por lo tanto, tenemos tanto PA:Rq(X, X) como FA:Rq(X, X). En la discusión a continuación nos concentramos en el conflicto de normas, pero la inconsistencia normativa se puede abordar de manera similar, si cambiamos las modalidades deonticas de P por O. Las relaciones entre acciones dependen del dominio. Los diferentes dominios tienen formas distintas de relacionar sus acciones; los ingenieros construyen ontologías para representar dichas relaciones. Proponemos un medio simple para tener en cuenta tales relaciones y mostrar cómo estas pueden estar conectadas a los mecanismos introducidos anteriormente. En lugar de utilizar formalismos sofisticados para la construcción de ontologías, empleamos un conjunto de axiomas de dominio, definidos a continuación: DEF. 9. Los axiomas de dominio, denotados como Δ, son un conjunto finito y posiblemente vacío de fórmulas ϕ → (ϕ1 ∧ · · · ∧ ϕn) donde ϕ, ϕi, 1 ≤ i ≤ n, son fórmulas atómicas de primer orden. Nuestro ejemplo anterior puede ser capturado por Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}. Al representar y manipular explícitamente el conocimiento del dominio logramos generalidad: la misma maquinaria puede ser utilizada en diferentes dominios. Un conjunto de normas puede tener diferentes conflictos e inconsistencias, para distintos dominios de aplicación. 648 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 649 650 La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 651",
    "original_sentences": [
        "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
        "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
        "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
        "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
        "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
        "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
        "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
        "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
        "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
        "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
        "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
        "We illustrate our approach with an e-Science example in which agents support Grid services.",
        "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
        "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
        "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
        "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
        "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
        "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
        "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
        "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
        "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
        "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
        "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
        "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
        "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
        "This paper is organized as follows.",
        "In the next section we provide a minimalistic definition for norm-regulated VOs.",
        "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
        "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
        "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
        "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
        "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
        "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
        "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
        "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
        "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
        "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
        "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
        "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
        "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
        "We define our virtual organizations as follows: DEF. 1.",
        "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
        "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
        "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
        "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
        "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
        "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
        "Another important concept we use is the roles of agents in VOs.",
        "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
        "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
        "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
        "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
        "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
        "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
        "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
        "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
        "Each formula is a truthful record of an action specified in the VO.",
        "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
        "We thus define: DEF. 2.",
        "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
        "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
        "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
        "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
        "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
        "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
        "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
        "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
        "Our norms are defined as below: DEF. 3.",
        "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
        "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
        "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
        "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
        "We propose to formally represent the normative positions of all agents enacting a VO.",
        "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
        "This approach was introduced in [12] and is explained in section 5.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
        "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
        "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
        "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
        "We also refer to the tuples in Ω as norms.",
        "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
        "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
        "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
        "We might equally wish that only permitted actions be chosen for the next execution state.",
        "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
        "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
        "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
        "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
        "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
        "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
        "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
        "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
        "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
        "Initially we define substitutions: DEF. 5.",
        "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
        "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
        "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
        "We shall make use of the following definition: DEF. 6.",
        "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
        "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
        "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
        "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
        "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
        "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
        "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
        "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
        "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
        "Initially, this annotation is empty.",
        "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
        "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
        "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
        "In this paper we are interested in formalising such policies within a simple mathematical framework.",
        "A prohibition can be in conflict with various permissions in Ω.",
        "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
        "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
        "This is formally captured by the following definition: DEF. 7.",
        "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
        "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
        "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
        "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
        "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
        "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
        "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
        "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
        "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
        "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
        "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
        "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
        "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
        "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
        "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
        "Initially, Ω is set to be Ω.",
        "The algorithm operates in two stages.",
        "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
        "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
        "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
        "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
        "The maximal set is used to update the annotation of the prohibition.",
        "It is important to explain the need for updating the conflict set of prohibitions.",
        "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
        "Whenever new norms are added we must check for new conflicts and inconsistencies.",
        "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
        "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
        "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
        "The removal of obligations follows a similar process.",
        "Prohibitions are removed without the need to consider their relationships with other norms.",
        "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
        "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
        "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
        "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
        "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
        "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
        "We illustrate our algorithm with the following example.",
        "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
        "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
        "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
        "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
        "The obligation demands that an agent performs an action that is forbidden.",
        "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
        "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
        "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
        "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
        "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
        "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
        "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
        "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
        "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
        "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
        "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
        "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
        "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
        "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
        "The governor agent represents the external agent within the VO.",
        "As such, it has the unique identifier of the external agent.",
        "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
        "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
        "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
        "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
        "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
        "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
        "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
        "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
        "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
        "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
        "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
        "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
        "The definition, as a logic program, is shown in Figure 6.",
        "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
        "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
        "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
        "The verification of non-unification of σ with any element of Σc deserves an explanation.",
        "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
        "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
        "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
        "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
        "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
        "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
        "Relationships among actions are domain-dependent.",
        "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
        "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
        "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
        "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
        "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
        "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
        "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
    ],
    "translated_text_sentences": [
        "Resolviendo conflictos e inconsistencias en organizaciones virtuales reguladas por normas, Wamberto Vasconcelos Dept.",
        "Las organizaciones virtuales regidas por normas definen, regulan y facilitan el intercambio coordinado de recursos y la resolución de problemas en sociedades de agentes.",
        "Con una explicación detallada de las normas, la apertura en las organizaciones virtuales se puede lograr: los nuevos componentes, diseñados por diversas partes, pueden ser fácilmente incorporados.",
        "Nos enfocamos en organizaciones virtuales realizadas como sistemas multiagente, en las cuales agentes humanos y de software interactúan para lograr objetivos individuales y globales.",
        "Sin embargo, cualquier descripción realista de las normas debería abordar su naturaleza dinámica: las normas cambiarán a medida que los agentes interactúen entre sí y con su entorno.",
        "Debido a la naturaleza cambiante de las normas o a las normas derivadas de diferentes organizaciones virtuales, habrá situaciones en las que una acción sea simultáneamente permitida y prohibida, es decir, surge un conflicto.",
        "Asimismo, habrá situaciones en las que una acción esté tanto obligada como prohibida, es decir, surge una inconsistencia.",
        "Introducimos un enfoque, basado en unificación de primer orden, para detectar y resolver tales conflictos e inconsistencias.",
        "En nuestra solución propuesta, anotamos una norma con el conjunto de valores que sus variables no deben tener para evitar un conflicto o una inconsistencia con otra norma.",
        "Nuestro enfoque acomoda de manera ordenada las interrelaciones dependientes del dominio entre acciones y los conflictos/inconsistencias indirectos que estos pueden causar.",
        "Más generalmente, podemos capturar una noción útil de delegación de acciones y normas entre agentes (y roles) y utilizarla para abordar conflictos/inconsistencias causados por la delegación de acciones.",
        "Ilustramos nuestro enfoque con un ejemplo de e-Ciencia en el que agentes respaldan servicios de Grid.",
        "Categorías y Descriptores de Asignaturas I.2.4 [Inteligencia Artificial]: Aplicaciones y Sistemas Expertos en Derecho; I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida-Sistemas Multiagente Términos Generales Algoritmos, Teoría 1.",
        "Las organizaciones virtuales (VOs) facilitan el intercambio coordinado de recursos y la resolución de problemas que involucran a diversas partes geográficamente remotas [9].",
        "Los VOs definen y regulan las interacciones (facilitando así la coordinación) entre agentes de software y/o humanos que se comunican para lograr objetivos individuales y globales [16].",
        "Los VOs se realizan como sistemas multiagente y una característica muy deseable de tales sistemas es la apertura, mediante la cual los nuevos componentes diseñados por otras partes se integran sin problemas.",
        "El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de sistemas multiagente (MASs) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6].",
        "Las normas regulan el comportamiento observable de agentes de software auto-interesados y heterogéneos, diseñados por diversas partes que pueden no confiar del todo entre sí [3, 24].",
        "Sin embargo, los VOs regulados por normas pueden experimentar problemas cuando las normas asignadas a sus agentes están en conflicto (es decir, una acción está simultáneamente prohibida y permitida) o son inconsistentes (es decir, una acción está simultáneamente prohibida y obligada).",
        "Proponemos un medio para detectar y resolver automáticamente conflictos e inconsistencias en los VO regulados por normas.",
        "Hacemos uso de la unificación de términos de primer orden [8] para averiguar si y cómo se superponen las normas en su influencia (es decir, los agentes y los valores de los parámetros en las acciones de los agentes que las normas pueden afectar).",
        "Esto permite una solución detallada en la que se reduce la influencia de normas conflictivas o inconsistentes para conjuntos particulares de valores.",
        "Por ejemplo, las normas en las que el agente x tiene permitido enviar la oferta (ag1, 20) y el agente ag2 tiene prohibido enviar la oferta (y, z) (donde x, y, z son variables y ag1, ag2, 20 son constantes) están en conflicto porque sus agentes, acciones y términos (dentro de las acciones) se unifican.",
        "Resolvemos el conflicto anotando normas con conjuntos de valores que sus variables no pueden tener, reduciendo así su influencia.",
        "En nuestro ejemplo, el conflicto se evita si requerimos que la variable y no puede ser ag1 y que z no puede ser 20.",
        "Este documento está organizado de la siguiente manera.",
        "En la siguiente sección proporcionamos una definición minimalista para los VOs regulados por normas.",
        "En la sección 3 definimos formalmente los conflictos de normas, y explicamos cómo se detectan y resuelven.",
        "En la sección 4 describimos cómo la maquinaria de la sección anterior puede adaptarse para detectar y resolver inconsistencias normativas.",
        "En la sección 5 describimos cómo se utilizan nuestras normas limitadas en sociedades de agentes conscientes de las normas.",
        "En la sección 6 explicamos cómo nuestra maquinaria puede ser utilizada para detectar y resolver conflictos/inconsistencias indirectos, es decir, aquellos causados a través de relaciones entre acciones; extendemos y adaptamos la maquinaria para dar cabida a la delegación de normas.",
        "En la sección 7 ilustramos nuestro enfoque con un ejemplo de agentes de software regulados por normas que sirven a la Red.",
        "En la sección 8 revisamos el trabajo relacionado y en la sección 9 discutimos nuestras contribuciones y damos direcciones para trabajos futuros. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
        "Las organizaciones virtuales permiten que diversas partes se unan para compartir recursos y participar en la resolución de problemas.",
        "Este paradigma ha encontrado fuertes aplicaciones en la orquestación de servicios web [14], la e-Ciencia [16] y la Red [9].",
        "Los VOs, en su formulación más genérica, pueden ser vistos como artefactos de coordinación, permitiendo que agentes de software y humanos participen en formas sofisticadas de interacción.",
        "Representamos formalmente nuestros VO como máquinas de estados finitos en las que las acciones de los agentes individuales etiquetan los bordes entre estados discretos.",
        "Esto nos proporciona un denominador común más bajo: hay formas mucho más sofisticadas, convenientes y expresivas de representar las interacciones entre agentes (por ejemplo, AUML [19] e instituciones electrónicas [20], por nombrar algunas), pero para generalizar nuestro enfoque, asumiremos que cualquier formalismo de nivel superior puede ser mapeado a una máquina de estados finitos (posiblemente con cierta pérdida de expresividad).",
        "Mostramos en la Figura 1 un simple VO representado gráficamente como una máquina de estados finitos.",
        "Las etiquetas en los bordes con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figura 1: Ejemplo de VO como una Máquina de Estados Finitos que conectan los estados son fórmulas atómicas de primer orden, denotadas genéricamente como ϕ; representan acciones realizadas por agentes individuales.",
        "Definimos nuestras organizaciones virtuales de la siguiente manera: DEF. 1.",
        "Una organización virtual I es el triple S, s0, E, T donde S = {s1, . . . , sn} es un conjunto finito y no vacío de estados, s0 ∈ S es el estado inicial, E es un conjunto finito de aristas (s, s , ϕ), s, s ∈ S conectando s con s con una fórmula atómica de primer orden ϕ como etiqueta, y T ⊆ S es el conjunto de estados terminales.",
        "Ten en cuenta que los bordes están dirigidos, por lo que (s, t, ϕ) = (t, s, ϕ).",
        "La muestra VO de la Figura 1 se representa formalmente como I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2}.",
        "Suponemos una cuantificación existencial implícita en cualquier variable en ϕ, de modo que, por ejemplo, s(A, B) representa ∃A, B s(A, B).",
        "Los VO deben permitir dos tipos de no determinismo correspondientes a las elecciones que los agentes autónomos pueden hacer, a saber, i) el que surge cuando hay más de un borde que sale de un estado; y ii) el que surge de las variables en las fórmulas ϕ que etiquetan un borde, para las cuales el agente que realiza la acción instancia.",
        "Estos tipos de no determinismo son deseables ya que ayudan a definir mecanismos de coordinación genéricos y flexibles.",
        "Otro concepto importante que utilizamos son los roles de los agentes en las Organizaciones Virtuales (OV).",
        "Los roles, tal como se explotan en, por ejemplo, [18] y [20], nos ayudan a abstraernos de los agentes individuales y definir un patrón de comportamiento al cual cualquier agente que adopte un rol debería conformarse.",
        "Además, todos los agentes con el mismo rol tienen garantizados los mismos derechos, deberes y oportunidades.",
        "Haremos uso de dos conjuntos finitos y no vacíos, Agentes = {ag1, . . . , agn} y Roles = {r1, . . . , rm}, que representan, respectivamente, los conjuntos de identificadores de agentes y etiquetas de roles.",
        "Nos referimos genéricamente a los términos de primer orden, es decir, constantes, variables y funciones (anidadas) como τ. 2.1 Semántica de los VO La especificación de un VO como una máquina de estados finitos da lugar a un conjunto posiblemente infinito de historias de comportamientos computacionales, en las que se registran las acciones que etiquetan los caminos desde el estado inicial hasta un estado final.",
        "Aunque las acciones que conforman un VO se llevan a cabo de manera distribuida, proponemos un registro global explícito de todos los eventos.",
        "En la práctica, esto se puede lograr si requerimos que los agentes individuales declaren/informen las acciones que han llevado a cabo; esto asume agentes de confianza, naturalmente.",
        "Para registrar la autoría de la acción, anotamos las fórmulas con la identificación única de los agentes.",
        "Nuestra cuenta global explícita de todos los eventos es un conjunto de fórmulas atómicas fundamentales ϕ, es decir, solo permitimos que aparezcan constantes como términos de las fórmulas.",
        "Cada fórmula es un registro veraz de una acción especificada en el VO.",
        "Sin embargo, hay que tener en cuenta que en la especificación de VO no restringimos la sintaxis de las fórmulas: las variables pueden aparecer en ellas, y cuando un agente realiza una acción real, entonces cualquier variable de la acción especificada debe asignarse valores.",
        "Por lo tanto, definimos: DEF. 2.",
        "Un estado de ejecución global de un VO, denotado como Ξ, es un conjunto finito, posiblemente vacío, de tuplas a : r, ¯ϕ, t donde a ∈ Agentes es un identificador de agente, r ∈ Roles es una etiqueta de rol, ¯ϕ es una fórmula atómica de primer orden concreta, y t ∈ IN es una marca de tiempo.",
        "Por ejemplo, ag1:comprador, p(a, 34), 20 indica que el agente ag1 adoptando el rol de comprador realizó la acción p(a, 34) en el instante 20.",
        "Dado un VO I = S, s0, E, T, un estado de ejecución Ξ y un estado s ∈ S, podemos definir una función que obtiene un posible próximo estado de ejecución, es decir, h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, para un (s, s , ϕ) ∈ E. Dicha función h debe abordar los dos tipos de no determinismo mencionados anteriormente, así como la elección de los agentes potenciales que pueden llevar a cabo la acción y sus roles adoptados.",
        "También definimos una función para calcular el conjunto de todos los posibles estados de ejecución, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 VOs Regulados por Normas Abogamos por una separación de preocupaciones en la que la organización virtual se complementa con un conjunto explícito y separado de normas que regulan aún más el comportamiento de los agentes mientras participan en la puesta en marcha de una organización.",
        "La libertad de elección dada a los agentes (capturada a través del no determinismo de los VO, explicado anteriormente) debe ser limitada en algunas circunstancias.",
        "Por ejemplo, podríamos necesitar describir que quien llevó a cabo ϕ está obligado a llevar a cabo ϕ, de modo que si hay un punto de elección en el que ϕ aparece como etiqueta de un borde, entonces ese borde debería ser seguido.",
        "En lugar de incorporar aspectos normativos en el diseño de los agentes (por ejemplo, codificando explícitamente aspectos normativos en el comportamiento de los agentes) o en el propio VO (por ejemplo, abordando excepciones y comportamientos desviados en el mecanismo en sí), adoptamos la perspectiva de que un VO debería complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes mientras participan en la puesta en marcha de la organización.",
        "Esta separación de preocupaciones debería facilitar el diseño de los Sistemas Multiagente (MAS); sin embargo, los diferentes componentes (VOs y normas) deben unirse en algún momento del proceso de diseño.",
        "Nuestras normas están definidas de la siguiente manera: DEF. 3.",
        "Una norma, genéricamente referida como ν, es cualquier construcción de la forma Oτ:τ ϕ, Pτ:τ ϕ, o Fτ:τ ϕ, donde τ, τ son variables o constantes y ϕ es una fórmula atómica de primer orden.",
        "Adoptamos la notación de [18]: Oτ:τ ϕ representa una obligación para el agente τ que asume el rol τ de llevar a cabo ϕ; recordamos que τ, τ son variables, constantes y funciones aplicadas a términos (anidados).",
        "Pτ:τ ϕ y Fτ:τ ϕ representan, respectivamente, un permiso y una prohibición para el agente τ, desempeñando el rol τ para lograr ϕ.",
        "Supondremos que los tipos se utilizan para manipular adecuadamente variables de identificadores de agentes y etiquetas de roles.",
        "Proponemos representar formalmente las posiciones normativas de todos los agentes que llevan a cabo un VO.",
        "Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 Agentes no confiables pueden ser acomodados en esta propuesta, si asociamos a cada uno de ellos un agente gobernador que supervise las acciones del agente externo e informe sobre ellas.",
        "Este enfoque fue introducido en [12] y se explica en la sección 5.",
        "El Sexto Internacional.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 645 DEF. 4.",
        "Un estado normativo global Ω es un conjunto finito y posiblemente vacío de tuplas ω = ν, td, ta, te donde ν es una norma como se mencionó anteriormente y td, ta, te ∈ IN son, respectivamente, el momento en que ν fue declarada (introducida), cuando ν se vuelve activa y cuando ν expira, td ≤ ta < te.",
        "Vale la pena notar que no requerimos que las fórmulas atómicas de las normas sean concretas: podrían contener variables.",
        "Suponemos una cuantificación universal implícita en las variables A, R de las normas XA:Rϕ (para las modalidades deónticas X ∈ {O, P, F}), de modo que, por ejemplo, PA:Rp(X, b, c) significa ∀A ∈ Agentes.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
        "También nos referimos a las tuplas en Ω como normas.",
        "Los estados normativos globales complementan los estados de ejecución de los VO con información sobre las posiciones normativas de los agentes individuales.",
        "Podemos relacionarlos a través de una función para obtener un estado de ejecución siguiente de VOs regulado por una norma, es decir, g(I, Ξ, s, Ω, t) = Ξ, donde t representa el tiempo de la actualización.",
        "Por ejemplo, podríamos querer que todas las acciones prohibidas se excluyan del próximo estado de ejecución, es decir, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E y Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
        "Podríamos desear igualmente que solo se elijan acciones permitidas para el próximo estado de ejecución.",
        "No legislamos, ni recomendamos de hecho, ninguna forma particular de regular las ONG.",
        "Sin embargo, ofrecemos bases simples para permitir la implementación de políticas arbitrarias.",
        "Del mismo modo que un estado normativo es útil para obtener el siguiente estado de ejecución de un VO, podemos usar un estado de ejecución para actualizar un estado normativo.",
        "Por ejemplo, podríamos querer eliminar cualquier obligación específica de un agente y rol, que ha sido llevada a cabo por ese agente y rol específico, es decir, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
        "La gestión (es decir, la creación y actualización) de estados normativos globales es un área de investigación interesante.",
        "Se reporta un enfoque simple pero útil en [11]: las reglas de producción representan genéricamente cómo se deben actualizar las normas para reflejar lo que los agentes han hecho y qué normas se mantienen actualmente.",
        "En este documento nuestro enfoque no es proponer cómo deberían ser gestionadas las Ωs; asumimos que existe algún mecanismo que se encarga de eso. 3.",
        "CONFLICTOS NORMATIVOS Ahora definimos medios para detectar y resolver conflictos e inconsistencias normativas.",
        "Hacemos uso del concepto de unificación [1, 8] de términos de primer orden τ, es decir, constantes, variables o funciones (anidadas) con términos como parámetros.",
        "Inicialmente definimos las sustituciones: DEF. 5.",
        "Una sustitución σ es un conjunto finito y posiblemente vacío de pares x/τ, donde x es una variable y τ es un término.",
        "Definimos la aplicación de una sustitución de la siguiente manera: 1. c · σ = c para una constante c 2. x · σ = τ · σ si x/τ ∈ σ; de lo contrario, x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Donde X se refiere genéricamente a cualquiera de las modalidades deónticas O, P, F. La unificación entre dos términos τ, τ consiste en encontrar una sustitución σ (también llamada, en este contexto, el unificador de τ y τ) tal que τ · σ = τ · σ.",
        "Se han propuesto muchos algoritmos para resolver el problema de unificación, un tema fundamental en la demostración automatizada de teoremas [8], y trabajos más recientes ofrecen formas muy eficientes de obtener unificadores.",
        "Haremos uso de la siguiente definición: DEF. 6.",
        "La relación unify(τ, τ , σ) se cumple si y solo si existe un σ posiblemente vacío tal que τ · σ = τ · σ.",
        "También definimos la unificación de fórmulas atómicas como unificar(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) lo cual se cumple si y solo si τi · σ = τi · σ, 0 ≤ i ≤ n. La relación de unificación verifica si una sustitución σ es realmente un unificador para τ, τ pero también puede usarse para encontrar dicho σ.",
        "Suponemos que unificar es una implementación adecuada de un algoritmo de unificación que i) siempre termina (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene una complejidad computacional lineal. 3.1 Detección de Conflictos Un conflicto normativo surge cuando una fórmula atómica que etiqueta un borde en el VO, es decir, una acción, está simultáneamente permitida y prohibida [13].",
        "En este caso, ambas normas están en conflicto con respecto a sus agentes, roles y parámetros (términos) de acciones específicas.",
        "Proponemos utilizar la unificación para detectar cuándo se superponen una prohibición y un permiso y emplear el unificador para resolver el conflicto.",
        "Por ejemplo, PA:Rp(c, X) y Fa:bp(Y, Z) están en conflicto ya que se unifican bajo σ = {A/a, R/b, Y/c, X/d}.",
        "Si, sin embargo, las variables en Fa:bp(Y, Z) no obtienen los valores en σ, entonces no habrá conflictos.",
        "Por lo tanto, proponemos anotar las prohibiciones en Ω con unificadores, llamados conjuntos de conflictos, y utilizar estas anotaciones para determinar qué variables no pueden ser los variables de la prohibición en futuras unificaciones con el fin de evitar un conflicto.",
        "Cada prohibición se considera a partir de ahora como teniendo tal anotación, denotada como (Fτ1:τ2 ϕ) Σc, td, ta, te.",
        "Inicialmente, esta anotación está vacía.",
        "Proponemos reducir la influencia de las prohibiciones, dando así a los agentes más opciones en las acciones que pueden realizar.",
        "Un enfoque similar podría ser adoptado mediante la restricción de permisos, limitando así las acciones disponibles para los agentes.",
        "Cada una de estas políticas es posible: no legislamos sobre ninguna de ellas ni damos preferencia sobre ninguna.",
        "En este documento estamos interesados en formalizar dichas políticas dentro de un marco matemático simple.",
        "Una prohibición puede estar en conflicto con varias autorizaciones en Ω.",
        "Por lo tanto, debemos encontrar el conjunto máximo de pares conflictivos de permisos y prohibiciones en Ω, realizando una inspección por pares.",
        "Esto requiere identificar la sustitución entre dos pares de normas que caracteriza un conflicto.",
        "Esto se captura formalmente mediante la siguiente definición: DEF. 7.",
        "Surge un conflicto entre dos tuplas ω, ω ∈ Ω bajo una sustitución σ, denotado como cflct(ω, ω , σ), si se cumplen las siguientes condiciones: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unificar(τ1, τ1, σ), unificar(τ2, τ2, σ), y unificar(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| Es decir, un conflicto de prohibición y permiso (condición 1) si, y solo si, los agentes y roles a los que se aplican y sus acciones, respectivamente, se unifican bajo σ (condición 2) y sus períodos de activación se superponen (condición 3).",
        "La sustitución σ, el conjunto de conflictos, unifica a los agentes, roles y fórmulas atómicas de un permiso y una prohibición.",
        "La anotación Σc no juega ningún papel al detectar conflictos, pero, como mostramos a continuación, debemos actualizar la anotación para reflejar nuevas restricciones y resolver conflictos.",
        "Por ejemplo, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) se cumple.",
        "Definimos a continuación cómo obtenemos el conjunto de normas en conflicto de un estado normativo Ω: DEF. 8.",
        "El conjunto finito, posiblemente vacío, de normas en conflicto de un estado normativo Ω, denotado como CFLS(Ω), se define como CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Resolución de Conflictos Una forma detallada de resolver conflictos puede hacerse a través de la unificación.",
        "Detectamos la superposición de las influencias normativas, es decir, cómo afectan los comportamientos de los agentes en la VO, y limitamos el 646 The Sixth Intl.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) influencia de la prohibición.",
        "Ilustramos con diagramas de Venn en la Figura 2 la superposición de las influencias normativas (izquierda) que caracterizan un conflicto y la reducción necesaria para resolver el conflicto (derecha).",
        "La ilustración muestra el espacio de valores posibles para p(X, Y) y p(X, Y) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y) Fa:bp(Y, Z) PA:Rp(c, X) Figura 2: Superposición de Influencia (Izquierda) y Restricción (Derecha) dos porciones de este espacio que definen el alcance de influencia de las normas PA:Rp(c, X) y Fa:bp(Y, Z).",
        "El alcance de estas normas se superponen, ilustrado por la intersección de las casillas a la izquierda, en acciones con valores, por ejemplo, a, b, p(c, 2), . . . , a, b, p(c, n).",
        "La reducción de la prohibición elimina la intersección: traslada el alcance de la influencia de la norma fuera de la influencia del permiso.",
        "Si hubiera múltiples superposiciones entre una prohibición y varias autorizaciones, lo cual es probable que ocurra, entonces la prohibición será restringida múltiples veces para desplazar el alcance de la norma y evitar todas las intersecciones.",
        "El algoritmo mostrado en la Figura 3 describe cómo obtenemos un conjunto de normas sin conflictos.",
        "Mapea un conjunto existente Ω posiblemente con el algoritmo de resolución de conflictos conflictResolution(Ω, Ω) entrada Ω salida Ω comenzar Ω := Ω para cada ω ∈ Ω tal que ω = (Fa:r ¯ϕ) Σc, td, ta, te hacer si ω, ω, σ ∈ CFLS(Ω) entonces Ω := Ω − {ω} fin si fin para para cada ω ∈ Ω tal que ω = (Fτ1:τ2 ϕ) Σc, td, ta, te hacer ΣMAX c := [ ω,ω,σc ∈CFLS(Ω) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c), td, ta, te } fin para fin Figura 3: Algoritmo para Resolver Conflictos en un Conjunto de Normas mapeando normas a un nuevo conjunto Ω en el que los conflictos (si los hay) están resueltos.",
        "El algoritmo forma Ω como un conjunto que es libre de conflictos, lo que significa que las prohibiciones están anotadas con un conjunto de conflictos que indica qué asignaciones para variables deben evitarse.",
        "Inicialmente, Ω se establece como Ω.",
        "El algoritmo opera en dos etapas.",
        "En la primera etapa (primera para cada bucle), eliminamos todas las prohibiciones conflictivas ω = (Fa:r ¯ϕ) Σc, td, ta, te con pares de agente/rol y fórmulas concretas en conflicto a : r y ¯ϕ: la única forma de resolver conflictos derivados de tales prohibiciones es eliminarlas por completo, ya que no podemos restringir una norma completamente concreta.",
        "En la segunda etapa (segunda para cada bucle), se examinan las prohibiciones restantes en Ω: el conjunto CFLS(Ω) contiene todos los conflictos entre permisos y las prohibiciones restantes en Ω representadas como tuplas ω, ω, σc, con σc representando el conjunto de conflictos.",
        "Dado que una prohibición puede tener conflictos con varias autorizaciones, el conjunto CFLS(Ω) puede contener más de una tupla para cada prohibición.",
        "Para proporcionar un Ω que refleje todos estos conflictos para una prohibición específica, debemos formar ΣMAX c que contenga todos los conjuntos de conflictos σc para una prohibición dada ω.",
        "El conjunto maximal se utiliza para actualizar la anotación de la prohibición.",
        "Es importante explicar la necesidad de actualizar el conjunto de prohibiciones del conflicto.",
        "Los estados normativos cambian como resultado de las acciones de los agentes [11]: las permisiones, prohibiciones y obligaciones existentes son revocadas y/o se establecen nuevas como resultado de las interacciones de los agentes con el entorno y otros agentes.",
        "Cada vez que se añadan nuevas normas, debemos verificar nuevos conflictos e inconsistencias.",
        "Si solo aplicamos nuestro algoritmo a un par que consiste en una norma antigua y una nueva, entonces se puede ahorrar algo de reprocesamiento de pares de normas antiguas (que ya fueron tratadas anteriormente).",
        "La eliminación de normas del conjunto Ω se aborda de manera eficiente: cada permiso que se vaya a eliminar debe ser verificado primero en busca de conflictos con cualquier prohibición existente (se puede evitar el reprocesamiento si registramos el conflicto en lugar de detectarlo nuevamente).",
        "Si hay un conflicto, entonces el conjunto de conflictos habrá sido registrado en la anotación de prohibiciones; este conjunto de conflictos es eliminado de la anotación de prohibiciones.",
        "La eliminación de obligaciones sigue un proceso similar.",
        "Las prohibiciones se eliminan sin necesidad de considerar sus relaciones con otras normas.",
        "Nuestro algoritmo es correcto en el sentido de que proporciona, para un Ω dado, un nuevo Ω en el que i) se han eliminado todas las prohibiciones fundamentales que entran en conflicto con los permisos; y ii) todas las prohibiciones anotadas restantes (Fτ:τ ¯ϕ) Σc, td, ta, te no se unificarán con ninguno de los permisos en Ω, siempre que el unificador no aparezca en Σc.",
        "El primer requisito se aborda con el primer bucle for each, que hace precisamente esto: elimina todas las prohibiciones de base que se unifican con una obligación.",
        "El segundo requisito se aborda mediante el segundo bucle for each: cada prohibición tiene su anotación Σc agregada con ΣMAX c, acomodando así los unificadores de todas las autorizaciones que se unifican con la prohibición.",
        "Es fácil ver que el algoritmo siempre termina: cada uno de sus dos bucles recorre un conjunto finito, procesando un elemento a la vez.",
        "El conjunto CFLS(Ω) se calcula en un número finito de pasos, al igual que las operaciones de conjunto realizadas dentro de cada bucle.",
        "El algoritmo tiene, sin embargo, complejidad exponencial, ya que el cálculo de CFLS(Ω) requiere una comparación de pares de todos los elementos en Ω.",
        "Ilustramos nuestro algoritmo con el siguiente ejemplo.",
        "Que exista el siguiente estado normativo global Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:rp(a, b), 3, 4, 8, (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9, ff. El primer bucle elimina la prohibición terrestre, obteniendo así el siguiente Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, Pe:fp(g, h), 3, 4, 9, ff. Luego tenemos el siguiente conjunto de normas en conflicto CFLS(Ω): 8 < : * (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, {A/a, R/b, X/c, Y/d} +, * (FA:Rp(X, Y)) {}, 2, 2, 9, Pe:fp(g, h), 3, 4, 9, {A/e, R/f, X/g, Y/h} +9 =; Para cada prohibición ω ∈ Ω recuperamos todos los elementos de w, w, σ ∈ CFLS(Ω) y recopilamos sus σ en ΣMAX c.",
        "El Ω final es así: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; El conjunto anotado de conjuntos de conflictos debe entenderse como un registro de unificaciones pasadas, que informa cómo deben utilizarse las prohibiciones en el futuro para evitar conflictos con permisos.",
        "Mostramos en la Sección 5.1 cómo los agentes conscientes de las normas utilizan las anotaciones. 4.",
        "INCONSISTENCIAS NORMATIVAS Si se puede encontrar una sustitución σ que unifique una obligación y una prohibición, entonces se produce una situación de inconsistencia normativa [13].",
        "La obligación exige que un agente realice una acción que está prohibida.",
        "Podemos reutilizar la maquinaria, presentada anteriormente para resolver conflictos entre permisos y prohibiciones, con el fin de a) detectar y b) resolver tales inconsistencias.",
        "Con la Definición 7, nosotros 3 El esfuerzo combinatorio ya no es necesario si en su lugar mantenemos un conjunto de normas sin conflictos: cada vez que se introduce una nueva norma, la comparamos con las existentes, haciendo así que el proceso de mantenimiento sea de complejidad lineal.",
        "El Sexto Internacional.",
        "La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 647 expresa la naturaleza de un conflicto entre una prohibición y un permiso.",
        "De igual manera, una situación de inconsistencia puede ser definida reutilizando esta definición y reemplazando la modalidad deontica P con O.",
        "Podemos reutilizar la maquinaria para la resolución de conflictos, desarrollada previamente, para resolver inconsistencias.",
        "El algoritmo de resolución de conflictos se puede aplicar sin cambios para acumular un conjunto de conflictos máximo ΣMAX c para cada prohibición en Ω que se unifica con las obligaciones. 5.",
        "Sociedades de agentes conscientes de normas. Ahora describimos cómo nuestros VO regulados por normas dan lugar a sociedades de agentes conscientes de normas.",
        "Abordamos Sistemas Multiagentes abiertos y heterogéneos: acomodamos agentes externos proporcionándoles a cada uno de ellos un agente gobernador correspondiente [12].",
        "Este es un tipo de chaperón que interactúa con un agente externo, y observa e informa sobre su comportamiento.",
        "Mostramos nuestra arquitectura en la Figura 4 a continuación: un número de Agentes Gobernadores Externos Espacio de Tuplas de Agentes ag1 £ ¢ ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
        "Yo, s, Ξ, Ω Yo, s, Ξ, Ω · · · agn £ ¢ ¡ govn ⇐⇒ Figura 4: Arquitectura para Sociedades de Agentes Conscientes de Normas de agentes externos interactúan (indicado por el ) con sus agentes gobernadores correspondientes.",
        "Los agentes del gobernador tienen acceso a la descripción del VO, el estado actual de la promulgación del VO, el estado de ejecución global Ξ y el estado normativo global Ω.",
        "Los agentes del gobernador pueden escribir y leer de (indicado por el ⇐⇒) un espacio de memoria compartida (por ejemplo, una solución tipo pizarra implementada como un espacio de tuplas), actualizando la configuración global (indicada por el ) para reflejar la dinámica de la ejecución del VO.",
        "Los agentes gubernamentales son necesarios porque no podemos anticipar ni legislar sobre el diseño o comportamiento de agentes externos.",
        "A continuación, representamos cómo los pares de gobernador/agentes externos trabajan juntos: cualquier elección no determinista en el VO es decidida por el agente externo; cualquier aspecto normativo es considerado por el agente gobernador.",
        "El agente gobernador representa el agente externo dentro del VO.",
        "Como tal, tiene el identificador único del agente externo.",
        "El agente gobernador lleva un registro de todos los roles que el agente externo está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un rol simultáneamente.",
        "Definimos en la Figura 5 cómo funcionan los agentes gobernadores: utilizamos un programa lógico con este propósito.",
        "Mostramos 1 main(Id, Roles) ← 2 obtener tupla( I, s, Ξ, Ω )∧ 3 terminar(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 obtener tupla( I, s, Ξ, Ω )∧ 6 filtrar normas(Id, Roles, Ω, ΩId )∧ 7 discutir normas(Id, Roles, I, s, Ξ, ΩId , Acciones)∧ 8 actualizar tupla(Roles, Acciones, NuevosRoles)∧ 9 main(Id, NuevosRoles) Figura 5: Agente Gobernador como un Programa Lógico las líneas de nuestras cláusulas numeradas 1-9.",
        "La primera cláusula (líneas 1-3) describe la condición de terminación: get tuple/1 (línea 2) recupera I, s, Ξ, Ω del espacio de tuplas compartido y terminate/4 verifica si la ejecución actual de VO (registrada en Ξ) ha llegado a su fin.",
        "El equipo de agentes del gobernador sincroniza su acceso al espacio de tuplas [12], asegurando así que cada uno tenga la oportunidad de funcionar.",
        "La segunda cláusula (líneas 4-9) representa un bucle genérico cuando la condición de terminación de la primera cláusula no se cumple.",
        "En este caso, la tupla se recupera nuevamente (línea 5) y el agente gobernador procede (línea 6) a analizar el estado normativo global actual Ω con el objetivo de obtener el subconjunto ΩId ⊆ Ω de normas que hacen referencia al agente Id bajo los roles Roles.",
        "El predicado filter norms/4 recopila las normas que se aplican al agente Id (el agente externo del agente gobernador).",
        "En la línea 7, el agente gobernador, en posesión de las normas aplicables y otra información relevante, interactúa con el agente externo para decidir sobre un conjunto de Acciones que cumplen con las normas; estas acciones se utilizarán para actualizar (línea 8) el estado de ejecución global Ξ.",
        "En el proceso de actualizar el estado de ejecución, un nuevo conjunto de roles debe ser asignado al agente externo, representado como NewRoles.",
        "El agente gobernador sigue en bucle (línea 9) utilizando el identificador del agente externo y su nuevo conjunto de roles. 5.1 Uso de normas anotadas Ahora explicamos cómo los agentes conscientes de las normas utilizan normas anotadas.",
        "Lo hacemos a través de la definición de comprobación de predicado/2, que se cumple si su primer argumento, una acción candidata (en el formato de los elementos de Ξ de la Def. 2), está dentro de la influencia de una prohibición anotada ω, su segundo parámetro.",
        "La definición, como un programa lógico, se muestra en la Figura 6.",
        "Comprueba (línea 4) si el identificador del agente 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unificar(a, τ1, σ) ∧ unificar(r, τ2, σ) ∧ unificar( ¯ϕ, ϕ, σ)∧ 5 para todo(σ , (σc ∈ Σc, unificar(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figura 6: Comprobar si la Acción está dentro de la Influencia de la Norma Recortada y el rol de la acción se unifica con los términos apropiados τ1, τ2 de ω y que las acciones ¯ϕ, ϕ mismas se unifican, todo bajo el mismo unificador σ.",
        "Luego verifica (líneas 5-6) que σ no unifica con ninguno de los conjuntos de conflictos en Σc.",
        "Finalmente, en la línea 7 se comprueba si el tiempo de la acción está dentro de la influencia temporal normativa.",
        "La verificación de la no unificación de σ con ningún elemento de Σc merece una explicación.",
        "Los elementos de Σc son unificadores que indican qué valores no pueden tener las variables de la norma, es decir, representan vacíos en el alcance original de la influencia de las normas.",
        "El test equivale a preguntar si la acción está fuera de tales brechas, es decir, si la acción se encuentra dentro del alcance limitado de influencia de la norma. 6.",
        "En nuestra discusión anterior, se detectaron conflictos y inconsistencias normativas a través de una comparación directa de las fórmulas atómicas que representan la acción.",
        "Sin embargo, los conflictos e inconsistencias también pueden surgir indirectamente a través de las relaciones entre acciones.",
        "Por ejemplo, si p(X) equivale a q(X, X), entonces las normas PA:Rp(X) y FA:Rq(X, X) están en conflicto, ya que PA:Rp(X) se puede reescribir como PA:Rq(X, X) y, por lo tanto, tenemos tanto PA:Rq(X, X) como FA:Rq(X, X).",
        "En la discusión a continuación nos concentramos en el conflicto de normas, pero la inconsistencia normativa se puede abordar de manera similar, si cambiamos las modalidades deonticas de P por O.",
        "Las relaciones entre acciones dependen del dominio.",
        "Los diferentes dominios tienen formas distintas de relacionar sus acciones; los ingenieros construyen ontologías para representar dichas relaciones.",
        "Proponemos un medio simple para tener en cuenta tales relaciones y mostrar cómo estas pueden estar conectadas a los mecanismos introducidos anteriormente.",
        "En lugar de utilizar formalismos sofisticados para la construcción de ontologías, empleamos un conjunto de axiomas de dominio, definidos a continuación: DEF. 9.",
        "Los axiomas de dominio, denotados como Δ, son un conjunto finito y posiblemente vacío de fórmulas ϕ → (ϕ1 ∧ · · · ∧ ϕn) donde ϕ, ϕi, 1 ≤ i ≤ n, son fórmulas atómicas de primer orden.",
        "Nuestro ejemplo anterior puede ser capturado por Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
        "Al representar y manipular explícitamente el conocimiento del dominio logramos generalidad: la misma maquinaria puede ser utilizada en diferentes dominios.",
        "Un conjunto de normas puede tener diferentes conflictos e inconsistencias, para distintos dominios de aplicación. 648 El Sexto Internacional.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 649 650 La Sexta Internacional.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 651"
    ],
    "error_count": 2,
    "keys": {
        "virtual organization": {
            "translated_key": "organización virtual",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A <br>virtual organization</br> I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the <br>virtual organization</br> is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [
                "A <br>virtual organization</br> I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the <br>virtual organization</br> is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization."
            ],
            "translated_annotated_samples": [
                "Una <br>organización virtual</br> I es el triple S, s0, E, T donde S = {s1, . . . , sn} es un conjunto finito y no vacío de estados, s0 ∈ S es el estado inicial, E es un conjunto finito de aristas (s, s , ϕ), s, s ∈ S conectando s con s con una fórmula atómica de primer orden ϕ como etiqueta, y T ⊆ S es el conjunto de estados terminales.",
                "También definimos una función para calcular el conjunto de todos los posibles estados de ejecución, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 VOs Regulados por Normas Abogamos por una separación de preocupaciones en la que la <br>organización virtual</br> se complementa con un conjunto explícito y separado de normas que regulan aún más el comportamiento de los agentes mientras participan en la puesta en marcha de una organización."
            ],
            "translated_text": "Resolviendo conflictos e inconsistencias en organizaciones virtuales reguladas por normas, Wamberto Vasconcelos Dept. Las organizaciones virtuales regidas por normas definen, regulan y facilitan el intercambio coordinado de recursos y la resolución de problemas en sociedades de agentes. Con una explicación detallada de las normas, la apertura en las organizaciones virtuales se puede lograr: los nuevos componentes, diseñados por diversas partes, pueden ser fácilmente incorporados. Nos enfocamos en organizaciones virtuales realizadas como sistemas multiagente, en las cuales agentes humanos y de software interactúan para lograr objetivos individuales y globales. Sin embargo, cualquier descripción realista de las normas debería abordar su naturaleza dinámica: las normas cambiarán a medida que los agentes interactúen entre sí y con su entorno. Debido a la naturaleza cambiante de las normas o a las normas derivadas de diferentes organizaciones virtuales, habrá situaciones en las que una acción sea simultáneamente permitida y prohibida, es decir, surge un conflicto. Asimismo, habrá situaciones en las que una acción esté tanto obligada como prohibida, es decir, surge una inconsistencia. Introducimos un enfoque, basado en unificación de primer orden, para detectar y resolver tales conflictos e inconsistencias. En nuestra solución propuesta, anotamos una norma con el conjunto de valores que sus variables no deben tener para evitar un conflicto o una inconsistencia con otra norma. Nuestro enfoque acomoda de manera ordenada las interrelaciones dependientes del dominio entre acciones y los conflictos/inconsistencias indirectos que estos pueden causar. Más generalmente, podemos capturar una noción útil de delegación de acciones y normas entre agentes (y roles) y utilizarla para abordar conflictos/inconsistencias causados por la delegación de acciones. Ilustramos nuestro enfoque con un ejemplo de e-Ciencia en el que agentes respaldan servicios de Grid. Categorías y Descriptores de Asignaturas I.2.4 [Inteligencia Artificial]: Aplicaciones y Sistemas Expertos en Derecho; I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida-Sistemas Multiagente Términos Generales Algoritmos, Teoría 1. Las organizaciones virtuales (VOs) facilitan el intercambio coordinado de recursos y la resolución de problemas que involucran a diversas partes geográficamente remotas [9]. Los VOs definen y regulan las interacciones (facilitando así la coordinación) entre agentes de software y/o humanos que se comunican para lograr objetivos individuales y globales [16]. Los VOs se realizan como sistemas multiagente y una característica muy deseable de tales sistemas es la apertura, mediante la cual los nuevos componentes diseñados por otras partes se integran sin problemas. El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de sistemas multiagente (MASs) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]. Las normas regulan el comportamiento observable de agentes de software auto-interesados y heterogéneos, diseñados por diversas partes que pueden no confiar del todo entre sí [3, 24]. Sin embargo, los VOs regulados por normas pueden experimentar problemas cuando las normas asignadas a sus agentes están en conflicto (es decir, una acción está simultáneamente prohibida y permitida) o son inconsistentes (es decir, una acción está simultáneamente prohibida y obligada). Proponemos un medio para detectar y resolver automáticamente conflictos e inconsistencias en los VO regulados por normas. Hacemos uso de la unificación de términos de primer orden [8] para averiguar si y cómo se superponen las normas en su influencia (es decir, los agentes y los valores de los parámetros en las acciones de los agentes que las normas pueden afectar). Esto permite una solución detallada en la que se reduce la influencia de normas conflictivas o inconsistentes para conjuntos particulares de valores. Por ejemplo, las normas en las que el agente x tiene permitido enviar la oferta (ag1, 20) y el agente ag2 tiene prohibido enviar la oferta (y, z) (donde x, y, z son variables y ag1, ag2, 20 son constantes) están en conflicto porque sus agentes, acciones y términos (dentro de las acciones) se unifican. Resolvemos el conflicto anotando normas con conjuntos de valores que sus variables no pueden tener, reduciendo así su influencia. En nuestro ejemplo, el conflicto se evita si requerimos que la variable y no puede ser ag1 y que z no puede ser 20. Este documento está organizado de la siguiente manera. En la siguiente sección proporcionamos una definición minimalista para los VOs regulados por normas. En la sección 3 definimos formalmente los conflictos de normas, y explicamos cómo se detectan y resuelven. En la sección 4 describimos cómo la maquinaria de la sección anterior puede adaptarse para detectar y resolver inconsistencias normativas. En la sección 5 describimos cómo se utilizan nuestras normas limitadas en sociedades de agentes conscientes de las normas. En la sección 6 explicamos cómo nuestra maquinaria puede ser utilizada para detectar y resolver conflictos/inconsistencias indirectos, es decir, aquellos causados a través de relaciones entre acciones; extendemos y adaptamos la maquinaria para dar cabida a la delegación de normas. En la sección 7 ilustramos nuestro enfoque con un ejemplo de agentes de software regulados por normas que sirven a la Red. En la sección 8 revisamos el trabajo relacionado y en la sección 9 discutimos nuestras contribuciones y damos direcciones para trabajos futuros. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2. Las organizaciones virtuales permiten que diversas partes se unan para compartir recursos y participar en la resolución de problemas. Este paradigma ha encontrado fuertes aplicaciones en la orquestación de servicios web [14], la e-Ciencia [16] y la Red [9]. Los VOs, en su formulación más genérica, pueden ser vistos como artefactos de coordinación, permitiendo que agentes de software y humanos participen en formas sofisticadas de interacción. Representamos formalmente nuestros VO como máquinas de estados finitos en las que las acciones de los agentes individuales etiquetan los bordes entre estados discretos. Esto nos proporciona un denominador común más bajo: hay formas mucho más sofisticadas, convenientes y expresivas de representar las interacciones entre agentes (por ejemplo, AUML [19] e instituciones electrónicas [20], por nombrar algunas), pero para generalizar nuestro enfoque, asumiremos que cualquier formalismo de nivel superior puede ser mapeado a una máquina de estados finitos (posiblemente con cierta pérdida de expresividad). Mostramos en la Figura 1 un simple VO representado gráficamente como una máquina de estados finitos. Las etiquetas en los bordes con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figura 1: Ejemplo de VO como una Máquina de Estados Finitos que conectan los estados son fórmulas atómicas de primer orden, denotadas genéricamente como ϕ; representan acciones realizadas por agentes individuales. Definimos nuestras organizaciones virtuales de la siguiente manera: DEF. 1. Una <br>organización virtual</br> I es el triple S, s0, E, T donde S = {s1, . . . , sn} es un conjunto finito y no vacío de estados, s0 ∈ S es el estado inicial, E es un conjunto finito de aristas (s, s , ϕ), s, s ∈ S conectando s con s con una fórmula atómica de primer orden ϕ como etiqueta, y T ⊆ S es el conjunto de estados terminales. Ten en cuenta que los bordes están dirigidos, por lo que (s, t, ϕ) = (t, s, ϕ). La muestra VO de la Figura 1 se representa formalmente como I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2}. Suponemos una cuantificación existencial implícita en cualquier variable en ϕ, de modo que, por ejemplo, s(A, B) representa ∃A, B s(A, B). Los VO deben permitir dos tipos de no determinismo correspondientes a las elecciones que los agentes autónomos pueden hacer, a saber, i) el que surge cuando hay más de un borde que sale de un estado; y ii) el que surge de las variables en las fórmulas ϕ que etiquetan un borde, para las cuales el agente que realiza la acción instancia. Estos tipos de no determinismo son deseables ya que ayudan a definir mecanismos de coordinación genéricos y flexibles. Otro concepto importante que utilizamos son los roles de los agentes en las Organizaciones Virtuales (OV). Los roles, tal como se explotan en, por ejemplo, [18] y [20], nos ayudan a abstraernos de los agentes individuales y definir un patrón de comportamiento al cual cualquier agente que adopte un rol debería conformarse. Además, todos los agentes con el mismo rol tienen garantizados los mismos derechos, deberes y oportunidades. Haremos uso de dos conjuntos finitos y no vacíos, Agentes = {ag1, . . . , agn} y Roles = {r1, . . . , rm}, que representan, respectivamente, los conjuntos de identificadores de agentes y etiquetas de roles. Nos referimos genéricamente a los términos de primer orden, es decir, constantes, variables y funciones (anidadas) como τ. 2.1 Semántica de los VO La especificación de un VO como una máquina de estados finitos da lugar a un conjunto posiblemente infinito de historias de comportamientos computacionales, en las que se registran las acciones que etiquetan los caminos desde el estado inicial hasta un estado final. Aunque las acciones que conforman un VO se llevan a cabo de manera distribuida, proponemos un registro global explícito de todos los eventos. En la práctica, esto se puede lograr si requerimos que los agentes individuales declaren/informen las acciones que han llevado a cabo; esto asume agentes de confianza, naturalmente. Para registrar la autoría de la acción, anotamos las fórmulas con la identificación única de los agentes. Nuestra cuenta global explícita de todos los eventos es un conjunto de fórmulas atómicas fundamentales ϕ, es decir, solo permitimos que aparezcan constantes como términos de las fórmulas. Cada fórmula es un registro veraz de una acción especificada en el VO. Sin embargo, hay que tener en cuenta que en la especificación de VO no restringimos la sintaxis de las fórmulas: las variables pueden aparecer en ellas, y cuando un agente realiza una acción real, entonces cualquier variable de la acción especificada debe asignarse valores. Por lo tanto, definimos: DEF. 2. Un estado de ejecución global de un VO, denotado como Ξ, es un conjunto finito, posiblemente vacío, de tuplas a : r, ¯ϕ, t donde a ∈ Agentes es un identificador de agente, r ∈ Roles es una etiqueta de rol, ¯ϕ es una fórmula atómica de primer orden concreta, y t ∈ IN es una marca de tiempo. Por ejemplo, ag1:comprador, p(a, 34), 20 indica que el agente ag1 adoptando el rol de comprador realizó la acción p(a, 34) en el instante 20. Dado un VO I = S, s0, E, T, un estado de ejecución Ξ y un estado s ∈ S, podemos definir una función que obtiene un posible próximo estado de ejecución, es decir, h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, para un (s, s , ϕ) ∈ E. Dicha función h debe abordar los dos tipos de no determinismo mencionados anteriormente, así como la elección de los agentes potenciales que pueden llevar a cabo la acción y sus roles adoptados. También definimos una función para calcular el conjunto de todos los posibles estados de ejecución, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 VOs Regulados por Normas Abogamos por una separación de preocupaciones en la que la <br>organización virtual</br> se complementa con un conjunto explícito y separado de normas que regulan aún más el comportamiento de los agentes mientras participan en la puesta en marcha de una organización. La libertad de elección dada a los agentes (capturada a través del no determinismo de los VO, explicado anteriormente) debe ser limitada en algunas circunstancias. Por ejemplo, podríamos necesitar describir que quien llevó a cabo ϕ está obligado a llevar a cabo ϕ, de modo que si hay un punto de elección en el que ϕ aparece como etiqueta de un borde, entonces ese borde debería ser seguido. En lugar de incorporar aspectos normativos en el diseño de los agentes (por ejemplo, codificando explícitamente aspectos normativos en el comportamiento de los agentes) o en el propio VO (por ejemplo, abordando excepciones y comportamientos desviados en el mecanismo en sí), adoptamos la perspectiva de que un VO debería complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes mientras participan en la puesta en marcha de la organización. Esta separación de preocupaciones debería facilitar el diseño de los Sistemas Multiagente (MAS); sin embargo, los diferentes componentes (VOs y normas) deben unirse en algún momento del proceso de diseño. Nuestras normas están definidas de la siguiente manera: DEF. 3. Una norma, genéricamente referida como ν, es cualquier construcción de la forma Oτ:τ ϕ, Pτ:τ ϕ, o Fτ:τ ϕ, donde τ, τ son variables o constantes y ϕ es una fórmula atómica de primer orden. Adoptamos la notación de [18]: Oτ:τ ϕ representa una obligación para el agente τ que asume el rol τ de llevar a cabo ϕ; recordamos que τ, τ son variables, constantes y funciones aplicadas a términos (anidados). Pτ:τ ϕ y Fτ:τ ϕ representan, respectivamente, un permiso y una prohibición para el agente τ, desempeñando el rol τ para lograr ϕ. Supondremos que los tipos se utilizan para manipular adecuadamente variables de identificadores de agentes y etiquetas de roles. Proponemos representar formalmente las posiciones normativas de todos los agentes que llevan a cabo un VO. Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 Agentes no confiables pueden ser acomodados en esta propuesta, si asociamos a cada uno de ellos un agente gobernador que supervise las acciones del agente externo e informe sobre ellas. Este enfoque fue introducido en [12] y se explica en la sección 5. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 645 DEF. 4. Un estado normativo global Ω es un conjunto finito y posiblemente vacío de tuplas ω = ν, td, ta, te donde ν es una norma como se mencionó anteriormente y td, ta, te ∈ IN son, respectivamente, el momento en que ν fue declarada (introducida), cuando ν se vuelve activa y cuando ν expira, td ≤ ta < te. Vale la pena notar que no requerimos que las fórmulas atómicas de las normas sean concretas: podrían contener variables. Suponemos una cuantificación universal implícita en las variables A, R de las normas XA:Rϕ (para las modalidades deónticas X ∈ {O, P, F}), de modo que, por ejemplo, PA:Rp(X, b, c) significa ∀A ∈ Agentes.∀R ∈ Roles.∃X.PA:Rp(X, b, c). También nos referimos a las tuplas en Ω como normas. Los estados normativos globales complementan los estados de ejecución de los VO con información sobre las posiciones normativas de los agentes individuales. Podemos relacionarlos a través de una función para obtener un estado de ejecución siguiente de VOs regulado por una norma, es decir, g(I, Ξ, s, Ω, t) = Ξ, donde t representa el tiempo de la actualización. Por ejemplo, podríamos querer que todas las acciones prohibidas se excluyan del próximo estado de ejecución, es decir, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E y Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te. Podríamos desear igualmente que solo se elijan acciones permitidas para el próximo estado de ejecución. No legislamos, ni recomendamos de hecho, ninguna forma particular de regular las ONG. Sin embargo, ofrecemos bases simples para permitir la implementación de políticas arbitrarias. Del mismo modo que un estado normativo es útil para obtener el siguiente estado de ejecución de un VO, podemos usar un estado de ejecución para actualizar un estado normativo. Por ejemplo, podríamos querer eliminar cualquier obligación específica de un agente y rol, que ha sido llevada a cabo por ese agente y rol específico, es decir, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}. La gestión (es decir, la creación y actualización) de estados normativos globales es un área de investigación interesante. Se reporta un enfoque simple pero útil en [11]: las reglas de producción representan genéricamente cómo se deben actualizar las normas para reflejar lo que los agentes han hecho y qué normas se mantienen actualmente. En este documento nuestro enfoque no es proponer cómo deberían ser gestionadas las Ωs; asumimos que existe algún mecanismo que se encarga de eso. 3. CONFLICTOS NORMATIVOS Ahora definimos medios para detectar y resolver conflictos e inconsistencias normativas. Hacemos uso del concepto de unificación [1, 8] de términos de primer orden τ, es decir, constantes, variables o funciones (anidadas) con términos como parámetros. Inicialmente definimos las sustituciones: DEF. 5. Una sustitución σ es un conjunto finito y posiblemente vacío de pares x/τ, donde x es una variable y τ es un término. Definimos la aplicación de una sustitución de la siguiente manera: 1. c · σ = c para una constante c 2. x · σ = τ · σ si x/τ ∈ σ; de lo contrario, x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Donde X se refiere genéricamente a cualquiera de las modalidades deónticas O, P, F. La unificación entre dos términos τ, τ consiste en encontrar una sustitución σ (también llamada, en este contexto, el unificador de τ y τ) tal que τ · σ = τ · σ. Se han propuesto muchos algoritmos para resolver el problema de unificación, un tema fundamental en la demostración automatizada de teoremas [8], y trabajos más recientes ofrecen formas muy eficientes de obtener unificadores. Haremos uso de la siguiente definición: DEF. 6. La relación unify(τ, τ , σ) se cumple si y solo si existe un σ posiblemente vacío tal que τ · σ = τ · σ. También definimos la unificación de fórmulas atómicas como unificar(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) lo cual se cumple si y solo si τi · σ = τi · σ, 0 ≤ i ≤ n. La relación de unificación verifica si una sustitución σ es realmente un unificador para τ, τ pero también puede usarse para encontrar dicho σ. Suponemos que unificar es una implementación adecuada de un algoritmo de unificación que i) siempre termina (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene una complejidad computacional lineal. 3.1 Detección de Conflictos Un conflicto normativo surge cuando una fórmula atómica que etiqueta un borde en el VO, es decir, una acción, está simultáneamente permitida y prohibida [13]. En este caso, ambas normas están en conflicto con respecto a sus agentes, roles y parámetros (términos) de acciones específicas. Proponemos utilizar la unificación para detectar cuándo se superponen una prohibición y un permiso y emplear el unificador para resolver el conflicto. Por ejemplo, PA:Rp(c, X) y Fa:bp(Y, Z) están en conflicto ya que se unifican bajo σ = {A/a, R/b, Y/c, X/d}. Si, sin embargo, las variables en Fa:bp(Y, Z) no obtienen los valores en σ, entonces no habrá conflictos. Por lo tanto, proponemos anotar las prohibiciones en Ω con unificadores, llamados conjuntos de conflictos, y utilizar estas anotaciones para determinar qué variables no pueden ser los variables de la prohibición en futuras unificaciones con el fin de evitar un conflicto. Cada prohibición se considera a partir de ahora como teniendo tal anotación, denotada como (Fτ1:τ2 ϕ) Σc, td, ta, te. Inicialmente, esta anotación está vacía. Proponemos reducir la influencia de las prohibiciones, dando así a los agentes más opciones en las acciones que pueden realizar. Un enfoque similar podría ser adoptado mediante la restricción de permisos, limitando así las acciones disponibles para los agentes. Cada una de estas políticas es posible: no legislamos sobre ninguna de ellas ni damos preferencia sobre ninguna. En este documento estamos interesados en formalizar dichas políticas dentro de un marco matemático simple. Una prohibición puede estar en conflicto con varias autorizaciones en Ω. Por lo tanto, debemos encontrar el conjunto máximo de pares conflictivos de permisos y prohibiciones en Ω, realizando una inspección por pares. Esto requiere identificar la sustitución entre dos pares de normas que caracteriza un conflicto. Esto se captura formalmente mediante la siguiente definición: DEF. 7. Surge un conflicto entre dos tuplas ω, ω ∈ Ω bajo una sustitución σ, denotado como cflct(ω, ω , σ), si se cumplen las siguientes condiciones: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unificar(τ1, τ1, σ), unificar(τ2, τ2, σ), y unificar(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| Es decir, un conflicto de prohibición y permiso (condición 1) si, y solo si, los agentes y roles a los que se aplican y sus acciones, respectivamente, se unifican bajo σ (condición 2) y sus períodos de activación se superponen (condición 3). La sustitución σ, el conjunto de conflictos, unifica a los agentes, roles y fórmulas atómicas de un permiso y una prohibición. La anotación Σc no juega ningún papel al detectar conflictos, pero, como mostramos a continuación, debemos actualizar la anotación para reflejar nuevas restricciones y resolver conflictos. Por ejemplo, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) se cumple. Definimos a continuación cómo obtenemos el conjunto de normas en conflicto de un estado normativo Ω: DEF. 8. El conjunto finito, posiblemente vacío, de normas en conflicto de un estado normativo Ω, denotado como CFLS(Ω), se define como CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Resolución de Conflictos Una forma detallada de resolver conflictos puede hacerse a través de la unificación. Detectamos la superposición de las influencias normativas, es decir, cómo afectan los comportamientos de los agentes en la VO, y limitamos el 646 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) influencia de la prohibición. Ilustramos con diagramas de Venn en la Figura 2 la superposición de las influencias normativas (izquierda) que caracterizan un conflicto y la reducción necesaria para resolver el conflicto (derecha). La ilustración muestra el espacio de valores posibles para p(X, Y) y p(X, Y) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y) Fa:bp(Y, Z) PA:Rp(c, X) Figura 2: Superposición de Influencia (Izquierda) y Restricción (Derecha) dos porciones de este espacio que definen el alcance de influencia de las normas PA:Rp(c, X) y Fa:bp(Y, Z). El alcance de estas normas se superponen, ilustrado por la intersección de las casillas a la izquierda, en acciones con valores, por ejemplo, a, b, p(c, 2), . . . , a, b, p(c, n). La reducción de la prohibición elimina la intersección: traslada el alcance de la influencia de la norma fuera de la influencia del permiso. Si hubiera múltiples superposiciones entre una prohibición y varias autorizaciones, lo cual es probable que ocurra, entonces la prohibición será restringida múltiples veces para desplazar el alcance de la norma y evitar todas las intersecciones. El algoritmo mostrado en la Figura 3 describe cómo obtenemos un conjunto de normas sin conflictos. Mapea un conjunto existente Ω posiblemente con el algoritmo de resolución de conflictos conflictResolution(Ω, Ω) entrada Ω salida Ω comenzar Ω := Ω para cada ω ∈ Ω tal que ω = (Fa:r ¯ϕ) Σc, td, ta, te hacer si ω, ω, σ ∈ CFLS(Ω) entonces Ω := Ω − {ω} fin si fin para para cada ω ∈ Ω tal que ω = (Fτ1:τ2 ϕ) Σc, td, ta, te hacer ΣMAX c := [ ω,ω,σc ∈CFLS(Ω) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c), td, ta, te } fin para fin Figura 3: Algoritmo para Resolver Conflictos en un Conjunto de Normas mapeando normas a un nuevo conjunto Ω en el que los conflictos (si los hay) están resueltos. El algoritmo forma Ω como un conjunto que es libre de conflictos, lo que significa que las prohibiciones están anotadas con un conjunto de conflictos que indica qué asignaciones para variables deben evitarse. Inicialmente, Ω se establece como Ω. El algoritmo opera en dos etapas. En la primera etapa (primera para cada bucle), eliminamos todas las prohibiciones conflictivas ω = (Fa:r ¯ϕ) Σc, td, ta, te con pares de agente/rol y fórmulas concretas en conflicto a : r y ¯ϕ: la única forma de resolver conflictos derivados de tales prohibiciones es eliminarlas por completo, ya que no podemos restringir una norma completamente concreta. En la segunda etapa (segunda para cada bucle), se examinan las prohibiciones restantes en Ω: el conjunto CFLS(Ω) contiene todos los conflictos entre permisos y las prohibiciones restantes en Ω representadas como tuplas ω, ω, σc, con σc representando el conjunto de conflictos. Dado que una prohibición puede tener conflictos con varias autorizaciones, el conjunto CFLS(Ω) puede contener más de una tupla para cada prohibición. Para proporcionar un Ω que refleje todos estos conflictos para una prohibición específica, debemos formar ΣMAX c que contenga todos los conjuntos de conflictos σc para una prohibición dada ω. El conjunto maximal se utiliza para actualizar la anotación de la prohibición. Es importante explicar la necesidad de actualizar el conjunto de prohibiciones del conflicto. Los estados normativos cambian como resultado de las acciones de los agentes [11]: las permisiones, prohibiciones y obligaciones existentes son revocadas y/o se establecen nuevas como resultado de las interacciones de los agentes con el entorno y otros agentes. Cada vez que se añadan nuevas normas, debemos verificar nuevos conflictos e inconsistencias. Si solo aplicamos nuestro algoritmo a un par que consiste en una norma antigua y una nueva, entonces se puede ahorrar algo de reprocesamiento de pares de normas antiguas (que ya fueron tratadas anteriormente). La eliminación de normas del conjunto Ω se aborda de manera eficiente: cada permiso que se vaya a eliminar debe ser verificado primero en busca de conflictos con cualquier prohibición existente (se puede evitar el reprocesamiento si registramos el conflicto en lugar de detectarlo nuevamente). Si hay un conflicto, entonces el conjunto de conflictos habrá sido registrado en la anotación de prohibiciones; este conjunto de conflictos es eliminado de la anotación de prohibiciones. La eliminación de obligaciones sigue un proceso similar. Las prohibiciones se eliminan sin necesidad de considerar sus relaciones con otras normas. Nuestro algoritmo es correcto en el sentido de que proporciona, para un Ω dado, un nuevo Ω en el que i) se han eliminado todas las prohibiciones fundamentales que entran en conflicto con los permisos; y ii) todas las prohibiciones anotadas restantes (Fτ:τ ¯ϕ) Σc, td, ta, te no se unificarán con ninguno de los permisos en Ω, siempre que el unificador no aparezca en Σc. El primer requisito se aborda con el primer bucle for each, que hace precisamente esto: elimina todas las prohibiciones de base que se unifican con una obligación. El segundo requisito se aborda mediante el segundo bucle for each: cada prohibición tiene su anotación Σc agregada con ΣMAX c, acomodando así los unificadores de todas las autorizaciones que se unifican con la prohibición. Es fácil ver que el algoritmo siempre termina: cada uno de sus dos bucles recorre un conjunto finito, procesando un elemento a la vez. El conjunto CFLS(Ω) se calcula en un número finito de pasos, al igual que las operaciones de conjunto realizadas dentro de cada bucle. El algoritmo tiene, sin embargo, complejidad exponencial, ya que el cálculo de CFLS(Ω) requiere una comparación de pares de todos los elementos en Ω. Ilustramos nuestro algoritmo con el siguiente ejemplo. Que exista el siguiente estado normativo global Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:rp(a, b), 3, 4, 8, (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9, ff. El primer bucle elimina la prohibición terrestre, obteniendo así el siguiente Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, Pe:fp(g, h), 3, 4, 9, ff. Luego tenemos el siguiente conjunto de normas en conflicto CFLS(Ω): 8 < : * (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, {A/a, R/b, X/c, Y/d} +, * (FA:Rp(X, Y)) {}, 2, 2, 9, Pe:fp(g, h), 3, 4, 9, {A/e, R/f, X/g, Y/h} +9 =; Para cada prohibición ω ∈ Ω recuperamos todos los elementos de w, w, σ ∈ CFLS(Ω) y recopilamos sus σ en ΣMAX c. El Ω final es así: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; El conjunto anotado de conjuntos de conflictos debe entenderse como un registro de unificaciones pasadas, que informa cómo deben utilizarse las prohibiciones en el futuro para evitar conflictos con permisos. Mostramos en la Sección 5.1 cómo los agentes conscientes de las normas utilizan las anotaciones. 4. INCONSISTENCIAS NORMATIVAS Si se puede encontrar una sustitución σ que unifique una obligación y una prohibición, entonces se produce una situación de inconsistencia normativa [13]. La obligación exige que un agente realice una acción que está prohibida. Podemos reutilizar la maquinaria, presentada anteriormente para resolver conflictos entre permisos y prohibiciones, con el fin de a) detectar y b) resolver tales inconsistencias. Con la Definición 7, nosotros 3 El esfuerzo combinatorio ya no es necesario si en su lugar mantenemos un conjunto de normas sin conflictos: cada vez que se introduce una nueva norma, la comparamos con las existentes, haciendo así que el proceso de mantenimiento sea de complejidad lineal. El Sexto Internacional. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 647 expresa la naturaleza de un conflicto entre una prohibición y un permiso. De igual manera, una situación de inconsistencia puede ser definida reutilizando esta definición y reemplazando la modalidad deontica P con O. Podemos reutilizar la maquinaria para la resolución de conflictos, desarrollada previamente, para resolver inconsistencias. El algoritmo de resolución de conflictos se puede aplicar sin cambios para acumular un conjunto de conflictos máximo ΣMAX c para cada prohibición en Ω que se unifica con las obligaciones. 5. Sociedades de agentes conscientes de normas. Ahora describimos cómo nuestros VO regulados por normas dan lugar a sociedades de agentes conscientes de normas. Abordamos Sistemas Multiagentes abiertos y heterogéneos: acomodamos agentes externos proporcionándoles a cada uno de ellos un agente gobernador correspondiente [12]. Este es un tipo de chaperón que interactúa con un agente externo, y observa e informa sobre su comportamiento. Mostramos nuestra arquitectura en la Figura 4 a continuación: un número de Agentes Gobernadores Externos Espacio de Tuplas de Agentes ag1 £ ¢ ¡ gov1 ⇐⇒ . . . . . . . . . . . . Yo, s, Ξ, Ω Yo, s, Ξ, Ω · · · agn £ ¢ ¡ govn ⇐⇒ Figura 4: Arquitectura para Sociedades de Agentes Conscientes de Normas de agentes externos interactúan (indicado por el ) con sus agentes gobernadores correspondientes. Los agentes del gobernador tienen acceso a la descripción del VO, el estado actual de la promulgación del VO, el estado de ejecución global Ξ y el estado normativo global Ω. Los agentes del gobernador pueden escribir y leer de (indicado por el ⇐⇒) un espacio de memoria compartida (por ejemplo, una solución tipo pizarra implementada como un espacio de tuplas), actualizando la configuración global (indicada por el ) para reflejar la dinámica de la ejecución del VO. Los agentes gubernamentales son necesarios porque no podemos anticipar ni legislar sobre el diseño o comportamiento de agentes externos. A continuación, representamos cómo los pares de gobernador/agentes externos trabajan juntos: cualquier elección no determinista en el VO es decidida por el agente externo; cualquier aspecto normativo es considerado por el agente gobernador. El agente gobernador representa el agente externo dentro del VO. Como tal, tiene el identificador único del agente externo. El agente gobernador lleva un registro de todos los roles que el agente externo está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un rol simultáneamente. Definimos en la Figura 5 cómo funcionan los agentes gobernadores: utilizamos un programa lógico con este propósito. Mostramos 1 main(Id, Roles) ← 2 obtener tupla( I, s, Ξ, Ω )∧ 3 terminar(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 obtener tupla( I, s, Ξ, Ω )∧ 6 filtrar normas(Id, Roles, Ω, ΩId )∧ 7 discutir normas(Id, Roles, I, s, Ξ, ΩId , Acciones)∧ 8 actualizar tupla(Roles, Acciones, NuevosRoles)∧ 9 main(Id, NuevosRoles) Figura 5: Agente Gobernador como un Programa Lógico las líneas de nuestras cláusulas numeradas 1-9. La primera cláusula (líneas 1-3) describe la condición de terminación: get tuple/1 (línea 2) recupera I, s, Ξ, Ω del espacio de tuplas compartido y terminate/4 verifica si la ejecución actual de VO (registrada en Ξ) ha llegado a su fin. El equipo de agentes del gobernador sincroniza su acceso al espacio de tuplas [12], asegurando así que cada uno tenga la oportunidad de funcionar. La segunda cláusula (líneas 4-9) representa un bucle genérico cuando la condición de terminación de la primera cláusula no se cumple. En este caso, la tupla se recupera nuevamente (línea 5) y el agente gobernador procede (línea 6) a analizar el estado normativo global actual Ω con el objetivo de obtener el subconjunto ΩId ⊆ Ω de normas que hacen referencia al agente Id bajo los roles Roles. El predicado filter norms/4 recopila las normas que se aplican al agente Id (el agente externo del agente gobernador). En la línea 7, el agente gobernador, en posesión de las normas aplicables y otra información relevante, interactúa con el agente externo para decidir sobre un conjunto de Acciones que cumplen con las normas; estas acciones se utilizarán para actualizar (línea 8) el estado de ejecución global Ξ. En el proceso de actualizar el estado de ejecución, un nuevo conjunto de roles debe ser asignado al agente externo, representado como NewRoles. El agente gobernador sigue en bucle (línea 9) utilizando el identificador del agente externo y su nuevo conjunto de roles. 5.1 Uso de normas anotadas Ahora explicamos cómo los agentes conscientes de las normas utilizan normas anotadas. Lo hacemos a través de la definición de comprobación de predicado/2, que se cumple si su primer argumento, una acción candidata (en el formato de los elementos de Ξ de la Def. 2), está dentro de la influencia de una prohibición anotada ω, su segundo parámetro. La definición, como un programa lógico, se muestra en la Figura 6. Comprueba (línea 4) si el identificador del agente 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unificar(a, τ1, σ) ∧ unificar(r, τ2, σ) ∧ unificar( ¯ϕ, ϕ, σ)∧ 5 para todo(σ , (σc ∈ Σc, unificar(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figura 6: Comprobar si la Acción está dentro de la Influencia de la Norma Recortada y el rol de la acción se unifica con los términos apropiados τ1, τ2 de ω y que las acciones ¯ϕ, ϕ mismas se unifican, todo bajo el mismo unificador σ. Luego verifica (líneas 5-6) que σ no unifica con ninguno de los conjuntos de conflictos en Σc. Finalmente, en la línea 7 se comprueba si el tiempo de la acción está dentro de la influencia temporal normativa. La verificación de la no unificación de σ con ningún elemento de Σc merece una explicación. Los elementos de Σc son unificadores que indican qué valores no pueden tener las variables de la norma, es decir, representan vacíos en el alcance original de la influencia de las normas. El test equivale a preguntar si la acción está fuera de tales brechas, es decir, si la acción se encuentra dentro del alcance limitado de influencia de la norma. 6. En nuestra discusión anterior, se detectaron conflictos y inconsistencias normativas a través de una comparación directa de las fórmulas atómicas que representan la acción. Sin embargo, los conflictos e inconsistencias también pueden surgir indirectamente a través de las relaciones entre acciones. Por ejemplo, si p(X) equivale a q(X, X), entonces las normas PA:Rp(X) y FA:Rq(X, X) están en conflicto, ya que PA:Rp(X) se puede reescribir como PA:Rq(X, X) y, por lo tanto, tenemos tanto PA:Rq(X, X) como FA:Rq(X, X). En la discusión a continuación nos concentramos en el conflicto de normas, pero la inconsistencia normativa se puede abordar de manera similar, si cambiamos las modalidades deonticas de P por O. Las relaciones entre acciones dependen del dominio. Los diferentes dominios tienen formas distintas de relacionar sus acciones; los ingenieros construyen ontologías para representar dichas relaciones. Proponemos un medio simple para tener en cuenta tales relaciones y mostrar cómo estas pueden estar conectadas a los mecanismos introducidos anteriormente. En lugar de utilizar formalismos sofisticados para la construcción de ontologías, empleamos un conjunto de axiomas de dominio, definidos a continuación: DEF. 9. Los axiomas de dominio, denotados como Δ, son un conjunto finito y posiblemente vacío de fórmulas ϕ → (ϕ1 ∧ · · · ∧ ϕn) donde ϕ, ϕi, 1 ≤ i ≤ n, son fórmulas atómicas de primer orden. Nuestro ejemplo anterior puede ser capturado por Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}. Al representar y manipular explícitamente el conocimiento del dominio logramos generalidad: la misma maquinaria puede ser utilizada en diferentes dominios. Un conjunto de normas puede tener diferentes conflictos e inconsistencias, para distintos dominios de aplicación. 648 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 649 650 La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 651 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "multi-agent system": {
            "translated_key": "sistemas multiagente",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as <br>multi-agent system</br>s, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as <br>multi-agent system</br>s and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of <br>multi-agent system</br>s (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [
                "We focus on virtual organizations realised as <br>multi-agent system</br>s, in which human and software agents interact to achieve individual and global goals.",
                "VOs are realised as <br>multi-agent system</br>s and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of <br>multi-agent system</br>s (MASs) is a promising approach to achieving openness [2, 4, 5, 6]."
            ],
            "translated_annotated_samples": [
                "Nos enfocamos en organizaciones virtuales realizadas como <br>sistemas multiagente</br>, en las cuales agentes humanos y de software interactúan para lograr objetivos individuales y globales.",
                "Los VOs se realizan como <br>sistemas multiagente</br> y una característica muy deseable de tales sistemas es la apertura, mediante la cual los nuevos componentes diseñados por otras partes se integran sin problemas.",
                "El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de <br>sistemas multiagente</br> (MASs) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]."
            ],
            "translated_text": "Resolviendo conflictos e inconsistencias en organizaciones virtuales reguladas por normas, Wamberto Vasconcelos Dept. Las organizaciones virtuales regidas por normas definen, regulan y facilitan el intercambio coordinado de recursos y la resolución de problemas en sociedades de agentes. Con una explicación detallada de las normas, la apertura en las organizaciones virtuales se puede lograr: los nuevos componentes, diseñados por diversas partes, pueden ser fácilmente incorporados. Nos enfocamos en organizaciones virtuales realizadas como <br>sistemas multiagente</br>, en las cuales agentes humanos y de software interactúan para lograr objetivos individuales y globales. Sin embargo, cualquier descripción realista de las normas debería abordar su naturaleza dinámica: las normas cambiarán a medida que los agentes interactúen entre sí y con su entorno. Debido a la naturaleza cambiante de las normas o a las normas derivadas de diferentes organizaciones virtuales, habrá situaciones en las que una acción sea simultáneamente permitida y prohibida, es decir, surge un conflicto. Asimismo, habrá situaciones en las que una acción esté tanto obligada como prohibida, es decir, surge una inconsistencia. Introducimos un enfoque, basado en unificación de primer orden, para detectar y resolver tales conflictos e inconsistencias. En nuestra solución propuesta, anotamos una norma con el conjunto de valores que sus variables no deben tener para evitar un conflicto o una inconsistencia con otra norma. Nuestro enfoque acomoda de manera ordenada las interrelaciones dependientes del dominio entre acciones y los conflictos/inconsistencias indirectos que estos pueden causar. Más generalmente, podemos capturar una noción útil de delegación de acciones y normas entre agentes (y roles) y utilizarla para abordar conflictos/inconsistencias causados por la delegación de acciones. Ilustramos nuestro enfoque con un ejemplo de e-Ciencia en el que agentes respaldan servicios de Grid. Categorías y Descriptores de Asignaturas I.2.4 [Inteligencia Artificial]: Aplicaciones y Sistemas Expertos en Derecho; I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida-Sistemas Multiagente Términos Generales Algoritmos, Teoría 1. Las organizaciones virtuales (VOs) facilitan el intercambio coordinado de recursos y la resolución de problemas que involucran a diversas partes geográficamente remotas [9]. Los VOs definen y regulan las interacciones (facilitando así la coordinación) entre agentes de software y/o humanos que se comunican para lograr objetivos individuales y globales [16]. Los VOs se realizan como <br>sistemas multiagente</br> y una característica muy deseable de tales sistemas es la apertura, mediante la cual los nuevos componentes diseñados por otras partes se integran sin problemas. El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de <br>sistemas multiagente</br> (MASs) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]. Las normas regulan el comportamiento observable de agentes de software auto-interesados y heterogéneos, diseñados por diversas partes que pueden no confiar del todo entre sí [3, 24]. Sin embargo, los VOs regulados por normas pueden experimentar problemas cuando las normas asignadas a sus agentes están en conflicto (es decir, una acción está simultáneamente prohibida y permitida) o son inconsistentes (es decir, una acción está simultáneamente prohibida y obligada). Proponemos un medio para detectar y resolver automáticamente conflictos e inconsistencias en los VO regulados por normas. Hacemos uso de la unificación de términos de primer orden [8] para averiguar si y cómo se superponen las normas en su influencia (es decir, los agentes y los valores de los parámetros en las acciones de los agentes que las normas pueden afectar). Esto permite una solución detallada en la que se reduce la influencia de normas conflictivas o inconsistentes para conjuntos particulares de valores. Por ejemplo, las normas en las que el agente x tiene permitido enviar la oferta (ag1, 20) y el agente ag2 tiene prohibido enviar la oferta (y, z) (donde x, y, z son variables y ag1, ag2, 20 son constantes) están en conflicto porque sus agentes, acciones y términos (dentro de las acciones) se unifican. Resolvemos el conflicto anotando normas con conjuntos de valores que sus variables no pueden tener, reduciendo así su influencia. En nuestro ejemplo, el conflicto se evita si requerimos que la variable y no puede ser ag1 y que z no puede ser 20. Este documento está organizado de la siguiente manera. En la siguiente sección proporcionamos una definición minimalista para los VOs regulados por normas. En la sección 3 definimos formalmente los conflictos de normas, y explicamos cómo se detectan y resuelven. En la sección 4 describimos cómo la maquinaria de la sección anterior puede adaptarse para detectar y resolver inconsistencias normativas. En la sección 5 describimos cómo se utilizan nuestras normas limitadas en sociedades de agentes conscientes de las normas. En la sección 6 explicamos cómo nuestra maquinaria puede ser utilizada para detectar y resolver conflictos/inconsistencias indirectos, es decir, aquellos causados a través de relaciones entre acciones; extendemos y adaptamos la maquinaria para dar cabida a la delegación de normas. En la sección 7 ilustramos nuestro enfoque con un ejemplo de agentes de software regulados por normas que sirven a la Red. En la sección 8 revisamos el trabajo relacionado y en la sección 9 discutimos nuestras contribuciones y damos direcciones para trabajos futuros. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2. Las organizaciones virtuales permiten que diversas partes se unan para compartir recursos y participar en la resolución de problemas. Este paradigma ha encontrado fuertes aplicaciones en la orquestación de servicios web [14], la e-Ciencia [16] y la Red [9]. Los VOs, en su formulación más genérica, pueden ser vistos como artefactos de coordinación, permitiendo que agentes de software y humanos participen en formas sofisticadas de interacción. Representamos formalmente nuestros VO como máquinas de estados finitos en las que las acciones de los agentes individuales etiquetan los bordes entre estados discretos. Esto nos proporciona un denominador común más bajo: hay formas mucho más sofisticadas, convenientes y expresivas de representar las interacciones entre agentes (por ejemplo, AUML [19] e instituciones electrónicas [20], por nombrar algunas), pero para generalizar nuestro enfoque, asumiremos que cualquier formalismo de nivel superior puede ser mapeado a una máquina de estados finitos (posiblemente con cierta pérdida de expresividad). Mostramos en la Figura 1 un simple VO representado gráficamente como una máquina de estados finitos. Las etiquetas en los bordes con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figura 1: Ejemplo de VO como una Máquina de Estados Finitos que conectan los estados son fórmulas atómicas de primer orden, denotadas genéricamente como ϕ; representan acciones realizadas por agentes individuales. Definimos nuestras organizaciones virtuales de la siguiente manera: DEF. 1. Una organización virtual I es el triple S, s0, E, T donde S = {s1, . . . , sn} es un conjunto finito y no vacío de estados, s0 ∈ S es el estado inicial, E es un conjunto finito de aristas (s, s , ϕ), s, s ∈ S conectando s con s con una fórmula atómica de primer orden ϕ como etiqueta, y T ⊆ S es el conjunto de estados terminales. Ten en cuenta que los bordes están dirigidos, por lo que (s, t, ϕ) = (t, s, ϕ). La muestra VO de la Figura 1 se representa formalmente como I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2}. Suponemos una cuantificación existencial implícita en cualquier variable en ϕ, de modo que, por ejemplo, s(A, B) representa ∃A, B s(A, B). Los VO deben permitir dos tipos de no determinismo correspondientes a las elecciones que los agentes autónomos pueden hacer, a saber, i) el que surge cuando hay más de un borde que sale de un estado; y ii) el que surge de las variables en las fórmulas ϕ que etiquetan un borde, para las cuales el agente que realiza la acción instancia. Estos tipos de no determinismo son deseables ya que ayudan a definir mecanismos de coordinación genéricos y flexibles. Otro concepto importante que utilizamos son los roles de los agentes en las Organizaciones Virtuales (OV). Los roles, tal como se explotan en, por ejemplo, [18] y [20], nos ayudan a abstraernos de los agentes individuales y definir un patrón de comportamiento al cual cualquier agente que adopte un rol debería conformarse. Además, todos los agentes con el mismo rol tienen garantizados los mismos derechos, deberes y oportunidades. Haremos uso de dos conjuntos finitos y no vacíos, Agentes = {ag1, . . . , agn} y Roles = {r1, . . . , rm}, que representan, respectivamente, los conjuntos de identificadores de agentes y etiquetas de roles. Nos referimos genéricamente a los términos de primer orden, es decir, constantes, variables y funciones (anidadas) como τ. 2.1 Semántica de los VO La especificación de un VO como una máquina de estados finitos da lugar a un conjunto posiblemente infinito de historias de comportamientos computacionales, en las que se registran las acciones que etiquetan los caminos desde el estado inicial hasta un estado final. Aunque las acciones que conforman un VO se llevan a cabo de manera distribuida, proponemos un registro global explícito de todos los eventos. En la práctica, esto se puede lograr si requerimos que los agentes individuales declaren/informen las acciones que han llevado a cabo; esto asume agentes de confianza, naturalmente. Para registrar la autoría de la acción, anotamos las fórmulas con la identificación única de los agentes. Nuestra cuenta global explícita de todos los eventos es un conjunto de fórmulas atómicas fundamentales ϕ, es decir, solo permitimos que aparezcan constantes como términos de las fórmulas. Cada fórmula es un registro veraz de una acción especificada en el VO. Sin embargo, hay que tener en cuenta que en la especificación de VO no restringimos la sintaxis de las fórmulas: las variables pueden aparecer en ellas, y cuando un agente realiza una acción real, entonces cualquier variable de la acción especificada debe asignarse valores. Por lo tanto, definimos: DEF. 2. Un estado de ejecución global de un VO, denotado como Ξ, es un conjunto finito, posiblemente vacío, de tuplas a : r, ¯ϕ, t donde a ∈ Agentes es un identificador de agente, r ∈ Roles es una etiqueta de rol, ¯ϕ es una fórmula atómica de primer orden concreta, y t ∈ IN es una marca de tiempo. Por ejemplo, ag1:comprador, p(a, 34), 20 indica que el agente ag1 adoptando el rol de comprador realizó la acción p(a, 34) en el instante 20. Dado un VO I = S, s0, E, T, un estado de ejecución Ξ y un estado s ∈ S, podemos definir una función que obtiene un posible próximo estado de ejecución, es decir, h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, para un (s, s , ϕ) ∈ E. Dicha función h debe abordar los dos tipos de no determinismo mencionados anteriormente, así como la elección de los agentes potenciales que pueden llevar a cabo la acción y sus roles adoptados. También definimos una función para calcular el conjunto de todos los posibles estados de ejecución, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 VOs Regulados por Normas Abogamos por una separación de preocupaciones en la que la organización virtual se complementa con un conjunto explícito y separado de normas que regulan aún más el comportamiento de los agentes mientras participan en la puesta en marcha de una organización. La libertad de elección dada a los agentes (capturada a través del no determinismo de los VO, explicado anteriormente) debe ser limitada en algunas circunstancias. Por ejemplo, podríamos necesitar describir que quien llevó a cabo ϕ está obligado a llevar a cabo ϕ, de modo que si hay un punto de elección en el que ϕ aparece como etiqueta de un borde, entonces ese borde debería ser seguido. En lugar de incorporar aspectos normativos en el diseño de los agentes (por ejemplo, codificando explícitamente aspectos normativos en el comportamiento de los agentes) o en el propio VO (por ejemplo, abordando excepciones y comportamientos desviados en el mecanismo en sí), adoptamos la perspectiva de que un VO debería complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes mientras participan en la puesta en marcha de la organización. Esta separación de preocupaciones debería facilitar el diseño de los Sistemas Multiagente (MAS); sin embargo, los diferentes componentes (VOs y normas) deben unirse en algún momento del proceso de diseño. Nuestras normas están definidas de la siguiente manera: DEF. 3. Una norma, genéricamente referida como ν, es cualquier construcción de la forma Oτ:τ ϕ, Pτ:τ ϕ, o Fτ:τ ϕ, donde τ, τ son variables o constantes y ϕ es una fórmula atómica de primer orden. Adoptamos la notación de [18]: Oτ:τ ϕ representa una obligación para el agente τ que asume el rol τ de llevar a cabo ϕ; recordamos que τ, τ son variables, constantes y funciones aplicadas a términos (anidados). Pτ:τ ϕ y Fτ:τ ϕ representan, respectivamente, un permiso y una prohibición para el agente τ, desempeñando el rol τ para lograr ϕ. Supondremos que los tipos se utilizan para manipular adecuadamente variables de identificadores de agentes y etiquetas de roles. Proponemos representar formalmente las posiciones normativas de todos los agentes que llevan a cabo un VO. Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 Agentes no confiables pueden ser acomodados en esta propuesta, si asociamos a cada uno de ellos un agente gobernador que supervise las acciones del agente externo e informe sobre ellas. Este enfoque fue introducido en [12] y se explica en la sección 5. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 645 DEF. 4. Un estado normativo global Ω es un conjunto finito y posiblemente vacío de tuplas ω = ν, td, ta, te donde ν es una norma como se mencionó anteriormente y td, ta, te ∈ IN son, respectivamente, el momento en que ν fue declarada (introducida), cuando ν se vuelve activa y cuando ν expira, td ≤ ta < te. Vale la pena notar que no requerimos que las fórmulas atómicas de las normas sean concretas: podrían contener variables. Suponemos una cuantificación universal implícita en las variables A, R de las normas XA:Rϕ (para las modalidades deónticas X ∈ {O, P, F}), de modo que, por ejemplo, PA:Rp(X, b, c) significa ∀A ∈ Agentes.∀R ∈ Roles.∃X.PA:Rp(X, b, c). También nos referimos a las tuplas en Ω como normas. Los estados normativos globales complementan los estados de ejecución de los VO con información sobre las posiciones normativas de los agentes individuales. Podemos relacionarlos a través de una función para obtener un estado de ejecución siguiente de VOs regulado por una norma, es decir, g(I, Ξ, s, Ω, t) = Ξ, donde t representa el tiempo de la actualización. Por ejemplo, podríamos querer que todas las acciones prohibidas se excluyan del próximo estado de ejecución, es decir, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E y Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te. Podríamos desear igualmente que solo se elijan acciones permitidas para el próximo estado de ejecución. No legislamos, ni recomendamos de hecho, ninguna forma particular de regular las ONG. Sin embargo, ofrecemos bases simples para permitir la implementación de políticas arbitrarias. Del mismo modo que un estado normativo es útil para obtener el siguiente estado de ejecución de un VO, podemos usar un estado de ejecución para actualizar un estado normativo. Por ejemplo, podríamos querer eliminar cualquier obligación específica de un agente y rol, que ha sido llevada a cabo por ese agente y rol específico, es decir, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}. La gestión (es decir, la creación y actualización) de estados normativos globales es un área de investigación interesante. Se reporta un enfoque simple pero útil en [11]: las reglas de producción representan genéricamente cómo se deben actualizar las normas para reflejar lo que los agentes han hecho y qué normas se mantienen actualmente. En este documento nuestro enfoque no es proponer cómo deberían ser gestionadas las Ωs; asumimos que existe algún mecanismo que se encarga de eso. 3. CONFLICTOS NORMATIVOS Ahora definimos medios para detectar y resolver conflictos e inconsistencias normativas. Hacemos uso del concepto de unificación [1, 8] de términos de primer orden τ, es decir, constantes, variables o funciones (anidadas) con términos como parámetros. Inicialmente definimos las sustituciones: DEF. 5. Una sustitución σ es un conjunto finito y posiblemente vacío de pares x/τ, donde x es una variable y τ es un término. Definimos la aplicación de una sustitución de la siguiente manera: 1. c · σ = c para una constante c 2. x · σ = τ · σ si x/τ ∈ σ; de lo contrario, x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Donde X se refiere genéricamente a cualquiera de las modalidades deónticas O, P, F. La unificación entre dos términos τ, τ consiste en encontrar una sustitución σ (también llamada, en este contexto, el unificador de τ y τ) tal que τ · σ = τ · σ. Se han propuesto muchos algoritmos para resolver el problema de unificación, un tema fundamental en la demostración automatizada de teoremas [8], y trabajos más recientes ofrecen formas muy eficientes de obtener unificadores. Haremos uso de la siguiente definición: DEF. 6. La relación unify(τ, τ , σ) se cumple si y solo si existe un σ posiblemente vacío tal que τ · σ = τ · σ. También definimos la unificación de fórmulas atómicas como unificar(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) lo cual se cumple si y solo si τi · σ = τi · σ, 0 ≤ i ≤ n. La relación de unificación verifica si una sustitución σ es realmente un unificador para τ, τ pero también puede usarse para encontrar dicho σ. Suponemos que unificar es una implementación adecuada de un algoritmo de unificación que i) siempre termina (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene una complejidad computacional lineal. 3.1 Detección de Conflictos Un conflicto normativo surge cuando una fórmula atómica que etiqueta un borde en el VO, es decir, una acción, está simultáneamente permitida y prohibida [13]. En este caso, ambas normas están en conflicto con respecto a sus agentes, roles y parámetros (términos) de acciones específicas. Proponemos utilizar la unificación para detectar cuándo se superponen una prohibición y un permiso y emplear el unificador para resolver el conflicto. Por ejemplo, PA:Rp(c, X) y Fa:bp(Y, Z) están en conflicto ya que se unifican bajo σ = {A/a, R/b, Y/c, X/d}. Si, sin embargo, las variables en Fa:bp(Y, Z) no obtienen los valores en σ, entonces no habrá conflictos. Por lo tanto, proponemos anotar las prohibiciones en Ω con unificadores, llamados conjuntos de conflictos, y utilizar estas anotaciones para determinar qué variables no pueden ser los variables de la prohibición en futuras unificaciones con el fin de evitar un conflicto. Cada prohibición se considera a partir de ahora como teniendo tal anotación, denotada como (Fτ1:τ2 ϕ) Σc, td, ta, te. Inicialmente, esta anotación está vacía. Proponemos reducir la influencia de las prohibiciones, dando así a los agentes más opciones en las acciones que pueden realizar. Un enfoque similar podría ser adoptado mediante la restricción de permisos, limitando así las acciones disponibles para los agentes. Cada una de estas políticas es posible: no legislamos sobre ninguna de ellas ni damos preferencia sobre ninguna. En este documento estamos interesados en formalizar dichas políticas dentro de un marco matemático simple. Una prohibición puede estar en conflicto con varias autorizaciones en Ω. Por lo tanto, debemos encontrar el conjunto máximo de pares conflictivos de permisos y prohibiciones en Ω, realizando una inspección por pares. Esto requiere identificar la sustitución entre dos pares de normas que caracteriza un conflicto. Esto se captura formalmente mediante la siguiente definición: DEF. 7. Surge un conflicto entre dos tuplas ω, ω ∈ Ω bajo una sustitución σ, denotado como cflct(ω, ω , σ), si se cumplen las siguientes condiciones: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unificar(τ1, τ1, σ), unificar(τ2, τ2, σ), y unificar(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| Es decir, un conflicto de prohibición y permiso (condición 1) si, y solo si, los agentes y roles a los que se aplican y sus acciones, respectivamente, se unifican bajo σ (condición 2) y sus períodos de activación se superponen (condición 3). La sustitución σ, el conjunto de conflictos, unifica a los agentes, roles y fórmulas atómicas de un permiso y una prohibición. La anotación Σc no juega ningún papel al detectar conflictos, pero, como mostramos a continuación, debemos actualizar la anotación para reflejar nuevas restricciones y resolver conflictos. Por ejemplo, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) se cumple. Definimos a continuación cómo obtenemos el conjunto de normas en conflicto de un estado normativo Ω: DEF. 8. El conjunto finito, posiblemente vacío, de normas en conflicto de un estado normativo Ω, denotado como CFLS(Ω), se define como CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Resolución de Conflictos Una forma detallada de resolver conflictos puede hacerse a través de la unificación. Detectamos la superposición de las influencias normativas, es decir, cómo afectan los comportamientos de los agentes en la VO, y limitamos el 646 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) influencia de la prohibición. Ilustramos con diagramas de Venn en la Figura 2 la superposición de las influencias normativas (izquierda) que caracterizan un conflicto y la reducción necesaria para resolver el conflicto (derecha). La ilustración muestra el espacio de valores posibles para p(X, Y) y p(X, Y) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y) Fa:bp(Y, Z) PA:Rp(c, X) Figura 2: Superposición de Influencia (Izquierda) y Restricción (Derecha) dos porciones de este espacio que definen el alcance de influencia de las normas PA:Rp(c, X) y Fa:bp(Y, Z). El alcance de estas normas se superponen, ilustrado por la intersección de las casillas a la izquierda, en acciones con valores, por ejemplo, a, b, p(c, 2), . . . , a, b, p(c, n). La reducción de la prohibición elimina la intersección: traslada el alcance de la influencia de la norma fuera de la influencia del permiso. Si hubiera múltiples superposiciones entre una prohibición y varias autorizaciones, lo cual es probable que ocurra, entonces la prohibición será restringida múltiples veces para desplazar el alcance de la norma y evitar todas las intersecciones. El algoritmo mostrado en la Figura 3 describe cómo obtenemos un conjunto de normas sin conflictos. Mapea un conjunto existente Ω posiblemente con el algoritmo de resolución de conflictos conflictResolution(Ω, Ω) entrada Ω salida Ω comenzar Ω := Ω para cada ω ∈ Ω tal que ω = (Fa:r ¯ϕ) Σc, td, ta, te hacer si ω, ω, σ ∈ CFLS(Ω) entonces Ω := Ω − {ω} fin si fin para para cada ω ∈ Ω tal que ω = (Fτ1:τ2 ϕ) Σc, td, ta, te hacer ΣMAX c := [ ω,ω,σc ∈CFLS(Ω) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c), td, ta, te } fin para fin Figura 3: Algoritmo para Resolver Conflictos en un Conjunto de Normas mapeando normas a un nuevo conjunto Ω en el que los conflictos (si los hay) están resueltos. El algoritmo forma Ω como un conjunto que es libre de conflictos, lo que significa que las prohibiciones están anotadas con un conjunto de conflictos que indica qué asignaciones para variables deben evitarse. Inicialmente, Ω se establece como Ω. El algoritmo opera en dos etapas. En la primera etapa (primera para cada bucle), eliminamos todas las prohibiciones conflictivas ω = (Fa:r ¯ϕ) Σc, td, ta, te con pares de agente/rol y fórmulas concretas en conflicto a : r y ¯ϕ: la única forma de resolver conflictos derivados de tales prohibiciones es eliminarlas por completo, ya que no podemos restringir una norma completamente concreta. En la segunda etapa (segunda para cada bucle), se examinan las prohibiciones restantes en Ω: el conjunto CFLS(Ω) contiene todos los conflictos entre permisos y las prohibiciones restantes en Ω representadas como tuplas ω, ω, σc, con σc representando el conjunto de conflictos. Dado que una prohibición puede tener conflictos con varias autorizaciones, el conjunto CFLS(Ω) puede contener más de una tupla para cada prohibición. Para proporcionar un Ω que refleje todos estos conflictos para una prohibición específica, debemos formar ΣMAX c que contenga todos los conjuntos de conflictos σc para una prohibición dada ω. El conjunto maximal se utiliza para actualizar la anotación de la prohibición. Es importante explicar la necesidad de actualizar el conjunto de prohibiciones del conflicto. Los estados normativos cambian como resultado de las acciones de los agentes [11]: las permisiones, prohibiciones y obligaciones existentes son revocadas y/o se establecen nuevas como resultado de las interacciones de los agentes con el entorno y otros agentes. Cada vez que se añadan nuevas normas, debemos verificar nuevos conflictos e inconsistencias. Si solo aplicamos nuestro algoritmo a un par que consiste en una norma antigua y una nueva, entonces se puede ahorrar algo de reprocesamiento de pares de normas antiguas (que ya fueron tratadas anteriormente). La eliminación de normas del conjunto Ω se aborda de manera eficiente: cada permiso que se vaya a eliminar debe ser verificado primero en busca de conflictos con cualquier prohibición existente (se puede evitar el reprocesamiento si registramos el conflicto en lugar de detectarlo nuevamente). Si hay un conflicto, entonces el conjunto de conflictos habrá sido registrado en la anotación de prohibiciones; este conjunto de conflictos es eliminado de la anotación de prohibiciones. La eliminación de obligaciones sigue un proceso similar. Las prohibiciones se eliminan sin necesidad de considerar sus relaciones con otras normas. Nuestro algoritmo es correcto en el sentido de que proporciona, para un Ω dado, un nuevo Ω en el que i) se han eliminado todas las prohibiciones fundamentales que entran en conflicto con los permisos; y ii) todas las prohibiciones anotadas restantes (Fτ:τ ¯ϕ) Σc, td, ta, te no se unificarán con ninguno de los permisos en Ω, siempre que el unificador no aparezca en Σc. El primer requisito se aborda con el primer bucle for each, que hace precisamente esto: elimina todas las prohibiciones de base que se unifican con una obligación. El segundo requisito se aborda mediante el segundo bucle for each: cada prohibición tiene su anotación Σc agregada con ΣMAX c, acomodando así los unificadores de todas las autorizaciones que se unifican con la prohibición. Es fácil ver que el algoritmo siempre termina: cada uno de sus dos bucles recorre un conjunto finito, procesando un elemento a la vez. El conjunto CFLS(Ω) se calcula en un número finito de pasos, al igual que las operaciones de conjunto realizadas dentro de cada bucle. El algoritmo tiene, sin embargo, complejidad exponencial, ya que el cálculo de CFLS(Ω) requiere una comparación de pares de todos los elementos en Ω. Ilustramos nuestro algoritmo con el siguiente ejemplo. Que exista el siguiente estado normativo global Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:rp(a, b), 3, 4, 8, (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9, ff. El primer bucle elimina la prohibición terrestre, obteniendo así el siguiente Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, Pe:fp(g, h), 3, 4, 9, ff. Luego tenemos el siguiente conjunto de normas en conflicto CFLS(Ω): 8 < : * (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, {A/a, R/b, X/c, Y/d} +, * (FA:Rp(X, Y)) {}, 2, 2, 9, Pe:fp(g, h), 3, 4, 9, {A/e, R/f, X/g, Y/h} +9 =; Para cada prohibición ω ∈ Ω recuperamos todos los elementos de w, w, σ ∈ CFLS(Ω) y recopilamos sus σ en ΣMAX c. El Ω final es así: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; El conjunto anotado de conjuntos de conflictos debe entenderse como un registro de unificaciones pasadas, que informa cómo deben utilizarse las prohibiciones en el futuro para evitar conflictos con permisos. Mostramos en la Sección 5.1 cómo los agentes conscientes de las normas utilizan las anotaciones. 4. INCONSISTENCIAS NORMATIVAS Si se puede encontrar una sustitución σ que unifique una obligación y una prohibición, entonces se produce una situación de inconsistencia normativa [13]. La obligación exige que un agente realice una acción que está prohibida. Podemos reutilizar la maquinaria, presentada anteriormente para resolver conflictos entre permisos y prohibiciones, con el fin de a) detectar y b) resolver tales inconsistencias. Con la Definición 7, nosotros 3 El esfuerzo combinatorio ya no es necesario si en su lugar mantenemos un conjunto de normas sin conflictos: cada vez que se introduce una nueva norma, la comparamos con las existentes, haciendo así que el proceso de mantenimiento sea de complejidad lineal. El Sexto Internacional. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 647 expresa la naturaleza de un conflicto entre una prohibición y un permiso. De igual manera, una situación de inconsistencia puede ser definida reutilizando esta definición y reemplazando la modalidad deontica P con O. Podemos reutilizar la maquinaria para la resolución de conflictos, desarrollada previamente, para resolver inconsistencias. El algoritmo de resolución de conflictos se puede aplicar sin cambios para acumular un conjunto de conflictos máximo ΣMAX c para cada prohibición en Ω que se unifica con las obligaciones. 5. Sociedades de agentes conscientes de normas. Ahora describimos cómo nuestros VO regulados por normas dan lugar a sociedades de agentes conscientes de normas. Abordamos Sistemas Multiagentes abiertos y heterogéneos: acomodamos agentes externos proporcionándoles a cada uno de ellos un agente gobernador correspondiente [12]. Este es un tipo de chaperón que interactúa con un agente externo, y observa e informa sobre su comportamiento. Mostramos nuestra arquitectura en la Figura 4 a continuación: un número de Agentes Gobernadores Externos Espacio de Tuplas de Agentes ag1 £ ¢ ¡ gov1 ⇐⇒ . . . . . . . . . . . . Yo, s, Ξ, Ω Yo, s, Ξ, Ω · · · agn £ ¢ ¡ govn ⇐⇒ Figura 4: Arquitectura para Sociedades de Agentes Conscientes de Normas de agentes externos interactúan (indicado por el ) con sus agentes gobernadores correspondientes. Los agentes del gobernador tienen acceso a la descripción del VO, el estado actual de la promulgación del VO, el estado de ejecución global Ξ y el estado normativo global Ω. Los agentes del gobernador pueden escribir y leer de (indicado por el ⇐⇒) un espacio de memoria compartida (por ejemplo, una solución tipo pizarra implementada como un espacio de tuplas), actualizando la configuración global (indicada por el ) para reflejar la dinámica de la ejecución del VO. Los agentes gubernamentales son necesarios porque no podemos anticipar ni legislar sobre el diseño o comportamiento de agentes externos. A continuación, representamos cómo los pares de gobernador/agentes externos trabajan juntos: cualquier elección no determinista en el VO es decidida por el agente externo; cualquier aspecto normativo es considerado por el agente gobernador. El agente gobernador representa el agente externo dentro del VO. Como tal, tiene el identificador único del agente externo. El agente gobernador lleva un registro de todos los roles que el agente externo está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un rol simultáneamente. Definimos en la Figura 5 cómo funcionan los agentes gobernadores: utilizamos un programa lógico con este propósito. Mostramos 1 main(Id, Roles) ← 2 obtener tupla( I, s, Ξ, Ω )∧ 3 terminar(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 obtener tupla( I, s, Ξ, Ω )∧ 6 filtrar normas(Id, Roles, Ω, ΩId )∧ 7 discutir normas(Id, Roles, I, s, Ξ, ΩId , Acciones)∧ 8 actualizar tupla(Roles, Acciones, NuevosRoles)∧ 9 main(Id, NuevosRoles) Figura 5: Agente Gobernador como un Programa Lógico las líneas de nuestras cláusulas numeradas 1-9. La primera cláusula (líneas 1-3) describe la condición de terminación: get tuple/1 (línea 2) recupera I, s, Ξ, Ω del espacio de tuplas compartido y terminate/4 verifica si la ejecución actual de VO (registrada en Ξ) ha llegado a su fin. El equipo de agentes del gobernador sincroniza su acceso al espacio de tuplas [12], asegurando así que cada uno tenga la oportunidad de funcionar. La segunda cláusula (líneas 4-9) representa un bucle genérico cuando la condición de terminación de la primera cláusula no se cumple. En este caso, la tupla se recupera nuevamente (línea 5) y el agente gobernador procede (línea 6) a analizar el estado normativo global actual Ω con el objetivo de obtener el subconjunto ΩId ⊆ Ω de normas que hacen referencia al agente Id bajo los roles Roles. El predicado filter norms/4 recopila las normas que se aplican al agente Id (el agente externo del agente gobernador). En la línea 7, el agente gobernador, en posesión de las normas aplicables y otra información relevante, interactúa con el agente externo para decidir sobre un conjunto de Acciones que cumplen con las normas; estas acciones se utilizarán para actualizar (línea 8) el estado de ejecución global Ξ. En el proceso de actualizar el estado de ejecución, un nuevo conjunto de roles debe ser asignado al agente externo, representado como NewRoles. El agente gobernador sigue en bucle (línea 9) utilizando el identificador del agente externo y su nuevo conjunto de roles. 5.1 Uso de normas anotadas Ahora explicamos cómo los agentes conscientes de las normas utilizan normas anotadas. Lo hacemos a través de la definición de comprobación de predicado/2, que se cumple si su primer argumento, una acción candidata (en el formato de los elementos de Ξ de la Def. 2), está dentro de la influencia de una prohibición anotada ω, su segundo parámetro. La definición, como un programa lógico, se muestra en la Figura 6. Comprueba (línea 4) si el identificador del agente 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unificar(a, τ1, σ) ∧ unificar(r, τ2, σ) ∧ unificar( ¯ϕ, ϕ, σ)∧ 5 para todo(σ , (σc ∈ Σc, unificar(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figura 6: Comprobar si la Acción está dentro de la Influencia de la Norma Recortada y el rol de la acción se unifica con los términos apropiados τ1, τ2 de ω y que las acciones ¯ϕ, ϕ mismas se unifican, todo bajo el mismo unificador σ. Luego verifica (líneas 5-6) que σ no unifica con ninguno de los conjuntos de conflictos en Σc. Finalmente, en la línea 7 se comprueba si el tiempo de la acción está dentro de la influencia temporal normativa. La verificación de la no unificación de σ con ningún elemento de Σc merece una explicación. Los elementos de Σc son unificadores que indican qué valores no pueden tener las variables de la norma, es decir, representan vacíos en el alcance original de la influencia de las normas. El test equivale a preguntar si la acción está fuera de tales brechas, es decir, si la acción se encuentra dentro del alcance limitado de influencia de la norma. 6. En nuestra discusión anterior, se detectaron conflictos y inconsistencias normativas a través de una comparación directa de las fórmulas atómicas que representan la acción. Sin embargo, los conflictos e inconsistencias también pueden surgir indirectamente a través de las relaciones entre acciones. Por ejemplo, si p(X) equivale a q(X, X), entonces las normas PA:Rp(X) y FA:Rq(X, X) están en conflicto, ya que PA:Rp(X) se puede reescribir como PA:Rq(X, X) y, por lo tanto, tenemos tanto PA:Rq(X, X) como FA:Rq(X, X). En la discusión a continuación nos concentramos en el conflicto de normas, pero la inconsistencia normativa se puede abordar de manera similar, si cambiamos las modalidades deonticas de P por O. Las relaciones entre acciones dependen del dominio. Los diferentes dominios tienen formas distintas de relacionar sus acciones; los ingenieros construyen ontologías para representar dichas relaciones. Proponemos un medio simple para tener en cuenta tales relaciones y mostrar cómo estas pueden estar conectadas a los mecanismos introducidos anteriormente. En lugar de utilizar formalismos sofisticados para la construcción de ontologías, empleamos un conjunto de axiomas de dominio, definidos a continuación: DEF. 9. Los axiomas de dominio, denotados como Δ, son un conjunto finito y posiblemente vacío de fórmulas ϕ → (ϕ1 ∧ · · · ∧ ϕn) donde ϕ, ϕi, 1 ≤ i ≤ n, son fórmulas atómicas de primer orden. Nuestro ejemplo anterior puede ser capturado por Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}. Al representar y manipular explícitamente el conocimiento del dominio logramos generalidad: la misma maquinaria puede ser utilizada en diferentes dominios. Un conjunto de normas puede tener diferentes conflictos e inconsistencias, para distintos dominios de aplicación. 648 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 649 650 La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 651 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "norm-regulated vo": {
            "translated_key": "vo regulado por normas",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "agent": {
            "translated_key": "agentes",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-<br>agent</br> systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-<br>agent</br> (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-<br>agent</br> systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-<br>agent</br> systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-<br>agent</br> systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms <br>agent</br> x is permitted to send bid(ag1, 20) and <br>agent</br> ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware <br>agent</br> societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the <br>agent</br> carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any <br>agent</br> that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of <br>agent</br> identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an <br>agent</br> performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an <br>agent</br> identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that <br>agent</br> ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on <br>agent</br> τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on <br>agent</br> τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for <br>agent</br> identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor <br>agent</br> which supervises the actions of the external <br>agent</br> and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an <br>agent</br> and role, which has been carried out by that specific <br>agent</br> and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground <br>agent</br>/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an <br>agent</br> performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE <br>agent</br> SOCIETIES We now describe how our norm-regulated VOs give rise to normaware <br>agent</br> societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor <br>agent</br> [12].",
                "This is a kind of chaperon that interacts with an external <br>agent</br>, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware <br>agent</br> Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external <br>agent</br>; any normative aspects are considered by the governor <br>agent</br>.",
                "The governor <br>agent</br> represents the external <br>agent</br> within the VO.",
                "As such, it has the unique identifier of the external <br>agent</br>.",
                "The governor <br>agent</br> keeps an account of all roles the external <br>agent</br> is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor <br>agent</br> as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor <br>agent</br> proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to <br>agent</br> Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to <br>agent</br> Id (the governor agents external <br>agent</br>).",
                "In line 7 the governor <br>agent</br>, in possession of the applicable norms as well as other relevant information, interacts with the external <br>agent</br> to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external <br>agent</br>, represented as NewRoles.",
                "The governor <br>agent</br> keeps looping (line 9) using the identifier for the external <br>agent</br> and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the <br>agent</br> identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [
                "We focus on virtual organizations realised as multi-<br>agent</br> systems, in which human and software agents interact to achieve individual and global goals.",
                "More generally, we can capture a useful notion of inter-<br>agent</br> (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-<br>agent</br> systems General Terms Algorithms, Theory 1.",
                "VOs are realised as multi-<br>agent</br> systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-<br>agent</br> systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6]."
            ],
            "translated_annotated_samples": [
                "Nos enfocamos en organizaciones virtuales realizadas como sistemas multiagente, en las cuales <br>agentes</br> humanos y de software interactúan para lograr objetivos individuales y globales.",
                "Más generalmente, podemos capturar una noción útil de delegación de acciones y normas entre <br>agentes</br> (y roles) y utilizarla para abordar conflictos/inconsistencias causados por la delegación de acciones.",
                "Categorías y Descriptores de Asignaturas I.2.4 [Inteligencia Artificial]: Aplicaciones y Sistemas Expertos en Derecho; I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida-<br>Sistemas Multiagente</br> Términos Generales Algoritmos, Teoría 1.",
                "Los VOs se realizan como sistemas multi<br>agente</br> y una característica muy deseable de tales sistemas es la apertura, mediante la cual los nuevos componentes diseñados por otras partes se integran sin problemas.",
                "El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de sistemas multi<br>agente</br> (MASs) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]."
            ],
            "translated_text": "Resolviendo conflictos e inconsistencias en organizaciones virtuales reguladas por normas, Wamberto Vasconcelos Dept. Las organizaciones virtuales regidas por normas definen, regulan y facilitan el intercambio coordinado de recursos y la resolución de problemas en sociedades de agentes. Con una explicación detallada de las normas, la apertura en las organizaciones virtuales se puede lograr: los nuevos componentes, diseñados por diversas partes, pueden ser fácilmente incorporados. Nos enfocamos en organizaciones virtuales realizadas como sistemas multiagente, en las cuales <br>agentes</br> humanos y de software interactúan para lograr objetivos individuales y globales. Sin embargo, cualquier descripción realista de las normas debería abordar su naturaleza dinámica: las normas cambiarán a medida que los agentes interactúen entre sí y con su entorno. Debido a la naturaleza cambiante de las normas o a las normas derivadas de diferentes organizaciones virtuales, habrá situaciones en las que una acción sea simultáneamente permitida y prohibida, es decir, surge un conflicto. Asimismo, habrá situaciones en las que una acción esté tanto obligada como prohibida, es decir, surge una inconsistencia. Introducimos un enfoque, basado en unificación de primer orden, para detectar y resolver tales conflictos e inconsistencias. En nuestra solución propuesta, anotamos una norma con el conjunto de valores que sus variables no deben tener para evitar un conflicto o una inconsistencia con otra norma. Nuestro enfoque acomoda de manera ordenada las interrelaciones dependientes del dominio entre acciones y los conflictos/inconsistencias indirectos que estos pueden causar. Más generalmente, podemos capturar una noción útil de delegación de acciones y normas entre <br>agentes</br> (y roles) y utilizarla para abordar conflictos/inconsistencias causados por la delegación de acciones. Ilustramos nuestro enfoque con un ejemplo de e-Ciencia en el que agentes respaldan servicios de Grid. Categorías y Descriptores de Asignaturas I.2.4 [Inteligencia Artificial]: Aplicaciones y Sistemas Expertos en Derecho; I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida-<br>Sistemas Multiagente</br> Términos Generales Algoritmos, Teoría 1. Las organizaciones virtuales (VOs) facilitan el intercambio coordinado de recursos y la resolución de problemas que involucran a diversas partes geográficamente remotas [9]. Los VOs definen y regulan las interacciones (facilitando así la coordinación) entre agentes de software y/o humanos que se comunican para lograr objetivos individuales y globales [16]. Los VOs se realizan como sistemas multi<br>agente</br> y una característica muy deseable de tales sistemas es la apertura, mediante la cual los nuevos componentes diseñados por otras partes se integran sin problemas. El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de sistemas multi<br>agente</br> (MASs) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]. ",
            "candidates": [],
            "error": [
                [
                    "agentes",
                    "agentes",
                    "Sistemas Multiagente",
                    "agente",
                    "agente"
                ]
            ]
        },
        "norm conflict": {
            "translated_key": "conflicto normativo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A <br>norm conflict</br> arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, <br>norm conflict</br> and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on <br>norm conflict</br>, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A <br>norm conflict</br> arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, <br>norm conflict</br> and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "In the discussion below we concentrate on <br>norm conflict</br>, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O."
            ],
            "translated_annotated_samples": [
                "Suponemos que unificar es una implementación adecuada de un algoritmo de unificación que i) siempre termina (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene una complejidad computacional lineal. 3.1 Detección de Conflictos Un <br>conflicto normativo</br> surge cuando una fórmula atómica que etiqueta un borde en el VO, es decir, una acción, está simultáneamente permitida y prohibida [13].",
                "En nuestra discusión anterior, se detectaron conflictos y inconsistencias normativas a través de una comparación directa de las fórmulas atómicas que representan la acción.",
                "En la discusión a continuación nos concentramos en el <br>conflicto de normas</br>, pero la inconsistencia normativa se puede abordar de manera similar, si cambiamos las modalidades deonticas de P por O."
            ],
            "translated_text": "Resolviendo conflictos e inconsistencias en organizaciones virtuales reguladas por normas, Wamberto Vasconcelos Dept. Las organizaciones virtuales regidas por normas definen, regulan y facilitan el intercambio coordinado de recursos y la resolución de problemas en sociedades de agentes. Con una explicación detallada de las normas, la apertura en las organizaciones virtuales se puede lograr: los nuevos componentes, diseñados por diversas partes, pueden ser fácilmente incorporados. Nos enfocamos en organizaciones virtuales realizadas como sistemas multiagente, en las cuales agentes humanos y de software interactúan para lograr objetivos individuales y globales. Sin embargo, cualquier descripción realista de las normas debería abordar su naturaleza dinámica: las normas cambiarán a medida que los agentes interactúen entre sí y con su entorno. Debido a la naturaleza cambiante de las normas o a las normas derivadas de diferentes organizaciones virtuales, habrá situaciones en las que una acción sea simultáneamente permitida y prohibida, es decir, surge un conflicto. Asimismo, habrá situaciones en las que una acción esté tanto obligada como prohibida, es decir, surge una inconsistencia. Introducimos un enfoque, basado en unificación de primer orden, para detectar y resolver tales conflictos e inconsistencias. En nuestra solución propuesta, anotamos una norma con el conjunto de valores que sus variables no deben tener para evitar un conflicto o una inconsistencia con otra norma. Nuestro enfoque acomoda de manera ordenada las interrelaciones dependientes del dominio entre acciones y los conflictos/inconsistencias indirectos que estos pueden causar. Más generalmente, podemos capturar una noción útil de delegación de acciones y normas entre agentes (y roles) y utilizarla para abordar conflictos/inconsistencias causados por la delegación de acciones. Ilustramos nuestro enfoque con un ejemplo de e-Ciencia en el que agentes respaldan servicios de Grid. Categorías y Descriptores de Asignaturas I.2.4 [Inteligencia Artificial]: Aplicaciones y Sistemas Expertos en Derecho; I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida-Sistemas Multiagente Términos Generales Algoritmos, Teoría 1. Las organizaciones virtuales (VOs) facilitan el intercambio coordinado de recursos y la resolución de problemas que involucran a diversas partes geográficamente remotas [9]. Los VOs definen y regulan las interacciones (facilitando así la coordinación) entre agentes de software y/o humanos que se comunican para lograr objetivos individuales y globales [16]. Los VOs se realizan como sistemas multiagente y una característica muy deseable de tales sistemas es la apertura, mediante la cual los nuevos componentes diseñados por otras partes se integran sin problemas. El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de sistemas multiagente (MASs) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]. Las normas regulan el comportamiento observable de agentes de software auto-interesados y heterogéneos, diseñados por diversas partes que pueden no confiar del todo entre sí [3, 24]. Sin embargo, los VOs regulados por normas pueden experimentar problemas cuando las normas asignadas a sus agentes están en conflicto (es decir, una acción está simultáneamente prohibida y permitida) o son inconsistentes (es decir, una acción está simultáneamente prohibida y obligada). Proponemos un medio para detectar y resolver automáticamente conflictos e inconsistencias en los VO regulados por normas. Hacemos uso de la unificación de términos de primer orden [8] para averiguar si y cómo se superponen las normas en su influencia (es decir, los agentes y los valores de los parámetros en las acciones de los agentes que las normas pueden afectar). Esto permite una solución detallada en la que se reduce la influencia de normas conflictivas o inconsistentes para conjuntos particulares de valores. Por ejemplo, las normas en las que el agente x tiene permitido enviar la oferta (ag1, 20) y el agente ag2 tiene prohibido enviar la oferta (y, z) (donde x, y, z son variables y ag1, ag2, 20 son constantes) están en conflicto porque sus agentes, acciones y términos (dentro de las acciones) se unifican. Resolvemos el conflicto anotando normas con conjuntos de valores que sus variables no pueden tener, reduciendo así su influencia. En nuestro ejemplo, el conflicto se evita si requerimos que la variable y no puede ser ag1 y que z no puede ser 20. Este documento está organizado de la siguiente manera. En la siguiente sección proporcionamos una definición minimalista para los VOs regulados por normas. En la sección 3 definimos formalmente los conflictos de normas, y explicamos cómo se detectan y resuelven. En la sección 4 describimos cómo la maquinaria de la sección anterior puede adaptarse para detectar y resolver inconsistencias normativas. En la sección 5 describimos cómo se utilizan nuestras normas limitadas en sociedades de agentes conscientes de las normas. En la sección 6 explicamos cómo nuestra maquinaria puede ser utilizada para detectar y resolver conflictos/inconsistencias indirectos, es decir, aquellos causados a través de relaciones entre acciones; extendemos y adaptamos la maquinaria para dar cabida a la delegación de normas. En la sección 7 ilustramos nuestro enfoque con un ejemplo de agentes de software regulados por normas que sirven a la Red. En la sección 8 revisamos el trabajo relacionado y en la sección 9 discutimos nuestras contribuciones y damos direcciones para trabajos futuros. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2. Las organizaciones virtuales permiten que diversas partes se unan para compartir recursos y participar en la resolución de problemas. Este paradigma ha encontrado fuertes aplicaciones en la orquestación de servicios web [14], la e-Ciencia [16] y la Red [9]. Los VOs, en su formulación más genérica, pueden ser vistos como artefactos de coordinación, permitiendo que agentes de software y humanos participen en formas sofisticadas de interacción. Representamos formalmente nuestros VO como máquinas de estados finitos en las que las acciones de los agentes individuales etiquetan los bordes entre estados discretos. Esto nos proporciona un denominador común más bajo: hay formas mucho más sofisticadas, convenientes y expresivas de representar las interacciones entre agentes (por ejemplo, AUML [19] e instituciones electrónicas [20], por nombrar algunas), pero para generalizar nuestro enfoque, asumiremos que cualquier formalismo de nivel superior puede ser mapeado a una máquina de estados finitos (posiblemente con cierta pérdida de expresividad). Mostramos en la Figura 1 un simple VO representado gráficamente como una máquina de estados finitos. Las etiquetas en los bordes con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figura 1: Ejemplo de VO como una Máquina de Estados Finitos que conectan los estados son fórmulas atómicas de primer orden, denotadas genéricamente como ϕ; representan acciones realizadas por agentes individuales. Definimos nuestras organizaciones virtuales de la siguiente manera: DEF. 1. Una organización virtual I es el triple S, s0, E, T donde S = {s1, . . . , sn} es un conjunto finito y no vacío de estados, s0 ∈ S es el estado inicial, E es un conjunto finito de aristas (s, s , ϕ), s, s ∈ S conectando s con s con una fórmula atómica de primer orden ϕ como etiqueta, y T ⊆ S es el conjunto de estados terminales. Ten en cuenta que los bordes están dirigidos, por lo que (s, t, ϕ) = (t, s, ϕ). La muestra VO de la Figura 1 se representa formalmente como I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2}. Suponemos una cuantificación existencial implícita en cualquier variable en ϕ, de modo que, por ejemplo, s(A, B) representa ∃A, B s(A, B). Los VO deben permitir dos tipos de no determinismo correspondientes a las elecciones que los agentes autónomos pueden hacer, a saber, i) el que surge cuando hay más de un borde que sale de un estado; y ii) el que surge de las variables en las fórmulas ϕ que etiquetan un borde, para las cuales el agente que realiza la acción instancia. Estos tipos de no determinismo son deseables ya que ayudan a definir mecanismos de coordinación genéricos y flexibles. Otro concepto importante que utilizamos son los roles de los agentes en las Organizaciones Virtuales (OV). Los roles, tal como se explotan en, por ejemplo, [18] y [20], nos ayudan a abstraernos de los agentes individuales y definir un patrón de comportamiento al cual cualquier agente que adopte un rol debería conformarse. Además, todos los agentes con el mismo rol tienen garantizados los mismos derechos, deberes y oportunidades. Haremos uso de dos conjuntos finitos y no vacíos, Agentes = {ag1, . . . , agn} y Roles = {r1, . . . , rm}, que representan, respectivamente, los conjuntos de identificadores de agentes y etiquetas de roles. Nos referimos genéricamente a los términos de primer orden, es decir, constantes, variables y funciones (anidadas) como τ. 2.1 Semántica de los VO La especificación de un VO como una máquina de estados finitos da lugar a un conjunto posiblemente infinito de historias de comportamientos computacionales, en las que se registran las acciones que etiquetan los caminos desde el estado inicial hasta un estado final. Aunque las acciones que conforman un VO se llevan a cabo de manera distribuida, proponemos un registro global explícito de todos los eventos. En la práctica, esto se puede lograr si requerimos que los agentes individuales declaren/informen las acciones que han llevado a cabo; esto asume agentes de confianza, naturalmente. Para registrar la autoría de la acción, anotamos las fórmulas con la identificación única de los agentes. Nuestra cuenta global explícita de todos los eventos es un conjunto de fórmulas atómicas fundamentales ϕ, es decir, solo permitimos que aparezcan constantes como términos de las fórmulas. Cada fórmula es un registro veraz de una acción especificada en el VO. Sin embargo, hay que tener en cuenta que en la especificación de VO no restringimos la sintaxis de las fórmulas: las variables pueden aparecer en ellas, y cuando un agente realiza una acción real, entonces cualquier variable de la acción especificada debe asignarse valores. Por lo tanto, definimos: DEF. 2. Un estado de ejecución global de un VO, denotado como Ξ, es un conjunto finito, posiblemente vacío, de tuplas a : r, ¯ϕ, t donde a ∈ Agentes es un identificador de agente, r ∈ Roles es una etiqueta de rol, ¯ϕ es una fórmula atómica de primer orden concreta, y t ∈ IN es una marca de tiempo. Por ejemplo, ag1:comprador, p(a, 34), 20 indica que el agente ag1 adoptando el rol de comprador realizó la acción p(a, 34) en el instante 20. Dado un VO I = S, s0, E, T, un estado de ejecución Ξ y un estado s ∈ S, podemos definir una función que obtiene un posible próximo estado de ejecución, es decir, h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, para un (s, s , ϕ) ∈ E. Dicha función h debe abordar los dos tipos de no determinismo mencionados anteriormente, así como la elección de los agentes potenciales que pueden llevar a cabo la acción y sus roles adoptados. También definimos una función para calcular el conjunto de todos los posibles estados de ejecución, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 VOs Regulados por Normas Abogamos por una separación de preocupaciones en la que la organización virtual se complementa con un conjunto explícito y separado de normas que regulan aún más el comportamiento de los agentes mientras participan en la puesta en marcha de una organización. La libertad de elección dada a los agentes (capturada a través del no determinismo de los VO, explicado anteriormente) debe ser limitada en algunas circunstancias. Por ejemplo, podríamos necesitar describir que quien llevó a cabo ϕ está obligado a llevar a cabo ϕ, de modo que si hay un punto de elección en el que ϕ aparece como etiqueta de un borde, entonces ese borde debería ser seguido. En lugar de incorporar aspectos normativos en el diseño de los agentes (por ejemplo, codificando explícitamente aspectos normativos en el comportamiento de los agentes) o en el propio VO (por ejemplo, abordando excepciones y comportamientos desviados en el mecanismo en sí), adoptamos la perspectiva de que un VO debería complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes mientras participan en la puesta en marcha de la organización. Esta separación de preocupaciones debería facilitar el diseño de los Sistemas Multiagente (MAS); sin embargo, los diferentes componentes (VOs y normas) deben unirse en algún momento del proceso de diseño. Nuestras normas están definidas de la siguiente manera: DEF. 3. Una norma, genéricamente referida como ν, es cualquier construcción de la forma Oτ:τ ϕ, Pτ:τ ϕ, o Fτ:τ ϕ, donde τ, τ son variables o constantes y ϕ es una fórmula atómica de primer orden. Adoptamos la notación de [18]: Oτ:τ ϕ representa una obligación para el agente τ que asume el rol τ de llevar a cabo ϕ; recordamos que τ, τ son variables, constantes y funciones aplicadas a términos (anidados). Pτ:τ ϕ y Fτ:τ ϕ representan, respectivamente, un permiso y una prohibición para el agente τ, desempeñando el rol τ para lograr ϕ. Supondremos que los tipos se utilizan para manipular adecuadamente variables de identificadores de agentes y etiquetas de roles. Proponemos representar formalmente las posiciones normativas de todos los agentes que llevan a cabo un VO. Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 Agentes no confiables pueden ser acomodados en esta propuesta, si asociamos a cada uno de ellos un agente gobernador que supervise las acciones del agente externo e informe sobre ellas. Este enfoque fue introducido en [12] y se explica en la sección 5. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 645 DEF. 4. Un estado normativo global Ω es un conjunto finito y posiblemente vacío de tuplas ω = ν, td, ta, te donde ν es una norma como se mencionó anteriormente y td, ta, te ∈ IN son, respectivamente, el momento en que ν fue declarada (introducida), cuando ν se vuelve activa y cuando ν expira, td ≤ ta < te. Vale la pena notar que no requerimos que las fórmulas atómicas de las normas sean concretas: podrían contener variables. Suponemos una cuantificación universal implícita en las variables A, R de las normas XA:Rϕ (para las modalidades deónticas X ∈ {O, P, F}), de modo que, por ejemplo, PA:Rp(X, b, c) significa ∀A ∈ Agentes.∀R ∈ Roles.∃X.PA:Rp(X, b, c). También nos referimos a las tuplas en Ω como normas. Los estados normativos globales complementan los estados de ejecución de los VO con información sobre las posiciones normativas de los agentes individuales. Podemos relacionarlos a través de una función para obtener un estado de ejecución siguiente de VOs regulado por una norma, es decir, g(I, Ξ, s, Ω, t) = Ξ, donde t representa el tiempo de la actualización. Por ejemplo, podríamos querer que todas las acciones prohibidas se excluyan del próximo estado de ejecución, es decir, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E y Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te. Podríamos desear igualmente que solo se elijan acciones permitidas para el próximo estado de ejecución. No legislamos, ni recomendamos de hecho, ninguna forma particular de regular las ONG. Sin embargo, ofrecemos bases simples para permitir la implementación de políticas arbitrarias. Del mismo modo que un estado normativo es útil para obtener el siguiente estado de ejecución de un VO, podemos usar un estado de ejecución para actualizar un estado normativo. Por ejemplo, podríamos querer eliminar cualquier obligación específica de un agente y rol, que ha sido llevada a cabo por ese agente y rol específico, es decir, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}. La gestión (es decir, la creación y actualización) de estados normativos globales es un área de investigación interesante. Se reporta un enfoque simple pero útil en [11]: las reglas de producción representan genéricamente cómo se deben actualizar las normas para reflejar lo que los agentes han hecho y qué normas se mantienen actualmente. En este documento nuestro enfoque no es proponer cómo deberían ser gestionadas las Ωs; asumimos que existe algún mecanismo que se encarga de eso. 3. CONFLICTOS NORMATIVOS Ahora definimos medios para detectar y resolver conflictos e inconsistencias normativas. Hacemos uso del concepto de unificación [1, 8] de términos de primer orden τ, es decir, constantes, variables o funciones (anidadas) con términos como parámetros. Inicialmente definimos las sustituciones: DEF. 5. Una sustitución σ es un conjunto finito y posiblemente vacío de pares x/τ, donde x es una variable y τ es un término. Definimos la aplicación de una sustitución de la siguiente manera: 1. c · σ = c para una constante c 2. x · σ = τ · σ si x/τ ∈ σ; de lo contrario, x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Donde X se refiere genéricamente a cualquiera de las modalidades deónticas O, P, F. La unificación entre dos términos τ, τ consiste en encontrar una sustitución σ (también llamada, en este contexto, el unificador de τ y τ) tal que τ · σ = τ · σ. Se han propuesto muchos algoritmos para resolver el problema de unificación, un tema fundamental en la demostración automatizada de teoremas [8], y trabajos más recientes ofrecen formas muy eficientes de obtener unificadores. Haremos uso de la siguiente definición: DEF. 6. La relación unify(τ, τ , σ) se cumple si y solo si existe un σ posiblemente vacío tal que τ · σ = τ · σ. También definimos la unificación de fórmulas atómicas como unificar(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) lo cual se cumple si y solo si τi · σ = τi · σ, 0 ≤ i ≤ n. La relación de unificación verifica si una sustitución σ es realmente un unificador para τ, τ pero también puede usarse para encontrar dicho σ. Suponemos que unificar es una implementación adecuada de un algoritmo de unificación que i) siempre termina (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene una complejidad computacional lineal. 3.1 Detección de Conflictos Un <br>conflicto normativo</br> surge cuando una fórmula atómica que etiqueta un borde en el VO, es decir, una acción, está simultáneamente permitida y prohibida [13]. En este caso, ambas normas están en conflicto con respecto a sus agentes, roles y parámetros (términos) de acciones específicas. Proponemos utilizar la unificación para detectar cuándo se superponen una prohibición y un permiso y emplear el unificador para resolver el conflicto. Por ejemplo, PA:Rp(c, X) y Fa:bp(Y, Z) están en conflicto ya que se unifican bajo σ = {A/a, R/b, Y/c, X/d}. Si, sin embargo, las variables en Fa:bp(Y, Z) no obtienen los valores en σ, entonces no habrá conflictos. Por lo tanto, proponemos anotar las prohibiciones en Ω con unificadores, llamados conjuntos de conflictos, y utilizar estas anotaciones para determinar qué variables no pueden ser los variables de la prohibición en futuras unificaciones con el fin de evitar un conflicto. Cada prohibición se considera a partir de ahora como teniendo tal anotación, denotada como (Fτ1:τ2 ϕ) Σc, td, ta, te. Inicialmente, esta anotación está vacía. Proponemos reducir la influencia de las prohibiciones, dando así a los agentes más opciones en las acciones que pueden realizar. Un enfoque similar podría ser adoptado mediante la restricción de permisos, limitando así las acciones disponibles para los agentes. Cada una de estas políticas es posible: no legislamos sobre ninguna de ellas ni damos preferencia sobre ninguna. En este documento estamos interesados en formalizar dichas políticas dentro de un marco matemático simple. Una prohibición puede estar en conflicto con varias autorizaciones en Ω. Por lo tanto, debemos encontrar el conjunto máximo de pares conflictivos de permisos y prohibiciones en Ω, realizando una inspección por pares. Esto requiere identificar la sustitución entre dos pares de normas que caracteriza un conflicto. Esto se captura formalmente mediante la siguiente definición: DEF. 7. Surge un conflicto entre dos tuplas ω, ω ∈ Ω bajo una sustitución σ, denotado como cflct(ω, ω , σ), si se cumplen las siguientes condiciones: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unificar(τ1, τ1, σ), unificar(τ2, τ2, σ), y unificar(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| Es decir, un conflicto de prohibición y permiso (condición 1) si, y solo si, los agentes y roles a los que se aplican y sus acciones, respectivamente, se unifican bajo σ (condición 2) y sus períodos de activación se superponen (condición 3). La sustitución σ, el conjunto de conflictos, unifica a los agentes, roles y fórmulas atómicas de un permiso y una prohibición. La anotación Σc no juega ningún papel al detectar conflictos, pero, como mostramos a continuación, debemos actualizar la anotación para reflejar nuevas restricciones y resolver conflictos. Por ejemplo, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) se cumple. Definimos a continuación cómo obtenemos el conjunto de normas en conflicto de un estado normativo Ω: DEF. 8. El conjunto finito, posiblemente vacío, de normas en conflicto de un estado normativo Ω, denotado como CFLS(Ω), se define como CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Resolución de Conflictos Una forma detallada de resolver conflictos puede hacerse a través de la unificación. Detectamos la superposición de las influencias normativas, es decir, cómo afectan los comportamientos de los agentes en la VO, y limitamos el 646 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) influencia de la prohibición. Ilustramos con diagramas de Venn en la Figura 2 la superposición de las influencias normativas (izquierda) que caracterizan un conflicto y la reducción necesaria para resolver el conflicto (derecha). La ilustración muestra el espacio de valores posibles para p(X, Y) y p(X, Y) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y) Fa:bp(Y, Z) PA:Rp(c, X) Figura 2: Superposición de Influencia (Izquierda) y Restricción (Derecha) dos porciones de este espacio que definen el alcance de influencia de las normas PA:Rp(c, X) y Fa:bp(Y, Z). El alcance de estas normas se superponen, ilustrado por la intersección de las casillas a la izquierda, en acciones con valores, por ejemplo, a, b, p(c, 2), . . . , a, b, p(c, n). La reducción de la prohibición elimina la intersección: traslada el alcance de la influencia de la norma fuera de la influencia del permiso. Si hubiera múltiples superposiciones entre una prohibición y varias autorizaciones, lo cual es probable que ocurra, entonces la prohibición será restringida múltiples veces para desplazar el alcance de la norma y evitar todas las intersecciones. El algoritmo mostrado en la Figura 3 describe cómo obtenemos un conjunto de normas sin conflictos. Mapea un conjunto existente Ω posiblemente con el algoritmo de resolución de conflictos conflictResolution(Ω, Ω) entrada Ω salida Ω comenzar Ω := Ω para cada ω ∈ Ω tal que ω = (Fa:r ¯ϕ) Σc, td, ta, te hacer si ω, ω, σ ∈ CFLS(Ω) entonces Ω := Ω − {ω} fin si fin para para cada ω ∈ Ω tal que ω = (Fτ1:τ2 ϕ) Σc, td, ta, te hacer ΣMAX c := [ ω,ω,σc ∈CFLS(Ω) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c), td, ta, te } fin para fin Figura 3: Algoritmo para Resolver Conflictos en un Conjunto de Normas mapeando normas a un nuevo conjunto Ω en el que los conflictos (si los hay) están resueltos. El algoritmo forma Ω como un conjunto que es libre de conflictos, lo que significa que las prohibiciones están anotadas con un conjunto de conflictos que indica qué asignaciones para variables deben evitarse. Inicialmente, Ω se establece como Ω. El algoritmo opera en dos etapas. En la primera etapa (primera para cada bucle), eliminamos todas las prohibiciones conflictivas ω = (Fa:r ¯ϕ) Σc, td, ta, te con pares de agente/rol y fórmulas concretas en conflicto a : r y ¯ϕ: la única forma de resolver conflictos derivados de tales prohibiciones es eliminarlas por completo, ya que no podemos restringir una norma completamente concreta. En la segunda etapa (segunda para cada bucle), se examinan las prohibiciones restantes en Ω: el conjunto CFLS(Ω) contiene todos los conflictos entre permisos y las prohibiciones restantes en Ω representadas como tuplas ω, ω, σc, con σc representando el conjunto de conflictos. Dado que una prohibición puede tener conflictos con varias autorizaciones, el conjunto CFLS(Ω) puede contener más de una tupla para cada prohibición. Para proporcionar un Ω que refleje todos estos conflictos para una prohibición específica, debemos formar ΣMAX c que contenga todos los conjuntos de conflictos σc para una prohibición dada ω. El conjunto maximal se utiliza para actualizar la anotación de la prohibición. Es importante explicar la necesidad de actualizar el conjunto de prohibiciones del conflicto. Los estados normativos cambian como resultado de las acciones de los agentes [11]: las permisiones, prohibiciones y obligaciones existentes son revocadas y/o se establecen nuevas como resultado de las interacciones de los agentes con el entorno y otros agentes. Cada vez que se añadan nuevas normas, debemos verificar nuevos conflictos e inconsistencias. Si solo aplicamos nuestro algoritmo a un par que consiste en una norma antigua y una nueva, entonces se puede ahorrar algo de reprocesamiento de pares de normas antiguas (que ya fueron tratadas anteriormente). La eliminación de normas del conjunto Ω se aborda de manera eficiente: cada permiso que se vaya a eliminar debe ser verificado primero en busca de conflictos con cualquier prohibición existente (se puede evitar el reprocesamiento si registramos el conflicto en lugar de detectarlo nuevamente). Si hay un conflicto, entonces el conjunto de conflictos habrá sido registrado en la anotación de prohibiciones; este conjunto de conflictos es eliminado de la anotación de prohibiciones. La eliminación de obligaciones sigue un proceso similar. Las prohibiciones se eliminan sin necesidad de considerar sus relaciones con otras normas. Nuestro algoritmo es correcto en el sentido de que proporciona, para un Ω dado, un nuevo Ω en el que i) se han eliminado todas las prohibiciones fundamentales que entran en conflicto con los permisos; y ii) todas las prohibiciones anotadas restantes (Fτ:τ ¯ϕ) Σc, td, ta, te no se unificarán con ninguno de los permisos en Ω, siempre que el unificador no aparezca en Σc. El primer requisito se aborda con el primer bucle for each, que hace precisamente esto: elimina todas las prohibiciones de base que se unifican con una obligación. El segundo requisito se aborda mediante el segundo bucle for each: cada prohibición tiene su anotación Σc agregada con ΣMAX c, acomodando así los unificadores de todas las autorizaciones que se unifican con la prohibición. Es fácil ver que el algoritmo siempre termina: cada uno de sus dos bucles recorre un conjunto finito, procesando un elemento a la vez. El conjunto CFLS(Ω) se calcula en un número finito de pasos, al igual que las operaciones de conjunto realizadas dentro de cada bucle. El algoritmo tiene, sin embargo, complejidad exponencial, ya que el cálculo de CFLS(Ω) requiere una comparación de pares de todos los elementos en Ω. Ilustramos nuestro algoritmo con el siguiente ejemplo. Que exista el siguiente estado normativo global Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:rp(a, b), 3, 4, 8, (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9, ff. El primer bucle elimina la prohibición terrestre, obteniendo así el siguiente Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, Pe:fp(g, h), 3, 4, 9, ff. Luego tenemos el siguiente conjunto de normas en conflicto CFLS(Ω): 8 < : * (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, {A/a, R/b, X/c, Y/d} +, * (FA:Rp(X, Y)) {}, 2, 2, 9, Pe:fp(g, h), 3, 4, 9, {A/e, R/f, X/g, Y/h} +9 =; Para cada prohibición ω ∈ Ω recuperamos todos los elementos de w, w, σ ∈ CFLS(Ω) y recopilamos sus σ en ΣMAX c. El Ω final es así: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; El conjunto anotado de conjuntos de conflictos debe entenderse como un registro de unificaciones pasadas, que informa cómo deben utilizarse las prohibiciones en el futuro para evitar conflictos con permisos. Mostramos en la Sección 5.1 cómo los agentes conscientes de las normas utilizan las anotaciones. 4. INCONSISTENCIAS NORMATIVAS Si se puede encontrar una sustitución σ que unifique una obligación y una prohibición, entonces se produce una situación de inconsistencia normativa [13]. La obligación exige que un agente realice una acción que está prohibida. Podemos reutilizar la maquinaria, presentada anteriormente para resolver conflictos entre permisos y prohibiciones, con el fin de a) detectar y b) resolver tales inconsistencias. Con la Definición 7, nosotros 3 El esfuerzo combinatorio ya no es necesario si en su lugar mantenemos un conjunto de normas sin conflictos: cada vez que se introduce una nueva norma, la comparamos con las existentes, haciendo así que el proceso de mantenimiento sea de complejidad lineal. El Sexto Internacional. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 647 expresa la naturaleza de un conflicto entre una prohibición y un permiso. De igual manera, una situación de inconsistencia puede ser definida reutilizando esta definición y reemplazando la modalidad deontica P con O. Podemos reutilizar la maquinaria para la resolución de conflictos, desarrollada previamente, para resolver inconsistencias. El algoritmo de resolución de conflictos se puede aplicar sin cambios para acumular un conjunto de conflictos máximo ΣMAX c para cada prohibición en Ω que se unifica con las obligaciones. 5. Sociedades de agentes conscientes de normas. Ahora describimos cómo nuestros VO regulados por normas dan lugar a sociedades de agentes conscientes de normas. Abordamos Sistemas Multiagentes abiertos y heterogéneos: acomodamos agentes externos proporcionándoles a cada uno de ellos un agente gobernador correspondiente [12]. Este es un tipo de chaperón que interactúa con un agente externo, y observa e informa sobre su comportamiento. Mostramos nuestra arquitectura en la Figura 4 a continuación: un número de Agentes Gobernadores Externos Espacio de Tuplas de Agentes ag1 £ ¢ ¡ gov1 ⇐⇒ . . . . . . . . . . . . Yo, s, Ξ, Ω Yo, s, Ξ, Ω · · · agn £ ¢ ¡ govn ⇐⇒ Figura 4: Arquitectura para Sociedades de Agentes Conscientes de Normas de agentes externos interactúan (indicado por el ) con sus agentes gobernadores correspondientes. Los agentes del gobernador tienen acceso a la descripción del VO, el estado actual de la promulgación del VO, el estado de ejecución global Ξ y el estado normativo global Ω. Los agentes del gobernador pueden escribir y leer de (indicado por el ⇐⇒) un espacio de memoria compartida (por ejemplo, una solución tipo pizarra implementada como un espacio de tuplas), actualizando la configuración global (indicada por el ) para reflejar la dinámica de la ejecución del VO. Los agentes gubernamentales son necesarios porque no podemos anticipar ni legislar sobre el diseño o comportamiento de agentes externos. A continuación, representamos cómo los pares de gobernador/agentes externos trabajan juntos: cualquier elección no determinista en el VO es decidida por el agente externo; cualquier aspecto normativo es considerado por el agente gobernador. El agente gobernador representa el agente externo dentro del VO. Como tal, tiene el identificador único del agente externo. El agente gobernador lleva un registro de todos los roles que el agente externo está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un rol simultáneamente. Definimos en la Figura 5 cómo funcionan los agentes gobernadores: utilizamos un programa lógico con este propósito. Mostramos 1 main(Id, Roles) ← 2 obtener tupla( I, s, Ξ, Ω )∧ 3 terminar(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 obtener tupla( I, s, Ξ, Ω )∧ 6 filtrar normas(Id, Roles, Ω, ΩId )∧ 7 discutir normas(Id, Roles, I, s, Ξ, ΩId , Acciones)∧ 8 actualizar tupla(Roles, Acciones, NuevosRoles)∧ 9 main(Id, NuevosRoles) Figura 5: Agente Gobernador como un Programa Lógico las líneas de nuestras cláusulas numeradas 1-9. La primera cláusula (líneas 1-3) describe la condición de terminación: get tuple/1 (línea 2) recupera I, s, Ξ, Ω del espacio de tuplas compartido y terminate/4 verifica si la ejecución actual de VO (registrada en Ξ) ha llegado a su fin. El equipo de agentes del gobernador sincroniza su acceso al espacio de tuplas [12], asegurando así que cada uno tenga la oportunidad de funcionar. La segunda cláusula (líneas 4-9) representa un bucle genérico cuando la condición de terminación de la primera cláusula no se cumple. En este caso, la tupla se recupera nuevamente (línea 5) y el agente gobernador procede (línea 6) a analizar el estado normativo global actual Ω con el objetivo de obtener el subconjunto ΩId ⊆ Ω de normas que hacen referencia al agente Id bajo los roles Roles. El predicado filter norms/4 recopila las normas que se aplican al agente Id (el agente externo del agente gobernador). En la línea 7, el agente gobernador, en posesión de las normas aplicables y otra información relevante, interactúa con el agente externo para decidir sobre un conjunto de Acciones que cumplen con las normas; estas acciones se utilizarán para actualizar (línea 8) el estado de ejecución global Ξ. En el proceso de actualizar el estado de ejecución, un nuevo conjunto de roles debe ser asignado al agente externo, representado como NewRoles. El agente gobernador sigue en bucle (línea 9) utilizando el identificador del agente externo y su nuevo conjunto de roles. 5.1 Uso de normas anotadas Ahora explicamos cómo los agentes conscientes de las normas utilizan normas anotadas. Lo hacemos a través de la definición de comprobación de predicado/2, que se cumple si su primer argumento, una acción candidata (en el formato de los elementos de Ξ de la Def. 2), está dentro de la influencia de una prohibición anotada ω, su segundo parámetro. La definición, como un programa lógico, se muestra en la Figura 6. Comprueba (línea 4) si el identificador del agente 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unificar(a, τ1, σ) ∧ unificar(r, τ2, σ) ∧ unificar( ¯ϕ, ϕ, σ)∧ 5 para todo(σ , (σc ∈ Σc, unificar(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figura 6: Comprobar si la Acción está dentro de la Influencia de la Norma Recortada y el rol de la acción se unifica con los términos apropiados τ1, τ2 de ω y que las acciones ¯ϕ, ϕ mismas se unifican, todo bajo el mismo unificador σ. Luego verifica (líneas 5-6) que σ no unifica con ninguno de los conjuntos de conflictos en Σc. Finalmente, en la línea 7 se comprueba si el tiempo de la acción está dentro de la influencia temporal normativa. La verificación de la no unificación de σ con ningún elemento de Σc merece una explicación. Los elementos de Σc son unificadores que indican qué valores no pueden tener las variables de la norma, es decir, representan vacíos en el alcance original de la influencia de las normas. El test equivale a preguntar si la acción está fuera de tales brechas, es decir, si la acción se encuentra dentro del alcance limitado de influencia de la norma. 6. En nuestra discusión anterior, se detectaron conflictos y inconsistencias normativas a través de una comparación directa de las fórmulas atómicas que representan la acción. Sin embargo, los conflictos e inconsistencias también pueden surgir indirectamente a través de las relaciones entre acciones. Por ejemplo, si p(X) equivale a q(X, X), entonces las normas PA:Rp(X) y FA:Rq(X, X) están en conflicto, ya que PA:Rp(X) se puede reescribir como PA:Rq(X, X) y, por lo tanto, tenemos tanto PA:Rq(X, X) como FA:Rq(X, X). En la discusión a continuación nos concentramos en el <br>conflicto de normas</br>, pero la inconsistencia normativa se puede abordar de manera similar, si cambiamos las modalidades deonticas de P por O. Las relaciones entre acciones dependen del dominio. Los diferentes dominios tienen formas distintas de relacionar sus acciones; los ingenieros construyen ontologías para representar dichas relaciones. Proponemos un medio simple para tener en cuenta tales relaciones y mostrar cómo estas pueden estar conectadas a los mecanismos introducidos anteriormente. En lugar de utilizar formalismos sofisticados para la construcción de ontologías, empleamos un conjunto de axiomas de dominio, definidos a continuación: DEF. 9. Los axiomas de dominio, denotados como Δ, son un conjunto finito y posiblemente vacío de fórmulas ϕ → (ϕ1 ∧ · · · ∧ ϕn) donde ϕ, ϕi, 1 ≤ i ≤ n, son fórmulas atómicas de primer orden. Nuestro ejemplo anterior puede ser capturado por Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}. Al representar y manipular explícitamente el conocimiento del dominio logramos generalidad: la misma maquinaria puede ser utilizada en diferentes dominios. Un conjunto de normas puede tener diferentes conflictos e inconsistencias, para distintos dominios de aplicación. 648 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 649 650 La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 651 ",
            "candidates": [],
            "error": [
                [
                    "conflicto normativo",
                    "conflicto de normas"
                ]
            ]
        },
        "conflicting prohibition": {
            "translated_key": "prohibiciones conflictivas",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all <br>conflicting prohibition</br>s ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [
                "In the first stage (first for each loop), we remove all <br>conflicting prohibition</br>s ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm."
            ],
            "translated_annotated_samples": [
                "En la primera etapa (primera para cada bucle), eliminamos todas las <br>prohibiciones conflictivas</br> ω = (Fa:r ¯ϕ) Σc, td, ta, te con pares de agente/rol y fórmulas concretas en conflicto a : r y ¯ϕ: la única forma de resolver conflictos derivados de tales prohibiciones es eliminarlas por completo, ya que no podemos restringir una norma completamente concreta."
            ],
            "translated_text": "Resolviendo conflictos e inconsistencias en organizaciones virtuales reguladas por normas, Wamberto Vasconcelos Dept. Las organizaciones virtuales regidas por normas definen, regulan y facilitan el intercambio coordinado de recursos y la resolución de problemas en sociedades de agentes. Con una explicación detallada de las normas, la apertura en las organizaciones virtuales se puede lograr: los nuevos componentes, diseñados por diversas partes, pueden ser fácilmente incorporados. Nos enfocamos en organizaciones virtuales realizadas como sistemas multiagente, en las cuales agentes humanos y de software interactúan para lograr objetivos individuales y globales. Sin embargo, cualquier descripción realista de las normas debería abordar su naturaleza dinámica: las normas cambiarán a medida que los agentes interactúen entre sí y con su entorno. Debido a la naturaleza cambiante de las normas o a las normas derivadas de diferentes organizaciones virtuales, habrá situaciones en las que una acción sea simultáneamente permitida y prohibida, es decir, surge un conflicto. Asimismo, habrá situaciones en las que una acción esté tanto obligada como prohibida, es decir, surge una inconsistencia. Introducimos un enfoque, basado en unificación de primer orden, para detectar y resolver tales conflictos e inconsistencias. En nuestra solución propuesta, anotamos una norma con el conjunto de valores que sus variables no deben tener para evitar un conflicto o una inconsistencia con otra norma. Nuestro enfoque acomoda de manera ordenada las interrelaciones dependientes del dominio entre acciones y los conflictos/inconsistencias indirectos que estos pueden causar. Más generalmente, podemos capturar una noción útil de delegación de acciones y normas entre agentes (y roles) y utilizarla para abordar conflictos/inconsistencias causados por la delegación de acciones. Ilustramos nuestro enfoque con un ejemplo de e-Ciencia en el que agentes respaldan servicios de Grid. Categorías y Descriptores de Asignaturas I.2.4 [Inteligencia Artificial]: Aplicaciones y Sistemas Expertos en Derecho; I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida-Sistemas Multiagente Términos Generales Algoritmos, Teoría 1. Las organizaciones virtuales (VOs) facilitan el intercambio coordinado de recursos y la resolución de problemas que involucran a diversas partes geográficamente remotas [9]. Los VOs definen y regulan las interacciones (facilitando así la coordinación) entre agentes de software y/o humanos que se comunican para lograr objetivos individuales y globales [16]. Los VOs se realizan como sistemas multiagente y una característica muy deseable de tales sistemas es la apertura, mediante la cual los nuevos componentes diseñados por otras partes se integran sin problemas. El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de sistemas multiagente (MASs) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]. Las normas regulan el comportamiento observable de agentes de software auto-interesados y heterogéneos, diseñados por diversas partes que pueden no confiar del todo entre sí [3, 24]. Sin embargo, los VOs regulados por normas pueden experimentar problemas cuando las normas asignadas a sus agentes están en conflicto (es decir, una acción está simultáneamente prohibida y permitida) o son inconsistentes (es decir, una acción está simultáneamente prohibida y obligada). Proponemos un medio para detectar y resolver automáticamente conflictos e inconsistencias en los VO regulados por normas. Hacemos uso de la unificación de términos de primer orden [8] para averiguar si y cómo se superponen las normas en su influencia (es decir, los agentes y los valores de los parámetros en las acciones de los agentes que las normas pueden afectar). Esto permite una solución detallada en la que se reduce la influencia de normas conflictivas o inconsistentes para conjuntos particulares de valores. Por ejemplo, las normas en las que el agente x tiene permitido enviar la oferta (ag1, 20) y el agente ag2 tiene prohibido enviar la oferta (y, z) (donde x, y, z son variables y ag1, ag2, 20 son constantes) están en conflicto porque sus agentes, acciones y términos (dentro de las acciones) se unifican. Resolvemos el conflicto anotando normas con conjuntos de valores que sus variables no pueden tener, reduciendo así su influencia. En nuestro ejemplo, el conflicto se evita si requerimos que la variable y no puede ser ag1 y que z no puede ser 20. Este documento está organizado de la siguiente manera. En la siguiente sección proporcionamos una definición minimalista para los VOs regulados por normas. En la sección 3 definimos formalmente los conflictos de normas, y explicamos cómo se detectan y resuelven. En la sección 4 describimos cómo la maquinaria de la sección anterior puede adaptarse para detectar y resolver inconsistencias normativas. En la sección 5 describimos cómo se utilizan nuestras normas limitadas en sociedades de agentes conscientes de las normas. En la sección 6 explicamos cómo nuestra maquinaria puede ser utilizada para detectar y resolver conflictos/inconsistencias indirectos, es decir, aquellos causados a través de relaciones entre acciones; extendemos y adaptamos la maquinaria para dar cabida a la delegación de normas. En la sección 7 ilustramos nuestro enfoque con un ejemplo de agentes de software regulados por normas que sirven a la Red. En la sección 8 revisamos el trabajo relacionado y en la sección 9 discutimos nuestras contribuciones y damos direcciones para trabajos futuros. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2. Las organizaciones virtuales permiten que diversas partes se unan para compartir recursos y participar en la resolución de problemas. Este paradigma ha encontrado fuertes aplicaciones en la orquestación de servicios web [14], la e-Ciencia [16] y la Red [9]. Los VOs, en su formulación más genérica, pueden ser vistos como artefactos de coordinación, permitiendo que agentes de software y humanos participen en formas sofisticadas de interacción. Representamos formalmente nuestros VO como máquinas de estados finitos en las que las acciones de los agentes individuales etiquetan los bordes entre estados discretos. Esto nos proporciona un denominador común más bajo: hay formas mucho más sofisticadas, convenientes y expresivas de representar las interacciones entre agentes (por ejemplo, AUML [19] e instituciones electrónicas [20], por nombrar algunas), pero para generalizar nuestro enfoque, asumiremos que cualquier formalismo de nivel superior puede ser mapeado a una máquina de estados finitos (posiblemente con cierta pérdida de expresividad). Mostramos en la Figura 1 un simple VO representado gráficamente como una máquina de estados finitos. Las etiquetas en los bordes con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figura 1: Ejemplo de VO como una Máquina de Estados Finitos que conectan los estados son fórmulas atómicas de primer orden, denotadas genéricamente como ϕ; representan acciones realizadas por agentes individuales. Definimos nuestras organizaciones virtuales de la siguiente manera: DEF. 1. Una organización virtual I es el triple S, s0, E, T donde S = {s1, . . . , sn} es un conjunto finito y no vacío de estados, s0 ∈ S es el estado inicial, E es un conjunto finito de aristas (s, s , ϕ), s, s ∈ S conectando s con s con una fórmula atómica de primer orden ϕ como etiqueta, y T ⊆ S es el conjunto de estados terminales. Ten en cuenta que los bordes están dirigidos, por lo que (s, t, ϕ) = (t, s, ϕ). La muestra VO de la Figura 1 se representa formalmente como I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2}. Suponemos una cuantificación existencial implícita en cualquier variable en ϕ, de modo que, por ejemplo, s(A, B) representa ∃A, B s(A, B). Los VO deben permitir dos tipos de no determinismo correspondientes a las elecciones que los agentes autónomos pueden hacer, a saber, i) el que surge cuando hay más de un borde que sale de un estado; y ii) el que surge de las variables en las fórmulas ϕ que etiquetan un borde, para las cuales el agente que realiza la acción instancia. Estos tipos de no determinismo son deseables ya que ayudan a definir mecanismos de coordinación genéricos y flexibles. Otro concepto importante que utilizamos son los roles de los agentes en las Organizaciones Virtuales (OV). Los roles, tal como se explotan en, por ejemplo, [18] y [20], nos ayudan a abstraernos de los agentes individuales y definir un patrón de comportamiento al cual cualquier agente que adopte un rol debería conformarse. Además, todos los agentes con el mismo rol tienen garantizados los mismos derechos, deberes y oportunidades. Haremos uso de dos conjuntos finitos y no vacíos, Agentes = {ag1, . . . , agn} y Roles = {r1, . . . , rm}, que representan, respectivamente, los conjuntos de identificadores de agentes y etiquetas de roles. Nos referimos genéricamente a los términos de primer orden, es decir, constantes, variables y funciones (anidadas) como τ. 2.1 Semántica de los VO La especificación de un VO como una máquina de estados finitos da lugar a un conjunto posiblemente infinito de historias de comportamientos computacionales, en las que se registran las acciones que etiquetan los caminos desde el estado inicial hasta un estado final. Aunque las acciones que conforman un VO se llevan a cabo de manera distribuida, proponemos un registro global explícito de todos los eventos. En la práctica, esto se puede lograr si requerimos que los agentes individuales declaren/informen las acciones que han llevado a cabo; esto asume agentes de confianza, naturalmente. Para registrar la autoría de la acción, anotamos las fórmulas con la identificación única de los agentes. Nuestra cuenta global explícita de todos los eventos es un conjunto de fórmulas atómicas fundamentales ϕ, es decir, solo permitimos que aparezcan constantes como términos de las fórmulas. Cada fórmula es un registro veraz de una acción especificada en el VO. Sin embargo, hay que tener en cuenta que en la especificación de VO no restringimos la sintaxis de las fórmulas: las variables pueden aparecer en ellas, y cuando un agente realiza una acción real, entonces cualquier variable de la acción especificada debe asignarse valores. Por lo tanto, definimos: DEF. 2. Un estado de ejecución global de un VO, denotado como Ξ, es un conjunto finito, posiblemente vacío, de tuplas a : r, ¯ϕ, t donde a ∈ Agentes es un identificador de agente, r ∈ Roles es una etiqueta de rol, ¯ϕ es una fórmula atómica de primer orden concreta, y t ∈ IN es una marca de tiempo. Por ejemplo, ag1:comprador, p(a, 34), 20 indica que el agente ag1 adoptando el rol de comprador realizó la acción p(a, 34) en el instante 20. Dado un VO I = S, s0, E, T, un estado de ejecución Ξ y un estado s ∈ S, podemos definir una función que obtiene un posible próximo estado de ejecución, es decir, h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, para un (s, s , ϕ) ∈ E. Dicha función h debe abordar los dos tipos de no determinismo mencionados anteriormente, así como la elección de los agentes potenciales que pueden llevar a cabo la acción y sus roles adoptados. También definimos una función para calcular el conjunto de todos los posibles estados de ejecución, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 VOs Regulados por Normas Abogamos por una separación de preocupaciones en la que la organización virtual se complementa con un conjunto explícito y separado de normas que regulan aún más el comportamiento de los agentes mientras participan en la puesta en marcha de una organización. La libertad de elección dada a los agentes (capturada a través del no determinismo de los VO, explicado anteriormente) debe ser limitada en algunas circunstancias. Por ejemplo, podríamos necesitar describir que quien llevó a cabo ϕ está obligado a llevar a cabo ϕ, de modo que si hay un punto de elección en el que ϕ aparece como etiqueta de un borde, entonces ese borde debería ser seguido. En lugar de incorporar aspectos normativos en el diseño de los agentes (por ejemplo, codificando explícitamente aspectos normativos en el comportamiento de los agentes) o en el propio VO (por ejemplo, abordando excepciones y comportamientos desviados en el mecanismo en sí), adoptamos la perspectiva de que un VO debería complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes mientras participan en la puesta en marcha de la organización. Esta separación de preocupaciones debería facilitar el diseño de los Sistemas Multiagente (MAS); sin embargo, los diferentes componentes (VOs y normas) deben unirse en algún momento del proceso de diseño. Nuestras normas están definidas de la siguiente manera: DEF. 3. Una norma, genéricamente referida como ν, es cualquier construcción de la forma Oτ:τ ϕ, Pτ:τ ϕ, o Fτ:τ ϕ, donde τ, τ son variables o constantes y ϕ es una fórmula atómica de primer orden. Adoptamos la notación de [18]: Oτ:τ ϕ representa una obligación para el agente τ que asume el rol τ de llevar a cabo ϕ; recordamos que τ, τ son variables, constantes y funciones aplicadas a términos (anidados). Pτ:τ ϕ y Fτ:τ ϕ representan, respectivamente, un permiso y una prohibición para el agente τ, desempeñando el rol τ para lograr ϕ. Supondremos que los tipos se utilizan para manipular adecuadamente variables de identificadores de agentes y etiquetas de roles. Proponemos representar formalmente las posiciones normativas de todos los agentes que llevan a cabo un VO. Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 Agentes no confiables pueden ser acomodados en esta propuesta, si asociamos a cada uno de ellos un agente gobernador que supervise las acciones del agente externo e informe sobre ellas. Este enfoque fue introducido en [12] y se explica en la sección 5. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 645 DEF. 4. Un estado normativo global Ω es un conjunto finito y posiblemente vacío de tuplas ω = ν, td, ta, te donde ν es una norma como se mencionó anteriormente y td, ta, te ∈ IN son, respectivamente, el momento en que ν fue declarada (introducida), cuando ν se vuelve activa y cuando ν expira, td ≤ ta < te. Vale la pena notar que no requerimos que las fórmulas atómicas de las normas sean concretas: podrían contener variables. Suponemos una cuantificación universal implícita en las variables A, R de las normas XA:Rϕ (para las modalidades deónticas X ∈ {O, P, F}), de modo que, por ejemplo, PA:Rp(X, b, c) significa ∀A ∈ Agentes.∀R ∈ Roles.∃X.PA:Rp(X, b, c). También nos referimos a las tuplas en Ω como normas. Los estados normativos globales complementan los estados de ejecución de los VO con información sobre las posiciones normativas de los agentes individuales. Podemos relacionarlos a través de una función para obtener un estado de ejecución siguiente de VOs regulado por una norma, es decir, g(I, Ξ, s, Ω, t) = Ξ, donde t representa el tiempo de la actualización. Por ejemplo, podríamos querer que todas las acciones prohibidas se excluyan del próximo estado de ejecución, es decir, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E y Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te. Podríamos desear igualmente que solo se elijan acciones permitidas para el próximo estado de ejecución. No legislamos, ni recomendamos de hecho, ninguna forma particular de regular las ONG. Sin embargo, ofrecemos bases simples para permitir la implementación de políticas arbitrarias. Del mismo modo que un estado normativo es útil para obtener el siguiente estado de ejecución de un VO, podemos usar un estado de ejecución para actualizar un estado normativo. Por ejemplo, podríamos querer eliminar cualquier obligación específica de un agente y rol, que ha sido llevada a cabo por ese agente y rol específico, es decir, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}. La gestión (es decir, la creación y actualización) de estados normativos globales es un área de investigación interesante. Se reporta un enfoque simple pero útil en [11]: las reglas de producción representan genéricamente cómo se deben actualizar las normas para reflejar lo que los agentes han hecho y qué normas se mantienen actualmente. En este documento nuestro enfoque no es proponer cómo deberían ser gestionadas las Ωs; asumimos que existe algún mecanismo que se encarga de eso. 3. CONFLICTOS NORMATIVOS Ahora definimos medios para detectar y resolver conflictos e inconsistencias normativas. Hacemos uso del concepto de unificación [1, 8] de términos de primer orden τ, es decir, constantes, variables o funciones (anidadas) con términos como parámetros. Inicialmente definimos las sustituciones: DEF. 5. Una sustitución σ es un conjunto finito y posiblemente vacío de pares x/τ, donde x es una variable y τ es un término. Definimos la aplicación de una sustitución de la siguiente manera: 1. c · σ = c para una constante c 2. x · σ = τ · σ si x/τ ∈ σ; de lo contrario, x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Donde X se refiere genéricamente a cualquiera de las modalidades deónticas O, P, F. La unificación entre dos términos τ, τ consiste en encontrar una sustitución σ (también llamada, en este contexto, el unificador de τ y τ) tal que τ · σ = τ · σ. Se han propuesto muchos algoritmos para resolver el problema de unificación, un tema fundamental en la demostración automatizada de teoremas [8], y trabajos más recientes ofrecen formas muy eficientes de obtener unificadores. Haremos uso de la siguiente definición: DEF. 6. La relación unify(τ, τ , σ) se cumple si y solo si existe un σ posiblemente vacío tal que τ · σ = τ · σ. También definimos la unificación de fórmulas atómicas como unificar(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) lo cual se cumple si y solo si τi · σ = τi · σ, 0 ≤ i ≤ n. La relación de unificación verifica si una sustitución σ es realmente un unificador para τ, τ pero también puede usarse para encontrar dicho σ. Suponemos que unificar es una implementación adecuada de un algoritmo de unificación que i) siempre termina (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene una complejidad computacional lineal. 3.1 Detección de Conflictos Un conflicto normativo surge cuando una fórmula atómica que etiqueta un borde en el VO, es decir, una acción, está simultáneamente permitida y prohibida [13]. En este caso, ambas normas están en conflicto con respecto a sus agentes, roles y parámetros (términos) de acciones específicas. Proponemos utilizar la unificación para detectar cuándo se superponen una prohibición y un permiso y emplear el unificador para resolver el conflicto. Por ejemplo, PA:Rp(c, X) y Fa:bp(Y, Z) están en conflicto ya que se unifican bajo σ = {A/a, R/b, Y/c, X/d}. Si, sin embargo, las variables en Fa:bp(Y, Z) no obtienen los valores en σ, entonces no habrá conflictos. Por lo tanto, proponemos anotar las prohibiciones en Ω con unificadores, llamados conjuntos de conflictos, y utilizar estas anotaciones para determinar qué variables no pueden ser los variables de la prohibición en futuras unificaciones con el fin de evitar un conflicto. Cada prohibición se considera a partir de ahora como teniendo tal anotación, denotada como (Fτ1:τ2 ϕ) Σc, td, ta, te. Inicialmente, esta anotación está vacía. Proponemos reducir la influencia de las prohibiciones, dando así a los agentes más opciones en las acciones que pueden realizar. Un enfoque similar podría ser adoptado mediante la restricción de permisos, limitando así las acciones disponibles para los agentes. Cada una de estas políticas es posible: no legislamos sobre ninguna de ellas ni damos preferencia sobre ninguna. En este documento estamos interesados en formalizar dichas políticas dentro de un marco matemático simple. Una prohibición puede estar en conflicto con varias autorizaciones en Ω. Por lo tanto, debemos encontrar el conjunto máximo de pares conflictivos de permisos y prohibiciones en Ω, realizando una inspección por pares. Esto requiere identificar la sustitución entre dos pares de normas que caracteriza un conflicto. Esto se captura formalmente mediante la siguiente definición: DEF. 7. Surge un conflicto entre dos tuplas ω, ω ∈ Ω bajo una sustitución σ, denotado como cflct(ω, ω , σ), si se cumplen las siguientes condiciones: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unificar(τ1, τ1, σ), unificar(τ2, τ2, σ), y unificar(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| Es decir, un conflicto de prohibición y permiso (condición 1) si, y solo si, los agentes y roles a los que se aplican y sus acciones, respectivamente, se unifican bajo σ (condición 2) y sus períodos de activación se superponen (condición 3). La sustitución σ, el conjunto de conflictos, unifica a los agentes, roles y fórmulas atómicas de un permiso y una prohibición. La anotación Σc no juega ningún papel al detectar conflictos, pero, como mostramos a continuación, debemos actualizar la anotación para reflejar nuevas restricciones y resolver conflictos. Por ejemplo, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) se cumple. Definimos a continuación cómo obtenemos el conjunto de normas en conflicto de un estado normativo Ω: DEF. 8. El conjunto finito, posiblemente vacío, de normas en conflicto de un estado normativo Ω, denotado como CFLS(Ω), se define como CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Resolución de Conflictos Una forma detallada de resolver conflictos puede hacerse a través de la unificación. Detectamos la superposición de las influencias normativas, es decir, cómo afectan los comportamientos de los agentes en la VO, y limitamos el 646 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) influencia de la prohibición. Ilustramos con diagramas de Venn en la Figura 2 la superposición de las influencias normativas (izquierda) que caracterizan un conflicto y la reducción necesaria para resolver el conflicto (derecha). La ilustración muestra el espacio de valores posibles para p(X, Y) y p(X, Y) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y) Fa:bp(Y, Z) PA:Rp(c, X) Figura 2: Superposición de Influencia (Izquierda) y Restricción (Derecha) dos porciones de este espacio que definen el alcance de influencia de las normas PA:Rp(c, X) y Fa:bp(Y, Z). El alcance de estas normas se superponen, ilustrado por la intersección de las casillas a la izquierda, en acciones con valores, por ejemplo, a, b, p(c, 2), . . . , a, b, p(c, n). La reducción de la prohibición elimina la intersección: traslada el alcance de la influencia de la norma fuera de la influencia del permiso. Si hubiera múltiples superposiciones entre una prohibición y varias autorizaciones, lo cual es probable que ocurra, entonces la prohibición será restringida múltiples veces para desplazar el alcance de la norma y evitar todas las intersecciones. El algoritmo mostrado en la Figura 3 describe cómo obtenemos un conjunto de normas sin conflictos. Mapea un conjunto existente Ω posiblemente con el algoritmo de resolución de conflictos conflictResolution(Ω, Ω) entrada Ω salida Ω comenzar Ω := Ω para cada ω ∈ Ω tal que ω = (Fa:r ¯ϕ) Σc, td, ta, te hacer si ω, ω, σ ∈ CFLS(Ω) entonces Ω := Ω − {ω} fin si fin para para cada ω ∈ Ω tal que ω = (Fτ1:τ2 ϕ) Σc, td, ta, te hacer ΣMAX c := [ ω,ω,σc ∈CFLS(Ω) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c), td, ta, te } fin para fin Figura 3: Algoritmo para Resolver Conflictos en un Conjunto de Normas mapeando normas a un nuevo conjunto Ω en el que los conflictos (si los hay) están resueltos. El algoritmo forma Ω como un conjunto que es libre de conflictos, lo que significa que las prohibiciones están anotadas con un conjunto de conflictos que indica qué asignaciones para variables deben evitarse. Inicialmente, Ω se establece como Ω. El algoritmo opera en dos etapas. En la primera etapa (primera para cada bucle), eliminamos todas las <br>prohibiciones conflictivas</br> ω = (Fa:r ¯ϕ) Σc, td, ta, te con pares de agente/rol y fórmulas concretas en conflicto a : r y ¯ϕ: la única forma de resolver conflictos derivados de tales prohibiciones es eliminarlas por completo, ya que no podemos restringir una norma completamente concreta. En la segunda etapa (segunda para cada bucle), se examinan las prohibiciones restantes en Ω: el conjunto CFLS(Ω) contiene todos los conflictos entre permisos y las prohibiciones restantes en Ω representadas como tuplas ω, ω, σc, con σc representando el conjunto de conflictos. Dado que una prohibición puede tener conflictos con varias autorizaciones, el conjunto CFLS(Ω) puede contener más de una tupla para cada prohibición. Para proporcionar un Ω que refleje todos estos conflictos para una prohibición específica, debemos formar ΣMAX c que contenga todos los conjuntos de conflictos σc para una prohibición dada ω. El conjunto maximal se utiliza para actualizar la anotación de la prohibición. Es importante explicar la necesidad de actualizar el conjunto de prohibiciones del conflicto. Los estados normativos cambian como resultado de las acciones de los agentes [11]: las permisiones, prohibiciones y obligaciones existentes son revocadas y/o se establecen nuevas como resultado de las interacciones de los agentes con el entorno y otros agentes. Cada vez que se añadan nuevas normas, debemos verificar nuevos conflictos e inconsistencias. Si solo aplicamos nuestro algoritmo a un par que consiste en una norma antigua y una nueva, entonces se puede ahorrar algo de reprocesamiento de pares de normas antiguas (que ya fueron tratadas anteriormente). La eliminación de normas del conjunto Ω se aborda de manera eficiente: cada permiso que se vaya a eliminar debe ser verificado primero en busca de conflictos con cualquier prohibición existente (se puede evitar el reprocesamiento si registramos el conflicto en lugar de detectarlo nuevamente). Si hay un conflicto, entonces el conjunto de conflictos habrá sido registrado en la anotación de prohibiciones; este conjunto de conflictos es eliminado de la anotación de prohibiciones. La eliminación de obligaciones sigue un proceso similar. Las prohibiciones se eliminan sin necesidad de considerar sus relaciones con otras normas. Nuestro algoritmo es correcto en el sentido de que proporciona, para un Ω dado, un nuevo Ω en el que i) se han eliminado todas las prohibiciones fundamentales que entran en conflicto con los permisos; y ii) todas las prohibiciones anotadas restantes (Fτ:τ ¯ϕ) Σc, td, ta, te no se unificarán con ninguno de los permisos en Ω, siempre que el unificador no aparezca en Σc. El primer requisito se aborda con el primer bucle for each, que hace precisamente esto: elimina todas las prohibiciones de base que se unifican con una obligación. El segundo requisito se aborda mediante el segundo bucle for each: cada prohibición tiene su anotación Σc agregada con ΣMAX c, acomodando así los unificadores de todas las autorizaciones que se unifican con la prohibición. Es fácil ver que el algoritmo siempre termina: cada uno de sus dos bucles recorre un conjunto finito, procesando un elemento a la vez. El conjunto CFLS(Ω) se calcula en un número finito de pasos, al igual que las operaciones de conjunto realizadas dentro de cada bucle. El algoritmo tiene, sin embargo, complejidad exponencial, ya que el cálculo de CFLS(Ω) requiere una comparación de pares de todos los elementos en Ω. Ilustramos nuestro algoritmo con el siguiente ejemplo. Que exista el siguiente estado normativo global Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:rp(a, b), 3, 4, 8, (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9, ff. El primer bucle elimina la prohibición terrestre, obteniendo así el siguiente Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, Pe:fp(g, h), 3, 4, 9, ff. Luego tenemos el siguiente conjunto de normas en conflicto CFLS(Ω): 8 < : * (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, {A/a, R/b, X/c, Y/d} +, * (FA:Rp(X, Y)) {}, 2, 2, 9, Pe:fp(g, h), 3, 4, 9, {A/e, R/f, X/g, Y/h} +9 =; Para cada prohibición ω ∈ Ω recuperamos todos los elementos de w, w, σ ∈ CFLS(Ω) y recopilamos sus σ en ΣMAX c. El Ω final es así: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; El conjunto anotado de conjuntos de conflictos debe entenderse como un registro de unificaciones pasadas, que informa cómo deben utilizarse las prohibiciones en el futuro para evitar conflictos con permisos. Mostramos en la Sección 5.1 cómo los agentes conscientes de las normas utilizan las anotaciones. 4. INCONSISTENCIAS NORMATIVAS Si se puede encontrar una sustitución σ que unifique una obligación y una prohibición, entonces se produce una situación de inconsistencia normativa [13]. La obligación exige que un agente realice una acción que está prohibida. Podemos reutilizar la maquinaria, presentada anteriormente para resolver conflictos entre permisos y prohibiciones, con el fin de a) detectar y b) resolver tales inconsistencias. Con la Definición 7, nosotros 3 El esfuerzo combinatorio ya no es necesario si en su lugar mantenemos un conjunto de normas sin conflictos: cada vez que se introduce una nueva norma, la comparamos con las existentes, haciendo así que el proceso de mantenimiento sea de complejidad lineal. El Sexto Internacional. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 647 expresa la naturaleza de un conflicto entre una prohibición y un permiso. De igual manera, una situación de inconsistencia puede ser definida reutilizando esta definición y reemplazando la modalidad deontica P con O. Podemos reutilizar la maquinaria para la resolución de conflictos, desarrollada previamente, para resolver inconsistencias. El algoritmo de resolución de conflictos se puede aplicar sin cambios para acumular un conjunto de conflictos máximo ΣMAX c para cada prohibición en Ω que se unifica con las obligaciones. 5. Sociedades de agentes conscientes de normas. Ahora describimos cómo nuestros VO regulados por normas dan lugar a sociedades de agentes conscientes de normas. Abordamos Sistemas Multiagentes abiertos y heterogéneos: acomodamos agentes externos proporcionándoles a cada uno de ellos un agente gobernador correspondiente [12]. Este es un tipo de chaperón que interactúa con un agente externo, y observa e informa sobre su comportamiento. Mostramos nuestra arquitectura en la Figura 4 a continuación: un número de Agentes Gobernadores Externos Espacio de Tuplas de Agentes ag1 £ ¢ ¡ gov1 ⇐⇒ . . . . . . . . . . . . Yo, s, Ξ, Ω Yo, s, Ξ, Ω · · · agn £ ¢ ¡ govn ⇐⇒ Figura 4: Arquitectura para Sociedades de Agentes Conscientes de Normas de agentes externos interactúan (indicado por el ) con sus agentes gobernadores correspondientes. Los agentes del gobernador tienen acceso a la descripción del VO, el estado actual de la promulgación del VO, el estado de ejecución global Ξ y el estado normativo global Ω. Los agentes del gobernador pueden escribir y leer de (indicado por el ⇐⇒) un espacio de memoria compartida (por ejemplo, una solución tipo pizarra implementada como un espacio de tuplas), actualizando la configuración global (indicada por el ) para reflejar la dinámica de la ejecución del VO. Los agentes gubernamentales son necesarios porque no podemos anticipar ni legislar sobre el diseño o comportamiento de agentes externos. A continuación, representamos cómo los pares de gobernador/agentes externos trabajan juntos: cualquier elección no determinista en el VO es decidida por el agente externo; cualquier aspecto normativo es considerado por el agente gobernador. El agente gobernador representa el agente externo dentro del VO. Como tal, tiene el identificador único del agente externo. El agente gobernador lleva un registro de todos los roles que el agente externo está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un rol simultáneamente. Definimos en la Figura 5 cómo funcionan los agentes gobernadores: utilizamos un programa lógico con este propósito. Mostramos 1 main(Id, Roles) ← 2 obtener tupla( I, s, Ξ, Ω )∧ 3 terminar(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 obtener tupla( I, s, Ξ, Ω )∧ 6 filtrar normas(Id, Roles, Ω, ΩId )∧ 7 discutir normas(Id, Roles, I, s, Ξ, ΩId , Acciones)∧ 8 actualizar tupla(Roles, Acciones, NuevosRoles)∧ 9 main(Id, NuevosRoles) Figura 5: Agente Gobernador como un Programa Lógico las líneas de nuestras cláusulas numeradas 1-9. La primera cláusula (líneas 1-3) describe la condición de terminación: get tuple/1 (línea 2) recupera I, s, Ξ, Ω del espacio de tuplas compartido y terminate/4 verifica si la ejecución actual de VO (registrada en Ξ) ha llegado a su fin. El equipo de agentes del gobernador sincroniza su acceso al espacio de tuplas [12], asegurando así que cada uno tenga la oportunidad de funcionar. La segunda cláusula (líneas 4-9) representa un bucle genérico cuando la condición de terminación de la primera cláusula no se cumple. En este caso, la tupla se recupera nuevamente (línea 5) y el agente gobernador procede (línea 6) a analizar el estado normativo global actual Ω con el objetivo de obtener el subconjunto ΩId ⊆ Ω de normas que hacen referencia al agente Id bajo los roles Roles. El predicado filter norms/4 recopila las normas que se aplican al agente Id (el agente externo del agente gobernador). En la línea 7, el agente gobernador, en posesión de las normas aplicables y otra información relevante, interactúa con el agente externo para decidir sobre un conjunto de Acciones que cumplen con las normas; estas acciones se utilizarán para actualizar (línea 8) el estado de ejecución global Ξ. En el proceso de actualizar el estado de ejecución, un nuevo conjunto de roles debe ser asignado al agente externo, representado como NewRoles. El agente gobernador sigue en bucle (línea 9) utilizando el identificador del agente externo y su nuevo conjunto de roles. 5.1 Uso de normas anotadas Ahora explicamos cómo los agentes conscientes de las normas utilizan normas anotadas. Lo hacemos a través de la definición de comprobación de predicado/2, que se cumple si su primer argumento, una acción candidata (en el formato de los elementos de Ξ de la Def. 2), está dentro de la influencia de una prohibición anotada ω, su segundo parámetro. La definición, como un programa lógico, se muestra en la Figura 6. Comprueba (línea 4) si el identificador del agente 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unificar(a, τ1, σ) ∧ unificar(r, τ2, σ) ∧ unificar( ¯ϕ, ϕ, σ)∧ 5 para todo(σ , (σc ∈ Σc, unificar(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figura 6: Comprobar si la Acción está dentro de la Influencia de la Norma Recortada y el rol de la acción se unifica con los términos apropiados τ1, τ2 de ω y que las acciones ¯ϕ, ϕ mismas se unifican, todo bajo el mismo unificador σ. Luego verifica (líneas 5-6) que σ no unifica con ninguno de los conjuntos de conflictos en Σc. Finalmente, en la línea 7 se comprueba si el tiempo de la acción está dentro de la influencia temporal normativa. La verificación de la no unificación de σ con ningún elemento de Σc merece una explicación. Los elementos de Σc son unificadores que indican qué valores no pueden tener las variables de la norma, es decir, representan vacíos en el alcance original de la influencia de las normas. El test equivale a preguntar si la acción está fuera de tales brechas, es decir, si la acción se encuentra dentro del alcance limitado de influencia de la norma. 6. En nuestra discusión anterior, se detectaron conflictos y inconsistencias normativas a través de una comparación directa de las fórmulas atómicas que representan la acción. Sin embargo, los conflictos e inconsistencias también pueden surgir indirectamente a través de las relaciones entre acciones. Por ejemplo, si p(X) equivale a q(X, X), entonces las normas PA:Rp(X) y FA:Rq(X, X) están en conflicto, ya que PA:Rp(X) se puede reescribir como PA:Rq(X, X) y, por lo tanto, tenemos tanto PA:Rq(X, X) como FA:Rq(X, X). En la discusión a continuación nos concentramos en el conflicto de normas, pero la inconsistencia normativa se puede abordar de manera similar, si cambiamos las modalidades deonticas de P por O. Las relaciones entre acciones dependen del dominio. Los diferentes dominios tienen formas distintas de relacionar sus acciones; los ingenieros construyen ontologías para representar dichas relaciones. Proponemos un medio simple para tener en cuenta tales relaciones y mostrar cómo estas pueden estar conectadas a los mecanismos introducidos anteriormente. En lugar de utilizar formalismos sofisticados para la construcción de ontologías, empleamos un conjunto de axiomas de dominio, definidos a continuación: DEF. 9. Los axiomas de dominio, denotados como Δ, son un conjunto finito y posiblemente vacío de fórmulas ϕ → (ϕ1 ∧ · · · ∧ ϕn) donde ϕ, ϕi, 1 ≤ i ≤ n, son fórmulas atómicas de primer orden. Nuestro ejemplo anterior puede ser capturado por Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}. Al representar y manipular explícitamente el conocimiento del dominio logramos generalidad: la misma maquinaria puede ser utilizada en diferentes dominios. Un conjunto de normas puede tener diferentes conflictos e inconsistencias, para distintos dominios de aplicación. 648 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 649 650 La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 651 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "norm inconsistency": {
            "translated_key": "inconsistencia normativa",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of <br>norm inconsistency</br> occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but <br>norm inconsistency</br> can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of <br>norm inconsistency</br> occurs [13].",
                "In the discussion below we concentrate on norm conflict, but <br>norm inconsistency</br> can be dealt with similarly, if we change the deontic modalities P for O."
            ],
            "translated_annotated_samples": [
                "INCONSISTENCIAS NORMATIVAS Si se puede encontrar una sustitución σ que unifique una obligación y una prohibición, entonces se produce una situación de <br>inconsistencia normativa</br> [13].",
                "En la discusión a continuación nos concentramos en el conflicto de normas, pero la <br>inconsistencia normativa</br> se puede abordar de manera similar, si cambiamos las modalidades deonticas de P por O."
            ],
            "translated_text": "Resolviendo conflictos e inconsistencias en organizaciones virtuales reguladas por normas, Wamberto Vasconcelos Dept. Las organizaciones virtuales regidas por normas definen, regulan y facilitan el intercambio coordinado de recursos y la resolución de problemas en sociedades de agentes. Con una explicación detallada de las normas, la apertura en las organizaciones virtuales se puede lograr: los nuevos componentes, diseñados por diversas partes, pueden ser fácilmente incorporados. Nos enfocamos en organizaciones virtuales realizadas como sistemas multiagente, en las cuales agentes humanos y de software interactúan para lograr objetivos individuales y globales. Sin embargo, cualquier descripción realista de las normas debería abordar su naturaleza dinámica: las normas cambiarán a medida que los agentes interactúen entre sí y con su entorno. Debido a la naturaleza cambiante de las normas o a las normas derivadas de diferentes organizaciones virtuales, habrá situaciones en las que una acción sea simultáneamente permitida y prohibida, es decir, surge un conflicto. Asimismo, habrá situaciones en las que una acción esté tanto obligada como prohibida, es decir, surge una inconsistencia. Introducimos un enfoque, basado en unificación de primer orden, para detectar y resolver tales conflictos e inconsistencias. En nuestra solución propuesta, anotamos una norma con el conjunto de valores que sus variables no deben tener para evitar un conflicto o una inconsistencia con otra norma. Nuestro enfoque acomoda de manera ordenada las interrelaciones dependientes del dominio entre acciones y los conflictos/inconsistencias indirectos que estos pueden causar. Más generalmente, podemos capturar una noción útil de delegación de acciones y normas entre agentes (y roles) y utilizarla para abordar conflictos/inconsistencias causados por la delegación de acciones. Ilustramos nuestro enfoque con un ejemplo de e-Ciencia en el que agentes respaldan servicios de Grid. Categorías y Descriptores de Asignaturas I.2.4 [Inteligencia Artificial]: Aplicaciones y Sistemas Expertos en Derecho; I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida-Sistemas Multiagente Términos Generales Algoritmos, Teoría 1. Las organizaciones virtuales (VOs) facilitan el intercambio coordinado de recursos y la resolución de problemas que involucran a diversas partes geográficamente remotas [9]. Los VOs definen y regulan las interacciones (facilitando así la coordinación) entre agentes de software y/o humanos que se comunican para lograr objetivos individuales y globales [16]. Los VOs se realizan como sistemas multiagente y una característica muy deseable de tales sistemas es la apertura, mediante la cual los nuevos componentes diseñados por otras partes se integran sin problemas. El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de sistemas multiagente (MASs) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]. Las normas regulan el comportamiento observable de agentes de software auto-interesados y heterogéneos, diseñados por diversas partes que pueden no confiar del todo entre sí [3, 24]. Sin embargo, los VOs regulados por normas pueden experimentar problemas cuando las normas asignadas a sus agentes están en conflicto (es decir, una acción está simultáneamente prohibida y permitida) o son inconsistentes (es decir, una acción está simultáneamente prohibida y obligada). Proponemos un medio para detectar y resolver automáticamente conflictos e inconsistencias en los VO regulados por normas. Hacemos uso de la unificación de términos de primer orden [8] para averiguar si y cómo se superponen las normas en su influencia (es decir, los agentes y los valores de los parámetros en las acciones de los agentes que las normas pueden afectar). Esto permite una solución detallada en la que se reduce la influencia de normas conflictivas o inconsistentes para conjuntos particulares de valores. Por ejemplo, las normas en las que el agente x tiene permitido enviar la oferta (ag1, 20) y el agente ag2 tiene prohibido enviar la oferta (y, z) (donde x, y, z son variables y ag1, ag2, 20 son constantes) están en conflicto porque sus agentes, acciones y términos (dentro de las acciones) se unifican. Resolvemos el conflicto anotando normas con conjuntos de valores que sus variables no pueden tener, reduciendo así su influencia. En nuestro ejemplo, el conflicto se evita si requerimos que la variable y no puede ser ag1 y que z no puede ser 20. Este documento está organizado de la siguiente manera. En la siguiente sección proporcionamos una definición minimalista para los VOs regulados por normas. En la sección 3 definimos formalmente los conflictos de normas, y explicamos cómo se detectan y resuelven. En la sección 4 describimos cómo la maquinaria de la sección anterior puede adaptarse para detectar y resolver inconsistencias normativas. En la sección 5 describimos cómo se utilizan nuestras normas limitadas en sociedades de agentes conscientes de las normas. En la sección 6 explicamos cómo nuestra maquinaria puede ser utilizada para detectar y resolver conflictos/inconsistencias indirectos, es decir, aquellos causados a través de relaciones entre acciones; extendemos y adaptamos la maquinaria para dar cabida a la delegación de normas. En la sección 7 ilustramos nuestro enfoque con un ejemplo de agentes de software regulados por normas que sirven a la Red. En la sección 8 revisamos el trabajo relacionado y en la sección 9 discutimos nuestras contribuciones y damos direcciones para trabajos futuros. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2. Las organizaciones virtuales permiten que diversas partes se unan para compartir recursos y participar en la resolución de problemas. Este paradigma ha encontrado fuertes aplicaciones en la orquestación de servicios web [14], la e-Ciencia [16] y la Red [9]. Los VOs, en su formulación más genérica, pueden ser vistos como artefactos de coordinación, permitiendo que agentes de software y humanos participen en formas sofisticadas de interacción. Representamos formalmente nuestros VO como máquinas de estados finitos en las que las acciones de los agentes individuales etiquetan los bordes entre estados discretos. Esto nos proporciona un denominador común más bajo: hay formas mucho más sofisticadas, convenientes y expresivas de representar las interacciones entre agentes (por ejemplo, AUML [19] e instituciones electrónicas [20], por nombrar algunas), pero para generalizar nuestro enfoque, asumiremos que cualquier formalismo de nivel superior puede ser mapeado a una máquina de estados finitos (posiblemente con cierta pérdida de expresividad). Mostramos en la Figura 1 un simple VO representado gráficamente como una máquina de estados finitos. Las etiquetas en los bordes con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figura 1: Ejemplo de VO como una Máquina de Estados Finitos que conectan los estados son fórmulas atómicas de primer orden, denotadas genéricamente como ϕ; representan acciones realizadas por agentes individuales. Definimos nuestras organizaciones virtuales de la siguiente manera: DEF. 1. Una organización virtual I es el triple S, s0, E, T donde S = {s1, . . . , sn} es un conjunto finito y no vacío de estados, s0 ∈ S es el estado inicial, E es un conjunto finito de aristas (s, s , ϕ), s, s ∈ S conectando s con s con una fórmula atómica de primer orden ϕ como etiqueta, y T ⊆ S es el conjunto de estados terminales. Ten en cuenta que los bordes están dirigidos, por lo que (s, t, ϕ) = (t, s, ϕ). La muestra VO de la Figura 1 se representa formalmente como I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2}. Suponemos una cuantificación existencial implícita en cualquier variable en ϕ, de modo que, por ejemplo, s(A, B) representa ∃A, B s(A, B). Los VO deben permitir dos tipos de no determinismo correspondientes a las elecciones que los agentes autónomos pueden hacer, a saber, i) el que surge cuando hay más de un borde que sale de un estado; y ii) el que surge de las variables en las fórmulas ϕ que etiquetan un borde, para las cuales el agente que realiza la acción instancia. Estos tipos de no determinismo son deseables ya que ayudan a definir mecanismos de coordinación genéricos y flexibles. Otro concepto importante que utilizamos son los roles de los agentes en las Organizaciones Virtuales (OV). Los roles, tal como se explotan en, por ejemplo, [18] y [20], nos ayudan a abstraernos de los agentes individuales y definir un patrón de comportamiento al cual cualquier agente que adopte un rol debería conformarse. Además, todos los agentes con el mismo rol tienen garantizados los mismos derechos, deberes y oportunidades. Haremos uso de dos conjuntos finitos y no vacíos, Agentes = {ag1, . . . , agn} y Roles = {r1, . . . , rm}, que representan, respectivamente, los conjuntos de identificadores de agentes y etiquetas de roles. Nos referimos genéricamente a los términos de primer orden, es decir, constantes, variables y funciones (anidadas) como τ. 2.1 Semántica de los VO La especificación de un VO como una máquina de estados finitos da lugar a un conjunto posiblemente infinito de historias de comportamientos computacionales, en las que se registran las acciones que etiquetan los caminos desde el estado inicial hasta un estado final. Aunque las acciones que conforman un VO se llevan a cabo de manera distribuida, proponemos un registro global explícito de todos los eventos. En la práctica, esto se puede lograr si requerimos que los agentes individuales declaren/informen las acciones que han llevado a cabo; esto asume agentes de confianza, naturalmente. Para registrar la autoría de la acción, anotamos las fórmulas con la identificación única de los agentes. Nuestra cuenta global explícita de todos los eventos es un conjunto de fórmulas atómicas fundamentales ϕ, es decir, solo permitimos que aparezcan constantes como términos de las fórmulas. Cada fórmula es un registro veraz de una acción especificada en el VO. Sin embargo, hay que tener en cuenta que en la especificación de VO no restringimos la sintaxis de las fórmulas: las variables pueden aparecer en ellas, y cuando un agente realiza una acción real, entonces cualquier variable de la acción especificada debe asignarse valores. Por lo tanto, definimos: DEF. 2. Un estado de ejecución global de un VO, denotado como Ξ, es un conjunto finito, posiblemente vacío, de tuplas a : r, ¯ϕ, t donde a ∈ Agentes es un identificador de agente, r ∈ Roles es una etiqueta de rol, ¯ϕ es una fórmula atómica de primer orden concreta, y t ∈ IN es una marca de tiempo. Por ejemplo, ag1:comprador, p(a, 34), 20 indica que el agente ag1 adoptando el rol de comprador realizó la acción p(a, 34) en el instante 20. Dado un VO I = S, s0, E, T, un estado de ejecución Ξ y un estado s ∈ S, podemos definir una función que obtiene un posible próximo estado de ejecución, es decir, h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, para un (s, s , ϕ) ∈ E. Dicha función h debe abordar los dos tipos de no determinismo mencionados anteriormente, así como la elección de los agentes potenciales que pueden llevar a cabo la acción y sus roles adoptados. También definimos una función para calcular el conjunto de todos los posibles estados de ejecución, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 VOs Regulados por Normas Abogamos por una separación de preocupaciones en la que la organización virtual se complementa con un conjunto explícito y separado de normas que regulan aún más el comportamiento de los agentes mientras participan en la puesta en marcha de una organización. La libertad de elección dada a los agentes (capturada a través del no determinismo de los VO, explicado anteriormente) debe ser limitada en algunas circunstancias. Por ejemplo, podríamos necesitar describir que quien llevó a cabo ϕ está obligado a llevar a cabo ϕ, de modo que si hay un punto de elección en el que ϕ aparece como etiqueta de un borde, entonces ese borde debería ser seguido. En lugar de incorporar aspectos normativos en el diseño de los agentes (por ejemplo, codificando explícitamente aspectos normativos en el comportamiento de los agentes) o en el propio VO (por ejemplo, abordando excepciones y comportamientos desviados en el mecanismo en sí), adoptamos la perspectiva de que un VO debería complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes mientras participan en la puesta en marcha de la organización. Esta separación de preocupaciones debería facilitar el diseño de los Sistemas Multiagente (MAS); sin embargo, los diferentes componentes (VOs y normas) deben unirse en algún momento del proceso de diseño. Nuestras normas están definidas de la siguiente manera: DEF. 3. Una norma, genéricamente referida como ν, es cualquier construcción de la forma Oτ:τ ϕ, Pτ:τ ϕ, o Fτ:τ ϕ, donde τ, τ son variables o constantes y ϕ es una fórmula atómica de primer orden. Adoptamos la notación de [18]: Oτ:τ ϕ representa una obligación para el agente τ que asume el rol τ de llevar a cabo ϕ; recordamos que τ, τ son variables, constantes y funciones aplicadas a términos (anidados). Pτ:τ ϕ y Fτ:τ ϕ representan, respectivamente, un permiso y una prohibición para el agente τ, desempeñando el rol τ para lograr ϕ. Supondremos que los tipos se utilizan para manipular adecuadamente variables de identificadores de agentes y etiquetas de roles. Proponemos representar formalmente las posiciones normativas de todos los agentes que llevan a cabo un VO. Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 Agentes no confiables pueden ser acomodados en esta propuesta, si asociamos a cada uno de ellos un agente gobernador que supervise las acciones del agente externo e informe sobre ellas. Este enfoque fue introducido en [12] y se explica en la sección 5. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 645 DEF. 4. Un estado normativo global Ω es un conjunto finito y posiblemente vacío de tuplas ω = ν, td, ta, te donde ν es una norma como se mencionó anteriormente y td, ta, te ∈ IN son, respectivamente, el momento en que ν fue declarada (introducida), cuando ν se vuelve activa y cuando ν expira, td ≤ ta < te. Vale la pena notar que no requerimos que las fórmulas atómicas de las normas sean concretas: podrían contener variables. Suponemos una cuantificación universal implícita en las variables A, R de las normas XA:Rϕ (para las modalidades deónticas X ∈ {O, P, F}), de modo que, por ejemplo, PA:Rp(X, b, c) significa ∀A ∈ Agentes.∀R ∈ Roles.∃X.PA:Rp(X, b, c). También nos referimos a las tuplas en Ω como normas. Los estados normativos globales complementan los estados de ejecución de los VO con información sobre las posiciones normativas de los agentes individuales. Podemos relacionarlos a través de una función para obtener un estado de ejecución siguiente de VOs regulado por una norma, es decir, g(I, Ξ, s, Ω, t) = Ξ, donde t representa el tiempo de la actualización. Por ejemplo, podríamos querer que todas las acciones prohibidas se excluyan del próximo estado de ejecución, es decir, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E y Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te. Podríamos desear igualmente que solo se elijan acciones permitidas para el próximo estado de ejecución. No legislamos, ni recomendamos de hecho, ninguna forma particular de regular las ONG. Sin embargo, ofrecemos bases simples para permitir la implementación de políticas arbitrarias. Del mismo modo que un estado normativo es útil para obtener el siguiente estado de ejecución de un VO, podemos usar un estado de ejecución para actualizar un estado normativo. Por ejemplo, podríamos querer eliminar cualquier obligación específica de un agente y rol, que ha sido llevada a cabo por ese agente y rol específico, es decir, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}. La gestión (es decir, la creación y actualización) de estados normativos globales es un área de investigación interesante. Se reporta un enfoque simple pero útil en [11]: las reglas de producción representan genéricamente cómo se deben actualizar las normas para reflejar lo que los agentes han hecho y qué normas se mantienen actualmente. En este documento nuestro enfoque no es proponer cómo deberían ser gestionadas las Ωs; asumimos que existe algún mecanismo que se encarga de eso. 3. CONFLICTOS NORMATIVOS Ahora definimos medios para detectar y resolver conflictos e inconsistencias normativas. Hacemos uso del concepto de unificación [1, 8] de términos de primer orden τ, es decir, constantes, variables o funciones (anidadas) con términos como parámetros. Inicialmente definimos las sustituciones: DEF. 5. Una sustitución σ es un conjunto finito y posiblemente vacío de pares x/τ, donde x es una variable y τ es un término. Definimos la aplicación de una sustitución de la siguiente manera: 1. c · σ = c para una constante c 2. x · σ = τ · σ si x/τ ∈ σ; de lo contrario, x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Donde X se refiere genéricamente a cualquiera de las modalidades deónticas O, P, F. La unificación entre dos términos τ, τ consiste en encontrar una sustitución σ (también llamada, en este contexto, el unificador de τ y τ) tal que τ · σ = τ · σ. Se han propuesto muchos algoritmos para resolver el problema de unificación, un tema fundamental en la demostración automatizada de teoremas [8], y trabajos más recientes ofrecen formas muy eficientes de obtener unificadores. Haremos uso de la siguiente definición: DEF. 6. La relación unify(τ, τ , σ) se cumple si y solo si existe un σ posiblemente vacío tal que τ · σ = τ · σ. También definimos la unificación de fórmulas atómicas como unificar(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) lo cual se cumple si y solo si τi · σ = τi · σ, 0 ≤ i ≤ n. La relación de unificación verifica si una sustitución σ es realmente un unificador para τ, τ pero también puede usarse para encontrar dicho σ. Suponemos que unificar es una implementación adecuada de un algoritmo de unificación que i) siempre termina (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene una complejidad computacional lineal. 3.1 Detección de Conflictos Un conflicto normativo surge cuando una fórmula atómica que etiqueta un borde en el VO, es decir, una acción, está simultáneamente permitida y prohibida [13]. En este caso, ambas normas están en conflicto con respecto a sus agentes, roles y parámetros (términos) de acciones específicas. Proponemos utilizar la unificación para detectar cuándo se superponen una prohibición y un permiso y emplear el unificador para resolver el conflicto. Por ejemplo, PA:Rp(c, X) y Fa:bp(Y, Z) están en conflicto ya que se unifican bajo σ = {A/a, R/b, Y/c, X/d}. Si, sin embargo, las variables en Fa:bp(Y, Z) no obtienen los valores en σ, entonces no habrá conflictos. Por lo tanto, proponemos anotar las prohibiciones en Ω con unificadores, llamados conjuntos de conflictos, y utilizar estas anotaciones para determinar qué variables no pueden ser los variables de la prohibición en futuras unificaciones con el fin de evitar un conflicto. Cada prohibición se considera a partir de ahora como teniendo tal anotación, denotada como (Fτ1:τ2 ϕ) Σc, td, ta, te. Inicialmente, esta anotación está vacía. Proponemos reducir la influencia de las prohibiciones, dando así a los agentes más opciones en las acciones que pueden realizar. Un enfoque similar podría ser adoptado mediante la restricción de permisos, limitando así las acciones disponibles para los agentes. Cada una de estas políticas es posible: no legislamos sobre ninguna de ellas ni damos preferencia sobre ninguna. En este documento estamos interesados en formalizar dichas políticas dentro de un marco matemático simple. Una prohibición puede estar en conflicto con varias autorizaciones en Ω. Por lo tanto, debemos encontrar el conjunto máximo de pares conflictivos de permisos y prohibiciones en Ω, realizando una inspección por pares. Esto requiere identificar la sustitución entre dos pares de normas que caracteriza un conflicto. Esto se captura formalmente mediante la siguiente definición: DEF. 7. Surge un conflicto entre dos tuplas ω, ω ∈ Ω bajo una sustitución σ, denotado como cflct(ω, ω , σ), si se cumplen las siguientes condiciones: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unificar(τ1, τ1, σ), unificar(τ2, τ2, σ), y unificar(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| Es decir, un conflicto de prohibición y permiso (condición 1) si, y solo si, los agentes y roles a los que se aplican y sus acciones, respectivamente, se unifican bajo σ (condición 2) y sus períodos de activación se superponen (condición 3). La sustitución σ, el conjunto de conflictos, unifica a los agentes, roles y fórmulas atómicas de un permiso y una prohibición. La anotación Σc no juega ningún papel al detectar conflictos, pero, como mostramos a continuación, debemos actualizar la anotación para reflejar nuevas restricciones y resolver conflictos. Por ejemplo, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) se cumple. Definimos a continuación cómo obtenemos el conjunto de normas en conflicto de un estado normativo Ω: DEF. 8. El conjunto finito, posiblemente vacío, de normas en conflicto de un estado normativo Ω, denotado como CFLS(Ω), se define como CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Resolución de Conflictos Una forma detallada de resolver conflictos puede hacerse a través de la unificación. Detectamos la superposición de las influencias normativas, es decir, cómo afectan los comportamientos de los agentes en la VO, y limitamos el 646 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) influencia de la prohibición. Ilustramos con diagramas de Venn en la Figura 2 la superposición de las influencias normativas (izquierda) que caracterizan un conflicto y la reducción necesaria para resolver el conflicto (derecha). La ilustración muestra el espacio de valores posibles para p(X, Y) y p(X, Y) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y) Fa:bp(Y, Z) PA:Rp(c, X) Figura 2: Superposición de Influencia (Izquierda) y Restricción (Derecha) dos porciones de este espacio que definen el alcance de influencia de las normas PA:Rp(c, X) y Fa:bp(Y, Z). El alcance de estas normas se superponen, ilustrado por la intersección de las casillas a la izquierda, en acciones con valores, por ejemplo, a, b, p(c, 2), . . . , a, b, p(c, n). La reducción de la prohibición elimina la intersección: traslada el alcance de la influencia de la norma fuera de la influencia del permiso. Si hubiera múltiples superposiciones entre una prohibición y varias autorizaciones, lo cual es probable que ocurra, entonces la prohibición será restringida múltiples veces para desplazar el alcance de la norma y evitar todas las intersecciones. El algoritmo mostrado en la Figura 3 describe cómo obtenemos un conjunto de normas sin conflictos. Mapea un conjunto existente Ω posiblemente con el algoritmo de resolución de conflictos conflictResolution(Ω, Ω) entrada Ω salida Ω comenzar Ω := Ω para cada ω ∈ Ω tal que ω = (Fa:r ¯ϕ) Σc, td, ta, te hacer si ω, ω, σ ∈ CFLS(Ω) entonces Ω := Ω − {ω} fin si fin para para cada ω ∈ Ω tal que ω = (Fτ1:τ2 ϕ) Σc, td, ta, te hacer ΣMAX c := [ ω,ω,σc ∈CFLS(Ω) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c), td, ta, te } fin para fin Figura 3: Algoritmo para Resolver Conflictos en un Conjunto de Normas mapeando normas a un nuevo conjunto Ω en el que los conflictos (si los hay) están resueltos. El algoritmo forma Ω como un conjunto que es libre de conflictos, lo que significa que las prohibiciones están anotadas con un conjunto de conflictos que indica qué asignaciones para variables deben evitarse. Inicialmente, Ω se establece como Ω. El algoritmo opera en dos etapas. En la primera etapa (primera para cada bucle), eliminamos todas las prohibiciones conflictivas ω = (Fa:r ¯ϕ) Σc, td, ta, te con pares de agente/rol y fórmulas concretas en conflicto a : r y ¯ϕ: la única forma de resolver conflictos derivados de tales prohibiciones es eliminarlas por completo, ya que no podemos restringir una norma completamente concreta. En la segunda etapa (segunda para cada bucle), se examinan las prohibiciones restantes en Ω: el conjunto CFLS(Ω) contiene todos los conflictos entre permisos y las prohibiciones restantes en Ω representadas como tuplas ω, ω, σc, con σc representando el conjunto de conflictos. Dado que una prohibición puede tener conflictos con varias autorizaciones, el conjunto CFLS(Ω) puede contener más de una tupla para cada prohibición. Para proporcionar un Ω que refleje todos estos conflictos para una prohibición específica, debemos formar ΣMAX c que contenga todos los conjuntos de conflictos σc para una prohibición dada ω. El conjunto maximal se utiliza para actualizar la anotación de la prohibición. Es importante explicar la necesidad de actualizar el conjunto de prohibiciones del conflicto. Los estados normativos cambian como resultado de las acciones de los agentes [11]: las permisiones, prohibiciones y obligaciones existentes son revocadas y/o se establecen nuevas como resultado de las interacciones de los agentes con el entorno y otros agentes. Cada vez que se añadan nuevas normas, debemos verificar nuevos conflictos e inconsistencias. Si solo aplicamos nuestro algoritmo a un par que consiste en una norma antigua y una nueva, entonces se puede ahorrar algo de reprocesamiento de pares de normas antiguas (que ya fueron tratadas anteriormente). La eliminación de normas del conjunto Ω se aborda de manera eficiente: cada permiso que se vaya a eliminar debe ser verificado primero en busca de conflictos con cualquier prohibición existente (se puede evitar el reprocesamiento si registramos el conflicto en lugar de detectarlo nuevamente). Si hay un conflicto, entonces el conjunto de conflictos habrá sido registrado en la anotación de prohibiciones; este conjunto de conflictos es eliminado de la anotación de prohibiciones. La eliminación de obligaciones sigue un proceso similar. Las prohibiciones se eliminan sin necesidad de considerar sus relaciones con otras normas. Nuestro algoritmo es correcto en el sentido de que proporciona, para un Ω dado, un nuevo Ω en el que i) se han eliminado todas las prohibiciones fundamentales que entran en conflicto con los permisos; y ii) todas las prohibiciones anotadas restantes (Fτ:τ ¯ϕ) Σc, td, ta, te no se unificarán con ninguno de los permisos en Ω, siempre que el unificador no aparezca en Σc. El primer requisito se aborda con el primer bucle for each, que hace precisamente esto: elimina todas las prohibiciones de base que se unifican con una obligación. El segundo requisito se aborda mediante el segundo bucle for each: cada prohibición tiene su anotación Σc agregada con ΣMAX c, acomodando así los unificadores de todas las autorizaciones que se unifican con la prohibición. Es fácil ver que el algoritmo siempre termina: cada uno de sus dos bucles recorre un conjunto finito, procesando un elemento a la vez. El conjunto CFLS(Ω) se calcula en un número finito de pasos, al igual que las operaciones de conjunto realizadas dentro de cada bucle. El algoritmo tiene, sin embargo, complejidad exponencial, ya que el cálculo de CFLS(Ω) requiere una comparación de pares de todos los elementos en Ω. Ilustramos nuestro algoritmo con el siguiente ejemplo. Que exista el siguiente estado normativo global Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:rp(a, b), 3, 4, 8, (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9, ff. El primer bucle elimina la prohibición terrestre, obteniendo así el siguiente Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, Pe:fp(g, h), 3, 4, 9, ff. Luego tenemos el siguiente conjunto de normas en conflicto CFLS(Ω): 8 < : * (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, {A/a, R/b, X/c, Y/d} +, * (FA:Rp(X, Y)) {}, 2, 2, 9, Pe:fp(g, h), 3, 4, 9, {A/e, R/f, X/g, Y/h} +9 =; Para cada prohibición ω ∈ Ω recuperamos todos los elementos de w, w, σ ∈ CFLS(Ω) y recopilamos sus σ en ΣMAX c. El Ω final es así: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; El conjunto anotado de conjuntos de conflictos debe entenderse como un registro de unificaciones pasadas, que informa cómo deben utilizarse las prohibiciones en el futuro para evitar conflictos con permisos. Mostramos en la Sección 5.1 cómo los agentes conscientes de las normas utilizan las anotaciones. 4. INCONSISTENCIAS NORMATIVAS Si se puede encontrar una sustitución σ que unifique una obligación y una prohibición, entonces se produce una situación de <br>inconsistencia normativa</br> [13]. La obligación exige que un agente realice una acción que está prohibida. Podemos reutilizar la maquinaria, presentada anteriormente para resolver conflictos entre permisos y prohibiciones, con el fin de a) detectar y b) resolver tales inconsistencias. Con la Definición 7, nosotros 3 El esfuerzo combinatorio ya no es necesario si en su lugar mantenemos un conjunto de normas sin conflictos: cada vez que se introduce una nueva norma, la comparamos con las existentes, haciendo así que el proceso de mantenimiento sea de complejidad lineal. El Sexto Internacional. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 647 expresa la naturaleza de un conflicto entre una prohibición y un permiso. De igual manera, una situación de inconsistencia puede ser definida reutilizando esta definición y reemplazando la modalidad deontica P con O. Podemos reutilizar la maquinaria para la resolución de conflictos, desarrollada previamente, para resolver inconsistencias. El algoritmo de resolución de conflictos se puede aplicar sin cambios para acumular un conjunto de conflictos máximo ΣMAX c para cada prohibición en Ω que se unifica con las obligaciones. 5. Sociedades de agentes conscientes de normas. Ahora describimos cómo nuestros VO regulados por normas dan lugar a sociedades de agentes conscientes de normas. Abordamos Sistemas Multiagentes abiertos y heterogéneos: acomodamos agentes externos proporcionándoles a cada uno de ellos un agente gobernador correspondiente [12]. Este es un tipo de chaperón que interactúa con un agente externo, y observa e informa sobre su comportamiento. Mostramos nuestra arquitectura en la Figura 4 a continuación: un número de Agentes Gobernadores Externos Espacio de Tuplas de Agentes ag1 £ ¢ ¡ gov1 ⇐⇒ . . . . . . . . . . . . Yo, s, Ξ, Ω Yo, s, Ξ, Ω · · · agn £ ¢ ¡ govn ⇐⇒ Figura 4: Arquitectura para Sociedades de Agentes Conscientes de Normas de agentes externos interactúan (indicado por el ) con sus agentes gobernadores correspondientes. Los agentes del gobernador tienen acceso a la descripción del VO, el estado actual de la promulgación del VO, el estado de ejecución global Ξ y el estado normativo global Ω. Los agentes del gobernador pueden escribir y leer de (indicado por el ⇐⇒) un espacio de memoria compartida (por ejemplo, una solución tipo pizarra implementada como un espacio de tuplas), actualizando la configuración global (indicada por el ) para reflejar la dinámica de la ejecución del VO. Los agentes gubernamentales son necesarios porque no podemos anticipar ni legislar sobre el diseño o comportamiento de agentes externos. A continuación, representamos cómo los pares de gobernador/agentes externos trabajan juntos: cualquier elección no determinista en el VO es decidida por el agente externo; cualquier aspecto normativo es considerado por el agente gobernador. El agente gobernador representa el agente externo dentro del VO. Como tal, tiene el identificador único del agente externo. El agente gobernador lleva un registro de todos los roles que el agente externo está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un rol simultáneamente. Definimos en la Figura 5 cómo funcionan los agentes gobernadores: utilizamos un programa lógico con este propósito. Mostramos 1 main(Id, Roles) ← 2 obtener tupla( I, s, Ξ, Ω )∧ 3 terminar(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 obtener tupla( I, s, Ξ, Ω )∧ 6 filtrar normas(Id, Roles, Ω, ΩId )∧ 7 discutir normas(Id, Roles, I, s, Ξ, ΩId , Acciones)∧ 8 actualizar tupla(Roles, Acciones, NuevosRoles)∧ 9 main(Id, NuevosRoles) Figura 5: Agente Gobernador como un Programa Lógico las líneas de nuestras cláusulas numeradas 1-9. La primera cláusula (líneas 1-3) describe la condición de terminación: get tuple/1 (línea 2) recupera I, s, Ξ, Ω del espacio de tuplas compartido y terminate/4 verifica si la ejecución actual de VO (registrada en Ξ) ha llegado a su fin. El equipo de agentes del gobernador sincroniza su acceso al espacio de tuplas [12], asegurando así que cada uno tenga la oportunidad de funcionar. La segunda cláusula (líneas 4-9) representa un bucle genérico cuando la condición de terminación de la primera cláusula no se cumple. En este caso, la tupla se recupera nuevamente (línea 5) y el agente gobernador procede (línea 6) a analizar el estado normativo global actual Ω con el objetivo de obtener el subconjunto ΩId ⊆ Ω de normas que hacen referencia al agente Id bajo los roles Roles. El predicado filter norms/4 recopila las normas que se aplican al agente Id (el agente externo del agente gobernador). En la línea 7, el agente gobernador, en posesión de las normas aplicables y otra información relevante, interactúa con el agente externo para decidir sobre un conjunto de Acciones que cumplen con las normas; estas acciones se utilizarán para actualizar (línea 8) el estado de ejecución global Ξ. En el proceso de actualizar el estado de ejecución, un nuevo conjunto de roles debe ser asignado al agente externo, representado como NewRoles. El agente gobernador sigue en bucle (línea 9) utilizando el identificador del agente externo y su nuevo conjunto de roles. 5.1 Uso de normas anotadas Ahora explicamos cómo los agentes conscientes de las normas utilizan normas anotadas. Lo hacemos a través de la definición de comprobación de predicado/2, que se cumple si su primer argumento, una acción candidata (en el formato de los elementos de Ξ de la Def. 2), está dentro de la influencia de una prohibición anotada ω, su segundo parámetro. La definición, como un programa lógico, se muestra en la Figura 6. Comprueba (línea 4) si el identificador del agente 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unificar(a, τ1, σ) ∧ unificar(r, τ2, σ) ∧ unificar( ¯ϕ, ϕ, σ)∧ 5 para todo(σ , (σc ∈ Σc, unificar(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figura 6: Comprobar si la Acción está dentro de la Influencia de la Norma Recortada y el rol de la acción se unifica con los términos apropiados τ1, τ2 de ω y que las acciones ¯ϕ, ϕ mismas se unifican, todo bajo el mismo unificador σ. Luego verifica (líneas 5-6) que σ no unifica con ninguno de los conjuntos de conflictos en Σc. Finalmente, en la línea 7 se comprueba si el tiempo de la acción está dentro de la influencia temporal normativa. La verificación de la no unificación de σ con ningún elemento de Σc merece una explicación. Los elementos de Σc son unificadores que indican qué valores no pueden tener las variables de la norma, es decir, representan vacíos en el alcance original de la influencia de las normas. El test equivale a preguntar si la acción está fuera de tales brechas, es decir, si la acción se encuentra dentro del alcance limitado de influencia de la norma. 6. En nuestra discusión anterior, se detectaron conflictos y inconsistencias normativas a través de una comparación directa de las fórmulas atómicas que representan la acción. Sin embargo, los conflictos e inconsistencias también pueden surgir indirectamente a través de las relaciones entre acciones. Por ejemplo, si p(X) equivale a q(X, X), entonces las normas PA:Rp(X) y FA:Rq(X, X) están en conflicto, ya que PA:Rp(X) se puede reescribir como PA:Rq(X, X) y, por lo tanto, tenemos tanto PA:Rq(X, X) como FA:Rq(X, X). En la discusión a continuación nos concentramos en el conflicto de normas, pero la <br>inconsistencia normativa</br> se puede abordar de manera similar, si cambiamos las modalidades deonticas de P por O. Las relaciones entre acciones dependen del dominio. Los diferentes dominios tienen formas distintas de relacionar sus acciones; los ingenieros construyen ontologías para representar dichas relaciones. Proponemos un medio simple para tener en cuenta tales relaciones y mostrar cómo estas pueden estar conectadas a los mecanismos introducidos anteriormente. En lugar de utilizar formalismos sofisticados para la construcción de ontologías, empleamos un conjunto de axiomas de dominio, definidos a continuación: DEF. 9. Los axiomas de dominio, denotados como Δ, son un conjunto finito y posiblemente vacío de fórmulas ϕ → (ϕ1 ∧ · · · ∧ ϕn) donde ϕ, ϕi, 1 ≤ i ≤ n, son fórmulas atómicas de primer orden. Nuestro ejemplo anterior puede ser capturado por Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}. Al representar y manipular explícitamente el conocimiento del dominio logramos generalidad: la misma maquinaria puede ser utilizada en diferentes dominios. Un conjunto de normas puede tener diferentes conflictos e inconsistencias, para distintos dominios de aplicación. 648 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 649 650 La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 651 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "external agent": {
            "translated_key": "agente externo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the <br>external agent</br> and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an <br>external agent</br>, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the <br>external agent</br>; any normative aspects are considered by the governor agent.",
                "The governor agent represents the <br>external agent</br> within the VO.",
                "As such, it has the unique identifier of the <br>external agent</br>.",
                "The governor agent keeps an account of all roles the <br>external agent</br> is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents <br>external agent</br>).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the <br>external agent</br> to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the <br>external agent</br>, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the <br>external agent</br> and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the <br>external agent</br> and reports on them.",
                "This is a kind of chaperon that interacts with an <br>external agent</br>, and observes and reports on its behaviour.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the <br>external agent</br>; any normative aspects are considered by the governor agent.",
                "The governor agent represents the <br>external agent</br> within the VO.",
                "As such, it has the unique identifier of the <br>external agent</br>."
            ],
            "translated_annotated_samples": [
                "Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 Agentes no confiables pueden ser acomodados en esta propuesta, si asociamos a cada uno de ellos un agente gobernador que supervise las acciones del <br>agente externo</br> e informe sobre ellas.",
                "Este es un tipo de chaperón que interactúa con un <br>agente externo</br>, y observa e informa sobre su comportamiento.",
                "A continuación, representamos cómo los pares de gobernador/agentes externos trabajan juntos: cualquier elección no determinista en el VO es decidida por el <br>agente externo</br>; cualquier aspecto normativo es considerado por el agente gobernador.",
                "El agente gobernador representa el <br>agente externo</br> dentro del VO.",
                "Como tal, tiene el identificador único del <br>agente externo</br>."
            ],
            "translated_text": "Resolviendo conflictos e inconsistencias en organizaciones virtuales reguladas por normas, Wamberto Vasconcelos Dept. Las organizaciones virtuales regidas por normas definen, regulan y facilitan el intercambio coordinado de recursos y la resolución de problemas en sociedades de agentes. Con una explicación detallada de las normas, la apertura en las organizaciones virtuales se puede lograr: los nuevos componentes, diseñados por diversas partes, pueden ser fácilmente incorporados. Nos enfocamos en organizaciones virtuales realizadas como sistemas multiagente, en las cuales agentes humanos y de software interactúan para lograr objetivos individuales y globales. Sin embargo, cualquier descripción realista de las normas debería abordar su naturaleza dinámica: las normas cambiarán a medida que los agentes interactúen entre sí y con su entorno. Debido a la naturaleza cambiante de las normas o a las normas derivadas de diferentes organizaciones virtuales, habrá situaciones en las que una acción sea simultáneamente permitida y prohibida, es decir, surge un conflicto. Asimismo, habrá situaciones en las que una acción esté tanto obligada como prohibida, es decir, surge una inconsistencia. Introducimos un enfoque, basado en unificación de primer orden, para detectar y resolver tales conflictos e inconsistencias. En nuestra solución propuesta, anotamos una norma con el conjunto de valores que sus variables no deben tener para evitar un conflicto o una inconsistencia con otra norma. Nuestro enfoque acomoda de manera ordenada las interrelaciones dependientes del dominio entre acciones y los conflictos/inconsistencias indirectos que estos pueden causar. Más generalmente, podemos capturar una noción útil de delegación de acciones y normas entre agentes (y roles) y utilizarla para abordar conflictos/inconsistencias causados por la delegación de acciones. Ilustramos nuestro enfoque con un ejemplo de e-Ciencia en el que agentes respaldan servicios de Grid. Categorías y Descriptores de Asignaturas I.2.4 [Inteligencia Artificial]: Aplicaciones y Sistemas Expertos en Derecho; I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida-Sistemas Multiagente Términos Generales Algoritmos, Teoría 1. Las organizaciones virtuales (VOs) facilitan el intercambio coordinado de recursos y la resolución de problemas que involucran a diversas partes geográficamente remotas [9]. Los VOs definen y regulan las interacciones (facilitando así la coordinación) entre agentes de software y/o humanos que se comunican para lograr objetivos individuales y globales [16]. Los VOs se realizan como sistemas multiagente y una característica muy deseable de tales sistemas es la apertura, mediante la cual los nuevos componentes diseñados por otras partes se integran sin problemas. El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de sistemas multiagente (MASs) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]. Las normas regulan el comportamiento observable de agentes de software auto-interesados y heterogéneos, diseñados por diversas partes que pueden no confiar del todo entre sí [3, 24]. Sin embargo, los VOs regulados por normas pueden experimentar problemas cuando las normas asignadas a sus agentes están en conflicto (es decir, una acción está simultáneamente prohibida y permitida) o son inconsistentes (es decir, una acción está simultáneamente prohibida y obligada). Proponemos un medio para detectar y resolver automáticamente conflictos e inconsistencias en los VO regulados por normas. Hacemos uso de la unificación de términos de primer orden [8] para averiguar si y cómo se superponen las normas en su influencia (es decir, los agentes y los valores de los parámetros en las acciones de los agentes que las normas pueden afectar). Esto permite una solución detallada en la que se reduce la influencia de normas conflictivas o inconsistentes para conjuntos particulares de valores. Por ejemplo, las normas en las que el agente x tiene permitido enviar la oferta (ag1, 20) y el agente ag2 tiene prohibido enviar la oferta (y, z) (donde x, y, z son variables y ag1, ag2, 20 son constantes) están en conflicto porque sus agentes, acciones y términos (dentro de las acciones) se unifican. Resolvemos el conflicto anotando normas con conjuntos de valores que sus variables no pueden tener, reduciendo así su influencia. En nuestro ejemplo, el conflicto se evita si requerimos que la variable y no puede ser ag1 y que z no puede ser 20. Este documento está organizado de la siguiente manera. En la siguiente sección proporcionamos una definición minimalista para los VOs regulados por normas. En la sección 3 definimos formalmente los conflictos de normas, y explicamos cómo se detectan y resuelven. En la sección 4 describimos cómo la maquinaria de la sección anterior puede adaptarse para detectar y resolver inconsistencias normativas. En la sección 5 describimos cómo se utilizan nuestras normas limitadas en sociedades de agentes conscientes de las normas. En la sección 6 explicamos cómo nuestra maquinaria puede ser utilizada para detectar y resolver conflictos/inconsistencias indirectos, es decir, aquellos causados a través de relaciones entre acciones; extendemos y adaptamos la maquinaria para dar cabida a la delegación de normas. En la sección 7 ilustramos nuestro enfoque con un ejemplo de agentes de software regulados por normas que sirven a la Red. En la sección 8 revisamos el trabajo relacionado y en la sección 9 discutimos nuestras contribuciones y damos direcciones para trabajos futuros. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2. Las organizaciones virtuales permiten que diversas partes se unan para compartir recursos y participar en la resolución de problemas. Este paradigma ha encontrado fuertes aplicaciones en la orquestación de servicios web [14], la e-Ciencia [16] y la Red [9]. Los VOs, en su formulación más genérica, pueden ser vistos como artefactos de coordinación, permitiendo que agentes de software y humanos participen en formas sofisticadas de interacción. Representamos formalmente nuestros VO como máquinas de estados finitos en las que las acciones de los agentes individuales etiquetan los bordes entre estados discretos. Esto nos proporciona un denominador común más bajo: hay formas mucho más sofisticadas, convenientes y expresivas de representar las interacciones entre agentes (por ejemplo, AUML [19] e instituciones electrónicas [20], por nombrar algunas), pero para generalizar nuestro enfoque, asumiremos que cualquier formalismo de nivel superior puede ser mapeado a una máquina de estados finitos (posiblemente con cierta pérdida de expresividad). Mostramos en la Figura 1 un simple VO representado gráficamente como una máquina de estados finitos. Las etiquetas en los bordes con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figura 1: Ejemplo de VO como una Máquina de Estados Finitos que conectan los estados son fórmulas atómicas de primer orden, denotadas genéricamente como ϕ; representan acciones realizadas por agentes individuales. Definimos nuestras organizaciones virtuales de la siguiente manera: DEF. 1. Una organización virtual I es el triple S, s0, E, T donde S = {s1, . . . , sn} es un conjunto finito y no vacío de estados, s0 ∈ S es el estado inicial, E es un conjunto finito de aristas (s, s , ϕ), s, s ∈ S conectando s con s con una fórmula atómica de primer orden ϕ como etiqueta, y T ⊆ S es el conjunto de estados terminales. Ten en cuenta que los bordes están dirigidos, por lo que (s, t, ϕ) = (t, s, ϕ). La muestra VO de la Figura 1 se representa formalmente como I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2}. Suponemos una cuantificación existencial implícita en cualquier variable en ϕ, de modo que, por ejemplo, s(A, B) representa ∃A, B s(A, B). Los VO deben permitir dos tipos de no determinismo correspondientes a las elecciones que los agentes autónomos pueden hacer, a saber, i) el que surge cuando hay más de un borde que sale de un estado; y ii) el que surge de las variables en las fórmulas ϕ que etiquetan un borde, para las cuales el agente que realiza la acción instancia. Estos tipos de no determinismo son deseables ya que ayudan a definir mecanismos de coordinación genéricos y flexibles. Otro concepto importante que utilizamos son los roles de los agentes en las Organizaciones Virtuales (OV). Los roles, tal como se explotan en, por ejemplo, [18] y [20], nos ayudan a abstraernos de los agentes individuales y definir un patrón de comportamiento al cual cualquier agente que adopte un rol debería conformarse. Además, todos los agentes con el mismo rol tienen garantizados los mismos derechos, deberes y oportunidades. Haremos uso de dos conjuntos finitos y no vacíos, Agentes = {ag1, . . . , agn} y Roles = {r1, . . . , rm}, que representan, respectivamente, los conjuntos de identificadores de agentes y etiquetas de roles. Nos referimos genéricamente a los términos de primer orden, es decir, constantes, variables y funciones (anidadas) como τ. 2.1 Semántica de los VO La especificación de un VO como una máquina de estados finitos da lugar a un conjunto posiblemente infinito de historias de comportamientos computacionales, en las que se registran las acciones que etiquetan los caminos desde el estado inicial hasta un estado final. Aunque las acciones que conforman un VO se llevan a cabo de manera distribuida, proponemos un registro global explícito de todos los eventos. En la práctica, esto se puede lograr si requerimos que los agentes individuales declaren/informen las acciones que han llevado a cabo; esto asume agentes de confianza, naturalmente. Para registrar la autoría de la acción, anotamos las fórmulas con la identificación única de los agentes. Nuestra cuenta global explícita de todos los eventos es un conjunto de fórmulas atómicas fundamentales ϕ, es decir, solo permitimos que aparezcan constantes como términos de las fórmulas. Cada fórmula es un registro veraz de una acción especificada en el VO. Sin embargo, hay que tener en cuenta que en la especificación de VO no restringimos la sintaxis de las fórmulas: las variables pueden aparecer en ellas, y cuando un agente realiza una acción real, entonces cualquier variable de la acción especificada debe asignarse valores. Por lo tanto, definimos: DEF. 2. Un estado de ejecución global de un VO, denotado como Ξ, es un conjunto finito, posiblemente vacío, de tuplas a : r, ¯ϕ, t donde a ∈ Agentes es un identificador de agente, r ∈ Roles es una etiqueta de rol, ¯ϕ es una fórmula atómica de primer orden concreta, y t ∈ IN es una marca de tiempo. Por ejemplo, ag1:comprador, p(a, 34), 20 indica que el agente ag1 adoptando el rol de comprador realizó la acción p(a, 34) en el instante 20. Dado un VO I = S, s0, E, T, un estado de ejecución Ξ y un estado s ∈ S, podemos definir una función que obtiene un posible próximo estado de ejecución, es decir, h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, para un (s, s , ϕ) ∈ E. Dicha función h debe abordar los dos tipos de no determinismo mencionados anteriormente, así como la elección de los agentes potenciales que pueden llevar a cabo la acción y sus roles adoptados. También definimos una función para calcular el conjunto de todos los posibles estados de ejecución, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 VOs Regulados por Normas Abogamos por una separación de preocupaciones en la que la organización virtual se complementa con un conjunto explícito y separado de normas que regulan aún más el comportamiento de los agentes mientras participan en la puesta en marcha de una organización. La libertad de elección dada a los agentes (capturada a través del no determinismo de los VO, explicado anteriormente) debe ser limitada en algunas circunstancias. Por ejemplo, podríamos necesitar describir que quien llevó a cabo ϕ está obligado a llevar a cabo ϕ, de modo que si hay un punto de elección en el que ϕ aparece como etiqueta de un borde, entonces ese borde debería ser seguido. En lugar de incorporar aspectos normativos en el diseño de los agentes (por ejemplo, codificando explícitamente aspectos normativos en el comportamiento de los agentes) o en el propio VO (por ejemplo, abordando excepciones y comportamientos desviados en el mecanismo en sí), adoptamos la perspectiva de que un VO debería complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes mientras participan en la puesta en marcha de la organización. Esta separación de preocupaciones debería facilitar el diseño de los Sistemas Multiagente (MAS); sin embargo, los diferentes componentes (VOs y normas) deben unirse en algún momento del proceso de diseño. Nuestras normas están definidas de la siguiente manera: DEF. 3. Una norma, genéricamente referida como ν, es cualquier construcción de la forma Oτ:τ ϕ, Pτ:τ ϕ, o Fτ:τ ϕ, donde τ, τ son variables o constantes y ϕ es una fórmula atómica de primer orden. Adoptamos la notación de [18]: Oτ:τ ϕ representa una obligación para el agente τ que asume el rol τ de llevar a cabo ϕ; recordamos que τ, τ son variables, constantes y funciones aplicadas a términos (anidados). Pτ:τ ϕ y Fτ:τ ϕ representan, respectivamente, un permiso y una prohibición para el agente τ, desempeñando el rol τ para lograr ϕ. Supondremos que los tipos se utilizan para manipular adecuadamente variables de identificadores de agentes y etiquetas de roles. Proponemos representar formalmente las posiciones normativas de todos los agentes que llevan a cabo un VO. Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 Agentes no confiables pueden ser acomodados en esta propuesta, si asociamos a cada uno de ellos un agente gobernador que supervise las acciones del <br>agente externo</br> e informe sobre ellas. Este enfoque fue introducido en [12] y se explica en la sección 5. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 645 DEF. 4. Un estado normativo global Ω es un conjunto finito y posiblemente vacío de tuplas ω = ν, td, ta, te donde ν es una norma como se mencionó anteriormente y td, ta, te ∈ IN son, respectivamente, el momento en que ν fue declarada (introducida), cuando ν se vuelve activa y cuando ν expira, td ≤ ta < te. Vale la pena notar que no requerimos que las fórmulas atómicas de las normas sean concretas: podrían contener variables. Suponemos una cuantificación universal implícita en las variables A, R de las normas XA:Rϕ (para las modalidades deónticas X ∈ {O, P, F}), de modo que, por ejemplo, PA:Rp(X, b, c) significa ∀A ∈ Agentes.∀R ∈ Roles.∃X.PA:Rp(X, b, c). También nos referimos a las tuplas en Ω como normas. Los estados normativos globales complementan los estados de ejecución de los VO con información sobre las posiciones normativas de los agentes individuales. Podemos relacionarlos a través de una función para obtener un estado de ejecución siguiente de VOs regulado por una norma, es decir, g(I, Ξ, s, Ω, t) = Ξ, donde t representa el tiempo de la actualización. Por ejemplo, podríamos querer que todas las acciones prohibidas se excluyan del próximo estado de ejecución, es decir, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E y Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te. Podríamos desear igualmente que solo se elijan acciones permitidas para el próximo estado de ejecución. No legislamos, ni recomendamos de hecho, ninguna forma particular de regular las ONG. Sin embargo, ofrecemos bases simples para permitir la implementación de políticas arbitrarias. Del mismo modo que un estado normativo es útil para obtener el siguiente estado de ejecución de un VO, podemos usar un estado de ejecución para actualizar un estado normativo. Por ejemplo, podríamos querer eliminar cualquier obligación específica de un agente y rol, que ha sido llevada a cabo por ese agente y rol específico, es decir, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}. La gestión (es decir, la creación y actualización) de estados normativos globales es un área de investigación interesante. Se reporta un enfoque simple pero útil en [11]: las reglas de producción representan genéricamente cómo se deben actualizar las normas para reflejar lo que los agentes han hecho y qué normas se mantienen actualmente. En este documento nuestro enfoque no es proponer cómo deberían ser gestionadas las Ωs; asumimos que existe algún mecanismo que se encarga de eso. 3. CONFLICTOS NORMATIVOS Ahora definimos medios para detectar y resolver conflictos e inconsistencias normativas. Hacemos uso del concepto de unificación [1, 8] de términos de primer orden τ, es decir, constantes, variables o funciones (anidadas) con términos como parámetros. Inicialmente definimos las sustituciones: DEF. 5. Una sustitución σ es un conjunto finito y posiblemente vacío de pares x/τ, donde x es una variable y τ es un término. Definimos la aplicación de una sustitución de la siguiente manera: 1. c · σ = c para una constante c 2. x · σ = τ · σ si x/τ ∈ σ; de lo contrario, x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Donde X se refiere genéricamente a cualquiera de las modalidades deónticas O, P, F. La unificación entre dos términos τ, τ consiste en encontrar una sustitución σ (también llamada, en este contexto, el unificador de τ y τ) tal que τ · σ = τ · σ. Se han propuesto muchos algoritmos para resolver el problema de unificación, un tema fundamental en la demostración automatizada de teoremas [8], y trabajos más recientes ofrecen formas muy eficientes de obtener unificadores. Haremos uso de la siguiente definición: DEF. 6. La relación unify(τ, τ , σ) se cumple si y solo si existe un σ posiblemente vacío tal que τ · σ = τ · σ. También definimos la unificación de fórmulas atómicas como unificar(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) lo cual se cumple si y solo si τi · σ = τi · σ, 0 ≤ i ≤ n. La relación de unificación verifica si una sustitución σ es realmente un unificador para τ, τ pero también puede usarse para encontrar dicho σ. Suponemos que unificar es una implementación adecuada de un algoritmo de unificación que i) siempre termina (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene una complejidad computacional lineal. 3.1 Detección de Conflictos Un conflicto normativo surge cuando una fórmula atómica que etiqueta un borde en el VO, es decir, una acción, está simultáneamente permitida y prohibida [13]. En este caso, ambas normas están en conflicto con respecto a sus agentes, roles y parámetros (términos) de acciones específicas. Proponemos utilizar la unificación para detectar cuándo se superponen una prohibición y un permiso y emplear el unificador para resolver el conflicto. Por ejemplo, PA:Rp(c, X) y Fa:bp(Y, Z) están en conflicto ya que se unifican bajo σ = {A/a, R/b, Y/c, X/d}. Si, sin embargo, las variables en Fa:bp(Y, Z) no obtienen los valores en σ, entonces no habrá conflictos. Por lo tanto, proponemos anotar las prohibiciones en Ω con unificadores, llamados conjuntos de conflictos, y utilizar estas anotaciones para determinar qué variables no pueden ser los variables de la prohibición en futuras unificaciones con el fin de evitar un conflicto. Cada prohibición se considera a partir de ahora como teniendo tal anotación, denotada como (Fτ1:τ2 ϕ) Σc, td, ta, te. Inicialmente, esta anotación está vacía. Proponemos reducir la influencia de las prohibiciones, dando así a los agentes más opciones en las acciones que pueden realizar. Un enfoque similar podría ser adoptado mediante la restricción de permisos, limitando así las acciones disponibles para los agentes. Cada una de estas políticas es posible: no legislamos sobre ninguna de ellas ni damos preferencia sobre ninguna. En este documento estamos interesados en formalizar dichas políticas dentro de un marco matemático simple. Una prohibición puede estar en conflicto con varias autorizaciones en Ω. Por lo tanto, debemos encontrar el conjunto máximo de pares conflictivos de permisos y prohibiciones en Ω, realizando una inspección por pares. Esto requiere identificar la sustitución entre dos pares de normas que caracteriza un conflicto. Esto se captura formalmente mediante la siguiente definición: DEF. 7. Surge un conflicto entre dos tuplas ω, ω ∈ Ω bajo una sustitución σ, denotado como cflct(ω, ω , σ), si se cumplen las siguientes condiciones: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unificar(τ1, τ1, σ), unificar(τ2, τ2, σ), y unificar(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| Es decir, un conflicto de prohibición y permiso (condición 1) si, y solo si, los agentes y roles a los que se aplican y sus acciones, respectivamente, se unifican bajo σ (condición 2) y sus períodos de activación se superponen (condición 3). La sustitución σ, el conjunto de conflictos, unifica a los agentes, roles y fórmulas atómicas de un permiso y una prohibición. La anotación Σc no juega ningún papel al detectar conflictos, pero, como mostramos a continuación, debemos actualizar la anotación para reflejar nuevas restricciones y resolver conflictos. Por ejemplo, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) se cumple. Definimos a continuación cómo obtenemos el conjunto de normas en conflicto de un estado normativo Ω: DEF. 8. El conjunto finito, posiblemente vacío, de normas en conflicto de un estado normativo Ω, denotado como CFLS(Ω), se define como CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Resolución de Conflictos Una forma detallada de resolver conflictos puede hacerse a través de la unificación. Detectamos la superposición de las influencias normativas, es decir, cómo afectan los comportamientos de los agentes en la VO, y limitamos el 646 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) influencia de la prohibición. Ilustramos con diagramas de Venn en la Figura 2 la superposición de las influencias normativas (izquierda) que caracterizan un conflicto y la reducción necesaria para resolver el conflicto (derecha). La ilustración muestra el espacio de valores posibles para p(X, Y) y p(X, Y) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y) Fa:bp(Y, Z) PA:Rp(c, X) Figura 2: Superposición de Influencia (Izquierda) y Restricción (Derecha) dos porciones de este espacio que definen el alcance de influencia de las normas PA:Rp(c, X) y Fa:bp(Y, Z). El alcance de estas normas se superponen, ilustrado por la intersección de las casillas a la izquierda, en acciones con valores, por ejemplo, a, b, p(c, 2), . . . , a, b, p(c, n). La reducción de la prohibición elimina la intersección: traslada el alcance de la influencia de la norma fuera de la influencia del permiso. Si hubiera múltiples superposiciones entre una prohibición y varias autorizaciones, lo cual es probable que ocurra, entonces la prohibición será restringida múltiples veces para desplazar el alcance de la norma y evitar todas las intersecciones. El algoritmo mostrado en la Figura 3 describe cómo obtenemos un conjunto de normas sin conflictos. Mapea un conjunto existente Ω posiblemente con el algoritmo de resolución de conflictos conflictResolution(Ω, Ω) entrada Ω salida Ω comenzar Ω := Ω para cada ω ∈ Ω tal que ω = (Fa:r ¯ϕ) Σc, td, ta, te hacer si ω, ω, σ ∈ CFLS(Ω) entonces Ω := Ω − {ω} fin si fin para para cada ω ∈ Ω tal que ω = (Fτ1:τ2 ϕ) Σc, td, ta, te hacer ΣMAX c := [ ω,ω,σc ∈CFLS(Ω) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c), td, ta, te } fin para fin Figura 3: Algoritmo para Resolver Conflictos en un Conjunto de Normas mapeando normas a un nuevo conjunto Ω en el que los conflictos (si los hay) están resueltos. El algoritmo forma Ω como un conjunto que es libre de conflictos, lo que significa que las prohibiciones están anotadas con un conjunto de conflictos que indica qué asignaciones para variables deben evitarse. Inicialmente, Ω se establece como Ω. El algoritmo opera en dos etapas. En la primera etapa (primera para cada bucle), eliminamos todas las prohibiciones conflictivas ω = (Fa:r ¯ϕ) Σc, td, ta, te con pares de agente/rol y fórmulas concretas en conflicto a : r y ¯ϕ: la única forma de resolver conflictos derivados de tales prohibiciones es eliminarlas por completo, ya que no podemos restringir una norma completamente concreta. En la segunda etapa (segunda para cada bucle), se examinan las prohibiciones restantes en Ω: el conjunto CFLS(Ω) contiene todos los conflictos entre permisos y las prohibiciones restantes en Ω representadas como tuplas ω, ω, σc, con σc representando el conjunto de conflictos. Dado que una prohibición puede tener conflictos con varias autorizaciones, el conjunto CFLS(Ω) puede contener más de una tupla para cada prohibición. Para proporcionar un Ω que refleje todos estos conflictos para una prohibición específica, debemos formar ΣMAX c que contenga todos los conjuntos de conflictos σc para una prohibición dada ω. El conjunto maximal se utiliza para actualizar la anotación de la prohibición. Es importante explicar la necesidad de actualizar el conjunto de prohibiciones del conflicto. Los estados normativos cambian como resultado de las acciones de los agentes [11]: las permisiones, prohibiciones y obligaciones existentes son revocadas y/o se establecen nuevas como resultado de las interacciones de los agentes con el entorno y otros agentes. Cada vez que se añadan nuevas normas, debemos verificar nuevos conflictos e inconsistencias. Si solo aplicamos nuestro algoritmo a un par que consiste en una norma antigua y una nueva, entonces se puede ahorrar algo de reprocesamiento de pares de normas antiguas (que ya fueron tratadas anteriormente). La eliminación de normas del conjunto Ω se aborda de manera eficiente: cada permiso que se vaya a eliminar debe ser verificado primero en busca de conflictos con cualquier prohibición existente (se puede evitar el reprocesamiento si registramos el conflicto en lugar de detectarlo nuevamente). Si hay un conflicto, entonces el conjunto de conflictos habrá sido registrado en la anotación de prohibiciones; este conjunto de conflictos es eliminado de la anotación de prohibiciones. La eliminación de obligaciones sigue un proceso similar. Las prohibiciones se eliminan sin necesidad de considerar sus relaciones con otras normas. Nuestro algoritmo es correcto en el sentido de que proporciona, para un Ω dado, un nuevo Ω en el que i) se han eliminado todas las prohibiciones fundamentales que entran en conflicto con los permisos; y ii) todas las prohibiciones anotadas restantes (Fτ:τ ¯ϕ) Σc, td, ta, te no se unificarán con ninguno de los permisos en Ω, siempre que el unificador no aparezca en Σc. El primer requisito se aborda con el primer bucle for each, que hace precisamente esto: elimina todas las prohibiciones de base que se unifican con una obligación. El segundo requisito se aborda mediante el segundo bucle for each: cada prohibición tiene su anotación Σc agregada con ΣMAX c, acomodando así los unificadores de todas las autorizaciones que se unifican con la prohibición. Es fácil ver que el algoritmo siempre termina: cada uno de sus dos bucles recorre un conjunto finito, procesando un elemento a la vez. El conjunto CFLS(Ω) se calcula en un número finito de pasos, al igual que las operaciones de conjunto realizadas dentro de cada bucle. El algoritmo tiene, sin embargo, complejidad exponencial, ya que el cálculo de CFLS(Ω) requiere una comparación de pares de todos los elementos en Ω. Ilustramos nuestro algoritmo con el siguiente ejemplo. Que exista el siguiente estado normativo global Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:rp(a, b), 3, 4, 8, (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9, ff. El primer bucle elimina la prohibición terrestre, obteniendo así el siguiente Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, Pe:fp(g, h), 3, 4, 9, ff. Luego tenemos el siguiente conjunto de normas en conflicto CFLS(Ω): 8 < : * (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, {A/a, R/b, X/c, Y/d} +, * (FA:Rp(X, Y)) {}, 2, 2, 9, Pe:fp(g, h), 3, 4, 9, {A/e, R/f, X/g, Y/h} +9 =; Para cada prohibición ω ∈ Ω recuperamos todos los elementos de w, w, σ ∈ CFLS(Ω) y recopilamos sus σ en ΣMAX c. El Ω final es así: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; El conjunto anotado de conjuntos de conflictos debe entenderse como un registro de unificaciones pasadas, que informa cómo deben utilizarse las prohibiciones en el futuro para evitar conflictos con permisos. Mostramos en la Sección 5.1 cómo los agentes conscientes de las normas utilizan las anotaciones. 4. INCONSISTENCIAS NORMATIVAS Si se puede encontrar una sustitución σ que unifique una obligación y una prohibición, entonces se produce una situación de inconsistencia normativa [13]. La obligación exige que un agente realice una acción que está prohibida. Podemos reutilizar la maquinaria, presentada anteriormente para resolver conflictos entre permisos y prohibiciones, con el fin de a) detectar y b) resolver tales inconsistencias. Con la Definición 7, nosotros 3 El esfuerzo combinatorio ya no es necesario si en su lugar mantenemos un conjunto de normas sin conflictos: cada vez que se introduce una nueva norma, la comparamos con las existentes, haciendo así que el proceso de mantenimiento sea de complejidad lineal. El Sexto Internacional. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 647 expresa la naturaleza de un conflicto entre una prohibición y un permiso. De igual manera, una situación de inconsistencia puede ser definida reutilizando esta definición y reemplazando la modalidad deontica P con O. Podemos reutilizar la maquinaria para la resolución de conflictos, desarrollada previamente, para resolver inconsistencias. El algoritmo de resolución de conflictos se puede aplicar sin cambios para acumular un conjunto de conflictos máximo ΣMAX c para cada prohibición en Ω que se unifica con las obligaciones. 5. Sociedades de agentes conscientes de normas. Ahora describimos cómo nuestros VO regulados por normas dan lugar a sociedades de agentes conscientes de normas. Abordamos Sistemas Multiagentes abiertos y heterogéneos: acomodamos agentes externos proporcionándoles a cada uno de ellos un agente gobernador correspondiente [12]. Este es un tipo de chaperón que interactúa con un <br>agente externo</br>, y observa e informa sobre su comportamiento. Mostramos nuestra arquitectura en la Figura 4 a continuación: un número de Agentes Gobernadores Externos Espacio de Tuplas de Agentes ag1 £ ¢ ¡ gov1 ⇐⇒ . . . . . . . . . . . . Yo, s, Ξ, Ω Yo, s, Ξ, Ω · · · agn £ ¢ ¡ govn ⇐⇒ Figura 4: Arquitectura para Sociedades de Agentes Conscientes de Normas de agentes externos interactúan (indicado por el ) con sus agentes gobernadores correspondientes. Los agentes del gobernador tienen acceso a la descripción del VO, el estado actual de la promulgación del VO, el estado de ejecución global Ξ y el estado normativo global Ω. Los agentes del gobernador pueden escribir y leer de (indicado por el ⇐⇒) un espacio de memoria compartida (por ejemplo, una solución tipo pizarra implementada como un espacio de tuplas), actualizando la configuración global (indicada por el ) para reflejar la dinámica de la ejecución del VO. Los agentes gubernamentales son necesarios porque no podemos anticipar ni legislar sobre el diseño o comportamiento de agentes externos. A continuación, representamos cómo los pares de gobernador/agentes externos trabajan juntos: cualquier elección no determinista en el VO es decidida por el <br>agente externo</br>; cualquier aspecto normativo es considerado por el agente gobernador. El agente gobernador representa el <br>agente externo</br> dentro del VO. Como tal, tiene el identificador único del <br>agente externo</br>. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "governor agent": {
            "translated_key": "agente gobernador",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a <br>governor agent</br> which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding <br>governor agent</br> [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the <br>governor agent</br>.",
                "The <br>governor agent</br> represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The <br>governor agent</br> keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: <br>governor agent</br> as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the <br>governor agent</br> proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the <br>governor agent</br>, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The <br>governor agent</br> keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a <br>governor agent</br> which supervises the actions of the external agent and reports on them.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding <br>governor agent</br> [12].",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the <br>governor agent</br>.",
                "The <br>governor agent</br> represents the external agent within the VO.",
                "The <br>governor agent</br> keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously."
            ],
            "translated_annotated_samples": [
                "Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 Agentes no confiables pueden ser acomodados en esta propuesta, si asociamos a cada uno de ellos un <br>agente gobernador</br> que supervise las acciones del agente externo e informe sobre ellas.",
                "Abordamos Sistemas Multiagentes abiertos y heterogéneos: acomodamos agentes externos proporcionándoles a cada uno de ellos un <br>agente gobernador</br> correspondiente [12].",
                "A continuación, representamos cómo los pares de gobernador/agentes externos trabajan juntos: cualquier elección no determinista en el VO es decidida por el agente externo; cualquier aspecto normativo es considerado por el <br>agente gobernador</br>.",
                "El <br>agente gobernador</br> representa el agente externo dentro del VO.",
                "El <br>agente gobernador</br> lleva un registro de todos los roles que el agente externo está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un rol simultáneamente."
            ],
            "translated_text": "Resolviendo conflictos e inconsistencias en organizaciones virtuales reguladas por normas, Wamberto Vasconcelos Dept. Las organizaciones virtuales regidas por normas definen, regulan y facilitan el intercambio coordinado de recursos y la resolución de problemas en sociedades de agentes. Con una explicación detallada de las normas, la apertura en las organizaciones virtuales se puede lograr: los nuevos componentes, diseñados por diversas partes, pueden ser fácilmente incorporados. Nos enfocamos en organizaciones virtuales realizadas como sistemas multiagente, en las cuales agentes humanos y de software interactúan para lograr objetivos individuales y globales. Sin embargo, cualquier descripción realista de las normas debería abordar su naturaleza dinámica: las normas cambiarán a medida que los agentes interactúen entre sí y con su entorno. Debido a la naturaleza cambiante de las normas o a las normas derivadas de diferentes organizaciones virtuales, habrá situaciones en las que una acción sea simultáneamente permitida y prohibida, es decir, surge un conflicto. Asimismo, habrá situaciones en las que una acción esté tanto obligada como prohibida, es decir, surge una inconsistencia. Introducimos un enfoque, basado en unificación de primer orden, para detectar y resolver tales conflictos e inconsistencias. En nuestra solución propuesta, anotamos una norma con el conjunto de valores que sus variables no deben tener para evitar un conflicto o una inconsistencia con otra norma. Nuestro enfoque acomoda de manera ordenada las interrelaciones dependientes del dominio entre acciones y los conflictos/inconsistencias indirectos que estos pueden causar. Más generalmente, podemos capturar una noción útil de delegación de acciones y normas entre agentes (y roles) y utilizarla para abordar conflictos/inconsistencias causados por la delegación de acciones. Ilustramos nuestro enfoque con un ejemplo de e-Ciencia en el que agentes respaldan servicios de Grid. Categorías y Descriptores de Asignaturas I.2.4 [Inteligencia Artificial]: Aplicaciones y Sistemas Expertos en Derecho; I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida-Sistemas Multiagente Términos Generales Algoritmos, Teoría 1. Las organizaciones virtuales (VOs) facilitan el intercambio coordinado de recursos y la resolución de problemas que involucran a diversas partes geográficamente remotas [9]. Los VOs definen y regulan las interacciones (facilitando así la coordinación) entre agentes de software y/o humanos que se comunican para lograr objetivos individuales y globales [16]. Los VOs se realizan como sistemas multiagente y una característica muy deseable de tales sistemas es la apertura, mediante la cual los nuevos componentes diseñados por otras partes se integran sin problemas. El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de sistemas multiagente (MASs) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]. Las normas regulan el comportamiento observable de agentes de software auto-interesados y heterogéneos, diseñados por diversas partes que pueden no confiar del todo entre sí [3, 24]. Sin embargo, los VOs regulados por normas pueden experimentar problemas cuando las normas asignadas a sus agentes están en conflicto (es decir, una acción está simultáneamente prohibida y permitida) o son inconsistentes (es decir, una acción está simultáneamente prohibida y obligada). Proponemos un medio para detectar y resolver automáticamente conflictos e inconsistencias en los VO regulados por normas. Hacemos uso de la unificación de términos de primer orden [8] para averiguar si y cómo se superponen las normas en su influencia (es decir, los agentes y los valores de los parámetros en las acciones de los agentes que las normas pueden afectar). Esto permite una solución detallada en la que se reduce la influencia de normas conflictivas o inconsistentes para conjuntos particulares de valores. Por ejemplo, las normas en las que el agente x tiene permitido enviar la oferta (ag1, 20) y el agente ag2 tiene prohibido enviar la oferta (y, z) (donde x, y, z son variables y ag1, ag2, 20 son constantes) están en conflicto porque sus agentes, acciones y términos (dentro de las acciones) se unifican. Resolvemos el conflicto anotando normas con conjuntos de valores que sus variables no pueden tener, reduciendo así su influencia. En nuestro ejemplo, el conflicto se evita si requerimos que la variable y no puede ser ag1 y que z no puede ser 20. Este documento está organizado de la siguiente manera. En la siguiente sección proporcionamos una definición minimalista para los VOs regulados por normas. En la sección 3 definimos formalmente los conflictos de normas, y explicamos cómo se detectan y resuelven. En la sección 4 describimos cómo la maquinaria de la sección anterior puede adaptarse para detectar y resolver inconsistencias normativas. En la sección 5 describimos cómo se utilizan nuestras normas limitadas en sociedades de agentes conscientes de las normas. En la sección 6 explicamos cómo nuestra maquinaria puede ser utilizada para detectar y resolver conflictos/inconsistencias indirectos, es decir, aquellos causados a través de relaciones entre acciones; extendemos y adaptamos la maquinaria para dar cabida a la delegación de normas. En la sección 7 ilustramos nuestro enfoque con un ejemplo de agentes de software regulados por normas que sirven a la Red. En la sección 8 revisamos el trabajo relacionado y en la sección 9 discutimos nuestras contribuciones y damos direcciones para trabajos futuros. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2. Las organizaciones virtuales permiten que diversas partes se unan para compartir recursos y participar en la resolución de problemas. Este paradigma ha encontrado fuertes aplicaciones en la orquestación de servicios web [14], la e-Ciencia [16] y la Red [9]. Los VOs, en su formulación más genérica, pueden ser vistos como artefactos de coordinación, permitiendo que agentes de software y humanos participen en formas sofisticadas de interacción. Representamos formalmente nuestros VO como máquinas de estados finitos en las que las acciones de los agentes individuales etiquetan los bordes entre estados discretos. Esto nos proporciona un denominador común más bajo: hay formas mucho más sofisticadas, convenientes y expresivas de representar las interacciones entre agentes (por ejemplo, AUML [19] e instituciones electrónicas [20], por nombrar algunas), pero para generalizar nuestro enfoque, asumiremos que cualquier formalismo de nivel superior puede ser mapeado a una máquina de estados finitos (posiblemente con cierta pérdida de expresividad). Mostramos en la Figura 1 un simple VO representado gráficamente como una máquina de estados finitos. Las etiquetas en los bordes con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figura 1: Ejemplo de VO como una Máquina de Estados Finitos que conectan los estados son fórmulas atómicas de primer orden, denotadas genéricamente como ϕ; representan acciones realizadas por agentes individuales. Definimos nuestras organizaciones virtuales de la siguiente manera: DEF. 1. Una organización virtual I es el triple S, s0, E, T donde S = {s1, . . . , sn} es un conjunto finito y no vacío de estados, s0 ∈ S es el estado inicial, E es un conjunto finito de aristas (s, s , ϕ), s, s ∈ S conectando s con s con una fórmula atómica de primer orden ϕ como etiqueta, y T ⊆ S es el conjunto de estados terminales. Ten en cuenta que los bordes están dirigidos, por lo que (s, t, ϕ) = (t, s, ϕ). La muestra VO de la Figura 1 se representa formalmente como I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2}. Suponemos una cuantificación existencial implícita en cualquier variable en ϕ, de modo que, por ejemplo, s(A, B) representa ∃A, B s(A, B). Los VO deben permitir dos tipos de no determinismo correspondientes a las elecciones que los agentes autónomos pueden hacer, a saber, i) el que surge cuando hay más de un borde que sale de un estado; y ii) el que surge de las variables en las fórmulas ϕ que etiquetan un borde, para las cuales el agente que realiza la acción instancia. Estos tipos de no determinismo son deseables ya que ayudan a definir mecanismos de coordinación genéricos y flexibles. Otro concepto importante que utilizamos son los roles de los agentes en las Organizaciones Virtuales (OV). Los roles, tal como se explotan en, por ejemplo, [18] y [20], nos ayudan a abstraernos de los agentes individuales y definir un patrón de comportamiento al cual cualquier agente que adopte un rol debería conformarse. Además, todos los agentes con el mismo rol tienen garantizados los mismos derechos, deberes y oportunidades. Haremos uso de dos conjuntos finitos y no vacíos, Agentes = {ag1, . . . , agn} y Roles = {r1, . . . , rm}, que representan, respectivamente, los conjuntos de identificadores de agentes y etiquetas de roles. Nos referimos genéricamente a los términos de primer orden, es decir, constantes, variables y funciones (anidadas) como τ. 2.1 Semántica de los VO La especificación de un VO como una máquina de estados finitos da lugar a un conjunto posiblemente infinito de historias de comportamientos computacionales, en las que se registran las acciones que etiquetan los caminos desde el estado inicial hasta un estado final. Aunque las acciones que conforman un VO se llevan a cabo de manera distribuida, proponemos un registro global explícito de todos los eventos. En la práctica, esto se puede lograr si requerimos que los agentes individuales declaren/informen las acciones que han llevado a cabo; esto asume agentes de confianza, naturalmente. Para registrar la autoría de la acción, anotamos las fórmulas con la identificación única de los agentes. Nuestra cuenta global explícita de todos los eventos es un conjunto de fórmulas atómicas fundamentales ϕ, es decir, solo permitimos que aparezcan constantes como términos de las fórmulas. Cada fórmula es un registro veraz de una acción especificada en el VO. Sin embargo, hay que tener en cuenta que en la especificación de VO no restringimos la sintaxis de las fórmulas: las variables pueden aparecer en ellas, y cuando un agente realiza una acción real, entonces cualquier variable de la acción especificada debe asignarse valores. Por lo tanto, definimos: DEF. 2. Un estado de ejecución global de un VO, denotado como Ξ, es un conjunto finito, posiblemente vacío, de tuplas a : r, ¯ϕ, t donde a ∈ Agentes es un identificador de agente, r ∈ Roles es una etiqueta de rol, ¯ϕ es una fórmula atómica de primer orden concreta, y t ∈ IN es una marca de tiempo. Por ejemplo, ag1:comprador, p(a, 34), 20 indica que el agente ag1 adoptando el rol de comprador realizó la acción p(a, 34) en el instante 20. Dado un VO I = S, s0, E, T, un estado de ejecución Ξ y un estado s ∈ S, podemos definir una función que obtiene un posible próximo estado de ejecución, es decir, h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, para un (s, s , ϕ) ∈ E. Dicha función h debe abordar los dos tipos de no determinismo mencionados anteriormente, así como la elección de los agentes potenciales que pueden llevar a cabo la acción y sus roles adoptados. También definimos una función para calcular el conjunto de todos los posibles estados de ejecución, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 VOs Regulados por Normas Abogamos por una separación de preocupaciones en la que la organización virtual se complementa con un conjunto explícito y separado de normas que regulan aún más el comportamiento de los agentes mientras participan en la puesta en marcha de una organización. La libertad de elección dada a los agentes (capturada a través del no determinismo de los VO, explicado anteriormente) debe ser limitada en algunas circunstancias. Por ejemplo, podríamos necesitar describir que quien llevó a cabo ϕ está obligado a llevar a cabo ϕ, de modo que si hay un punto de elección en el que ϕ aparece como etiqueta de un borde, entonces ese borde debería ser seguido. En lugar de incorporar aspectos normativos en el diseño de los agentes (por ejemplo, codificando explícitamente aspectos normativos en el comportamiento de los agentes) o en el propio VO (por ejemplo, abordando excepciones y comportamientos desviados en el mecanismo en sí), adoptamos la perspectiva de que un VO debería complementarse con un conjunto separado de normas que regulen aún más el comportamiento de los agentes mientras participan en la puesta en marcha de la organización. Esta separación de preocupaciones debería facilitar el diseño de los Sistemas Multiagente (MAS); sin embargo, los diferentes componentes (VOs y normas) deben unirse en algún momento del proceso de diseño. Nuestras normas están definidas de la siguiente manera: DEF. 3. Una norma, genéricamente referida como ν, es cualquier construcción de la forma Oτ:τ ϕ, Pτ:τ ϕ, o Fτ:τ ϕ, donde τ, τ son variables o constantes y ϕ es una fórmula atómica de primer orden. Adoptamos la notación de [18]: Oτ:τ ϕ representa una obligación para el agente τ que asume el rol τ de llevar a cabo ϕ; recordamos que τ, τ son variables, constantes y funciones aplicadas a términos (anidados). Pτ:τ ϕ y Fτ:τ ϕ representan, respectivamente, un permiso y una prohibición para el agente τ, desempeñando el rol τ para lograr ϕ. Supondremos que los tipos se utilizan para manipular adecuadamente variables de identificadores de agentes y etiquetas de roles. Proponemos representar formalmente las posiciones normativas de todos los agentes que llevan a cabo un VO. Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 Agentes no confiables pueden ser acomodados en esta propuesta, si asociamos a cada uno de ellos un <br>agente gobernador</br> que supervise las acciones del agente externo e informe sobre ellas. Este enfoque fue introducido en [12] y se explica en la sección 5. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 645 DEF. 4. Un estado normativo global Ω es un conjunto finito y posiblemente vacío de tuplas ω = ν, td, ta, te donde ν es una norma como se mencionó anteriormente y td, ta, te ∈ IN son, respectivamente, el momento en que ν fue declarada (introducida), cuando ν se vuelve activa y cuando ν expira, td ≤ ta < te. Vale la pena notar que no requerimos que las fórmulas atómicas de las normas sean concretas: podrían contener variables. Suponemos una cuantificación universal implícita en las variables A, R de las normas XA:Rϕ (para las modalidades deónticas X ∈ {O, P, F}), de modo que, por ejemplo, PA:Rp(X, b, c) significa ∀A ∈ Agentes.∀R ∈ Roles.∃X.PA:Rp(X, b, c). También nos referimos a las tuplas en Ω como normas. Los estados normativos globales complementan los estados de ejecución de los VO con información sobre las posiciones normativas de los agentes individuales. Podemos relacionarlos a través de una función para obtener un estado de ejecución siguiente de VOs regulado por una norma, es decir, g(I, Ξ, s, Ω, t) = Ξ, donde t representa el tiempo de la actualización. Por ejemplo, podríamos querer que todas las acciones prohibidas se excluyan del próximo estado de ejecución, es decir, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E y Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te. Podríamos desear igualmente que solo se elijan acciones permitidas para el próximo estado de ejecución. No legislamos, ni recomendamos de hecho, ninguna forma particular de regular las ONG. Sin embargo, ofrecemos bases simples para permitir la implementación de políticas arbitrarias. Del mismo modo que un estado normativo es útil para obtener el siguiente estado de ejecución de un VO, podemos usar un estado de ejecución para actualizar un estado normativo. Por ejemplo, podríamos querer eliminar cualquier obligación específica de un agente y rol, que ha sido llevada a cabo por ese agente y rol específico, es decir, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}. La gestión (es decir, la creación y actualización) de estados normativos globales es un área de investigación interesante. Se reporta un enfoque simple pero útil en [11]: las reglas de producción representan genéricamente cómo se deben actualizar las normas para reflejar lo que los agentes han hecho y qué normas se mantienen actualmente. En este documento nuestro enfoque no es proponer cómo deberían ser gestionadas las Ωs; asumimos que existe algún mecanismo que se encarga de eso. 3. CONFLICTOS NORMATIVOS Ahora definimos medios para detectar y resolver conflictos e inconsistencias normativas. Hacemos uso del concepto de unificación [1, 8] de términos de primer orden τ, es decir, constantes, variables o funciones (anidadas) con términos como parámetros. Inicialmente definimos las sustituciones: DEF. 5. Una sustitución σ es un conjunto finito y posiblemente vacío de pares x/τ, donde x es una variable y τ es un término. Definimos la aplicación de una sustitución de la siguiente manera: 1. c · σ = c para una constante c 2. x · σ = τ · σ si x/τ ∈ σ; de lo contrario, x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Donde X se refiere genéricamente a cualquiera de las modalidades deónticas O, P, F. La unificación entre dos términos τ, τ consiste en encontrar una sustitución σ (también llamada, en este contexto, el unificador de τ y τ) tal que τ · σ = τ · σ. Se han propuesto muchos algoritmos para resolver el problema de unificación, un tema fundamental en la demostración automatizada de teoremas [8], y trabajos más recientes ofrecen formas muy eficientes de obtener unificadores. Haremos uso de la siguiente definición: DEF. 6. La relación unify(τ, τ , σ) se cumple si y solo si existe un σ posiblemente vacío tal que τ · σ = τ · σ. También definimos la unificación de fórmulas atómicas como unificar(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) lo cual se cumple si y solo si τi · σ = τi · σ, 0 ≤ i ≤ n. La relación de unificación verifica si una sustitución σ es realmente un unificador para τ, τ pero también puede usarse para encontrar dicho σ. Suponemos que unificar es una implementación adecuada de un algoritmo de unificación que i) siempre termina (posiblemente fallando, si no se puede encontrar un unificador); ii) es correcto; y iii) tiene una complejidad computacional lineal. 3.1 Detección de Conflictos Un conflicto normativo surge cuando una fórmula atómica que etiqueta un borde en el VO, es decir, una acción, está simultáneamente permitida y prohibida [13]. En este caso, ambas normas están en conflicto con respecto a sus agentes, roles y parámetros (términos) de acciones específicas. Proponemos utilizar la unificación para detectar cuándo se superponen una prohibición y un permiso y emplear el unificador para resolver el conflicto. Por ejemplo, PA:Rp(c, X) y Fa:bp(Y, Z) están en conflicto ya que se unifican bajo σ = {A/a, R/b, Y/c, X/d}. Si, sin embargo, las variables en Fa:bp(Y, Z) no obtienen los valores en σ, entonces no habrá conflictos. Por lo tanto, proponemos anotar las prohibiciones en Ω con unificadores, llamados conjuntos de conflictos, y utilizar estas anotaciones para determinar qué variables no pueden ser los variables de la prohibición en futuras unificaciones con el fin de evitar un conflicto. Cada prohibición se considera a partir de ahora como teniendo tal anotación, denotada como (Fτ1:τ2 ϕ) Σc, td, ta, te. Inicialmente, esta anotación está vacía. Proponemos reducir la influencia de las prohibiciones, dando así a los agentes más opciones en las acciones que pueden realizar. Un enfoque similar podría ser adoptado mediante la restricción de permisos, limitando así las acciones disponibles para los agentes. Cada una de estas políticas es posible: no legislamos sobre ninguna de ellas ni damos preferencia sobre ninguna. En este documento estamos interesados en formalizar dichas políticas dentro de un marco matemático simple. Una prohibición puede estar en conflicto con varias autorizaciones en Ω. Por lo tanto, debemos encontrar el conjunto máximo de pares conflictivos de permisos y prohibiciones en Ω, realizando una inspección por pares. Esto requiere identificar la sustitución entre dos pares de normas que caracteriza un conflicto. Esto se captura formalmente mediante la siguiente definición: DEF. 7. Surge un conflicto entre dos tuplas ω, ω ∈ Ω bajo una sustitución σ, denotado como cflct(ω, ω , σ), si se cumplen las siguientes condiciones: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unificar(τ1, τ1, σ), unificar(τ2, τ2, σ), y unificar(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| Es decir, un conflicto de prohibición y permiso (condición 1) si, y solo si, los agentes y roles a los que se aplican y sus acciones, respectivamente, se unifican bajo σ (condición 2) y sus períodos de activación se superponen (condición 3). La sustitución σ, el conjunto de conflictos, unifica a los agentes, roles y fórmulas atómicas de un permiso y una prohibición. La anotación Σc no juega ningún papel al detectar conflictos, pero, como mostramos a continuación, debemos actualizar la anotación para reflejar nuevas restricciones y resolver conflictos. Por ejemplo, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) se cumple. Definimos a continuación cómo obtenemos el conjunto de normas en conflicto de un estado normativo Ω: DEF. 8. El conjunto finito, posiblemente vacío, de normas en conflicto de un estado normativo Ω, denotado como CFLS(Ω), se define como CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Resolución de Conflictos Una forma detallada de resolver conflictos puede hacerse a través de la unificación. Detectamos la superposición de las influencias normativas, es decir, cómo afectan los comportamientos de los agentes en la VO, y limitamos el 646 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) influencia de la prohibición. Ilustramos con diagramas de Venn en la Figura 2 la superposición de las influencias normativas (izquierda) que caracterizan un conflicto y la reducción necesaria para resolver el conflicto (derecha). La ilustración muestra el espacio de valores posibles para p(X, Y) y p(X, Y) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y) Fa:bp(Y, Z) PA:Rp(c, X) Figura 2: Superposición de Influencia (Izquierda) y Restricción (Derecha) dos porciones de este espacio que definen el alcance de influencia de las normas PA:Rp(c, X) y Fa:bp(Y, Z). El alcance de estas normas se superponen, ilustrado por la intersección de las casillas a la izquierda, en acciones con valores, por ejemplo, a, b, p(c, 2), . . . , a, b, p(c, n). La reducción de la prohibición elimina la intersección: traslada el alcance de la influencia de la norma fuera de la influencia del permiso. Si hubiera múltiples superposiciones entre una prohibición y varias autorizaciones, lo cual es probable que ocurra, entonces la prohibición será restringida múltiples veces para desplazar el alcance de la norma y evitar todas las intersecciones. El algoritmo mostrado en la Figura 3 describe cómo obtenemos un conjunto de normas sin conflictos. Mapea un conjunto existente Ω posiblemente con el algoritmo de resolución de conflictos conflictResolution(Ω, Ω) entrada Ω salida Ω comenzar Ω := Ω para cada ω ∈ Ω tal que ω = (Fa:r ¯ϕ) Σc, td, ta, te hacer si ω, ω, σ ∈ CFLS(Ω) entonces Ω := Ω − {ω} fin si fin para para cada ω ∈ Ω tal que ω = (Fτ1:τ2 ϕ) Σc, td, ta, te hacer ΣMAX c := [ ω,ω,σc ∈CFLS(Ω) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c), td, ta, te } fin para fin Figura 3: Algoritmo para Resolver Conflictos en un Conjunto de Normas mapeando normas a un nuevo conjunto Ω en el que los conflictos (si los hay) están resueltos. El algoritmo forma Ω como un conjunto que es libre de conflictos, lo que significa que las prohibiciones están anotadas con un conjunto de conflictos que indica qué asignaciones para variables deben evitarse. Inicialmente, Ω se establece como Ω. El algoritmo opera en dos etapas. En la primera etapa (primera para cada bucle), eliminamos todas las prohibiciones conflictivas ω = (Fa:r ¯ϕ) Σc, td, ta, te con pares de agente/rol y fórmulas concretas en conflicto a : r y ¯ϕ: la única forma de resolver conflictos derivados de tales prohibiciones es eliminarlas por completo, ya que no podemos restringir una norma completamente concreta. En la segunda etapa (segunda para cada bucle), se examinan las prohibiciones restantes en Ω: el conjunto CFLS(Ω) contiene todos los conflictos entre permisos y las prohibiciones restantes en Ω representadas como tuplas ω, ω, σc, con σc representando el conjunto de conflictos. Dado que una prohibición puede tener conflictos con varias autorizaciones, el conjunto CFLS(Ω) puede contener más de una tupla para cada prohibición. Para proporcionar un Ω que refleje todos estos conflictos para una prohibición específica, debemos formar ΣMAX c que contenga todos los conjuntos de conflictos σc para una prohibición dada ω. El conjunto maximal se utiliza para actualizar la anotación de la prohibición. Es importante explicar la necesidad de actualizar el conjunto de prohibiciones del conflicto. Los estados normativos cambian como resultado de las acciones de los agentes [11]: las permisiones, prohibiciones y obligaciones existentes son revocadas y/o se establecen nuevas como resultado de las interacciones de los agentes con el entorno y otros agentes. Cada vez que se añadan nuevas normas, debemos verificar nuevos conflictos e inconsistencias. Si solo aplicamos nuestro algoritmo a un par que consiste en una norma antigua y una nueva, entonces se puede ahorrar algo de reprocesamiento de pares de normas antiguas (que ya fueron tratadas anteriormente). La eliminación de normas del conjunto Ω se aborda de manera eficiente: cada permiso que se vaya a eliminar debe ser verificado primero en busca de conflictos con cualquier prohibición existente (se puede evitar el reprocesamiento si registramos el conflicto en lugar de detectarlo nuevamente). Si hay un conflicto, entonces el conjunto de conflictos habrá sido registrado en la anotación de prohibiciones; este conjunto de conflictos es eliminado de la anotación de prohibiciones. La eliminación de obligaciones sigue un proceso similar. Las prohibiciones se eliminan sin necesidad de considerar sus relaciones con otras normas. Nuestro algoritmo es correcto en el sentido de que proporciona, para un Ω dado, un nuevo Ω en el que i) se han eliminado todas las prohibiciones fundamentales que entran en conflicto con los permisos; y ii) todas las prohibiciones anotadas restantes (Fτ:τ ¯ϕ) Σc, td, ta, te no se unificarán con ninguno de los permisos en Ω, siempre que el unificador no aparezca en Σc. El primer requisito se aborda con el primer bucle for each, que hace precisamente esto: elimina todas las prohibiciones de base que se unifican con una obligación. El segundo requisito se aborda mediante el segundo bucle for each: cada prohibición tiene su anotación Σc agregada con ΣMAX c, acomodando así los unificadores de todas las autorizaciones que se unifican con la prohibición. Es fácil ver que el algoritmo siempre termina: cada uno de sus dos bucles recorre un conjunto finito, procesando un elemento a la vez. El conjunto CFLS(Ω) se calcula en un número finito de pasos, al igual que las operaciones de conjunto realizadas dentro de cada bucle. El algoritmo tiene, sin embargo, complejidad exponencial, ya que el cálculo de CFLS(Ω) requiere una comparación de pares de todos los elementos en Ω. Ilustramos nuestro algoritmo con el siguiente ejemplo. Que exista el siguiente estado normativo global Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:rp(a, b), 3, 4, 8, (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9, ff. El primer bucle elimina la prohibición terrestre, obteniendo así el siguiente Ω: j (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, Pe:fp(g, h), 3, 4, 9, ff. Luego tenemos el siguiente conjunto de normas en conflicto CFLS(Ω): 8 < : * (FA:Rp(X, Y)) {}, 2, 2, 9, Pa:bp(c, d), 3, 4, 8, {A/a, R/b, X/c, Y/d} +, * (FA:Rp(X, Y)) {}, 2, 2, 9, Pe:fp(g, h), 3, 4, 9, {A/e, R/f, X/g, Y/h} +9 =; Para cada prohibición ω ∈ Ω recuperamos todos los elementos de w, w, σ ∈ CFLS(Ω) y recopilamos sus σ en ΣMAX c. El Ω final es así: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; El conjunto anotado de conjuntos de conflictos debe entenderse como un registro de unificaciones pasadas, que informa cómo deben utilizarse las prohibiciones en el futuro para evitar conflictos con permisos. Mostramos en la Sección 5.1 cómo los agentes conscientes de las normas utilizan las anotaciones. 4. INCONSISTENCIAS NORMATIVAS Si se puede encontrar una sustitución σ que unifique una obligación y una prohibición, entonces se produce una situación de inconsistencia normativa [13]. La obligación exige que un agente realice una acción que está prohibida. Podemos reutilizar la maquinaria, presentada anteriormente para resolver conflictos entre permisos y prohibiciones, con el fin de a) detectar y b) resolver tales inconsistencias. Con la Definición 7, nosotros 3 El esfuerzo combinatorio ya no es necesario si en su lugar mantenemos un conjunto de normas sin conflictos: cada vez que se introduce una nueva norma, la comparamos con las existentes, haciendo así que el proceso de mantenimiento sea de complejidad lineal. El Sexto Internacional. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 647 expresa la naturaleza de un conflicto entre una prohibición y un permiso. De igual manera, una situación de inconsistencia puede ser definida reutilizando esta definición y reemplazando la modalidad deontica P con O. Podemos reutilizar la maquinaria para la resolución de conflictos, desarrollada previamente, para resolver inconsistencias. El algoritmo de resolución de conflictos se puede aplicar sin cambios para acumular un conjunto de conflictos máximo ΣMAX c para cada prohibición en Ω que se unifica con las obligaciones. 5. Sociedades de agentes conscientes de normas. Ahora describimos cómo nuestros VO regulados por normas dan lugar a sociedades de agentes conscientes de normas. Abordamos Sistemas Multiagentes abiertos y heterogéneos: acomodamos agentes externos proporcionándoles a cada uno de ellos un <br>agente gobernador</br> correspondiente [12]. Este es un tipo de chaperón que interactúa con un agente externo, y observa e informa sobre su comportamiento. Mostramos nuestra arquitectura en la Figura 4 a continuación: un número de Agentes Gobernadores Externos Espacio de Tuplas de Agentes ag1 £ ¢ ¡ gov1 ⇐⇒ . . . . . . . . . . . . Yo, s, Ξ, Ω Yo, s, Ξ, Ω · · · agn £ ¢ ¡ govn ⇐⇒ Figura 4: Arquitectura para Sociedades de Agentes Conscientes de Normas de agentes externos interactúan (indicado por el ) con sus agentes gobernadores correspondientes. Los agentes del gobernador tienen acceso a la descripción del VO, el estado actual de la promulgación del VO, el estado de ejecución global Ξ y el estado normativo global Ω. Los agentes del gobernador pueden escribir y leer de (indicado por el ⇐⇒) un espacio de memoria compartida (por ejemplo, una solución tipo pizarra implementada como un espacio de tuplas), actualizando la configuración global (indicada por el ) para reflejar la dinámica de la ejecución del VO. Los agentes gubernamentales son necesarios porque no podemos anticipar ni legislar sobre el diseño o comportamiento de agentes externos. A continuación, representamos cómo los pares de gobernador/agentes externos trabajan juntos: cualquier elección no determinista en el VO es decidida por el agente externo; cualquier aspecto normativo es considerado por el <br>agente gobernador</br>. El <br>agente gobernador</br> representa el agente externo dentro del VO. Como tal, tiene el identificador único del agente externo. El <br>agente gobernador</br> lleva un registro de todos los roles que el agente externo está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un rol simultáneamente. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "artificial social systems": {
            "translated_key": "sistemas sociales artificiales",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        }
    }
}