{
    "id": "J-61",
    "original_text": "ICE: An Iterative Combinatorial Exchange David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative combinatorial exchange (ICE). The exchange incorporates a tree-based bidding language that is concise and expressive for CEs. Bidders specify lower and upper bounds on their value for different trades. These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations. All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades. A proxied interpretation of a revealedpreference activity rule ensures progress across rounds. A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments. The exchange is fully implemented and in a validation phase. Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1. INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions. In a double auction (DA), multiple buyers and sellers trade units of an identical good [20]. In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11]. Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language. A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value. A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to trade multiple heterogeneous goods. For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC. Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids. Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling. CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3]. In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources. Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13]. The instantiation of our general purpose design to specific domains is a compelling next step in our research. This paper presents the first design for an iterative combinatorial exchange (ICE). The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE. The ICE design problem is multi-faceted and quite hard. The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds. The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round. The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments. The exchange has a number of interesting theoretical properties. For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation. In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades. This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28]. While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules. The exchange is implemented in Java and is currently in validation. In describing the exchange we will first provide an overview of the main components and introduce several working examples. Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round. We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions. We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2. AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based bidding language. The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable. The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination. Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation. Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments. Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback. An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade. The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items. In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades. The subproblem to generate new constraints is a variation of the WD problem. • Activity rule. A revealed-preference activity rule [1] ensures progress across rounds. In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices. Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule. An outline of the ICE system flow of control is provided in Figure 1. We will return to this example later in the paper. For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance). On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round. At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29]. Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19]. A number of ascending CAs are designed to work with simple prices on items [12, 17]. The price generation methods that we use in ICE generalize the methods in these earlier papers. Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule. Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations. We are not aware of any previous studies of iterative CEs. Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2]. No dominant strategy mechanisms are known for the general CE problem. ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs. We adopt a variation on the clock-proxy auctionss revealedpreference activity rule. The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics. Rothkopf et al. [27] also describe a restricted tree-based bidding language. In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places. Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree. The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3. PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}. The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i. A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i. So, the final allocation is x1 = x0 + λ. Each bidder has a value vi(λi) ∈ ¡ for a trade λi. This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i . Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ . Price p can be negative, indicating the bidder receives a payment for the trade. We use the term payoff interchangeably with utility. Our goal in the ICE design is to implement the efficient trade. The efficient trade, λ∗ , maximizes the total increase in value across bidders. Definition 1 (Efficient trade). The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation. Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa). Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange. All three examples have only one seller, but this is purely illustrative. Example 1. One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB. Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle. Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]). Example 2. One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD. Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods. The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested. The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees. Example 3. One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD. Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4. A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative. In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades. Bids are expressed as annotated bid trees, and define a bidders value for all possible trades. The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative). The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree. We illustrate the language on each of Examples 1-3 in Figure 2. The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves. The nodes have zero values where no value is indicated. Internal nodes are also labeled with interval-choose (IC) ranges. Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on. First, if a child is on then its parent must be on. Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node. Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade. For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on. On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3. Given a trade there is often a number of ways to choose the set of satisfied nodes. The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated. Consider bid tree Ti from bidder i. This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti. Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf). All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)]. Every node is also labeled with a value, viβ ∈ ¡ . Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.) Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied. There will often be a choice. Ties are broken to maximize value. Let satiβ ∈ {0, 1} denote whether node β is satisfied. Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4). This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade. We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5). Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5). The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages. For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator. Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure. OR* is known to be expressive and concise. However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles. A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference. Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination. These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance. Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange. In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i. We call ∆vcg,i = V ∗ − V−i the VCG discount. For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10. The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome. Definition 2. The Threshold payment scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance). Example 4. In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3. In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0). This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes. Threshold payments are designed to minimize the maximal ex post incentive to manipulate. Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5. THE ICE DESIGN We are now ready to introduce the iterative combinatorial exchange (ICE) design. Several new components are introduced, relative to the design for the one-shot exchange. Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds. The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations. In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items. The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v). Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node. These take the place of the exact value viβ defined in Section 4.1. Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6). We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes. The following lemma is useful: Lemma 1. Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades. Proof. Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi). Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ. But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined. Given these provisional prices, the price on trade λi for bidder i is pt (λi) =   j≤m pt j · λij. Definition 3 (CE prices). Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5]. We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy. First, we compute prices that minimize the maximal error in the best-response constraints across all bidders. II: Fairness. Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders. III: Balance. Third, we break ties to prefer prices that minimize the maximal price across all items. Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds. In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades. For this, we adopt constraint generation to efficient handle an exponential number of constraints. Each step is described in detail below. I: Accuracy. We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages. Let λt denote the current provisional trade and suppose the provisional valuation is vα . To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j. This linear program (LP) is designed to find prices that minimize the worst-case error across all agents. From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.) Example 5. We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth). The efficient trade allocates AB to buyer 1 and CD to buyer 3. Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2. But, (9) has an exponential number of constraints (Eq. 10). Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints. Let   i denote a manageable subset of all possible feasible trades to bidder i. Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids. Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9). In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices. Let ˆλi denote the solution to R-WD(i). Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9). Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness. Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6. For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v). At these valuations the Threshold payoffs would be 2 to both the seller and the buyer. This can be exactly achieved in pricing with pA + pB = 14. The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC. The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the VCG payoff (at vα ). Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary. III: Balance. Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items. Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14. Finally, balance sets p(A) = p(B) = 7. Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR. Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders. It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i. Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP. The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17]. Dunford et al. [12] prefer to smooth prices across rounds. Comment 1: Lexicographical Refinement. For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL). For instance, in ACC we successively minimize the maximal error across all bidders. Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding. For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective. ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down. This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL. Comment 2: Computation. All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange. Thus, the computational effort in constraint generation is re-used. In implementation we are careful to address a number of -issues that arise due to floating-point issues. We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13). This avoids later infeasibility issues. In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21]. Consistency in our exchange requires that bidders tighten bounds as the exchange progresses. Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange. We adopt a simple revealed-preference (RP) activity rule. The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs. The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient. It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1. The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree. Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices. The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3. We pin these down and then minimize the error to bidders 3 and 4. Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices. Consider the following examples: Example 7. A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B. Suppose prices are currently 3 for each of A and B. The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A. Example 8. A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A. Suppose prices are currently 3 for each of A and B. The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved. Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti. Definition 4. Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem. First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation. Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP. To understand the importance of this tiebreaking rule consider Example 7. The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate. Notice that +B is a counterexample to +A, but not the other way round. Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i . Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v. We call trade U∗ i the witness trade. We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree. Example 8 helps to illustrate this. Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP. We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way. For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l . Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed. Proposition 1. Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24). Proof. For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi. Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes. On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i . For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i). Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP. But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20). Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP. Proceed by case analysis. Case a): only one solution to RP1(i) has uncertain value and so λi has certain value. But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20). Case b): two or more solutions to RP1(i) have uncertain value. Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set. This is by RP. Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20). Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades. Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption). But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP. Failure to meet the activity rule must have some consequence. In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices. See 7 for an additional discussion. We also provide guidance to help a bidder meet the RP rule. Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3. Lemma 2. When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule. Proof. Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades. Thus, the RP condition will continue to fail. Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference. A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i . A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i . Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails. This is an elegant feedback mechanism because it is adaptive. Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange. The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes. At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt . A termination condition is also checked, to determine whether to move the exchange to a last-and-final round. To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li). Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui). First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v). Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation. In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round. This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices. The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another. Termination Condition. In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade. For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge. Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm. Note that γthresh is defined for payments and not payoffs. This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments. Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made. Definition 5 (termination). ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination. At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments. Example 9. Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1. First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0. At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1. However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5. For CUTOFFthresh < 2/5 the exchange would remain open. On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent. Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the tree-based bidding language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6. SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation. In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play. A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy. Major exchange tasks are handled by engines that dictate the non-optimizer specific logic. These engines drive the appropriate MIP/LP builders. We realized that all of our optimization formulations boil down to two classes of optimization problem. The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant. The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices. We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization. We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7. DISCUSSION The bidding language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps. This proved especially challenging. The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations. For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count. The total of 6502 includes 184 for instrumentation (not shown in the table). The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds. It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades. The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process. In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative. In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations. Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values. Upper and lower bound information also provides guidance about when to terminate. Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information. The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth). Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information. This is worthy of experimental investigation. Moreover, the use of price and RP activity provides additional guarantees. We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process. The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders. The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices. The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees. When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness). Future work must study convergence experimentally, and extend this theory to allow for approximate prices. Some strategic aspects of our ICE design deserve comment, and further study. First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16]. We must be careful, though. For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations). Also, no consideration has been given in this work to collusion by bidders. This is an issue that deserves some attention in future work. 8. CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative combinatorial exchange. The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule. The exchange is fully implemented in Java and is in a validation phase. The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree. We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances. In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems. Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004. This work is supported in part by NSF grant IIS-0238147. 9. REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom. The clock-proxy auction: A practical combinatorial auction design. In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov. Mechanisms for a spatially distributed market. In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20. ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman. Auctions for the safe, efficient, and equitable allocation of airspace system resources. In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004. Forthcoming. [4] D. Bertsimas and J. Tsitsiklis. Introduction to Linear Optimization. Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy. The package assignment model. Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier. A pomdp formulation of preference elicitation problems. In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos. Bidding languages for combinatorial auctions. In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm. Preference elicitation in combinatorial auctions. In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259. ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors. Combinatorial Auctions. MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra. On ascending Vickrey auctions for heterogeneous objects. Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra. Combinatorial auctions: A survey. Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson. Testing linear pricing algorithms for use in ascending combinatorial auctions. Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J. Chase, B. Chun, S. Schwab, and A. Vahdat. Sharp: an architecture for secure resource peering. In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148. ACM Press, 2003. [14] B. Hudson and T. Sandholm. Effectiveness of query types and policies for preference elicitation in combinatorial auctions. In Proc. 3rd Int. Joint. Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna. Auction Theory. Academic Press, 2002. [16] D. Krych. Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini. A new and improved design for multi-object iterative auctions. Management Science, 2004. To appear. [18] E. Kwerel and J. Williams. A proposal for a rapid transition to market allocation of spectrum. Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes. Applying learning algorithms to preference elicitation. In Proc. ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee. A dominant strategy double auction. J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom. Putting auction theory to work: The simultaneous ascending auction. J.Pol. Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite. Efficient mechanisms for bilateral trading. Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan. Bidding and allocation in combinatorial auctions. In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso. Achieving budget-balance with Vickrey-based payment schemes in exchanges. In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar. Iterative combinatorial auctions: Theory and practice. In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin. A combinatorial mechanism for airport time slot allocation. Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad. Computationally manageable combinatorial auctions. Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier. Preference elicitation in combinatorial auctions. In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman. AkBA: A progressive, anonymous-price combinatorial auction. In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258",
    "original_translation": "Presentamos el primer diseño para un intercambio combinatorio iterativo (ICE). El intercambio incorpora un lenguaje de oferta basado en árboles que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20]. En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos. Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un intercambio combinatorio iterativo (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda. La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de oferta basado en árboles expresivo y conciso. El lenguaje describe valores para intercambios, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el intercambio sea aceptable. El lenguaje permite a los postores expresar límites superiores e inferiores en el valor, los cuales pueden ser ajustados en cada ronda. • Determinación del ganador. La determinación del ganador (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación. Comparar la solución en los valores superiores e inferiores permite tomar una decisión sobre la terminación, con el progreso en rondas intermedias impulsado por una valoración intermedia y los valores inferiores adoptados al finalizar. • Pagos. Los pagos se calculan utilizando la regla de pago del umbral [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de precios. Se calcula un precio aproximado para cada artículo en el intercambio en cada ronda, en función de las valoraciones intermedias y el intercambio provisional. Los precios se optimizan para aproximar los precios de equilibrio competitivo, y luego se optimizan aún más para aproximar mejor los pagos del umbral actual con los lazos restantes rotos para favorecer los precios equilibrados entre diferentes artículos. Al calcular los precios, adoptamos los métodos de generación de restricciones para explotar la estructura del lenguaje de oferta y evitar enumerar todos los intercambios factibles. El subproblema para generar nuevas restricciones es una variación del problema WD. • Regla de actividad. Una regla de actividad de preferencia revelada [1] garantiza progreso a lo largo de las rondas. Para permanecer activo, un oferente debe ajustar los límites para que haya suficiente información para definir un intercambio que maximice el excedente a los precios actuales. Otra variación del problema de WD se formula, tanto para verificar que se cumple la regla de actividad como para proporcionar retroalimentación a un postor para explicar cómo cumplir la regla. Se proporciona un esquema del flujo de control del sistema ICE en la Figura 1. Volveremos a este ejemplo más adelante en el documento. Por ahora, simplemente observa en este ejemplo de dos agentes que los agentes establecen límites inferiores y superiores que son verificados en la regla de actividad, y luego pasados a la determinación del ganador (WD), y luego a través de tres etapas de fijación de precios (precisión, equidad, equilibrio). Al pasar la regla de cierre (en la que se verifican los parámetros αeff y αthresh para la convergencia del comercio y los pagos), el intercambio pasa a una última y definitiva ronda. Al final de esta ronda, el intercambio y los pagos finalmente se determinan, basados en las valoraciones más bajas. 2.1 Trabajo Relacionado En la literatura se conocen muchos CAs de un solo lado con precios ascendentes [10, 25, 29]. También se han propuesto enfoques de elicitación directa para los AC unilaterales en los que los agentes responden a preguntas explícitas sobre sus valoraciones [8, 14, 19]. Un número de CAs ascendentes están diseñados para trabajar con precios simples en artículos [12, 17]. Los métodos de generación de precios que utilizamos en ICE generalizan los métodos de estos artículos anteriores. Parkes et al. [24] estudiaron intercambios combinatorios de oferta sellada e introdujeron la regla de pago umbral. Posteriormente, Krych [16] demostró experimentalmente que la regla del Umbral promueve asignaciones eficientes. No tenemos conocimiento de ningún estudio previo sobre CEs iterativos. Las estrategias dominantes DAs son conocidas por la demanda unitaria [20] y también por agentes de mente única [2]. No se conocen mecanismos de estrategia dominante para el problema general de la CE. ICE es un diseño de subasta híbrido, ya que combina precios simples de artículos para impulsar las ofertas en las primeras rondas con WD combinatorio y pagos, una característica que comparte con el diseño de reloj-proxy de Ausubel et al. [1] para subastas unilaterales. Adoptamos una variación de la regla de actividad de preferencia revelada en las subastas de proxy de reloj. El lenguaje de subasta comparte algunos elementos estructurales con el lenguaje LGB de Boutilier y Hoos [7], pero tiene semántica muy diferente. Rothkopf et al. [27] también describen un lenguaje de oferta basado en árboles restringido. En LGB, la semántica es la de la lógica proposicional, con los mismos elementos en una asignación capaces de satisfacer un árbol en múltiples lugares. Aunque esto puede hacer que LGB sea especialmente conciso en algunos contextos, la semántica que proponemos parece proporcionar una utilidad local, de modo que el valor de un componente en un árbol pueda ser comprendido de forma independiente al resto del árbol. La idea de capturar la estructura de nuestro lenguaje de oferta de manera explícita dentro de una formulación de programación entera mixta sigue los desarrollos en Boutilier [6]. 3. PRELIMINARES En nuestro modelo, consideramos un conjunto de bienes, indexados {1, . . . , m} y un conjunto de postores, indexados {1, . . . , n}. La asignación inicial de bienes se denota como x0 = (x0 1, . . . , x0 n), donde x0 i = (x0 i1, . . . , x0 im) y x0 ij ≥ 0 para el bien j indicando el número de unidades del bien j que posee el postor i. Un intercambio λ = (λ1, . . . , λn) denota el cambio en la asignación, con λi = (λi1, . . . , λim) donde λij ∈ es el cambio en el número de unidades del ítem j para el postor i. Entonces, la asignación final es x1 = x0 + λ. Cada postor tiene un valor vi(λi) ∈ ¡ para una transacción λi. Este valor puede ser positivo o negativo, y representa el cambio en el valor entre la asignación final x0 i +λi y la asignación inicial x0 i. La utilidad es cuasi-lineal, con ui(λi, p) = vi(λi)−p para el intercambio λi y el pago p ∈ ¡. El precio p puede ser negativo, lo que indica que el postor recibe un pago por la transacción. Utilizamos el término \"pago\" de manera intercambiable con \"utilidad\". Nuestro objetivo en el diseño de ICE es implementar el comercio eficiente. El intercambio eficiente, λ∗, maximiza el aumento total de valor entre los postores. Definición 1 (Comercio eficiente). El intercambio eficiente λ∗ resuelve max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Las restricciones (1) aseguran que ningún agente venda más artículos de los que tiene en su asignación inicial. Las restricciones (2) permiten la disposición gratuita y permiten que los intercambios factibles vendan más artículos de los que se compran (pero no al revés). Posteriormente, adoptamos Feas(x0) para denotar el conjunto de intercambios factibles, dados estos límites y una asignación inicial x0 = (x0 1, . . . , x0 n). 3.1 Ejemplos Prácticos En esta sección, proporcionamos tres ejemplos simples de instancias que utilizaremos para ilustrar varios componentes del intercambio. Todos los tres ejemplos tienen solo un vendedor, pero esto es puramente ilustrativo. Ejemplo 1. Un vendedor y un comprador, dos bienes {A, B}, con el vendedor teniendo una asignación inicial de AB. Cambios en los valores de los intercambios: vendedor comprador Y (−A, −B) Y (+A, +B) -10 +20 El Y indica que tanto el comprador como el vendedor solo están interesados en intercambiar ambos bienes como un paquete. Aquí, el intercambio eficiente (que maximiza el valor) es para el vendedor vender AB al comprador, denotado como λ∗ = ([−1, −1], [+1, +1]). Ejemplo 2. Un vendedor y cuatro compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de las transacciones: vendedor comprador1 comprador 2 comprador 3 comprador 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 El OR indica que el vendedor está dispuesto a vender cualquier cantidad de bienes. El XOR indica que los compradores 2 y 4 están dispuestos a comprar como máximo uno de los dos bienes en los que están interesados. El comercio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD al comprador 3, denotado λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR Ejemplo 1: Ejemplo 3: 2,2 +C +D COMPRADOR 2 2,2 +A +B COMPRADOR 1 +11 +84,4 -B VENDEDOR -A -C -D Ejemplo 2: 1,1 +A +B COMPRADOR 2 2,2 +A +B COMPRADOR 1 +6 +40,4 -B VENDEDOR -C -D-A 1,1 +C +D COMPRADOR 4 2,2 +C +D +3 +2 COMPRADOR 3 -18 Figura 2: Ejemplo de Árboles de Ofertas. Ejemplo 3. Un vendedor y dos compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de los intercambios: vendedor comprador1 comprador 2 Y (−A, −B, −C, −D) Y (+A, +B) Y (+C, +D) -18 +11 +8 El intercambio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD vaya al comprador 2, denotado por λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4. Un DISEÑO DE INTERCAMBIO DE UNA SOLA VEZ La descripción de ICE se divide en dos secciones: una sola vez (oferta sellada) e iterativa. En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a compradores y vendedores, y para extenderse y capturar ofertas de compradores y vendedores mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas. Las ofertas se expresan como árboles de ofertas anotados, y definen el valor de un oferente para todos los intercambios posibles. El lenguaje define cambios en los valores de las transacciones, con hojas anotadas con los artículos intercambiados y nodos anotados con cambios en los valores (ya sea positivos o negativos). La característica principal es que tiene un operador lógico de intervalo general en los nodos internos, y que define una semántica cuidadosa para propagar valores dentro del árbol. Ilustramos el lenguaje en cada uno de los Ejemplos 1-3 en la Figura 2. El lenguaje tiene una estructura de árbol, con operaciones en elementos definidos en las hojas y valores anotados en nodos y hojas. Los nodos tienen valores de cero donde no se indica ningún valor. Los nodos internos también están etiquetados con rangos de intervalo-escoge (IC). Dada una transacción, la semántica del lenguaje define qué nodos en el árbol pueden ser satisfechos o activados. Primero, si un niño está encendido, entonces su padre también debe estar encendido. Segundo, si un nodo padre está encendido, entonces el número de hijos que están encendidos debe estar dentro del rango de IC en el nodo padre. Finalmente, las hojas en las que el postor está comprando artículos solo pueden estar activas si los artículos se proporcionan en el intercambio. Por ejemplo, en el Ejemplo 2 podemos considerar el comercio eficiente, y observar que en este comercio todos los nodos en los árboles de los compradores 1 y 3 (y también el vendedor), pero ninguno de los nodos en los árboles de los compradores 2 y 4, pueden estar encendidos. Por otro lado, en 251 el intercambio en el que A va al comprador 2 y D al comprador 4, entonces los nodos raíz y hojas apropiados pueden estar encendidos para los compradores 2 y 4, pero ningún nodo puede estar encendido para los compradores 1 y 3. Dado un intercambio, a menudo hay varias formas de elegir el conjunto de nodos satisfechos. La semántica del lenguaje requiere que se activen los nodos que maximicen el valor sumado entre los nodos satisfechos. Considera el árbol de oferta Ti del ofertante i. Esto define nodos β ∈ Ti, de los cuales algunos son hojas, Leaf (i) ⊆ Ti. Deje que Child(β) ⊆ Ti denote los hijos de un nodo β (que no es en sí mismo una hoja). Todos los nodos excepto las hojas están etiquetados con el operador de intervalo-escoger [IC x i (β), ICy i (β)]. Cada nodo también está etiquetado con un valor, viβ ∈ ¡. Cada hoja β está etiquetada con un intercambio, qiβ ∈ m (es decir, las hojas pueden definir un intercambio agrupado en más de un tipo de artículo). Dado un intercambio λi al postor i, los operadores de elección de intervalos y los intercambios en las hojas definen qué nodos pueden ser satisfechos. A menudo habrá una elección. Las corbatas se rompen para maximizar el valor. Que satiβ ∈ {0, 1} denote si el nodo β está satisfecho. La solución sati es válida dado el árbol Ti y el intercambio λi, escrita sati ∈ válido(Ti, λi), si y solo si: ¢ β∈Hoja (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Hijo(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Hoja (i) (5) En otras palabras, un conjunto de hojas solo puede considerarse satisfecho dado el intercambio λi si el aumento total en cantidad sumado en todas esas hojas está cubierto por el intercambio, para todos los bienes (Eq. 4). Esto funciona tanto para vendedores como para compradores: para los vendedores, un intercambio es negativo y esto requiere que el número total de artículos indicados como vendidos en el árbol sea al menos igual al número total vendido según lo definido en el intercambio. También necesitamos la propagación ascendente: cada vez que un nodo que no sea la raíz esté satisfecho, su padre también debe estar satisfecho (por β ∈Child(β) satiβ ≤ ICy i (β)satiβ en la Ecuación 5). Finalmente, necesitamos la propagación hacia abajo: cada vez que un nodo interno se satisface, entonces el número apropiado de hijos también debe estar satisfecho (Ec. 5). El valor total del comercio λi, dado el árbol de ofertas Ti, se define como: vi(Ti, λi) = máximo sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) El lenguaje basado en árboles generaliza los lenguajes existentes. Por ejemplo: IC(2, 2) en un nodo con 2 hijos es equivalente a un operador AND; IC(1, 3) en un nodo con 3 hijos es equivalente a un operador OR; e IC(1, 1) en un nodo con 2 hijos es equivalente a un operador XOR. De manera similar, los lenguajes de oferta XOR/OR pueden ser expresados directamente como un árbol de oferta en nuestro lenguaje. La determinación del ganador Este apartado define el problema de determinación del ganador, el cual está formulado como un MIP y resuelto en nuestra implementación con un solucionador comercial. El solucionador utiliza búsqueda de ramificación y acotamiento con generación de cortes dinámicos y heurísticas de ramificación para resolver MIPs grandes en tiempos de ejecución económicamente factibles. El lenguaje OR* es el lenguaje OR con elementos ficticios para proporcionar estructura adicional. OR* se sabe que es expresivo y conciso. Sin embargo, no se sabe si OR* domina a XOR/OR en cuanto a concisión [23]. En la definición de la representación MIP, tenemos cuidado de evitar una enumeración basada en XOR de todos los paquetes. Una variación del problema de WD se reutiliza muchas veces dentro del intercambio, por ejemplo, para la generación de columnas en la fijación de precios y para verificar la preferencia revelada. Dado el conjunto de árboles de ofertas T = (T1, . . . , Tn) y la asignación inicial x0, la formulación mixta entera para WD es: WD(T, x0): max λ, sat ¢ i ¢ β ∈ Ti viβ · satiβ sujeto a (1), (2), satiβ ∈ {0, 1}, λij ∈ sati ∈ válido(Ti, λi), ∀i. Algunos bienes pueden quedar sin asignar porque se permite la disposición libre dentro de las reglas de liquidación de la determinación del ganador. Estos artículos pueden ser asignados de nuevo a los agentes que vendieron los artículos, es decir, para los cuales λij < 0. 4.3 Cálculo de Pagos Umbral La regla de pago umbral se basa en los pagos en el mecanismo de Vickrey-Clarke-Groves (VCG) [15], que en sí mismo es veraz y eficiente pero no satisface el equilibrio presupuestario. El equilibrio presupuestario requiere que los pagos totales al intercambio sean iguales a los pagos totales realizados por el intercambio. En VCG, el pago pagado por el agente i es pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) donde λ∗ es el intercambio eficiente, V ∗ es el valor reportado de este intercambio, y V−i es el valor reportado del intercambio eficiente que se implementaría sin el postor i. Llamamos a ∆vcg,i = V ∗ − V−i el descuento VCG. Por ejemplo, en el Ejemplo 1 pvcg,vendedor = −10 − (+10 − 0) = −20 y pvcg,comprador = +20 − (+10 − 0) = 10, y el intercambio se llevaría a cabo con un déficit presupuestario de −20 + 10 = −10. La regla de pago del umbral [24] determina pagos equilibrados presupuestarios para minimizar el error máximo entre todos los agentes respecto al resultado VCG. Definición 2. El esquema de pago de umbral implementa el intercambio eficiente λ∗ dado los ofertas, y establece los pagos pthresh,i = ˆvi(λ∗ i ) − ∆i, donde ∆ = (∆1, . . . , ∆n) se establece para minimizar maxi(∆vcg,i − ∆i) sujeto a ∆i ≤ ∆vcg,i e   i ∆i ≤ V ∗ (esto garantiza el equilibrio presupuestario). Ejemplo 4. En el Ejemplo 2, los descuentos de VCG son (9, 2, 0, 1, 0) para el vendedor y cuatro compradores respectivamente, los pagos de VCG son (−9, 4, 0, 2, 0) y el intercambio se realiza con un déficit de -3. En Threshold, los descuentos son (8, 1, 0, 0, 0) y los pagos son (−8, 5, 0, 3, 0). Esto minimiza el error en el peor de los casos para los descuentos VCG en todos los esquemas de pago equilibrados en presupuesto. Los pagos de umbral están diseñados para minimizar el incentivo máximo ex post para manipular. Krych [16] confirmó que Threshold promueve la eficiencia asignativa en el equilibrio de Bayes-Nash restringido y aproximado. 5. El diseño ICE Estamos listos para presentar el diseño de intercambio combinatorio iterativo (ICE). Se introducen varios componentes nuevos, en relación con el diseño para el intercambio único. En lugar de proporcionar valoraciones precisas, los postores pueden proporcionar valoraciones inferiores y superiores y revisar esta información de oferta en cada ronda. El intercambio proporciona retroalimentación basada en precios 252 para guiar a los postores en este proceso, y finaliza con un intercambio eficiente (o aproximadamente eficiente) con respecto a las valoraciones reportadas. En cada ronda t ∈ {0, 1, . . .} se utilizan los límites inferiores y superiores actuales, vt y vt, para definir un perfil de valoración provisional vα (la α-valoración), junto con un intercambio provisional λt y precios provisionales pt = (pt 1, . . . , pt m) en los artículos. La α-valoración es una combinación lineal de las valoraciones superiores e inferiores actuales, con αEFF ∈ [0, 1] elegido endógenamente en función de la cercanía del intercambio optimista (en v) y el intercambio pesimista (en v). Los precios pt se utilizan para informar una regla de actividad y avanzar hacia un comercio eficiente. 5.1 Valoraciones superiores e inferiores El lenguaje de la oferta se amplía para permitir que un oferente i informe un valor inferior y superior (viβ, viβ) en cada nodo. Estos ocupan el lugar del valor exacto viβ definido en la Sección 4.1. Basándonos en estas etiquetas, podemos definir las funciones de valoración vi(Ti, λi) y vi(Ti, λi), utilizando exactamente la misma semántica que en la Ecuación (6). Decimos que un árbol de ofertas está bien formado si viβ ≤ viβ para todos los nodos. El siguiente lema es útil: Lema 1. Dado un árbol bien formado, T, entonces vi(Ti, λi) ≤ vi(Ti, λi) para todos los intercambios. Prueba. Supongamos que existe algún λi para el cual vi(Ti, λi) > vi(Ti, λi). Entonces, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ. Sin embargo, esto es una contradicción porque el intercambio λ que define vi(Ti, λi) sigue siendo factible con límites superiores vi, y viβ ≥ viβ para todos los nodos β en un árbol bien formado. 5.2 Retroalimentación de precios En cada ronda, se determinan los precios de equilibrio competitivo aproximados (CE), pt = (pt 1, . . . , pt m). Dado estos precios provisionales, el precio en el intercambio λi para el postor i es pt (λi) = j≤m pt j · λij. Definición 3 (precios de la CE). Los precios p∗ son precios de equilibrio competitivo si el intercambio eficiente λ∗ está respaldado a precios p∗, de modo que para cada postor: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) Los precios de CE no siempre existirán y a menudo necesitaremos calcular precios aproximados [5]. Extendemos las ideas de Rassenti et al. [26], Kwasnica et al. [17] y Dunford et al. [12], y seleccionamos precios aproximados de la siguiente manera: I: Precisión. Primero, calculamos los precios que minimizan el error máximo en las restricciones de mejor respuesta de todos los postores. II: Equidad. Segundo, rompemos los empates para preferir precios que minimicen la desviación máxima de los pagos umbral entre todos los postores. III: Equilibrio. En tercer lugar, rompemos los empates para preferir precios que minimicen el precio máximo entre todos los artículos. En conjunto, estos pasos están diseñados para promover la informatividad de los precios en impulsar el progreso a lo largo de las rondas. Al calcular los precios, explicamos cómo calcular precios aproximados (o de otra manera) para lenguajes de oferta estructurados, sin enumerar todos los intercambios posibles. Para esto, adoptamos la generación de restricciones para manejar de manera eficiente un número exponencial de restricciones. Cada paso se describe detalladamente a continuación. Yo: Precisión. Adoptamos una definición de precisión de precio que generaliza las nociones adoptadas en trabajos anteriores para lenguajes de oferta no estructurados. Que λt denote el comercio provisional actual y suponga que la valoración provisional es vα. Para calcular precios de CE precisos, consideramos: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j. Este programa lineal (LP) está diseñado para encontrar precios que minimicen el error en el peor de los casos entre todos los agentes. De la definición de los precios de equilibrio competitivo (CE), se sigue que los precios de equilibrio competitivo tendrían δ = 0 como solución a (9), momento en el cual el intercambio λt i estaría en el conjunto de mejor respuesta de cada agente (con λt i = ∅, es decir, sin intercambio, para todos los agentes sin excedente para el intercambio a los precios). Ejemplo 5. Podemos ilustrar la formulación (9) en el Ejemplo 2, asumiendo para simplificar que vα = v (es decir, verdad). El comercio eficiente asigna AB al comprador 1 y CD al comprador 3. La precisión buscará los precios p(A), p(B), p(C) y p(D) para minimizar el δ ≥ 0 requerido para satisfacer las restricciones: p(A) + p(B) + p(C) + p(D) ≥ 0 (vendedor) p(A) + p(B) ≤ 6 + δ (comprador 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (comprador 2) p(C) + p(D) ≤ 3 (comprador 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (comprador 4) Una solución óptima requiere que p(A) = p(B) = 10/3, con δ = 2/3, y que p(C) y p(D) tomen valores como p(C) = p(D) = 3/2. Pero, (9) tiene un número exponencial de restricciones (Ec. 10). En lugar de resolverlo explícitamente, utilizamos la generación de restricciones [4] y generamos dinámicamente un subconjunto suficiente de restricciones. Que \\(i\\) denote un subconjunto manejable de todos los intercambios factibles posibles para el oferente \\(i\\). Entonces, una versión relajada de (9) (escrita ACC) se formula sustituyendo (10) con vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) donde   i es un conjunto de intercambios que son factibles para el postor i dado las otras ofertas. Fijando los precios p∗, luego resolvemos n subproblemas (uno para cada postor), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0), (12) para verificar si la solución (p∗, δ∗) a ACC es factible en el problema (9). En R-WD(i) el objetivo es determinar un intercambio más preferido para cada postor a estos precios. Que ˆλi denote la solución a R-WD(i). Verificar la condición: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) y si esta condición se cumple para todos los postores i, entonces la solución (p∗ , δ∗ ) es óptima para el problema (9). De lo contrario, se agrega el intercambio ˆλi a i para todos los postores i para los cuales esta restricción se viola en 253 y volvemos a resolver el LP con el nuevo conjunto de restricciones. II: Equidad. Segundo, rompemos los empates restantes para preferir precios justos: eligiendo precios que minimicen el error en el peor de los casos con respecto a los pagos umbral (es decir, la utilidad para los postores con pagos umbral), pero sin elegir precios que sean menos precisos. Ejemplo 6. Por ejemplo, la precisión en el Ejemplo 1 (representado en la Figura 1) requiere que 12 ≤ pA + pB ≤ 16 (para vα = v). En estas valoraciones, los pagos umbral serían de 2 para tanto el vendedor como el comprador. Esto se puede lograr exactamente en la fijación de precios con pA + pB = 14. El método de desempate de equidad se formula como el siguiente LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima, de ACC. El objetivo aquí es el mismo que en la regla de pago del umbral (ver Sección 4.3): minimizar el error máximo entre el pago del postor (en vα) para el intercambio provisional y el pago VCG (en vα). El problema FAIR también se resuelve mediante la generación de restricciones, utilizando R-WD(i) para agregar restricciones adicionales violadas según sea necesario. III: Equilibrio. En tercer lugar, rompemos los empates restantes para preferir precios equilibrados: eligiendo precios que minimicen el precio máximo entre todos los artículos. Volviendo de nuevo al Ejemplo 1, representado en la Figura 1, vemos que la precisión y la equidad requieren que p(A) + p(B) = 14. Finalmente, el conjunto de equilibrio establece que p(A) = p(B) = 7. El equilibrio está justificado cuando, manteniendo todo lo demás igual, los elementos son más propensos a tener valores similares que diferentes. El LP para el equilibrio se formula de la siguiente manera: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima de ACC y π∗ representa el error en la solución óptima de FAIR. La generación de restricciones también se utiliza para resolver BAL, generando nuevos intercambios para i según sea necesario. El problema R-WD(i) es una especialización del problema WD, en el que el objetivo es maximizar el pago de un único postor, en lugar del valor total entre todos los postores. Se resuelve como un MIP, al reescribir el objetivo en WD(T, x0) como max{viβ · satiβ − j p∗ j · λij} para el agente i. Por lo tanto, la estructura del lenguaje del árbol de ofertas se explota para generar nuevas restricciones, ya que esto se resuelve como un MIP conciso. Los otros postores se mantienen en el MIP (pero no aparecen en el objetivo) y se utilizan para definir el espacio de intercambios factibles. Los métodos de Dunford et al. [12], que utilizan un enfoque de núcleo, también están estrechamente relacionados. El uso del equilibrio fue defendido por Kwasnica et al. [17]. Dunford et al. [12] prefieren suavizar los precios a lo largo de las rondas. Comentario 1: Refinamiento lexicográfico. Para los tres subproblemas también realizamos un refinamiento lexicográfico (con respecto a los postores en ACC y FAIR, y con respecto a los bienes en BAL). Por ejemplo, en ACC minimizamos sucesivamente el error máximo entre todos los postores. Dada una solución inicial, primero identificamos el error en todos los postores para quienes una restricción (11) está vinculante. Para dicho postor i, la restricción se reemplaza por vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) y el error para el postor i ya no aparece explícitamente en el objetivo. ACC se vuelve a resolver y avanza al minimizar aún más el error máximo entre todos los postores que aún no han sido identificados. Esto continúa, fijando a cualquier nuevo postor para quien una de las restricciones (11) sea vinculante, hasta que el error esté optimizado lexicográficamente para todos los postores. El mismo proceso exacto se repite para FAIR y BAL, con los postores fijados y las restricciones (15) reemplazadas por π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (donde π∗ i es el objetivo actual) en FAIR, y los artículos fijados y las restricciones (18) reemplazadas por p∗ j ≥ pj (donde p∗ j representa el objetivo para el precio máximo en ese artículo) en BAL. Comentario 2: Computación. Todos los límites en i se mantienen, y este conjunto crece en todas las etapas y en todas las rondas del intercambio. Por lo tanto, el esfuerzo computacional en la generación de restricciones se reutiliza. En la implementación, nos aseguramos de abordar una serie de problemas que surgen debido a problemas de punto flotante. Preferimos pecar de conservadores al determinar si agregar o no otra restricción al realizar la verificación (13). Esto evita problemas de inviabilidad posteriores. Además, al fijar a los postores con el fin de refinar lexicográficamente, relajamos las restricciones asociadas con un pequeño > 0 en el lado derecho. 5.3 Reglas de Actividad de Preferencia Revelada El papel de las reglas de actividad en la subasta es garantizar tanto la consistencia como el progreso en las rondas [21]. La consistencia en nuestro intercambio requiere que los oferentes ajusten los límites a medida que avanza el intercambio. Las reglas de la actividad garantizan que los postores estén activos durante las primeras rondas y promueven una elicitación útil a lo largo del intercambio. Adoptamos una regla de actividad de preferencia revelada (RP) simple. La idea se basa vagamente en la regla de RP en Ausubel et al. [1], donde se utiliza para los AC unilaterales. La motivación es requerir más que simplemente consistencia: necesitamos que los oferentes proporcionen suficiente información para que el sistema pueda demostrar que una asignación es (aproximadamente) eficiente. Es útil pensar en los postores interactuando con agentes de proxy que actuarán en su nombre al responder a los precios provisionales pt−1 determinados al final de la ronda t − 1. El único conocimiento que tiene un intermediario sobre la valoración de un postor es a través del árbol de ofertas. Supongamos que un intermediario fue consultado por la bolsa y se le preguntó en qué operación estaba más interesado el oferente a los precios provisionales. La regla de RP dice lo siguiente: el proxy debe tener suficiente 7. Por ejemplo, aplicando esto a la precisión en el Ejemplo 2, resolvemos una vez y encontramos que los postores 1 y 2 son vinculantes, con un error δ∗ = 2/3. Fijamos estos y luego minimizamos el error para los postores 3 y 4. Finalmente, esto da p(A) = p(B) = 10/3 y p(C) = p(D) = 5/3, con precisión de 2/3 para los postores 1 y 2 y 1/3 para los postores 3 y 4. Se necesitan 254 información para poder determinar este intercambio que maximiza el excedente al precio actual. Considera los siguientes ejemplos: Ejemplo 7. Un postor tiene XOR(+A, +B) y un valor de +5 en la hoja +A y un rango de valores de [5,10] en la hoja +B. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el representante sabe que, sin importar cómo se resuelva la incertidumbre restante del valor en +B, el postor siempre preferirá (débilmente) +B a +A. Ejemplo 8. Un postor tiene XOR(+A, +B) y límites de valor [5, 10] en el nodo raíz y un valor de 1 en la hoja +A. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el postor siempre preferirá +A a +B a precios iguales, sin importar cómo se resuelva finalmente el valor incierto en el nodo raíz. Sobrecargando la notación, sea vi ∈ Ti una valoración que sea consistente con las valoraciones inferiores y superiores en el árbol de oferta Ti. Definición 4. El árbol de oferta Ti satisface RP a precios pt−1 si y solo si existe algún intercambio factible L∗ para el cual, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. Para determinar esto para el postor i, resolvemos una secuencia de problemas, cada uno de los cuales es una variación del problema WD. Primero, construimos un intercambio candidato de límite inferior, que es un intercambio factible que resuelve: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) La solución π∗ l a RP1(i) representa el pago máximo que el postor i puede lograr en todos los intercambios factibles, dado su valoración pesimista. Segundo, rompemos los lazos para encontrar un intercambio con la máxima incertidumbre del valor en todas las posibles soluciones a RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] sujeto a λ ∈ Feas(x0) (22) vi(λi) − pt−1(λi) ≥ π∗ l (23) Adoptamos la solución L∗ i como nuestro candidato para el intercambio que puede satisfacer RP. Para entender la importancia de esta regla de desempate, considera el Ejemplo 7. El proxy puede demostrar que +B pero no +A es una mejor respuesta para todos los vi ∈ Ti, y debería elegir +B como su candidato. Observa que +B es un contraejemplo para +A, pero no al revés. Ahora, construimos una valuación modificada ˜vi, estableciendo ˜viβ = viβ, si β ∈ sat(L∗ i) viβ, de lo contrario. (24) donde sat(L∗ i) es el conjunto de nodos que están satisfechos en el árbol de límite inferior para el comercio L∗ i. Dada esta valuación modificada, encontramos U∗ para resolver: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Sea π∗ u el beneficio de este intercambio óptimo en los valores modificados ˜v. Llamamos al intercambio U∗ i el intercambio testigo. Mostramos en la Proposición 1 que la regla RP se cumple si y solo si π∗ l ≥ π∗ u. La construcción de la valoración modificada como ˜vi reconoce que existe incertidumbre compartida en las operaciones que cumplen los mismos nodos en un árbol de ofertas. El ejemplo 8 ayuda a ilustrar esto. Simplemente usando vi en RP3(i), encontraríamos que L∗ i es comprar A con un pago de π∗ l = 3 pero luego encontraríamos que U∗ i es comprar B con π∗ u = 7 y fallar en RP. Debemos reconocer que, sin importar cómo se resuelva la incertidumbre en el nodo raíz, afectará a +A y +B de la misma manera. Por esta razón, establecimos ˜viβ = viβ = 5 en el nodo raíz, que es exactamente el mismo valor que se adoptó al determinar π∗ l. Entonces, RP3(i) aplicado a U∗ i da como resultado comprar A y se considera que el test de RP ha sido aprobado. Proposición 1. El árbol de oferta Ti satisface RP dado los precios pt−1 si y solo si cualquier intercambio de límite inferior L∗ i que resuelve RP1(i) y RP2(i) satisface: vi(Ti, L∗ i) − pt−1 (L∗ i) ≥ ˜vi(Ti, U∗ i) − pt−1 (U∗ i), (26) donde ˜vi es la valoración modificada en la ecuación (24). Prueba. Para la suficiencia, observe que la diferencia en el pago entre el intercambio L∗ i y otro intercambio λi no se ve afectada por la forma en que se resuelve la incertidumbre en cualquier nodo que esté satisfecho tanto en L∗ i como en λi. Corregir los valores en ˜vi en los nodos satisfechos en L∗ i tiene el efecto de eliminar esta consideración cuando se selecciona un intercambio U∗ i que satisface uno de estos nodos. Por otro lado, fijar los valores en estos nodos no tiene efecto en las operaciones consideradas en RP3(i) que no comparten un nodo con L∗ i. Para la dirección necesaria, primero mostramos que cualquier intercambio que satisfaga RP debe resolver RP1(i). Supongamos lo contrario, que algún λi con un pago mayor que π∗ l cumple con RP. Sin embargo, la valoración vi ∈ Ti junto con L∗ i presenta un contraejemplo a RP (Eq. 20). Ahora, supongamos (por contradicción) que algún λi con ganancia máxima π∗ l pero incertidumbre menor que L∗ i cumple con RP. Procede mediante el análisis de casos. Caso a): solo una solución a RP1(i) tiene un valor incierto y, por lo tanto, λi tiene un valor seguro. Pero, esto no puede satisfacer a RP porque L∗ i con un valor incierto sería un contraejemplo para RP (Eq. 20). Caso b): dos o más soluciones a RP1(i) tienen un valor incierto. Aquí argumentamos primero que uno de estos intercambios debe satisfacer un (débil) superconjunto de todos los nodos con valor incierto que son satisfechos por todos los demás intercambios en este conjunto. Esto es por RP. Sin esto, entonces para cualquier elección de comercio que resuelva RP1(i), hay otro comercio con un conjunto disjunto de nodos inciertos pero satisfechos que proporciona un contraejemplo a RP (Ec. 20). Ahora, considera el caso en el que algún intercambio contiene un superconjunto de todos los nodos inciertos satisfechos de los otros intercambios. Claramente RP2(i) elegirá este intercambio, L∗ i, y λi debe satisfacer un subconjunto de estos nodos (por suposición). Pero ahora vemos que λi no puede cumplir con RP porque L∗ i sería un contraejemplo para RP. El incumplimiento de la regla de actividad debe tener alguna consecuencia. En las reglas actuales, la acción predeterminada que elegimos es establecer los límites superiores en las valoraciones hasta el valor máximo del precio provisional en un nodo8 y el valor del límite inferior en ese nodo.9 Tal postor puede permanecer activo 8 El precio provisional en un nodo se define como el precio total mínimo entre todos los intercambios factibles para los cuales el subárbol enraizado en el árbol está satisfecho. 9 Esto es completamente análogo a cuando un postor en una subasta de reloj ascendente deja de ofertar a un precio: no se le permite ofertar a un precio más alto nuevamente en rondas futuras. 255 dentro del intercambio, pero solo con valoraciones que sean consistentes con estos nuevos límites. 5.4 Retroalimentación del postor En cada ronda, nuestro diseño predeterminado proporciona a cada postor el intercambio provisional y también los precios provisionales actuales. Ver el 7 para una discusión adicional. También brindamos orientación para ayudar a un licitador a cumplir con la regla de RP. Que sat(L∗ i ) y sat(U∗ i ) denoten los nodos que se satisfacen en los intercambios L∗ i y U∗ i, tal como se calcula en RP1-RP3. Lema 2. Cuando RP falla, un postor debe aumentar un límite inferior en al menos un nodo en sat(L∗ i) \\ sat(U∗ i) o disminuir un límite superior en al menos un nodo en sat(U∗ i) \\ sat(L∗ i) para cumplir con la regla de actividad. Prueba. Cambiar los valores superiores o inferiores en los nodos que no cumplen con ninguno de los intercambios no cambia ni L∗ i ni U∗ i, y no altera el beneficio de estos intercambios. Por lo tanto, la condición de RP seguirá fallando. De igual manera, cambiar los límites en los nodos que se satisfacen en ambos intercambios no tiene efecto en la preferencia revelada. Un cambio en un límite inferior en un nodo compartido afecta tanto a L∗ i como a U∗ i de manera idéntica debido al uso de la valoración modificada para determinar U∗ i. Un cambio en un límite superior en un nodo compartido no tiene efecto en la determinación de L∗ i o U∗ i. Ten en cuenta que cuando sat(U∗ i ) = sat(L∗ i ) entonces la condición (26) siempre se satisface trivialmente, por lo que la orientación en el lema siempre está bien definida cuando RP falla. Este es un mecanismo de retroalimentación elegante porque es adaptable. Una vez que un postor realiza algunos cambios en un subconjunto de estos nodos, el postor puede consultar el intercambio. El intercambio puede responder sí, o puede revisar el conjunto de nodos sat(λ∗ l ) y sat(λ∗ u) según sea necesario. 5.5 Condiciones de Terminación Una vez que cada postor haya comprometido sus nuevas ofertas (y haya cumplido con la regla de RP o haya sufrido la penalización), entonces la ronda t se cierra. En este punto, la tarea es determinar la nueva valoración α, y a su vez la asignación provisional λt y los precios provisionales pt. Una condición de terminación también se verifica, para determinar si se debe pasar el intercambio a una ronda final y definitiva. Para definir la α-valoración, calculamos las siguientes dos cantidades: Pesimista en Pesimista (PP). Determinar un intercambio eficiente, λ∗ l, en valores pesimistas, es decir, resolver maxλ   i vi(λi), y establecer PP=  i vi(λ∗ li). Pessimista a Optimista (PO) Determinar un intercambio eficiente, λ∗ u, en valores optimistas, es decir, resolver maxλ   i vi(λi), y establecer PO=  i vi(λ∗ ui). Primero, hay que tener en cuenta que PP ≥ PO y PP ≥ 0 por definición, para todos los árboles de oferta, aunque PO puede ser negativo (porque el intercambio correcto en v no es actualmente un intercambio útil en v). Reconociendo esto, definir γeff (PP, PO) = 1 + PP − PO PP , (27) cuando PP > 0, y observar que γeff (PP, PO) ≥ 1 cuando esto está definido, y que γeff (PP, PO) comenzará siendo grande y luego tenderá hacia 1 a medida que la asignación optimista converge hacia la asignación pesimista. En cada ronda, definimos αeff ∈ [0, 1] como: αeff = 0 cuando PP es 0, 1/γeff en otro caso (28), lo cual es 0 cuando PP es 0 y luego tiende hacia 1 una vez que PP > 0 en alguna ronda. Esto se utiliza para definir la α-valoración vα i = αeff vi + (1 − αeff )vi, ∀i, (29) que se utiliza para definir la asignación provisional y los precios provisionales. El efecto es definir endógenamente un horario para pasar de valores optimistas a pesimistas a lo largo de las rondas, basado en qué tan cercanos estén los intercambios entre sí. Condición de terminación. Al avanzar a la última y definitiva ronda, y finalmente cerrar, también nos preocupamos por la convergencia de pagos, además de la convergencia hacia un comercio eficiente. Para esto introducimos otro parámetro, αthresh ∈ [0, 1], que tiende de 0 a 1 a medida que los pagos de umbral en las valoraciones inferiores y superiores convergen. Considera el siguiente parámetro: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive), (30) el cual está definido para PP > 0, donde pthresh(v) denota los pagos de umbral en el perfil de valoración v, Nactive es el número de postores que están activamente involucrados en el comercio en la transacción de PP, y || · ||2 es la norma L2. Ten en cuenta que γthresh está definido para pagos y no para ganancias. Esto es apropiado porque la precisión del resultado del intercambio es lo que importa: es decir, el comercio y los pagos. Dado esto, definimos αthresh = 0 cuando PP es 0 y 1/γthresh en otro caso (31), lo cual es 0 mientras PP es 0 y luego tiende hacia 1 a medida que se avanza. Definición 5 (terminación). ICE pasa a una ronda final cuando se cumple una de las siguientes condiciones: 1. αeff ≥ CUTOFFeff y αthresh ≥ CUTOFFthresh, 2. no hay intercambio en los valores optimistas, donde CUTOFFeff, CUTOFFthresh ∈ (0, 1] determinan la precisión requerida para la terminación. Al final de la última y definitiva ronda, vα = v se utiliza para definir el intercambio final y los pagos finales del umbral. Ejemplo 9. Considera nuevamente el Ejemplo 1, y considera los límites superiores e inferiores como se muestra en la Figura 1. Primero, si los límites de los vendedores fueron [−20, −4] entonces hay un intercambio optimista pero no hay un intercambio pesimista, y PO = −4 y PP = 0, y αeff = 0. En los límites representados, tanto los intercambios optimistas como pesimistas ocurren y PO = PP = 4 y αeff = 1. Sin embargo, podemos ver que los pagos umbral son (17, −17) en v pero (14, −14) en v. Al evaluar γthresh, tenemos γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, y αthresh = 2/5. Para CUTOFFthresh < 2/5, el intercambio permanecería abierto. Por otro lado, si el valor que los compradores asignan a +AB estaba entre [18, 24] y el valor que los vendedores asignan a -AB estaba entre [-12, -6], los pagos umbral son (15, -15) en ambos límites superior e inferior, y αthresh = 1. 256 Líneas de Propósito de Componente Agente. El modelo 762 de Soporte Captura el comportamiento estratégico y las decisiones de revelación de información. Proporciona soporte XML para cargar bienes y valoraciones en el mundo 200. El mundo 200 realiza un seguimiento de todos los detalles de agentes, bienes y valoraciones. El Controlador y Comunicación de Intercambio 998 controla el intercambio y coordina el comportamiento remoto de los agentes. El Lenguaje de Subasta 1119 implementa el lenguaje de subasta basado en árboles. El Motor de Reglas de Actividad 203 implementa la regla de preferencia revelada con soporte de rango. El Motor de Reglas de Cierre 137 verifica si se ha alcanzado la condición de terminación de la subasta. El Motor WD 377 proporciona lógica relacionada con WD. El Motor de Precios 460 proporciona lógica relacionada con precios. Los Constructores MIP 346 traducen la lógica utilizada por los motores en nuestra formulación general de optimización. Los Constructores de Precios 256 son utilizados por tres etapas de precios. Los Constructores de Determinación de Ganadores 365 son utilizados por WD, regla de actividad, regla de cierre y generación de restricciones de precios. El código de Soporte del Marco 510 facilita la sustitución modular de los componentes anteriores. Tabla 1: Desglose de Componentes y Código de Intercambio. La INFRAESTRUCTURA DE SISTEMAS ICE consta de aproximadamente 6502 líneas de código Java, divididas en los paquetes funcionales descritos en la Tabla 1.10. El prototipo es modular para que los investigadores puedan reemplazar fácilmente los componentes para experimentación. Además del intercambio central discutido en este documento, hemos desarrollado un componente de agente que permite a un usuario simular el comportamiento y conocimiento de otros jugadores en el sistema, lo que le permite al usuario formular su estrategia antes de jugar realmente. Un usuario especifica un modelo de valoración en una interpretación XML de nuestro lenguaje de oferta, que se revela al intercambio a través de la estrategia de los agentes. Las principales tareas de intercambio son manejadas por motores que dictan la lógica no específica del optimizador. Estos motores impulsan los constructores MIP/LP apropiados. Nos dimos cuenta de que todas nuestras formulaciones de optimización se reducen a dos clases de problemas de optimización. El primero, utilizado para la determinación del ganador, la regla de actividad, la regla de cierre y la generación de restricciones en la fijación de precios, es un MIP que encuentra intercambios que maximizan el valor, manteniendo constantes los precios y los márgenes. El segundo, utilizado por las tres etapas de fijación de precios, es un LP que mantiene constantes las operaciones comerciales, buscando minimizar la holgura, el beneficio o los precios. Aprovechamos la similitud de estos problemas utilizando constructores de LP/MIP comunes que difieren solo en unos pocos ganchos funcionales para proporcionar las variables correctas para la optimización. Hemos generalizado nuestra interfaz de optimización del back-end (actualmente soportamos CPLEX y LPSolve con licencia LGPL) y podemos aprovechar la capacidad de equilibrio de carga y resolución paralela de MIP/LP que esta biblioteca proporciona. DISCUSIÓN El lenguaje de oferta se definió para permitir una simetría perfecta entre compradores y vendedores y proporcionar expresividad en un dominio de intercambio, por ejemplo, para oferentes mixtos interesados en ejecutar operaciones como swaps. Esto resultó especialmente desafiante. El avance se produjo cuando nos enfocamos en los cambios de valor para las operaciones en lugar de proporcionar valores absolutos para las asignaciones. Para simplificar, requerimos la misma estructura de árbol tanto para las valoraciones superiores como inferiores. El tamaño del código se mide en líneas de código fuente físicas (SLOC), generadas utilizando el Contador SLOC de David A. Wheeler. El total de 6502 incluye 184 para instrumentación (no se muestra en la tabla). La interfaz del solucionador JOpt es de otras 1964 líneas, y Castor genera automáticamente alrededor de 5200 líneas de código para la manipulación de archivos XML. Esto permite que el propio lenguaje garantice la consistencia (con el valor superior al menos igual al valor inferior en todas las operaciones) y aplique un estrechamiento monótono de estos límites para todas las operaciones en todas las rondas. También proporciona un método eficiente para verificar la regla de actividad de RP, ya que facilita razonar sobre la incertidumbre compartida entre las operaciones. La decisión de adoptar un enfoque directo y delegado en el cual los licitadores expresan sus valores superiores e inferiores a un agente de confianza que interactúa con la bolsa se tomó temprano en el proceso de diseño. En muchos aspectos, esta es la forma más clara y directa de generalizar el diseño en Parkes et al. [24] y hacerlo iterativo. Además, esto elimina muchas oportunidades para la manipulación estratégica: los postores están restringidos a hacer declaraciones (incrementales) sobre sus valoraciones. Otra ventaja es que hace que la regla de la actividad sea fácil de explicar: los postores siempre pueden cumplir con la regla de la actividad ajustando los límites de manera que su valor real permanezca en el soporte. Quizás lo más importante es que tener información explícita sobre los valores superiores e inferiores permite avanzar en las primeras rondas, incluso cuando no hay un intercambio eficiente a valores pesimistas. La información de los límites superior e inferior también proporciona orientación sobre cuándo terminar. Ten en cuenta que tomado por sí mismo, PP = PO no implica que el intercambio provisional actual sea eficiente con respecto a todos los valores consistentes con la información de valor actual. La diferencia en los valores entre diferentes oficios, agregada entre todos los postores, podría ser similar en los límites inferiores y superiores pero bastante diferente en los valores intermedios (incluyendo la verdad). Sin embargo, conjeturamos que PP = PO demostrará ser un indicador excelente de eficiencia en entornos prácticos donde la forma de las valoraciones superiores e inferiores sí transmita información útil. Esto merece una investigación experimental. Además, el uso del precio y la actividad de RP proporciona garantías adicionales. Adoptamos precios lineales (precios en artículos individuales) en lugar de precios no lineales (con precios en un intercambio que no son iguales a la suma de los precios de los artículos componentes) al principio del proceso de diseño. La concisión de esta representación de precios es muy importante para la viabilidad computacional dentro del intercambio y también para promover la simplicidad y transparencia para los postores. La regla de actividad RP fue adoptada más tarde, y es una buena elección debido a sus excelentes propiedades teóricas cuando se combina con los precios de CE. Lo siguiente se puede establecer fácilmente: dados los precios CE exactos pt−1 para el comercio provisional 12. Esto contrasta con enfoques basados en precios indirectos, como el reloj-proxy [1], en los que los postores deben ser capaces de razonar sobre las restricciones RP implicadas por las ofertas en cada ronda. 257 λt−1 en valoraciones vα, entonces si los valores superiores e inferiores al inicio de la ronda t ya satisfacen la regla RP (y sin necesidad de ningún desempate), el comercio provisional es eficiente para todas las valoraciones consistentes con los árboles de ofertas actuales. Cuando existen precios lineales de CE, esto proporciona una declaración de solidez y completitud: si PP = PO, existen precios lineales de CE, y se cumple la regla de RP, el intercambio provisional es eficiente (solidez); si los precios son precios exactos de CE para el intercambio provisional en vα, pero el intercambio es ineficiente con respecto a algún perfil de valoración consistente con los árboles de oferta actuales, entonces al menos un postor debe fallar en RP con su árbol de oferta actual y se avanzará (completitud). El trabajo futuro debe estudiar la convergencia experimentalmente y extender esta teoría para permitir precios aproximados. Algunos aspectos estratégicos de nuestro diseño de ICE merecen comentario y estudio adicional. Primero, no afirmamos que responder sinceramente a la regla de RP sea un equilibrio ex post. Sin embargo, el intercambio está diseñado para imitar la regla de Umbral en su esquema de pago, que se sabe que tiene propiedades de incentivo útiles. Debemos tener cuidado, sin embargo. Por ejemplo, no sugerimos proporcionar αeff a los licitadores, porque a medida que αeff se acerca a 1, informaría a los licitadores que los valores de las ofertas se vuelven irrelevantes para determinar el intercambio, sino que se utilizan simplemente para determinar los pagos (y los licitadores se volverían cada vez más reacios a aumentar sus valoraciones más bajas). Además, en este trabajo no se ha considerado la posibilidad de colusión entre los licitadores. Este es un tema que merece atención en trabajos futuros. 8. CONCLUSIONES En este trabajo diseñamos y prototipamos un intercambio combinatorio iterativo escalable y altamente expresivo. El diseño incluye muchas características interesantes, como: un nuevo lenguaje de árbol de ofertas para intercambios, un nuevo método para construir precios lineales aproximados a partir de lenguajes expresivos, y un método de elicitación con valoraciones optimistas y pesimistas con un nuevo método para evaluar una regla de actividad de preferencia revelada. El intercambio está completamente implementado en Java y se encuentra en una fase de validación. Los próximos pasos para nuestro trabajo son permitir a los licitadores refinar la estructura del árbol de oferta además de los valores en el árbol. Tenemos la intención de estudiar las propiedades de elicitación del intercambio y hemos creado un conjunto de pruebas de instancias de problemas de intercambio. Además, estamos comenzando a participar en colaboraciones para aplicar el diseño a la programación de franjas horarias de despegue y aterrizaje de aerolíneas y a la asignación de recursos en sistemas computacionales distribuidos de amplia área de red. Agradecimientos Nos gustaría dedicar este artículo a todos los participantes de CS 286r en la Universidad de Harvard en la primavera de 2004. Este trabajo está parcialmente respaldado por la subvención de la NSF IIS-0238147. REFERENCIAS [1] L. Ausubel, P. Cramton y P. Milgrom. La subasta de reloj-proxi: Un diseño práctico de subasta combinatoria. En Cramton et al. [9], capítulo 5. [2] M. Babaioff, N. Nisan y E. Pavlov. Mecanismos para un mercado distribuido espacialmente. En Actas de la 5ta Conferencia de la ACM sobre Comercio Electrónico, páginas 9-20. ACM Press, 2001. Dado el teorema de imposibilidad de Myerson-Satterthwaite [22] y el método mediante el cual determinamos el intercambio, no deberíamos esperar esto. [3] M. Ball, G. Donohue y K. Hoffman. Subastas para la asignación segura, eficiente y equitativa de los recursos del sistema de espacio aéreo. En S. Cramton, Shoham, editor, Subastas Combinatorias. 2004. Próximamente. [4] D. Bertsimas y J. Tsitsiklis. Introducción a la Optimización Lineal. Athena Scientific, 1997. [5] S. Bikhchandani y J. M. Ostroy. El modelo de asignación de paquetes. Revista de Teoría Económica, 107(2):377-406, 2002. [6] C. Boutilier. Una formulación POMDP de problemas de obtención de preferencias. En Proc. 18ª Conferencia Nacional de Inteligencia Artificial (AAAI-02), 2002. [7] C. Boutilier y H. Hoos. Subastando idiomas para subastas combinatorias. En Proc. 17ª Conferencia Internacional Conjunta sobre Inteligencia Artificial (IJCAI-01), 2001. [8] W. Conen y T. Sandholm. Elicitación de preferencias en subastas combinatorias. En Proc. 3ra Conf. ACM sobre Comercio Electrónico (EC-01), páginas 256-259. ACM Press, Nueva York, 2001. [9] P. Cramton, Y. Shoham y R. Steinberg, editores. Subastas combinatorias. MIT Press, 2004. [10] S. de Vries, J. Schummer y R. V. Vohra. En subastas ascendentes de Vickrey para objetos heterogéneos. Informe técnico, MEDS, Escuela Kellogg, Universidad Northwestern, 2003. [11] S. de Vries y R. V. Vohra. Subastas combinatorias: Un estudio. Revista Informs sobre Computación, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana y T. Wilson. Probando algoritmos de precios lineales para su uso en subastas combinatorias ascendentes. Informe técnico, SEOR, Universidad George Mason, 2003. [13] Y. Fu, J. Chase, B. Chun, S. Schwab, y A. Vahdat. Sharp: una arquitectura para el emparejamiento seguro de recursos. En Actas del decimonoveno simposio de principios de sistemas operativos de ACM, páginas 133-148. ACM Press, 2003. [14] B. Hudson y T. Sandholm. Efectividad de tipos de consultas y políticas para la obtención de preferencias en subastas combinatorias. En Proc. 3rd Int. Articulación. Conferencia sobre Agentes Autónomos y Sistemas Multiagente, páginas 386-393, 2004. [15] V. Krishna. Teoría de subastas. Academic Press, 2002. [16] D. Krych. \n\nEditorial Académica, 2002. [16] D. Krych. Cálculo y análisis de equilibrios de Nash de reglas de pago basadas en Vickrey para intercambios combinatorios, Harvard College, abril de 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter y C. DeMartini. Un nuevo y mejorado diseño para subastas iterativas de múltiples objetos. Ciencias de la Gestión, 2004. Aparecer. [18] E. Kwerel y J. Williams. Una propuesta para una transición rápida a la asignación de espectro por mercado. Informe técnico, Oficina de Planes y Políticas de la FCC, noviembre de 2002. [19] S. M. Lahaie y D. C. Parkes. Aplicando algoritmos de aprendizaje a la obtención de preferencias. En Proc. ACM Conf. on Electronic Commerce, páginas 180-188, 2004. [20] R. P. McAfee. Una subasta doble con estrategia dominante. Revista de Teoría Económica, 56:434-450, 1992. [21] P. Milgrom. Poniendo en práctica la teoría de subastas: La subasta ascendente simultánea. J.Pol. Econ., 108:245-272, 2000. [22] R. B. Myerson y M. A. Satterthwaite. Mecanismos eficientes para el comercio bilateral. Revista de Teoría Económica, 28:265-281, 1983. [23] N. Nisan. Subasta y asignación en subastas combinatorias. En Proc. 2ª ACM Conf. sobre Comercio Electrónico (EC-00), páginas 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam y M. Eso. Lograr el equilibrio presupuestario con esquemas de pago basados en Vickrey en intercambios. En Proc. 17ª Conferencia Internacional Conjunta de Inteligencia Artificial (IJCAI-01), páginas 1161-1168, 2001. [25] D. C. Parkes y L. H. Ungar. Subastas combinatorias iterativas: Teoría y práctica. En Proc. 17ª Conferencia Nacional de Inteligencia Artificial (AAAI-00), páginas 74-81, julio de 2000. [26] S. J. Rassenti, V. L. Smith y R. L. Bulfin. Un mecanismo combinatorio para la asignación de franjas horarias en aeropuertos. Revista Bell de Economía, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc y R. M. Harstad. Subastas combinatorias computacionalmente manejables. Ciencia de la Gestión, 44(8):1131-1147, 1998. [28] T. Sandholm y C. Boutilier. Elicitación de preferencias en subastas combinatorias. En Cramton et al. [9], capítulo 10. [29] P. R. Wurman y M. P. Wellman. AkBA: Una subasta combinatoria progresiva y de precio anónimo. En la Segunda Conferencia ACM sobre Comercio Electrónico, páginas 21-29, 2000. 258",
    "original_sentences": [
        "ICE: An Iterative Combinatorial Exchange David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative combinatorial exchange (ICE).",
        "The exchange incorporates a tree-based bidding language that is concise and expressive for CEs.",
        "Bidders specify lower and upper bounds on their value for different trades.",
        "These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
        "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
        "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
        "A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
        "The exchange is fully implemented and in a validation phase.",
        "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
        "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
        "In a double auction (DA), multiple buyers and sellers trade units of an identical good [20].",
        "In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11].",
        "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language.",
        "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
        "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
        "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
        "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
        "Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling.",
        "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
        "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
        "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
        "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
        "This paper presents the first design for an iterative combinatorial exchange (ICE).",
        "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
        "The ICE design problem is multi-faceted and quite hard.",
        "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
        "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round.",
        "The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments.",
        "The exchange has a number of interesting theoretical properties.",
        "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
        "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
        "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
        "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
        "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
        "The exchange is implemented in Java and is currently in validation.",
        "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
        "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
        "We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions.",
        "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
        "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based bidding language.",
        "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable.",
        "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
        "Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
        "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
        "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
        "An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade.",
        "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
        "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades.",
        "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
        "A revealed-preference activity rule [1] ensures progress across rounds.",
        "In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices.",
        "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
        "An outline of the ICE system flow of control is provided in Figure 1.",
        "We will return to this example later in the paper.",
        "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance).",
        "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round.",
        "At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29].",
        "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
        "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
        "The price generation methods that we use in ICE generalize the methods in these earlier papers.",
        "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule.",
        "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
        "We are not aware of any previous studies of iterative CEs.",
        "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
        "No dominant strategy mechanisms are known for the general CE problem.",
        "ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
        "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
        "The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
        "Rothkopf et al. [27] also describe a restricted tree-based bidding language.",
        "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
        "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
        "The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
        "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
        "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
        "A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
        "So, the final allocation is x1 = x0 + λ.",
        "Each bidder has a value vi(λi) ∈ ¡ for a trade λi.",
        "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
        "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ .",
        "Price p can be negative, indicating the bidder receives a payment for the trade.",
        "We use the term payoff interchangeably with utility.",
        "Our goal in the ICE design is to implement the efficient trade.",
        "The efficient trade, λ∗ , maximizes the total increase in value across bidders.",
        "Definition 1 (Efficient trade).",
        "The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
        "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
        "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
        "All three examples have only one seller, but this is purely illustrative.",
        "Example 1.",
        "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
        "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
        "Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
        "Example 2.",
        "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
        "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
        "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
        "The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
        "Example 3.",
        "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
        "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
        "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
        "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades.",
        "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
        "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
        "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
        "We illustrate the language on each of Examples 1-3 in Figure 2.",
        "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
        "The nodes have zero values where no value is indicated.",
        "Internal nodes are also labeled with interval-choose (IC) ranges.",
        "Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
        "First, if a child is on then its parent must be on.",
        "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
        "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade.",
        "For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
        "On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
        "Given a trade there is often a number of ways to choose the set of satisfied nodes.",
        "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
        "Consider bid tree Ti from bidder i.",
        "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
        "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
        "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
        "Every node is also labeled with a value, viβ ∈ ¡ .",
        "Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.)",
        "Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
        "There will often be a choice.",
        "Ties are broken to maximize value.",
        "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
        "Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
        "This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade.",
        "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
        "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
        "The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
        "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
        "Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
        "OR* is known to be expressive and concise.",
        "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
        "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
        "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
        "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
        "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
        "In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
        "We call ∆vcg,i = V ∗ − V−i the VCG discount.",
        "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
        "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome.",
        "Definition 2.",
        "The Threshold payment scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance).",
        "Example 4.",
        "In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
        "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
        "This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes.",
        "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
        "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
        "THE ICE DESIGN We are now ready to introduce the iterative combinatorial exchange (ICE) design.",
        "Several new components are introduced, relative to the design for the one-shot exchange.",
        "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
        "The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations.",
        "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
        "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v).",
        "Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
        "These take the place of the exact value viβ defined in Section 4.1.",
        "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
        "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
        "The following lemma is useful: Lemma 1.",
        "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
        "Proof.",
        "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
        "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
        "But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
        "Given these provisional prices, the price on trade λi for bidder i is pt (λi) =   j≤m pt j · λij.",
        "Definition 3 (CE prices).",
        "Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
        "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
        "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
        "II: Fairness.",
        "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
        "III: Balance.",
        "Third, we break ties to prefer prices that minimize the maximal price across all items.",
        "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
        "In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades.",
        "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
        "Each step is described in detail below.",
        "I: Accuracy.",
        "We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages.",
        "Let λt denote the current provisional trade and suppose the provisional valuation is vα .",
        "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
        "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
        "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.)",
        "Example 5.",
        "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
        "The efficient trade allocates AB to buyer 1 and CD to buyer 3.",
        "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
        "But, (9) has an exponential number of constraints (Eq. 10).",
        "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
        "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
        "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
        "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
        "In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices.",
        "Let ˆλi denote the solution to R-WD(i).",
        "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
        "Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
        "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
        "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
        "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
        "This can be exactly achieved in pricing with pA + pB = 14.",
        "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
        "The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the VCG payoff (at vα ).",
        "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
        "III: Balance.",
        "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items.",
        "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
        "Finally, balance sets p(A) = p(B) = 7.",
        "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
        "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
        "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
        "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
        "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
        "Dunford et al. [12] prefer to smooth prices across rounds.",
        "Comment 1: Lexicographical Refinement.",
        "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
        "For instance, in ACC we successively minimize the maximal error across all bidders.",
        "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
        "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
        "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
        "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL.",
        "Comment 2: Computation.",
        "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
        "Thus, the computational effort in constraint generation is re-used.",
        "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
        "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
        "This avoids later infeasibility issues.",
        "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
        "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
        "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
        "We adopt a simple revealed-preference (RP) activity rule.",
        "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
        "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
        "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
        "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
        "Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices.",
        "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
        "We pin these down and then minimize the error to bidders 3 and 4.",
        "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices.",
        "Consider the following examples: Example 7.",
        "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
        "Suppose prices are currently 3 for each of A and B.",
        "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
        "Example 8.",
        "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
        "Suppose prices are currently 3 for each of A and B.",
        "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
        "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
        "Definition 4.",
        "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
        "First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
        "Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP.",
        "To understand the importance of this tiebreaking rule consider Example 7.",
        "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
        "Notice that +B is a counterexample to +A, but not the other way round.",
        "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i .",
        "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v.",
        "We call trade U∗ i the witness trade.",
        "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
        "Example 8 helps to illustrate this.",
        "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
        "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
        "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
        "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
        "Proposition 1.",
        "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
        "Proof.",
        "For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
        "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes.",
        "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
        "For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i).",
        "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
        "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
        "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
        "Proceed by case analysis.",
        "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
        "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
        "Case b): two or more solutions to RP1(i) have uncertain value.",
        "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
        "This is by RP.",
        "Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
        "Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades.",
        "Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
        "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
        "Failure to meet the activity rule must have some consequence.",
        "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices.",
        "See 7 for an additional discussion.",
        "We also provide guidance to help a bidder meet the RP rule.",
        "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
        "Lemma 2.",
        "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
        "Proof.",
        "Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
        "Thus, the RP condition will continue to fail.",
        "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
        "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
        "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
        "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
        "This is an elegant feedback mechanism because it is adaptive.",
        "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
        "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
        "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
        "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
        "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
        "Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
        "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v).",
        "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
        "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
        "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
        "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
        "Termination Condition.",
        "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade.",
        "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
        "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm.",
        "Note that γthresh is defined for payments and not payoffs.",
        "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments.",
        "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
        "Definition 5 (termination).",
        "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
        "At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments.",
        "Example 9.",
        "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
        "First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0.",
        "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
        "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
        "For CUTOFFthresh < 2/5 the exchange would remain open.",
        "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
        "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the tree-based bidding language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
        "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
        "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
        "A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy.",
        "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
        "These engines drive the appropriate MIP/LP builders.",
        "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
        "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
        "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
        "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
        "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
        "DISCUSSION The bidding language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
        "This proved especially challenging.",
        "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
        "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
        "The total of 6502 includes 184 for instrumentation (not shown in the table).",
        "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
        "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
        "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
        "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
        "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
        "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values.",
        "Upper and lower bound information also provides guidance about when to terminate.",
        "Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information.",
        "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
        "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
        "This is worthy of experimental investigation.",
        "Moreover, the use of price and RP activity provides additional guarantees.",
        "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process.",
        "The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
        "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
        "The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees.",
        "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
        "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
        "Some strategic aspects of our ICE design deserve comment, and further study.",
        "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
        "We must be careful, though.",
        "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
        "Also, no consideration has been given in this work to collusion by bidders.",
        "This is an issue that deserves some attention in future work. 8.",
        "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative combinatorial exchange.",
        "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
        "The exchange is fully implemented in Java and is in a validation phase.",
        "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
        "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
        "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
        "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
        "This work is supported in part by NSF grant IIS-0238147. 9.",
        "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
        "The clock-proxy auction: A practical combinatorial auction design.",
        "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
        "Mechanisms for a spatially distributed market.",
        "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
        "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
        "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
        "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
        "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
        "Introduction to Linear Optimization.",
        "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
        "The package assignment model.",
        "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
        "A pomdp formulation of preference elicitation problems.",
        "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
        "Bidding languages for combinatorial auctions.",
        "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
        "Preference elicitation in combinatorial auctions.",
        "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
        "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
        "Combinatorial Auctions.",
        "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
        "On ascending Vickrey auctions for heterogeneous objects.",
        "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
        "Combinatorial auctions: A survey.",
        "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
        "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
        "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
        "Chase, B. Chun, S. Schwab, and A. Vahdat.",
        "Sharp: an architecture for secure resource peering.",
        "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
        "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
        "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
        "In Proc. 3rd Int.",
        "Joint.",
        "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
        "Auction Theory.",
        "Academic Press, 2002. [16] D. Krych.",
        "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
        "A new and improved design for multi-object iterative auctions.",
        "Management Science, 2004.",
        "To appear. [18] E. Kwerel and J. Williams.",
        "A proposal for a rapid transition to market allocation of spectrum.",
        "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
        "Applying learning algorithms to preference elicitation.",
        "In Proc.",
        "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
        "A dominant strategy double auction.",
        "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
        "Putting auction theory to work: The simultaneous ascending auction.",
        "J.Pol.",
        "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
        "Efficient mechanisms for bilateral trading.",
        "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
        "Bidding and allocation in combinatorial auctions.",
        "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
        "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
        "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
        "Iterative combinatorial auctions: Theory and practice.",
        "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
        "A combinatorial mechanism for airport time slot allocation.",
        "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
        "Computationally manageable combinatorial auctions.",
        "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
        "Preference elicitation in combinatorial auctions.",
        "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
        "AkBA: A progressive, anonymous-price combinatorial auction.",
        "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
    ],
    "translated_text_sentences": [
        "Presentamos el primer diseño para un intercambio combinatorio iterativo (ICE).",
        "El intercambio incorpora un lenguaje de oferta basado en árboles que es conciso y expresivo para los CE.",
        "Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios.",
        "Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores.",
        "Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios.",
        "Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas.",
        "Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales.",
        "El intercambio está completamente implementado y en una fase de validación.",
        "Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1.",
        "INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias.",
        "En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20].",
        "En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11].",
        "Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo.",
        "Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total.",
        "Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos.",
        "Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC.",
        "Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas.",
        "A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden.",
        "Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3].",
        "En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías.",
        "Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13].",
        "La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación.",
        "Este documento presenta el primer diseño para un intercambio combinatorio iterativo (ICE).",
        "La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo.",
        "El problema de diseño de ICE es multifacético y bastante difícil.",
        "La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas.",
        "El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda.",
        "La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales.",
        "El intercambio tiene una serie de interesantes propiedades teóricas.",
        "Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente.",
        "Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
        "HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones.",
        "Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28].",
        "Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto.",
        "El intercambio está implementado en Java y actualmente se encuentra en validación.",
        "Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos.",
        "Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda.",
        "Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación.",
        "Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2.",
        "UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de oferta basado en árboles expresivo y conciso.",
        "El lenguaje describe valores para intercambios, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el intercambio sea aceptable.",
        "El lenguaje permite a los postores expresar límites superiores e inferiores en el valor, los cuales pueden ser ajustados en cada ronda. • Determinación del ganador.",
        "La determinación del ganador (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación.",
        "Comparar la solución en los valores superiores e inferiores permite tomar una decisión sobre la terminación, con el progreso en rondas intermedias impulsado por una valoración intermedia y los valores inferiores adoptados al finalizar. • Pagos.",
        "Los pagos se calculan utilizando la regla de pago del umbral [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de precios.",
        "Se calcula un precio aproximado para cada artículo en el intercambio en cada ronda, en función de las valoraciones intermedias y el intercambio provisional.",
        "Los precios se optimizan para aproximar los precios de equilibrio competitivo, y luego se optimizan aún más para aproximar mejor los pagos del umbral actual con los lazos restantes rotos para favorecer los precios equilibrados entre diferentes artículos.",
        "Al calcular los precios, adoptamos los métodos de generación de restricciones para explotar la estructura del lenguaje de oferta y evitar enumerar todos los intercambios factibles.",
        "El subproblema para generar nuevas restricciones es una variación del problema WD. • Regla de actividad.",
        "Una regla de actividad de preferencia revelada [1] garantiza progreso a lo largo de las rondas.",
        "Para permanecer activo, un oferente debe ajustar los límites para que haya suficiente información para definir un intercambio que maximice el excedente a los precios actuales.",
        "Otra variación del problema de WD se formula, tanto para verificar que se cumple la regla de actividad como para proporcionar retroalimentación a un postor para explicar cómo cumplir la regla.",
        "Se proporciona un esquema del flujo de control del sistema ICE en la Figura 1.",
        "Volveremos a este ejemplo más adelante en el documento.",
        "Por ahora, simplemente observa en este ejemplo de dos agentes que los agentes establecen límites inferiores y superiores que son verificados en la regla de actividad, y luego pasados a la determinación del ganador (WD), y luego a través de tres etapas de fijación de precios (precisión, equidad, equilibrio).",
        "Al pasar la regla de cierre (en la que se verifican los parámetros αeff y αthresh para la convergencia del comercio y los pagos), el intercambio pasa a una última y definitiva ronda.",
        "Al final de esta ronda, el intercambio y los pagos finalmente se determinan, basados en las valoraciones más bajas. 2.1 Trabajo Relacionado En la literatura se conocen muchos CAs de un solo lado con precios ascendentes [10, 25, 29].",
        "También se han propuesto enfoques de elicitación directa para los AC unilaterales en los que los agentes responden a preguntas explícitas sobre sus valoraciones [8, 14, 19].",
        "Un número de CAs ascendentes están diseñados para trabajar con precios simples en artículos [12, 17].",
        "Los métodos de generación de precios que utilizamos en ICE generalizan los métodos de estos artículos anteriores.",
        "Parkes et al. [24] estudiaron intercambios combinatorios de oferta sellada e introdujeron la regla de pago umbral.",
        "Posteriormente, Krych [16] demostró experimentalmente que la regla del Umbral promueve asignaciones eficientes.",
        "No tenemos conocimiento de ningún estudio previo sobre CEs iterativos.",
        "Las estrategias dominantes DAs son conocidas por la demanda unitaria [20] y también por agentes de mente única [2].",
        "No se conocen mecanismos de estrategia dominante para el problema general de la CE.",
        "ICE es un diseño de subasta híbrido, ya que combina precios simples de artículos para impulsar las ofertas en las primeras rondas con WD combinatorio y pagos, una característica que comparte con el diseño de reloj-proxy de Ausubel et al. [1] para subastas unilaterales.",
        "Adoptamos una variación de la regla de actividad de preferencia revelada en las subastas de proxy de reloj.",
        "El lenguaje de subasta comparte algunos elementos estructurales con el lenguaje LGB de Boutilier y Hoos [7], pero tiene semántica muy diferente.",
        "Rothkopf et al. [27] también describen un lenguaje de oferta basado en árboles restringido.",
        "En LGB, la semántica es la de la lógica proposicional, con los mismos elementos en una asignación capaces de satisfacer un árbol en múltiples lugares.",
        "Aunque esto puede hacer que LGB sea especialmente conciso en algunos contextos, la semántica que proponemos parece proporcionar una utilidad local, de modo que el valor de un componente en un árbol pueda ser comprendido de forma independiente al resto del árbol.",
        "La idea de capturar la estructura de nuestro lenguaje de oferta de manera explícita dentro de una formulación de programación entera mixta sigue los desarrollos en Boutilier [6]. 3.",
        "PRELIMINARES En nuestro modelo, consideramos un conjunto de bienes, indexados {1, . . . , m} y un conjunto de postores, indexados {1, . . . , n}.",
        "La asignación inicial de bienes se denota como x0 = (x0 1, . . . , x0 n), donde x0 i = (x0 i1, . . . , x0 im) y x0 ij ≥ 0 para el bien j indicando el número de unidades del bien j que posee el postor i.",
        "Un intercambio λ = (λ1, . . . , λn) denota el cambio en la asignación, con λi = (λi1, . . . , λim) donde λij ∈ es el cambio en el número de unidades del ítem j para el postor i.",
        "Entonces, la asignación final es x1 = x0 + λ.",
        "Cada postor tiene un valor vi(λi) ∈ ¡ para una transacción λi.",
        "Este valor puede ser positivo o negativo, y representa el cambio en el valor entre la asignación final x0 i +λi y la asignación inicial x0 i.",
        "La utilidad es cuasi-lineal, con ui(λi, p) = vi(λi)−p para el intercambio λi y el pago p ∈ ¡.",
        "El precio p puede ser negativo, lo que indica que el postor recibe un pago por la transacción.",
        "Utilizamos el término \"pago\" de manera intercambiable con \"utilidad\".",
        "Nuestro objetivo en el diseño de ICE es implementar el comercio eficiente.",
        "El intercambio eficiente, λ∗, maximiza el aumento total de valor entre los postores.",
        "Definición 1 (Comercio eficiente).",
        "El intercambio eficiente λ∗ resuelve max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Las restricciones (1) aseguran que ningún agente venda más artículos de los que tiene en su asignación inicial.",
        "Las restricciones (2) permiten la disposición gratuita y permiten que los intercambios factibles vendan más artículos de los que se compran (pero no al revés).",
        "Posteriormente, adoptamos Feas(x0) para denotar el conjunto de intercambios factibles, dados estos límites y una asignación inicial x0 = (x0 1, . . . , x0 n). 3.1 Ejemplos Prácticos En esta sección, proporcionamos tres ejemplos simples de instancias que utilizaremos para ilustrar varios componentes del intercambio.",
        "Todos los tres ejemplos tienen solo un vendedor, pero esto es puramente ilustrativo.",
        "Ejemplo 1.",
        "Un vendedor y un comprador, dos bienes {A, B}, con el vendedor teniendo una asignación inicial de AB.",
        "Cambios en los valores de los intercambios: vendedor comprador Y (−A, −B) Y (+A, +B) -10 +20 El Y indica que tanto el comprador como el vendedor solo están interesados en intercambiar ambos bienes como un paquete.",
        "Aquí, el intercambio eficiente (que maximiza el valor) es para el vendedor vender AB al comprador, denotado como λ∗ = ([−1, −1], [+1, +1]).",
        "Ejemplo 2.",
        "Un vendedor y cuatro compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD.",
        "Cambios en los valores de las transacciones: vendedor comprador1 comprador 2 comprador 3 comprador 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 El OR indica que el vendedor está dispuesto a vender cualquier cantidad de bienes.",
        "El XOR indica que los compradores 2 y 4 están dispuestos a comprar como máximo uno de los dos bienes en los que están interesados.",
        "El comercio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD al comprador 3, denotado λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR Ejemplo 1: Ejemplo 3: 2,2 +C +D COMPRADOR 2 2,2 +A +B COMPRADOR 1 +11 +84,4 -B VENDEDOR -A -C -D Ejemplo 2: 1,1 +A +B COMPRADOR 2 2,2 +A +B COMPRADOR 1 +6 +40,4 -B VENDEDOR -C -D-A 1,1 +C +D COMPRADOR 4 2,2 +C +D +3 +2 COMPRADOR 3 -18 Figura 2: Ejemplo de Árboles de Ofertas.",
        "Ejemplo 3.",
        "Un vendedor y dos compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD.",
        "Cambios en los valores de los intercambios: vendedor comprador1 comprador 2 Y (−A, −B, −C, −D) Y (+A, +B) Y (+C, +D) -18 +11 +8 El intercambio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD vaya al comprador 2, denotado por λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
        "Un DISEÑO DE INTERCAMBIO DE UNA SOLA VEZ La descripción de ICE se divide en dos secciones: una sola vez (oferta sellada) e iterativa.",
        "En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a compradores y vendedores, y para extenderse y capturar ofertas de compradores y vendedores mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas.",
        "Las ofertas se expresan como árboles de ofertas anotados, y definen el valor de un oferente para todos los intercambios posibles.",
        "El lenguaje define cambios en los valores de las transacciones, con hojas anotadas con los artículos intercambiados y nodos anotados con cambios en los valores (ya sea positivos o negativos).",
        "La característica principal es que tiene un operador lógico de intervalo general en los nodos internos, y que define una semántica cuidadosa para propagar valores dentro del árbol.",
        "Ilustramos el lenguaje en cada uno de los Ejemplos 1-3 en la Figura 2.",
        "El lenguaje tiene una estructura de árbol, con operaciones en elementos definidos en las hojas y valores anotados en nodos y hojas.",
        "Los nodos tienen valores de cero donde no se indica ningún valor.",
        "Los nodos internos también están etiquetados con rangos de intervalo-escoge (IC).",
        "Dada una transacción, la semántica del lenguaje define qué nodos en el árbol pueden ser satisfechos o activados.",
        "Primero, si un niño está encendido, entonces su padre también debe estar encendido.",
        "Segundo, si un nodo padre está encendido, entonces el número de hijos que están encendidos debe estar dentro del rango de IC en el nodo padre.",
        "Finalmente, las hojas en las que el postor está comprando artículos solo pueden estar activas si los artículos se proporcionan en el intercambio.",
        "Por ejemplo, en el Ejemplo 2 podemos considerar el comercio eficiente, y observar que en este comercio todos los nodos en los árboles de los compradores 1 y 3 (y también el vendedor), pero ninguno de los nodos en los árboles de los compradores 2 y 4, pueden estar encendidos.",
        "Por otro lado, en 251 el intercambio en el que A va al comprador 2 y D al comprador 4, entonces los nodos raíz y hojas apropiados pueden estar encendidos para los compradores 2 y 4, pero ningún nodo puede estar encendido para los compradores 1 y 3.",
        "Dado un intercambio, a menudo hay varias formas de elegir el conjunto de nodos satisfechos.",
        "La semántica del lenguaje requiere que se activen los nodos que maximicen el valor sumado entre los nodos satisfechos.",
        "Considera el árbol de oferta Ti del ofertante i.",
        "Esto define nodos β ∈ Ti, de los cuales algunos son hojas, Leaf (i) ⊆ Ti.",
        "Deje que Child(β) ⊆ Ti denote los hijos de un nodo β (que no es en sí mismo una hoja).",
        "Todos los nodos excepto las hojas están etiquetados con el operador de intervalo-escoger [IC x i (β), ICy i (β)].",
        "Cada nodo también está etiquetado con un valor, viβ ∈ ¡.",
        "Cada hoja β está etiquetada con un intercambio, qiβ ∈ m (es decir, las hojas pueden definir un intercambio agrupado en más de un tipo de artículo).",
        "Dado un intercambio λi al postor i, los operadores de elección de intervalos y los intercambios en las hojas definen qué nodos pueden ser satisfechos.",
        "A menudo habrá una elección.",
        "Las corbatas se rompen para maximizar el valor.",
        "Que satiβ ∈ {0, 1} denote si el nodo β está satisfecho.",
        "La solución sati es válida dado el árbol Ti y el intercambio λi, escrita sati ∈ válido(Ti, λi), si y solo si: ¢ β∈Hoja (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Hijo(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Hoja (i) (5) En otras palabras, un conjunto de hojas solo puede considerarse satisfecho dado el intercambio λi si el aumento total en cantidad sumado en todas esas hojas está cubierto por el intercambio, para todos los bienes (Eq. 4).",
        "Esto funciona tanto para vendedores como para compradores: para los vendedores, un intercambio es negativo y esto requiere que el número total de artículos indicados como vendidos en el árbol sea al menos igual al número total vendido según lo definido en el intercambio.",
        "También necesitamos la propagación ascendente: cada vez que un nodo que no sea la raíz esté satisfecho, su padre también debe estar satisfecho (por β ∈Child(β) satiβ ≤ ICy i (β)satiβ en la Ecuación 5).",
        "Finalmente, necesitamos la propagación hacia abajo: cada vez que un nodo interno se satisface, entonces el número apropiado de hijos también debe estar satisfecho (Ec. 5).",
        "El valor total del comercio λi, dado el árbol de ofertas Ti, se define como: vi(Ti, λi) = máximo sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) El lenguaje basado en árboles generaliza los lenguajes existentes.",
        "Por ejemplo: IC(2, 2) en un nodo con 2 hijos es equivalente a un operador AND; IC(1, 3) en un nodo con 3 hijos es equivalente a un operador OR; e IC(1, 1) en un nodo con 2 hijos es equivalente a un operador XOR.",
        "De manera similar, los lenguajes de oferta XOR/OR pueden ser expresados directamente como un árbol de oferta en nuestro lenguaje. La determinación del ganador Este apartado define el problema de determinación del ganador, el cual está formulado como un MIP y resuelto en nuestra implementación con un solucionador comercial. El solucionador utiliza búsqueda de ramificación y acotamiento con generación de cortes dinámicos y heurísticas de ramificación para resolver MIPs grandes en tiempos de ejecución económicamente factibles. El lenguaje OR* es el lenguaje OR con elementos ficticios para proporcionar estructura adicional.",
        "OR* se sabe que es expresivo y conciso.",
        "Sin embargo, no se sabe si OR* domina a XOR/OR en cuanto a concisión [23]. En la definición de la representación MIP, tenemos cuidado de evitar una enumeración basada en XOR de todos los paquetes.",
        "Una variación del problema de WD se reutiliza muchas veces dentro del intercambio, por ejemplo, para la generación de columnas en la fijación de precios y para verificar la preferencia revelada.",
        "Dado el conjunto de árboles de ofertas T = (T1, . . . , Tn) y la asignación inicial x0, la formulación mixta entera para WD es: WD(T, x0): max λ, sat ¢ i ¢ β ∈ Ti viβ · satiβ sujeto a (1), (2), satiβ ∈ {0, 1}, λij ∈ sati ∈ válido(Ti, λi), ∀i. Algunos bienes pueden quedar sin asignar porque se permite la disposición libre dentro de las reglas de liquidación de la determinación del ganador.",
        "Estos artículos pueden ser asignados de nuevo a los agentes que vendieron los artículos, es decir, para los cuales λij < 0. 4.3 Cálculo de Pagos Umbral La regla de pago umbral se basa en los pagos en el mecanismo de Vickrey-Clarke-Groves (VCG) [15], que en sí mismo es veraz y eficiente pero no satisface el equilibrio presupuestario.",
        "El equilibrio presupuestario requiere que los pagos totales al intercambio sean iguales a los pagos totales realizados por el intercambio.",
        "En VCG, el pago pagado por el agente i es pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) donde λ∗ es el intercambio eficiente, V ∗ es el valor reportado de este intercambio, y V−i es el valor reportado del intercambio eficiente que se implementaría sin el postor i.",
        "Llamamos a ∆vcg,i = V ∗ − V−i el descuento VCG.",
        "Por ejemplo, en el Ejemplo 1 pvcg,vendedor = −10 − (+10 − 0) = −20 y pvcg,comprador = +20 − (+10 − 0) = 10, y el intercambio se llevaría a cabo con un déficit presupuestario de −20 + 10 = −10.",
        "La regla de pago del umbral [24] determina pagos equilibrados presupuestarios para minimizar el error máximo entre todos los agentes respecto al resultado VCG.",
        "Definición 2.",
        "El esquema de pago de umbral implementa el intercambio eficiente λ∗ dado los ofertas, y establece los pagos pthresh,i = ˆvi(λ∗ i ) − ∆i, donde ∆ = (∆1, . . . , ∆n) se establece para minimizar maxi(∆vcg,i − ∆i) sujeto a ∆i ≤ ∆vcg,i e   i ∆i ≤ V ∗ (esto garantiza el equilibrio presupuestario).",
        "Ejemplo 4.",
        "En el Ejemplo 2, los descuentos de VCG son (9, 2, 0, 1, 0) para el vendedor y cuatro compradores respectivamente, los pagos de VCG son (−9, 4, 0, 2, 0) y el intercambio se realiza con un déficit de -3.",
        "En Threshold, los descuentos son (8, 1, 0, 0, 0) y los pagos son (−8, 5, 0, 3, 0).",
        "Esto minimiza el error en el peor de los casos para los descuentos VCG en todos los esquemas de pago equilibrados en presupuesto.",
        "Los pagos de umbral están diseñados para minimizar el incentivo máximo ex post para manipular.",
        "Krych [16] confirmó que Threshold promueve la eficiencia asignativa en el equilibrio de Bayes-Nash restringido y aproximado. 5.",
        "El diseño ICE Estamos listos para presentar el diseño de intercambio combinatorio iterativo (ICE).",
        "Se introducen varios componentes nuevos, en relación con el diseño para el intercambio único.",
        "En lugar de proporcionar valoraciones precisas, los postores pueden proporcionar valoraciones inferiores y superiores y revisar esta información de oferta en cada ronda.",
        "El intercambio proporciona retroalimentación basada en precios 252 para guiar a los postores en este proceso, y finaliza con un intercambio eficiente (o aproximadamente eficiente) con respecto a las valoraciones reportadas.",
        "En cada ronda t ∈ {0, 1, . . .} se utilizan los límites inferiores y superiores actuales, vt y vt, para definir un perfil de valoración provisional vα (la α-valoración), junto con un intercambio provisional λt y precios provisionales pt = (pt 1, . . . , pt m) en los artículos.",
        "La α-valoración es una combinación lineal de las valoraciones superiores e inferiores actuales, con αEFF ∈ [0, 1] elegido endógenamente en función de la cercanía del intercambio optimista (en v) y el intercambio pesimista (en v).",
        "Los precios pt se utilizan para informar una regla de actividad y avanzar hacia un comercio eficiente. 5.1 Valoraciones superiores e inferiores El lenguaje de la oferta se amplía para permitir que un oferente i informe un valor inferior y superior (viβ, viβ) en cada nodo.",
        "Estos ocupan el lugar del valor exacto viβ definido en la Sección 4.1.",
        "Basándonos en estas etiquetas, podemos definir las funciones de valoración vi(Ti, λi) y vi(Ti, λi), utilizando exactamente la misma semántica que en la Ecuación (6).",
        "Decimos que un árbol de ofertas está bien formado si viβ ≤ viβ para todos los nodos.",
        "El siguiente lema es útil: Lema 1.",
        "Dado un árbol bien formado, T, entonces vi(Ti, λi) ≤ vi(Ti, λi) para todos los intercambios.",
        "Prueba.",
        "Supongamos que existe algún λi para el cual vi(Ti, λi) > vi(Ti, λi).",
        "Entonces, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
        "Sin embargo, esto es una contradicción porque el intercambio λ que define vi(Ti, λi) sigue siendo factible con límites superiores vi, y viβ ≥ viβ para todos los nodos β en un árbol bien formado. 5.2 Retroalimentación de precios En cada ronda, se determinan los precios de equilibrio competitivo aproximados (CE), pt = (pt 1, . . . , pt m).",
        "Dado estos precios provisionales, el precio en el intercambio λi para el postor i es pt (λi) = j≤m pt j · λij.",
        "Definición 3 (precios de la CE).",
        "Los precios p∗ son precios de equilibrio competitivo si el intercambio eficiente λ∗ está respaldado a precios p∗, de modo que para cada postor: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) Los precios de CE no siempre existirán y a menudo necesitaremos calcular precios aproximados [5].",
        "Extendemos las ideas de Rassenti et al. [26], Kwasnica et al. [17] y Dunford et al. [12], y seleccionamos precios aproximados de la siguiente manera: I: Precisión.",
        "Primero, calculamos los precios que minimizan el error máximo en las restricciones de mejor respuesta de todos los postores.",
        "II: Equidad.",
        "Segundo, rompemos los empates para preferir precios que minimicen la desviación máxima de los pagos umbral entre todos los postores.",
        "III: Equilibrio.",
        "En tercer lugar, rompemos los empates para preferir precios que minimicen el precio máximo entre todos los artículos.",
        "En conjunto, estos pasos están diseñados para promover la informatividad de los precios en impulsar el progreso a lo largo de las rondas.",
        "Al calcular los precios, explicamos cómo calcular precios aproximados (o de otra manera) para lenguajes de oferta estructurados, sin enumerar todos los intercambios posibles.",
        "Para esto, adoptamos la generación de restricciones para manejar de manera eficiente un número exponencial de restricciones.",
        "Cada paso se describe detalladamente a continuación.",
        "Yo: Precisión.",
        "Adoptamos una definición de precisión de precio que generaliza las nociones adoptadas en trabajos anteriores para lenguajes de oferta no estructurados.",
        "Que λt denote el comercio provisional actual y suponga que la valoración provisional es vα.",
        "Para calcular precios de CE precisos, consideramos: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
        "Este programa lineal (LP) está diseñado para encontrar precios que minimicen el error en el peor de los casos entre todos los agentes.",
        "De la definición de los precios de equilibrio competitivo (CE), se sigue que los precios de equilibrio competitivo tendrían δ = 0 como solución a (9), momento en el cual el intercambio λt i estaría en el conjunto de mejor respuesta de cada agente (con λt i = ∅, es decir, sin intercambio, para todos los agentes sin excedente para el intercambio a los precios).",
        "Ejemplo 5.",
        "Podemos ilustrar la formulación (9) en el Ejemplo 2, asumiendo para simplificar que vα = v (es decir, verdad).",
        "El comercio eficiente asigna AB al comprador 1 y CD al comprador 3.",
        "La precisión buscará los precios p(A), p(B), p(C) y p(D) para minimizar el δ ≥ 0 requerido para satisfacer las restricciones: p(A) + p(B) + p(C) + p(D) ≥ 0 (vendedor) p(A) + p(B) ≤ 6 + δ (comprador 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (comprador 2) p(C) + p(D) ≤ 3 (comprador 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (comprador 4) Una solución óptima requiere que p(A) = p(B) = 10/3, con δ = 2/3, y que p(C) y p(D) tomen valores como p(C) = p(D) = 3/2.",
        "Pero, (9) tiene un número exponencial de restricciones (Ec. 10).",
        "En lugar de resolverlo explícitamente, utilizamos la generación de restricciones [4] y generamos dinámicamente un subconjunto suficiente de restricciones.",
        "Que \\(i\\) denote un subconjunto manejable de todos los intercambios factibles posibles para el oferente \\(i\\).",
        "Entonces, una versión relajada de (9) (escrita ACC) se formula sustituyendo (10) con vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) donde   i es un conjunto de intercambios que son factibles para el postor i dado las otras ofertas.",
        "Fijando los precios p∗, luego resolvemos n subproblemas (uno para cada postor), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0), (12) para verificar si la solución (p∗, δ∗) a ACC es factible en el problema (9).",
        "En R-WD(i) el objetivo es determinar un intercambio más preferido para cada postor a estos precios.",
        "Que ˆλi denote la solución a R-WD(i).",
        "Verificar la condición: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) y si esta condición se cumple para todos los postores i, entonces la solución (p∗ , δ∗ ) es óptima para el problema (9).",
        "De lo contrario, se agrega el intercambio ˆλi a i para todos los postores i para los cuales esta restricción se viola en 253 y volvemos a resolver el LP con el nuevo conjunto de restricciones. II: Equidad.",
        "Segundo, rompemos los empates restantes para preferir precios justos: eligiendo precios que minimicen el error en el peor de los casos con respecto a los pagos umbral (es decir, la utilidad para los postores con pagos umbral), pero sin elegir precios que sean menos precisos. Ejemplo 6.",
        "Por ejemplo, la precisión en el Ejemplo 1 (representado en la Figura 1) requiere que 12 ≤ pA + pB ≤ 16 (para vα = v).",
        "En estas valoraciones, los pagos umbral serían de 2 para tanto el vendedor como el comprador.",
        "Esto se puede lograr exactamente en la fijación de precios con pA + pB = 14.",
        "El método de desempate de equidad se formula como el siguiente LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima, de ACC.",
        "El objetivo aquí es el mismo que en la regla de pago del umbral (ver Sección 4.3): minimizar el error máximo entre el pago del postor (en vα) para el intercambio provisional y el pago VCG (en vα).",
        "El problema FAIR también se resuelve mediante la generación de restricciones, utilizando R-WD(i) para agregar restricciones adicionales violadas según sea necesario.",
        "III: Equilibrio.",
        "En tercer lugar, rompemos los empates restantes para preferir precios equilibrados: eligiendo precios que minimicen el precio máximo entre todos los artículos.",
        "Volviendo de nuevo al Ejemplo 1, representado en la Figura 1, vemos que la precisión y la equidad requieren que p(A) + p(B) = 14.",
        "Finalmente, el conjunto de equilibrio establece que p(A) = p(B) = 7.",
        "El equilibrio está justificado cuando, manteniendo todo lo demás igual, los elementos son más propensos a tener valores similares que diferentes. El LP para el equilibrio se formula de la siguiente manera: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima de ACC y π∗ representa el error en la solución óptima de FAIR.",
        "La generación de restricciones también se utiliza para resolver BAL, generando nuevos intercambios para i según sea necesario. El problema R-WD(i) es una especialización del problema WD, en el que el objetivo es maximizar el pago de un único postor, en lugar del valor total entre todos los postores.",
        "Se resuelve como un MIP, al reescribir el objetivo en WD(T, x0) como max{viβ · satiβ − j p∗ j · λij} para el agente i.",
        "Por lo tanto, la estructura del lenguaje del árbol de ofertas se explota para generar nuevas restricciones, ya que esto se resuelve como un MIP conciso.",
        "Los otros postores se mantienen en el MIP (pero no aparecen en el objetivo) y se utilizan para definir el espacio de intercambios factibles. Los métodos de Dunford et al. [12], que utilizan un enfoque de núcleo, también están estrechamente relacionados. El uso del equilibrio fue defendido por Kwasnica et al. [17].",
        "Dunford et al. [12] prefieren suavizar los precios a lo largo de las rondas.",
        "Comentario 1: Refinamiento lexicográfico.",
        "Para los tres subproblemas también realizamos un refinamiento lexicográfico (con respecto a los postores en ACC y FAIR, y con respecto a los bienes en BAL).",
        "Por ejemplo, en ACC minimizamos sucesivamente el error máximo entre todos los postores.",
        "Dada una solución inicial, primero identificamos el error en todos los postores para quienes una restricción (11) está vinculante.",
        "Para dicho postor i, la restricción se reemplaza por vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) y el error para el postor i ya no aparece explícitamente en el objetivo.",
        "ACC se vuelve a resolver y avanza al minimizar aún más el error máximo entre todos los postores que aún no han sido identificados.",
        "Esto continúa, fijando a cualquier nuevo postor para quien una de las restricciones (11) sea vinculante, hasta que el error esté optimizado lexicográficamente para todos los postores. El mismo proceso exacto se repite para FAIR y BAL, con los postores fijados y las restricciones (15) reemplazadas por π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (donde π∗ i es el objetivo actual) en FAIR, y los artículos fijados y las restricciones (18) reemplazadas por p∗ j ≥ pj (donde p∗ j representa el objetivo para el precio máximo en ese artículo) en BAL.",
        "Comentario 2: Computación.",
        "Todos los límites en i se mantienen, y este conjunto crece en todas las etapas y en todas las rondas del intercambio.",
        "Por lo tanto, el esfuerzo computacional en la generación de restricciones se reutiliza.",
        "En la implementación, nos aseguramos de abordar una serie de problemas que surgen debido a problemas de punto flotante.",
        "Preferimos pecar de conservadores al determinar si agregar o no otra restricción al realizar la verificación (13).",
        "Esto evita problemas de inviabilidad posteriores.",
        "Además, al fijar a los postores con el fin de refinar lexicográficamente, relajamos las restricciones asociadas con un pequeño > 0 en el lado derecho. 5.3 Reglas de Actividad de Preferencia Revelada El papel de las reglas de actividad en la subasta es garantizar tanto la consistencia como el progreso en las rondas [21].",
        "La consistencia en nuestro intercambio requiere que los oferentes ajusten los límites a medida que avanza el intercambio.",
        "Las reglas de la actividad garantizan que los postores estén activos durante las primeras rondas y promueven una elicitación útil a lo largo del intercambio.",
        "Adoptamos una regla de actividad de preferencia revelada (RP) simple.",
        "La idea se basa vagamente en la regla de RP en Ausubel et al. [1], donde se utiliza para los AC unilaterales.",
        "La motivación es requerir más que simplemente consistencia: necesitamos que los oferentes proporcionen suficiente información para que el sistema pueda demostrar que una asignación es (aproximadamente) eficiente.",
        "Es útil pensar en los postores interactuando con agentes de proxy que actuarán en su nombre al responder a los precios provisionales pt−1 determinados al final de la ronda t − 1.",
        "El único conocimiento que tiene un intermediario sobre la valoración de un postor es a través del árbol de ofertas.",
        "Supongamos que un intermediario fue consultado por la bolsa y se le preguntó en qué operación estaba más interesado el oferente a los precios provisionales.",
        "La regla de RP dice lo siguiente: el proxy debe tener suficiente 7. Por ejemplo, aplicando esto a la precisión en el Ejemplo 2, resolvemos una vez y encontramos que los postores 1 y 2 son vinculantes, con un error δ∗ = 2/3.",
        "Fijamos estos y luego minimizamos el error para los postores 3 y 4.",
        "Finalmente, esto da p(A) = p(B) = 10/3 y p(C) = p(D) = 5/3, con precisión de 2/3 para los postores 1 y 2 y 1/3 para los postores 3 y 4. Se necesitan 254 información para poder determinar este intercambio que maximiza el excedente al precio actual.",
        "Considera los siguientes ejemplos: Ejemplo 7.",
        "Un postor tiene XOR(+A, +B) y un valor de +5 en la hoja +A y un rango de valores de [5,10] en la hoja +B.",
        "Supongamos que los precios actuales son 3 por cada uno de A y B.",
        "La regla de RP se cumple porque el representante sabe que, sin importar cómo se resuelva la incertidumbre restante del valor en +B, el postor siempre preferirá (débilmente) +B a +A.",
        "Ejemplo 8.",
        "Un postor tiene XOR(+A, +B) y límites de valor [5, 10] en el nodo raíz y un valor de 1 en la hoja +A.",
        "Supongamos que los precios actuales son 3 por cada uno de A y B.",
        "La regla de RP se cumple porque el postor siempre preferirá +A a +B a precios iguales, sin importar cómo se resuelva finalmente el valor incierto en el nodo raíz.",
        "Sobrecargando la notación, sea vi ∈ Ti una valoración que sea consistente con las valoraciones inferiores y superiores en el árbol de oferta Ti.",
        "Definición 4.",
        "El árbol de oferta Ti satisface RP a precios pt−1 si y solo si existe algún intercambio factible L∗ para el cual, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. Para determinar esto para el postor i, resolvemos una secuencia de problemas, cada uno de los cuales es una variación del problema WD.",
        "Primero, construimos un intercambio candidato de límite inferior, que es un intercambio factible que resuelve: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) La solución π∗ l a RP1(i) representa el pago máximo que el postor i puede lograr en todos los intercambios factibles, dado su valoración pesimista.",
        "Segundo, rompemos los lazos para encontrar un intercambio con la máxima incertidumbre del valor en todas las posibles soluciones a RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] sujeto a λ ∈ Feas(x0) (22) vi(λi) − pt−1(λi) ≥ π∗ l (23) Adoptamos la solución L∗ i como nuestro candidato para el intercambio que puede satisfacer RP.",
        "Para entender la importancia de esta regla de desempate, considera el Ejemplo 7.",
        "El proxy puede demostrar que +B pero no +A es una mejor respuesta para todos los vi ∈ Ti, y debería elegir +B como su candidato.",
        "Observa que +B es un contraejemplo para +A, pero no al revés.",
        "Ahora, construimos una valuación modificada ˜vi, estableciendo ˜viβ = viβ, si β ∈ sat(L∗ i) viβ, de lo contrario. (24) donde sat(L∗ i) es el conjunto de nodos que están satisfechos en el árbol de límite inferior para el comercio L∗ i.",
        "Dada esta valuación modificada, encontramos U∗ para resolver: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Sea π∗ u el beneficio de este intercambio óptimo en los valores modificados ˜v.",
        "Llamamos al intercambio U∗ i el intercambio testigo.",
        "Mostramos en la Proposición 1 que la regla RP se cumple si y solo si π∗ l ≥ π∗ u. La construcción de la valoración modificada como ˜vi reconoce que existe incertidumbre compartida en las operaciones que cumplen los mismos nodos en un árbol de ofertas.",
        "El ejemplo 8 ayuda a ilustrar esto.",
        "Simplemente usando vi en RP3(i), encontraríamos que L∗ i es comprar A con un pago de π∗ l = 3 pero luego encontraríamos que U∗ i es comprar B con π∗ u = 7 y fallar en RP.",
        "Debemos reconocer que, sin importar cómo se resuelva la incertidumbre en el nodo raíz, afectará a +A y +B de la misma manera.",
        "Por esta razón, establecimos ˜viβ = viβ = 5 en el nodo raíz, que es exactamente el mismo valor que se adoptó al determinar π∗ l.",
        "Entonces, RP3(i) aplicado a U∗ i da como resultado comprar A y se considera que el test de RP ha sido aprobado.",
        "Proposición 1.",
        "El árbol de oferta Ti satisface RP dado los precios pt−1 si y solo si cualquier intercambio de límite inferior L∗ i que resuelve RP1(i) y RP2(i) satisface: vi(Ti, L∗ i) − pt−1 (L∗ i) ≥ ˜vi(Ti, U∗ i) − pt−1 (U∗ i), (26) donde ˜vi es la valoración modificada en la ecuación (24).",
        "Prueba.",
        "Para la suficiencia, observe que la diferencia en el pago entre el intercambio L∗ i y otro intercambio λi no se ve afectada por la forma en que se resuelve la incertidumbre en cualquier nodo que esté satisfecho tanto en L∗ i como en λi.",
        "Corregir los valores en ˜vi en los nodos satisfechos en L∗ i tiene el efecto de eliminar esta consideración cuando se selecciona un intercambio U∗ i que satisface uno de estos nodos.",
        "Por otro lado, fijar los valores en estos nodos no tiene efecto en las operaciones consideradas en RP3(i) que no comparten un nodo con L∗ i.",
        "Para la dirección necesaria, primero mostramos que cualquier intercambio que satisfaga RP debe resolver RP1(i).",
        "Supongamos lo contrario, que algún λi con un pago mayor que π∗ l cumple con RP.",
        "Sin embargo, la valoración vi ∈ Ti junto con L∗ i presenta un contraejemplo a RP (Eq. 20).",
        "Ahora, supongamos (por contradicción) que algún λi con ganancia máxima π∗ l pero incertidumbre menor que L∗ i cumple con RP.",
        "Procede mediante el análisis de casos.",
        "Caso a): solo una solución a RP1(i) tiene un valor incierto y, por lo tanto, λi tiene un valor seguro.",
        "Pero, esto no puede satisfacer a RP porque L∗ i con un valor incierto sería un contraejemplo para RP (Eq. 20).",
        "Caso b): dos o más soluciones a RP1(i) tienen un valor incierto.",
        "Aquí argumentamos primero que uno de estos intercambios debe satisfacer un (débil) superconjunto de todos los nodos con valor incierto que son satisfechos por todos los demás intercambios en este conjunto.",
        "Esto es por RP.",
        "Sin esto, entonces para cualquier elección de comercio que resuelva RP1(i), hay otro comercio con un conjunto disjunto de nodos inciertos pero satisfechos que proporciona un contraejemplo a RP (Ec. 20).",
        "Ahora, considera el caso en el que algún intercambio contiene un superconjunto de todos los nodos inciertos satisfechos de los otros intercambios.",
        "Claramente RP2(i) elegirá este intercambio, L∗ i, y λi debe satisfacer un subconjunto de estos nodos (por suposición).",
        "Pero ahora vemos que λi no puede cumplir con RP porque L∗ i sería un contraejemplo para RP.",
        "El incumplimiento de la regla de actividad debe tener alguna consecuencia.",
        "En las reglas actuales, la acción predeterminada que elegimos es establecer los límites superiores en las valoraciones hasta el valor máximo del precio provisional en un nodo8 y el valor del límite inferior en ese nodo.9 Tal postor puede permanecer activo 8 El precio provisional en un nodo se define como el precio total mínimo entre todos los intercambios factibles para los cuales el subárbol enraizado en el árbol está satisfecho. 9 Esto es completamente análogo a cuando un postor en una subasta de reloj ascendente deja de ofertar a un precio: no se le permite ofertar a un precio más alto nuevamente en rondas futuras. 255 dentro del intercambio, pero solo con valoraciones que sean consistentes con estos nuevos límites. 5.4 Retroalimentación del postor En cada ronda, nuestro diseño predeterminado proporciona a cada postor el intercambio provisional y también los precios provisionales actuales.",
        "Ver el 7 para una discusión adicional.",
        "También brindamos orientación para ayudar a un licitador a cumplir con la regla de RP.",
        "Que sat(L∗ i ) y sat(U∗ i ) denoten los nodos que se satisfacen en los intercambios L∗ i y U∗ i, tal como se calcula en RP1-RP3.",
        "Lema 2.",
        "Cuando RP falla, un postor debe aumentar un límite inferior en al menos un nodo en sat(L∗ i) \\ sat(U∗ i) o disminuir un límite superior en al menos un nodo en sat(U∗ i) \\ sat(L∗ i) para cumplir con la regla de actividad.",
        "Prueba.",
        "Cambiar los valores superiores o inferiores en los nodos que no cumplen con ninguno de los intercambios no cambia ni L∗ i ni U∗ i, y no altera el beneficio de estos intercambios.",
        "Por lo tanto, la condición de RP seguirá fallando.",
        "De igual manera, cambiar los límites en los nodos que se satisfacen en ambos intercambios no tiene efecto en la preferencia revelada.",
        "Un cambio en un límite inferior en un nodo compartido afecta tanto a L∗ i como a U∗ i de manera idéntica debido al uso de la valoración modificada para determinar U∗ i.",
        "Un cambio en un límite superior en un nodo compartido no tiene efecto en la determinación de L∗ i o U∗ i.",
        "Ten en cuenta que cuando sat(U∗ i ) = sat(L∗ i ) entonces la condición (26) siempre se satisface trivialmente, por lo que la orientación en el lema siempre está bien definida cuando RP falla.",
        "Este es un mecanismo de retroalimentación elegante porque es adaptable.",
        "Una vez que un postor realiza algunos cambios en un subconjunto de estos nodos, el postor puede consultar el intercambio.",
        "El intercambio puede responder sí, o puede revisar el conjunto de nodos sat(λ∗ l ) y sat(λ∗ u) según sea necesario. 5.5 Condiciones de Terminación Una vez que cada postor haya comprometido sus nuevas ofertas (y haya cumplido con la regla de RP o haya sufrido la penalización), entonces la ronda t se cierra.",
        "En este punto, la tarea es determinar la nueva valoración α, y a su vez la asignación provisional λt y los precios provisionales pt.",
        "Una condición de terminación también se verifica, para determinar si se debe pasar el intercambio a una ronda final y definitiva.",
        "Para definir la α-valoración, calculamos las siguientes dos cantidades: Pesimista en Pesimista (PP). Determinar un intercambio eficiente, λ∗ l, en valores pesimistas, es decir, resolver maxλ   i vi(λi), y establecer PP=  i vi(λ∗ li).",
        "Pessimista a Optimista (PO) Determinar un intercambio eficiente, λ∗ u, en valores optimistas, es decir, resolver maxλ   i vi(λi), y establecer PO=  i vi(λ∗ ui).",
        "Primero, hay que tener en cuenta que PP ≥ PO y PP ≥ 0 por definición, para todos los árboles de oferta, aunque PO puede ser negativo (porque el intercambio correcto en v no es actualmente un intercambio útil en v).",
        "Reconociendo esto, definir γeff (PP, PO) = 1 + PP − PO PP , (27) cuando PP > 0, y observar que γeff (PP, PO) ≥ 1 cuando esto está definido, y que γeff (PP, PO) comenzará siendo grande y luego tenderá hacia 1 a medida que la asignación optimista converge hacia la asignación pesimista.",
        "En cada ronda, definimos αeff ∈ [0, 1] como: αeff = 0 cuando PP es 0, 1/γeff en otro caso (28), lo cual es 0 cuando PP es 0 y luego tiende hacia 1 una vez que PP > 0 en alguna ronda.",
        "Esto se utiliza para definir la α-valoración vα i = αeff vi + (1 − αeff )vi, ∀i, (29) que se utiliza para definir la asignación provisional y los precios provisionales.",
        "El efecto es definir endógenamente un horario para pasar de valores optimistas a pesimistas a lo largo de las rondas, basado en qué tan cercanos estén los intercambios entre sí.",
        "Condición de terminación.",
        "Al avanzar a la última y definitiva ronda, y finalmente cerrar, también nos preocupamos por la convergencia de pagos, además de la convergencia hacia un comercio eficiente.",
        "Para esto introducimos otro parámetro, αthresh ∈ [0, 1], que tiende de 0 a 1 a medida que los pagos de umbral en las valoraciones inferiores y superiores convergen.",
        "Considera el siguiente parámetro: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive), (30) el cual está definido para PP > 0, donde pthresh(v) denota los pagos de umbral en el perfil de valoración v, Nactive es el número de postores que están activamente involucrados en el comercio en la transacción de PP, y || · ||2 es la norma L2.",
        "Ten en cuenta que γthresh está definido para pagos y no para ganancias.",
        "Esto es apropiado porque la precisión del resultado del intercambio es lo que importa: es decir, el comercio y los pagos.",
        "Dado esto, definimos αthresh = 0 cuando PP es 0 y 1/γthresh en otro caso (31), lo cual es 0 mientras PP es 0 y luego tiende hacia 1 a medida que se avanza.",
        "Definición 5 (terminación).",
        "ICE pasa a una ronda final cuando se cumple una de las siguientes condiciones: 1. αeff ≥ CUTOFFeff y αthresh ≥ CUTOFFthresh, 2. no hay intercambio en los valores optimistas, donde CUTOFFeff, CUTOFFthresh ∈ (0, 1] determinan la precisión requerida para la terminación.",
        "Al final de la última y definitiva ronda, vα = v se utiliza para definir el intercambio final y los pagos finales del umbral.",
        "Ejemplo 9.",
        "Considera nuevamente el Ejemplo 1, y considera los límites superiores e inferiores como se muestra en la Figura 1.",
        "Primero, si los límites de los vendedores fueron [−20, −4] entonces hay un intercambio optimista pero no hay un intercambio pesimista, y PO = −4 y PP = 0, y αeff = 0.",
        "En los límites representados, tanto los intercambios optimistas como pesimistas ocurren y PO = PP = 4 y αeff = 1.",
        "Sin embargo, podemos ver que los pagos umbral son (17, −17) en v pero (14, −14) en v. Al evaluar γthresh, tenemos γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, y αthresh = 2/5.",
        "Para CUTOFFthresh < 2/5, el intercambio permanecería abierto.",
        "Por otro lado, si el valor que los compradores asignan a +AB estaba entre [18, 24] y el valor que los vendedores asignan a -AB estaba entre [-12, -6], los pagos umbral son (15, -15) en ambos límites superior e inferior, y αthresh = 1. 256 Líneas de Propósito de Componente Agente.",
        "El modelo 762 de Soporte Captura el comportamiento estratégico y las decisiones de revelación de información. Proporciona soporte XML para cargar bienes y valoraciones en el mundo 200. El mundo 200 realiza un seguimiento de todos los detalles de agentes, bienes y valoraciones. El Controlador y Comunicación de Intercambio 998 controla el intercambio y coordina el comportamiento remoto de los agentes. El Lenguaje de Subasta 1119 implementa el lenguaje de subasta basado en árboles. El Motor de Reglas de Actividad 203 implementa la regla de preferencia revelada con soporte de rango. El Motor de Reglas de Cierre 137 verifica si se ha alcanzado la condición de terminación de la subasta. El Motor WD 377 proporciona lógica relacionada con WD. El Motor de Precios 460 proporciona lógica relacionada con precios. Los Constructores MIP 346 traducen la lógica utilizada por los motores en nuestra formulación general de optimización. Los Constructores de Precios 256 son utilizados por tres etapas de precios. Los Constructores de Determinación de Ganadores 365 son utilizados por WD, regla de actividad, regla de cierre y generación de restricciones de precios. El código de Soporte del Marco 510 facilita la sustitución modular de los componentes anteriores. Tabla 1: Desglose de Componentes y Código de Intercambio.",
        "La INFRAESTRUCTURA DE SISTEMAS ICE consta de aproximadamente 6502 líneas de código Java, divididas en los paquetes funcionales descritos en la Tabla 1.10. El prototipo es modular para que los investigadores puedan reemplazar fácilmente los componentes para experimentación.",
        "Además del intercambio central discutido en este documento, hemos desarrollado un componente de agente que permite a un usuario simular el comportamiento y conocimiento de otros jugadores en el sistema, lo que le permite al usuario formular su estrategia antes de jugar realmente.",
        "Un usuario especifica un modelo de valoración en una interpretación XML de nuestro lenguaje de oferta, que se revela al intercambio a través de la estrategia de los agentes.",
        "Las principales tareas de intercambio son manejadas por motores que dictan la lógica no específica del optimizador.",
        "Estos motores impulsan los constructores MIP/LP apropiados.",
        "Nos dimos cuenta de que todas nuestras formulaciones de optimización se reducen a dos clases de problemas de optimización.",
        "El primero, utilizado para la determinación del ganador, la regla de actividad, la regla de cierre y la generación de restricciones en la fijación de precios, es un MIP que encuentra intercambios que maximizan el valor, manteniendo constantes los precios y los márgenes.",
        "El segundo, utilizado por las tres etapas de fijación de precios, es un LP que mantiene constantes las operaciones comerciales, buscando minimizar la holgura, el beneficio o los precios.",
        "Aprovechamos la similitud de estos problemas utilizando constructores de LP/MIP comunes que difieren solo en unos pocos ganchos funcionales para proporcionar las variables correctas para la optimización.",
        "Hemos generalizado nuestra interfaz de optimización del back-end (actualmente soportamos CPLEX y LPSolve con licencia LGPL) y podemos aprovechar la capacidad de equilibrio de carga y resolución paralela de MIP/LP que esta biblioteca proporciona.",
        "DISCUSIÓN El lenguaje de oferta se definió para permitir una simetría perfecta entre compradores y vendedores y proporcionar expresividad en un dominio de intercambio, por ejemplo, para oferentes mixtos interesados en ejecutar operaciones como swaps.",
        "Esto resultó especialmente desafiante.",
        "El avance se produjo cuando nos enfocamos en los cambios de valor para las operaciones en lugar de proporcionar valores absolutos para las asignaciones.",
        "Para simplificar, requerimos la misma estructura de árbol tanto para las valoraciones superiores como inferiores. El tamaño del código se mide en líneas de código fuente físicas (SLOC), generadas utilizando el Contador SLOC de David A. Wheeler.",
        "El total de 6502 incluye 184 para instrumentación (no se muestra en la tabla).",
        "La interfaz del solucionador JOpt es de otras 1964 líneas, y Castor genera automáticamente alrededor de 5200 líneas de código para la manipulación de archivos XML. Esto permite que el propio lenguaje garantice la consistencia (con el valor superior al menos igual al valor inferior en todas las operaciones) y aplique un estrechamiento monótono de estos límites para todas las operaciones en todas las rondas.",
        "También proporciona un método eficiente para verificar la regla de actividad de RP, ya que facilita razonar sobre la incertidumbre compartida entre las operaciones.",
        "La decisión de adoptar un enfoque directo y delegado en el cual los licitadores expresan sus valores superiores e inferiores a un agente de confianza que interactúa con la bolsa se tomó temprano en el proceso de diseño.",
        "En muchos aspectos, esta es la forma más clara y directa de generalizar el diseño en Parkes et al. [24] y hacerlo iterativo.",
        "Además, esto elimina muchas oportunidades para la manipulación estratégica: los postores están restringidos a hacer declaraciones (incrementales) sobre sus valoraciones.",
        "Otra ventaja es que hace que la regla de la actividad sea fácil de explicar: los postores siempre pueden cumplir con la regla de la actividad ajustando los límites de manera que su valor real permanezca en el soporte. Quizás lo más importante es que tener información explícita sobre los valores superiores e inferiores permite avanzar en las primeras rondas, incluso cuando no hay un intercambio eficiente a valores pesimistas.",
        "La información de los límites superior e inferior también proporciona orientación sobre cuándo terminar.",
        "Ten en cuenta que tomado por sí mismo, PP = PO no implica que el intercambio provisional actual sea eficiente con respecto a todos los valores consistentes con la información de valor actual.",
        "La diferencia en los valores entre diferentes oficios, agregada entre todos los postores, podría ser similar en los límites inferiores y superiores pero bastante diferente en los valores intermedios (incluyendo la verdad).",
        "Sin embargo, conjeturamos que PP = PO demostrará ser un indicador excelente de eficiencia en entornos prácticos donde la forma de las valoraciones superiores e inferiores sí transmita información útil.",
        "Esto merece una investigación experimental.",
        "Además, el uso del precio y la actividad de RP proporciona garantías adicionales.",
        "Adoptamos precios lineales (precios en artículos individuales) en lugar de precios no lineales (con precios en un intercambio que no son iguales a la suma de los precios de los artículos componentes) al principio del proceso de diseño.",
        "La concisión de esta representación de precios es muy importante para la viabilidad computacional dentro del intercambio y también para promover la simplicidad y transparencia para los postores.",
        "La regla de actividad RP fue adoptada más tarde, y es una buena elección debido a sus excelentes propiedades teóricas cuando se combina con los precios de CE.",
        "Lo siguiente se puede establecer fácilmente: dados los precios CE exactos pt−1 para el comercio provisional 12. Esto contrasta con enfoques basados en precios indirectos, como el reloj-proxy [1], en los que los postores deben ser capaces de razonar sobre las restricciones RP implicadas por las ofertas en cada ronda. 257 λt−1 en valoraciones vα, entonces si los valores superiores e inferiores al inicio de la ronda t ya satisfacen la regla RP (y sin necesidad de ningún desempate), el comercio provisional es eficiente para todas las valoraciones consistentes con los árboles de ofertas actuales.",
        "Cuando existen precios lineales de CE, esto proporciona una declaración de solidez y completitud: si PP = PO, existen precios lineales de CE, y se cumple la regla de RP, el intercambio provisional es eficiente (solidez); si los precios son precios exactos de CE para el intercambio provisional en vα, pero el intercambio es ineficiente con respecto a algún perfil de valoración consistente con los árboles de oferta actuales, entonces al menos un postor debe fallar en RP con su árbol de oferta actual y se avanzará (completitud).",
        "El trabajo futuro debe estudiar la convergencia experimentalmente y extender esta teoría para permitir precios aproximados.",
        "Algunos aspectos estratégicos de nuestro diseño de ICE merecen comentario y estudio adicional.",
        "Primero, no afirmamos que responder sinceramente a la regla de RP sea un equilibrio ex post. Sin embargo, el intercambio está diseñado para imitar la regla de Umbral en su esquema de pago, que se sabe que tiene propiedades de incentivo útiles.",
        "Debemos tener cuidado, sin embargo.",
        "Por ejemplo, no sugerimos proporcionar αeff a los licitadores, porque a medida que αeff se acerca a 1, informaría a los licitadores que los valores de las ofertas se vuelven irrelevantes para determinar el intercambio, sino que se utilizan simplemente para determinar los pagos (y los licitadores se volverían cada vez más reacios a aumentar sus valoraciones más bajas).",
        "Además, en este trabajo no se ha considerado la posibilidad de colusión entre los licitadores.",
        "Este es un tema que merece atención en trabajos futuros. 8.",
        "CONCLUSIONES En este trabajo diseñamos y prototipamos un intercambio combinatorio iterativo escalable y altamente expresivo.",
        "El diseño incluye muchas características interesantes, como: un nuevo lenguaje de árbol de ofertas para intercambios, un nuevo método para construir precios lineales aproximados a partir de lenguajes expresivos, y un método de elicitación con valoraciones optimistas y pesimistas con un nuevo método para evaluar una regla de actividad de preferencia revelada.",
        "El intercambio está completamente implementado en Java y se encuentra en una fase de validación.",
        "Los próximos pasos para nuestro trabajo son permitir a los licitadores refinar la estructura del árbol de oferta además de los valores en el árbol.",
        "Tenemos la intención de estudiar las propiedades de elicitación del intercambio y hemos creado un conjunto de pruebas de instancias de problemas de intercambio.",
        "Además, estamos comenzando a participar en colaboraciones para aplicar el diseño a la programación de franjas horarias de despegue y aterrizaje de aerolíneas y a la asignación de recursos en sistemas computacionales distribuidos de amplia área de red.",
        "Agradecimientos Nos gustaría dedicar este artículo a todos los participantes de CS 286r en la Universidad de Harvard en la primavera de 2004.",
        "Este trabajo está parcialmente respaldado por la subvención de la NSF IIS-0238147.",
        "REFERENCIAS [1] L. Ausubel, P. Cramton y P. Milgrom.",
        "La subasta de reloj-proxi: Un diseño práctico de subasta combinatoria.",
        "En Cramton et al. [9], capítulo 5. [2] M. Babaioff, N. Nisan y E. Pavlov.",
        "Mecanismos para un mercado distribuido espacialmente.",
        "En Actas de la 5ta Conferencia de la ACM sobre Comercio Electrónico, páginas 9-20.",
        "ACM Press, 2001. Dado el teorema de imposibilidad de Myerson-Satterthwaite [22] y el método mediante el cual determinamos el intercambio, no deberíamos esperar esto. [3] M. Ball, G. Donohue y K. Hoffman.",
        "Subastas para la asignación segura, eficiente y equitativa de los recursos del sistema de espacio aéreo.",
        "En S. Cramton, Shoham, editor, Subastas Combinatorias. 2004.",
        "Próximamente. [4] D. Bertsimas y J. Tsitsiklis.",
        "Introducción a la Optimización Lineal.",
        "Athena Scientific, 1997. [5] S. Bikhchandani y J. M. Ostroy.",
        "El modelo de asignación de paquetes.",
        "Revista de Teoría Económica, 107(2):377-406, 2002. [6] C. Boutilier.",
        "Una formulación POMDP de problemas de obtención de preferencias.",
        "En Proc. 18ª Conferencia Nacional de Inteligencia Artificial (AAAI-02), 2002. [7] C. Boutilier y H. Hoos.",
        "Subastando idiomas para subastas combinatorias.",
        "En Proc. 17ª Conferencia Internacional Conjunta sobre Inteligencia Artificial (IJCAI-01), 2001. [8] W. Conen y T. Sandholm.",
        "Elicitación de preferencias en subastas combinatorias.",
        "En Proc. 3ra Conf. ACM sobre Comercio Electrónico (EC-01), páginas 256-259.",
        "ACM Press, Nueva York, 2001. [9] P. Cramton, Y. Shoham y R. Steinberg, editores.",
        "Subastas combinatorias.",
        "MIT Press, 2004. [10] S. de Vries, J. Schummer y R. V. Vohra.",
        "En subastas ascendentes de Vickrey para objetos heterogéneos.",
        "Informe técnico, MEDS, Escuela Kellogg, Universidad Northwestern, 2003. [11] S. de Vries y R. V. Vohra.",
        "Subastas combinatorias: Un estudio.",
        "Revista Informs sobre Computación, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana y T. Wilson.",
        "Probando algoritmos de precios lineales para su uso en subastas combinatorias ascendentes.",
        "Informe técnico, SEOR, Universidad George Mason, 2003. [13] Y. Fu, J.",
        "Chase, B. Chun, S. Schwab, y A. Vahdat.",
        "Sharp: una arquitectura para el emparejamiento seguro de recursos.",
        "En Actas del decimonoveno simposio de principios de sistemas operativos de ACM, páginas 133-148.",
        "ACM Press, 2003. [14] B. Hudson y T. Sandholm.",
        "Efectividad de tipos de consultas y políticas para la obtención de preferencias en subastas combinatorias.",
        "En Proc. 3rd Int.",
        "Articulación.",
        "Conferencia sobre Agentes Autónomos y Sistemas Multiagente, páginas 386-393, 2004. [15] V. Krishna.",
        "Teoría de subastas.",
        "Academic Press, 2002. [16] D. Krych. \n\nEditorial Académica, 2002. [16] D. Krych.",
        "Cálculo y análisis de equilibrios de Nash de reglas de pago basadas en Vickrey para intercambios combinatorios, Harvard College, abril de 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter y C. DeMartini.",
        "Un nuevo y mejorado diseño para subastas iterativas de múltiples objetos.",
        "Ciencias de la Gestión, 2004.",
        "Aparecer. [18] E. Kwerel y J. Williams.",
        "Una propuesta para una transición rápida a la asignación de espectro por mercado.",
        "Informe técnico, Oficina de Planes y Políticas de la FCC, noviembre de 2002. [19] S. M. Lahaie y D. C. Parkes.",
        "Aplicando algoritmos de aprendizaje a la obtención de preferencias.",
        "En Proc.",
        "ACM Conf. on Electronic Commerce, páginas 180-188, 2004. [20] R. P. McAfee.",
        "Una subasta doble con estrategia dominante.",
        "Revista de Teoría Económica, 56:434-450, 1992. [21] P. Milgrom.",
        "Poniendo en práctica la teoría de subastas: La subasta ascendente simultánea.",
        "J.Pol.",
        "Econ., 108:245-272, 2000. [22] R. B. Myerson y M. A. Satterthwaite.",
        "Mecanismos eficientes para el comercio bilateral.",
        "Revista de Teoría Económica, 28:265-281, 1983. [23] N. Nisan.",
        "Subasta y asignación en subastas combinatorias.",
        "En Proc. 2ª ACM Conf. sobre Comercio Electrónico (EC-00), páginas 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam y M. Eso.",
        "Lograr el equilibrio presupuestario con esquemas de pago basados en Vickrey en intercambios.",
        "En Proc. 17ª Conferencia Internacional Conjunta de Inteligencia Artificial (IJCAI-01), páginas 1161-1168, 2001. [25] D. C. Parkes y L. H. Ungar.",
        "Subastas combinatorias iterativas: Teoría y práctica.",
        "En Proc. 17ª Conferencia Nacional de Inteligencia Artificial (AAAI-00), páginas 74-81, julio de 2000. [26] S. J. Rassenti, V. L. Smith y R. L. Bulfin.",
        "Un mecanismo combinatorio para la asignación de franjas horarias en aeropuertos.",
        "Revista Bell de Economía, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc y R. M. Harstad.",
        "Subastas combinatorias computacionalmente manejables.",
        "Ciencia de la Gestión, 44(8):1131-1147, 1998. [28] T. Sandholm y C. Boutilier.",
        "Elicitación de preferencias en subastas combinatorias.",
        "En Cramton et al. [9], capítulo 10. [29] P. R. Wurman y M. P. Wellman.",
        "AkBA: Una subasta combinatoria progresiva y de precio anónimo.",
        "En la Segunda Conferencia ACM sobre Comercio Electrónico, páginas 21-29, 2000. 258"
    ],
    "error_count": 6,
    "keys": {
        "iterative combinatorial exchange": {
            "translated_key": "intercambio combinatorio iterativo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "ICE: An <br>iterative combinatorial exchange</br> David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an <br>iterative combinatorial exchange</br> (ICE).",
                "The exchange incorporates a tree-based bidding language that is concise and expressive for CEs.",
                "Bidders specify lower and upper bounds on their value for different trades.",
                "These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
                "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
                "A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "The exchange is fully implemented and in a validation phase.",
                "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
                "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
                "In a double auction (DA), multiple buyers and sellers trade units of an identical good [20].",
                "In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language.",
                "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
                "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling.",
                "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
                "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
                "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
                "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
                "This paper presents the first design for an <br>iterative combinatorial exchange</br> (ICE).",
                "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
                "The ICE design problem is multi-faceted and quite hard.",
                "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round.",
                "The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "The exchange has a number of interesting theoretical properties.",
                "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
                "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
                "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
                "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
                "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "The exchange is implemented in Java and is currently in validation.",
                "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
                "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
                "We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions.",
                "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based bidding language.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable.",
                "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
                "Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
                "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
                "An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade.",
                "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
                "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades.",
                "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
                "A revealed-preference activity rule [1] ensures progress across rounds.",
                "In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices.",
                "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
                "An outline of the ICE system flow of control is provided in Figure 1.",
                "We will return to this example later in the paper.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance).",
                "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round.",
                "At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29].",
                "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
                "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
                "The price generation methods that we use in ICE generalize the methods in these earlier papers.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule.",
                "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
                "We are not aware of any previous studies of iterative CEs.",
                "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
                "No dominant strategy mechanisms are known for the general CE problem.",
                "ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
                "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
                "The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
                "Rothkopf et al. [27] also describe a restricted tree-based bidding language.",
                "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
                "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
                "The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
                "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
                "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
                "A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
                "So, the final allocation is x1 = x0 + λ.",
                "Each bidder has a value vi(λi) ∈ ¡ for a trade λi.",
                "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
                "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ .",
                "Price p can be negative, indicating the bidder receives a payment for the trade.",
                "We use the term payoff interchangeably with utility.",
                "Our goal in the ICE design is to implement the efficient trade.",
                "The efficient trade, λ∗ , maximizes the total increase in value across bidders.",
                "Definition 1 (Efficient trade).",
                "The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
                "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
                "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
                "All three examples have only one seller, but this is purely illustrative.",
                "Example 1.",
                "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
                "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
                "Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
                "Example 2.",
                "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
                "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
                "The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
                "Example 3.",
                "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
                "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades.",
                "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
                "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
                "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
                "We illustrate the language on each of Examples 1-3 in Figure 2.",
                "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
                "The nodes have zero values where no value is indicated.",
                "Internal nodes are also labeled with interval-choose (IC) ranges.",
                "Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
                "First, if a child is on then its parent must be on.",
                "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
                "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade.",
                "For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
                "On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
                "Given a trade there is often a number of ways to choose the set of satisfied nodes.",
                "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
                "Consider bid tree Ti from bidder i.",
                "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
                "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
                "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
                "Every node is also labeled with a value, viβ ∈ ¡ .",
                "Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.)",
                "Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
                "There will often be a choice.",
                "Ties are broken to maximize value.",
                "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
                "Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
                "This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade.",
                "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
                "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
                "The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
                "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
                "Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
                "OR* is known to be expressive and concise.",
                "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
                "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
                "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
                "In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆vcg,i = V ∗ − V−i the VCG discount.",
                "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
                "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome.",
                "Definition 2.",
                "The Threshold payment scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance).",
                "Example 4.",
                "In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
                "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
                "This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes.",
                "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
                "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
                "THE ICE DESIGN We are now ready to introduce the <br>iterative combinatorial exchange</br> (ICE) design.",
                "Several new components are introduced, relative to the design for the one-shot exchange.",
                "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
                "The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations.",
                "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
                "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v).",
                "Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
                "These take the place of the exact value viβ defined in Section 4.1.",
                "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
                "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
                "The following lemma is useful: Lemma 1.",
                "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
                "Proof.",
                "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
                "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
                "But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
                "Given these provisional prices, the price on trade λi for bidder i is pt (λi) =   j≤m pt j · λij.",
                "Definition 3 (CE prices).",
                "Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
                "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
                "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
                "II: Fairness.",
                "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
                "III: Balance.",
                "Third, we break ties to prefer prices that minimize the maximal price across all items.",
                "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
                "In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades.",
                "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
                "Each step is described in detail below.",
                "I: Accuracy.",
                "We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages.",
                "Let λt denote the current provisional trade and suppose the provisional valuation is vα .",
                "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
                "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
                "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.)",
                "Example 5.",
                "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
                "The efficient trade allocates AB to buyer 1 and CD to buyer 3.",
                "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
                "But, (9) has an exponential number of constraints (Eq. 10).",
                "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
                "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
                "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
                "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
                "In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices.",
                "Let ˆλi denote the solution to R-WD(i).",
                "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
                "Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
                "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
                "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
                "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
                "This can be exactly achieved in pricing with pA + pB = 14.",
                "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
                "The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the VCG payoff (at vα ).",
                "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
                "III: Balance.",
                "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items.",
                "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
                "Finally, balance sets p(A) = p(B) = 7.",
                "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
                "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
                "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
                "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
                "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
                "Dunford et al. [12] prefer to smooth prices across rounds.",
                "Comment 1: Lexicographical Refinement.",
                "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
                "For instance, in ACC we successively minimize the maximal error across all bidders.",
                "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
                "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
                "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
                "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL.",
                "Comment 2: Computation.",
                "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
                "Thus, the computational effort in constraint generation is re-used.",
                "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
                "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
                "This avoids later infeasibility issues.",
                "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
                "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
                "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
                "We adopt a simple revealed-preference (RP) activity rule.",
                "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
                "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
                "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
                "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
                "Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices.",
                "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
                "We pin these down and then minimize the error to bidders 3 and 4.",
                "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices.",
                "Consider the following examples: Example 7.",
                "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
                "Example 8.",
                "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
                "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
                "Definition 4.",
                "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
                "First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
                "Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP.",
                "To understand the importance of this tiebreaking rule consider Example 7.",
                "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
                "Notice that +B is a counterexample to +A, but not the other way round.",
                "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i .",
                "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v.",
                "We call trade U∗ i the witness trade.",
                "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
                "Example 8 helps to illustrate this.",
                "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
                "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
                "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
                "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
                "Proposition 1.",
                "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
                "Proof.",
                "For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
                "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes.",
                "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
                "For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i).",
                "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
                "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
                "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
                "Proceed by case analysis.",
                "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
                "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
                "Case b): two or more solutions to RP1(i) have uncertain value.",
                "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
                "This is by RP.",
                "Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
                "Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades.",
                "Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
                "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
                "Failure to meet the activity rule must have some consequence.",
                "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices.",
                "See 7 for an additional discussion.",
                "We also provide guidance to help a bidder meet the RP rule.",
                "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
                "Lemma 2.",
                "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
                "Proof.",
                "Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
                "Thus, the RP condition will continue to fail.",
                "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
                "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
                "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
                "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
                "This is an elegant feedback mechanism because it is adaptive.",
                "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
                "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
                "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
                "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
                "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
                "Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
                "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v).",
                "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
                "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
                "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
                "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
                "Termination Condition.",
                "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade.",
                "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
                "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm.",
                "Note that γthresh is defined for payments and not payoffs.",
                "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments.",
                "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
                "Definition 5 (termination).",
                "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
                "At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments.",
                "Example 9.",
                "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
                "First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0.",
                "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
                "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
                "For CUTOFFthresh < 2/5 the exchange would remain open.",
                "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
                "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the tree-based bidding language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
                "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
                "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
                "A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy.",
                "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
                "These engines drive the appropriate MIP/LP builders.",
                "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
                "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
                "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
                "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
                "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
                "DISCUSSION The bidding language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
                "This proved especially challenging.",
                "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
                "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
                "The total of 6502 includes 184 for instrumentation (not shown in the table).",
                "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
                "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
                "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
                "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
                "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
                "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values.",
                "Upper and lower bound information also provides guidance about when to terminate.",
                "Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information.",
                "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
                "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
                "This is worthy of experimental investigation.",
                "Moreover, the use of price and RP activity provides additional guarantees.",
                "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process.",
                "The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
                "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
                "The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees.",
                "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
                "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
                "Some strategic aspects of our ICE design deserve comment, and further study.",
                "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
                "We must be careful, though.",
                "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
                "Also, no consideration has been given in this work to collusion by bidders.",
                "This is an issue that deserves some attention in future work. 8.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive <br>iterative combinatorial exchange</br>.",
                "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
                "The exchange is fully implemented in Java and is in a validation phase.",
                "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
                "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
                "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
                "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
                "This work is supported in part by NSF grant IIS-0238147. 9.",
                "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
                "The clock-proxy auction: A practical combinatorial auction design.",
                "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
                "Mechanisms for a spatially distributed market.",
                "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
                "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
                "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
                "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
                "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
                "Introduction to Linear Optimization.",
                "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
                "A pomdp formulation of preference elicitation problems.",
                "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
                "Bidding languages for combinatorial auctions.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
                "Preference elicitation in combinatorial auctions.",
                "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
                "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
                "Combinatorial Auctions.",
                "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
                "On ascending Vickrey auctions for heterogeneous objects.",
                "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
                "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
                "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
                "Chase, B. Chun, S. Schwab, and A. Vahdat.",
                "Sharp: an architecture for secure resource peering.",
                "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
                "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In Proc. 3rd Int.",
                "Joint.",
                "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [16] D. Krych.",
                "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
                "A new and improved design for multi-object iterative auctions.",
                "Management Science, 2004.",
                "To appear. [18] E. Kwerel and J. Williams.",
                "A proposal for a rapid transition to market allocation of spectrum.",
                "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proc.",
                "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
                "A dominant strategy double auction.",
                "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
                "Putting auction theory to work: The simultaneous ascending auction.",
                "J.Pol.",
                "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
                "Iterative combinatorial auctions: Theory and practice.",
                "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
                "A combinatorial mechanism for airport time slot allocation.",
                "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
            ],
            "original_annotated_samples": [
                "ICE: An <br>iterative combinatorial exchange</br> David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an <br>iterative combinatorial exchange</br> (ICE).",
                "This paper presents the first design for an <br>iterative combinatorial exchange</br> (ICE).",
                "THE ICE DESIGN We are now ready to introduce the <br>iterative combinatorial exchange</br> (ICE) design.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive <br>iterative combinatorial exchange</br>."
            ],
            "translated_annotated_samples": [
                "Presentamos el primer diseño para un <br>intercambio combinatorio iterativo</br> (ICE).",
                "Este documento presenta el primer diseño para un <br>intercambio combinatorio iterativo</br> (ICE).",
                "El diseño ICE Estamos listos para presentar el diseño de <br>intercambio combinatorio iterativo</br> (ICE).",
                "CONCLUSIONES En este trabajo diseñamos y prototipamos un <br>intercambio combinatorio iterativo</br> escalable y altamente expresivo."
            ],
            "translated_text": "Presentamos el primer diseño para un <br>intercambio combinatorio iterativo</br> (ICE). El intercambio incorpora un lenguaje de oferta basado en árboles que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20]. En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos. Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un <br>intercambio combinatorio iterativo</br> (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda. La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de oferta basado en árboles expresivo y conciso. El lenguaje describe valores para intercambios, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el intercambio sea aceptable. El lenguaje permite a los postores expresar límites superiores e inferiores en el valor, los cuales pueden ser ajustados en cada ronda. • Determinación del ganador. La determinación del ganador (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación. Comparar la solución en los valores superiores e inferiores permite tomar una decisión sobre la terminación, con el progreso en rondas intermedias impulsado por una valoración intermedia y los valores inferiores adoptados al finalizar. • Pagos. Los pagos se calculan utilizando la regla de pago del umbral [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de precios. Se calcula un precio aproximado para cada artículo en el intercambio en cada ronda, en función de las valoraciones intermedias y el intercambio provisional. Los precios se optimizan para aproximar los precios de equilibrio competitivo, y luego se optimizan aún más para aproximar mejor los pagos del umbral actual con los lazos restantes rotos para favorecer los precios equilibrados entre diferentes artículos. Al calcular los precios, adoptamos los métodos de generación de restricciones para explotar la estructura del lenguaje de oferta y evitar enumerar todos los intercambios factibles. El subproblema para generar nuevas restricciones es una variación del problema WD. • Regla de actividad. Una regla de actividad de preferencia revelada [1] garantiza progreso a lo largo de las rondas. Para permanecer activo, un oferente debe ajustar los límites para que haya suficiente información para definir un intercambio que maximice el excedente a los precios actuales. Otra variación del problema de WD se formula, tanto para verificar que se cumple la regla de actividad como para proporcionar retroalimentación a un postor para explicar cómo cumplir la regla. Se proporciona un esquema del flujo de control del sistema ICE en la Figura 1. Volveremos a este ejemplo más adelante en el documento. Por ahora, simplemente observa en este ejemplo de dos agentes que los agentes establecen límites inferiores y superiores que son verificados en la regla de actividad, y luego pasados a la determinación del ganador (WD), y luego a través de tres etapas de fijación de precios (precisión, equidad, equilibrio). Al pasar la regla de cierre (en la que se verifican los parámetros αeff y αthresh para la convergencia del comercio y los pagos), el intercambio pasa a una última y definitiva ronda. Al final de esta ronda, el intercambio y los pagos finalmente se determinan, basados en las valoraciones más bajas. 2.1 Trabajo Relacionado En la literatura se conocen muchos CAs de un solo lado con precios ascendentes [10, 25, 29]. También se han propuesto enfoques de elicitación directa para los AC unilaterales en los que los agentes responden a preguntas explícitas sobre sus valoraciones [8, 14, 19]. Un número de CAs ascendentes están diseñados para trabajar con precios simples en artículos [12, 17]. Los métodos de generación de precios que utilizamos en ICE generalizan los métodos de estos artículos anteriores. Parkes et al. [24] estudiaron intercambios combinatorios de oferta sellada e introdujeron la regla de pago umbral. Posteriormente, Krych [16] demostró experimentalmente que la regla del Umbral promueve asignaciones eficientes. No tenemos conocimiento de ningún estudio previo sobre CEs iterativos. Las estrategias dominantes DAs son conocidas por la demanda unitaria [20] y también por agentes de mente única [2]. No se conocen mecanismos de estrategia dominante para el problema general de la CE. ICE es un diseño de subasta híbrido, ya que combina precios simples de artículos para impulsar las ofertas en las primeras rondas con WD combinatorio y pagos, una característica que comparte con el diseño de reloj-proxy de Ausubel et al. [1] para subastas unilaterales. Adoptamos una variación de la regla de actividad de preferencia revelada en las subastas de proxy de reloj. El lenguaje de subasta comparte algunos elementos estructurales con el lenguaje LGB de Boutilier y Hoos [7], pero tiene semántica muy diferente. Rothkopf et al. [27] también describen un lenguaje de oferta basado en árboles restringido. En LGB, la semántica es la de la lógica proposicional, con los mismos elementos en una asignación capaces de satisfacer un árbol en múltiples lugares. Aunque esto puede hacer que LGB sea especialmente conciso en algunos contextos, la semántica que proponemos parece proporcionar una utilidad local, de modo que el valor de un componente en un árbol pueda ser comprendido de forma independiente al resto del árbol. La idea de capturar la estructura de nuestro lenguaje de oferta de manera explícita dentro de una formulación de programación entera mixta sigue los desarrollos en Boutilier [6]. 3. PRELIMINARES En nuestro modelo, consideramos un conjunto de bienes, indexados {1, . . . , m} y un conjunto de postores, indexados {1, . . . , n}. La asignación inicial de bienes se denota como x0 = (x0 1, . . . , x0 n), donde x0 i = (x0 i1, . . . , x0 im) y x0 ij ≥ 0 para el bien j indicando el número de unidades del bien j que posee el postor i. Un intercambio λ = (λ1, . . . , λn) denota el cambio en la asignación, con λi = (λi1, . . . , λim) donde λij ∈ es el cambio en el número de unidades del ítem j para el postor i. Entonces, la asignación final es x1 = x0 + λ. Cada postor tiene un valor vi(λi) ∈ ¡ para una transacción λi. Este valor puede ser positivo o negativo, y representa el cambio en el valor entre la asignación final x0 i +λi y la asignación inicial x0 i. La utilidad es cuasi-lineal, con ui(λi, p) = vi(λi)−p para el intercambio λi y el pago p ∈ ¡. El precio p puede ser negativo, lo que indica que el postor recibe un pago por la transacción. Utilizamos el término \"pago\" de manera intercambiable con \"utilidad\". Nuestro objetivo en el diseño de ICE es implementar el comercio eficiente. El intercambio eficiente, λ∗, maximiza el aumento total de valor entre los postores. Definición 1 (Comercio eficiente). El intercambio eficiente λ∗ resuelve max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Las restricciones (1) aseguran que ningún agente venda más artículos de los que tiene en su asignación inicial. Las restricciones (2) permiten la disposición gratuita y permiten que los intercambios factibles vendan más artículos de los que se compran (pero no al revés). Posteriormente, adoptamos Feas(x0) para denotar el conjunto de intercambios factibles, dados estos límites y una asignación inicial x0 = (x0 1, . . . , x0 n). 3.1 Ejemplos Prácticos En esta sección, proporcionamos tres ejemplos simples de instancias que utilizaremos para ilustrar varios componentes del intercambio. Todos los tres ejemplos tienen solo un vendedor, pero esto es puramente ilustrativo. Ejemplo 1. Un vendedor y un comprador, dos bienes {A, B}, con el vendedor teniendo una asignación inicial de AB. Cambios en los valores de los intercambios: vendedor comprador Y (−A, −B) Y (+A, +B) -10 +20 El Y indica que tanto el comprador como el vendedor solo están interesados en intercambiar ambos bienes como un paquete. Aquí, el intercambio eficiente (que maximiza el valor) es para el vendedor vender AB al comprador, denotado como λ∗ = ([−1, −1], [+1, +1]). Ejemplo 2. Un vendedor y cuatro compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de las transacciones: vendedor comprador1 comprador 2 comprador 3 comprador 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 El OR indica que el vendedor está dispuesto a vender cualquier cantidad de bienes. El XOR indica que los compradores 2 y 4 están dispuestos a comprar como máximo uno de los dos bienes en los que están interesados. El comercio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD al comprador 3, denotado λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR Ejemplo 1: Ejemplo 3: 2,2 +C +D COMPRADOR 2 2,2 +A +B COMPRADOR 1 +11 +84,4 -B VENDEDOR -A -C -D Ejemplo 2: 1,1 +A +B COMPRADOR 2 2,2 +A +B COMPRADOR 1 +6 +40,4 -B VENDEDOR -C -D-A 1,1 +C +D COMPRADOR 4 2,2 +C +D +3 +2 COMPRADOR 3 -18 Figura 2: Ejemplo de Árboles de Ofertas. Ejemplo 3. Un vendedor y dos compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de los intercambios: vendedor comprador1 comprador 2 Y (−A, −B, −C, −D) Y (+A, +B) Y (+C, +D) -18 +11 +8 El intercambio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD vaya al comprador 2, denotado por λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4. Un DISEÑO DE INTERCAMBIO DE UNA SOLA VEZ La descripción de ICE se divide en dos secciones: una sola vez (oferta sellada) e iterativa. En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a compradores y vendedores, y para extenderse y capturar ofertas de compradores y vendedores mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas. Las ofertas se expresan como árboles de ofertas anotados, y definen el valor de un oferente para todos los intercambios posibles. El lenguaje define cambios en los valores de las transacciones, con hojas anotadas con los artículos intercambiados y nodos anotados con cambios en los valores (ya sea positivos o negativos). La característica principal es que tiene un operador lógico de intervalo general en los nodos internos, y que define una semántica cuidadosa para propagar valores dentro del árbol. Ilustramos el lenguaje en cada uno de los Ejemplos 1-3 en la Figura 2. El lenguaje tiene una estructura de árbol, con operaciones en elementos definidos en las hojas y valores anotados en nodos y hojas. Los nodos tienen valores de cero donde no se indica ningún valor. Los nodos internos también están etiquetados con rangos de intervalo-escoge (IC). Dada una transacción, la semántica del lenguaje define qué nodos en el árbol pueden ser satisfechos o activados. Primero, si un niño está encendido, entonces su padre también debe estar encendido. Segundo, si un nodo padre está encendido, entonces el número de hijos que están encendidos debe estar dentro del rango de IC en el nodo padre. Finalmente, las hojas en las que el postor está comprando artículos solo pueden estar activas si los artículos se proporcionan en el intercambio. Por ejemplo, en el Ejemplo 2 podemos considerar el comercio eficiente, y observar que en este comercio todos los nodos en los árboles de los compradores 1 y 3 (y también el vendedor), pero ninguno de los nodos en los árboles de los compradores 2 y 4, pueden estar encendidos. Por otro lado, en 251 el intercambio en el que A va al comprador 2 y D al comprador 4, entonces los nodos raíz y hojas apropiados pueden estar encendidos para los compradores 2 y 4, pero ningún nodo puede estar encendido para los compradores 1 y 3. Dado un intercambio, a menudo hay varias formas de elegir el conjunto de nodos satisfechos. La semántica del lenguaje requiere que se activen los nodos que maximicen el valor sumado entre los nodos satisfechos. Considera el árbol de oferta Ti del ofertante i. Esto define nodos β ∈ Ti, de los cuales algunos son hojas, Leaf (i) ⊆ Ti. Deje que Child(β) ⊆ Ti denote los hijos de un nodo β (que no es en sí mismo una hoja). Todos los nodos excepto las hojas están etiquetados con el operador de intervalo-escoger [IC x i (β), ICy i (β)]. Cada nodo también está etiquetado con un valor, viβ ∈ ¡. Cada hoja β está etiquetada con un intercambio, qiβ ∈ m (es decir, las hojas pueden definir un intercambio agrupado en más de un tipo de artículo). Dado un intercambio λi al postor i, los operadores de elección de intervalos y los intercambios en las hojas definen qué nodos pueden ser satisfechos. A menudo habrá una elección. Las corbatas se rompen para maximizar el valor. Que satiβ ∈ {0, 1} denote si el nodo β está satisfecho. La solución sati es válida dado el árbol Ti y el intercambio λi, escrita sati ∈ válido(Ti, λi), si y solo si: ¢ β∈Hoja (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Hijo(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Hoja (i) (5) En otras palabras, un conjunto de hojas solo puede considerarse satisfecho dado el intercambio λi si el aumento total en cantidad sumado en todas esas hojas está cubierto por el intercambio, para todos los bienes (Eq. 4). Esto funciona tanto para vendedores como para compradores: para los vendedores, un intercambio es negativo y esto requiere que el número total de artículos indicados como vendidos en el árbol sea al menos igual al número total vendido según lo definido en el intercambio. También necesitamos la propagación ascendente: cada vez que un nodo que no sea la raíz esté satisfecho, su padre también debe estar satisfecho (por β ∈Child(β) satiβ ≤ ICy i (β)satiβ en la Ecuación 5). Finalmente, necesitamos la propagación hacia abajo: cada vez que un nodo interno se satisface, entonces el número apropiado de hijos también debe estar satisfecho (Ec. 5). El valor total del comercio λi, dado el árbol de ofertas Ti, se define como: vi(Ti, λi) = máximo sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) El lenguaje basado en árboles generaliza los lenguajes existentes. Por ejemplo: IC(2, 2) en un nodo con 2 hijos es equivalente a un operador AND; IC(1, 3) en un nodo con 3 hijos es equivalente a un operador OR; e IC(1, 1) en un nodo con 2 hijos es equivalente a un operador XOR. De manera similar, los lenguajes de oferta XOR/OR pueden ser expresados directamente como un árbol de oferta en nuestro lenguaje. La determinación del ganador Este apartado define el problema de determinación del ganador, el cual está formulado como un MIP y resuelto en nuestra implementación con un solucionador comercial. El solucionador utiliza búsqueda de ramificación y acotamiento con generación de cortes dinámicos y heurísticas de ramificación para resolver MIPs grandes en tiempos de ejecución económicamente factibles. El lenguaje OR* es el lenguaje OR con elementos ficticios para proporcionar estructura adicional. OR* se sabe que es expresivo y conciso. Sin embargo, no se sabe si OR* domina a XOR/OR en cuanto a concisión [23]. En la definición de la representación MIP, tenemos cuidado de evitar una enumeración basada en XOR de todos los paquetes. Una variación del problema de WD se reutiliza muchas veces dentro del intercambio, por ejemplo, para la generación de columnas en la fijación de precios y para verificar la preferencia revelada. Dado el conjunto de árboles de ofertas T = (T1, . . . , Tn) y la asignación inicial x0, la formulación mixta entera para WD es: WD(T, x0): max λ, sat ¢ i ¢ β ∈ Ti viβ · satiβ sujeto a (1), (2), satiβ ∈ {0, 1}, λij ∈ sati ∈ válido(Ti, λi), ∀i. Algunos bienes pueden quedar sin asignar porque se permite la disposición libre dentro de las reglas de liquidación de la determinación del ganador. Estos artículos pueden ser asignados de nuevo a los agentes que vendieron los artículos, es decir, para los cuales λij < 0. 4.3 Cálculo de Pagos Umbral La regla de pago umbral se basa en los pagos en el mecanismo de Vickrey-Clarke-Groves (VCG) [15], que en sí mismo es veraz y eficiente pero no satisface el equilibrio presupuestario. El equilibrio presupuestario requiere que los pagos totales al intercambio sean iguales a los pagos totales realizados por el intercambio. En VCG, el pago pagado por el agente i es pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) donde λ∗ es el intercambio eficiente, V ∗ es el valor reportado de este intercambio, y V−i es el valor reportado del intercambio eficiente que se implementaría sin el postor i. Llamamos a ∆vcg,i = V ∗ − V−i el descuento VCG. Por ejemplo, en el Ejemplo 1 pvcg,vendedor = −10 − (+10 − 0) = −20 y pvcg,comprador = +20 − (+10 − 0) = 10, y el intercambio se llevaría a cabo con un déficit presupuestario de −20 + 10 = −10. La regla de pago del umbral [24] determina pagos equilibrados presupuestarios para minimizar el error máximo entre todos los agentes respecto al resultado VCG. Definición 2. El esquema de pago de umbral implementa el intercambio eficiente λ∗ dado los ofertas, y establece los pagos pthresh,i = ˆvi(λ∗ i ) − ∆i, donde ∆ = (∆1, . . . , ∆n) se establece para minimizar maxi(∆vcg,i − ∆i) sujeto a ∆i ≤ ∆vcg,i e   i ∆i ≤ V ∗ (esto garantiza el equilibrio presupuestario). Ejemplo 4. En el Ejemplo 2, los descuentos de VCG son (9, 2, 0, 1, 0) para el vendedor y cuatro compradores respectivamente, los pagos de VCG son (−9, 4, 0, 2, 0) y el intercambio se realiza con un déficit de -3. En Threshold, los descuentos son (8, 1, 0, 0, 0) y los pagos son (−8, 5, 0, 3, 0). Esto minimiza el error en el peor de los casos para los descuentos VCG en todos los esquemas de pago equilibrados en presupuesto. Los pagos de umbral están diseñados para minimizar el incentivo máximo ex post para manipular. Krych [16] confirmó que Threshold promueve la eficiencia asignativa en el equilibrio de Bayes-Nash restringido y aproximado. 5. El diseño ICE Estamos listos para presentar el diseño de <br>intercambio combinatorio iterativo</br> (ICE). Se introducen varios componentes nuevos, en relación con el diseño para el intercambio único. En lugar de proporcionar valoraciones precisas, los postores pueden proporcionar valoraciones inferiores y superiores y revisar esta información de oferta en cada ronda. El intercambio proporciona retroalimentación basada en precios 252 para guiar a los postores en este proceso, y finaliza con un intercambio eficiente (o aproximadamente eficiente) con respecto a las valoraciones reportadas. En cada ronda t ∈ {0, 1, . . .} se utilizan los límites inferiores y superiores actuales, vt y vt, para definir un perfil de valoración provisional vα (la α-valoración), junto con un intercambio provisional λt y precios provisionales pt = (pt 1, . . . , pt m) en los artículos. La α-valoración es una combinación lineal de las valoraciones superiores e inferiores actuales, con αEFF ∈ [0, 1] elegido endógenamente en función de la cercanía del intercambio optimista (en v) y el intercambio pesimista (en v). Los precios pt se utilizan para informar una regla de actividad y avanzar hacia un comercio eficiente. 5.1 Valoraciones superiores e inferiores El lenguaje de la oferta se amplía para permitir que un oferente i informe un valor inferior y superior (viβ, viβ) en cada nodo. Estos ocupan el lugar del valor exacto viβ definido en la Sección 4.1. Basándonos en estas etiquetas, podemos definir las funciones de valoración vi(Ti, λi) y vi(Ti, λi), utilizando exactamente la misma semántica que en la Ecuación (6). Decimos que un árbol de ofertas está bien formado si viβ ≤ viβ para todos los nodos. El siguiente lema es útil: Lema 1. Dado un árbol bien formado, T, entonces vi(Ti, λi) ≤ vi(Ti, λi) para todos los intercambios. Prueba. Supongamos que existe algún λi para el cual vi(Ti, λi) > vi(Ti, λi). Entonces, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ. Sin embargo, esto es una contradicción porque el intercambio λ que define vi(Ti, λi) sigue siendo factible con límites superiores vi, y viβ ≥ viβ para todos los nodos β en un árbol bien formado. 5.2 Retroalimentación de precios En cada ronda, se determinan los precios de equilibrio competitivo aproximados (CE), pt = (pt 1, . . . , pt m). Dado estos precios provisionales, el precio en el intercambio λi para el postor i es pt (λi) = j≤m pt j · λij. Definición 3 (precios de la CE). Los precios p∗ son precios de equilibrio competitivo si el intercambio eficiente λ∗ está respaldado a precios p∗, de modo que para cada postor: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) Los precios de CE no siempre existirán y a menudo necesitaremos calcular precios aproximados [5]. Extendemos las ideas de Rassenti et al. [26], Kwasnica et al. [17] y Dunford et al. [12], y seleccionamos precios aproximados de la siguiente manera: I: Precisión. Primero, calculamos los precios que minimizan el error máximo en las restricciones de mejor respuesta de todos los postores. II: Equidad. Segundo, rompemos los empates para preferir precios que minimicen la desviación máxima de los pagos umbral entre todos los postores. III: Equilibrio. En tercer lugar, rompemos los empates para preferir precios que minimicen el precio máximo entre todos los artículos. En conjunto, estos pasos están diseñados para promover la informatividad de los precios en impulsar el progreso a lo largo de las rondas. Al calcular los precios, explicamos cómo calcular precios aproximados (o de otra manera) para lenguajes de oferta estructurados, sin enumerar todos los intercambios posibles. Para esto, adoptamos la generación de restricciones para manejar de manera eficiente un número exponencial de restricciones. Cada paso se describe detalladamente a continuación. Yo: Precisión. Adoptamos una definición de precisión de precio que generaliza las nociones adoptadas en trabajos anteriores para lenguajes de oferta no estructurados. Que λt denote el comercio provisional actual y suponga que la valoración provisional es vα. Para calcular precios de CE precisos, consideramos: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j. Este programa lineal (LP) está diseñado para encontrar precios que minimicen el error en el peor de los casos entre todos los agentes. De la definición de los precios de equilibrio competitivo (CE), se sigue que los precios de equilibrio competitivo tendrían δ = 0 como solución a (9), momento en el cual el intercambio λt i estaría en el conjunto de mejor respuesta de cada agente (con λt i = ∅, es decir, sin intercambio, para todos los agentes sin excedente para el intercambio a los precios). Ejemplo 5. Podemos ilustrar la formulación (9) en el Ejemplo 2, asumiendo para simplificar que vα = v (es decir, verdad). El comercio eficiente asigna AB al comprador 1 y CD al comprador 3. La precisión buscará los precios p(A), p(B), p(C) y p(D) para minimizar el δ ≥ 0 requerido para satisfacer las restricciones: p(A) + p(B) + p(C) + p(D) ≥ 0 (vendedor) p(A) + p(B) ≤ 6 + δ (comprador 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (comprador 2) p(C) + p(D) ≤ 3 (comprador 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (comprador 4) Una solución óptima requiere que p(A) = p(B) = 10/3, con δ = 2/3, y que p(C) y p(D) tomen valores como p(C) = p(D) = 3/2. Pero, (9) tiene un número exponencial de restricciones (Ec. 10). En lugar de resolverlo explícitamente, utilizamos la generación de restricciones [4] y generamos dinámicamente un subconjunto suficiente de restricciones. Que \\(i\\) denote un subconjunto manejable de todos los intercambios factibles posibles para el oferente \\(i\\). Entonces, una versión relajada de (9) (escrita ACC) se formula sustituyendo (10) con vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) donde   i es un conjunto de intercambios que son factibles para el postor i dado las otras ofertas. Fijando los precios p∗, luego resolvemos n subproblemas (uno para cada postor), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0), (12) para verificar si la solución (p∗, δ∗) a ACC es factible en el problema (9). En R-WD(i) el objetivo es determinar un intercambio más preferido para cada postor a estos precios. Que ˆλi denote la solución a R-WD(i). Verificar la condición: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) y si esta condición se cumple para todos los postores i, entonces la solución (p∗ , δ∗ ) es óptima para el problema (9). De lo contrario, se agrega el intercambio ˆλi a i para todos los postores i para los cuales esta restricción se viola en 253 y volvemos a resolver el LP con el nuevo conjunto de restricciones. II: Equidad. Segundo, rompemos los empates restantes para preferir precios justos: eligiendo precios que minimicen el error en el peor de los casos con respecto a los pagos umbral (es decir, la utilidad para los postores con pagos umbral), pero sin elegir precios que sean menos precisos. Ejemplo 6. Por ejemplo, la precisión en el Ejemplo 1 (representado en la Figura 1) requiere que 12 ≤ pA + pB ≤ 16 (para vα = v). En estas valoraciones, los pagos umbral serían de 2 para tanto el vendedor como el comprador. Esto se puede lograr exactamente en la fijación de precios con pA + pB = 14. El método de desempate de equidad se formula como el siguiente LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima, de ACC. El objetivo aquí es el mismo que en la regla de pago del umbral (ver Sección 4.3): minimizar el error máximo entre el pago del postor (en vα) para el intercambio provisional y el pago VCG (en vα). El problema FAIR también se resuelve mediante la generación de restricciones, utilizando R-WD(i) para agregar restricciones adicionales violadas según sea necesario. III: Equilibrio. En tercer lugar, rompemos los empates restantes para preferir precios equilibrados: eligiendo precios que minimicen el precio máximo entre todos los artículos. Volviendo de nuevo al Ejemplo 1, representado en la Figura 1, vemos que la precisión y la equidad requieren que p(A) + p(B) = 14. Finalmente, el conjunto de equilibrio establece que p(A) = p(B) = 7. El equilibrio está justificado cuando, manteniendo todo lo demás igual, los elementos son más propensos a tener valores similares que diferentes. El LP para el equilibrio se formula de la siguiente manera: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima de ACC y π∗ representa el error en la solución óptima de FAIR. La generación de restricciones también se utiliza para resolver BAL, generando nuevos intercambios para i según sea necesario. El problema R-WD(i) es una especialización del problema WD, en el que el objetivo es maximizar el pago de un único postor, en lugar del valor total entre todos los postores. Se resuelve como un MIP, al reescribir el objetivo en WD(T, x0) como max{viβ · satiβ − j p∗ j · λij} para el agente i. Por lo tanto, la estructura del lenguaje del árbol de ofertas se explota para generar nuevas restricciones, ya que esto se resuelve como un MIP conciso. Los otros postores se mantienen en el MIP (pero no aparecen en el objetivo) y se utilizan para definir el espacio de intercambios factibles. Los métodos de Dunford et al. [12], que utilizan un enfoque de núcleo, también están estrechamente relacionados. El uso del equilibrio fue defendido por Kwasnica et al. [17]. Dunford et al. [12] prefieren suavizar los precios a lo largo de las rondas. Comentario 1: Refinamiento lexicográfico. Para los tres subproblemas también realizamos un refinamiento lexicográfico (con respecto a los postores en ACC y FAIR, y con respecto a los bienes en BAL). Por ejemplo, en ACC minimizamos sucesivamente el error máximo entre todos los postores. Dada una solución inicial, primero identificamos el error en todos los postores para quienes una restricción (11) está vinculante. Para dicho postor i, la restricción se reemplaza por vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) y el error para el postor i ya no aparece explícitamente en el objetivo. ACC se vuelve a resolver y avanza al minimizar aún más el error máximo entre todos los postores que aún no han sido identificados. Esto continúa, fijando a cualquier nuevo postor para quien una de las restricciones (11) sea vinculante, hasta que el error esté optimizado lexicográficamente para todos los postores. El mismo proceso exacto se repite para FAIR y BAL, con los postores fijados y las restricciones (15) reemplazadas por π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (donde π∗ i es el objetivo actual) en FAIR, y los artículos fijados y las restricciones (18) reemplazadas por p∗ j ≥ pj (donde p∗ j representa el objetivo para el precio máximo en ese artículo) en BAL. Comentario 2: Computación. Todos los límites en i se mantienen, y este conjunto crece en todas las etapas y en todas las rondas del intercambio. Por lo tanto, el esfuerzo computacional en la generación de restricciones se reutiliza. En la implementación, nos aseguramos de abordar una serie de problemas que surgen debido a problemas de punto flotante. Preferimos pecar de conservadores al determinar si agregar o no otra restricción al realizar la verificación (13). Esto evita problemas de inviabilidad posteriores. Además, al fijar a los postores con el fin de refinar lexicográficamente, relajamos las restricciones asociadas con un pequeño > 0 en el lado derecho. 5.3 Reglas de Actividad de Preferencia Revelada El papel de las reglas de actividad en la subasta es garantizar tanto la consistencia como el progreso en las rondas [21]. La consistencia en nuestro intercambio requiere que los oferentes ajusten los límites a medida que avanza el intercambio. Las reglas de la actividad garantizan que los postores estén activos durante las primeras rondas y promueven una elicitación útil a lo largo del intercambio. Adoptamos una regla de actividad de preferencia revelada (RP) simple. La idea se basa vagamente en la regla de RP en Ausubel et al. [1], donde se utiliza para los AC unilaterales. La motivación es requerir más que simplemente consistencia: necesitamos que los oferentes proporcionen suficiente información para que el sistema pueda demostrar que una asignación es (aproximadamente) eficiente. Es útil pensar en los postores interactuando con agentes de proxy que actuarán en su nombre al responder a los precios provisionales pt−1 determinados al final de la ronda t − 1. El único conocimiento que tiene un intermediario sobre la valoración de un postor es a través del árbol de ofertas. Supongamos que un intermediario fue consultado por la bolsa y se le preguntó en qué operación estaba más interesado el oferente a los precios provisionales. La regla de RP dice lo siguiente: el proxy debe tener suficiente 7. Por ejemplo, aplicando esto a la precisión en el Ejemplo 2, resolvemos una vez y encontramos que los postores 1 y 2 son vinculantes, con un error δ∗ = 2/3. Fijamos estos y luego minimizamos el error para los postores 3 y 4. Finalmente, esto da p(A) = p(B) = 10/3 y p(C) = p(D) = 5/3, con precisión de 2/3 para los postores 1 y 2 y 1/3 para los postores 3 y 4. Se necesitan 254 información para poder determinar este intercambio que maximiza el excedente al precio actual. Considera los siguientes ejemplos: Ejemplo 7. Un postor tiene XOR(+A, +B) y un valor de +5 en la hoja +A y un rango de valores de [5,10] en la hoja +B. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el representante sabe que, sin importar cómo se resuelva la incertidumbre restante del valor en +B, el postor siempre preferirá (débilmente) +B a +A. Ejemplo 8. Un postor tiene XOR(+A, +B) y límites de valor [5, 10] en el nodo raíz y un valor de 1 en la hoja +A. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el postor siempre preferirá +A a +B a precios iguales, sin importar cómo se resuelva finalmente el valor incierto en el nodo raíz. Sobrecargando la notación, sea vi ∈ Ti una valoración que sea consistente con las valoraciones inferiores y superiores en el árbol de oferta Ti. Definición 4. El árbol de oferta Ti satisface RP a precios pt−1 si y solo si existe algún intercambio factible L∗ para el cual, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. Para determinar esto para el postor i, resolvemos una secuencia de problemas, cada uno de los cuales es una variación del problema WD. Primero, construimos un intercambio candidato de límite inferior, que es un intercambio factible que resuelve: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) La solución π∗ l a RP1(i) representa el pago máximo que el postor i puede lograr en todos los intercambios factibles, dado su valoración pesimista. Segundo, rompemos los lazos para encontrar un intercambio con la máxima incertidumbre del valor en todas las posibles soluciones a RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] sujeto a λ ∈ Feas(x0) (22) vi(λi) − pt−1(λi) ≥ π∗ l (23) Adoptamos la solución L∗ i como nuestro candidato para el intercambio que puede satisfacer RP. Para entender la importancia de esta regla de desempate, considera el Ejemplo 7. El proxy puede demostrar que +B pero no +A es una mejor respuesta para todos los vi ∈ Ti, y debería elegir +B como su candidato. Observa que +B es un contraejemplo para +A, pero no al revés. Ahora, construimos una valuación modificada ˜vi, estableciendo ˜viβ = viβ, si β ∈ sat(L∗ i) viβ, de lo contrario. (24) donde sat(L∗ i) es el conjunto de nodos que están satisfechos en el árbol de límite inferior para el comercio L∗ i. Dada esta valuación modificada, encontramos U∗ para resolver: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Sea π∗ u el beneficio de este intercambio óptimo en los valores modificados ˜v. Llamamos al intercambio U∗ i el intercambio testigo. Mostramos en la Proposición 1 que la regla RP se cumple si y solo si π∗ l ≥ π∗ u. La construcción de la valoración modificada como ˜vi reconoce que existe incertidumbre compartida en las operaciones que cumplen los mismos nodos en un árbol de ofertas. El ejemplo 8 ayuda a ilustrar esto. Simplemente usando vi en RP3(i), encontraríamos que L∗ i es comprar A con un pago de π∗ l = 3 pero luego encontraríamos que U∗ i es comprar B con π∗ u = 7 y fallar en RP. Debemos reconocer que, sin importar cómo se resuelva la incertidumbre en el nodo raíz, afectará a +A y +B de la misma manera. Por esta razón, establecimos ˜viβ = viβ = 5 en el nodo raíz, que es exactamente el mismo valor que se adoptó al determinar π∗ l. Entonces, RP3(i) aplicado a U∗ i da como resultado comprar A y se considera que el test de RP ha sido aprobado. Proposición 1. El árbol de oferta Ti satisface RP dado los precios pt−1 si y solo si cualquier intercambio de límite inferior L∗ i que resuelve RP1(i) y RP2(i) satisface: vi(Ti, L∗ i) − pt−1 (L∗ i) ≥ ˜vi(Ti, U∗ i) − pt−1 (U∗ i), (26) donde ˜vi es la valoración modificada en la ecuación (24). Prueba. Para la suficiencia, observe que la diferencia en el pago entre el intercambio L∗ i y otro intercambio λi no se ve afectada por la forma en que se resuelve la incertidumbre en cualquier nodo que esté satisfecho tanto en L∗ i como en λi. Corregir los valores en ˜vi en los nodos satisfechos en L∗ i tiene el efecto de eliminar esta consideración cuando se selecciona un intercambio U∗ i que satisface uno de estos nodos. Por otro lado, fijar los valores en estos nodos no tiene efecto en las operaciones consideradas en RP3(i) que no comparten un nodo con L∗ i. Para la dirección necesaria, primero mostramos que cualquier intercambio que satisfaga RP debe resolver RP1(i). Supongamos lo contrario, que algún λi con un pago mayor que π∗ l cumple con RP. Sin embargo, la valoración vi ∈ Ti junto con L∗ i presenta un contraejemplo a RP (Eq. 20). Ahora, supongamos (por contradicción) que algún λi con ganancia máxima π∗ l pero incertidumbre menor que L∗ i cumple con RP. Procede mediante el análisis de casos. Caso a): solo una solución a RP1(i) tiene un valor incierto y, por lo tanto, λi tiene un valor seguro. Pero, esto no puede satisfacer a RP porque L∗ i con un valor incierto sería un contraejemplo para RP (Eq. 20). Caso b): dos o más soluciones a RP1(i) tienen un valor incierto. Aquí argumentamos primero que uno de estos intercambios debe satisfacer un (débil) superconjunto de todos los nodos con valor incierto que son satisfechos por todos los demás intercambios en este conjunto. Esto es por RP. Sin esto, entonces para cualquier elección de comercio que resuelva RP1(i), hay otro comercio con un conjunto disjunto de nodos inciertos pero satisfechos que proporciona un contraejemplo a RP (Ec. 20). Ahora, considera el caso en el que algún intercambio contiene un superconjunto de todos los nodos inciertos satisfechos de los otros intercambios. Claramente RP2(i) elegirá este intercambio, L∗ i, y λi debe satisfacer un subconjunto de estos nodos (por suposición). Pero ahora vemos que λi no puede cumplir con RP porque L∗ i sería un contraejemplo para RP. El incumplimiento de la regla de actividad debe tener alguna consecuencia. En las reglas actuales, la acción predeterminada que elegimos es establecer los límites superiores en las valoraciones hasta el valor máximo del precio provisional en un nodo8 y el valor del límite inferior en ese nodo.9 Tal postor puede permanecer activo 8 El precio provisional en un nodo se define como el precio total mínimo entre todos los intercambios factibles para los cuales el subárbol enraizado en el árbol está satisfecho. 9 Esto es completamente análogo a cuando un postor en una subasta de reloj ascendente deja de ofertar a un precio: no se le permite ofertar a un precio más alto nuevamente en rondas futuras. 255 dentro del intercambio, pero solo con valoraciones que sean consistentes con estos nuevos límites. 5.4 Retroalimentación del postor En cada ronda, nuestro diseño predeterminado proporciona a cada postor el intercambio provisional y también los precios provisionales actuales. Ver el 7 para una discusión adicional. También brindamos orientación para ayudar a un licitador a cumplir con la regla de RP. Que sat(L∗ i ) y sat(U∗ i ) denoten los nodos que se satisfacen en los intercambios L∗ i y U∗ i, tal como se calcula en RP1-RP3. Lema 2. Cuando RP falla, un postor debe aumentar un límite inferior en al menos un nodo en sat(L∗ i) \\ sat(U∗ i) o disminuir un límite superior en al menos un nodo en sat(U∗ i) \\ sat(L∗ i) para cumplir con la regla de actividad. Prueba. Cambiar los valores superiores o inferiores en los nodos que no cumplen con ninguno de los intercambios no cambia ni L∗ i ni U∗ i, y no altera el beneficio de estos intercambios. Por lo tanto, la condición de RP seguirá fallando. De igual manera, cambiar los límites en los nodos que se satisfacen en ambos intercambios no tiene efecto en la preferencia revelada. Un cambio en un límite inferior en un nodo compartido afecta tanto a L∗ i como a U∗ i de manera idéntica debido al uso de la valoración modificada para determinar U∗ i. Un cambio en un límite superior en un nodo compartido no tiene efecto en la determinación de L∗ i o U∗ i. Ten en cuenta que cuando sat(U∗ i ) = sat(L∗ i ) entonces la condición (26) siempre se satisface trivialmente, por lo que la orientación en el lema siempre está bien definida cuando RP falla. Este es un mecanismo de retroalimentación elegante porque es adaptable. Una vez que un postor realiza algunos cambios en un subconjunto de estos nodos, el postor puede consultar el intercambio. El intercambio puede responder sí, o puede revisar el conjunto de nodos sat(λ∗ l ) y sat(λ∗ u) según sea necesario. 5.5 Condiciones de Terminación Una vez que cada postor haya comprometido sus nuevas ofertas (y haya cumplido con la regla de RP o haya sufrido la penalización), entonces la ronda t se cierra. En este punto, la tarea es determinar la nueva valoración α, y a su vez la asignación provisional λt y los precios provisionales pt. Una condición de terminación también se verifica, para determinar si se debe pasar el intercambio a una ronda final y definitiva. Para definir la α-valoración, calculamos las siguientes dos cantidades: Pesimista en Pesimista (PP). Determinar un intercambio eficiente, λ∗ l, en valores pesimistas, es decir, resolver maxλ   i vi(λi), y establecer PP=  i vi(λ∗ li). Pessimista a Optimista (PO) Determinar un intercambio eficiente, λ∗ u, en valores optimistas, es decir, resolver maxλ   i vi(λi), y establecer PO=  i vi(λ∗ ui). Primero, hay que tener en cuenta que PP ≥ PO y PP ≥ 0 por definición, para todos los árboles de oferta, aunque PO puede ser negativo (porque el intercambio correcto en v no es actualmente un intercambio útil en v). Reconociendo esto, definir γeff (PP, PO) = 1 + PP − PO PP , (27) cuando PP > 0, y observar que γeff (PP, PO) ≥ 1 cuando esto está definido, y que γeff (PP, PO) comenzará siendo grande y luego tenderá hacia 1 a medida que la asignación optimista converge hacia la asignación pesimista. En cada ronda, definimos αeff ∈ [0, 1] como: αeff = 0 cuando PP es 0, 1/γeff en otro caso (28), lo cual es 0 cuando PP es 0 y luego tiende hacia 1 una vez que PP > 0 en alguna ronda. Esto se utiliza para definir la α-valoración vα i = αeff vi + (1 − αeff )vi, ∀i, (29) que se utiliza para definir la asignación provisional y los precios provisionales. El efecto es definir endógenamente un horario para pasar de valores optimistas a pesimistas a lo largo de las rondas, basado en qué tan cercanos estén los intercambios entre sí. Condición de terminación. Al avanzar a la última y definitiva ronda, y finalmente cerrar, también nos preocupamos por la convergencia de pagos, además de la convergencia hacia un comercio eficiente. Para esto introducimos otro parámetro, αthresh ∈ [0, 1], que tiende de 0 a 1 a medida que los pagos de umbral en las valoraciones inferiores y superiores convergen. Considera el siguiente parámetro: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive), (30) el cual está definido para PP > 0, donde pthresh(v) denota los pagos de umbral en el perfil de valoración v, Nactive es el número de postores que están activamente involucrados en el comercio en la transacción de PP, y || · ||2 es la norma L2. Ten en cuenta que γthresh está definido para pagos y no para ganancias. Esto es apropiado porque la precisión del resultado del intercambio es lo que importa: es decir, el comercio y los pagos. Dado esto, definimos αthresh = 0 cuando PP es 0 y 1/γthresh en otro caso (31), lo cual es 0 mientras PP es 0 y luego tiende hacia 1 a medida que se avanza. Definición 5 (terminación). ICE pasa a una ronda final cuando se cumple una de las siguientes condiciones: 1. αeff ≥ CUTOFFeff y αthresh ≥ CUTOFFthresh, 2. no hay intercambio en los valores optimistas, donde CUTOFFeff, CUTOFFthresh ∈ (0, 1] determinan la precisión requerida para la terminación. Al final de la última y definitiva ronda, vα = v se utiliza para definir el intercambio final y los pagos finales del umbral. Ejemplo 9. Considera nuevamente el Ejemplo 1, y considera los límites superiores e inferiores como se muestra en la Figura 1. Primero, si los límites de los vendedores fueron [−20, −4] entonces hay un intercambio optimista pero no hay un intercambio pesimista, y PO = −4 y PP = 0, y αeff = 0. En los límites representados, tanto los intercambios optimistas como pesimistas ocurren y PO = PP = 4 y αeff = 1. Sin embargo, podemos ver que los pagos umbral son (17, −17) en v pero (14, −14) en v. Al evaluar γthresh, tenemos γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, y αthresh = 2/5. Para CUTOFFthresh < 2/5, el intercambio permanecería abierto. Por otro lado, si el valor que los compradores asignan a +AB estaba entre [18, 24] y el valor que los vendedores asignan a -AB estaba entre [-12, -6], los pagos umbral son (15, -15) en ambos límites superior e inferior, y αthresh = 1. 256 Líneas de Propósito de Componente Agente. El modelo 762 de Soporte Captura el comportamiento estratégico y las decisiones de revelación de información. Proporciona soporte XML para cargar bienes y valoraciones en el mundo 200. El mundo 200 realiza un seguimiento de todos los detalles de agentes, bienes y valoraciones. El Controlador y Comunicación de Intercambio 998 controla el intercambio y coordina el comportamiento remoto de los agentes. El Lenguaje de Subasta 1119 implementa el lenguaje de subasta basado en árboles. El Motor de Reglas de Actividad 203 implementa la regla de preferencia revelada con soporte de rango. El Motor de Reglas de Cierre 137 verifica si se ha alcanzado la condición de terminación de la subasta. El Motor WD 377 proporciona lógica relacionada con WD. El Motor de Precios 460 proporciona lógica relacionada con precios. Los Constructores MIP 346 traducen la lógica utilizada por los motores en nuestra formulación general de optimización. Los Constructores de Precios 256 son utilizados por tres etapas de precios. Los Constructores de Determinación de Ganadores 365 son utilizados por WD, regla de actividad, regla de cierre y generación de restricciones de precios. El código de Soporte del Marco 510 facilita la sustitución modular de los componentes anteriores. Tabla 1: Desglose de Componentes y Código de Intercambio. La INFRAESTRUCTURA DE SISTEMAS ICE consta de aproximadamente 6502 líneas de código Java, divididas en los paquetes funcionales descritos en la Tabla 1.10. El prototipo es modular para que los investigadores puedan reemplazar fácilmente los componentes para experimentación. Además del intercambio central discutido en este documento, hemos desarrollado un componente de agente que permite a un usuario simular el comportamiento y conocimiento de otros jugadores en el sistema, lo que le permite al usuario formular su estrategia antes de jugar realmente. Un usuario especifica un modelo de valoración en una interpretación XML de nuestro lenguaje de oferta, que se revela al intercambio a través de la estrategia de los agentes. Las principales tareas de intercambio son manejadas por motores que dictan la lógica no específica del optimizador. Estos motores impulsan los constructores MIP/LP apropiados. Nos dimos cuenta de que todas nuestras formulaciones de optimización se reducen a dos clases de problemas de optimización. El primero, utilizado para la determinación del ganador, la regla de actividad, la regla de cierre y la generación de restricciones en la fijación de precios, es un MIP que encuentra intercambios que maximizan el valor, manteniendo constantes los precios y los márgenes. El segundo, utilizado por las tres etapas de fijación de precios, es un LP que mantiene constantes las operaciones comerciales, buscando minimizar la holgura, el beneficio o los precios. Aprovechamos la similitud de estos problemas utilizando constructores de LP/MIP comunes que difieren solo en unos pocos ganchos funcionales para proporcionar las variables correctas para la optimización. Hemos generalizado nuestra interfaz de optimización del back-end (actualmente soportamos CPLEX y LPSolve con licencia LGPL) y podemos aprovechar la capacidad de equilibrio de carga y resolución paralela de MIP/LP que esta biblioteca proporciona. DISCUSIÓN El lenguaje de oferta se definió para permitir una simetría perfecta entre compradores y vendedores y proporcionar expresividad en un dominio de intercambio, por ejemplo, para oferentes mixtos interesados en ejecutar operaciones como swaps. Esto resultó especialmente desafiante. El avance se produjo cuando nos enfocamos en los cambios de valor para las operaciones en lugar de proporcionar valores absolutos para las asignaciones. Para simplificar, requerimos la misma estructura de árbol tanto para las valoraciones superiores como inferiores. El tamaño del código se mide en líneas de código fuente físicas (SLOC), generadas utilizando el Contador SLOC de David A. Wheeler. El total de 6502 incluye 184 para instrumentación (no se muestra en la tabla). La interfaz del solucionador JOpt es de otras 1964 líneas, y Castor genera automáticamente alrededor de 5200 líneas de código para la manipulación de archivos XML. Esto permite que el propio lenguaje garantice la consistencia (con el valor superior al menos igual al valor inferior en todas las operaciones) y aplique un estrechamiento monótono de estos límites para todas las operaciones en todas las rondas. También proporciona un método eficiente para verificar la regla de actividad de RP, ya que facilita razonar sobre la incertidumbre compartida entre las operaciones. La decisión de adoptar un enfoque directo y delegado en el cual los licitadores expresan sus valores superiores e inferiores a un agente de confianza que interactúa con la bolsa se tomó temprano en el proceso de diseño. En muchos aspectos, esta es la forma más clara y directa de generalizar el diseño en Parkes et al. [24] y hacerlo iterativo. Además, esto elimina muchas oportunidades para la manipulación estratégica: los postores están restringidos a hacer declaraciones (incrementales) sobre sus valoraciones. Otra ventaja es que hace que la regla de la actividad sea fácil de explicar: los postores siempre pueden cumplir con la regla de la actividad ajustando los límites de manera que su valor real permanezca en el soporte. Quizás lo más importante es que tener información explícita sobre los valores superiores e inferiores permite avanzar en las primeras rondas, incluso cuando no hay un intercambio eficiente a valores pesimistas. La información de los límites superior e inferior también proporciona orientación sobre cuándo terminar. Ten en cuenta que tomado por sí mismo, PP = PO no implica que el intercambio provisional actual sea eficiente con respecto a todos los valores consistentes con la información de valor actual. La diferencia en los valores entre diferentes oficios, agregada entre todos los postores, podría ser similar en los límites inferiores y superiores pero bastante diferente en los valores intermedios (incluyendo la verdad). Sin embargo, conjeturamos que PP = PO demostrará ser un indicador excelente de eficiencia en entornos prácticos donde la forma de las valoraciones superiores e inferiores sí transmita información útil. Esto merece una investigación experimental. Además, el uso del precio y la actividad de RP proporciona garantías adicionales. Adoptamos precios lineales (precios en artículos individuales) en lugar de precios no lineales (con precios en un intercambio que no son iguales a la suma de los precios de los artículos componentes) al principio del proceso de diseño. La concisión de esta representación de precios es muy importante para la viabilidad computacional dentro del intercambio y también para promover la simplicidad y transparencia para los postores. La regla de actividad RP fue adoptada más tarde, y es una buena elección debido a sus excelentes propiedades teóricas cuando se combina con los precios de CE. Lo siguiente se puede establecer fácilmente: dados los precios CE exactos pt−1 para el comercio provisional 12. Esto contrasta con enfoques basados en precios indirectos, como el reloj-proxy [1], en los que los postores deben ser capaces de razonar sobre las restricciones RP implicadas por las ofertas en cada ronda. 257 λt−1 en valoraciones vα, entonces si los valores superiores e inferiores al inicio de la ronda t ya satisfacen la regla RP (y sin necesidad de ningún desempate), el comercio provisional es eficiente para todas las valoraciones consistentes con los árboles de ofertas actuales. Cuando existen precios lineales de CE, esto proporciona una declaración de solidez y completitud: si PP = PO, existen precios lineales de CE, y se cumple la regla de RP, el intercambio provisional es eficiente (solidez); si los precios son precios exactos de CE para el intercambio provisional en vα, pero el intercambio es ineficiente con respecto a algún perfil de valoración consistente con los árboles de oferta actuales, entonces al menos un postor debe fallar en RP con su árbol de oferta actual y se avanzará (completitud). El trabajo futuro debe estudiar la convergencia experimentalmente y extender esta teoría para permitir precios aproximados. Algunos aspectos estratégicos de nuestro diseño de ICE merecen comentario y estudio adicional. Primero, no afirmamos que responder sinceramente a la regla de RP sea un equilibrio ex post. Sin embargo, el intercambio está diseñado para imitar la regla de Umbral en su esquema de pago, que se sabe que tiene propiedades de incentivo útiles. Debemos tener cuidado, sin embargo. Por ejemplo, no sugerimos proporcionar αeff a los licitadores, porque a medida que αeff se acerca a 1, informaría a los licitadores que los valores de las ofertas se vuelven irrelevantes para determinar el intercambio, sino que se utilizan simplemente para determinar los pagos (y los licitadores se volverían cada vez más reacios a aumentar sus valoraciones más bajas). Además, en este trabajo no se ha considerado la posibilidad de colusión entre los licitadores. Este es un tema que merece atención en trabajos futuros. 8. CONCLUSIONES En este trabajo diseñamos y prototipamos un <br>intercambio combinatorio iterativo</br> escalable y altamente expresivo. El diseño incluye muchas características interesantes, como: un nuevo lenguaje de árbol de ofertas para intercambios, un nuevo método para construir precios lineales aproximados a partir de lenguajes expresivos, y un método de elicitación con valoraciones optimistas y pesimistas con un nuevo método para evaluar una regla de actividad de preferencia revelada. El intercambio está completamente implementado en Java y se encuentra en una fase de validación. Los próximos pasos para nuestro trabajo son permitir a los licitadores refinar la estructura del árbol de oferta además de los valores en el árbol. Tenemos la intención de estudiar las propiedades de elicitación del intercambio y hemos creado un conjunto de pruebas de instancias de problemas de intercambio. Además, estamos comenzando a participar en colaboraciones para aplicar el diseño a la programación de franjas horarias de despegue y aterrizaje de aerolíneas y a la asignación de recursos en sistemas computacionales distribuidos de amplia área de red. Agradecimientos Nos gustaría dedicar este artículo a todos los participantes de CS 286r en la Universidad de Harvard en la primavera de 2004. Este trabajo está parcialmente respaldado por la subvención de la NSF IIS-0238147. REFERENCIAS [1] L. Ausubel, P. Cramton y P. Milgrom. La subasta de reloj-proxi: Un diseño práctico de subasta combinatoria. En Cramton et al. [9], capítulo 5. [2] M. Babaioff, N. Nisan y E. Pavlov. Mecanismos para un mercado distribuido espacialmente. En Actas de la 5ta Conferencia de la ACM sobre Comercio Electrónico, páginas 9-20. ACM Press, 2001. Dado el teorema de imposibilidad de Myerson-Satterthwaite [22] y el método mediante el cual determinamos el intercambio, no deberíamos esperar esto. [3] M. Ball, G. Donohue y K. Hoffman. Subastas para la asignación segura, eficiente y equitativa de los recursos del sistema de espacio aéreo. En S. Cramton, Shoham, editor, Subastas Combinatorias. 2004. Próximamente. [4] D. Bertsimas y J. Tsitsiklis. Introducción a la Optimización Lineal. Athena Scientific, 1997. [5] S. Bikhchandani y J. M. Ostroy. El modelo de asignación de paquetes. Revista de Teoría Económica, 107(2):377-406, 2002. [6] C. Boutilier. Una formulación POMDP de problemas de obtención de preferencias. En Proc. 18ª Conferencia Nacional de Inteligencia Artificial (AAAI-02), 2002. [7] C. Boutilier y H. Hoos. Subastando idiomas para subastas combinatorias. En Proc. 17ª Conferencia Internacional Conjunta sobre Inteligencia Artificial (IJCAI-01), 2001. [8] W. Conen y T. Sandholm. Elicitación de preferencias en subastas combinatorias. En Proc. 3ra Conf. ACM sobre Comercio Electrónico (EC-01), páginas 256-259. ACM Press, Nueva York, 2001. [9] P. Cramton, Y. Shoham y R. Steinberg, editores. Subastas combinatorias. MIT Press, 2004. [10] S. de Vries, J. Schummer y R. V. Vohra. En subastas ascendentes de Vickrey para objetos heterogéneos. Informe técnico, MEDS, Escuela Kellogg, Universidad Northwestern, 2003. [11] S. de Vries y R. V. Vohra. Subastas combinatorias: Un estudio. Revista Informs sobre Computación, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana y T. Wilson. Probando algoritmos de precios lineales para su uso en subastas combinatorias ascendentes. Informe técnico, SEOR, Universidad George Mason, 2003. [13] Y. Fu, J. Chase, B. Chun, S. Schwab, y A. Vahdat. Sharp: una arquitectura para el emparejamiento seguro de recursos. En Actas del decimonoveno simposio de principios de sistemas operativos de ACM, páginas 133-148. ACM Press, 2003. [14] B. Hudson y T. Sandholm. Efectividad de tipos de consultas y políticas para la obtención de preferencias en subastas combinatorias. En Proc. 3rd Int. Articulación. Conferencia sobre Agentes Autónomos y Sistemas Multiagente, páginas 386-393, 2004. [15] V. Krishna. Teoría de subastas. Academic Press, 2002. [16] D. Krych. \n\nEditorial Académica, 2002. [16] D. Krych. Cálculo y análisis de equilibrios de Nash de reglas de pago basadas en Vickrey para intercambios combinatorios, Harvard College, abril de 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter y C. DeMartini. Un nuevo y mejorado diseño para subastas iterativas de múltiples objetos. Ciencias de la Gestión, 2004. Aparecer. [18] E. Kwerel y J. Williams. Una propuesta para una transición rápida a la asignación de espectro por mercado. Informe técnico, Oficina de Planes y Políticas de la FCC, noviembre de 2002. [19] S. M. Lahaie y D. C. Parkes. Aplicando algoritmos de aprendizaje a la obtención de preferencias. En Proc. ACM Conf. on Electronic Commerce, páginas 180-188, 2004. [20] R. P. McAfee. Una subasta doble con estrategia dominante. Revista de Teoría Económica, 56:434-450, 1992. [21] P. Milgrom. Poniendo en práctica la teoría de subastas: La subasta ascendente simultánea. J.Pol. Econ., 108:245-272, 2000. [22] R. B. Myerson y M. A. Satterthwaite. Mecanismos eficientes para el comercio bilateral. Revista de Teoría Económica, 28:265-281, 1983. [23] N. Nisan. Subasta y asignación en subastas combinatorias. En Proc. 2ª ACM Conf. sobre Comercio Electrónico (EC-00), páginas 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam y M. Eso. Lograr el equilibrio presupuestario con esquemas de pago basados en Vickrey en intercambios. En Proc. 17ª Conferencia Internacional Conjunta de Inteligencia Artificial (IJCAI-01), páginas 1161-1168, 2001. [25] D. C. Parkes y L. H. Ungar. Subastas combinatorias iterativas: Teoría y práctica. En Proc. 17ª Conferencia Nacional de Inteligencia Artificial (AAAI-00), páginas 74-81, julio de 2000. [26] S. J. Rassenti, V. L. Smith y R. L. Bulfin. Un mecanismo combinatorio para la asignación de franjas horarias en aeropuertos. Revista Bell de Economía, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc y R. M. Harstad. Subastas combinatorias computacionalmente manejables. Ciencia de la Gestión, 44(8):1131-1147, 1998. [28] T. Sandholm y C. Boutilier. Elicitación de preferencias en subastas combinatorias. En Cramton et al. [9], capítulo 10. [29] P. R. Wurman y M. P. Wellman. AkBA: Una subasta combinatoria progresiva y de precio anónimo. En la Segunda Conferencia ACM sobre Comercio Electrónico, páginas 21-29, 2000. 258 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "double auction": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "ICE: An Iterative Combinatorial Exchange David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative combinatorial exchange (ICE).",
                "The exchange incorporates a tree-based bidding language that is concise and expressive for CEs.",
                "Bidders specify lower and upper bounds on their value for different trades.",
                "These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
                "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
                "A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "The exchange is fully implemented and in a validation phase.",
                "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
                "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
                "In a <br>double auction</br> (DA), multiple buyers and sellers trade units of an identical good [20].",
                "In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language.",
                "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
                "A combinatorial exchange (CE) [24] is a combinatorial <br>double auction</br> that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling.",
                "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
                "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
                "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
                "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
                "This paper presents the first design for an iterative combinatorial exchange (ICE).",
                "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
                "The ICE design problem is multi-faceted and quite hard.",
                "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round.",
                "The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "The exchange has a number of interesting theoretical properties.",
                "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
                "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
                "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
                "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
                "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "The exchange is implemented in Java and is currently in validation.",
                "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
                "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
                "We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions.",
                "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based bidding language.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable.",
                "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
                "Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
                "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
                "An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade.",
                "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
                "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades.",
                "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
                "A revealed-preference activity rule [1] ensures progress across rounds.",
                "In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices.",
                "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
                "An outline of the ICE system flow of control is provided in Figure 1.",
                "We will return to this example later in the paper.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance).",
                "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round.",
                "At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29].",
                "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
                "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
                "The price generation methods that we use in ICE generalize the methods in these earlier papers.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule.",
                "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
                "We are not aware of any previous studies of iterative CEs.",
                "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
                "No dominant strategy mechanisms are known for the general CE problem.",
                "ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
                "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
                "The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
                "Rothkopf et al. [27] also describe a restricted tree-based bidding language.",
                "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
                "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
                "The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
                "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
                "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
                "A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
                "So, the final allocation is x1 = x0 + λ.",
                "Each bidder has a value vi(λi) ∈ ¡ for a trade λi.",
                "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
                "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ .",
                "Price p can be negative, indicating the bidder receives a payment for the trade.",
                "We use the term payoff interchangeably with utility.",
                "Our goal in the ICE design is to implement the efficient trade.",
                "The efficient trade, λ∗ , maximizes the total increase in value across bidders.",
                "Definition 1 (Efficient trade).",
                "The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
                "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
                "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
                "All three examples have only one seller, but this is purely illustrative.",
                "Example 1.",
                "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
                "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
                "Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
                "Example 2.",
                "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
                "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
                "The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
                "Example 3.",
                "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
                "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades.",
                "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
                "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
                "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
                "We illustrate the language on each of Examples 1-3 in Figure 2.",
                "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
                "The nodes have zero values where no value is indicated.",
                "Internal nodes are also labeled with interval-choose (IC) ranges.",
                "Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
                "First, if a child is on then its parent must be on.",
                "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
                "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade.",
                "For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
                "On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
                "Given a trade there is often a number of ways to choose the set of satisfied nodes.",
                "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
                "Consider bid tree Ti from bidder i.",
                "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
                "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
                "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
                "Every node is also labeled with a value, viβ ∈ ¡ .",
                "Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.)",
                "Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
                "There will often be a choice.",
                "Ties are broken to maximize value.",
                "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
                "Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
                "This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade.",
                "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
                "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
                "The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
                "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
                "Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
                "OR* is known to be expressive and concise.",
                "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
                "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
                "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
                "In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆vcg,i = V ∗ − V−i the VCG discount.",
                "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
                "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome.",
                "Definition 2.",
                "The Threshold payment scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance).",
                "Example 4.",
                "In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
                "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
                "This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes.",
                "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
                "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
                "THE ICE DESIGN We are now ready to introduce the iterative combinatorial exchange (ICE) design.",
                "Several new components are introduced, relative to the design for the one-shot exchange.",
                "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
                "The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations.",
                "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
                "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v).",
                "Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
                "These take the place of the exact value viβ defined in Section 4.1.",
                "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
                "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
                "The following lemma is useful: Lemma 1.",
                "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
                "Proof.",
                "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
                "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
                "But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
                "Given these provisional prices, the price on trade λi for bidder i is pt (λi) =   j≤m pt j · λij.",
                "Definition 3 (CE prices).",
                "Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
                "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
                "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
                "II: Fairness.",
                "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
                "III: Balance.",
                "Third, we break ties to prefer prices that minimize the maximal price across all items.",
                "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
                "In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades.",
                "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
                "Each step is described in detail below.",
                "I: Accuracy.",
                "We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages.",
                "Let λt denote the current provisional trade and suppose the provisional valuation is vα .",
                "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
                "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
                "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.)",
                "Example 5.",
                "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
                "The efficient trade allocates AB to buyer 1 and CD to buyer 3.",
                "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
                "But, (9) has an exponential number of constraints (Eq. 10).",
                "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
                "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
                "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
                "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
                "In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices.",
                "Let ˆλi denote the solution to R-WD(i).",
                "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
                "Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
                "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
                "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
                "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
                "This can be exactly achieved in pricing with pA + pB = 14.",
                "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
                "The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the VCG payoff (at vα ).",
                "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
                "III: Balance.",
                "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items.",
                "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
                "Finally, balance sets p(A) = p(B) = 7.",
                "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
                "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
                "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
                "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
                "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
                "Dunford et al. [12] prefer to smooth prices across rounds.",
                "Comment 1: Lexicographical Refinement.",
                "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
                "For instance, in ACC we successively minimize the maximal error across all bidders.",
                "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
                "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
                "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
                "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL.",
                "Comment 2: Computation.",
                "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
                "Thus, the computational effort in constraint generation is re-used.",
                "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
                "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
                "This avoids later infeasibility issues.",
                "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
                "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
                "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
                "We adopt a simple revealed-preference (RP) activity rule.",
                "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
                "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
                "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
                "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
                "Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices.",
                "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
                "We pin these down and then minimize the error to bidders 3 and 4.",
                "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices.",
                "Consider the following examples: Example 7.",
                "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
                "Example 8.",
                "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
                "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
                "Definition 4.",
                "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
                "First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
                "Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP.",
                "To understand the importance of this tiebreaking rule consider Example 7.",
                "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
                "Notice that +B is a counterexample to +A, but not the other way round.",
                "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i .",
                "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v.",
                "We call trade U∗ i the witness trade.",
                "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
                "Example 8 helps to illustrate this.",
                "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
                "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
                "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
                "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
                "Proposition 1.",
                "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
                "Proof.",
                "For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
                "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes.",
                "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
                "For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i).",
                "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
                "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
                "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
                "Proceed by case analysis.",
                "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
                "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
                "Case b): two or more solutions to RP1(i) have uncertain value.",
                "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
                "This is by RP.",
                "Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
                "Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades.",
                "Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
                "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
                "Failure to meet the activity rule must have some consequence.",
                "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices.",
                "See 7 for an additional discussion.",
                "We also provide guidance to help a bidder meet the RP rule.",
                "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
                "Lemma 2.",
                "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
                "Proof.",
                "Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
                "Thus, the RP condition will continue to fail.",
                "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
                "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
                "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
                "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
                "This is an elegant feedback mechanism because it is adaptive.",
                "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
                "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
                "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
                "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
                "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
                "Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
                "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v).",
                "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
                "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
                "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
                "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
                "Termination Condition.",
                "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade.",
                "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
                "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm.",
                "Note that γthresh is defined for payments and not payoffs.",
                "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments.",
                "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
                "Definition 5 (termination).",
                "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
                "At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments.",
                "Example 9.",
                "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
                "First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0.",
                "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
                "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
                "For CUTOFFthresh < 2/5 the exchange would remain open.",
                "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
                "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the tree-based bidding language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
                "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
                "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
                "A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy.",
                "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
                "These engines drive the appropriate MIP/LP builders.",
                "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
                "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
                "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
                "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
                "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
                "DISCUSSION The bidding language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
                "This proved especially challenging.",
                "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
                "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
                "The total of 6502 includes 184 for instrumentation (not shown in the table).",
                "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
                "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
                "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
                "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
                "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
                "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values.",
                "Upper and lower bound information also provides guidance about when to terminate.",
                "Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information.",
                "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
                "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
                "This is worthy of experimental investigation.",
                "Moreover, the use of price and RP activity provides additional guarantees.",
                "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process.",
                "The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
                "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
                "The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees.",
                "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
                "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
                "Some strategic aspects of our ICE design deserve comment, and further study.",
                "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
                "We must be careful, though.",
                "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
                "Also, no consideration has been given in this work to collusion by bidders.",
                "This is an issue that deserves some attention in future work. 8.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative combinatorial exchange.",
                "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
                "The exchange is fully implemented in Java and is in a validation phase.",
                "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
                "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
                "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
                "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
                "This work is supported in part by NSF grant IIS-0238147. 9.",
                "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
                "The clock-proxy auction: A practical combinatorial auction design.",
                "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
                "Mechanisms for a spatially distributed market.",
                "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
                "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
                "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
                "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
                "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
                "Introduction to Linear Optimization.",
                "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
                "A pomdp formulation of preference elicitation problems.",
                "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
                "Bidding languages for combinatorial auctions.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
                "Preference elicitation in combinatorial auctions.",
                "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
                "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
                "Combinatorial Auctions.",
                "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
                "On ascending Vickrey auctions for heterogeneous objects.",
                "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
                "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
                "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
                "Chase, B. Chun, S. Schwab, and A. Vahdat.",
                "Sharp: an architecture for secure resource peering.",
                "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
                "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In Proc. 3rd Int.",
                "Joint.",
                "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [16] D. Krych.",
                "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
                "A new and improved design for multi-object iterative auctions.",
                "Management Science, 2004.",
                "To appear. [18] E. Kwerel and J. Williams.",
                "A proposal for a rapid transition to market allocation of spectrum.",
                "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proc.",
                "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
                "A dominant strategy <br>double auction</br>.",
                "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
                "Putting auction theory to work: The simultaneous ascending auction.",
                "J.Pol.",
                "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
                "Iterative combinatorial auctions: Theory and practice.",
                "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
                "A combinatorial mechanism for airport time slot allocation.",
                "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
            ],
            "original_annotated_samples": [
                "In a <br>double auction</br> (DA), multiple buyers and sellers trade units of an identical good [20].",
                "A combinatorial exchange (CE) [24] is a combinatorial <br>double auction</br> that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
                "A dominant strategy <br>double auction</br>."
            ],
            "translated_annotated_samples": [
                "En una <br>subasta doble</br> (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20].",
                "Un intercambio combinatorio (CE) [24] es una <br>subasta doble combinatoria</br> que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos.",
                "Una <br>subasta doble</br> con estrategia dominante."
            ],
            "translated_text": "Presentamos el primer diseño para un intercambio combinatorio iterativo (ICE). El intercambio incorpora un lenguaje de oferta basado en árboles que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una <br>subasta doble</br> (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20]. En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un intercambio combinatorio (CE) [24] es una <br>subasta doble combinatoria</br> que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos. Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un intercambio combinatorio iterativo (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda. La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de oferta basado en árboles expresivo y conciso. El lenguaje describe valores para intercambios, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el intercambio sea aceptable. El lenguaje permite a los postores expresar límites superiores e inferiores en el valor, los cuales pueden ser ajustados en cada ronda. • Determinación del ganador. La determinación del ganador (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación. Comparar la solución en los valores superiores e inferiores permite tomar una decisión sobre la terminación, con el progreso en rondas intermedias impulsado por una valoración intermedia y los valores inferiores adoptados al finalizar. • Pagos. Los pagos se calculan utilizando la regla de pago del umbral [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de precios. Se calcula un precio aproximado para cada artículo en el intercambio en cada ronda, en función de las valoraciones intermedias y el intercambio provisional. Los precios se optimizan para aproximar los precios de equilibrio competitivo, y luego se optimizan aún más para aproximar mejor los pagos del umbral actual con los lazos restantes rotos para favorecer los precios equilibrados entre diferentes artículos. Al calcular los precios, adoptamos los métodos de generación de restricciones para explotar la estructura del lenguaje de oferta y evitar enumerar todos los intercambios factibles. El subproblema para generar nuevas restricciones es una variación del problema WD. • Regla de actividad. Una regla de actividad de preferencia revelada [1] garantiza progreso a lo largo de las rondas. Para permanecer activo, un oferente debe ajustar los límites para que haya suficiente información para definir un intercambio que maximice el excedente a los precios actuales. Otra variación del problema de WD se formula, tanto para verificar que se cumple la regla de actividad como para proporcionar retroalimentación a un postor para explicar cómo cumplir la regla. Se proporciona un esquema del flujo de control del sistema ICE en la Figura 1. Volveremos a este ejemplo más adelante en el documento. Por ahora, simplemente observa en este ejemplo de dos agentes que los agentes establecen límites inferiores y superiores que son verificados en la regla de actividad, y luego pasados a la determinación del ganador (WD), y luego a través de tres etapas de fijación de precios (precisión, equidad, equilibrio). Al pasar la regla de cierre (en la que se verifican los parámetros αeff y αthresh para la convergencia del comercio y los pagos), el intercambio pasa a una última y definitiva ronda. Al final de esta ronda, el intercambio y los pagos finalmente se determinan, basados en las valoraciones más bajas. 2.1 Trabajo Relacionado En la literatura se conocen muchos CAs de un solo lado con precios ascendentes [10, 25, 29]. También se han propuesto enfoques de elicitación directa para los AC unilaterales en los que los agentes responden a preguntas explícitas sobre sus valoraciones [8, 14, 19]. Un número de CAs ascendentes están diseñados para trabajar con precios simples en artículos [12, 17]. Los métodos de generación de precios que utilizamos en ICE generalizan los métodos de estos artículos anteriores. Parkes et al. [24] estudiaron intercambios combinatorios de oferta sellada e introdujeron la regla de pago umbral. Posteriormente, Krych [16] demostró experimentalmente que la regla del Umbral promueve asignaciones eficientes. No tenemos conocimiento de ningún estudio previo sobre CEs iterativos. Las estrategias dominantes DAs son conocidas por la demanda unitaria [20] y también por agentes de mente única [2]. No se conocen mecanismos de estrategia dominante para el problema general de la CE. ICE es un diseño de subasta híbrido, ya que combina precios simples de artículos para impulsar las ofertas en las primeras rondas con WD combinatorio y pagos, una característica que comparte con el diseño de reloj-proxy de Ausubel et al. [1] para subastas unilaterales. Adoptamos una variación de la regla de actividad de preferencia revelada en las subastas de proxy de reloj. El lenguaje de subasta comparte algunos elementos estructurales con el lenguaje LGB de Boutilier y Hoos [7], pero tiene semántica muy diferente. Rothkopf et al. [27] también describen un lenguaje de oferta basado en árboles restringido. En LGB, la semántica es la de la lógica proposicional, con los mismos elementos en una asignación capaces de satisfacer un árbol en múltiples lugares. Aunque esto puede hacer que LGB sea especialmente conciso en algunos contextos, la semántica que proponemos parece proporcionar una utilidad local, de modo que el valor de un componente en un árbol pueda ser comprendido de forma independiente al resto del árbol. La idea de capturar la estructura de nuestro lenguaje de oferta de manera explícita dentro de una formulación de programación entera mixta sigue los desarrollos en Boutilier [6]. 3. PRELIMINARES En nuestro modelo, consideramos un conjunto de bienes, indexados {1, . . . , m} y un conjunto de postores, indexados {1, . . . , n}. La asignación inicial de bienes se denota como x0 = (x0 1, . . . , x0 n), donde x0 i = (x0 i1, . . . , x0 im) y x0 ij ≥ 0 para el bien j indicando el número de unidades del bien j que posee el postor i. Un intercambio λ = (λ1, . . . , λn) denota el cambio en la asignación, con λi = (λi1, . . . , λim) donde λij ∈ es el cambio en el número de unidades del ítem j para el postor i. Entonces, la asignación final es x1 = x0 + λ. Cada postor tiene un valor vi(λi) ∈ ¡ para una transacción λi. Este valor puede ser positivo o negativo, y representa el cambio en el valor entre la asignación final x0 i +λi y la asignación inicial x0 i. La utilidad es cuasi-lineal, con ui(λi, p) = vi(λi)−p para el intercambio λi y el pago p ∈ ¡. El precio p puede ser negativo, lo que indica que el postor recibe un pago por la transacción. Utilizamos el término \"pago\" de manera intercambiable con \"utilidad\". Nuestro objetivo en el diseño de ICE es implementar el comercio eficiente. El intercambio eficiente, λ∗, maximiza el aumento total de valor entre los postores. Definición 1 (Comercio eficiente). El intercambio eficiente λ∗ resuelve max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Las restricciones (1) aseguran que ningún agente venda más artículos de los que tiene en su asignación inicial. Las restricciones (2) permiten la disposición gratuita y permiten que los intercambios factibles vendan más artículos de los que se compran (pero no al revés). Posteriormente, adoptamos Feas(x0) para denotar el conjunto de intercambios factibles, dados estos límites y una asignación inicial x0 = (x0 1, . . . , x0 n). 3.1 Ejemplos Prácticos En esta sección, proporcionamos tres ejemplos simples de instancias que utilizaremos para ilustrar varios componentes del intercambio. Todos los tres ejemplos tienen solo un vendedor, pero esto es puramente ilustrativo. Ejemplo 1. Un vendedor y un comprador, dos bienes {A, B}, con el vendedor teniendo una asignación inicial de AB. Cambios en los valores de los intercambios: vendedor comprador Y (−A, −B) Y (+A, +B) -10 +20 El Y indica que tanto el comprador como el vendedor solo están interesados en intercambiar ambos bienes como un paquete. Aquí, el intercambio eficiente (que maximiza el valor) es para el vendedor vender AB al comprador, denotado como λ∗ = ([−1, −1], [+1, +1]). Ejemplo 2. Un vendedor y cuatro compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de las transacciones: vendedor comprador1 comprador 2 comprador 3 comprador 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 El OR indica que el vendedor está dispuesto a vender cualquier cantidad de bienes. El XOR indica que los compradores 2 y 4 están dispuestos a comprar como máximo uno de los dos bienes en los que están interesados. El comercio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD al comprador 3, denotado λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR Ejemplo 1: Ejemplo 3: 2,2 +C +D COMPRADOR 2 2,2 +A +B COMPRADOR 1 +11 +84,4 -B VENDEDOR -A -C -D Ejemplo 2: 1,1 +A +B COMPRADOR 2 2,2 +A +B COMPRADOR 1 +6 +40,4 -B VENDEDOR -C -D-A 1,1 +C +D COMPRADOR 4 2,2 +C +D +3 +2 COMPRADOR 3 -18 Figura 2: Ejemplo de Árboles de Ofertas. Ejemplo 3. Un vendedor y dos compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de los intercambios: vendedor comprador1 comprador 2 Y (−A, −B, −C, −D) Y (+A, +B) Y (+C, +D) -18 +11 +8 El intercambio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD vaya al comprador 2, denotado por λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4. Un DISEÑO DE INTERCAMBIO DE UNA SOLA VEZ La descripción de ICE se divide en dos secciones: una sola vez (oferta sellada) e iterativa. En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a compradores y vendedores, y para extenderse y capturar ofertas de compradores y vendedores mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas. Las ofertas se expresan como árboles de ofertas anotados, y definen el valor de un oferente para todos los intercambios posibles. El lenguaje define cambios en los valores de las transacciones, con hojas anotadas con los artículos intercambiados y nodos anotados con cambios en los valores (ya sea positivos o negativos). La característica principal es que tiene un operador lógico de intervalo general en los nodos internos, y que define una semántica cuidadosa para propagar valores dentro del árbol. Ilustramos el lenguaje en cada uno de los Ejemplos 1-3 en la Figura 2. El lenguaje tiene una estructura de árbol, con operaciones en elementos definidos en las hojas y valores anotados en nodos y hojas. Los nodos tienen valores de cero donde no se indica ningún valor. Los nodos internos también están etiquetados con rangos de intervalo-escoge (IC). Dada una transacción, la semántica del lenguaje define qué nodos en el árbol pueden ser satisfechos o activados. Primero, si un niño está encendido, entonces su padre también debe estar encendido. Segundo, si un nodo padre está encendido, entonces el número de hijos que están encendidos debe estar dentro del rango de IC en el nodo padre. Finalmente, las hojas en las que el postor está comprando artículos solo pueden estar activas si los artículos se proporcionan en el intercambio. Por ejemplo, en el Ejemplo 2 podemos considerar el comercio eficiente, y observar que en este comercio todos los nodos en los árboles de los compradores 1 y 3 (y también el vendedor), pero ninguno de los nodos en los árboles de los compradores 2 y 4, pueden estar encendidos. Por otro lado, en 251 el intercambio en el que A va al comprador 2 y D al comprador 4, entonces los nodos raíz y hojas apropiados pueden estar encendidos para los compradores 2 y 4, pero ningún nodo puede estar encendido para los compradores 1 y 3. Dado un intercambio, a menudo hay varias formas de elegir el conjunto de nodos satisfechos. La semántica del lenguaje requiere que se activen los nodos que maximicen el valor sumado entre los nodos satisfechos. Considera el árbol de oferta Ti del ofertante i. Esto define nodos β ∈ Ti, de los cuales algunos son hojas, Leaf (i) ⊆ Ti. Deje que Child(β) ⊆ Ti denote los hijos de un nodo β (que no es en sí mismo una hoja). Todos los nodos excepto las hojas están etiquetados con el operador de intervalo-escoger [IC x i (β), ICy i (β)]. Cada nodo también está etiquetado con un valor, viβ ∈ ¡. Cada hoja β está etiquetada con un intercambio, qiβ ∈ m (es decir, las hojas pueden definir un intercambio agrupado en más de un tipo de artículo). Dado un intercambio λi al postor i, los operadores de elección de intervalos y los intercambios en las hojas definen qué nodos pueden ser satisfechos. A menudo habrá una elección. Las corbatas se rompen para maximizar el valor. Que satiβ ∈ {0, 1} denote si el nodo β está satisfecho. La solución sati es válida dado el árbol Ti y el intercambio λi, escrita sati ∈ válido(Ti, λi), si y solo si: ¢ β∈Hoja (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Hijo(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Hoja (i) (5) En otras palabras, un conjunto de hojas solo puede considerarse satisfecho dado el intercambio λi si el aumento total en cantidad sumado en todas esas hojas está cubierto por el intercambio, para todos los bienes (Eq. 4). Esto funciona tanto para vendedores como para compradores: para los vendedores, un intercambio es negativo y esto requiere que el número total de artículos indicados como vendidos en el árbol sea al menos igual al número total vendido según lo definido en el intercambio. También necesitamos la propagación ascendente: cada vez que un nodo que no sea la raíz esté satisfecho, su padre también debe estar satisfecho (por β ∈Child(β) satiβ ≤ ICy i (β)satiβ en la Ecuación 5). Finalmente, necesitamos la propagación hacia abajo: cada vez que un nodo interno se satisface, entonces el número apropiado de hijos también debe estar satisfecho (Ec. 5). El valor total del comercio λi, dado el árbol de ofertas Ti, se define como: vi(Ti, λi) = máximo sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) El lenguaje basado en árboles generaliza los lenguajes existentes. Por ejemplo: IC(2, 2) en un nodo con 2 hijos es equivalente a un operador AND; IC(1, 3) en un nodo con 3 hijos es equivalente a un operador OR; e IC(1, 1) en un nodo con 2 hijos es equivalente a un operador XOR. De manera similar, los lenguajes de oferta XOR/OR pueden ser expresados directamente como un árbol de oferta en nuestro lenguaje. La determinación del ganador Este apartado define el problema de determinación del ganador, el cual está formulado como un MIP y resuelto en nuestra implementación con un solucionador comercial. El solucionador utiliza búsqueda de ramificación y acotamiento con generación de cortes dinámicos y heurísticas de ramificación para resolver MIPs grandes en tiempos de ejecución económicamente factibles. El lenguaje OR* es el lenguaje OR con elementos ficticios para proporcionar estructura adicional. OR* se sabe que es expresivo y conciso. Sin embargo, no se sabe si OR* domina a XOR/OR en cuanto a concisión [23]. En la definición de la representación MIP, tenemos cuidado de evitar una enumeración basada en XOR de todos los paquetes. Una variación del problema de WD se reutiliza muchas veces dentro del intercambio, por ejemplo, para la generación de columnas en la fijación de precios y para verificar la preferencia revelada. Dado el conjunto de árboles de ofertas T = (T1, . . . , Tn) y la asignación inicial x0, la formulación mixta entera para WD es: WD(T, x0): max λ, sat ¢ i ¢ β ∈ Ti viβ · satiβ sujeto a (1), (2), satiβ ∈ {0, 1}, λij ∈ sati ∈ válido(Ti, λi), ∀i. Algunos bienes pueden quedar sin asignar porque se permite la disposición libre dentro de las reglas de liquidación de la determinación del ganador. Estos artículos pueden ser asignados de nuevo a los agentes que vendieron los artículos, es decir, para los cuales λij < 0. 4.3 Cálculo de Pagos Umbral La regla de pago umbral se basa en los pagos en el mecanismo de Vickrey-Clarke-Groves (VCG) [15], que en sí mismo es veraz y eficiente pero no satisface el equilibrio presupuestario. El equilibrio presupuestario requiere que los pagos totales al intercambio sean iguales a los pagos totales realizados por el intercambio. En VCG, el pago pagado por el agente i es pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) donde λ∗ es el intercambio eficiente, V ∗ es el valor reportado de este intercambio, y V−i es el valor reportado del intercambio eficiente que se implementaría sin el postor i. Llamamos a ∆vcg,i = V ∗ − V−i el descuento VCG. Por ejemplo, en el Ejemplo 1 pvcg,vendedor = −10 − (+10 − 0) = −20 y pvcg,comprador = +20 − (+10 − 0) = 10, y el intercambio se llevaría a cabo con un déficit presupuestario de −20 + 10 = −10. La regla de pago del umbral [24] determina pagos equilibrados presupuestarios para minimizar el error máximo entre todos los agentes respecto al resultado VCG. Definición 2. El esquema de pago de umbral implementa el intercambio eficiente λ∗ dado los ofertas, y establece los pagos pthresh,i = ˆvi(λ∗ i ) − ∆i, donde ∆ = (∆1, . . . , ∆n) se establece para minimizar maxi(∆vcg,i − ∆i) sujeto a ∆i ≤ ∆vcg,i e   i ∆i ≤ V ∗ (esto garantiza el equilibrio presupuestario). Ejemplo 4. En el Ejemplo 2, los descuentos de VCG son (9, 2, 0, 1, 0) para el vendedor y cuatro compradores respectivamente, los pagos de VCG son (−9, 4, 0, 2, 0) y el intercambio se realiza con un déficit de -3. En Threshold, los descuentos son (8, 1, 0, 0, 0) y los pagos son (−8, 5, 0, 3, 0). Esto minimiza el error en el peor de los casos para los descuentos VCG en todos los esquemas de pago equilibrados en presupuesto. Los pagos de umbral están diseñados para minimizar el incentivo máximo ex post para manipular. Krych [16] confirmó que Threshold promueve la eficiencia asignativa en el equilibrio de Bayes-Nash restringido y aproximado. 5. El diseño ICE Estamos listos para presentar el diseño de intercambio combinatorio iterativo (ICE). Se introducen varios componentes nuevos, en relación con el diseño para el intercambio único. En lugar de proporcionar valoraciones precisas, los postores pueden proporcionar valoraciones inferiores y superiores y revisar esta información de oferta en cada ronda. El intercambio proporciona retroalimentación basada en precios 252 para guiar a los postores en este proceso, y finaliza con un intercambio eficiente (o aproximadamente eficiente) con respecto a las valoraciones reportadas. En cada ronda t ∈ {0, 1, . . .} se utilizan los límites inferiores y superiores actuales, vt y vt, para definir un perfil de valoración provisional vα (la α-valoración), junto con un intercambio provisional λt y precios provisionales pt = (pt 1, . . . , pt m) en los artículos. La α-valoración es una combinación lineal de las valoraciones superiores e inferiores actuales, con αEFF ∈ [0, 1] elegido endógenamente en función de la cercanía del intercambio optimista (en v) y el intercambio pesimista (en v). Los precios pt se utilizan para informar una regla de actividad y avanzar hacia un comercio eficiente. 5.1 Valoraciones superiores e inferiores El lenguaje de la oferta se amplía para permitir que un oferente i informe un valor inferior y superior (viβ, viβ) en cada nodo. Estos ocupan el lugar del valor exacto viβ definido en la Sección 4.1. Basándonos en estas etiquetas, podemos definir las funciones de valoración vi(Ti, λi) y vi(Ti, λi), utilizando exactamente la misma semántica que en la Ecuación (6). Decimos que un árbol de ofertas está bien formado si viβ ≤ viβ para todos los nodos. El siguiente lema es útil: Lema 1. Dado un árbol bien formado, T, entonces vi(Ti, λi) ≤ vi(Ti, λi) para todos los intercambios. Prueba. Supongamos que existe algún λi para el cual vi(Ti, λi) > vi(Ti, λi). Entonces, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ. Sin embargo, esto es una contradicción porque el intercambio λ que define vi(Ti, λi) sigue siendo factible con límites superiores vi, y viβ ≥ viβ para todos los nodos β en un árbol bien formado. 5.2 Retroalimentación de precios En cada ronda, se determinan los precios de equilibrio competitivo aproximados (CE), pt = (pt 1, . . . , pt m). Dado estos precios provisionales, el precio en el intercambio λi para el postor i es pt (λi) = j≤m pt j · λij. Definición 3 (precios de la CE). Los precios p∗ son precios de equilibrio competitivo si el intercambio eficiente λ∗ está respaldado a precios p∗, de modo que para cada postor: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) Los precios de CE no siempre existirán y a menudo necesitaremos calcular precios aproximados [5]. Extendemos las ideas de Rassenti et al. [26], Kwasnica et al. [17] y Dunford et al. [12], y seleccionamos precios aproximados de la siguiente manera: I: Precisión. Primero, calculamos los precios que minimizan el error máximo en las restricciones de mejor respuesta de todos los postores. II: Equidad. Segundo, rompemos los empates para preferir precios que minimicen la desviación máxima de los pagos umbral entre todos los postores. III: Equilibrio. En tercer lugar, rompemos los empates para preferir precios que minimicen el precio máximo entre todos los artículos. En conjunto, estos pasos están diseñados para promover la informatividad de los precios en impulsar el progreso a lo largo de las rondas. Al calcular los precios, explicamos cómo calcular precios aproximados (o de otra manera) para lenguajes de oferta estructurados, sin enumerar todos los intercambios posibles. Para esto, adoptamos la generación de restricciones para manejar de manera eficiente un número exponencial de restricciones. Cada paso se describe detalladamente a continuación. Yo: Precisión. Adoptamos una definición de precisión de precio que generaliza las nociones adoptadas en trabajos anteriores para lenguajes de oferta no estructurados. Que λt denote el comercio provisional actual y suponga que la valoración provisional es vα. Para calcular precios de CE precisos, consideramos: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j. Este programa lineal (LP) está diseñado para encontrar precios que minimicen el error en el peor de los casos entre todos los agentes. De la definición de los precios de equilibrio competitivo (CE), se sigue que los precios de equilibrio competitivo tendrían δ = 0 como solución a (9), momento en el cual el intercambio λt i estaría en el conjunto de mejor respuesta de cada agente (con λt i = ∅, es decir, sin intercambio, para todos los agentes sin excedente para el intercambio a los precios). Ejemplo 5. Podemos ilustrar la formulación (9) en el Ejemplo 2, asumiendo para simplificar que vα = v (es decir, verdad). El comercio eficiente asigna AB al comprador 1 y CD al comprador 3. La precisión buscará los precios p(A), p(B), p(C) y p(D) para minimizar el δ ≥ 0 requerido para satisfacer las restricciones: p(A) + p(B) + p(C) + p(D) ≥ 0 (vendedor) p(A) + p(B) ≤ 6 + δ (comprador 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (comprador 2) p(C) + p(D) ≤ 3 (comprador 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (comprador 4) Una solución óptima requiere que p(A) = p(B) = 10/3, con δ = 2/3, y que p(C) y p(D) tomen valores como p(C) = p(D) = 3/2. Pero, (9) tiene un número exponencial de restricciones (Ec. 10). En lugar de resolverlo explícitamente, utilizamos la generación de restricciones [4] y generamos dinámicamente un subconjunto suficiente de restricciones. Que \\(i\\) denote un subconjunto manejable de todos los intercambios factibles posibles para el oferente \\(i\\). Entonces, una versión relajada de (9) (escrita ACC) se formula sustituyendo (10) con vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) donde   i es un conjunto de intercambios que son factibles para el postor i dado las otras ofertas. Fijando los precios p∗, luego resolvemos n subproblemas (uno para cada postor), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0), (12) para verificar si la solución (p∗, δ∗) a ACC es factible en el problema (9). En R-WD(i) el objetivo es determinar un intercambio más preferido para cada postor a estos precios. Que ˆλi denote la solución a R-WD(i). Verificar la condición: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) y si esta condición se cumple para todos los postores i, entonces la solución (p∗ , δ∗ ) es óptima para el problema (9). De lo contrario, se agrega el intercambio ˆλi a i para todos los postores i para los cuales esta restricción se viola en 253 y volvemos a resolver el LP con el nuevo conjunto de restricciones. II: Equidad. Segundo, rompemos los empates restantes para preferir precios justos: eligiendo precios que minimicen el error en el peor de los casos con respecto a los pagos umbral (es decir, la utilidad para los postores con pagos umbral), pero sin elegir precios que sean menos precisos. Ejemplo 6. Por ejemplo, la precisión en el Ejemplo 1 (representado en la Figura 1) requiere que 12 ≤ pA + pB ≤ 16 (para vα = v). En estas valoraciones, los pagos umbral serían de 2 para tanto el vendedor como el comprador. Esto se puede lograr exactamente en la fijación de precios con pA + pB = 14. El método de desempate de equidad se formula como el siguiente LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima, de ACC. El objetivo aquí es el mismo que en la regla de pago del umbral (ver Sección 4.3): minimizar el error máximo entre el pago del postor (en vα) para el intercambio provisional y el pago VCG (en vα). El problema FAIR también se resuelve mediante la generación de restricciones, utilizando R-WD(i) para agregar restricciones adicionales violadas según sea necesario. III: Equilibrio. En tercer lugar, rompemos los empates restantes para preferir precios equilibrados: eligiendo precios que minimicen el precio máximo entre todos los artículos. Volviendo de nuevo al Ejemplo 1, representado en la Figura 1, vemos que la precisión y la equidad requieren que p(A) + p(B) = 14. Finalmente, el conjunto de equilibrio establece que p(A) = p(B) = 7. El equilibrio está justificado cuando, manteniendo todo lo demás igual, los elementos son más propensos a tener valores similares que diferentes. El LP para el equilibrio se formula de la siguiente manera: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima de ACC y π∗ representa el error en la solución óptima de FAIR. La generación de restricciones también se utiliza para resolver BAL, generando nuevos intercambios para i según sea necesario. El problema R-WD(i) es una especialización del problema WD, en el que el objetivo es maximizar el pago de un único postor, en lugar del valor total entre todos los postores. Se resuelve como un MIP, al reescribir el objetivo en WD(T, x0) como max{viβ · satiβ − j p∗ j · λij} para el agente i. Por lo tanto, la estructura del lenguaje del árbol de ofertas se explota para generar nuevas restricciones, ya que esto se resuelve como un MIP conciso. Los otros postores se mantienen en el MIP (pero no aparecen en el objetivo) y se utilizan para definir el espacio de intercambios factibles. Los métodos de Dunford et al. [12], que utilizan un enfoque de núcleo, también están estrechamente relacionados. El uso del equilibrio fue defendido por Kwasnica et al. [17]. Dunford et al. [12] prefieren suavizar los precios a lo largo de las rondas. Comentario 1: Refinamiento lexicográfico. Para los tres subproblemas también realizamos un refinamiento lexicográfico (con respecto a los postores en ACC y FAIR, y con respecto a los bienes en BAL). Por ejemplo, en ACC minimizamos sucesivamente el error máximo entre todos los postores. Dada una solución inicial, primero identificamos el error en todos los postores para quienes una restricción (11) está vinculante. Para dicho postor i, la restricción se reemplaza por vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) y el error para el postor i ya no aparece explícitamente en el objetivo. ACC se vuelve a resolver y avanza al minimizar aún más el error máximo entre todos los postores que aún no han sido identificados. Esto continúa, fijando a cualquier nuevo postor para quien una de las restricciones (11) sea vinculante, hasta que el error esté optimizado lexicográficamente para todos los postores. El mismo proceso exacto se repite para FAIR y BAL, con los postores fijados y las restricciones (15) reemplazadas por π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (donde π∗ i es el objetivo actual) en FAIR, y los artículos fijados y las restricciones (18) reemplazadas por p∗ j ≥ pj (donde p∗ j representa el objetivo para el precio máximo en ese artículo) en BAL. Comentario 2: Computación. Todos los límites en i se mantienen, y este conjunto crece en todas las etapas y en todas las rondas del intercambio. Por lo tanto, el esfuerzo computacional en la generación de restricciones se reutiliza. En la implementación, nos aseguramos de abordar una serie de problemas que surgen debido a problemas de punto flotante. Preferimos pecar de conservadores al determinar si agregar o no otra restricción al realizar la verificación (13). Esto evita problemas de inviabilidad posteriores. Además, al fijar a los postores con el fin de refinar lexicográficamente, relajamos las restricciones asociadas con un pequeño > 0 en el lado derecho. 5.3 Reglas de Actividad de Preferencia Revelada El papel de las reglas de actividad en la subasta es garantizar tanto la consistencia como el progreso en las rondas [21]. La consistencia en nuestro intercambio requiere que los oferentes ajusten los límites a medida que avanza el intercambio. Las reglas de la actividad garantizan que los postores estén activos durante las primeras rondas y promueven una elicitación útil a lo largo del intercambio. Adoptamos una regla de actividad de preferencia revelada (RP) simple. La idea se basa vagamente en la regla de RP en Ausubel et al. [1], donde se utiliza para los AC unilaterales. La motivación es requerir más que simplemente consistencia: necesitamos que los oferentes proporcionen suficiente información para que el sistema pueda demostrar que una asignación es (aproximadamente) eficiente. Es útil pensar en los postores interactuando con agentes de proxy que actuarán en su nombre al responder a los precios provisionales pt−1 determinados al final de la ronda t − 1. El único conocimiento que tiene un intermediario sobre la valoración de un postor es a través del árbol de ofertas. Supongamos que un intermediario fue consultado por la bolsa y se le preguntó en qué operación estaba más interesado el oferente a los precios provisionales. La regla de RP dice lo siguiente: el proxy debe tener suficiente 7. Por ejemplo, aplicando esto a la precisión en el Ejemplo 2, resolvemos una vez y encontramos que los postores 1 y 2 son vinculantes, con un error δ∗ = 2/3. Fijamos estos y luego minimizamos el error para los postores 3 y 4. Finalmente, esto da p(A) = p(B) = 10/3 y p(C) = p(D) = 5/3, con precisión de 2/3 para los postores 1 y 2 y 1/3 para los postores 3 y 4. Se necesitan 254 información para poder determinar este intercambio que maximiza el excedente al precio actual. Considera los siguientes ejemplos: Ejemplo 7. Un postor tiene XOR(+A, +B) y un valor de +5 en la hoja +A y un rango de valores de [5,10] en la hoja +B. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el representante sabe que, sin importar cómo se resuelva la incertidumbre restante del valor en +B, el postor siempre preferirá (débilmente) +B a +A. Ejemplo 8. Un postor tiene XOR(+A, +B) y límites de valor [5, 10] en el nodo raíz y un valor de 1 en la hoja +A. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el postor siempre preferirá +A a +B a precios iguales, sin importar cómo se resuelva finalmente el valor incierto en el nodo raíz. Sobrecargando la notación, sea vi ∈ Ti una valoración que sea consistente con las valoraciones inferiores y superiores en el árbol de oferta Ti. Definición 4. El árbol de oferta Ti satisface RP a precios pt−1 si y solo si existe algún intercambio factible L∗ para el cual, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. Para determinar esto para el postor i, resolvemos una secuencia de problemas, cada uno de los cuales es una variación del problema WD. Primero, construimos un intercambio candidato de límite inferior, que es un intercambio factible que resuelve: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) La solución π∗ l a RP1(i) representa el pago máximo que el postor i puede lograr en todos los intercambios factibles, dado su valoración pesimista. Segundo, rompemos los lazos para encontrar un intercambio con la máxima incertidumbre del valor en todas las posibles soluciones a RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] sujeto a λ ∈ Feas(x0) (22) vi(λi) − pt−1(λi) ≥ π∗ l (23) Adoptamos la solución L∗ i como nuestro candidato para el intercambio que puede satisfacer RP. Para entender la importancia de esta regla de desempate, considera el Ejemplo 7. El proxy puede demostrar que +B pero no +A es una mejor respuesta para todos los vi ∈ Ti, y debería elegir +B como su candidato. Observa que +B es un contraejemplo para +A, pero no al revés. Ahora, construimos una valuación modificada ˜vi, estableciendo ˜viβ = viβ, si β ∈ sat(L∗ i) viβ, de lo contrario. (24) donde sat(L∗ i) es el conjunto de nodos que están satisfechos en el árbol de límite inferior para el comercio L∗ i. Dada esta valuación modificada, encontramos U∗ para resolver: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Sea π∗ u el beneficio de este intercambio óptimo en los valores modificados ˜v. Llamamos al intercambio U∗ i el intercambio testigo. Mostramos en la Proposición 1 que la regla RP se cumple si y solo si π∗ l ≥ π∗ u. La construcción de la valoración modificada como ˜vi reconoce que existe incertidumbre compartida en las operaciones que cumplen los mismos nodos en un árbol de ofertas. El ejemplo 8 ayuda a ilustrar esto. Simplemente usando vi en RP3(i), encontraríamos que L∗ i es comprar A con un pago de π∗ l = 3 pero luego encontraríamos que U∗ i es comprar B con π∗ u = 7 y fallar en RP. Debemos reconocer que, sin importar cómo se resuelva la incertidumbre en el nodo raíz, afectará a +A y +B de la misma manera. Por esta razón, establecimos ˜viβ = viβ = 5 en el nodo raíz, que es exactamente el mismo valor que se adoptó al determinar π∗ l. Entonces, RP3(i) aplicado a U∗ i da como resultado comprar A y se considera que el test de RP ha sido aprobado. Proposición 1. El árbol de oferta Ti satisface RP dado los precios pt−1 si y solo si cualquier intercambio de límite inferior L∗ i que resuelve RP1(i) y RP2(i) satisface: vi(Ti, L∗ i) − pt−1 (L∗ i) ≥ ˜vi(Ti, U∗ i) − pt−1 (U∗ i), (26) donde ˜vi es la valoración modificada en la ecuación (24). Prueba. Para la suficiencia, observe que la diferencia en el pago entre el intercambio L∗ i y otro intercambio λi no se ve afectada por la forma en que se resuelve la incertidumbre en cualquier nodo que esté satisfecho tanto en L∗ i como en λi. Corregir los valores en ˜vi en los nodos satisfechos en L∗ i tiene el efecto de eliminar esta consideración cuando se selecciona un intercambio U∗ i que satisface uno de estos nodos. Por otro lado, fijar los valores en estos nodos no tiene efecto en las operaciones consideradas en RP3(i) que no comparten un nodo con L∗ i. Para la dirección necesaria, primero mostramos que cualquier intercambio que satisfaga RP debe resolver RP1(i). Supongamos lo contrario, que algún λi con un pago mayor que π∗ l cumple con RP. Sin embargo, la valoración vi ∈ Ti junto con L∗ i presenta un contraejemplo a RP (Eq. 20). Ahora, supongamos (por contradicción) que algún λi con ganancia máxima π∗ l pero incertidumbre menor que L∗ i cumple con RP. Procede mediante el análisis de casos. Caso a): solo una solución a RP1(i) tiene un valor incierto y, por lo tanto, λi tiene un valor seguro. Pero, esto no puede satisfacer a RP porque L∗ i con un valor incierto sería un contraejemplo para RP (Eq. 20). Caso b): dos o más soluciones a RP1(i) tienen un valor incierto. Aquí argumentamos primero que uno de estos intercambios debe satisfacer un (débil) superconjunto de todos los nodos con valor incierto que son satisfechos por todos los demás intercambios en este conjunto. Esto es por RP. Sin esto, entonces para cualquier elección de comercio que resuelva RP1(i), hay otro comercio con un conjunto disjunto de nodos inciertos pero satisfechos que proporciona un contraejemplo a RP (Ec. 20). Ahora, considera el caso en el que algún intercambio contiene un superconjunto de todos los nodos inciertos satisfechos de los otros intercambios. Claramente RP2(i) elegirá este intercambio, L∗ i, y λi debe satisfacer un subconjunto de estos nodos (por suposición). Pero ahora vemos que λi no puede cumplir con RP porque L∗ i sería un contraejemplo para RP. El incumplimiento de la regla de actividad debe tener alguna consecuencia. En las reglas actuales, la acción predeterminada que elegimos es establecer los límites superiores en las valoraciones hasta el valor máximo del precio provisional en un nodo8 y el valor del límite inferior en ese nodo.9 Tal postor puede permanecer activo 8 El precio provisional en un nodo se define como el precio total mínimo entre todos los intercambios factibles para los cuales el subárbol enraizado en el árbol está satisfecho. 9 Esto es completamente análogo a cuando un postor en una subasta de reloj ascendente deja de ofertar a un precio: no se le permite ofertar a un precio más alto nuevamente en rondas futuras. 255 dentro del intercambio, pero solo con valoraciones que sean consistentes con estos nuevos límites. 5.4 Retroalimentación del postor En cada ronda, nuestro diseño predeterminado proporciona a cada postor el intercambio provisional y también los precios provisionales actuales. Ver el 7 para una discusión adicional. También brindamos orientación para ayudar a un licitador a cumplir con la regla de RP. Que sat(L∗ i ) y sat(U∗ i ) denoten los nodos que se satisfacen en los intercambios L∗ i y U∗ i, tal como se calcula en RP1-RP3. Lema 2. Cuando RP falla, un postor debe aumentar un límite inferior en al menos un nodo en sat(L∗ i) \\ sat(U∗ i) o disminuir un límite superior en al menos un nodo en sat(U∗ i) \\ sat(L∗ i) para cumplir con la regla de actividad. Prueba. Cambiar los valores superiores o inferiores en los nodos que no cumplen con ninguno de los intercambios no cambia ni L∗ i ni U∗ i, y no altera el beneficio de estos intercambios. Por lo tanto, la condición de RP seguirá fallando. De igual manera, cambiar los límites en los nodos que se satisfacen en ambos intercambios no tiene efecto en la preferencia revelada. Un cambio en un límite inferior en un nodo compartido afecta tanto a L∗ i como a U∗ i de manera idéntica debido al uso de la valoración modificada para determinar U∗ i. Un cambio en un límite superior en un nodo compartido no tiene efecto en la determinación de L∗ i o U∗ i. Ten en cuenta que cuando sat(U∗ i ) = sat(L∗ i ) entonces la condición (26) siempre se satisface trivialmente, por lo que la orientación en el lema siempre está bien definida cuando RP falla. Este es un mecanismo de retroalimentación elegante porque es adaptable. Una vez que un postor realiza algunos cambios en un subconjunto de estos nodos, el postor puede consultar el intercambio. El intercambio puede responder sí, o puede revisar el conjunto de nodos sat(λ∗ l ) y sat(λ∗ u) según sea necesario. 5.5 Condiciones de Terminación Una vez que cada postor haya comprometido sus nuevas ofertas (y haya cumplido con la regla de RP o haya sufrido la penalización), entonces la ronda t se cierra. En este punto, la tarea es determinar la nueva valoración α, y a su vez la asignación provisional λt y los precios provisionales pt. Una condición de terminación también se verifica, para determinar si se debe pasar el intercambio a una ronda final y definitiva. Para definir la α-valoración, calculamos las siguientes dos cantidades: Pesimista en Pesimista (PP). Determinar un intercambio eficiente, λ∗ l, en valores pesimistas, es decir, resolver maxλ   i vi(λi), y establecer PP=  i vi(λ∗ li). Pessimista a Optimista (PO) Determinar un intercambio eficiente, λ∗ u, en valores optimistas, es decir, resolver maxλ   i vi(λi), y establecer PO=  i vi(λ∗ ui). Primero, hay que tener en cuenta que PP ≥ PO y PP ≥ 0 por definición, para todos los árboles de oferta, aunque PO puede ser negativo (porque el intercambio correcto en v no es actualmente un intercambio útil en v). Reconociendo esto, definir γeff (PP, PO) = 1 + PP − PO PP , (27) cuando PP > 0, y observar que γeff (PP, PO) ≥ 1 cuando esto está definido, y que γeff (PP, PO) comenzará siendo grande y luego tenderá hacia 1 a medida que la asignación optimista converge hacia la asignación pesimista. En cada ronda, definimos αeff ∈ [0, 1] como: αeff = 0 cuando PP es 0, 1/γeff en otro caso (28), lo cual es 0 cuando PP es 0 y luego tiende hacia 1 una vez que PP > 0 en alguna ronda. Esto se utiliza para definir la α-valoración vα i = αeff vi + (1 − αeff )vi, ∀i, (29) que se utiliza para definir la asignación provisional y los precios provisionales. El efecto es definir endógenamente un horario para pasar de valores optimistas a pesimistas a lo largo de las rondas, basado en qué tan cercanos estén los intercambios entre sí. Condición de terminación. Al avanzar a la última y definitiva ronda, y finalmente cerrar, también nos preocupamos por la convergencia de pagos, además de la convergencia hacia un comercio eficiente. Para esto introducimos otro parámetro, αthresh ∈ [0, 1], que tiende de 0 a 1 a medida que los pagos de umbral en las valoraciones inferiores y superiores convergen. Considera el siguiente parámetro: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive), (30) el cual está definido para PP > 0, donde pthresh(v) denota los pagos de umbral en el perfil de valoración v, Nactive es el número de postores que están activamente involucrados en el comercio en la transacción de PP, y || · ||2 es la norma L2. Ten en cuenta que γthresh está definido para pagos y no para ganancias. Esto es apropiado porque la precisión del resultado del intercambio es lo que importa: es decir, el comercio y los pagos. Dado esto, definimos αthresh = 0 cuando PP es 0 y 1/γthresh en otro caso (31), lo cual es 0 mientras PP es 0 y luego tiende hacia 1 a medida que se avanza. Definición 5 (terminación). ICE pasa a una ronda final cuando se cumple una de las siguientes condiciones: 1. αeff ≥ CUTOFFeff y αthresh ≥ CUTOFFthresh, 2. no hay intercambio en los valores optimistas, donde CUTOFFeff, CUTOFFthresh ∈ (0, 1] determinan la precisión requerida para la terminación. Al final de la última y definitiva ronda, vα = v se utiliza para definir el intercambio final y los pagos finales del umbral. Ejemplo 9. Considera nuevamente el Ejemplo 1, y considera los límites superiores e inferiores como se muestra en la Figura 1. Primero, si los límites de los vendedores fueron [−20, −4] entonces hay un intercambio optimista pero no hay un intercambio pesimista, y PO = −4 y PP = 0, y αeff = 0. En los límites representados, tanto los intercambios optimistas como pesimistas ocurren y PO = PP = 4 y αeff = 1. Sin embargo, podemos ver que los pagos umbral son (17, −17) en v pero (14, −14) en v. Al evaluar γthresh, tenemos γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, y αthresh = 2/5. Para CUTOFFthresh < 2/5, el intercambio permanecería abierto. Por otro lado, si el valor que los compradores asignan a +AB estaba entre [18, 24] y el valor que los vendedores asignan a -AB estaba entre [-12, -6], los pagos umbral son (15, -15) en ambos límites superior e inferior, y αthresh = 1. 256 Líneas de Propósito de Componente Agente. El modelo 762 de Soporte Captura el comportamiento estratégico y las decisiones de revelación de información. Proporciona soporte XML para cargar bienes y valoraciones en el mundo 200. El mundo 200 realiza un seguimiento de todos los detalles de agentes, bienes y valoraciones. El Controlador y Comunicación de Intercambio 998 controla el intercambio y coordina el comportamiento remoto de los agentes. El Lenguaje de Subasta 1119 implementa el lenguaje de subasta basado en árboles. El Motor de Reglas de Actividad 203 implementa la regla de preferencia revelada con soporte de rango. El Motor de Reglas de Cierre 137 verifica si se ha alcanzado la condición de terminación de la subasta. El Motor WD 377 proporciona lógica relacionada con WD. El Motor de Precios 460 proporciona lógica relacionada con precios. Los Constructores MIP 346 traducen la lógica utilizada por los motores en nuestra formulación general de optimización. Los Constructores de Precios 256 son utilizados por tres etapas de precios. Los Constructores de Determinación de Ganadores 365 son utilizados por WD, regla de actividad, regla de cierre y generación de restricciones de precios. El código de Soporte del Marco 510 facilita la sustitución modular de los componentes anteriores. Tabla 1: Desglose de Componentes y Código de Intercambio. La INFRAESTRUCTURA DE SISTEMAS ICE consta de aproximadamente 6502 líneas de código Java, divididas en los paquetes funcionales descritos en la Tabla 1.10. El prototipo es modular para que los investigadores puedan reemplazar fácilmente los componentes para experimentación. Además del intercambio central discutido en este documento, hemos desarrollado un componente de agente que permite a un usuario simular el comportamiento y conocimiento de otros jugadores en el sistema, lo que le permite al usuario formular su estrategia antes de jugar realmente. Un usuario especifica un modelo de valoración en una interpretación XML de nuestro lenguaje de oferta, que se revela al intercambio a través de la estrategia de los agentes. Las principales tareas de intercambio son manejadas por motores que dictan la lógica no específica del optimizador. Estos motores impulsan los constructores MIP/LP apropiados. Nos dimos cuenta de que todas nuestras formulaciones de optimización se reducen a dos clases de problemas de optimización. El primero, utilizado para la determinación del ganador, la regla de actividad, la regla de cierre y la generación de restricciones en la fijación de precios, es un MIP que encuentra intercambios que maximizan el valor, manteniendo constantes los precios y los márgenes. El segundo, utilizado por las tres etapas de fijación de precios, es un LP que mantiene constantes las operaciones comerciales, buscando minimizar la holgura, el beneficio o los precios. Aprovechamos la similitud de estos problemas utilizando constructores de LP/MIP comunes que difieren solo en unos pocos ganchos funcionales para proporcionar las variables correctas para la optimización. Hemos generalizado nuestra interfaz de optimización del back-end (actualmente soportamos CPLEX y LPSolve con licencia LGPL) y podemos aprovechar la capacidad de equilibrio de carga y resolución paralela de MIP/LP que esta biblioteca proporciona. DISCUSIÓN El lenguaje de oferta se definió para permitir una simetría perfecta entre compradores y vendedores y proporcionar expresividad en un dominio de intercambio, por ejemplo, para oferentes mixtos interesados en ejecutar operaciones como swaps. Esto resultó especialmente desafiante. El avance se produjo cuando nos enfocamos en los cambios de valor para las operaciones en lugar de proporcionar valores absolutos para las asignaciones. Para simplificar, requerimos la misma estructura de árbol tanto para las valoraciones superiores como inferiores. El tamaño del código se mide en líneas de código fuente físicas (SLOC), generadas utilizando el Contador SLOC de David A. Wheeler. El total de 6502 incluye 184 para instrumentación (no se muestra en la tabla). La interfaz del solucionador JOpt es de otras 1964 líneas, y Castor genera automáticamente alrededor de 5200 líneas de código para la manipulación de archivos XML. Esto permite que el propio lenguaje garantice la consistencia (con el valor superior al menos igual al valor inferior en todas las operaciones) y aplique un estrechamiento monótono de estos límites para todas las operaciones en todas las rondas. También proporciona un método eficiente para verificar la regla de actividad de RP, ya que facilita razonar sobre la incertidumbre compartida entre las operaciones. La decisión de adoptar un enfoque directo y delegado en el cual los licitadores expresan sus valores superiores e inferiores a un agente de confianza que interactúa con la bolsa se tomó temprano en el proceso de diseño. En muchos aspectos, esta es la forma más clara y directa de generalizar el diseño en Parkes et al. [24] y hacerlo iterativo. Además, esto elimina muchas oportunidades para la manipulación estratégica: los postores están restringidos a hacer declaraciones (incrementales) sobre sus valoraciones. Otra ventaja es que hace que la regla de la actividad sea fácil de explicar: los postores siempre pueden cumplir con la regla de la actividad ajustando los límites de manera que su valor real permanezca en el soporte. Quizás lo más importante es que tener información explícita sobre los valores superiores e inferiores permite avanzar en las primeras rondas, incluso cuando no hay un intercambio eficiente a valores pesimistas. La información de los límites superior e inferior también proporciona orientación sobre cuándo terminar. Ten en cuenta que tomado por sí mismo, PP = PO no implica que el intercambio provisional actual sea eficiente con respecto a todos los valores consistentes con la información de valor actual. La diferencia en los valores entre diferentes oficios, agregada entre todos los postores, podría ser similar en los límites inferiores y superiores pero bastante diferente en los valores intermedios (incluyendo la verdad). Sin embargo, conjeturamos que PP = PO demostrará ser un indicador excelente de eficiencia en entornos prácticos donde la forma de las valoraciones superiores e inferiores sí transmita información útil. Esto merece una investigación experimental. Además, el uso del precio y la actividad de RP proporciona garantías adicionales. Adoptamos precios lineales (precios en artículos individuales) en lugar de precios no lineales (con precios en un intercambio que no son iguales a la suma de los precios de los artículos componentes) al principio del proceso de diseño. La concisión de esta representación de precios es muy importante para la viabilidad computacional dentro del intercambio y también para promover la simplicidad y transparencia para los postores. La regla de actividad RP fue adoptada más tarde, y es una buena elección debido a sus excelentes propiedades teóricas cuando se combina con los precios de CE. Lo siguiente se puede establecer fácilmente: dados los precios CE exactos pt−1 para el comercio provisional 12. Esto contrasta con enfoques basados en precios indirectos, como el reloj-proxy [1], en los que los postores deben ser capaces de razonar sobre las restricciones RP implicadas por las ofertas en cada ronda. 257 λt−1 en valoraciones vα, entonces si los valores superiores e inferiores al inicio de la ronda t ya satisfacen la regla RP (y sin necesidad de ningún desempate), el comercio provisional es eficiente para todas las valoraciones consistentes con los árboles de ofertas actuales. Cuando existen precios lineales de CE, esto proporciona una declaración de solidez y completitud: si PP = PO, existen precios lineales de CE, y se cumple la regla de RP, el intercambio provisional es eficiente (solidez); si los precios son precios exactos de CE para el intercambio provisional en vα, pero el intercambio es ineficiente con respecto a algún perfil de valoración consistente con los árboles de oferta actuales, entonces al menos un postor debe fallar en RP con su árbol de oferta actual y se avanzará (completitud). El trabajo futuro debe estudiar la convergencia experimentalmente y extender esta teoría para permitir precios aproximados. Algunos aspectos estratégicos de nuestro diseño de ICE merecen comentario y estudio adicional. Primero, no afirmamos que responder sinceramente a la regla de RP sea un equilibrio ex post. Sin embargo, el intercambio está diseñado para imitar la regla de Umbral en su esquema de pago, que se sabe que tiene propiedades de incentivo útiles. Debemos tener cuidado, sin embargo. Por ejemplo, no sugerimos proporcionar αeff a los licitadores, porque a medida que αeff se acerca a 1, informaría a los licitadores que los valores de las ofertas se vuelven irrelevantes para determinar el intercambio, sino que se utilizan simplemente para determinar los pagos (y los licitadores se volverían cada vez más reacios a aumentar sus valoraciones más bajas). Además, en este trabajo no se ha considerado la posibilidad de colusión entre los licitadores. Este es un tema que merece atención en trabajos futuros. 8. CONCLUSIONES En este trabajo diseñamos y prototipamos un intercambio combinatorio iterativo escalable y altamente expresivo. El diseño incluye muchas características interesantes, como: un nuevo lenguaje de árbol de ofertas para intercambios, un nuevo método para construir precios lineales aproximados a partir de lenguajes expresivos, y un método de elicitación con valoraciones optimistas y pesimistas con un nuevo método para evaluar una regla de actividad de preferencia revelada. El intercambio está completamente implementado en Java y se encuentra en una fase de validación. Los próximos pasos para nuestro trabajo son permitir a los licitadores refinar la estructura del árbol de oferta además de los valores en el árbol. Tenemos la intención de estudiar las propiedades de elicitación del intercambio y hemos creado un conjunto de pruebas de instancias de problemas de intercambio. Además, estamos comenzando a participar en colaboraciones para aplicar el diseño a la programación de franjas horarias de despegue y aterrizaje de aerolíneas y a la asignación de recursos en sistemas computacionales distribuidos de amplia área de red. Agradecimientos Nos gustaría dedicar este artículo a todos los participantes de CS 286r en la Universidad de Harvard en la primavera de 2004. Este trabajo está parcialmente respaldado por la subvención de la NSF IIS-0238147. REFERENCIAS [1] L. Ausubel, P. Cramton y P. Milgrom. La subasta de reloj-proxi: Un diseño práctico de subasta combinatoria. En Cramton et al. [9], capítulo 5. [2] M. Babaioff, N. Nisan y E. Pavlov. Mecanismos para un mercado distribuido espacialmente. En Actas de la 5ta Conferencia de la ACM sobre Comercio Electrónico, páginas 9-20. ACM Press, 2001. Dado el teorema de imposibilidad de Myerson-Satterthwaite [22] y el método mediante el cual determinamos el intercambio, no deberíamos esperar esto. [3] M. Ball, G. Donohue y K. Hoffman. Subastas para la asignación segura, eficiente y equitativa de los recursos del sistema de espacio aéreo. En S. Cramton, Shoham, editor, Subastas Combinatorias. 2004. Próximamente. [4] D. Bertsimas y J. Tsitsiklis. Introducción a la Optimización Lineal. Athena Scientific, 1997. [5] S. Bikhchandani y J. M. Ostroy. El modelo de asignación de paquetes. Revista de Teoría Económica, 107(2):377-406, 2002. [6] C. Boutilier. Una formulación POMDP de problemas de obtención de preferencias. En Proc. 18ª Conferencia Nacional de Inteligencia Artificial (AAAI-02), 2002. [7] C. Boutilier y H. Hoos. Subastando idiomas para subastas combinatorias. En Proc. 17ª Conferencia Internacional Conjunta sobre Inteligencia Artificial (IJCAI-01), 2001. [8] W. Conen y T. Sandholm. Elicitación de preferencias en subastas combinatorias. En Proc. 3ra Conf. ACM sobre Comercio Electrónico (EC-01), páginas 256-259. ACM Press, Nueva York, 2001. [9] P. Cramton, Y. Shoham y R. Steinberg, editores. Subastas combinatorias. MIT Press, 2004. [10] S. de Vries, J. Schummer y R. V. Vohra. En subastas ascendentes de Vickrey para objetos heterogéneos. Informe técnico, MEDS, Escuela Kellogg, Universidad Northwestern, 2003. [11] S. de Vries y R. V. Vohra. Subastas combinatorias: Un estudio. Revista Informs sobre Computación, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana y T. Wilson. Probando algoritmos de precios lineales para su uso en subastas combinatorias ascendentes. Informe técnico, SEOR, Universidad George Mason, 2003. [13] Y. Fu, J. Chase, B. Chun, S. Schwab, y A. Vahdat. Sharp: una arquitectura para el emparejamiento seguro de recursos. En Actas del decimonoveno simposio de principios de sistemas operativos de ACM, páginas 133-148. ACM Press, 2003. [14] B. Hudson y T. Sandholm. Efectividad de tipos de consultas y políticas para la obtención de preferencias en subastas combinatorias. En Proc. 3rd Int. Articulación. Conferencia sobre Agentes Autónomos y Sistemas Multiagente, páginas 386-393, 2004. [15] V. Krishna. Teoría de subastas. Academic Press, 2002. [16] D. Krych. \n\nEditorial Académica, 2002. [16] D. Krych. Cálculo y análisis de equilibrios de Nash de reglas de pago basadas en Vickrey para intercambios combinatorios, Harvard College, abril de 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter y C. DeMartini. Un nuevo y mejorado diseño para subastas iterativas de múltiples objetos. Ciencias de la Gestión, 2004. Aparecer. [18] E. Kwerel y J. Williams. Una propuesta para una transición rápida a la asignación de espectro por mercado. Informe técnico, Oficina de Planes y Políticas de la FCC, noviembre de 2002. [19] S. M. Lahaie y D. C. Parkes. Aplicando algoritmos de aprendizaje a la obtención de preferencias. En Proc. ACM Conf. on Electronic Commerce, páginas 180-188, 2004. [20] R. P. McAfee. Una <br>subasta doble</br> con estrategia dominante. Revista de Teoría Económica, 56:434-450, 1992. [21] P. Milgrom. Poniendo en práctica la teoría de subastas: La subasta ascendente simultánea. J.Pol. Econ., 108:245-272, 2000. [22] R. B. Myerson y M. A. Satterthwaite. Mecanismos eficientes para el comercio bilateral. Revista de Teoría Económica, 28:265-281, 1983. [23] N. Nisan. Subasta y asignación en subastas combinatorias. En Proc. 2ª ACM Conf. sobre Comercio Electrónico (EC-00), páginas 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam y M. Eso. Lograr el equilibrio presupuestario con esquemas de pago basados en Vickrey en intercambios. En Proc. 17ª Conferencia Internacional Conjunta de Inteligencia Artificial (IJCAI-01), páginas 1161-1168, 2001. [25] D. C. Parkes y L. H. Ungar. Subastas combinatorias iterativas: Teoría y práctica. En Proc. 17ª Conferencia Nacional de Inteligencia Artificial (AAAI-00), páginas 74-81, julio de 2000. [26] S. J. Rassenti, V. L. Smith y R. L. Bulfin. Un mecanismo combinatorio para la asignación de franjas horarias en aeropuertos. Revista Bell de Economía, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc y R. M. Harstad. Subastas combinatorias computacionalmente manejables. Ciencia de la Gestión, 44(8):1131-1147, 1998. [28] T. Sandholm y C. Boutilier. Elicitación de preferencias en subastas combinatorias. En Cramton et al. [9], capítulo 10. [29] P. R. Wurman y M. P. Wellman. AkBA: Una subasta combinatoria progresiva y de precio anónimo. En la Segunda Conferencia ACM sobre Comercio Electrónico, páginas 21-29, 2000. 258 ",
            "candidates": [],
            "error": [
                [
                    "subasta doble",
                    "subasta doble combinatoria",
                    "subasta doble"
                ]
            ]
        },
        "combinatorial auction": {
            "translated_key": "subasta combinatoria",
            "is_in_text": true,
            "original_annotated_sentences": [
                "ICE: An Iterative Combinatorial Exchange David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative combinatorial exchange (ICE).",
                "The exchange incorporates a tree-based bidding language that is concise and expressive for CEs.",
                "Bidders specify lower and upper bounds on their value for different trades.",
                "These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
                "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
                "A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "The exchange is fully implemented and in a validation phase.",
                "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
                "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
                "In a double auction (DA), multiple buyers and sellers trade units of an identical good [20].",
                "In a <br>combinatorial auction</br> (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language.",
                "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
                "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling.",
                "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
                "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
                "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
                "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
                "This paper presents the first design for an iterative combinatorial exchange (ICE).",
                "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
                "The ICE design problem is multi-faceted and quite hard.",
                "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round.",
                "The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "The exchange has a number of interesting theoretical properties.",
                "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
                "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
                "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
                "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
                "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "The exchange is implemented in Java and is currently in validation.",
                "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
                "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
                "We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions.",
                "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based bidding language.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable.",
                "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
                "Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
                "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
                "An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade.",
                "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
                "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades.",
                "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
                "A revealed-preference activity rule [1] ensures progress across rounds.",
                "In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices.",
                "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
                "An outline of the ICE system flow of control is provided in Figure 1.",
                "We will return to this example later in the paper.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance).",
                "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round.",
                "At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29].",
                "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
                "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
                "The price generation methods that we use in ICE generalize the methods in these earlier papers.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule.",
                "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
                "We are not aware of any previous studies of iterative CEs.",
                "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
                "No dominant strategy mechanisms are known for the general CE problem.",
                "ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
                "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
                "The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
                "Rothkopf et al. [27] also describe a restricted tree-based bidding language.",
                "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
                "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
                "The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
                "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
                "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
                "A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
                "So, the final allocation is x1 = x0 + λ.",
                "Each bidder has a value vi(λi) ∈ ¡ for a trade λi.",
                "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
                "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ .",
                "Price p can be negative, indicating the bidder receives a payment for the trade.",
                "We use the term payoff interchangeably with utility.",
                "Our goal in the ICE design is to implement the efficient trade.",
                "The efficient trade, λ∗ , maximizes the total increase in value across bidders.",
                "Definition 1 (Efficient trade).",
                "The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
                "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
                "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
                "All three examples have only one seller, but this is purely illustrative.",
                "Example 1.",
                "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
                "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
                "Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
                "Example 2.",
                "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
                "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
                "The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
                "Example 3.",
                "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
                "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades.",
                "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
                "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
                "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
                "We illustrate the language on each of Examples 1-3 in Figure 2.",
                "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
                "The nodes have zero values where no value is indicated.",
                "Internal nodes are also labeled with interval-choose (IC) ranges.",
                "Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
                "First, if a child is on then its parent must be on.",
                "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
                "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade.",
                "For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
                "On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
                "Given a trade there is often a number of ways to choose the set of satisfied nodes.",
                "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
                "Consider bid tree Ti from bidder i.",
                "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
                "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
                "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
                "Every node is also labeled with a value, viβ ∈ ¡ .",
                "Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.)",
                "Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
                "There will often be a choice.",
                "Ties are broken to maximize value.",
                "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
                "Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
                "This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade.",
                "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
                "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
                "The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
                "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
                "Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
                "OR* is known to be expressive and concise.",
                "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
                "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
                "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
                "In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆vcg,i = V ∗ − V−i the VCG discount.",
                "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
                "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome.",
                "Definition 2.",
                "The Threshold payment scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance).",
                "Example 4.",
                "In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
                "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
                "This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes.",
                "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
                "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
                "THE ICE DESIGN We are now ready to introduce the iterative combinatorial exchange (ICE) design.",
                "Several new components are introduced, relative to the design for the one-shot exchange.",
                "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
                "The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations.",
                "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
                "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v).",
                "Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
                "These take the place of the exact value viβ defined in Section 4.1.",
                "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
                "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
                "The following lemma is useful: Lemma 1.",
                "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
                "Proof.",
                "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
                "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
                "But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
                "Given these provisional prices, the price on trade λi for bidder i is pt (λi) =   j≤m pt j · λij.",
                "Definition 3 (CE prices).",
                "Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
                "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
                "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
                "II: Fairness.",
                "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
                "III: Balance.",
                "Third, we break ties to prefer prices that minimize the maximal price across all items.",
                "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
                "In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades.",
                "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
                "Each step is described in detail below.",
                "I: Accuracy.",
                "We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages.",
                "Let λt denote the current provisional trade and suppose the provisional valuation is vα .",
                "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
                "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
                "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.)",
                "Example 5.",
                "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
                "The efficient trade allocates AB to buyer 1 and CD to buyer 3.",
                "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
                "But, (9) has an exponential number of constraints (Eq. 10).",
                "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
                "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
                "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
                "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
                "In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices.",
                "Let ˆλi denote the solution to R-WD(i).",
                "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
                "Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
                "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
                "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
                "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
                "This can be exactly achieved in pricing with pA + pB = 14.",
                "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
                "The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the VCG payoff (at vα ).",
                "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
                "III: Balance.",
                "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items.",
                "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
                "Finally, balance sets p(A) = p(B) = 7.",
                "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
                "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
                "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
                "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
                "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
                "Dunford et al. [12] prefer to smooth prices across rounds.",
                "Comment 1: Lexicographical Refinement.",
                "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
                "For instance, in ACC we successively minimize the maximal error across all bidders.",
                "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
                "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
                "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
                "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL.",
                "Comment 2: Computation.",
                "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
                "Thus, the computational effort in constraint generation is re-used.",
                "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
                "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
                "This avoids later infeasibility issues.",
                "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
                "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
                "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
                "We adopt a simple revealed-preference (RP) activity rule.",
                "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
                "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
                "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
                "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
                "Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices.",
                "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
                "We pin these down and then minimize the error to bidders 3 and 4.",
                "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices.",
                "Consider the following examples: Example 7.",
                "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
                "Example 8.",
                "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
                "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
                "Definition 4.",
                "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
                "First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
                "Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP.",
                "To understand the importance of this tiebreaking rule consider Example 7.",
                "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
                "Notice that +B is a counterexample to +A, but not the other way round.",
                "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i .",
                "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v.",
                "We call trade U∗ i the witness trade.",
                "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
                "Example 8 helps to illustrate this.",
                "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
                "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
                "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
                "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
                "Proposition 1.",
                "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
                "Proof.",
                "For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
                "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes.",
                "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
                "For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i).",
                "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
                "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
                "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
                "Proceed by case analysis.",
                "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
                "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
                "Case b): two or more solutions to RP1(i) have uncertain value.",
                "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
                "This is by RP.",
                "Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
                "Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades.",
                "Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
                "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
                "Failure to meet the activity rule must have some consequence.",
                "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices.",
                "See 7 for an additional discussion.",
                "We also provide guidance to help a bidder meet the RP rule.",
                "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
                "Lemma 2.",
                "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
                "Proof.",
                "Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
                "Thus, the RP condition will continue to fail.",
                "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
                "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
                "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
                "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
                "This is an elegant feedback mechanism because it is adaptive.",
                "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
                "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
                "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
                "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
                "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
                "Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
                "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v).",
                "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
                "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
                "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
                "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
                "Termination Condition.",
                "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade.",
                "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
                "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm.",
                "Note that γthresh is defined for payments and not payoffs.",
                "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments.",
                "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
                "Definition 5 (termination).",
                "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
                "At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments.",
                "Example 9.",
                "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
                "First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0.",
                "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
                "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
                "For CUTOFFthresh < 2/5 the exchange would remain open.",
                "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
                "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the tree-based bidding language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
                "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
                "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
                "A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy.",
                "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
                "These engines drive the appropriate MIP/LP builders.",
                "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
                "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
                "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
                "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
                "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
                "DISCUSSION The bidding language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
                "This proved especially challenging.",
                "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
                "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
                "The total of 6502 includes 184 for instrumentation (not shown in the table).",
                "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
                "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
                "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
                "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
                "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
                "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values.",
                "Upper and lower bound information also provides guidance about when to terminate.",
                "Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information.",
                "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
                "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
                "This is worthy of experimental investigation.",
                "Moreover, the use of price and RP activity provides additional guarantees.",
                "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process.",
                "The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
                "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
                "The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees.",
                "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
                "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
                "Some strategic aspects of our ICE design deserve comment, and further study.",
                "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
                "We must be careful, though.",
                "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
                "Also, no consideration has been given in this work to collusion by bidders.",
                "This is an issue that deserves some attention in future work. 8.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative combinatorial exchange.",
                "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
                "The exchange is fully implemented in Java and is in a validation phase.",
                "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
                "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
                "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
                "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
                "This work is supported in part by NSF grant IIS-0238147. 9.",
                "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
                "The clock-proxy auction: A practical <br>combinatorial auction</br> design.",
                "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
                "Mechanisms for a spatially distributed market.",
                "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
                "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
                "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
                "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
                "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
                "Introduction to Linear Optimization.",
                "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
                "A pomdp formulation of preference elicitation problems.",
                "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
                "Bidding languages for combinatorial auctions.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
                "Preference elicitation in combinatorial auctions.",
                "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
                "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
                "Combinatorial Auctions.",
                "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
                "On ascending Vickrey auctions for heterogeneous objects.",
                "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
                "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
                "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
                "Chase, B. Chun, S. Schwab, and A. Vahdat.",
                "Sharp: an architecture for secure resource peering.",
                "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
                "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In Proc. 3rd Int.",
                "Joint.",
                "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [16] D. Krych.",
                "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
                "A new and improved design for multi-object iterative auctions.",
                "Management Science, 2004.",
                "To appear. [18] E. Kwerel and J. Williams.",
                "A proposal for a rapid transition to market allocation of spectrum.",
                "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proc.",
                "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
                "A dominant strategy double auction.",
                "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
                "Putting auction theory to work: The simultaneous ascending auction.",
                "J.Pol.",
                "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
                "Iterative combinatorial auctions: Theory and practice.",
                "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
                "A combinatorial mechanism for airport time slot allocation.",
                "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
                "AkBA: A progressive, anonymous-price <br>combinatorial auction</br>.",
                "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
            ],
            "original_annotated_samples": [
                "In a <br>combinatorial auction</br> (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "The clock-proxy auction: A practical <br>combinatorial auction</br> design.",
                "AkBA: A progressive, anonymous-price <br>combinatorial auction</br>."
            ],
            "translated_annotated_samples": [
                "En una <br>subasta combinatoria</br> (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11].",
                "La subasta de reloj-proxi: Un diseño práctico de <br>subasta combinatoria</br>.",
                "AkBA: Una <br>subasta combinatoria</br> progresiva y de precio anónimo."
            ],
            "translated_text": "Presentamos el primer diseño para un intercambio combinatorio iterativo (ICE). El intercambio incorpora un lenguaje de oferta basado en árboles que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20]. En una <br>subasta combinatoria</br> (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos. Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un intercambio combinatorio iterativo (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda. La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de oferta basado en árboles expresivo y conciso. El lenguaje describe valores para intercambios, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el intercambio sea aceptable. El lenguaje permite a los postores expresar límites superiores e inferiores en el valor, los cuales pueden ser ajustados en cada ronda. • Determinación del ganador. La determinación del ganador (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación. Comparar la solución en los valores superiores e inferiores permite tomar una decisión sobre la terminación, con el progreso en rondas intermedias impulsado por una valoración intermedia y los valores inferiores adoptados al finalizar. • Pagos. Los pagos se calculan utilizando la regla de pago del umbral [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de precios. Se calcula un precio aproximado para cada artículo en el intercambio en cada ronda, en función de las valoraciones intermedias y el intercambio provisional. Los precios se optimizan para aproximar los precios de equilibrio competitivo, y luego se optimizan aún más para aproximar mejor los pagos del umbral actual con los lazos restantes rotos para favorecer los precios equilibrados entre diferentes artículos. Al calcular los precios, adoptamos los métodos de generación de restricciones para explotar la estructura del lenguaje de oferta y evitar enumerar todos los intercambios factibles. El subproblema para generar nuevas restricciones es una variación del problema WD. • Regla de actividad. Una regla de actividad de preferencia revelada [1] garantiza progreso a lo largo de las rondas. Para permanecer activo, un oferente debe ajustar los límites para que haya suficiente información para definir un intercambio que maximice el excedente a los precios actuales. Otra variación del problema de WD se formula, tanto para verificar que se cumple la regla de actividad como para proporcionar retroalimentación a un postor para explicar cómo cumplir la regla. Se proporciona un esquema del flujo de control del sistema ICE en la Figura 1. Volveremos a este ejemplo más adelante en el documento. Por ahora, simplemente observa en este ejemplo de dos agentes que los agentes establecen límites inferiores y superiores que son verificados en la regla de actividad, y luego pasados a la determinación del ganador (WD), y luego a través de tres etapas de fijación de precios (precisión, equidad, equilibrio). Al pasar la regla de cierre (en la que se verifican los parámetros αeff y αthresh para la convergencia del comercio y los pagos), el intercambio pasa a una última y definitiva ronda. Al final de esta ronda, el intercambio y los pagos finalmente se determinan, basados en las valoraciones más bajas. 2.1 Trabajo Relacionado En la literatura se conocen muchos CAs de un solo lado con precios ascendentes [10, 25, 29]. También se han propuesto enfoques de elicitación directa para los AC unilaterales en los que los agentes responden a preguntas explícitas sobre sus valoraciones [8, 14, 19]. Un número de CAs ascendentes están diseñados para trabajar con precios simples en artículos [12, 17]. Los métodos de generación de precios que utilizamos en ICE generalizan los métodos de estos artículos anteriores. Parkes et al. [24] estudiaron intercambios combinatorios de oferta sellada e introdujeron la regla de pago umbral. Posteriormente, Krych [16] demostró experimentalmente que la regla del Umbral promueve asignaciones eficientes. No tenemos conocimiento de ningún estudio previo sobre CEs iterativos. Las estrategias dominantes DAs son conocidas por la demanda unitaria [20] y también por agentes de mente única [2]. No se conocen mecanismos de estrategia dominante para el problema general de la CE. ICE es un diseño de subasta híbrido, ya que combina precios simples de artículos para impulsar las ofertas en las primeras rondas con WD combinatorio y pagos, una característica que comparte con el diseño de reloj-proxy de Ausubel et al. [1] para subastas unilaterales. Adoptamos una variación de la regla de actividad de preferencia revelada en las subastas de proxy de reloj. El lenguaje de subasta comparte algunos elementos estructurales con el lenguaje LGB de Boutilier y Hoos [7], pero tiene semántica muy diferente. Rothkopf et al. [27] también describen un lenguaje de oferta basado en árboles restringido. En LGB, la semántica es la de la lógica proposicional, con los mismos elementos en una asignación capaces de satisfacer un árbol en múltiples lugares. Aunque esto puede hacer que LGB sea especialmente conciso en algunos contextos, la semántica que proponemos parece proporcionar una utilidad local, de modo que el valor de un componente en un árbol pueda ser comprendido de forma independiente al resto del árbol. La idea de capturar la estructura de nuestro lenguaje de oferta de manera explícita dentro de una formulación de programación entera mixta sigue los desarrollos en Boutilier [6]. 3. PRELIMINARES En nuestro modelo, consideramos un conjunto de bienes, indexados {1, . . . , m} y un conjunto de postores, indexados {1, . . . , n}. La asignación inicial de bienes se denota como x0 = (x0 1, . . . , x0 n), donde x0 i = (x0 i1, . . . , x0 im) y x0 ij ≥ 0 para el bien j indicando el número de unidades del bien j que posee el postor i. Un intercambio λ = (λ1, . . . , λn) denota el cambio en la asignación, con λi = (λi1, . . . , λim) donde λij ∈ es el cambio en el número de unidades del ítem j para el postor i. Entonces, la asignación final es x1 = x0 + λ. Cada postor tiene un valor vi(λi) ∈ ¡ para una transacción λi. Este valor puede ser positivo o negativo, y representa el cambio en el valor entre la asignación final x0 i +λi y la asignación inicial x0 i. La utilidad es cuasi-lineal, con ui(λi, p) = vi(λi)−p para el intercambio λi y el pago p ∈ ¡. El precio p puede ser negativo, lo que indica que el postor recibe un pago por la transacción. Utilizamos el término \"pago\" de manera intercambiable con \"utilidad\". Nuestro objetivo en el diseño de ICE es implementar el comercio eficiente. El intercambio eficiente, λ∗, maximiza el aumento total de valor entre los postores. Definición 1 (Comercio eficiente). El intercambio eficiente λ∗ resuelve max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Las restricciones (1) aseguran que ningún agente venda más artículos de los que tiene en su asignación inicial. Las restricciones (2) permiten la disposición gratuita y permiten que los intercambios factibles vendan más artículos de los que se compran (pero no al revés). Posteriormente, adoptamos Feas(x0) para denotar el conjunto de intercambios factibles, dados estos límites y una asignación inicial x0 = (x0 1, . . . , x0 n). 3.1 Ejemplos Prácticos En esta sección, proporcionamos tres ejemplos simples de instancias que utilizaremos para ilustrar varios componentes del intercambio. Todos los tres ejemplos tienen solo un vendedor, pero esto es puramente ilustrativo. Ejemplo 1. Un vendedor y un comprador, dos bienes {A, B}, con el vendedor teniendo una asignación inicial de AB. Cambios en los valores de los intercambios: vendedor comprador Y (−A, −B) Y (+A, +B) -10 +20 El Y indica que tanto el comprador como el vendedor solo están interesados en intercambiar ambos bienes como un paquete. Aquí, el intercambio eficiente (que maximiza el valor) es para el vendedor vender AB al comprador, denotado como λ∗ = ([−1, −1], [+1, +1]). Ejemplo 2. Un vendedor y cuatro compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de las transacciones: vendedor comprador1 comprador 2 comprador 3 comprador 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 El OR indica que el vendedor está dispuesto a vender cualquier cantidad de bienes. El XOR indica que los compradores 2 y 4 están dispuestos a comprar como máximo uno de los dos bienes en los que están interesados. El comercio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD al comprador 3, denotado λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR Ejemplo 1: Ejemplo 3: 2,2 +C +D COMPRADOR 2 2,2 +A +B COMPRADOR 1 +11 +84,4 -B VENDEDOR -A -C -D Ejemplo 2: 1,1 +A +B COMPRADOR 2 2,2 +A +B COMPRADOR 1 +6 +40,4 -B VENDEDOR -C -D-A 1,1 +C +D COMPRADOR 4 2,2 +C +D +3 +2 COMPRADOR 3 -18 Figura 2: Ejemplo de Árboles de Ofertas. Ejemplo 3. Un vendedor y dos compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de los intercambios: vendedor comprador1 comprador 2 Y (−A, −B, −C, −D) Y (+A, +B) Y (+C, +D) -18 +11 +8 El intercambio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD vaya al comprador 2, denotado por λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4. Un DISEÑO DE INTERCAMBIO DE UNA SOLA VEZ La descripción de ICE se divide en dos secciones: una sola vez (oferta sellada) e iterativa. En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a compradores y vendedores, y para extenderse y capturar ofertas de compradores y vendedores mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas. Las ofertas se expresan como árboles de ofertas anotados, y definen el valor de un oferente para todos los intercambios posibles. El lenguaje define cambios en los valores de las transacciones, con hojas anotadas con los artículos intercambiados y nodos anotados con cambios en los valores (ya sea positivos o negativos). La característica principal es que tiene un operador lógico de intervalo general en los nodos internos, y que define una semántica cuidadosa para propagar valores dentro del árbol. Ilustramos el lenguaje en cada uno de los Ejemplos 1-3 en la Figura 2. El lenguaje tiene una estructura de árbol, con operaciones en elementos definidos en las hojas y valores anotados en nodos y hojas. Los nodos tienen valores de cero donde no se indica ningún valor. Los nodos internos también están etiquetados con rangos de intervalo-escoge (IC). Dada una transacción, la semántica del lenguaje define qué nodos en el árbol pueden ser satisfechos o activados. Primero, si un niño está encendido, entonces su padre también debe estar encendido. Segundo, si un nodo padre está encendido, entonces el número de hijos que están encendidos debe estar dentro del rango de IC en el nodo padre. Finalmente, las hojas en las que el postor está comprando artículos solo pueden estar activas si los artículos se proporcionan en el intercambio. Por ejemplo, en el Ejemplo 2 podemos considerar el comercio eficiente, y observar que en este comercio todos los nodos en los árboles de los compradores 1 y 3 (y también el vendedor), pero ninguno de los nodos en los árboles de los compradores 2 y 4, pueden estar encendidos. Por otro lado, en 251 el intercambio en el que A va al comprador 2 y D al comprador 4, entonces los nodos raíz y hojas apropiados pueden estar encendidos para los compradores 2 y 4, pero ningún nodo puede estar encendido para los compradores 1 y 3. Dado un intercambio, a menudo hay varias formas de elegir el conjunto de nodos satisfechos. La semántica del lenguaje requiere que se activen los nodos que maximicen el valor sumado entre los nodos satisfechos. Considera el árbol de oferta Ti del ofertante i. Esto define nodos β ∈ Ti, de los cuales algunos son hojas, Leaf (i) ⊆ Ti. Deje que Child(β) ⊆ Ti denote los hijos de un nodo β (que no es en sí mismo una hoja). Todos los nodos excepto las hojas están etiquetados con el operador de intervalo-escoger [IC x i (β), ICy i (β)]. Cada nodo también está etiquetado con un valor, viβ ∈ ¡. Cada hoja β está etiquetada con un intercambio, qiβ ∈ m (es decir, las hojas pueden definir un intercambio agrupado en más de un tipo de artículo). Dado un intercambio λi al postor i, los operadores de elección de intervalos y los intercambios en las hojas definen qué nodos pueden ser satisfechos. A menudo habrá una elección. Las corbatas se rompen para maximizar el valor. Que satiβ ∈ {0, 1} denote si el nodo β está satisfecho. La solución sati es válida dado el árbol Ti y el intercambio λi, escrita sati ∈ válido(Ti, λi), si y solo si: ¢ β∈Hoja (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Hijo(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Hoja (i) (5) En otras palabras, un conjunto de hojas solo puede considerarse satisfecho dado el intercambio λi si el aumento total en cantidad sumado en todas esas hojas está cubierto por el intercambio, para todos los bienes (Eq. 4). Esto funciona tanto para vendedores como para compradores: para los vendedores, un intercambio es negativo y esto requiere que el número total de artículos indicados como vendidos en el árbol sea al menos igual al número total vendido según lo definido en el intercambio. También necesitamos la propagación ascendente: cada vez que un nodo que no sea la raíz esté satisfecho, su padre también debe estar satisfecho (por β ∈Child(β) satiβ ≤ ICy i (β)satiβ en la Ecuación 5). Finalmente, necesitamos la propagación hacia abajo: cada vez que un nodo interno se satisface, entonces el número apropiado de hijos también debe estar satisfecho (Ec. 5). El valor total del comercio λi, dado el árbol de ofertas Ti, se define como: vi(Ti, λi) = máximo sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) El lenguaje basado en árboles generaliza los lenguajes existentes. Por ejemplo: IC(2, 2) en un nodo con 2 hijos es equivalente a un operador AND; IC(1, 3) en un nodo con 3 hijos es equivalente a un operador OR; e IC(1, 1) en un nodo con 2 hijos es equivalente a un operador XOR. De manera similar, los lenguajes de oferta XOR/OR pueden ser expresados directamente como un árbol de oferta en nuestro lenguaje. La determinación del ganador Este apartado define el problema de determinación del ganador, el cual está formulado como un MIP y resuelto en nuestra implementación con un solucionador comercial. El solucionador utiliza búsqueda de ramificación y acotamiento con generación de cortes dinámicos y heurísticas de ramificación para resolver MIPs grandes en tiempos de ejecución económicamente factibles. El lenguaje OR* es el lenguaje OR con elementos ficticios para proporcionar estructura adicional. OR* se sabe que es expresivo y conciso. Sin embargo, no se sabe si OR* domina a XOR/OR en cuanto a concisión [23]. En la definición de la representación MIP, tenemos cuidado de evitar una enumeración basada en XOR de todos los paquetes. Una variación del problema de WD se reutiliza muchas veces dentro del intercambio, por ejemplo, para la generación de columnas en la fijación de precios y para verificar la preferencia revelada. Dado el conjunto de árboles de ofertas T = (T1, . . . , Tn) y la asignación inicial x0, la formulación mixta entera para WD es: WD(T, x0): max λ, sat ¢ i ¢ β ∈ Ti viβ · satiβ sujeto a (1), (2), satiβ ∈ {0, 1}, λij ∈ sati ∈ válido(Ti, λi), ∀i. Algunos bienes pueden quedar sin asignar porque se permite la disposición libre dentro de las reglas de liquidación de la determinación del ganador. Estos artículos pueden ser asignados de nuevo a los agentes que vendieron los artículos, es decir, para los cuales λij < 0. 4.3 Cálculo de Pagos Umbral La regla de pago umbral se basa en los pagos en el mecanismo de Vickrey-Clarke-Groves (VCG) [15], que en sí mismo es veraz y eficiente pero no satisface el equilibrio presupuestario. El equilibrio presupuestario requiere que los pagos totales al intercambio sean iguales a los pagos totales realizados por el intercambio. En VCG, el pago pagado por el agente i es pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) donde λ∗ es el intercambio eficiente, V ∗ es el valor reportado de este intercambio, y V−i es el valor reportado del intercambio eficiente que se implementaría sin el postor i. Llamamos a ∆vcg,i = V ∗ − V−i el descuento VCG. Por ejemplo, en el Ejemplo 1 pvcg,vendedor = −10 − (+10 − 0) = −20 y pvcg,comprador = +20 − (+10 − 0) = 10, y el intercambio se llevaría a cabo con un déficit presupuestario de −20 + 10 = −10. La regla de pago del umbral [24] determina pagos equilibrados presupuestarios para minimizar el error máximo entre todos los agentes respecto al resultado VCG. Definición 2. El esquema de pago de umbral implementa el intercambio eficiente λ∗ dado los ofertas, y establece los pagos pthresh,i = ˆvi(λ∗ i ) − ∆i, donde ∆ = (∆1, . . . , ∆n) se establece para minimizar maxi(∆vcg,i − ∆i) sujeto a ∆i ≤ ∆vcg,i e   i ∆i ≤ V ∗ (esto garantiza el equilibrio presupuestario). Ejemplo 4. En el Ejemplo 2, los descuentos de VCG son (9, 2, 0, 1, 0) para el vendedor y cuatro compradores respectivamente, los pagos de VCG son (−9, 4, 0, 2, 0) y el intercambio se realiza con un déficit de -3. En Threshold, los descuentos son (8, 1, 0, 0, 0) y los pagos son (−8, 5, 0, 3, 0). Esto minimiza el error en el peor de los casos para los descuentos VCG en todos los esquemas de pago equilibrados en presupuesto. Los pagos de umbral están diseñados para minimizar el incentivo máximo ex post para manipular. Krych [16] confirmó que Threshold promueve la eficiencia asignativa en el equilibrio de Bayes-Nash restringido y aproximado. 5. El diseño ICE Estamos listos para presentar el diseño de intercambio combinatorio iterativo (ICE). Se introducen varios componentes nuevos, en relación con el diseño para el intercambio único. En lugar de proporcionar valoraciones precisas, los postores pueden proporcionar valoraciones inferiores y superiores y revisar esta información de oferta en cada ronda. El intercambio proporciona retroalimentación basada en precios 252 para guiar a los postores en este proceso, y finaliza con un intercambio eficiente (o aproximadamente eficiente) con respecto a las valoraciones reportadas. En cada ronda t ∈ {0, 1, . . .} se utilizan los límites inferiores y superiores actuales, vt y vt, para definir un perfil de valoración provisional vα (la α-valoración), junto con un intercambio provisional λt y precios provisionales pt = (pt 1, . . . , pt m) en los artículos. La α-valoración es una combinación lineal de las valoraciones superiores e inferiores actuales, con αEFF ∈ [0, 1] elegido endógenamente en función de la cercanía del intercambio optimista (en v) y el intercambio pesimista (en v). Los precios pt se utilizan para informar una regla de actividad y avanzar hacia un comercio eficiente. 5.1 Valoraciones superiores e inferiores El lenguaje de la oferta se amplía para permitir que un oferente i informe un valor inferior y superior (viβ, viβ) en cada nodo. Estos ocupan el lugar del valor exacto viβ definido en la Sección 4.1. Basándonos en estas etiquetas, podemos definir las funciones de valoración vi(Ti, λi) y vi(Ti, λi), utilizando exactamente la misma semántica que en la Ecuación (6). Decimos que un árbol de ofertas está bien formado si viβ ≤ viβ para todos los nodos. El siguiente lema es útil: Lema 1. Dado un árbol bien formado, T, entonces vi(Ti, λi) ≤ vi(Ti, λi) para todos los intercambios. Prueba. Supongamos que existe algún λi para el cual vi(Ti, λi) > vi(Ti, λi). Entonces, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ. Sin embargo, esto es una contradicción porque el intercambio λ que define vi(Ti, λi) sigue siendo factible con límites superiores vi, y viβ ≥ viβ para todos los nodos β en un árbol bien formado. 5.2 Retroalimentación de precios En cada ronda, se determinan los precios de equilibrio competitivo aproximados (CE), pt = (pt 1, . . . , pt m). Dado estos precios provisionales, el precio en el intercambio λi para el postor i es pt (λi) = j≤m pt j · λij. Definición 3 (precios de la CE). Los precios p∗ son precios de equilibrio competitivo si el intercambio eficiente λ∗ está respaldado a precios p∗, de modo que para cada postor: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) Los precios de CE no siempre existirán y a menudo necesitaremos calcular precios aproximados [5]. Extendemos las ideas de Rassenti et al. [26], Kwasnica et al. [17] y Dunford et al. [12], y seleccionamos precios aproximados de la siguiente manera: I: Precisión. Primero, calculamos los precios que minimizan el error máximo en las restricciones de mejor respuesta de todos los postores. II: Equidad. Segundo, rompemos los empates para preferir precios que minimicen la desviación máxima de los pagos umbral entre todos los postores. III: Equilibrio. En tercer lugar, rompemos los empates para preferir precios que minimicen el precio máximo entre todos los artículos. En conjunto, estos pasos están diseñados para promover la informatividad de los precios en impulsar el progreso a lo largo de las rondas. Al calcular los precios, explicamos cómo calcular precios aproximados (o de otra manera) para lenguajes de oferta estructurados, sin enumerar todos los intercambios posibles. Para esto, adoptamos la generación de restricciones para manejar de manera eficiente un número exponencial de restricciones. Cada paso se describe detalladamente a continuación. Yo: Precisión. Adoptamos una definición de precisión de precio que generaliza las nociones adoptadas en trabajos anteriores para lenguajes de oferta no estructurados. Que λt denote el comercio provisional actual y suponga que la valoración provisional es vα. Para calcular precios de CE precisos, consideramos: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j. Este programa lineal (LP) está diseñado para encontrar precios que minimicen el error en el peor de los casos entre todos los agentes. De la definición de los precios de equilibrio competitivo (CE), se sigue que los precios de equilibrio competitivo tendrían δ = 0 como solución a (9), momento en el cual el intercambio λt i estaría en el conjunto de mejor respuesta de cada agente (con λt i = ∅, es decir, sin intercambio, para todos los agentes sin excedente para el intercambio a los precios). Ejemplo 5. Podemos ilustrar la formulación (9) en el Ejemplo 2, asumiendo para simplificar que vα = v (es decir, verdad). El comercio eficiente asigna AB al comprador 1 y CD al comprador 3. La precisión buscará los precios p(A), p(B), p(C) y p(D) para minimizar el δ ≥ 0 requerido para satisfacer las restricciones: p(A) + p(B) + p(C) + p(D) ≥ 0 (vendedor) p(A) + p(B) ≤ 6 + δ (comprador 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (comprador 2) p(C) + p(D) ≤ 3 (comprador 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (comprador 4) Una solución óptima requiere que p(A) = p(B) = 10/3, con δ = 2/3, y que p(C) y p(D) tomen valores como p(C) = p(D) = 3/2. Pero, (9) tiene un número exponencial de restricciones (Ec. 10). En lugar de resolverlo explícitamente, utilizamos la generación de restricciones [4] y generamos dinámicamente un subconjunto suficiente de restricciones. Que \\(i\\) denote un subconjunto manejable de todos los intercambios factibles posibles para el oferente \\(i\\). Entonces, una versión relajada de (9) (escrita ACC) se formula sustituyendo (10) con vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) donde   i es un conjunto de intercambios que son factibles para el postor i dado las otras ofertas. Fijando los precios p∗, luego resolvemos n subproblemas (uno para cada postor), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0), (12) para verificar si la solución (p∗, δ∗) a ACC es factible en el problema (9). En R-WD(i) el objetivo es determinar un intercambio más preferido para cada postor a estos precios. Que ˆλi denote la solución a R-WD(i). Verificar la condición: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) y si esta condición se cumple para todos los postores i, entonces la solución (p∗ , δ∗ ) es óptima para el problema (9). De lo contrario, se agrega el intercambio ˆλi a i para todos los postores i para los cuales esta restricción se viola en 253 y volvemos a resolver el LP con el nuevo conjunto de restricciones. II: Equidad. Segundo, rompemos los empates restantes para preferir precios justos: eligiendo precios que minimicen el error en el peor de los casos con respecto a los pagos umbral (es decir, la utilidad para los postores con pagos umbral), pero sin elegir precios que sean menos precisos. Ejemplo 6. Por ejemplo, la precisión en el Ejemplo 1 (representado en la Figura 1) requiere que 12 ≤ pA + pB ≤ 16 (para vα = v). En estas valoraciones, los pagos umbral serían de 2 para tanto el vendedor como el comprador. Esto se puede lograr exactamente en la fijación de precios con pA + pB = 14. El método de desempate de equidad se formula como el siguiente LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima, de ACC. El objetivo aquí es el mismo que en la regla de pago del umbral (ver Sección 4.3): minimizar el error máximo entre el pago del postor (en vα) para el intercambio provisional y el pago VCG (en vα). El problema FAIR también se resuelve mediante la generación de restricciones, utilizando R-WD(i) para agregar restricciones adicionales violadas según sea necesario. III: Equilibrio. En tercer lugar, rompemos los empates restantes para preferir precios equilibrados: eligiendo precios que minimicen el precio máximo entre todos los artículos. Volviendo de nuevo al Ejemplo 1, representado en la Figura 1, vemos que la precisión y la equidad requieren que p(A) + p(B) = 14. Finalmente, el conjunto de equilibrio establece que p(A) = p(B) = 7. El equilibrio está justificado cuando, manteniendo todo lo demás igual, los elementos son más propensos a tener valores similares que diferentes. El LP para el equilibrio se formula de la siguiente manera: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima de ACC y π∗ representa el error en la solución óptima de FAIR. La generación de restricciones también se utiliza para resolver BAL, generando nuevos intercambios para i según sea necesario. El problema R-WD(i) es una especialización del problema WD, en el que el objetivo es maximizar el pago de un único postor, en lugar del valor total entre todos los postores. Se resuelve como un MIP, al reescribir el objetivo en WD(T, x0) como max{viβ · satiβ − j p∗ j · λij} para el agente i. Por lo tanto, la estructura del lenguaje del árbol de ofertas se explota para generar nuevas restricciones, ya que esto se resuelve como un MIP conciso. Los otros postores se mantienen en el MIP (pero no aparecen en el objetivo) y se utilizan para definir el espacio de intercambios factibles. Los métodos de Dunford et al. [12], que utilizan un enfoque de núcleo, también están estrechamente relacionados. El uso del equilibrio fue defendido por Kwasnica et al. [17]. Dunford et al. [12] prefieren suavizar los precios a lo largo de las rondas. Comentario 1: Refinamiento lexicográfico. Para los tres subproblemas también realizamos un refinamiento lexicográfico (con respecto a los postores en ACC y FAIR, y con respecto a los bienes en BAL). Por ejemplo, en ACC minimizamos sucesivamente el error máximo entre todos los postores. Dada una solución inicial, primero identificamos el error en todos los postores para quienes una restricción (11) está vinculante. Para dicho postor i, la restricción se reemplaza por vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) y el error para el postor i ya no aparece explícitamente en el objetivo. ACC se vuelve a resolver y avanza al minimizar aún más el error máximo entre todos los postores que aún no han sido identificados. Esto continúa, fijando a cualquier nuevo postor para quien una de las restricciones (11) sea vinculante, hasta que el error esté optimizado lexicográficamente para todos los postores. El mismo proceso exacto se repite para FAIR y BAL, con los postores fijados y las restricciones (15) reemplazadas por π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (donde π∗ i es el objetivo actual) en FAIR, y los artículos fijados y las restricciones (18) reemplazadas por p∗ j ≥ pj (donde p∗ j representa el objetivo para el precio máximo en ese artículo) en BAL. Comentario 2: Computación. Todos los límites en i se mantienen, y este conjunto crece en todas las etapas y en todas las rondas del intercambio. Por lo tanto, el esfuerzo computacional en la generación de restricciones se reutiliza. En la implementación, nos aseguramos de abordar una serie de problemas que surgen debido a problemas de punto flotante. Preferimos pecar de conservadores al determinar si agregar o no otra restricción al realizar la verificación (13). Esto evita problemas de inviabilidad posteriores. Además, al fijar a los postores con el fin de refinar lexicográficamente, relajamos las restricciones asociadas con un pequeño > 0 en el lado derecho. 5.3 Reglas de Actividad de Preferencia Revelada El papel de las reglas de actividad en la subasta es garantizar tanto la consistencia como el progreso en las rondas [21]. La consistencia en nuestro intercambio requiere que los oferentes ajusten los límites a medida que avanza el intercambio. Las reglas de la actividad garantizan que los postores estén activos durante las primeras rondas y promueven una elicitación útil a lo largo del intercambio. Adoptamos una regla de actividad de preferencia revelada (RP) simple. La idea se basa vagamente en la regla de RP en Ausubel et al. [1], donde se utiliza para los AC unilaterales. La motivación es requerir más que simplemente consistencia: necesitamos que los oferentes proporcionen suficiente información para que el sistema pueda demostrar que una asignación es (aproximadamente) eficiente. Es útil pensar en los postores interactuando con agentes de proxy que actuarán en su nombre al responder a los precios provisionales pt−1 determinados al final de la ronda t − 1. El único conocimiento que tiene un intermediario sobre la valoración de un postor es a través del árbol de ofertas. Supongamos que un intermediario fue consultado por la bolsa y se le preguntó en qué operación estaba más interesado el oferente a los precios provisionales. La regla de RP dice lo siguiente: el proxy debe tener suficiente 7. Por ejemplo, aplicando esto a la precisión en el Ejemplo 2, resolvemos una vez y encontramos que los postores 1 y 2 son vinculantes, con un error δ∗ = 2/3. Fijamos estos y luego minimizamos el error para los postores 3 y 4. Finalmente, esto da p(A) = p(B) = 10/3 y p(C) = p(D) = 5/3, con precisión de 2/3 para los postores 1 y 2 y 1/3 para los postores 3 y 4. Se necesitan 254 información para poder determinar este intercambio que maximiza el excedente al precio actual. Considera los siguientes ejemplos: Ejemplo 7. Un postor tiene XOR(+A, +B) y un valor de +5 en la hoja +A y un rango de valores de [5,10] en la hoja +B. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el representante sabe que, sin importar cómo se resuelva la incertidumbre restante del valor en +B, el postor siempre preferirá (débilmente) +B a +A. Ejemplo 8. Un postor tiene XOR(+A, +B) y límites de valor [5, 10] en el nodo raíz y un valor de 1 en la hoja +A. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el postor siempre preferirá +A a +B a precios iguales, sin importar cómo se resuelva finalmente el valor incierto en el nodo raíz. Sobrecargando la notación, sea vi ∈ Ti una valoración que sea consistente con las valoraciones inferiores y superiores en el árbol de oferta Ti. Definición 4. El árbol de oferta Ti satisface RP a precios pt−1 si y solo si existe algún intercambio factible L∗ para el cual, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. Para determinar esto para el postor i, resolvemos una secuencia de problemas, cada uno de los cuales es una variación del problema WD. Primero, construimos un intercambio candidato de límite inferior, que es un intercambio factible que resuelve: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) La solución π∗ l a RP1(i) representa el pago máximo que el postor i puede lograr en todos los intercambios factibles, dado su valoración pesimista. Segundo, rompemos los lazos para encontrar un intercambio con la máxima incertidumbre del valor en todas las posibles soluciones a RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] sujeto a λ ∈ Feas(x0) (22) vi(λi) − pt−1(λi) ≥ π∗ l (23) Adoptamos la solución L∗ i como nuestro candidato para el intercambio que puede satisfacer RP. Para entender la importancia de esta regla de desempate, considera el Ejemplo 7. El proxy puede demostrar que +B pero no +A es una mejor respuesta para todos los vi ∈ Ti, y debería elegir +B como su candidato. Observa que +B es un contraejemplo para +A, pero no al revés. Ahora, construimos una valuación modificada ˜vi, estableciendo ˜viβ = viβ, si β ∈ sat(L∗ i) viβ, de lo contrario. (24) donde sat(L∗ i) es el conjunto de nodos que están satisfechos en el árbol de límite inferior para el comercio L∗ i. Dada esta valuación modificada, encontramos U∗ para resolver: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Sea π∗ u el beneficio de este intercambio óptimo en los valores modificados ˜v. Llamamos al intercambio U∗ i el intercambio testigo. Mostramos en la Proposición 1 que la regla RP se cumple si y solo si π∗ l ≥ π∗ u. La construcción de la valoración modificada como ˜vi reconoce que existe incertidumbre compartida en las operaciones que cumplen los mismos nodos en un árbol de ofertas. El ejemplo 8 ayuda a ilustrar esto. Simplemente usando vi en RP3(i), encontraríamos que L∗ i es comprar A con un pago de π∗ l = 3 pero luego encontraríamos que U∗ i es comprar B con π∗ u = 7 y fallar en RP. Debemos reconocer que, sin importar cómo se resuelva la incertidumbre en el nodo raíz, afectará a +A y +B de la misma manera. Por esta razón, establecimos ˜viβ = viβ = 5 en el nodo raíz, que es exactamente el mismo valor que se adoptó al determinar π∗ l. Entonces, RP3(i) aplicado a U∗ i da como resultado comprar A y se considera que el test de RP ha sido aprobado. Proposición 1. El árbol de oferta Ti satisface RP dado los precios pt−1 si y solo si cualquier intercambio de límite inferior L∗ i que resuelve RP1(i) y RP2(i) satisface: vi(Ti, L∗ i) − pt−1 (L∗ i) ≥ ˜vi(Ti, U∗ i) − pt−1 (U∗ i), (26) donde ˜vi es la valoración modificada en la ecuación (24). Prueba. Para la suficiencia, observe que la diferencia en el pago entre el intercambio L∗ i y otro intercambio λi no se ve afectada por la forma en que se resuelve la incertidumbre en cualquier nodo que esté satisfecho tanto en L∗ i como en λi. Corregir los valores en ˜vi en los nodos satisfechos en L∗ i tiene el efecto de eliminar esta consideración cuando se selecciona un intercambio U∗ i que satisface uno de estos nodos. Por otro lado, fijar los valores en estos nodos no tiene efecto en las operaciones consideradas en RP3(i) que no comparten un nodo con L∗ i. Para la dirección necesaria, primero mostramos que cualquier intercambio que satisfaga RP debe resolver RP1(i). Supongamos lo contrario, que algún λi con un pago mayor que π∗ l cumple con RP. Sin embargo, la valoración vi ∈ Ti junto con L∗ i presenta un contraejemplo a RP (Eq. 20). Ahora, supongamos (por contradicción) que algún λi con ganancia máxima π∗ l pero incertidumbre menor que L∗ i cumple con RP. Procede mediante el análisis de casos. Caso a): solo una solución a RP1(i) tiene un valor incierto y, por lo tanto, λi tiene un valor seguro. Pero, esto no puede satisfacer a RP porque L∗ i con un valor incierto sería un contraejemplo para RP (Eq. 20). Caso b): dos o más soluciones a RP1(i) tienen un valor incierto. Aquí argumentamos primero que uno de estos intercambios debe satisfacer un (débil) superconjunto de todos los nodos con valor incierto que son satisfechos por todos los demás intercambios en este conjunto. Esto es por RP. Sin esto, entonces para cualquier elección de comercio que resuelva RP1(i), hay otro comercio con un conjunto disjunto de nodos inciertos pero satisfechos que proporciona un contraejemplo a RP (Ec. 20). Ahora, considera el caso en el que algún intercambio contiene un superconjunto de todos los nodos inciertos satisfechos de los otros intercambios. Claramente RP2(i) elegirá este intercambio, L∗ i, y λi debe satisfacer un subconjunto de estos nodos (por suposición). Pero ahora vemos que λi no puede cumplir con RP porque L∗ i sería un contraejemplo para RP. El incumplimiento de la regla de actividad debe tener alguna consecuencia. En las reglas actuales, la acción predeterminada que elegimos es establecer los límites superiores en las valoraciones hasta el valor máximo del precio provisional en un nodo8 y el valor del límite inferior en ese nodo.9 Tal postor puede permanecer activo 8 El precio provisional en un nodo se define como el precio total mínimo entre todos los intercambios factibles para los cuales el subárbol enraizado en el árbol está satisfecho. 9 Esto es completamente análogo a cuando un postor en una subasta de reloj ascendente deja de ofertar a un precio: no se le permite ofertar a un precio más alto nuevamente en rondas futuras. 255 dentro del intercambio, pero solo con valoraciones que sean consistentes con estos nuevos límites. 5.4 Retroalimentación del postor En cada ronda, nuestro diseño predeterminado proporciona a cada postor el intercambio provisional y también los precios provisionales actuales. Ver el 7 para una discusión adicional. También brindamos orientación para ayudar a un licitador a cumplir con la regla de RP. Que sat(L∗ i ) y sat(U∗ i ) denoten los nodos que se satisfacen en los intercambios L∗ i y U∗ i, tal como se calcula en RP1-RP3. Lema 2. Cuando RP falla, un postor debe aumentar un límite inferior en al menos un nodo en sat(L∗ i) \\ sat(U∗ i) o disminuir un límite superior en al menos un nodo en sat(U∗ i) \\ sat(L∗ i) para cumplir con la regla de actividad. Prueba. Cambiar los valores superiores o inferiores en los nodos que no cumplen con ninguno de los intercambios no cambia ni L∗ i ni U∗ i, y no altera el beneficio de estos intercambios. Por lo tanto, la condición de RP seguirá fallando. De igual manera, cambiar los límites en los nodos que se satisfacen en ambos intercambios no tiene efecto en la preferencia revelada. Un cambio en un límite inferior en un nodo compartido afecta tanto a L∗ i como a U∗ i de manera idéntica debido al uso de la valoración modificada para determinar U∗ i. Un cambio en un límite superior en un nodo compartido no tiene efecto en la determinación de L∗ i o U∗ i. Ten en cuenta que cuando sat(U∗ i ) = sat(L∗ i ) entonces la condición (26) siempre se satisface trivialmente, por lo que la orientación en el lema siempre está bien definida cuando RP falla. Este es un mecanismo de retroalimentación elegante porque es adaptable. Una vez que un postor realiza algunos cambios en un subconjunto de estos nodos, el postor puede consultar el intercambio. El intercambio puede responder sí, o puede revisar el conjunto de nodos sat(λ∗ l ) y sat(λ∗ u) según sea necesario. 5.5 Condiciones de Terminación Una vez que cada postor haya comprometido sus nuevas ofertas (y haya cumplido con la regla de RP o haya sufrido la penalización), entonces la ronda t se cierra. En este punto, la tarea es determinar la nueva valoración α, y a su vez la asignación provisional λt y los precios provisionales pt. Una condición de terminación también se verifica, para determinar si se debe pasar el intercambio a una ronda final y definitiva. Para definir la α-valoración, calculamos las siguientes dos cantidades: Pesimista en Pesimista (PP). Determinar un intercambio eficiente, λ∗ l, en valores pesimistas, es decir, resolver maxλ   i vi(λi), y establecer PP=  i vi(λ∗ li). Pessimista a Optimista (PO) Determinar un intercambio eficiente, λ∗ u, en valores optimistas, es decir, resolver maxλ   i vi(λi), y establecer PO=  i vi(λ∗ ui). Primero, hay que tener en cuenta que PP ≥ PO y PP ≥ 0 por definición, para todos los árboles de oferta, aunque PO puede ser negativo (porque el intercambio correcto en v no es actualmente un intercambio útil en v). Reconociendo esto, definir γeff (PP, PO) = 1 + PP − PO PP , (27) cuando PP > 0, y observar que γeff (PP, PO) ≥ 1 cuando esto está definido, y que γeff (PP, PO) comenzará siendo grande y luego tenderá hacia 1 a medida que la asignación optimista converge hacia la asignación pesimista. En cada ronda, definimos αeff ∈ [0, 1] como: αeff = 0 cuando PP es 0, 1/γeff en otro caso (28), lo cual es 0 cuando PP es 0 y luego tiende hacia 1 una vez que PP > 0 en alguna ronda. Esto se utiliza para definir la α-valoración vα i = αeff vi + (1 − αeff )vi, ∀i, (29) que se utiliza para definir la asignación provisional y los precios provisionales. El efecto es definir endógenamente un horario para pasar de valores optimistas a pesimistas a lo largo de las rondas, basado en qué tan cercanos estén los intercambios entre sí. Condición de terminación. Al avanzar a la última y definitiva ronda, y finalmente cerrar, también nos preocupamos por la convergencia de pagos, además de la convergencia hacia un comercio eficiente. Para esto introducimos otro parámetro, αthresh ∈ [0, 1], que tiende de 0 a 1 a medida que los pagos de umbral en las valoraciones inferiores y superiores convergen. Considera el siguiente parámetro: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive), (30) el cual está definido para PP > 0, donde pthresh(v) denota los pagos de umbral en el perfil de valoración v, Nactive es el número de postores que están activamente involucrados en el comercio en la transacción de PP, y || · ||2 es la norma L2. Ten en cuenta que γthresh está definido para pagos y no para ganancias. Esto es apropiado porque la precisión del resultado del intercambio es lo que importa: es decir, el comercio y los pagos. Dado esto, definimos αthresh = 0 cuando PP es 0 y 1/γthresh en otro caso (31), lo cual es 0 mientras PP es 0 y luego tiende hacia 1 a medida que se avanza. Definición 5 (terminación). ICE pasa a una ronda final cuando se cumple una de las siguientes condiciones: 1. αeff ≥ CUTOFFeff y αthresh ≥ CUTOFFthresh, 2. no hay intercambio en los valores optimistas, donde CUTOFFeff, CUTOFFthresh ∈ (0, 1] determinan la precisión requerida para la terminación. Al final de la última y definitiva ronda, vα = v se utiliza para definir el intercambio final y los pagos finales del umbral. Ejemplo 9. Considera nuevamente el Ejemplo 1, y considera los límites superiores e inferiores como se muestra en la Figura 1. Primero, si los límites de los vendedores fueron [−20, −4] entonces hay un intercambio optimista pero no hay un intercambio pesimista, y PO = −4 y PP = 0, y αeff = 0. En los límites representados, tanto los intercambios optimistas como pesimistas ocurren y PO = PP = 4 y αeff = 1. Sin embargo, podemos ver que los pagos umbral son (17, −17) en v pero (14, −14) en v. Al evaluar γthresh, tenemos γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, y αthresh = 2/5. Para CUTOFFthresh < 2/5, el intercambio permanecería abierto. Por otro lado, si el valor que los compradores asignan a +AB estaba entre [18, 24] y el valor que los vendedores asignan a -AB estaba entre [-12, -6], los pagos umbral son (15, -15) en ambos límites superior e inferior, y αthresh = 1. 256 Líneas de Propósito de Componente Agente. El modelo 762 de Soporte Captura el comportamiento estratégico y las decisiones de revelación de información. Proporciona soporte XML para cargar bienes y valoraciones en el mundo 200. El mundo 200 realiza un seguimiento de todos los detalles de agentes, bienes y valoraciones. El Controlador y Comunicación de Intercambio 998 controla el intercambio y coordina el comportamiento remoto de los agentes. El Lenguaje de Subasta 1119 implementa el lenguaje de subasta basado en árboles. El Motor de Reglas de Actividad 203 implementa la regla de preferencia revelada con soporte de rango. El Motor de Reglas de Cierre 137 verifica si se ha alcanzado la condición de terminación de la subasta. El Motor WD 377 proporciona lógica relacionada con WD. El Motor de Precios 460 proporciona lógica relacionada con precios. Los Constructores MIP 346 traducen la lógica utilizada por los motores en nuestra formulación general de optimización. Los Constructores de Precios 256 son utilizados por tres etapas de precios. Los Constructores de Determinación de Ganadores 365 son utilizados por WD, regla de actividad, regla de cierre y generación de restricciones de precios. El código de Soporte del Marco 510 facilita la sustitución modular de los componentes anteriores. Tabla 1: Desglose de Componentes y Código de Intercambio. La INFRAESTRUCTURA DE SISTEMAS ICE consta de aproximadamente 6502 líneas de código Java, divididas en los paquetes funcionales descritos en la Tabla 1.10. El prototipo es modular para que los investigadores puedan reemplazar fácilmente los componentes para experimentación. Además del intercambio central discutido en este documento, hemos desarrollado un componente de agente que permite a un usuario simular el comportamiento y conocimiento de otros jugadores en el sistema, lo que le permite al usuario formular su estrategia antes de jugar realmente. Un usuario especifica un modelo de valoración en una interpretación XML de nuestro lenguaje de oferta, que se revela al intercambio a través de la estrategia de los agentes. Las principales tareas de intercambio son manejadas por motores que dictan la lógica no específica del optimizador. Estos motores impulsan los constructores MIP/LP apropiados. Nos dimos cuenta de que todas nuestras formulaciones de optimización se reducen a dos clases de problemas de optimización. El primero, utilizado para la determinación del ganador, la regla de actividad, la regla de cierre y la generación de restricciones en la fijación de precios, es un MIP que encuentra intercambios que maximizan el valor, manteniendo constantes los precios y los márgenes. El segundo, utilizado por las tres etapas de fijación de precios, es un LP que mantiene constantes las operaciones comerciales, buscando minimizar la holgura, el beneficio o los precios. Aprovechamos la similitud de estos problemas utilizando constructores de LP/MIP comunes que difieren solo en unos pocos ganchos funcionales para proporcionar las variables correctas para la optimización. Hemos generalizado nuestra interfaz de optimización del back-end (actualmente soportamos CPLEX y LPSolve con licencia LGPL) y podemos aprovechar la capacidad de equilibrio de carga y resolución paralela de MIP/LP que esta biblioteca proporciona. DISCUSIÓN El lenguaje de oferta se definió para permitir una simetría perfecta entre compradores y vendedores y proporcionar expresividad en un dominio de intercambio, por ejemplo, para oferentes mixtos interesados en ejecutar operaciones como swaps. Esto resultó especialmente desafiante. El avance se produjo cuando nos enfocamos en los cambios de valor para las operaciones en lugar de proporcionar valores absolutos para las asignaciones. Para simplificar, requerimos la misma estructura de árbol tanto para las valoraciones superiores como inferiores. El tamaño del código se mide en líneas de código fuente físicas (SLOC), generadas utilizando el Contador SLOC de David A. Wheeler. El total de 6502 incluye 184 para instrumentación (no se muestra en la tabla). La interfaz del solucionador JOpt es de otras 1964 líneas, y Castor genera automáticamente alrededor de 5200 líneas de código para la manipulación de archivos XML. Esto permite que el propio lenguaje garantice la consistencia (con el valor superior al menos igual al valor inferior en todas las operaciones) y aplique un estrechamiento monótono de estos límites para todas las operaciones en todas las rondas. También proporciona un método eficiente para verificar la regla de actividad de RP, ya que facilita razonar sobre la incertidumbre compartida entre las operaciones. La decisión de adoptar un enfoque directo y delegado en el cual los licitadores expresan sus valores superiores e inferiores a un agente de confianza que interactúa con la bolsa se tomó temprano en el proceso de diseño. En muchos aspectos, esta es la forma más clara y directa de generalizar el diseño en Parkes et al. [24] y hacerlo iterativo. Además, esto elimina muchas oportunidades para la manipulación estratégica: los postores están restringidos a hacer declaraciones (incrementales) sobre sus valoraciones. Otra ventaja es que hace que la regla de la actividad sea fácil de explicar: los postores siempre pueden cumplir con la regla de la actividad ajustando los límites de manera que su valor real permanezca en el soporte. Quizás lo más importante es que tener información explícita sobre los valores superiores e inferiores permite avanzar en las primeras rondas, incluso cuando no hay un intercambio eficiente a valores pesimistas. La información de los límites superior e inferior también proporciona orientación sobre cuándo terminar. Ten en cuenta que tomado por sí mismo, PP = PO no implica que el intercambio provisional actual sea eficiente con respecto a todos los valores consistentes con la información de valor actual. La diferencia en los valores entre diferentes oficios, agregada entre todos los postores, podría ser similar en los límites inferiores y superiores pero bastante diferente en los valores intermedios (incluyendo la verdad). Sin embargo, conjeturamos que PP = PO demostrará ser un indicador excelente de eficiencia en entornos prácticos donde la forma de las valoraciones superiores e inferiores sí transmita información útil. Esto merece una investigación experimental. Además, el uso del precio y la actividad de RP proporciona garantías adicionales. Adoptamos precios lineales (precios en artículos individuales) en lugar de precios no lineales (con precios en un intercambio que no son iguales a la suma de los precios de los artículos componentes) al principio del proceso de diseño. La concisión de esta representación de precios es muy importante para la viabilidad computacional dentro del intercambio y también para promover la simplicidad y transparencia para los postores. La regla de actividad RP fue adoptada más tarde, y es una buena elección debido a sus excelentes propiedades teóricas cuando se combina con los precios de CE. Lo siguiente se puede establecer fácilmente: dados los precios CE exactos pt−1 para el comercio provisional 12. Esto contrasta con enfoques basados en precios indirectos, como el reloj-proxy [1], en los que los postores deben ser capaces de razonar sobre las restricciones RP implicadas por las ofertas en cada ronda. 257 λt−1 en valoraciones vα, entonces si los valores superiores e inferiores al inicio de la ronda t ya satisfacen la regla RP (y sin necesidad de ningún desempate), el comercio provisional es eficiente para todas las valoraciones consistentes con los árboles de ofertas actuales. Cuando existen precios lineales de CE, esto proporciona una declaración de solidez y completitud: si PP = PO, existen precios lineales de CE, y se cumple la regla de RP, el intercambio provisional es eficiente (solidez); si los precios son precios exactos de CE para el intercambio provisional en vα, pero el intercambio es ineficiente con respecto a algún perfil de valoración consistente con los árboles de oferta actuales, entonces al menos un postor debe fallar en RP con su árbol de oferta actual y se avanzará (completitud). El trabajo futuro debe estudiar la convergencia experimentalmente y extender esta teoría para permitir precios aproximados. Algunos aspectos estratégicos de nuestro diseño de ICE merecen comentario y estudio adicional. Primero, no afirmamos que responder sinceramente a la regla de RP sea un equilibrio ex post. Sin embargo, el intercambio está diseñado para imitar la regla de Umbral en su esquema de pago, que se sabe que tiene propiedades de incentivo útiles. Debemos tener cuidado, sin embargo. Por ejemplo, no sugerimos proporcionar αeff a los licitadores, porque a medida que αeff se acerca a 1, informaría a los licitadores que los valores de las ofertas se vuelven irrelevantes para determinar el intercambio, sino que se utilizan simplemente para determinar los pagos (y los licitadores se volverían cada vez más reacios a aumentar sus valoraciones más bajas). Además, en este trabajo no se ha considerado la posibilidad de colusión entre los licitadores. Este es un tema que merece atención en trabajos futuros. 8. CONCLUSIONES En este trabajo diseñamos y prototipamos un intercambio combinatorio iterativo escalable y altamente expresivo. El diseño incluye muchas características interesantes, como: un nuevo lenguaje de árbol de ofertas para intercambios, un nuevo método para construir precios lineales aproximados a partir de lenguajes expresivos, y un método de elicitación con valoraciones optimistas y pesimistas con un nuevo método para evaluar una regla de actividad de preferencia revelada. El intercambio está completamente implementado en Java y se encuentra en una fase de validación. Los próximos pasos para nuestro trabajo son permitir a los licitadores refinar la estructura del árbol de oferta además de los valores en el árbol. Tenemos la intención de estudiar las propiedades de elicitación del intercambio y hemos creado un conjunto de pruebas de instancias de problemas de intercambio. Además, estamos comenzando a participar en colaboraciones para aplicar el diseño a la programación de franjas horarias de despegue y aterrizaje de aerolíneas y a la asignación de recursos en sistemas computacionales distribuidos de amplia área de red. Agradecimientos Nos gustaría dedicar este artículo a todos los participantes de CS 286r en la Universidad de Harvard en la primavera de 2004. Este trabajo está parcialmente respaldado por la subvención de la NSF IIS-0238147. REFERENCIAS [1] L. Ausubel, P. Cramton y P. Milgrom. La subasta de reloj-proxi: Un diseño práctico de <br>subasta combinatoria</br>. En Cramton et al. [9], capítulo 5. [2] M. Babaioff, N. Nisan y E. Pavlov. Mecanismos para un mercado distribuido espacialmente. En Actas de la 5ta Conferencia de la ACM sobre Comercio Electrónico, páginas 9-20. ACM Press, 2001. Dado el teorema de imposibilidad de Myerson-Satterthwaite [22] y el método mediante el cual determinamos el intercambio, no deberíamos esperar esto. [3] M. Ball, G. Donohue y K. Hoffman. Subastas para la asignación segura, eficiente y equitativa de los recursos del sistema de espacio aéreo. En S. Cramton, Shoham, editor, Subastas Combinatorias. 2004. Próximamente. [4] D. Bertsimas y J. Tsitsiklis. Introducción a la Optimización Lineal. Athena Scientific, 1997. [5] S. Bikhchandani y J. M. Ostroy. El modelo de asignación de paquetes. Revista de Teoría Económica, 107(2):377-406, 2002. [6] C. Boutilier. Una formulación POMDP de problemas de obtención de preferencias. En Proc. 18ª Conferencia Nacional de Inteligencia Artificial (AAAI-02), 2002. [7] C. Boutilier y H. Hoos. Subastando idiomas para subastas combinatorias. En Proc. 17ª Conferencia Internacional Conjunta sobre Inteligencia Artificial (IJCAI-01), 2001. [8] W. Conen y T. Sandholm. Elicitación de preferencias en subastas combinatorias. En Proc. 3ra Conf. ACM sobre Comercio Electrónico (EC-01), páginas 256-259. ACM Press, Nueva York, 2001. [9] P. Cramton, Y. Shoham y R. Steinberg, editores. Subastas combinatorias. MIT Press, 2004. [10] S. de Vries, J. Schummer y R. V. Vohra. En subastas ascendentes de Vickrey para objetos heterogéneos. Informe técnico, MEDS, Escuela Kellogg, Universidad Northwestern, 2003. [11] S. de Vries y R. V. Vohra. Subastas combinatorias: Un estudio. Revista Informs sobre Computación, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana y T. Wilson. Probando algoritmos de precios lineales para su uso en subastas combinatorias ascendentes. Informe técnico, SEOR, Universidad George Mason, 2003. [13] Y. Fu, J. Chase, B. Chun, S. Schwab, y A. Vahdat. Sharp: una arquitectura para el emparejamiento seguro de recursos. En Actas del decimonoveno simposio de principios de sistemas operativos de ACM, páginas 133-148. ACM Press, 2003. [14] B. Hudson y T. Sandholm. Efectividad de tipos de consultas y políticas para la obtención de preferencias en subastas combinatorias. En Proc. 3rd Int. Articulación. Conferencia sobre Agentes Autónomos y Sistemas Multiagente, páginas 386-393, 2004. [15] V. Krishna. Teoría de subastas. Academic Press, 2002. [16] D. Krych. \n\nEditorial Académica, 2002. [16] D. Krych. Cálculo y análisis de equilibrios de Nash de reglas de pago basadas en Vickrey para intercambios combinatorios, Harvard College, abril de 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter y C. DeMartini. Un nuevo y mejorado diseño para subastas iterativas de múltiples objetos. Ciencias de la Gestión, 2004. Aparecer. [18] E. Kwerel y J. Williams. Una propuesta para una transición rápida a la asignación de espectro por mercado. Informe técnico, Oficina de Planes y Políticas de la FCC, noviembre de 2002. [19] S. M. Lahaie y D. C. Parkes. Aplicando algoritmos de aprendizaje a la obtención de preferencias. En Proc. ACM Conf. on Electronic Commerce, páginas 180-188, 2004. [20] R. P. McAfee. Una subasta doble con estrategia dominante. Revista de Teoría Económica, 56:434-450, 1992. [21] P. Milgrom. Poniendo en práctica la teoría de subastas: La subasta ascendente simultánea. J.Pol. Econ., 108:245-272, 2000. [22] R. B. Myerson y M. A. Satterthwaite. Mecanismos eficientes para el comercio bilateral. Revista de Teoría Económica, 28:265-281, 1983. [23] N. Nisan. Subasta y asignación en subastas combinatorias. En Proc. 2ª ACM Conf. sobre Comercio Electrónico (EC-00), páginas 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam y M. Eso. Lograr el equilibrio presupuestario con esquemas de pago basados en Vickrey en intercambios. En Proc. 17ª Conferencia Internacional Conjunta de Inteligencia Artificial (IJCAI-01), páginas 1161-1168, 2001. [25] D. C. Parkes y L. H. Ungar. Subastas combinatorias iterativas: Teoría y práctica. En Proc. 17ª Conferencia Nacional de Inteligencia Artificial (AAAI-00), páginas 74-81, julio de 2000. [26] S. J. Rassenti, V. L. Smith y R. L. Bulfin. Un mecanismo combinatorio para la asignación de franjas horarias en aeropuertos. Revista Bell de Economía, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc y R. M. Harstad. Subastas combinatorias computacionalmente manejables. Ciencia de la Gestión, 44(8):1131-1147, 1998. [28] T. Sandholm y C. Boutilier. Elicitación de preferencias en subastas combinatorias. En Cramton et al. [9], capítulo 10. [29] P. R. Wurman y M. P. Wellman. AkBA: Una <br>subasta combinatoria</br> progresiva y de precio anónimo. En la Segunda Conferencia ACM sobre Comercio Electrónico, páginas 21-29, 2000. 258 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "buyers and sellers": {
            "translated_key": "compradores y vendedores",
            "is_in_text": true,
            "original_annotated_sentences": [
                "ICE: An Iterative Combinatorial Exchange David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative combinatorial exchange (ICE).",
                "The exchange incorporates a tree-based bidding language that is concise and expressive for CEs.",
                "Bidders specify lower and upper bounds on their value for different trades.",
                "These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
                "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
                "A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "The exchange is fully implemented and in a validation phase.",
                "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
                "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
                "In a double auction (DA), multiple <br>buyers and sellers</br> trade units of an identical good [20].",
                "In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language.",
                "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
                "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple <br>buyers and sellers</br> to trade multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple <br>buyers and sellers</br> and agents that are both buying and selling.",
                "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
                "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
                "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
                "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
                "This paper presents the first design for an iterative combinatorial exchange (ICE).",
                "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
                "The ICE design problem is multi-faceted and quite hard.",
                "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round.",
                "The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "The exchange has a number of interesting theoretical properties.",
                "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
                "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
                "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
                "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
                "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "The exchange is implemented in Java and is currently in validation.",
                "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
                "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
                "We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions.",
                "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based bidding language.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable.",
                "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
                "Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
                "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
                "An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade.",
                "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
                "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades.",
                "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
                "A revealed-preference activity rule [1] ensures progress across rounds.",
                "In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices.",
                "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
                "An outline of the ICE system flow of control is provided in Figure 1.",
                "We will return to this example later in the paper.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance).",
                "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round.",
                "At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29].",
                "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
                "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
                "The price generation methods that we use in ICE generalize the methods in these earlier papers.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule.",
                "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
                "We are not aware of any previous studies of iterative CEs.",
                "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
                "No dominant strategy mechanisms are known for the general CE problem.",
                "ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
                "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
                "The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
                "Rothkopf et al. [27] also describe a restricted tree-based bidding language.",
                "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
                "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
                "The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
                "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
                "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
                "A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
                "So, the final allocation is x1 = x0 + λ.",
                "Each bidder has a value vi(λi) ∈ ¡ for a trade λi.",
                "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
                "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ .",
                "Price p can be negative, indicating the bidder receives a payment for the trade.",
                "We use the term payoff interchangeably with utility.",
                "Our goal in the ICE design is to implement the efficient trade.",
                "The efficient trade, λ∗ , maximizes the total increase in value across bidders.",
                "Definition 1 (Efficient trade).",
                "The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
                "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
                "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
                "All three examples have only one seller, but this is purely illustrative.",
                "Example 1.",
                "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
                "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
                "Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
                "Example 2.",
                "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
                "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
                "The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
                "Example 3.",
                "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
                "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to <br>buyers and sellers</br>, and to extend to capture bids from mixed <br>buyers and sellers</br>, ranging from simple swaps to highly complex trades.",
                "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
                "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
                "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
                "We illustrate the language on each of Examples 1-3 in Figure 2.",
                "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
                "The nodes have zero values where no value is indicated.",
                "Internal nodes are also labeled with interval-choose (IC) ranges.",
                "Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
                "First, if a child is on then its parent must be on.",
                "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
                "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade.",
                "For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
                "On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
                "Given a trade there is often a number of ways to choose the set of satisfied nodes.",
                "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
                "Consider bid tree Ti from bidder i.",
                "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
                "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
                "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
                "Every node is also labeled with a value, viβ ∈ ¡ .",
                "Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.)",
                "Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
                "There will often be a choice.",
                "Ties are broken to maximize value.",
                "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
                "Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
                "This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade.",
                "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
                "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
                "The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
                "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
                "Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
                "OR* is known to be expressive and concise.",
                "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
                "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
                "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
                "In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆vcg,i = V ∗ − V−i the VCG discount.",
                "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
                "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome.",
                "Definition 2.",
                "The Threshold payment scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance).",
                "Example 4.",
                "In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
                "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
                "This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes.",
                "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
                "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
                "THE ICE DESIGN We are now ready to introduce the iterative combinatorial exchange (ICE) design.",
                "Several new components are introduced, relative to the design for the one-shot exchange.",
                "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
                "The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations.",
                "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
                "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v).",
                "Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
                "These take the place of the exact value viβ defined in Section 4.1.",
                "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
                "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
                "The following lemma is useful: Lemma 1.",
                "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
                "Proof.",
                "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
                "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
                "But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
                "Given these provisional prices, the price on trade λi for bidder i is pt (λi) =   j≤m pt j · λij.",
                "Definition 3 (CE prices).",
                "Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
                "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
                "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
                "II: Fairness.",
                "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
                "III: Balance.",
                "Third, we break ties to prefer prices that minimize the maximal price across all items.",
                "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
                "In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades.",
                "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
                "Each step is described in detail below.",
                "I: Accuracy.",
                "We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages.",
                "Let λt denote the current provisional trade and suppose the provisional valuation is vα .",
                "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
                "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
                "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.)",
                "Example 5.",
                "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
                "The efficient trade allocates AB to buyer 1 and CD to buyer 3.",
                "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
                "But, (9) has an exponential number of constraints (Eq. 10).",
                "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
                "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
                "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
                "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
                "In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices.",
                "Let ˆλi denote the solution to R-WD(i).",
                "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
                "Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
                "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
                "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
                "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
                "This can be exactly achieved in pricing with pA + pB = 14.",
                "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
                "The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the VCG payoff (at vα ).",
                "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
                "III: Balance.",
                "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items.",
                "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
                "Finally, balance sets p(A) = p(B) = 7.",
                "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
                "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
                "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
                "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
                "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
                "Dunford et al. [12] prefer to smooth prices across rounds.",
                "Comment 1: Lexicographical Refinement.",
                "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
                "For instance, in ACC we successively minimize the maximal error across all bidders.",
                "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
                "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
                "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
                "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL.",
                "Comment 2: Computation.",
                "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
                "Thus, the computational effort in constraint generation is re-used.",
                "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
                "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
                "This avoids later infeasibility issues.",
                "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
                "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
                "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
                "We adopt a simple revealed-preference (RP) activity rule.",
                "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
                "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
                "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
                "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
                "Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices.",
                "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
                "We pin these down and then minimize the error to bidders 3 and 4.",
                "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices.",
                "Consider the following examples: Example 7.",
                "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
                "Example 8.",
                "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
                "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
                "Definition 4.",
                "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
                "First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
                "Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP.",
                "To understand the importance of this tiebreaking rule consider Example 7.",
                "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
                "Notice that +B is a counterexample to +A, but not the other way round.",
                "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i .",
                "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v.",
                "We call trade U∗ i the witness trade.",
                "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
                "Example 8 helps to illustrate this.",
                "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
                "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
                "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
                "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
                "Proposition 1.",
                "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
                "Proof.",
                "For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
                "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes.",
                "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
                "For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i).",
                "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
                "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
                "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
                "Proceed by case analysis.",
                "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
                "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
                "Case b): two or more solutions to RP1(i) have uncertain value.",
                "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
                "This is by RP.",
                "Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
                "Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades.",
                "Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
                "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
                "Failure to meet the activity rule must have some consequence.",
                "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices.",
                "See 7 for an additional discussion.",
                "We also provide guidance to help a bidder meet the RP rule.",
                "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
                "Lemma 2.",
                "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
                "Proof.",
                "Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
                "Thus, the RP condition will continue to fail.",
                "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
                "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
                "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
                "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
                "This is an elegant feedback mechanism because it is adaptive.",
                "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
                "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
                "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
                "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
                "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
                "Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
                "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v).",
                "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
                "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
                "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
                "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
                "Termination Condition.",
                "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade.",
                "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
                "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm.",
                "Note that γthresh is defined for payments and not payoffs.",
                "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments.",
                "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
                "Definition 5 (termination).",
                "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
                "At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments.",
                "Example 9.",
                "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
                "First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0.",
                "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
                "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
                "For CUTOFFthresh < 2/5 the exchange would remain open.",
                "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
                "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the tree-based bidding language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
                "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
                "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
                "A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy.",
                "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
                "These engines drive the appropriate MIP/LP builders.",
                "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
                "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
                "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
                "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
                "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
                "DISCUSSION The bidding language was defined to allow for perfect symmetry between <br>buyers and sellers</br> and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
                "This proved especially challenging.",
                "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
                "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
                "The total of 6502 includes 184 for instrumentation (not shown in the table).",
                "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
                "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
                "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
                "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
                "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
                "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values.",
                "Upper and lower bound information also provides guidance about when to terminate.",
                "Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information.",
                "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
                "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
                "This is worthy of experimental investigation.",
                "Moreover, the use of price and RP activity provides additional guarantees.",
                "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process.",
                "The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
                "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
                "The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees.",
                "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
                "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
                "Some strategic aspects of our ICE design deserve comment, and further study.",
                "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
                "We must be careful, though.",
                "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
                "Also, no consideration has been given in this work to collusion by bidders.",
                "This is an issue that deserves some attention in future work. 8.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative combinatorial exchange.",
                "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
                "The exchange is fully implemented in Java and is in a validation phase.",
                "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
                "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
                "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
                "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
                "This work is supported in part by NSF grant IIS-0238147. 9.",
                "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
                "The clock-proxy auction: A practical combinatorial auction design.",
                "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
                "Mechanisms for a spatially distributed market.",
                "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
                "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
                "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
                "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
                "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
                "Introduction to Linear Optimization.",
                "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
                "A pomdp formulation of preference elicitation problems.",
                "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
                "Bidding languages for combinatorial auctions.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
                "Preference elicitation in combinatorial auctions.",
                "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
                "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
                "Combinatorial Auctions.",
                "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
                "On ascending Vickrey auctions for heterogeneous objects.",
                "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
                "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
                "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
                "Chase, B. Chun, S. Schwab, and A. Vahdat.",
                "Sharp: an architecture for secure resource peering.",
                "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
                "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In Proc. 3rd Int.",
                "Joint.",
                "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [16] D. Krych.",
                "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
                "A new and improved design for multi-object iterative auctions.",
                "Management Science, 2004.",
                "To appear. [18] E. Kwerel and J. Williams.",
                "A proposal for a rapid transition to market allocation of spectrum.",
                "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proc.",
                "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
                "A dominant strategy double auction.",
                "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
                "Putting auction theory to work: The simultaneous ascending auction.",
                "J.Pol.",
                "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
                "Iterative combinatorial auctions: Theory and practice.",
                "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
                "A combinatorial mechanism for airport time slot allocation.",
                "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
            ],
            "original_annotated_samples": [
                "In a double auction (DA), multiple <br>buyers and sellers</br> trade units of an identical good [20].",
                "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple <br>buyers and sellers</br> to trade multiple heterogeneous goods.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple <br>buyers and sellers</br> and agents that are both buying and selling.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to <br>buyers and sellers</br>, and to extend to capture bids from mixed <br>buyers and sellers</br>, ranging from simple swaps to highly complex trades.",
                "DISCUSSION The bidding language was defined to allow for perfect symmetry between <br>buyers and sellers</br> and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps."
            ],
            "translated_annotated_samples": [
                "En una subasta doble (DA), múltiples <br>compradores y vendedores</br> intercambian unidades de un bien idéntico [20].",
                "Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples <br>compradores y vendedores</br> para comerciar múltiples bienes heterogéneos.",
                "A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples <br>compradores y vendedores</br> y agentes que compran y venden.",
                "En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a <br>compradores y vendedores</br>, y para extenderse y capturar ofertas de <br>compradores y vendedores</br> mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas.",
                "DISCUSIÓN El lenguaje de oferta se definió para permitir una simetría perfecta entre <br>compradores y vendedores</br> y proporcionar expresividad en un dominio de intercambio, por ejemplo, para oferentes mixtos interesados en ejecutar operaciones como swaps."
            ],
            "translated_text": "Presentamos el primer diseño para un intercambio combinatorio iterativo (ICE). El intercambio incorpora un lenguaje de oferta basado en árboles que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una subasta doble (DA), múltiples <br>compradores y vendedores</br> intercambian unidades de un bien idéntico [20]. En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples <br>compradores y vendedores</br> para comerciar múltiples bienes heterogéneos. Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples <br>compradores y vendedores</br> y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un intercambio combinatorio iterativo (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda. La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de oferta basado en árboles expresivo y conciso. El lenguaje describe valores para intercambios, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el intercambio sea aceptable. El lenguaje permite a los postores expresar límites superiores e inferiores en el valor, los cuales pueden ser ajustados en cada ronda. • Determinación del ganador. La determinación del ganador (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación. Comparar la solución en los valores superiores e inferiores permite tomar una decisión sobre la terminación, con el progreso en rondas intermedias impulsado por una valoración intermedia y los valores inferiores adoptados al finalizar. • Pagos. Los pagos se calculan utilizando la regla de pago del umbral [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de precios. Se calcula un precio aproximado para cada artículo en el intercambio en cada ronda, en función de las valoraciones intermedias y el intercambio provisional. Los precios se optimizan para aproximar los precios de equilibrio competitivo, y luego se optimizan aún más para aproximar mejor los pagos del umbral actual con los lazos restantes rotos para favorecer los precios equilibrados entre diferentes artículos. Al calcular los precios, adoptamos los métodos de generación de restricciones para explotar la estructura del lenguaje de oferta y evitar enumerar todos los intercambios factibles. El subproblema para generar nuevas restricciones es una variación del problema WD. • Regla de actividad. Una regla de actividad de preferencia revelada [1] garantiza progreso a lo largo de las rondas. Para permanecer activo, un oferente debe ajustar los límites para que haya suficiente información para definir un intercambio que maximice el excedente a los precios actuales. Otra variación del problema de WD se formula, tanto para verificar que se cumple la regla de actividad como para proporcionar retroalimentación a un postor para explicar cómo cumplir la regla. Se proporciona un esquema del flujo de control del sistema ICE en la Figura 1. Volveremos a este ejemplo más adelante en el documento. Por ahora, simplemente observa en este ejemplo de dos agentes que los agentes establecen límites inferiores y superiores que son verificados en la regla de actividad, y luego pasados a la determinación del ganador (WD), y luego a través de tres etapas de fijación de precios (precisión, equidad, equilibrio). Al pasar la regla de cierre (en la que se verifican los parámetros αeff y αthresh para la convergencia del comercio y los pagos), el intercambio pasa a una última y definitiva ronda. Al final de esta ronda, el intercambio y los pagos finalmente se determinan, basados en las valoraciones más bajas. 2.1 Trabajo Relacionado En la literatura se conocen muchos CAs de un solo lado con precios ascendentes [10, 25, 29]. También se han propuesto enfoques de elicitación directa para los AC unilaterales en los que los agentes responden a preguntas explícitas sobre sus valoraciones [8, 14, 19]. Un número de CAs ascendentes están diseñados para trabajar con precios simples en artículos [12, 17]. Los métodos de generación de precios que utilizamos en ICE generalizan los métodos de estos artículos anteriores. Parkes et al. [24] estudiaron intercambios combinatorios de oferta sellada e introdujeron la regla de pago umbral. Posteriormente, Krych [16] demostró experimentalmente que la regla del Umbral promueve asignaciones eficientes. No tenemos conocimiento de ningún estudio previo sobre CEs iterativos. Las estrategias dominantes DAs son conocidas por la demanda unitaria [20] y también por agentes de mente única [2]. No se conocen mecanismos de estrategia dominante para el problema general de la CE. ICE es un diseño de subasta híbrido, ya que combina precios simples de artículos para impulsar las ofertas en las primeras rondas con WD combinatorio y pagos, una característica que comparte con el diseño de reloj-proxy de Ausubel et al. [1] para subastas unilaterales. Adoptamos una variación de la regla de actividad de preferencia revelada en las subastas de proxy de reloj. El lenguaje de subasta comparte algunos elementos estructurales con el lenguaje LGB de Boutilier y Hoos [7], pero tiene semántica muy diferente. Rothkopf et al. [27] también describen un lenguaje de oferta basado en árboles restringido. En LGB, la semántica es la de la lógica proposicional, con los mismos elementos en una asignación capaces de satisfacer un árbol en múltiples lugares. Aunque esto puede hacer que LGB sea especialmente conciso en algunos contextos, la semántica que proponemos parece proporcionar una utilidad local, de modo que el valor de un componente en un árbol pueda ser comprendido de forma independiente al resto del árbol. La idea de capturar la estructura de nuestro lenguaje de oferta de manera explícita dentro de una formulación de programación entera mixta sigue los desarrollos en Boutilier [6]. 3. PRELIMINARES En nuestro modelo, consideramos un conjunto de bienes, indexados {1, . . . , m} y un conjunto de postores, indexados {1, . . . , n}. La asignación inicial de bienes se denota como x0 = (x0 1, . . . , x0 n), donde x0 i = (x0 i1, . . . , x0 im) y x0 ij ≥ 0 para el bien j indicando el número de unidades del bien j que posee el postor i. Un intercambio λ = (λ1, . . . , λn) denota el cambio en la asignación, con λi = (λi1, . . . , λim) donde λij ∈ es el cambio en el número de unidades del ítem j para el postor i. Entonces, la asignación final es x1 = x0 + λ. Cada postor tiene un valor vi(λi) ∈ ¡ para una transacción λi. Este valor puede ser positivo o negativo, y representa el cambio en el valor entre la asignación final x0 i +λi y la asignación inicial x0 i. La utilidad es cuasi-lineal, con ui(λi, p) = vi(λi)−p para el intercambio λi y el pago p ∈ ¡. El precio p puede ser negativo, lo que indica que el postor recibe un pago por la transacción. Utilizamos el término \"pago\" de manera intercambiable con \"utilidad\". Nuestro objetivo en el diseño de ICE es implementar el comercio eficiente. El intercambio eficiente, λ∗, maximiza el aumento total de valor entre los postores. Definición 1 (Comercio eficiente). El intercambio eficiente λ∗ resuelve max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Las restricciones (1) aseguran que ningún agente venda más artículos de los que tiene en su asignación inicial. Las restricciones (2) permiten la disposición gratuita y permiten que los intercambios factibles vendan más artículos de los que se compran (pero no al revés). Posteriormente, adoptamos Feas(x0) para denotar el conjunto de intercambios factibles, dados estos límites y una asignación inicial x0 = (x0 1, . . . , x0 n). 3.1 Ejemplos Prácticos En esta sección, proporcionamos tres ejemplos simples de instancias que utilizaremos para ilustrar varios componentes del intercambio. Todos los tres ejemplos tienen solo un vendedor, pero esto es puramente ilustrativo. Ejemplo 1. Un vendedor y un comprador, dos bienes {A, B}, con el vendedor teniendo una asignación inicial de AB. Cambios en los valores de los intercambios: vendedor comprador Y (−A, −B) Y (+A, +B) -10 +20 El Y indica que tanto el comprador como el vendedor solo están interesados en intercambiar ambos bienes como un paquete. Aquí, el intercambio eficiente (que maximiza el valor) es para el vendedor vender AB al comprador, denotado como λ∗ = ([−1, −1], [+1, +1]). Ejemplo 2. Un vendedor y cuatro compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de las transacciones: vendedor comprador1 comprador 2 comprador 3 comprador 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 El OR indica que el vendedor está dispuesto a vender cualquier cantidad de bienes. El XOR indica que los compradores 2 y 4 están dispuestos a comprar como máximo uno de los dos bienes en los que están interesados. El comercio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD al comprador 3, denotado λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR Ejemplo 1: Ejemplo 3: 2,2 +C +D COMPRADOR 2 2,2 +A +B COMPRADOR 1 +11 +84,4 -B VENDEDOR -A -C -D Ejemplo 2: 1,1 +A +B COMPRADOR 2 2,2 +A +B COMPRADOR 1 +6 +40,4 -B VENDEDOR -C -D-A 1,1 +C +D COMPRADOR 4 2,2 +C +D +3 +2 COMPRADOR 3 -18 Figura 2: Ejemplo de Árboles de Ofertas. Ejemplo 3. Un vendedor y dos compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de los intercambios: vendedor comprador1 comprador 2 Y (−A, −B, −C, −D) Y (+A, +B) Y (+C, +D) -18 +11 +8 El intercambio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD vaya al comprador 2, denotado por λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4. Un DISEÑO DE INTERCAMBIO DE UNA SOLA VEZ La descripción de ICE se divide en dos secciones: una sola vez (oferta sellada) e iterativa. En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a <br>compradores y vendedores</br>, y para extenderse y capturar ofertas de <br>compradores y vendedores</br> mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas. Las ofertas se expresan como árboles de ofertas anotados, y definen el valor de un oferente para todos los intercambios posibles. El lenguaje define cambios en los valores de las transacciones, con hojas anotadas con los artículos intercambiados y nodos anotados con cambios en los valores (ya sea positivos o negativos). La característica principal es que tiene un operador lógico de intervalo general en los nodos internos, y que define una semántica cuidadosa para propagar valores dentro del árbol. Ilustramos el lenguaje en cada uno de los Ejemplos 1-3 en la Figura 2. El lenguaje tiene una estructura de árbol, con operaciones en elementos definidos en las hojas y valores anotados en nodos y hojas. Los nodos tienen valores de cero donde no se indica ningún valor. Los nodos internos también están etiquetados con rangos de intervalo-escoge (IC). Dada una transacción, la semántica del lenguaje define qué nodos en el árbol pueden ser satisfechos o activados. Primero, si un niño está encendido, entonces su padre también debe estar encendido. Segundo, si un nodo padre está encendido, entonces el número de hijos que están encendidos debe estar dentro del rango de IC en el nodo padre. Finalmente, las hojas en las que el postor está comprando artículos solo pueden estar activas si los artículos se proporcionan en el intercambio. Por ejemplo, en el Ejemplo 2 podemos considerar el comercio eficiente, y observar que en este comercio todos los nodos en los árboles de los compradores 1 y 3 (y también el vendedor), pero ninguno de los nodos en los árboles de los compradores 2 y 4, pueden estar encendidos. Por otro lado, en 251 el intercambio en el que A va al comprador 2 y D al comprador 4, entonces los nodos raíz y hojas apropiados pueden estar encendidos para los compradores 2 y 4, pero ningún nodo puede estar encendido para los compradores 1 y 3. Dado un intercambio, a menudo hay varias formas de elegir el conjunto de nodos satisfechos. La semántica del lenguaje requiere que se activen los nodos que maximicen el valor sumado entre los nodos satisfechos. Considera el árbol de oferta Ti del ofertante i. Esto define nodos β ∈ Ti, de los cuales algunos son hojas, Leaf (i) ⊆ Ti. Deje que Child(β) ⊆ Ti denote los hijos de un nodo β (que no es en sí mismo una hoja). Todos los nodos excepto las hojas están etiquetados con el operador de intervalo-escoger [IC x i (β), ICy i (β)]. Cada nodo también está etiquetado con un valor, viβ ∈ ¡. Cada hoja β está etiquetada con un intercambio, qiβ ∈ m (es decir, las hojas pueden definir un intercambio agrupado en más de un tipo de artículo). Dado un intercambio λi al postor i, los operadores de elección de intervalos y los intercambios en las hojas definen qué nodos pueden ser satisfechos. A menudo habrá una elección. Las corbatas se rompen para maximizar el valor. Que satiβ ∈ {0, 1} denote si el nodo β está satisfecho. La solución sati es válida dado el árbol Ti y el intercambio λi, escrita sati ∈ válido(Ti, λi), si y solo si: ¢ β∈Hoja (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Hijo(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Hoja (i) (5) En otras palabras, un conjunto de hojas solo puede considerarse satisfecho dado el intercambio λi si el aumento total en cantidad sumado en todas esas hojas está cubierto por el intercambio, para todos los bienes (Eq. 4). Esto funciona tanto para vendedores como para compradores: para los vendedores, un intercambio es negativo y esto requiere que el número total de artículos indicados como vendidos en el árbol sea al menos igual al número total vendido según lo definido en el intercambio. También necesitamos la propagación ascendente: cada vez que un nodo que no sea la raíz esté satisfecho, su padre también debe estar satisfecho (por β ∈Child(β) satiβ ≤ ICy i (β)satiβ en la Ecuación 5). Finalmente, necesitamos la propagación hacia abajo: cada vez que un nodo interno se satisface, entonces el número apropiado de hijos también debe estar satisfecho (Ec. 5). El valor total del comercio λi, dado el árbol de ofertas Ti, se define como: vi(Ti, λi) = máximo sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) El lenguaje basado en árboles generaliza los lenguajes existentes. Por ejemplo: IC(2, 2) en un nodo con 2 hijos es equivalente a un operador AND; IC(1, 3) en un nodo con 3 hijos es equivalente a un operador OR; e IC(1, 1) en un nodo con 2 hijos es equivalente a un operador XOR. De manera similar, los lenguajes de oferta XOR/OR pueden ser expresados directamente como un árbol de oferta en nuestro lenguaje. La determinación del ganador Este apartado define el problema de determinación del ganador, el cual está formulado como un MIP y resuelto en nuestra implementación con un solucionador comercial. El solucionador utiliza búsqueda de ramificación y acotamiento con generación de cortes dinámicos y heurísticas de ramificación para resolver MIPs grandes en tiempos de ejecución económicamente factibles. El lenguaje OR* es el lenguaje OR con elementos ficticios para proporcionar estructura adicional. OR* se sabe que es expresivo y conciso. Sin embargo, no se sabe si OR* domina a XOR/OR en cuanto a concisión [23]. En la definición de la representación MIP, tenemos cuidado de evitar una enumeración basada en XOR de todos los paquetes. Una variación del problema de WD se reutiliza muchas veces dentro del intercambio, por ejemplo, para la generación de columnas en la fijación de precios y para verificar la preferencia revelada. Dado el conjunto de árboles de ofertas T = (T1, . . . , Tn) y la asignación inicial x0, la formulación mixta entera para WD es: WD(T, x0): max λ, sat ¢ i ¢ β ∈ Ti viβ · satiβ sujeto a (1), (2), satiβ ∈ {0, 1}, λij ∈ sati ∈ válido(Ti, λi), ∀i. Algunos bienes pueden quedar sin asignar porque se permite la disposición libre dentro de las reglas de liquidación de la determinación del ganador. Estos artículos pueden ser asignados de nuevo a los agentes que vendieron los artículos, es decir, para los cuales λij < 0. 4.3 Cálculo de Pagos Umbral La regla de pago umbral se basa en los pagos en el mecanismo de Vickrey-Clarke-Groves (VCG) [15], que en sí mismo es veraz y eficiente pero no satisface el equilibrio presupuestario. El equilibrio presupuestario requiere que los pagos totales al intercambio sean iguales a los pagos totales realizados por el intercambio. En VCG, el pago pagado por el agente i es pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) donde λ∗ es el intercambio eficiente, V ∗ es el valor reportado de este intercambio, y V−i es el valor reportado del intercambio eficiente que se implementaría sin el postor i. Llamamos a ∆vcg,i = V ∗ − V−i el descuento VCG. Por ejemplo, en el Ejemplo 1 pvcg,vendedor = −10 − (+10 − 0) = −20 y pvcg,comprador = +20 − (+10 − 0) = 10, y el intercambio se llevaría a cabo con un déficit presupuestario de −20 + 10 = −10. La regla de pago del umbral [24] determina pagos equilibrados presupuestarios para minimizar el error máximo entre todos los agentes respecto al resultado VCG. Definición 2. El esquema de pago de umbral implementa el intercambio eficiente λ∗ dado los ofertas, y establece los pagos pthresh,i = ˆvi(λ∗ i ) − ∆i, donde ∆ = (∆1, . . . , ∆n) se establece para minimizar maxi(∆vcg,i − ∆i) sujeto a ∆i ≤ ∆vcg,i e   i ∆i ≤ V ∗ (esto garantiza el equilibrio presupuestario). Ejemplo 4. En el Ejemplo 2, los descuentos de VCG son (9, 2, 0, 1, 0) para el vendedor y cuatro compradores respectivamente, los pagos de VCG son (−9, 4, 0, 2, 0) y el intercambio se realiza con un déficit de -3. En Threshold, los descuentos son (8, 1, 0, 0, 0) y los pagos son (−8, 5, 0, 3, 0). Esto minimiza el error en el peor de los casos para los descuentos VCG en todos los esquemas de pago equilibrados en presupuesto. Los pagos de umbral están diseñados para minimizar el incentivo máximo ex post para manipular. Krych [16] confirmó que Threshold promueve la eficiencia asignativa en el equilibrio de Bayes-Nash restringido y aproximado. 5. El diseño ICE Estamos listos para presentar el diseño de intercambio combinatorio iterativo (ICE). Se introducen varios componentes nuevos, en relación con el diseño para el intercambio único. En lugar de proporcionar valoraciones precisas, los postores pueden proporcionar valoraciones inferiores y superiores y revisar esta información de oferta en cada ronda. El intercambio proporciona retroalimentación basada en precios 252 para guiar a los postores en este proceso, y finaliza con un intercambio eficiente (o aproximadamente eficiente) con respecto a las valoraciones reportadas. En cada ronda t ∈ {0, 1, . . .} se utilizan los límites inferiores y superiores actuales, vt y vt, para definir un perfil de valoración provisional vα (la α-valoración), junto con un intercambio provisional λt y precios provisionales pt = (pt 1, . . . , pt m) en los artículos. La α-valoración es una combinación lineal de las valoraciones superiores e inferiores actuales, con αEFF ∈ [0, 1] elegido endógenamente en función de la cercanía del intercambio optimista (en v) y el intercambio pesimista (en v). Los precios pt se utilizan para informar una regla de actividad y avanzar hacia un comercio eficiente. 5.1 Valoraciones superiores e inferiores El lenguaje de la oferta se amplía para permitir que un oferente i informe un valor inferior y superior (viβ, viβ) en cada nodo. Estos ocupan el lugar del valor exacto viβ definido en la Sección 4.1. Basándonos en estas etiquetas, podemos definir las funciones de valoración vi(Ti, λi) y vi(Ti, λi), utilizando exactamente la misma semántica que en la Ecuación (6). Decimos que un árbol de ofertas está bien formado si viβ ≤ viβ para todos los nodos. El siguiente lema es útil: Lema 1. Dado un árbol bien formado, T, entonces vi(Ti, λi) ≤ vi(Ti, λi) para todos los intercambios. Prueba. Supongamos que existe algún λi para el cual vi(Ti, λi) > vi(Ti, λi). Entonces, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ. Sin embargo, esto es una contradicción porque el intercambio λ que define vi(Ti, λi) sigue siendo factible con límites superiores vi, y viβ ≥ viβ para todos los nodos β en un árbol bien formado. 5.2 Retroalimentación de precios En cada ronda, se determinan los precios de equilibrio competitivo aproximados (CE), pt = (pt 1, . . . , pt m). Dado estos precios provisionales, el precio en el intercambio λi para el postor i es pt (λi) = j≤m pt j · λij. Definición 3 (precios de la CE). Los precios p∗ son precios de equilibrio competitivo si el intercambio eficiente λ∗ está respaldado a precios p∗, de modo que para cada postor: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) Los precios de CE no siempre existirán y a menudo necesitaremos calcular precios aproximados [5]. Extendemos las ideas de Rassenti et al. [26], Kwasnica et al. [17] y Dunford et al. [12], y seleccionamos precios aproximados de la siguiente manera: I: Precisión. Primero, calculamos los precios que minimizan el error máximo en las restricciones de mejor respuesta de todos los postores. II: Equidad. Segundo, rompemos los empates para preferir precios que minimicen la desviación máxima de los pagos umbral entre todos los postores. III: Equilibrio. En tercer lugar, rompemos los empates para preferir precios que minimicen el precio máximo entre todos los artículos. En conjunto, estos pasos están diseñados para promover la informatividad de los precios en impulsar el progreso a lo largo de las rondas. Al calcular los precios, explicamos cómo calcular precios aproximados (o de otra manera) para lenguajes de oferta estructurados, sin enumerar todos los intercambios posibles. Para esto, adoptamos la generación de restricciones para manejar de manera eficiente un número exponencial de restricciones. Cada paso se describe detalladamente a continuación. Yo: Precisión. Adoptamos una definición de precisión de precio que generaliza las nociones adoptadas en trabajos anteriores para lenguajes de oferta no estructurados. Que λt denote el comercio provisional actual y suponga que la valoración provisional es vα. Para calcular precios de CE precisos, consideramos: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j. Este programa lineal (LP) está diseñado para encontrar precios que minimicen el error en el peor de los casos entre todos los agentes. De la definición de los precios de equilibrio competitivo (CE), se sigue que los precios de equilibrio competitivo tendrían δ = 0 como solución a (9), momento en el cual el intercambio λt i estaría en el conjunto de mejor respuesta de cada agente (con λt i = ∅, es decir, sin intercambio, para todos los agentes sin excedente para el intercambio a los precios). Ejemplo 5. Podemos ilustrar la formulación (9) en el Ejemplo 2, asumiendo para simplificar que vα = v (es decir, verdad). El comercio eficiente asigna AB al comprador 1 y CD al comprador 3. La precisión buscará los precios p(A), p(B), p(C) y p(D) para minimizar el δ ≥ 0 requerido para satisfacer las restricciones: p(A) + p(B) + p(C) + p(D) ≥ 0 (vendedor) p(A) + p(B) ≤ 6 + δ (comprador 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (comprador 2) p(C) + p(D) ≤ 3 (comprador 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (comprador 4) Una solución óptima requiere que p(A) = p(B) = 10/3, con δ = 2/3, y que p(C) y p(D) tomen valores como p(C) = p(D) = 3/2. Pero, (9) tiene un número exponencial de restricciones (Ec. 10). En lugar de resolverlo explícitamente, utilizamos la generación de restricciones [4] y generamos dinámicamente un subconjunto suficiente de restricciones. Que \\(i\\) denote un subconjunto manejable de todos los intercambios factibles posibles para el oferente \\(i\\). Entonces, una versión relajada de (9) (escrita ACC) se formula sustituyendo (10) con vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) donde   i es un conjunto de intercambios que son factibles para el postor i dado las otras ofertas. Fijando los precios p∗, luego resolvemos n subproblemas (uno para cada postor), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0), (12) para verificar si la solución (p∗, δ∗) a ACC es factible en el problema (9). En R-WD(i) el objetivo es determinar un intercambio más preferido para cada postor a estos precios. Que ˆλi denote la solución a R-WD(i). Verificar la condición: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) y si esta condición se cumple para todos los postores i, entonces la solución (p∗ , δ∗ ) es óptima para el problema (9). De lo contrario, se agrega el intercambio ˆλi a i para todos los postores i para los cuales esta restricción se viola en 253 y volvemos a resolver el LP con el nuevo conjunto de restricciones. II: Equidad. Segundo, rompemos los empates restantes para preferir precios justos: eligiendo precios que minimicen el error en el peor de los casos con respecto a los pagos umbral (es decir, la utilidad para los postores con pagos umbral), pero sin elegir precios que sean menos precisos. Ejemplo 6. Por ejemplo, la precisión en el Ejemplo 1 (representado en la Figura 1) requiere que 12 ≤ pA + pB ≤ 16 (para vα = v). En estas valoraciones, los pagos umbral serían de 2 para tanto el vendedor como el comprador. Esto se puede lograr exactamente en la fijación de precios con pA + pB = 14. El método de desempate de equidad se formula como el siguiente LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima, de ACC. El objetivo aquí es el mismo que en la regla de pago del umbral (ver Sección 4.3): minimizar el error máximo entre el pago del postor (en vα) para el intercambio provisional y el pago VCG (en vα). El problema FAIR también se resuelve mediante la generación de restricciones, utilizando R-WD(i) para agregar restricciones adicionales violadas según sea necesario. III: Equilibrio. En tercer lugar, rompemos los empates restantes para preferir precios equilibrados: eligiendo precios que minimicen el precio máximo entre todos los artículos. Volviendo de nuevo al Ejemplo 1, representado en la Figura 1, vemos que la precisión y la equidad requieren que p(A) + p(B) = 14. Finalmente, el conjunto de equilibrio establece que p(A) = p(B) = 7. El equilibrio está justificado cuando, manteniendo todo lo demás igual, los elementos son más propensos a tener valores similares que diferentes. El LP para el equilibrio se formula de la siguiente manera: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima de ACC y π∗ representa el error en la solución óptima de FAIR. La generación de restricciones también se utiliza para resolver BAL, generando nuevos intercambios para i según sea necesario. El problema R-WD(i) es una especialización del problema WD, en el que el objetivo es maximizar el pago de un único postor, en lugar del valor total entre todos los postores. Se resuelve como un MIP, al reescribir el objetivo en WD(T, x0) como max{viβ · satiβ − j p∗ j · λij} para el agente i. Por lo tanto, la estructura del lenguaje del árbol de ofertas se explota para generar nuevas restricciones, ya que esto se resuelve como un MIP conciso. Los otros postores se mantienen en el MIP (pero no aparecen en el objetivo) y se utilizan para definir el espacio de intercambios factibles. Los métodos de Dunford et al. [12], que utilizan un enfoque de núcleo, también están estrechamente relacionados. El uso del equilibrio fue defendido por Kwasnica et al. [17]. Dunford et al. [12] prefieren suavizar los precios a lo largo de las rondas. Comentario 1: Refinamiento lexicográfico. Para los tres subproblemas también realizamos un refinamiento lexicográfico (con respecto a los postores en ACC y FAIR, y con respecto a los bienes en BAL). Por ejemplo, en ACC minimizamos sucesivamente el error máximo entre todos los postores. Dada una solución inicial, primero identificamos el error en todos los postores para quienes una restricción (11) está vinculante. Para dicho postor i, la restricción se reemplaza por vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) y el error para el postor i ya no aparece explícitamente en el objetivo. ACC se vuelve a resolver y avanza al minimizar aún más el error máximo entre todos los postores que aún no han sido identificados. Esto continúa, fijando a cualquier nuevo postor para quien una de las restricciones (11) sea vinculante, hasta que el error esté optimizado lexicográficamente para todos los postores. El mismo proceso exacto se repite para FAIR y BAL, con los postores fijados y las restricciones (15) reemplazadas por π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (donde π∗ i es el objetivo actual) en FAIR, y los artículos fijados y las restricciones (18) reemplazadas por p∗ j ≥ pj (donde p∗ j representa el objetivo para el precio máximo en ese artículo) en BAL. Comentario 2: Computación. Todos los límites en i se mantienen, y este conjunto crece en todas las etapas y en todas las rondas del intercambio. Por lo tanto, el esfuerzo computacional en la generación de restricciones se reutiliza. En la implementación, nos aseguramos de abordar una serie de problemas que surgen debido a problemas de punto flotante. Preferimos pecar de conservadores al determinar si agregar o no otra restricción al realizar la verificación (13). Esto evita problemas de inviabilidad posteriores. Además, al fijar a los postores con el fin de refinar lexicográficamente, relajamos las restricciones asociadas con un pequeño > 0 en el lado derecho. 5.3 Reglas de Actividad de Preferencia Revelada El papel de las reglas de actividad en la subasta es garantizar tanto la consistencia como el progreso en las rondas [21]. La consistencia en nuestro intercambio requiere que los oferentes ajusten los límites a medida que avanza el intercambio. Las reglas de la actividad garantizan que los postores estén activos durante las primeras rondas y promueven una elicitación útil a lo largo del intercambio. Adoptamos una regla de actividad de preferencia revelada (RP) simple. La idea se basa vagamente en la regla de RP en Ausubel et al. [1], donde se utiliza para los AC unilaterales. La motivación es requerir más que simplemente consistencia: necesitamos que los oferentes proporcionen suficiente información para que el sistema pueda demostrar que una asignación es (aproximadamente) eficiente. Es útil pensar en los postores interactuando con agentes de proxy que actuarán en su nombre al responder a los precios provisionales pt−1 determinados al final de la ronda t − 1. El único conocimiento que tiene un intermediario sobre la valoración de un postor es a través del árbol de ofertas. Supongamos que un intermediario fue consultado por la bolsa y se le preguntó en qué operación estaba más interesado el oferente a los precios provisionales. La regla de RP dice lo siguiente: el proxy debe tener suficiente 7. Por ejemplo, aplicando esto a la precisión en el Ejemplo 2, resolvemos una vez y encontramos que los postores 1 y 2 son vinculantes, con un error δ∗ = 2/3. Fijamos estos y luego minimizamos el error para los postores 3 y 4. Finalmente, esto da p(A) = p(B) = 10/3 y p(C) = p(D) = 5/3, con precisión de 2/3 para los postores 1 y 2 y 1/3 para los postores 3 y 4. Se necesitan 254 información para poder determinar este intercambio que maximiza el excedente al precio actual. Considera los siguientes ejemplos: Ejemplo 7. Un postor tiene XOR(+A, +B) y un valor de +5 en la hoja +A y un rango de valores de [5,10] en la hoja +B. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el representante sabe que, sin importar cómo se resuelva la incertidumbre restante del valor en +B, el postor siempre preferirá (débilmente) +B a +A. Ejemplo 8. Un postor tiene XOR(+A, +B) y límites de valor [5, 10] en el nodo raíz y un valor de 1 en la hoja +A. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el postor siempre preferirá +A a +B a precios iguales, sin importar cómo se resuelva finalmente el valor incierto en el nodo raíz. Sobrecargando la notación, sea vi ∈ Ti una valoración que sea consistente con las valoraciones inferiores y superiores en el árbol de oferta Ti. Definición 4. El árbol de oferta Ti satisface RP a precios pt−1 si y solo si existe algún intercambio factible L∗ para el cual, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. Para determinar esto para el postor i, resolvemos una secuencia de problemas, cada uno de los cuales es una variación del problema WD. Primero, construimos un intercambio candidato de límite inferior, que es un intercambio factible que resuelve: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) La solución π∗ l a RP1(i) representa el pago máximo que el postor i puede lograr en todos los intercambios factibles, dado su valoración pesimista. Segundo, rompemos los lazos para encontrar un intercambio con la máxima incertidumbre del valor en todas las posibles soluciones a RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] sujeto a λ ∈ Feas(x0) (22) vi(λi) − pt−1(λi) ≥ π∗ l (23) Adoptamos la solución L∗ i como nuestro candidato para el intercambio que puede satisfacer RP. Para entender la importancia de esta regla de desempate, considera el Ejemplo 7. El proxy puede demostrar que +B pero no +A es una mejor respuesta para todos los vi ∈ Ti, y debería elegir +B como su candidato. Observa que +B es un contraejemplo para +A, pero no al revés. Ahora, construimos una valuación modificada ˜vi, estableciendo ˜viβ = viβ, si β ∈ sat(L∗ i) viβ, de lo contrario. (24) donde sat(L∗ i) es el conjunto de nodos que están satisfechos en el árbol de límite inferior para el comercio L∗ i. Dada esta valuación modificada, encontramos U∗ para resolver: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Sea π∗ u el beneficio de este intercambio óptimo en los valores modificados ˜v. Llamamos al intercambio U∗ i el intercambio testigo. Mostramos en la Proposición 1 que la regla RP se cumple si y solo si π∗ l ≥ π∗ u. La construcción de la valoración modificada como ˜vi reconoce que existe incertidumbre compartida en las operaciones que cumplen los mismos nodos en un árbol de ofertas. El ejemplo 8 ayuda a ilustrar esto. Simplemente usando vi en RP3(i), encontraríamos que L∗ i es comprar A con un pago de π∗ l = 3 pero luego encontraríamos que U∗ i es comprar B con π∗ u = 7 y fallar en RP. Debemos reconocer que, sin importar cómo se resuelva la incertidumbre en el nodo raíz, afectará a +A y +B de la misma manera. Por esta razón, establecimos ˜viβ = viβ = 5 en el nodo raíz, que es exactamente el mismo valor que se adoptó al determinar π∗ l. Entonces, RP3(i) aplicado a U∗ i da como resultado comprar A y se considera que el test de RP ha sido aprobado. Proposición 1. El árbol de oferta Ti satisface RP dado los precios pt−1 si y solo si cualquier intercambio de límite inferior L∗ i que resuelve RP1(i) y RP2(i) satisface: vi(Ti, L∗ i) − pt−1 (L∗ i) ≥ ˜vi(Ti, U∗ i) − pt−1 (U∗ i), (26) donde ˜vi es la valoración modificada en la ecuación (24). Prueba. Para la suficiencia, observe que la diferencia en el pago entre el intercambio L∗ i y otro intercambio λi no se ve afectada por la forma en que se resuelve la incertidumbre en cualquier nodo que esté satisfecho tanto en L∗ i como en λi. Corregir los valores en ˜vi en los nodos satisfechos en L∗ i tiene el efecto de eliminar esta consideración cuando se selecciona un intercambio U∗ i que satisface uno de estos nodos. Por otro lado, fijar los valores en estos nodos no tiene efecto en las operaciones consideradas en RP3(i) que no comparten un nodo con L∗ i. Para la dirección necesaria, primero mostramos que cualquier intercambio que satisfaga RP debe resolver RP1(i). Supongamos lo contrario, que algún λi con un pago mayor que π∗ l cumple con RP. Sin embargo, la valoración vi ∈ Ti junto con L∗ i presenta un contraejemplo a RP (Eq. 20). Ahora, supongamos (por contradicción) que algún λi con ganancia máxima π∗ l pero incertidumbre menor que L∗ i cumple con RP. Procede mediante el análisis de casos. Caso a): solo una solución a RP1(i) tiene un valor incierto y, por lo tanto, λi tiene un valor seguro. Pero, esto no puede satisfacer a RP porque L∗ i con un valor incierto sería un contraejemplo para RP (Eq. 20). Caso b): dos o más soluciones a RP1(i) tienen un valor incierto. Aquí argumentamos primero que uno de estos intercambios debe satisfacer un (débil) superconjunto de todos los nodos con valor incierto que son satisfechos por todos los demás intercambios en este conjunto. Esto es por RP. Sin esto, entonces para cualquier elección de comercio que resuelva RP1(i), hay otro comercio con un conjunto disjunto de nodos inciertos pero satisfechos que proporciona un contraejemplo a RP (Ec. 20). Ahora, considera el caso en el que algún intercambio contiene un superconjunto de todos los nodos inciertos satisfechos de los otros intercambios. Claramente RP2(i) elegirá este intercambio, L∗ i, y λi debe satisfacer un subconjunto de estos nodos (por suposición). Pero ahora vemos que λi no puede cumplir con RP porque L∗ i sería un contraejemplo para RP. El incumplimiento de la regla de actividad debe tener alguna consecuencia. En las reglas actuales, la acción predeterminada que elegimos es establecer los límites superiores en las valoraciones hasta el valor máximo del precio provisional en un nodo8 y el valor del límite inferior en ese nodo.9 Tal postor puede permanecer activo 8 El precio provisional en un nodo se define como el precio total mínimo entre todos los intercambios factibles para los cuales el subárbol enraizado en el árbol está satisfecho. 9 Esto es completamente análogo a cuando un postor en una subasta de reloj ascendente deja de ofertar a un precio: no se le permite ofertar a un precio más alto nuevamente en rondas futuras. 255 dentro del intercambio, pero solo con valoraciones que sean consistentes con estos nuevos límites. 5.4 Retroalimentación del postor En cada ronda, nuestro diseño predeterminado proporciona a cada postor el intercambio provisional y también los precios provisionales actuales. Ver el 7 para una discusión adicional. También brindamos orientación para ayudar a un licitador a cumplir con la regla de RP. Que sat(L∗ i ) y sat(U∗ i ) denoten los nodos que se satisfacen en los intercambios L∗ i y U∗ i, tal como se calcula en RP1-RP3. Lema 2. Cuando RP falla, un postor debe aumentar un límite inferior en al menos un nodo en sat(L∗ i) \\ sat(U∗ i) o disminuir un límite superior en al menos un nodo en sat(U∗ i) \\ sat(L∗ i) para cumplir con la regla de actividad. Prueba. Cambiar los valores superiores o inferiores en los nodos que no cumplen con ninguno de los intercambios no cambia ni L∗ i ni U∗ i, y no altera el beneficio de estos intercambios. Por lo tanto, la condición de RP seguirá fallando. De igual manera, cambiar los límites en los nodos que se satisfacen en ambos intercambios no tiene efecto en la preferencia revelada. Un cambio en un límite inferior en un nodo compartido afecta tanto a L∗ i como a U∗ i de manera idéntica debido al uso de la valoración modificada para determinar U∗ i. Un cambio en un límite superior en un nodo compartido no tiene efecto en la determinación de L∗ i o U∗ i. Ten en cuenta que cuando sat(U∗ i ) = sat(L∗ i ) entonces la condición (26) siempre se satisface trivialmente, por lo que la orientación en el lema siempre está bien definida cuando RP falla. Este es un mecanismo de retroalimentación elegante porque es adaptable. Una vez que un postor realiza algunos cambios en un subconjunto de estos nodos, el postor puede consultar el intercambio. El intercambio puede responder sí, o puede revisar el conjunto de nodos sat(λ∗ l ) y sat(λ∗ u) según sea necesario. 5.5 Condiciones de Terminación Una vez que cada postor haya comprometido sus nuevas ofertas (y haya cumplido con la regla de RP o haya sufrido la penalización), entonces la ronda t se cierra. En este punto, la tarea es determinar la nueva valoración α, y a su vez la asignación provisional λt y los precios provisionales pt. Una condición de terminación también se verifica, para determinar si se debe pasar el intercambio a una ronda final y definitiva. Para definir la α-valoración, calculamos las siguientes dos cantidades: Pesimista en Pesimista (PP). Determinar un intercambio eficiente, λ∗ l, en valores pesimistas, es decir, resolver maxλ   i vi(λi), y establecer PP=  i vi(λ∗ li). Pessimista a Optimista (PO) Determinar un intercambio eficiente, λ∗ u, en valores optimistas, es decir, resolver maxλ   i vi(λi), y establecer PO=  i vi(λ∗ ui). Primero, hay que tener en cuenta que PP ≥ PO y PP ≥ 0 por definición, para todos los árboles de oferta, aunque PO puede ser negativo (porque el intercambio correcto en v no es actualmente un intercambio útil en v). Reconociendo esto, definir γeff (PP, PO) = 1 + PP − PO PP , (27) cuando PP > 0, y observar que γeff (PP, PO) ≥ 1 cuando esto está definido, y que γeff (PP, PO) comenzará siendo grande y luego tenderá hacia 1 a medida que la asignación optimista converge hacia la asignación pesimista. En cada ronda, definimos αeff ∈ [0, 1] como: αeff = 0 cuando PP es 0, 1/γeff en otro caso (28), lo cual es 0 cuando PP es 0 y luego tiende hacia 1 una vez que PP > 0 en alguna ronda. Esto se utiliza para definir la α-valoración vα i = αeff vi + (1 − αeff )vi, ∀i, (29) que se utiliza para definir la asignación provisional y los precios provisionales. El efecto es definir endógenamente un horario para pasar de valores optimistas a pesimistas a lo largo de las rondas, basado en qué tan cercanos estén los intercambios entre sí. Condición de terminación. Al avanzar a la última y definitiva ronda, y finalmente cerrar, también nos preocupamos por la convergencia de pagos, además de la convergencia hacia un comercio eficiente. Para esto introducimos otro parámetro, αthresh ∈ [0, 1], que tiende de 0 a 1 a medida que los pagos de umbral en las valoraciones inferiores y superiores convergen. Considera el siguiente parámetro: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive), (30) el cual está definido para PP > 0, donde pthresh(v) denota los pagos de umbral en el perfil de valoración v, Nactive es el número de postores que están activamente involucrados en el comercio en la transacción de PP, y || · ||2 es la norma L2. Ten en cuenta que γthresh está definido para pagos y no para ganancias. Esto es apropiado porque la precisión del resultado del intercambio es lo que importa: es decir, el comercio y los pagos. Dado esto, definimos αthresh = 0 cuando PP es 0 y 1/γthresh en otro caso (31), lo cual es 0 mientras PP es 0 y luego tiende hacia 1 a medida que se avanza. Definición 5 (terminación). ICE pasa a una ronda final cuando se cumple una de las siguientes condiciones: 1. αeff ≥ CUTOFFeff y αthresh ≥ CUTOFFthresh, 2. no hay intercambio en los valores optimistas, donde CUTOFFeff, CUTOFFthresh ∈ (0, 1] determinan la precisión requerida para la terminación. Al final de la última y definitiva ronda, vα = v se utiliza para definir el intercambio final y los pagos finales del umbral. Ejemplo 9. Considera nuevamente el Ejemplo 1, y considera los límites superiores e inferiores como se muestra en la Figura 1. Primero, si los límites de los vendedores fueron [−20, −4] entonces hay un intercambio optimista pero no hay un intercambio pesimista, y PO = −4 y PP = 0, y αeff = 0. En los límites representados, tanto los intercambios optimistas como pesimistas ocurren y PO = PP = 4 y αeff = 1. Sin embargo, podemos ver que los pagos umbral son (17, −17) en v pero (14, −14) en v. Al evaluar γthresh, tenemos γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, y αthresh = 2/5. Para CUTOFFthresh < 2/5, el intercambio permanecería abierto. Por otro lado, si el valor que los compradores asignan a +AB estaba entre [18, 24] y el valor que los vendedores asignan a -AB estaba entre [-12, -6], los pagos umbral son (15, -15) en ambos límites superior e inferior, y αthresh = 1. 256 Líneas de Propósito de Componente Agente. El modelo 762 de Soporte Captura el comportamiento estratégico y las decisiones de revelación de información. Proporciona soporte XML para cargar bienes y valoraciones en el mundo 200. El mundo 200 realiza un seguimiento de todos los detalles de agentes, bienes y valoraciones. El Controlador y Comunicación de Intercambio 998 controla el intercambio y coordina el comportamiento remoto de los agentes. El Lenguaje de Subasta 1119 implementa el lenguaje de subasta basado en árboles. El Motor de Reglas de Actividad 203 implementa la regla de preferencia revelada con soporte de rango. El Motor de Reglas de Cierre 137 verifica si se ha alcanzado la condición de terminación de la subasta. El Motor WD 377 proporciona lógica relacionada con WD. El Motor de Precios 460 proporciona lógica relacionada con precios. Los Constructores MIP 346 traducen la lógica utilizada por los motores en nuestra formulación general de optimización. Los Constructores de Precios 256 son utilizados por tres etapas de precios. Los Constructores de Determinación de Ganadores 365 son utilizados por WD, regla de actividad, regla de cierre y generación de restricciones de precios. El código de Soporte del Marco 510 facilita la sustitución modular de los componentes anteriores. Tabla 1: Desglose de Componentes y Código de Intercambio. La INFRAESTRUCTURA DE SISTEMAS ICE consta de aproximadamente 6502 líneas de código Java, divididas en los paquetes funcionales descritos en la Tabla 1.10. El prototipo es modular para que los investigadores puedan reemplazar fácilmente los componentes para experimentación. Además del intercambio central discutido en este documento, hemos desarrollado un componente de agente que permite a un usuario simular el comportamiento y conocimiento de otros jugadores en el sistema, lo que le permite al usuario formular su estrategia antes de jugar realmente. Un usuario especifica un modelo de valoración en una interpretación XML de nuestro lenguaje de oferta, que se revela al intercambio a través de la estrategia de los agentes. Las principales tareas de intercambio son manejadas por motores que dictan la lógica no específica del optimizador. Estos motores impulsan los constructores MIP/LP apropiados. Nos dimos cuenta de que todas nuestras formulaciones de optimización se reducen a dos clases de problemas de optimización. El primero, utilizado para la determinación del ganador, la regla de actividad, la regla de cierre y la generación de restricciones en la fijación de precios, es un MIP que encuentra intercambios que maximizan el valor, manteniendo constantes los precios y los márgenes. El segundo, utilizado por las tres etapas de fijación de precios, es un LP que mantiene constantes las operaciones comerciales, buscando minimizar la holgura, el beneficio o los precios. Aprovechamos la similitud de estos problemas utilizando constructores de LP/MIP comunes que difieren solo en unos pocos ganchos funcionales para proporcionar las variables correctas para la optimización. Hemos generalizado nuestra interfaz de optimización del back-end (actualmente soportamos CPLEX y LPSolve con licencia LGPL) y podemos aprovechar la capacidad de equilibrio de carga y resolución paralela de MIP/LP que esta biblioteca proporciona. DISCUSIÓN El lenguaje de oferta se definió para permitir una simetría perfecta entre <br>compradores y vendedores</br> y proporcionar expresividad en un dominio de intercambio, por ejemplo, para oferentes mixtos interesados en ejecutar operaciones como swaps. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "trade": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "ICE: An Iterative Combinatorial Exchange David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative combinatorial exchange (ICE).",
                "The exchange incorporates a tree-based bidding language that is concise and expressive for CEs.",
                "Bidders specify lower and upper bounds on their value for different trades.",
                "These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient <br>trade</br> despite partial information on bidder valuations.",
                "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
                "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
                "A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "The exchange is fully implemented and in a validation phase.",
                "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
                "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
                "In a double auction (DA), multiple buyers and sellers <br>trade</br> units of an identical good [20].",
                "In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language.",
                "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
                "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to <br>trade</br> multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a <br>trade</br> where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling.",
                "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
                "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
                "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
                "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
                "This paper presents the first design for an iterative combinatorial exchange (ICE).",
                "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
                "The ICE design problem is multi-faceted and quite hard.",
                "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round.",
                "The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "The exchange has a number of interesting theoretical properties.",
                "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
                "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
                "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
                "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
                "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "The exchange is implemented in Java and is currently in validation.",
                "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
                "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
                "We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions.",
                "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based bidding language.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the <br>trade</br> to be acceptable.",
                "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
                "Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
                "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
                "An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional <br>trade</br>.",
                "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
                "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades.",
                "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
                "A revealed-preference activity rule [1] ensures progress across rounds.",
                "In order to remain active, a bidder must tighten bounds so that there is enough information to define a <br>trade</br> that maximizes surplus at the current prices.",
                "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
                "An outline of the ICE system flow of control is provided in Figure 1.",
                "We will return to this example later in the paper.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance).",
                "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the <br>trade</br> and payments), the exchange goes to a last-and-final round.",
                "At the end of this round, the <br>trade</br> and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29].",
                "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
                "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
                "The price generation methods that we use in ICE generalize the methods in these earlier papers.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule.",
                "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
                "We are not aware of any previous studies of iterative CEs.",
                "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
                "No dominant strategy mechanisms are known for the general CE problem.",
                "ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
                "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
                "The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
                "Rothkopf et al. [27] also describe a restricted tree-based bidding language.",
                "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
                "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
                "The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
                "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
                "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
                "A <br>trade</br> λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
                "So, the final allocation is x1 = x0 + λ.",
                "Each bidder has a value vi(λi) ∈ ¡ for a <br>trade</br> λi.",
                "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
                "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for <br>trade</br> λi and payment p ∈ ¡ .",
                "Price p can be negative, indicating the bidder receives a payment for the <br>trade</br>.",
                "We use the term payoff interchangeably with utility.",
                "Our goal in the ICE design is to implement the efficient <br>trade</br>.",
                "The efficient <br>trade</br>, λ∗ , maximizes the total increase in value across bidders.",
                "Definition 1 (Efficient <br>trade</br>).",
                "The efficient <br>trade</br> λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
                "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
                "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
                "All three examples have only one seller, but this is purely illustrative.",
                "Example 1.",
                "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
                "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
                "Here, the efficient (value-maximizing) <br>trade</br> is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
                "Example 2.",
                "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
                "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
                "The efficient <br>trade</br> is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
                "Example 3.",
                "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient <br>trade</br> is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
                "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades.",
                "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
                "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
                "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
                "We illustrate the language on each of Examples 1-3 in Figure 2.",
                "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
                "The nodes have zero values where no value is indicated.",
                "Internal nodes are also labeled with interval-choose (IC) ranges.",
                "Given a <br>trade</br>, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
                "First, if a child is on then its parent must be on.",
                "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
                "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the <br>trade</br>.",
                "For instance, in Example 2 we can consider the efficient <br>trade</br>, and observe that in this <br>trade</br> all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
                "On the other hand, in 251 the <br>trade</br> in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
                "Given a <br>trade</br> there is often a number of ways to choose the set of satisfied nodes.",
                "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
                "Consider bid tree Ti from bidder i.",
                "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
                "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
                "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
                "Every node is also labeled with a value, viβ ∈ ¡ .",
                "Each leaf β is labeled with a <br>trade</br>, qiβ ∈   m (i.e., leaves can define a bundled <br>trade</br> on more than one type of item.)",
                "Given a <br>trade</br> λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
                "There will often be a choice.",
                "Ties are broken to maximize value.",
                "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
                "Solution sati is valid given tree Ti and <br>trade</br> λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given <br>trade</br> λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
                "This works for sellers as well as buyers: for sellers a <br>trade</br> is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the <br>trade</br>.",
                "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
                "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
                "The total value of <br>trade</br> λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
                "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
                "Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
                "OR* is known to be expressive and concise.",
                "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
                "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
                "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
                "In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient <br>trade</br>, V ∗ is the reported value of this <br>trade</br>, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆vcg,i = V ∗ − V−i the VCG discount.",
                "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
                "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome.",
                "Definition 2.",
                "The Threshold payment scheme implements the efficient <br>trade</br> λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance).",
                "Example 4.",
                "In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
                "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
                "This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes.",
                "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
                "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
                "THE ICE DESIGN We are now ready to introduce the iterative combinatorial exchange (ICE) design.",
                "Several new components are introduced, relative to the design for the one-shot exchange.",
                "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
                "The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) <br>trade</br> with respect to reported valuations.",
                "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional <br>trade</br> λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
                "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic <br>trade</br> (at v) and the pessimistic <br>trade</br> (at v).",
                "Prices pt are used to inform an activity rule, and drive progress towards an efficient <br>trade</br>. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
                "These take the place of the exact value viβ defined in Section 4.1.",
                "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
                "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
                "The following lemma is useful: Lemma 1.",
                "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
                "Proof.",
                "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
                "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
                "But, this is a contradiction because the <br>trade</br> λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
                "Given these provisional prices, the price on <br>trade</br> λi for bidder i is pt (λi) =   j≤m pt j · λij.",
                "Definition 3 (CE prices).",
                "Prices p∗ are competitive equilibrium prices if the efficient <br>trade</br> λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
                "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
                "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
                "II: Fairness.",
                "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
                "III: Balance.",
                "Third, we break ties to prefer prices that minimize the maximal price across all items.",
                "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
                "In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades.",
                "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
                "Each step is described in detail below.",
                "I: Accuracy.",
                "We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages.",
                "Let λt denote the current provisional <br>trade</br> and suppose the provisional valuation is vα .",
                "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
                "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
                "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point <br>trade</br> λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no <br>trade</br>, for all agents with no surplus for trade at the prices.)",
                "Example 5.",
                "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
                "The efficient <br>trade</br> allocates AB to buyer 1 and CD to buyer 3.",
                "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
                "But, (9) has an exponential number of constraints (Eq. 10).",
                "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
                "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
                "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
                "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
                "In R-WD(i) the objective is to determine a most preferred <br>trade</br> for each bidder at these prices.",
                "Let ˆλi denote the solution to R-WD(i).",
                "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
                "Otherwise, <br>trade</br> ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
                "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
                "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
                "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
                "This can be exactly achieved in pricing with pA + pB = 14.",
                "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
                "The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional <br>trade</br> and the VCG payoff (at vα ).",
                "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
                "III: Balance.",
                "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items.",
                "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
                "Finally, balance sets p(A) = p(B) = 7.",
                "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
                "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
                "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
                "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
                "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
                "Dunford et al. [12] prefer to smooth prices across rounds.",
                "Comment 1: Lexicographical Refinement.",
                "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
                "For instance, in ACC we successively minimize the maximal error across all bidders.",
                "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
                "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
                "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
                "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL.",
                "Comment 2: Computation.",
                "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
                "Thus, the computational effort in constraint generation is re-used.",
                "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
                "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
                "This avoids later infeasibility issues.",
                "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
                "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
                "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
                "We adopt a simple revealed-preference (RP) activity rule.",
                "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
                "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
                "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
                "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
                "Suppose a proxy was queried by the exchange and asked which <br>trade</br> the bidder was most interested in at the provisional prices.",
                "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
                "We pin these down and then minimize the error to bidders 3 and 4.",
                "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing <br>trade</br> at current prices.",
                "Consider the following examples: Example 7.",
                "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
                "Example 8.",
                "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
                "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
                "Definition 4.",
                "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible <br>trade</br> L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
                "First, we construct a candidate lower-bound <br>trade</br>, which is a feasible <br>trade</br> that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
                "Second, we break ties to find a <br>trade</br> with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the <br>trade</br> that may satisfy RP.",
                "To understand the importance of this tiebreaking rule consider Example 7.",
                "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
                "Notice that +B is a counterexample to +A, but not the other way round.",
                "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for <br>trade</br> L∗ i .",
                "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal <br>trade</br> at modified values ˜v.",
                "We call <br>trade</br> U∗ i the witness <br>trade</br>.",
                "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
                "Example 8 helps to illustrate this.",
                "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
                "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
                "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
                "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
                "Proposition 1.",
                "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound <br>trade</br> L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
                "Proof.",
                "For sufficiency, notice that the difference in payoff between <br>trade</br> L∗ i and another <br>trade</br> λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
                "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a <br>trade</br> U∗ i is selected that satisfies one of these nodes.",
                "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
                "For the necessary direction, we first show that any <br>trade</br> that satisfies RP must solve RP1(i).",
                "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
                "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
                "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
                "Proceed by case analysis.",
                "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
                "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
                "Case b): two or more solutions to RP1(i) have uncertain value.",
                "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
                "This is by RP.",
                "Without this, then for any choice of <br>trade</br> that solves RP1(i), there is another <br>trade</br> with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
                "Now, consider the case that some <br>trade</br> contains a superset of all the uncertain satisfied nodes of the other trades.",
                "Clearly RP2(i) will choose this <br>trade</br>, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
                "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
                "Failure to meet the activity rule must have some consequence.",
                "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional <br>trade</br> and also with the current provisional prices.",
                "See 7 for an additional discussion.",
                "We also provide guidance to help a bidder meet the RP rule.",
                "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
                "Lemma 2.",
                "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
                "Proof.",
                "Changing the upper- or lower- values on nodes that are not satisfied by either <br>trade</br> does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
                "Thus, the RP condition will continue to fail.",
                "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
                "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
                "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
                "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
                "This is an elegant feedback mechanism because it is adaptive.",
                "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
                "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
                "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
                "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
                "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient <br>trade</br>, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
                "Pessimistic at Optimistic (PO) Determine an efficient <br>trade</br>, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
                "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right <br>trade</br> at v is not currently a useful <br>trade</br> at v).",
                "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
                "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
                "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
                "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
                "Termination Condition.",
                "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient <br>trade</br>.",
                "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
                "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in <br>trade</br> in the PP <br>trade</br>, and || · ||2 is the L2-norm.",
                "Note that γthresh is defined for payments and not payoffs.",
                "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the <br>trade</br> and the payments.",
                "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
                "Definition 5 (termination).",
                "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no <br>trade</br> at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
                "At the end of the last-and-final round vα = v is used to define the final <br>trade</br> and the final Threshold payments.",
                "Example 9.",
                "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
                "First, if the sellers bounds were [−20, −4] then there is an optimistic <br>trade</br> but no pessimistic <br>trade</br>, and PO = −4 and PP = 0, and αeff = 0.",
                "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
                "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
                "For CUTOFFthresh < 2/5 the exchange would remain open.",
                "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
                "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the tree-based bidding language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
                "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
                "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
                "A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy.",
                "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
                "These engines drive the appropriate MIP/LP builders.",
                "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
                "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
                "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
                "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
                "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
                "DISCUSSION The bidding language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
                "This proved especially challenging.",
                "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
                "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
                "The total of 6502 includes 184 for instrumentation (not shown in the table).",
                "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
                "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
                "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
                "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
                "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
                "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient <br>trade</br> at pessimistic values.",
                "Upper and lower bound information also provides guidance about when to terminate.",
                "Note that taken by itself, PP = PO does not imply that the current provisional <br>trade</br> is efficient with respect to all values consistent with current value information.",
                "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
                "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
                "This is worthy of experimental investigation.",
                "Moreover, the use of price and RP activity provides additional guarantees.",
                "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a <br>trade</br> not equal to the sum of the prices on the component items) early in the design process.",
                "The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
                "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
                "The following can be easily established: given exact CE prices pt−1 for provisional <br>trade</br> 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional <br>trade</br> is efficient for all valuations consistent with the current bid trees.",
                "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional <br>trade</br> is efficient (soundness); if prices are exact CE prices for the provisional <br>trade</br> at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
                "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
                "Some strategic aspects of our ICE design deserve comment, and further study.",
                "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
                "We must be careful, though.",
                "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the <br>trade</br> but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
                "Also, no consideration has been given in this work to collusion by bidders.",
                "This is an issue that deserves some attention in future work. 8.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative combinatorial exchange.",
                "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
                "The exchange is fully implemented in Java and is in a validation phase.",
                "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
                "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
                "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
                "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
                "This work is supported in part by NSF grant IIS-0238147. 9.",
                "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
                "The clock-proxy auction: A practical combinatorial auction design.",
                "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
                "Mechanisms for a spatially distributed market.",
                "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
                "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the <br>trade</br> we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
                "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
                "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
                "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
                "Introduction to Linear Optimization.",
                "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
                "A pomdp formulation of preference elicitation problems.",
                "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
                "Bidding languages for combinatorial auctions.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
                "Preference elicitation in combinatorial auctions.",
                "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
                "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
                "Combinatorial Auctions.",
                "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
                "On ascending Vickrey auctions for heterogeneous objects.",
                "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
                "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
                "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
                "Chase, B. Chun, S. Schwab, and A. Vahdat.",
                "Sharp: an architecture for secure resource peering.",
                "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
                "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In Proc. 3rd Int.",
                "Joint.",
                "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [16] D. Krych.",
                "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
                "A new and improved design for multi-object iterative auctions.",
                "Management Science, 2004.",
                "To appear. [18] E. Kwerel and J. Williams.",
                "A proposal for a rapid transition to market allocation of spectrum.",
                "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proc.",
                "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
                "A dominant strategy double auction.",
                "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
                "Putting auction theory to work: The simultaneous ascending auction.",
                "J.Pol.",
                "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
                "Iterative combinatorial auctions: Theory and practice.",
                "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
                "A combinatorial mechanism for airport time slot allocation.",
                "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
            ],
            "original_annotated_samples": [
                "These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient <br>trade</br> despite partial information on bidder valuations.",
                "In a double auction (DA), multiple buyers and sellers <br>trade</br> units of an identical good [20].",
                "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to <br>trade</br> multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a <br>trade</br> where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the <br>trade</br> to be acceptable."
            ],
            "translated_annotated_samples": [
                "Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un <br>intercambio</br> eficiente a pesar de contar con información parcial sobre las valoraciones de los postores.",
                "En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20].",
                "Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para <br>comerciar</br> múltiples bienes heterogéneos.",
                "Por ejemplo, en un <br>intercambio</br> por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un <br>intercambio</br> donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC.",
                "El lenguaje describe valores para <br>intercambio</br>s, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el <br>intercambio</br> sea aceptable."
            ],
            "translated_text": "Presentamos el primer diseño para un intercambio combinatorio iterativo (ICE). El intercambio incorpora un lenguaje de oferta basado en árboles que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un <br>intercambio</br> eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20]. En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para <br>comerciar</br> múltiples bienes heterogéneos. Por ejemplo, en un <br>intercambio</br> por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un <br>intercambio</br> donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un intercambio combinatorio iterativo (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda. La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de oferta basado en árboles expresivo y conciso. El lenguaje describe valores para <br>intercambio</br>s, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el <br>intercambio</br> sea aceptable. ",
            "candidates": [],
            "error": [
                [
                    "intercambio",
                    "comerciar",
                    "intercambio",
                    "intercambio",
                    "intercambio",
                    "intercambio"
                ]
            ]
        },
        "tree-based bidding language": {
            "translated_key": "lenguaje de oferta basado en árboles",
            "is_in_text": true,
            "original_annotated_sentences": [
                "ICE: An Iterative Combinatorial Exchange David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative combinatorial exchange (ICE).",
                "The exchange incorporates a <br>tree-based bidding language</br> that is concise and expressive for CEs.",
                "Bidders specify lower and upper bounds on their value for different trades.",
                "These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
                "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
                "A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "The exchange is fully implemented and in a validation phase.",
                "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
                "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
                "In a double auction (DA), multiple buyers and sellers trade units of an identical good [20].",
                "In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language.",
                "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
                "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling.",
                "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
                "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
                "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
                "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
                "This paper presents the first design for an iterative combinatorial exchange (ICE).",
                "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
                "The ICE design problem is multi-faceted and quite hard.",
                "The main innovation in our design is an expressive yet concise <br>tree-based bidding language</br> (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round.",
                "The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "The exchange has a number of interesting theoretical properties.",
                "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
                "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
                "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
                "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
                "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "The exchange is implemented in Java and is currently in validation.",
                "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
                "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
                "We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions.",
                "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise <br>tree-based bidding language</br>.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable.",
                "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
                "Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
                "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
                "An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade.",
                "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
                "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades.",
                "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
                "A revealed-preference activity rule [1] ensures progress across rounds.",
                "In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices.",
                "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
                "An outline of the ICE system flow of control is provided in Figure 1.",
                "We will return to this example later in the paper.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance).",
                "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round.",
                "At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29].",
                "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
                "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
                "The price generation methods that we use in ICE generalize the methods in these earlier papers.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule.",
                "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
                "We are not aware of any previous studies of iterative CEs.",
                "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
                "No dominant strategy mechanisms are known for the general CE problem.",
                "ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
                "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
                "The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
                "Rothkopf et al. [27] also describe a restricted <br>tree-based bidding language</br>.",
                "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
                "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
                "The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
                "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
                "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
                "A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
                "So, the final allocation is x1 = x0 + λ.",
                "Each bidder has a value vi(λi) ∈ ¡ for a trade λi.",
                "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
                "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ .",
                "Price p can be negative, indicating the bidder receives a payment for the trade.",
                "We use the term payoff interchangeably with utility.",
                "Our goal in the ICE design is to implement the efficient trade.",
                "The efficient trade, λ∗ , maximizes the total increase in value across bidders.",
                "Definition 1 (Efficient trade).",
                "The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
                "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
                "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
                "All three examples have only one seller, but this is purely illustrative.",
                "Example 1.",
                "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
                "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
                "Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
                "Example 2.",
                "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
                "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
                "The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
                "Example 3.",
                "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
                "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 <br>tree-based bidding language</br> The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades.",
                "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
                "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
                "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
                "We illustrate the language on each of Examples 1-3 in Figure 2.",
                "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
                "The nodes have zero values where no value is indicated.",
                "Internal nodes are also labeled with interval-choose (IC) ranges.",
                "Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
                "First, if a child is on then its parent must be on.",
                "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
                "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade.",
                "For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
                "On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
                "Given a trade there is often a number of ways to choose the set of satisfied nodes.",
                "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
                "Consider bid tree Ti from bidder i.",
                "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
                "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
                "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
                "Every node is also labeled with a value, viβ ∈ ¡ .",
                "Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.)",
                "Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
                "There will often be a choice.",
                "Ties are broken to maximize value.",
                "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
                "Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
                "This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade.",
                "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
                "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
                "The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
                "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
                "Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
                "OR* is known to be expressive and concise.",
                "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
                "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
                "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
                "In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆vcg,i = V ∗ − V−i the VCG discount.",
                "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
                "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome.",
                "Definition 2.",
                "The Threshold payment scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance).",
                "Example 4.",
                "In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
                "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
                "This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes.",
                "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
                "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
                "THE ICE DESIGN We are now ready to introduce the iterative combinatorial exchange (ICE) design.",
                "Several new components are introduced, relative to the design for the one-shot exchange.",
                "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
                "The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations.",
                "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
                "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v).",
                "Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
                "These take the place of the exact value viβ defined in Section 4.1.",
                "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
                "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
                "The following lemma is useful: Lemma 1.",
                "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
                "Proof.",
                "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
                "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
                "But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
                "Given these provisional prices, the price on trade λi for bidder i is pt (λi) =   j≤m pt j · λij.",
                "Definition 3 (CE prices).",
                "Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
                "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
                "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
                "II: Fairness.",
                "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
                "III: Balance.",
                "Third, we break ties to prefer prices that minimize the maximal price across all items.",
                "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
                "In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades.",
                "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
                "Each step is described in detail below.",
                "I: Accuracy.",
                "We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages.",
                "Let λt denote the current provisional trade and suppose the provisional valuation is vα .",
                "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
                "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
                "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.)",
                "Example 5.",
                "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
                "The efficient trade allocates AB to buyer 1 and CD to buyer 3.",
                "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
                "But, (9) has an exponential number of constraints (Eq. 10).",
                "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
                "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
                "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
                "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
                "In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices.",
                "Let ˆλi denote the solution to R-WD(i).",
                "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
                "Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
                "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
                "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
                "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
                "This can be exactly achieved in pricing with pA + pB = 14.",
                "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
                "The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the VCG payoff (at vα ).",
                "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
                "III: Balance.",
                "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items.",
                "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
                "Finally, balance sets p(A) = p(B) = 7.",
                "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
                "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
                "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
                "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
                "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
                "Dunford et al. [12] prefer to smooth prices across rounds.",
                "Comment 1: Lexicographical Refinement.",
                "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
                "For instance, in ACC we successively minimize the maximal error across all bidders.",
                "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
                "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
                "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
                "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL.",
                "Comment 2: Computation.",
                "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
                "Thus, the computational effort in constraint generation is re-used.",
                "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
                "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
                "This avoids later infeasibility issues.",
                "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
                "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
                "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
                "We adopt a simple revealed-preference (RP) activity rule.",
                "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
                "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
                "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
                "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
                "Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices.",
                "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
                "We pin these down and then minimize the error to bidders 3 and 4.",
                "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices.",
                "Consider the following examples: Example 7.",
                "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
                "Example 8.",
                "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
                "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
                "Definition 4.",
                "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
                "First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
                "Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP.",
                "To understand the importance of this tiebreaking rule consider Example 7.",
                "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
                "Notice that +B is a counterexample to +A, but not the other way round.",
                "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i .",
                "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v.",
                "We call trade U∗ i the witness trade.",
                "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
                "Example 8 helps to illustrate this.",
                "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
                "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
                "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
                "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
                "Proposition 1.",
                "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
                "Proof.",
                "For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
                "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes.",
                "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
                "For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i).",
                "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
                "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
                "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
                "Proceed by case analysis.",
                "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
                "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
                "Case b): two or more solutions to RP1(i) have uncertain value.",
                "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
                "This is by RP.",
                "Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
                "Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades.",
                "Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
                "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
                "Failure to meet the activity rule must have some consequence.",
                "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices.",
                "See 7 for an additional discussion.",
                "We also provide guidance to help a bidder meet the RP rule.",
                "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
                "Lemma 2.",
                "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
                "Proof.",
                "Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
                "Thus, the RP condition will continue to fail.",
                "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
                "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
                "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
                "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
                "This is an elegant feedback mechanism because it is adaptive.",
                "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
                "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
                "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
                "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
                "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
                "Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
                "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v).",
                "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
                "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
                "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
                "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
                "Termination Condition.",
                "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade.",
                "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
                "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm.",
                "Note that γthresh is defined for payments and not payoffs.",
                "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments.",
                "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
                "Definition 5 (termination).",
                "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
                "At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments.",
                "Example 9.",
                "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
                "First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0.",
                "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
                "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
                "For CUTOFFthresh < 2/5 the exchange would remain open.",
                "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
                "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the <br>tree-based bidding language</br> 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
                "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
                "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
                "A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy.",
                "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
                "These engines drive the appropriate MIP/LP builders.",
                "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
                "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
                "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
                "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
                "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
                "DISCUSSION The bidding language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
                "This proved especially challenging.",
                "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
                "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
                "The total of 6502 includes 184 for instrumentation (not shown in the table).",
                "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
                "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
                "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
                "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
                "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
                "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values.",
                "Upper and lower bound information also provides guidance about when to terminate.",
                "Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information.",
                "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
                "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
                "This is worthy of experimental investigation.",
                "Moreover, the use of price and RP activity provides additional guarantees.",
                "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process.",
                "The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
                "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
                "The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees.",
                "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
                "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
                "Some strategic aspects of our ICE design deserve comment, and further study.",
                "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
                "We must be careful, though.",
                "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
                "Also, no consideration has been given in this work to collusion by bidders.",
                "This is an issue that deserves some attention in future work. 8.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative combinatorial exchange.",
                "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
                "The exchange is fully implemented in Java and is in a validation phase.",
                "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
                "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
                "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
                "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
                "This work is supported in part by NSF grant IIS-0238147. 9.",
                "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
                "The clock-proxy auction: A practical combinatorial auction design.",
                "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
                "Mechanisms for a spatially distributed market.",
                "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
                "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
                "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
                "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
                "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
                "Introduction to Linear Optimization.",
                "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
                "A pomdp formulation of preference elicitation problems.",
                "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
                "Bidding languages for combinatorial auctions.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
                "Preference elicitation in combinatorial auctions.",
                "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
                "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
                "Combinatorial Auctions.",
                "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
                "On ascending Vickrey auctions for heterogeneous objects.",
                "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
                "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
                "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
                "Chase, B. Chun, S. Schwab, and A. Vahdat.",
                "Sharp: an architecture for secure resource peering.",
                "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
                "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In Proc. 3rd Int.",
                "Joint.",
                "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [16] D. Krych.",
                "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
                "A new and improved design for multi-object iterative auctions.",
                "Management Science, 2004.",
                "To appear. [18] E. Kwerel and J. Williams.",
                "A proposal for a rapid transition to market allocation of spectrum.",
                "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proc.",
                "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
                "A dominant strategy double auction.",
                "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
                "Putting auction theory to work: The simultaneous ascending auction.",
                "J.Pol.",
                "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
                "Iterative combinatorial auctions: Theory and practice.",
                "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
                "A combinatorial mechanism for airport time slot allocation.",
                "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
            ],
            "original_annotated_samples": [
                "The exchange incorporates a <br>tree-based bidding language</br> that is concise and expressive for CEs.",
                "The main innovation in our design is an expressive yet concise <br>tree-based bidding language</br> (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise <br>tree-based bidding language</br>.",
                "Rothkopf et al. [27] also describe a restricted <br>tree-based bidding language</br>.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 <br>tree-based bidding language</br> The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades."
            ],
            "translated_annotated_samples": [
                "El intercambio incorpora un <br>lenguaje de oferta basado en árboles</br> que es conciso y expresivo para los CE.",
                "La principal innovación en nuestro diseño es un <br>lenguaje de oferta basado en árboles</br> expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas.",
                "UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • <br>Lenguaje de oferta basado en árboles</br> expresivo y conciso.",
                "Rothkopf et al. [27] también describen un <br>lenguaje de oferta basado en árboles</br> restringido.",
                "En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a compradores y vendedores, y para extenderse y capturar ofertas de compradores y vendedores mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas."
            ],
            "translated_text": "Presentamos el primer diseño para un intercambio combinatorio iterativo (ICE). El intercambio incorpora un <br>lenguaje de oferta basado en árboles</br> que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20]. En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos. Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un intercambio combinatorio iterativo (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un <br>lenguaje de oferta basado en árboles</br> expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda. La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • <br>Lenguaje de oferta basado en árboles</br> expresivo y conciso. El lenguaje describe valores para intercambios, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el intercambio sea aceptable. El lenguaje permite a los postores expresar límites superiores e inferiores en el valor, los cuales pueden ser ajustados en cada ronda. • Determinación del ganador. La determinación del ganador (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación. Comparar la solución en los valores superiores e inferiores permite tomar una decisión sobre la terminación, con el progreso en rondas intermedias impulsado por una valoración intermedia y los valores inferiores adoptados al finalizar. • Pagos. Los pagos se calculan utilizando la regla de pago del umbral [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de precios. Se calcula un precio aproximado para cada artículo en el intercambio en cada ronda, en función de las valoraciones intermedias y el intercambio provisional. Los precios se optimizan para aproximar los precios de equilibrio competitivo, y luego se optimizan aún más para aproximar mejor los pagos del umbral actual con los lazos restantes rotos para favorecer los precios equilibrados entre diferentes artículos. Al calcular los precios, adoptamos los métodos de generación de restricciones para explotar la estructura del lenguaje de oferta y evitar enumerar todos los intercambios factibles. El subproblema para generar nuevas restricciones es una variación del problema WD. • Regla de actividad. Una regla de actividad de preferencia revelada [1] garantiza progreso a lo largo de las rondas. Para permanecer activo, un oferente debe ajustar los límites para que haya suficiente información para definir un intercambio que maximice el excedente a los precios actuales. Otra variación del problema de WD se formula, tanto para verificar que se cumple la regla de actividad como para proporcionar retroalimentación a un postor para explicar cómo cumplir la regla. Se proporciona un esquema del flujo de control del sistema ICE en la Figura 1. Volveremos a este ejemplo más adelante en el documento. Por ahora, simplemente observa en este ejemplo de dos agentes que los agentes establecen límites inferiores y superiores que son verificados en la regla de actividad, y luego pasados a la determinación del ganador (WD), y luego a través de tres etapas de fijación de precios (precisión, equidad, equilibrio). Al pasar la regla de cierre (en la que se verifican los parámetros αeff y αthresh para la convergencia del comercio y los pagos), el intercambio pasa a una última y definitiva ronda. Al final de esta ronda, el intercambio y los pagos finalmente se determinan, basados en las valoraciones más bajas. 2.1 Trabajo Relacionado En la literatura se conocen muchos CAs de un solo lado con precios ascendentes [10, 25, 29]. También se han propuesto enfoques de elicitación directa para los AC unilaterales en los que los agentes responden a preguntas explícitas sobre sus valoraciones [8, 14, 19]. Un número de CAs ascendentes están diseñados para trabajar con precios simples en artículos [12, 17]. Los métodos de generación de precios que utilizamos en ICE generalizan los métodos de estos artículos anteriores. Parkes et al. [24] estudiaron intercambios combinatorios de oferta sellada e introdujeron la regla de pago umbral. Posteriormente, Krych [16] demostró experimentalmente que la regla del Umbral promueve asignaciones eficientes. No tenemos conocimiento de ningún estudio previo sobre CEs iterativos. Las estrategias dominantes DAs son conocidas por la demanda unitaria [20] y también por agentes de mente única [2]. No se conocen mecanismos de estrategia dominante para el problema general de la CE. ICE es un diseño de subasta híbrido, ya que combina precios simples de artículos para impulsar las ofertas en las primeras rondas con WD combinatorio y pagos, una característica que comparte con el diseño de reloj-proxy de Ausubel et al. [1] para subastas unilaterales. Adoptamos una variación de la regla de actividad de preferencia revelada en las subastas de proxy de reloj. El lenguaje de subasta comparte algunos elementos estructurales con el lenguaje LGB de Boutilier y Hoos [7], pero tiene semántica muy diferente. Rothkopf et al. [27] también describen un <br>lenguaje de oferta basado en árboles</br> restringido. En LGB, la semántica es la de la lógica proposicional, con los mismos elementos en una asignación capaces de satisfacer un árbol en múltiples lugares. Aunque esto puede hacer que LGB sea especialmente conciso en algunos contextos, la semántica que proponemos parece proporcionar una utilidad local, de modo que el valor de un componente en un árbol pueda ser comprendido de forma independiente al resto del árbol. La idea de capturar la estructura de nuestro lenguaje de oferta de manera explícita dentro de una formulación de programación entera mixta sigue los desarrollos en Boutilier [6]. 3. PRELIMINARES En nuestro modelo, consideramos un conjunto de bienes, indexados {1, . . . , m} y un conjunto de postores, indexados {1, . . . , n}. La asignación inicial de bienes se denota como x0 = (x0 1, . . . , x0 n), donde x0 i = (x0 i1, . . . , x0 im) y x0 ij ≥ 0 para el bien j indicando el número de unidades del bien j que posee el postor i. Un intercambio λ = (λ1, . . . , λn) denota el cambio en la asignación, con λi = (λi1, . . . , λim) donde λij ∈ es el cambio en el número de unidades del ítem j para el postor i. Entonces, la asignación final es x1 = x0 + λ. Cada postor tiene un valor vi(λi) ∈ ¡ para una transacción λi. Este valor puede ser positivo o negativo, y representa el cambio en el valor entre la asignación final x0 i +λi y la asignación inicial x0 i. La utilidad es cuasi-lineal, con ui(λi, p) = vi(λi)−p para el intercambio λi y el pago p ∈ ¡. El precio p puede ser negativo, lo que indica que el postor recibe un pago por la transacción. Utilizamos el término \"pago\" de manera intercambiable con \"utilidad\". Nuestro objetivo en el diseño de ICE es implementar el comercio eficiente. El intercambio eficiente, λ∗, maximiza el aumento total de valor entre los postores. Definición 1 (Comercio eficiente). El intercambio eficiente λ∗ resuelve max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Las restricciones (1) aseguran que ningún agente venda más artículos de los que tiene en su asignación inicial. Las restricciones (2) permiten la disposición gratuita y permiten que los intercambios factibles vendan más artículos de los que se compran (pero no al revés). Posteriormente, adoptamos Feas(x0) para denotar el conjunto de intercambios factibles, dados estos límites y una asignación inicial x0 = (x0 1, . . . , x0 n). 3.1 Ejemplos Prácticos En esta sección, proporcionamos tres ejemplos simples de instancias que utilizaremos para ilustrar varios componentes del intercambio. Todos los tres ejemplos tienen solo un vendedor, pero esto es puramente ilustrativo. Ejemplo 1. Un vendedor y un comprador, dos bienes {A, B}, con el vendedor teniendo una asignación inicial de AB. Cambios en los valores de los intercambios: vendedor comprador Y (−A, −B) Y (+A, +B) -10 +20 El Y indica que tanto el comprador como el vendedor solo están interesados en intercambiar ambos bienes como un paquete. Aquí, el intercambio eficiente (que maximiza el valor) es para el vendedor vender AB al comprador, denotado como λ∗ = ([−1, −1], [+1, +1]). Ejemplo 2. Un vendedor y cuatro compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de las transacciones: vendedor comprador1 comprador 2 comprador 3 comprador 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 El OR indica que el vendedor está dispuesto a vender cualquier cantidad de bienes. El XOR indica que los compradores 2 y 4 están dispuestos a comprar como máximo uno de los dos bienes en los que están interesados. El comercio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD al comprador 3, denotado λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR Ejemplo 1: Ejemplo 3: 2,2 +C +D COMPRADOR 2 2,2 +A +B COMPRADOR 1 +11 +84,4 -B VENDEDOR -A -C -D Ejemplo 2: 1,1 +A +B COMPRADOR 2 2,2 +A +B COMPRADOR 1 +6 +40,4 -B VENDEDOR -C -D-A 1,1 +C +D COMPRADOR 4 2,2 +C +D +3 +2 COMPRADOR 3 -18 Figura 2: Ejemplo de Árboles de Ofertas. Ejemplo 3. Un vendedor y dos compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de los intercambios: vendedor comprador1 comprador 2 Y (−A, −B, −C, −D) Y (+A, +B) Y (+C, +D) -18 +11 +8 El intercambio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD vaya al comprador 2, denotado por λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4. Un DISEÑO DE INTERCAMBIO DE UNA SOLA VEZ La descripción de ICE se divide en dos secciones: una sola vez (oferta sellada) e iterativa. En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a compradores y vendedores, y para extenderse y capturar ofertas de compradores y vendedores mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "price": {
            "translated_key": "precio",
            "is_in_text": true,
            "original_annotated_sentences": [
                "ICE: An Iterative Combinatorial Exchange David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative combinatorial exchange (ICE).",
                "The exchange incorporates a tree-based bidding language that is concise and expressive for CEs.",
                "Bidders specify lower and upper bounds on their value for different trades.",
                "These bounds allow <br>price</br> discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
                "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
                "A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "The exchange is fully implemented and in a validation phase.",
                "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
                "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
                "In a double auction (DA), multiple buyers and sellers trade units of an identical good [20].",
                "In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language.",
                "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
                "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling.",
                "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
                "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
                "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
                "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
                "This paper presents the first design for an iterative combinatorial exchange (ICE).",
                "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
                "The ICE design problem is multi-faceted and quite hard.",
                "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for <br>price</br>-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to <br>price</br> feedback in each round.",
                "The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "The exchange has a number of interesting theoretical properties.",
                "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
                "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
                "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
                "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
                "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "The exchange is implemented in Java and is currently in validation.",
                "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
                "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
                "We then describe the full iterative exchange, with upper and lower values, <br>price</br>-feedback, activity rules, and termination conditions.",
                "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based bidding language.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable.",
                "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
                "Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
                "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • <br>price</br> feedback.",
                "An approximate <br>price</br> is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade.",
                "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
                "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades.",
                "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
                "A revealed-preference activity rule [1] ensures progress across rounds.",
                "In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices.",
                "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
                "An outline of the ICE system flow of control is provided in Figure 1.",
                "We will return to this example later in the paper.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance).",
                "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round.",
                "At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-<br>price</br> one-sided CAs are known in the literature [10, 25, 29].",
                "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
                "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
                "The <br>price</br> generation methods that we use in ICE generalize the methods in these earlier papers.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule.",
                "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
                "We are not aware of any previous studies of iterative CEs.",
                "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
                "No dominant strategy mechanisms are known for the general CE problem.",
                "ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
                "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
                "The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
                "Rothkopf et al. [27] also describe a restricted tree-based bidding language.",
                "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
                "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
                "The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
                "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
                "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
                "A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
                "So, the final allocation is x1 = x0 + λ.",
                "Each bidder has a value vi(λi) ∈ ¡ for a trade λi.",
                "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
                "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ .",
                "<br>price</br> p can be negative, indicating the bidder receives a payment for the trade.",
                "We use the term payoff interchangeably with utility.",
                "Our goal in the ICE design is to implement the efficient trade.",
                "The efficient trade, λ∗ , maximizes the total increase in value across bidders.",
                "Definition 1 (Efficient trade).",
                "The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
                "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
                "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
                "All three examples have only one seller, but this is purely illustrative.",
                "Example 1.",
                "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
                "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
                "Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
                "Example 2.",
                "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
                "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
                "The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
                "Example 3.",
                "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
                "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades.",
                "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
                "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
                "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
                "We illustrate the language on each of Examples 1-3 in Figure 2.",
                "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
                "The nodes have zero values where no value is indicated.",
                "Internal nodes are also labeled with interval-choose (IC) ranges.",
                "Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
                "First, if a child is on then its parent must be on.",
                "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
                "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade.",
                "For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
                "On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
                "Given a trade there is often a number of ways to choose the set of satisfied nodes.",
                "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
                "Consider bid tree Ti from bidder i.",
                "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
                "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
                "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
                "Every node is also labeled with a value, viβ ∈ ¡ .",
                "Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.)",
                "Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
                "There will often be a choice.",
                "Ties are broken to maximize value.",
                "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
                "Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
                "This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade.",
                "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
                "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
                "The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
                "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
                "Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
                "OR* is known to be expressive and concise.",
                "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
                "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
                "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
                "In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆vcg,i = V ∗ − V−i the VCG discount.",
                "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
                "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome.",
                "Definition 2.",
                "The Threshold payment scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance).",
                "Example 4.",
                "In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
                "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
                "This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes.",
                "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
                "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
                "THE ICE DESIGN We are now ready to introduce the iterative combinatorial exchange (ICE) design.",
                "Several new components are introduced, relative to the design for the one-shot exchange.",
                "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
                "The exchange provides <br>price</br>-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations.",
                "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
                "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v).",
                "Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
                "These take the place of the exact value viβ defined in Section 4.1.",
                "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
                "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
                "The following lemma is useful: Lemma 1.",
                "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
                "Proof.",
                "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
                "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
                "But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 <br>price</br> Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
                "Given these provisional prices, the <br>price</br> on trade λi for bidder i is pt (λi) =   j≤m pt j · λij.",
                "Definition 3 (CE prices).",
                "Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
                "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
                "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
                "II: Fairness.",
                "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
                "III: Balance.",
                "Third, we break ties to prefer prices that minimize the maximal <br>price</br> across all items.",
                "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
                "In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades.",
                "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
                "Each step is described in detail below.",
                "I: Accuracy.",
                "We adopt a definition of <br>price</br> accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages.",
                "Let λt denote the current provisional trade and suppose the provisional valuation is vα .",
                "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
                "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
                "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.)",
                "Example 5.",
                "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
                "The efficient trade allocates AB to buyer 1 and CD to buyer 3.",
                "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
                "But, (9) has an exponential number of constraints (Eq. 10).",
                "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
                "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
                "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
                "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
                "In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices.",
                "Let ˆλi denote the solution to R-WD(i).",
                "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
                "Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
                "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
                "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
                "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
                "This can be exactly achieved in pricing with pA + pB = 14.",
                "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
                "The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the VCG payoff (at vα ).",
                "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
                "III: Balance.",
                "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal <br>price</br> across all items.",
                "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
                "Finally, balance sets p(A) = p(B) = 7.",
                "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
                "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
                "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
                "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
                "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
                "Dunford et al. [12] prefer to smooth prices across rounds.",
                "Comment 1: Lexicographical Refinement.",
                "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
                "For instance, in ACC we successively minimize the maximal error across all bidders.",
                "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
                "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
                "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
                "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal <br>price</br> on that item) in BAL.",
                "Comment 2: Computation.",
                "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
                "Thus, the computational effort in constraint generation is re-used.",
                "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
                "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
                "This avoids later infeasibility issues.",
                "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
                "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
                "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
                "We adopt a simple revealed-preference (RP) activity rule.",
                "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
                "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
                "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
                "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
                "Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices.",
                "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
                "We pin these down and then minimize the error to bidders 3 and 4.",
                "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices.",
                "Consider the following examples: Example 7.",
                "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
                "Example 8.",
                "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
                "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
                "Definition 4.",
                "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
                "First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
                "Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP.",
                "To understand the importance of this tiebreaking rule consider Example 7.",
                "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
                "Notice that +B is a counterexample to +A, but not the other way round.",
                "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i .",
                "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v.",
                "We call trade U∗ i the witness trade.",
                "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
                "Example 8 helps to illustrate this.",
                "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
                "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
                "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
                "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
                "Proposition 1.",
                "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
                "Proof.",
                "For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
                "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes.",
                "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
                "For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i).",
                "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
                "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
                "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
                "Proceed by case analysis.",
                "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
                "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
                "Case b): two or more solutions to RP1(i) have uncertain value.",
                "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
                "This is by RP.",
                "Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
                "Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades.",
                "Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
                "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
                "Failure to meet the activity rule must have some consequence.",
                "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional <br>price</br> on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional <br>price</br> on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices.",
                "See 7 for an additional discussion.",
                "We also provide guidance to help a bidder meet the RP rule.",
                "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
                "Lemma 2.",
                "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
                "Proof.",
                "Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
                "Thus, the RP condition will continue to fail.",
                "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
                "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
                "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
                "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
                "This is an elegant feedback mechanism because it is adaptive.",
                "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
                "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
                "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
                "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
                "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
                "Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
                "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v).",
                "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
                "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
                "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
                "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
                "Termination Condition.",
                "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade.",
                "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
                "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm.",
                "Note that γthresh is defined for payments and not payoffs.",
                "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments.",
                "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
                "Definition 5 (termination).",
                "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
                "At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments.",
                "Example 9.",
                "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
                "First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0.",
                "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
                "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
                "For CUTOFFthresh < 2/5 the exchange would remain open.",
                "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
                "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the tree-based bidding language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
                "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
                "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
                "A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy.",
                "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
                "These engines drive the appropriate MIP/LP builders.",
                "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
                "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
                "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
                "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
                "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
                "DISCUSSION The bidding language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
                "This proved especially challenging.",
                "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
                "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
                "The total of 6502 includes 184 for instrumentation (not shown in the table).",
                "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
                "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
                "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
                "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
                "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
                "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values.",
                "Upper and lower bound information also provides guidance about when to terminate.",
                "Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information.",
                "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
                "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
                "This is worthy of experimental investigation.",
                "Moreover, the use of <br>price</br> and RP activity provides additional guarantees.",
                "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process.",
                "The conciseness of this <br>price</br> representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
                "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
                "The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect <br>price</br>-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees.",
                "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
                "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
                "Some strategic aspects of our ICE design deserve comment, and further study.",
                "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
                "We must be careful, though.",
                "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
                "Also, no consideration has been given in this work to collusion by bidders.",
                "This is an issue that deserves some attention in future work. 8.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative combinatorial exchange.",
                "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
                "The exchange is fully implemented in Java and is in a validation phase.",
                "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
                "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
                "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
                "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
                "This work is supported in part by NSF grant IIS-0238147. 9.",
                "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
                "The clock-proxy auction: A practical combinatorial auction design.",
                "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
                "Mechanisms for a spatially distributed market.",
                "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
                "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
                "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
                "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
                "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
                "Introduction to Linear Optimization.",
                "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
                "A pomdp formulation of preference elicitation problems.",
                "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
                "Bidding languages for combinatorial auctions.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
                "Preference elicitation in combinatorial auctions.",
                "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
                "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
                "Combinatorial Auctions.",
                "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
                "On ascending Vickrey auctions for heterogeneous objects.",
                "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
                "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
                "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
                "Chase, B. Chun, S. Schwab, and A. Vahdat.",
                "Sharp: an architecture for secure resource peering.",
                "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
                "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In Proc. 3rd Int.",
                "Joint.",
                "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [16] D. Krych.",
                "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
                "A new and improved design for multi-object iterative auctions.",
                "Management Science, 2004.",
                "To appear. [18] E. Kwerel and J. Williams.",
                "A proposal for a rapid transition to market allocation of spectrum.",
                "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proc.",
                "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
                "A dominant strategy double auction.",
                "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
                "Putting auction theory to work: The simultaneous ascending auction.",
                "J.Pol.",
                "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
                "Iterative combinatorial auctions: Theory and practice.",
                "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
                "A combinatorial mechanism for airport time slot allocation.",
                "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
                "AkBA: A progressive, anonymous-<br>price</br> combinatorial auction.",
                "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
            ],
            "original_annotated_samples": [
                "These bounds allow <br>price</br> discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for <br>price</br>-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to <br>price</br> feedback in each round.",
                "We then describe the full iterative exchange, with upper and lower values, <br>price</br>-feedback, activity rules, and termination conditions.",
                "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • <br>price</br> feedback."
            ],
            "translated_annotated_samples": [
                "Estos límites permiten descubrir <br>precio</br>s y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores.",
                "La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de <br>precio</br>s para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas.",
                "El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de <br>precio</br>s en cada ronda.",
                "Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de <br>precio</br>s, reglas de actividad y condiciones de terminación.",
                "Los pagos se calculan utilizando la regla de pago del umbral [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de <br>precio</br>s."
            ],
            "translated_text": "Presentamos el primer diseño para un intercambio combinatorio iterativo (ICE). El intercambio incorpora un lenguaje de oferta basado en árboles que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir <br>precio</br>s y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20]. En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos. Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un intercambio combinatorio iterativo (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de <br>precio</br>s para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de <br>precio</br>s en cada ronda. La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de <br>precio</br>s, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de oferta basado en árboles expresivo y conciso. El lenguaje describe valores para intercambios, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el intercambio sea aceptable. El lenguaje permite a los postores expresar límites superiores e inferiores en el valor, los cuales pueden ser ajustados en cada ronda. • Determinación del ganador. La determinación del ganador (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación. Comparar la solución en los valores superiores e inferiores permite tomar una decisión sobre la terminación, con el progreso en rondas intermedias impulsado por una valoración intermedia y los valores inferiores adoptados al finalizar. • Pagos. Los pagos se calculan utilizando la regla de pago del umbral [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de <br>precio</br>s. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "winner-determination": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "ICE: An Iterative Combinatorial Exchange David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative combinatorial exchange (ICE).",
                "The exchange incorporates a tree-based bidding language that is concise and expressive for CEs.",
                "Bidders specify lower and upper bounds on their value for different trades.",
                "These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
                "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
                "A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "The exchange is fully implemented and in a validation phase.",
                "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
                "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
                "In a double auction (DA), multiple buyers and sellers trade units of an identical good [20].",
                "In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language.",
                "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
                "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling.",
                "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
                "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
                "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
                "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
                "This paper presents the first design for an iterative combinatorial exchange (ICE).",
                "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
                "The ICE design problem is multi-faceted and quite hard.",
                "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, <br>winner-determination</br> to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round.",
                "The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "The exchange has a number of interesting theoretical properties.",
                "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
                "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
                "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
                "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
                "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "The exchange is implemented in Java and is currently in validation.",
                "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
                "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
                "We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions.",
                "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based bidding language.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable.",
                "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
                "<br>winner-determination</br> (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
                "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
                "An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade.",
                "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
                "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades.",
                "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
                "A revealed-preference activity rule [1] ensures progress across rounds.",
                "In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices.",
                "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
                "An outline of the ICE system flow of control is provided in Figure 1.",
                "We will return to this example later in the paper.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to <br>winner-determination</br> (WD), and then through three stages of pricing (accuracy, fairness, balance).",
                "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round.",
                "At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29].",
                "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
                "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
                "The price generation methods that we use in ICE generalize the methods in these earlier papers.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule.",
                "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
                "We are not aware of any previous studies of iterative CEs.",
                "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
                "No dominant strategy mechanisms are known for the general CE problem.",
                "ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
                "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
                "The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
                "Rothkopf et al. [27] also describe a restricted tree-based bidding language.",
                "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
                "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
                "The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
                "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
                "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
                "A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
                "So, the final allocation is x1 = x0 + λ.",
                "Each bidder has a value vi(λi) ∈ ¡ for a trade λi.",
                "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
                "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ .",
                "Price p can be negative, indicating the bidder receives a payment for the trade.",
                "We use the term payoff interchangeably with utility.",
                "Our goal in the ICE design is to implement the efficient trade.",
                "The efficient trade, λ∗ , maximizes the total increase in value across bidders.",
                "Definition 1 (Efficient trade).",
                "The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
                "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
                "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
                "All three examples have only one seller, but this is purely illustrative.",
                "Example 1.",
                "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
                "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
                "Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
                "Example 2.",
                "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
                "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
                "The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
                "Example 3.",
                "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
                "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades.",
                "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
                "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
                "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
                "We illustrate the language on each of Examples 1-3 in Figure 2.",
                "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
                "The nodes have zero values where no value is indicated.",
                "Internal nodes are also labeled with interval-choose (IC) ranges.",
                "Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
                "First, if a child is on then its parent must be on.",
                "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
                "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade.",
                "For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
                "On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
                "Given a trade there is often a number of ways to choose the set of satisfied nodes.",
                "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
                "Consider bid tree Ti from bidder i.",
                "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
                "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
                "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
                "Every node is also labeled with a value, viβ ∈ ¡ .",
                "Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.)",
                "Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
                "There will often be a choice.",
                "Ties are broken to maximize value.",
                "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
                "Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
                "This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade.",
                "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
                "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
                "The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
                "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
                "Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
                "OR* is known to be expressive and concise.",
                "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
                "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
                "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
                "In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆vcg,i = V ∗ − V−i the VCG discount.",
                "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
                "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome.",
                "Definition 2.",
                "The Threshold payment scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance).",
                "Example 4.",
                "In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
                "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
                "This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes.",
                "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
                "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
                "THE ICE DESIGN We are now ready to introduce the iterative combinatorial exchange (ICE) design.",
                "Several new components are introduced, relative to the design for the one-shot exchange.",
                "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
                "The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations.",
                "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
                "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v).",
                "Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
                "These take the place of the exact value viβ defined in Section 4.1.",
                "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
                "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
                "The following lemma is useful: Lemma 1.",
                "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
                "Proof.",
                "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
                "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
                "But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
                "Given these provisional prices, the price on trade λi for bidder i is pt (λi) =   j≤m pt j · λij.",
                "Definition 3 (CE prices).",
                "Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
                "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
                "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
                "II: Fairness.",
                "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
                "III: Balance.",
                "Third, we break ties to prefer prices that minimize the maximal price across all items.",
                "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
                "In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades.",
                "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
                "Each step is described in detail below.",
                "I: Accuracy.",
                "We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages.",
                "Let λt denote the current provisional trade and suppose the provisional valuation is vα .",
                "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
                "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
                "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.)",
                "Example 5.",
                "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
                "The efficient trade allocates AB to buyer 1 and CD to buyer 3.",
                "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
                "But, (9) has an exponential number of constraints (Eq. 10).",
                "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
                "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
                "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
                "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
                "In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices.",
                "Let ˆλi denote the solution to R-WD(i).",
                "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
                "Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
                "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
                "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
                "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
                "This can be exactly achieved in pricing with pA + pB = 14.",
                "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
                "The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the VCG payoff (at vα ).",
                "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
                "III: Balance.",
                "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items.",
                "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
                "Finally, balance sets p(A) = p(B) = 7.",
                "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
                "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
                "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
                "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
                "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
                "Dunford et al. [12] prefer to smooth prices across rounds.",
                "Comment 1: Lexicographical Refinement.",
                "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
                "For instance, in ACC we successively minimize the maximal error across all bidders.",
                "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
                "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
                "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
                "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL.",
                "Comment 2: Computation.",
                "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
                "Thus, the computational effort in constraint generation is re-used.",
                "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
                "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
                "This avoids later infeasibility issues.",
                "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
                "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
                "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
                "We adopt a simple revealed-preference (RP) activity rule.",
                "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
                "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
                "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
                "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
                "Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices.",
                "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
                "We pin these down and then minimize the error to bidders 3 and 4.",
                "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices.",
                "Consider the following examples: Example 7.",
                "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
                "Example 8.",
                "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
                "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
                "Definition 4.",
                "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
                "First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
                "Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP.",
                "To understand the importance of this tiebreaking rule consider Example 7.",
                "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
                "Notice that +B is a counterexample to +A, but not the other way round.",
                "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i .",
                "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v.",
                "We call trade U∗ i the witness trade.",
                "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
                "Example 8 helps to illustrate this.",
                "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
                "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
                "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
                "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
                "Proposition 1.",
                "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
                "Proof.",
                "For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
                "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes.",
                "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
                "For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i).",
                "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
                "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
                "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
                "Proceed by case analysis.",
                "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
                "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
                "Case b): two or more solutions to RP1(i) have uncertain value.",
                "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
                "This is by RP.",
                "Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
                "Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades.",
                "Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
                "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
                "Failure to meet the activity rule must have some consequence.",
                "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices.",
                "See 7 for an additional discussion.",
                "We also provide guidance to help a bidder meet the RP rule.",
                "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
                "Lemma 2.",
                "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
                "Proof.",
                "Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
                "Thus, the RP condition will continue to fail.",
                "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
                "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
                "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
                "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
                "This is an elegant feedback mechanism because it is adaptive.",
                "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
                "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
                "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
                "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
                "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
                "Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
                "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v).",
                "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
                "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
                "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
                "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
                "Termination Condition.",
                "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade.",
                "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
                "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm.",
                "Note that γthresh is defined for payments and not payoffs.",
                "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments.",
                "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
                "Definition 5 (termination).",
                "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
                "At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments.",
                "Example 9.",
                "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
                "First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0.",
                "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
                "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
                "For CUTOFFthresh < 2/5 the exchange would remain open.",
                "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
                "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the tree-based bidding language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
                "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
                "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
                "A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy.",
                "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
                "These engines drive the appropriate MIP/LP builders.",
                "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
                "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
                "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
                "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
                "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
                "DISCUSSION The bidding language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
                "This proved especially challenging.",
                "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
                "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
                "The total of 6502 includes 184 for instrumentation (not shown in the table).",
                "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
                "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
                "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
                "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
                "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
                "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values.",
                "Upper and lower bound information also provides guidance about when to terminate.",
                "Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information.",
                "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
                "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
                "This is worthy of experimental investigation.",
                "Moreover, the use of price and RP activity provides additional guarantees.",
                "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process.",
                "The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
                "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
                "The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees.",
                "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
                "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
                "Some strategic aspects of our ICE design deserve comment, and further study.",
                "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
                "We must be careful, though.",
                "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
                "Also, no consideration has been given in this work to collusion by bidders.",
                "This is an issue that deserves some attention in future work. 8.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative combinatorial exchange.",
                "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
                "The exchange is fully implemented in Java and is in a validation phase.",
                "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
                "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
                "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
                "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
                "This work is supported in part by NSF grant IIS-0238147. 9.",
                "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
                "The clock-proxy auction: A practical combinatorial auction design.",
                "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
                "Mechanisms for a spatially distributed market.",
                "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
                "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
                "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
                "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
                "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
                "Introduction to Linear Optimization.",
                "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
                "A pomdp formulation of preference elicitation problems.",
                "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
                "Bidding languages for combinatorial auctions.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
                "Preference elicitation in combinatorial auctions.",
                "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
                "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
                "Combinatorial Auctions.",
                "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
                "On ascending Vickrey auctions for heterogeneous objects.",
                "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
                "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
                "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
                "Chase, B. Chun, S. Schwab, and A. Vahdat.",
                "Sharp: an architecture for secure resource peering.",
                "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
                "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In Proc. 3rd Int.",
                "Joint.",
                "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [16] D. Krych.",
                "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
                "A new and improved design for multi-object iterative auctions.",
                "Management Science, 2004.",
                "To appear. [18] E. Kwerel and J. Williams.",
                "A proposal for a rapid transition to market allocation of spectrum.",
                "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proc.",
                "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
                "A dominant strategy double auction.",
                "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
                "Putting auction theory to work: The simultaneous ascending auction.",
                "J.Pol.",
                "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
                "Iterative combinatorial auctions: Theory and practice.",
                "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
                "A combinatorial mechanism for airport time slot allocation.",
                "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
            ],
            "original_annotated_samples": [
                "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, <br>winner-determination</br> to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "<br>winner-determination</br> (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to <br>winner-determination</br> (WD), and then through three stages of pricing (accuracy, fairness, balance)."
            ],
            "translated_annotated_samples": [
                "La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, <br>determinación de ganadores</br> para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas.",
                "La <br>determinación del ganador</br> (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación.",
                "Por ahora, simplemente observa en este ejemplo de dos agentes que los agentes establecen límites inferiores y superiores que son verificados en la regla de actividad, y luego pasados a la <br>determinación del ganador</br> (WD), y luego a través de tres etapas de fijación de precios (precisión, equidad, equilibrio)."
            ],
            "translated_text": "Presentamos el primer diseño para un intercambio combinatorio iterativo (ICE). El intercambio incorpora un lenguaje de oferta basado en árboles que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20]. En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos. Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un intercambio combinatorio iterativo (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, <br>determinación de ganadores</br> para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda. La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de oferta basado en árboles expresivo y conciso. El lenguaje describe valores para intercambios, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el intercambio sea aceptable. El lenguaje permite a los postores expresar límites superiores e inferiores en el valor, los cuales pueden ser ajustados en cada ronda. • Determinación del ganador. La <br>determinación del ganador</br> (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación. Comparar la solución en los valores superiores e inferiores permite tomar una decisión sobre la terminación, con el progreso en rondas intermedias impulsado por una valoración intermedia y los valores inferiores adoptados al finalizar. • Pagos. Los pagos se calculan utilizando la regla de pago del umbral [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de precios. Se calcula un precio aproximado para cada artículo en el intercambio en cada ronda, en función de las valoraciones intermedias y el intercambio provisional. Los precios se optimizan para aproximar los precios de equilibrio competitivo, y luego se optimizan aún más para aproximar mejor los pagos del umbral actual con los lazos restantes rotos para favorecer los precios equilibrados entre diferentes artículos. Al calcular los precios, adoptamos los métodos de generación de restricciones para explotar la estructura del lenguaje de oferta y evitar enumerar todos los intercambios factibles. El subproblema para generar nuevas restricciones es una variación del problema WD. • Regla de actividad. Una regla de actividad de preferencia revelada [1] garantiza progreso a lo largo de las rondas. Para permanecer activo, un oferente debe ajustar los límites para que haya suficiente información para definir un intercambio que maximice el excedente a los precios actuales. Otra variación del problema de WD se formula, tanto para verificar que se cumple la regla de actividad como para proporcionar retroalimentación a un postor para explicar cómo cumplir la regla. Se proporciona un esquema del flujo de control del sistema ICE en la Figura 1. Volveremos a este ejemplo más adelante en el documento. Por ahora, simplemente observa en este ejemplo de dos agentes que los agentes establecen límites inferiores y superiores que son verificados en la regla de actividad, y luego pasados a la <br>determinación del ganador</br> (WD), y luego a través de tres etapas de fijación de precios (precisión, equidad, equilibrio). Al pasar la regla de cierre (en la que se verifican los parámetros αeff y αthresh para la convergencia del comercio y los pagos), el intercambio pasa a una última y definitiva ronda. Al final de esta ronda, el intercambio y los pagos finalmente se determinan, basados en las valoraciones más bajas. 2.1 Trabajo Relacionado En la literatura se conocen muchos CAs de un solo lado con precios ascendentes [10, 25, 29]. También se han propuesto enfoques de elicitación directa para los AC unilaterales en los que los agentes responden a preguntas explícitas sobre sus valoraciones [8, 14, 19]. Un número de CAs ascendentes están diseñados para trabajar con precios simples en artículos [12, 17]. Los métodos de generación de precios que utilizamos en ICE generalizan los métodos de estos artículos anteriores. Parkes et al. [24] estudiaron intercambios combinatorios de oferta sellada e introdujeron la regla de pago umbral. Posteriormente, Krych [16] demostró experimentalmente que la regla del Umbral promueve asignaciones eficientes. No tenemos conocimiento de ningún estudio previo sobre CEs iterativos. Las estrategias dominantes DAs son conocidas por la demanda unitaria [20] y también por agentes de mente única [2]. No se conocen mecanismos de estrategia dominante para el problema general de la CE. ICE es un diseño de subasta híbrido, ya que combina precios simples de artículos para impulsar las ofertas en las primeras rondas con WD combinatorio y pagos, una característica que comparte con el diseño de reloj-proxy de Ausubel et al. [1] para subastas unilaterales. Adoptamos una variación de la regla de actividad de preferencia revelada en las subastas de proxy de reloj. El lenguaje de subasta comparte algunos elementos estructurales con el lenguaje LGB de Boutilier y Hoos [7], pero tiene semántica muy diferente. Rothkopf et al. [27] también describen un lenguaje de oferta basado en árboles restringido. En LGB, la semántica es la de la lógica proposicional, con los mismos elementos en una asignación capaces de satisfacer un árbol en múltiples lugares. Aunque esto puede hacer que LGB sea especialmente conciso en algunos contextos, la semántica que proponemos parece proporcionar una utilidad local, de modo que el valor de un componente en un árbol pueda ser comprendido de forma independiente al resto del árbol. La idea de capturar la estructura de nuestro lenguaje de oferta de manera explícita dentro de una formulación de programación entera mixta sigue los desarrollos en Boutilier [6]. 3. PRELIMINARES En nuestro modelo, consideramos un conjunto de bienes, indexados {1, . . . , m} y un conjunto de postores, indexados {1, . . . , n}. La asignación inicial de bienes se denota como x0 = (x0 1, . . . , x0 n), donde x0 i = (x0 i1, . . . , x0 im) y x0 ij ≥ 0 para el bien j indicando el número de unidades del bien j que posee el postor i. Un intercambio λ = (λ1, . . . , λn) denota el cambio en la asignación, con λi = (λi1, . . . , λim) donde λij ∈ es el cambio en el número de unidades del ítem j para el postor i. Entonces, la asignación final es x1 = x0 + λ. Cada postor tiene un valor vi(λi) ∈ ¡ para una transacción λi. Este valor puede ser positivo o negativo, y representa el cambio en el valor entre la asignación final x0 i +λi y la asignación inicial x0 i. La utilidad es cuasi-lineal, con ui(λi, p) = vi(λi)−p para el intercambio λi y el pago p ∈ ¡. El precio p puede ser negativo, lo que indica que el postor recibe un pago por la transacción. Utilizamos el término \"pago\" de manera intercambiable con \"utilidad\". Nuestro objetivo en el diseño de ICE es implementar el comercio eficiente. El intercambio eficiente, λ∗, maximiza el aumento total de valor entre los postores. Definición 1 (Comercio eficiente). El intercambio eficiente λ∗ resuelve max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Las restricciones (1) aseguran que ningún agente venda más artículos de los que tiene en su asignación inicial. Las restricciones (2) permiten la disposición gratuita y permiten que los intercambios factibles vendan más artículos de los que se compran (pero no al revés). Posteriormente, adoptamos Feas(x0) para denotar el conjunto de intercambios factibles, dados estos límites y una asignación inicial x0 = (x0 1, . . . , x0 n). 3.1 Ejemplos Prácticos En esta sección, proporcionamos tres ejemplos simples de instancias que utilizaremos para ilustrar varios componentes del intercambio. Todos los tres ejemplos tienen solo un vendedor, pero esto es puramente ilustrativo. Ejemplo 1. Un vendedor y un comprador, dos bienes {A, B}, con el vendedor teniendo una asignación inicial de AB. Cambios en los valores de los intercambios: vendedor comprador Y (−A, −B) Y (+A, +B) -10 +20 El Y indica que tanto el comprador como el vendedor solo están interesados en intercambiar ambos bienes como un paquete. Aquí, el intercambio eficiente (que maximiza el valor) es para el vendedor vender AB al comprador, denotado como λ∗ = ([−1, −1], [+1, +1]). Ejemplo 2. Un vendedor y cuatro compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de las transacciones: vendedor comprador1 comprador 2 comprador 3 comprador 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 El OR indica que el vendedor está dispuesto a vender cualquier cantidad de bienes. El XOR indica que los compradores 2 y 4 están dispuestos a comprar como máximo uno de los dos bienes en los que están interesados. El comercio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD al comprador 3, denotado λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR Ejemplo 1: Ejemplo 3: 2,2 +C +D COMPRADOR 2 2,2 +A +B COMPRADOR 1 +11 +84,4 -B VENDEDOR -A -C -D Ejemplo 2: 1,1 +A +B COMPRADOR 2 2,2 +A +B COMPRADOR 1 +6 +40,4 -B VENDEDOR -C -D-A 1,1 +C +D COMPRADOR 4 2,2 +C +D +3 +2 COMPRADOR 3 -18 Figura 2: Ejemplo de Árboles de Ofertas. Ejemplo 3. Un vendedor y dos compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de los intercambios: vendedor comprador1 comprador 2 Y (−A, −B, −C, −D) Y (+A, +B) Y (+C, +D) -18 +11 +8 El intercambio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD vaya al comprador 2, denotado por λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4. Un DISEÑO DE INTERCAMBIO DE UNA SOLA VEZ La descripción de ICE se divide en dos secciones: una sola vez (oferta sellada) e iterativa. En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a compradores y vendedores, y para extenderse y capturar ofertas de compradores y vendedores mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas. Las ofertas se expresan como árboles de ofertas anotados, y definen el valor de un oferente para todos los intercambios posibles. El lenguaje define cambios en los valores de las transacciones, con hojas anotadas con los artículos intercambiados y nodos anotados con cambios en los valores (ya sea positivos o negativos). La característica principal es que tiene un operador lógico de intervalo general en los nodos internos, y que define una semántica cuidadosa para propagar valores dentro del árbol. Ilustramos el lenguaje en cada uno de los Ejemplos 1-3 en la Figura 2. El lenguaje tiene una estructura de árbol, con operaciones en elementos definidos en las hojas y valores anotados en nodos y hojas. Los nodos tienen valores de cero donde no se indica ningún valor. Los nodos internos también están etiquetados con rangos de intervalo-escoge (IC). Dada una transacción, la semántica del lenguaje define qué nodos en el árbol pueden ser satisfechos o activados. Primero, si un niño está encendido, entonces su padre también debe estar encendido. Segundo, si un nodo padre está encendido, entonces el número de hijos que están encendidos debe estar dentro del rango de IC en el nodo padre. Finalmente, las hojas en las que el postor está comprando artículos solo pueden estar activas si los artículos se proporcionan en el intercambio. Por ejemplo, en el Ejemplo 2 podemos considerar el comercio eficiente, y observar que en este comercio todos los nodos en los árboles de los compradores 1 y 3 (y también el vendedor), pero ninguno de los nodos en los árboles de los compradores 2 y 4, pueden estar encendidos. Por otro lado, en 251 el intercambio en el que A va al comprador 2 y D al comprador 4, entonces los nodos raíz y hojas apropiados pueden estar encendidos para los compradores 2 y 4, pero ningún nodo puede estar encendido para los compradores 1 y 3. Dado un intercambio, a menudo hay varias formas de elegir el conjunto de nodos satisfechos. La semántica del lenguaje requiere que se activen los nodos que maximicen el valor sumado entre los nodos satisfechos. Considera el árbol de oferta Ti del ofertante i. Esto define nodos β ∈ Ti, de los cuales algunos son hojas, Leaf (i) ⊆ Ti. Deje que Child(β) ⊆ Ti denote los hijos de un nodo β (que no es en sí mismo una hoja). Todos los nodos excepto las hojas están etiquetados con el operador de intervalo-escoger [IC x i (β), ICy i (β)]. Cada nodo también está etiquetado con un valor, viβ ∈ ¡. Cada hoja β está etiquetada con un intercambio, qiβ ∈ m (es decir, las hojas pueden definir un intercambio agrupado en más de un tipo de artículo). Dado un intercambio λi al postor i, los operadores de elección de intervalos y los intercambios en las hojas definen qué nodos pueden ser satisfechos. A menudo habrá una elección. Las corbatas se rompen para maximizar el valor. Que satiβ ∈ {0, 1} denote si el nodo β está satisfecho. La solución sati es válida dado el árbol Ti y el intercambio λi, escrita sati ∈ válido(Ti, λi), si y solo si: ¢ β∈Hoja (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Hijo(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Hoja (i) (5) En otras palabras, un conjunto de hojas solo puede considerarse satisfecho dado el intercambio λi si el aumento total en cantidad sumado en todas esas hojas está cubierto por el intercambio, para todos los bienes (Eq. 4). Esto funciona tanto para vendedores como para compradores: para los vendedores, un intercambio es negativo y esto requiere que el número total de artículos indicados como vendidos en el árbol sea al menos igual al número total vendido según lo definido en el intercambio. También necesitamos la propagación ascendente: cada vez que un nodo que no sea la raíz esté satisfecho, su padre también debe estar satisfecho (por β ∈Child(β) satiβ ≤ ICy i (β)satiβ en la Ecuación 5). Finalmente, necesitamos la propagación hacia abajo: cada vez que un nodo interno se satisface, entonces el número apropiado de hijos también debe estar satisfecho (Ec. 5). El valor total del comercio λi, dado el árbol de ofertas Ti, se define como: vi(Ti, λi) = máximo sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) El lenguaje basado en árboles generaliza los lenguajes existentes. Por ejemplo: IC(2, 2) en un nodo con 2 hijos es equivalente a un operador AND; IC(1, 3) en un nodo con 3 hijos es equivalente a un operador OR; e IC(1, 1) en un nodo con 2 hijos es equivalente a un operador XOR. De manera similar, los lenguajes de oferta XOR/OR pueden ser expresados directamente como un árbol de oferta en nuestro lenguaje. La determinación del ganador Este apartado define el problema de determinación del ganador, el cual está formulado como un MIP y resuelto en nuestra implementación con un solucionador comercial. El solucionador utiliza búsqueda de ramificación y acotamiento con generación de cortes dinámicos y heurísticas de ramificación para resolver MIPs grandes en tiempos de ejecución económicamente factibles. El lenguaje OR* es el lenguaje OR con elementos ficticios para proporcionar estructura adicional. OR* se sabe que es expresivo y conciso. Sin embargo, no se sabe si OR* domina a XOR/OR en cuanto a concisión [23]. En la definición de la representación MIP, tenemos cuidado de evitar una enumeración basada en XOR de todos los paquetes. Una variación del problema de WD se reutiliza muchas veces dentro del intercambio, por ejemplo, para la generación de columnas en la fijación de precios y para verificar la preferencia revelada. Dado el conjunto de árboles de ofertas T = (T1, . . . , Tn) y la asignación inicial x0, la formulación mixta entera para WD es: WD(T, x0): max λ, sat ¢ i ¢ β ∈ Ti viβ · satiβ sujeto a (1), (2), satiβ ∈ {0, 1}, λij ∈ sati ∈ válido(Ti, λi), ∀i. Algunos bienes pueden quedar sin asignar porque se permite la disposición libre dentro de las reglas de liquidación de la determinación del ganador. Estos artículos pueden ser asignados de nuevo a los agentes que vendieron los artículos, es decir, para los cuales λij < 0. 4.3 Cálculo de Pagos Umbral La regla de pago umbral se basa en los pagos en el mecanismo de Vickrey-Clarke-Groves (VCG) [15], que en sí mismo es veraz y eficiente pero no satisface el equilibrio presupuestario. El equilibrio presupuestario requiere que los pagos totales al intercambio sean iguales a los pagos totales realizados por el intercambio. En VCG, el pago pagado por el agente i es pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) donde λ∗ es el intercambio eficiente, V ∗ es el valor reportado de este intercambio, y V−i es el valor reportado del intercambio eficiente que se implementaría sin el postor i. Llamamos a ∆vcg,i = V ∗ − V−i el descuento VCG. Por ejemplo, en el Ejemplo 1 pvcg,vendedor = −10 − (+10 − 0) = −20 y pvcg,comprador = +20 − (+10 − 0) = 10, y el intercambio se llevaría a cabo con un déficit presupuestario de −20 + 10 = −10. La regla de pago del umbral [24] determina pagos equilibrados presupuestarios para minimizar el error máximo entre todos los agentes respecto al resultado VCG. Definición 2. El esquema de pago de umbral implementa el intercambio eficiente λ∗ dado los ofertas, y establece los pagos pthresh,i = ˆvi(λ∗ i ) − ∆i, donde ∆ = (∆1, . . . , ∆n) se establece para minimizar maxi(∆vcg,i − ∆i) sujeto a ∆i ≤ ∆vcg,i e   i ∆i ≤ V ∗ (esto garantiza el equilibrio presupuestario). Ejemplo 4. En el Ejemplo 2, los descuentos de VCG son (9, 2, 0, 1, 0) para el vendedor y cuatro compradores respectivamente, los pagos de VCG son (−9, 4, 0, 2, 0) y el intercambio se realiza con un déficit de -3. En Threshold, los descuentos son (8, 1, 0, 0, 0) y los pagos son (−8, 5, 0, 3, 0). Esto minimiza el error en el peor de los casos para los descuentos VCG en todos los esquemas de pago equilibrados en presupuesto. Los pagos de umbral están diseñados para minimizar el incentivo máximo ex post para manipular. Krych [16] confirmó que Threshold promueve la eficiencia asignativa en el equilibrio de Bayes-Nash restringido y aproximado. 5. El diseño ICE Estamos listos para presentar el diseño de intercambio combinatorio iterativo (ICE). Se introducen varios componentes nuevos, en relación con el diseño para el intercambio único. En lugar de proporcionar valoraciones precisas, los postores pueden proporcionar valoraciones inferiores y superiores y revisar esta información de oferta en cada ronda. El intercambio proporciona retroalimentación basada en precios 252 para guiar a los postores en este proceso, y finaliza con un intercambio eficiente (o aproximadamente eficiente) con respecto a las valoraciones reportadas. En cada ronda t ∈ {0, 1, . . .} se utilizan los límites inferiores y superiores actuales, vt y vt, para definir un perfil de valoración provisional vα (la α-valoración), junto con un intercambio provisional λt y precios provisionales pt = (pt 1, . . . , pt m) en los artículos. La α-valoración es una combinación lineal de las valoraciones superiores e inferiores actuales, con αEFF ∈ [0, 1] elegido endógenamente en función de la cercanía del intercambio optimista (en v) y el intercambio pesimista (en v). Los precios pt se utilizan para informar una regla de actividad y avanzar hacia un comercio eficiente. 5.1 Valoraciones superiores e inferiores El lenguaje de la oferta se amplía para permitir que un oferente i informe un valor inferior y superior (viβ, viβ) en cada nodo. Estos ocupan el lugar del valor exacto viβ definido en la Sección 4.1. Basándonos en estas etiquetas, podemos definir las funciones de valoración vi(Ti, λi) y vi(Ti, λi), utilizando exactamente la misma semántica que en la Ecuación (6). Decimos que un árbol de ofertas está bien formado si viβ ≤ viβ para todos los nodos. El siguiente lema es útil: Lema 1. Dado un árbol bien formado, T, entonces vi(Ti, λi) ≤ vi(Ti, λi) para todos los intercambios. Prueba. Supongamos que existe algún λi para el cual vi(Ti, λi) > vi(Ti, λi). Entonces, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ. Sin embargo, esto es una contradicción porque el intercambio λ que define vi(Ti, λi) sigue siendo factible con límites superiores vi, y viβ ≥ viβ para todos los nodos β en un árbol bien formado. 5.2 Retroalimentación de precios En cada ronda, se determinan los precios de equilibrio competitivo aproximados (CE), pt = (pt 1, . . . , pt m). Dado estos precios provisionales, el precio en el intercambio λi para el postor i es pt (λi) = j≤m pt j · λij. Definición 3 (precios de la CE). Los precios p∗ son precios de equilibrio competitivo si el intercambio eficiente λ∗ está respaldado a precios p∗, de modo que para cada postor: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) Los precios de CE no siempre existirán y a menudo necesitaremos calcular precios aproximados [5]. Extendemos las ideas de Rassenti et al. [26], Kwasnica et al. [17] y Dunford et al. [12], y seleccionamos precios aproximados de la siguiente manera: I: Precisión. Primero, calculamos los precios que minimizan el error máximo en las restricciones de mejor respuesta de todos los postores. II: Equidad. Segundo, rompemos los empates para preferir precios que minimicen la desviación máxima de los pagos umbral entre todos los postores. III: Equilibrio. En tercer lugar, rompemos los empates para preferir precios que minimicen el precio máximo entre todos los artículos. En conjunto, estos pasos están diseñados para promover la informatividad de los precios en impulsar el progreso a lo largo de las rondas. Al calcular los precios, explicamos cómo calcular precios aproximados (o de otra manera) para lenguajes de oferta estructurados, sin enumerar todos los intercambios posibles. Para esto, adoptamos la generación de restricciones para manejar de manera eficiente un número exponencial de restricciones. Cada paso se describe detalladamente a continuación. Yo: Precisión. Adoptamos una definición de precisión de precio que generaliza las nociones adoptadas en trabajos anteriores para lenguajes de oferta no estructurados. Que λt denote el comercio provisional actual y suponga que la valoración provisional es vα. Para calcular precios de CE precisos, consideramos: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j. Este programa lineal (LP) está diseñado para encontrar precios que minimicen el error en el peor de los casos entre todos los agentes. De la definición de los precios de equilibrio competitivo (CE), se sigue que los precios de equilibrio competitivo tendrían δ = 0 como solución a (9), momento en el cual el intercambio λt i estaría en el conjunto de mejor respuesta de cada agente (con λt i = ∅, es decir, sin intercambio, para todos los agentes sin excedente para el intercambio a los precios). Ejemplo 5. Podemos ilustrar la formulación (9) en el Ejemplo 2, asumiendo para simplificar que vα = v (es decir, verdad). El comercio eficiente asigna AB al comprador 1 y CD al comprador 3. La precisión buscará los precios p(A), p(B), p(C) y p(D) para minimizar el δ ≥ 0 requerido para satisfacer las restricciones: p(A) + p(B) + p(C) + p(D) ≥ 0 (vendedor) p(A) + p(B) ≤ 6 + δ (comprador 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (comprador 2) p(C) + p(D) ≤ 3 (comprador 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (comprador 4) Una solución óptima requiere que p(A) = p(B) = 10/3, con δ = 2/3, y que p(C) y p(D) tomen valores como p(C) = p(D) = 3/2. Pero, (9) tiene un número exponencial de restricciones (Ec. 10). En lugar de resolverlo explícitamente, utilizamos la generación de restricciones [4] y generamos dinámicamente un subconjunto suficiente de restricciones. Que \\(i\\) denote un subconjunto manejable de todos los intercambios factibles posibles para el oferente \\(i\\). Entonces, una versión relajada de (9) (escrita ACC) se formula sustituyendo (10) con vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) donde   i es un conjunto de intercambios que son factibles para el postor i dado las otras ofertas. Fijando los precios p∗, luego resolvemos n subproblemas (uno para cada postor), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0), (12) para verificar si la solución (p∗, δ∗) a ACC es factible en el problema (9). En R-WD(i) el objetivo es determinar un intercambio más preferido para cada postor a estos precios. Que ˆλi denote la solución a R-WD(i). Verificar la condición: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) y si esta condición se cumple para todos los postores i, entonces la solución (p∗ , δ∗ ) es óptima para el problema (9). De lo contrario, se agrega el intercambio ˆλi a i para todos los postores i para los cuales esta restricción se viola en 253 y volvemos a resolver el LP con el nuevo conjunto de restricciones. II: Equidad. Segundo, rompemos los empates restantes para preferir precios justos: eligiendo precios que minimicen el error en el peor de los casos con respecto a los pagos umbral (es decir, la utilidad para los postores con pagos umbral), pero sin elegir precios que sean menos precisos. Ejemplo 6. Por ejemplo, la precisión en el Ejemplo 1 (representado en la Figura 1) requiere que 12 ≤ pA + pB ≤ 16 (para vα = v). En estas valoraciones, los pagos umbral serían de 2 para tanto el vendedor como el comprador. Esto se puede lograr exactamente en la fijación de precios con pA + pB = 14. El método de desempate de equidad se formula como el siguiente LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima, de ACC. El objetivo aquí es el mismo que en la regla de pago del umbral (ver Sección 4.3): minimizar el error máximo entre el pago del postor (en vα) para el intercambio provisional y el pago VCG (en vα). El problema FAIR también se resuelve mediante la generación de restricciones, utilizando R-WD(i) para agregar restricciones adicionales violadas según sea necesario. III: Equilibrio. En tercer lugar, rompemos los empates restantes para preferir precios equilibrados: eligiendo precios que minimicen el precio máximo entre todos los artículos. Volviendo de nuevo al Ejemplo 1, representado en la Figura 1, vemos que la precisión y la equidad requieren que p(A) + p(B) = 14. Finalmente, el conjunto de equilibrio establece que p(A) = p(B) = 7. El equilibrio está justificado cuando, manteniendo todo lo demás igual, los elementos son más propensos a tener valores similares que diferentes. El LP para el equilibrio se formula de la siguiente manera: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima de ACC y π∗ representa el error en la solución óptima de FAIR. La generación de restricciones también se utiliza para resolver BAL, generando nuevos intercambios para i según sea necesario. El problema R-WD(i) es una especialización del problema WD, en el que el objetivo es maximizar el pago de un único postor, en lugar del valor total entre todos los postores. Se resuelve como un MIP, al reescribir el objetivo en WD(T, x0) como max{viβ · satiβ − j p∗ j · λij} para el agente i. Por lo tanto, la estructura del lenguaje del árbol de ofertas se explota para generar nuevas restricciones, ya que esto se resuelve como un MIP conciso. Los otros postores se mantienen en el MIP (pero no aparecen en el objetivo) y se utilizan para definir el espacio de intercambios factibles. Los métodos de Dunford et al. [12], que utilizan un enfoque de núcleo, también están estrechamente relacionados. El uso del equilibrio fue defendido por Kwasnica et al. [17]. Dunford et al. [12] prefieren suavizar los precios a lo largo de las rondas. Comentario 1: Refinamiento lexicográfico. Para los tres subproblemas también realizamos un refinamiento lexicográfico (con respecto a los postores en ACC y FAIR, y con respecto a los bienes en BAL). Por ejemplo, en ACC minimizamos sucesivamente el error máximo entre todos los postores. Dada una solución inicial, primero identificamos el error en todos los postores para quienes una restricción (11) está vinculante. Para dicho postor i, la restricción se reemplaza por vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) y el error para el postor i ya no aparece explícitamente en el objetivo. ACC se vuelve a resolver y avanza al minimizar aún más el error máximo entre todos los postores que aún no han sido identificados. Esto continúa, fijando a cualquier nuevo postor para quien una de las restricciones (11) sea vinculante, hasta que el error esté optimizado lexicográficamente para todos los postores. El mismo proceso exacto se repite para FAIR y BAL, con los postores fijados y las restricciones (15) reemplazadas por π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (donde π∗ i es el objetivo actual) en FAIR, y los artículos fijados y las restricciones (18) reemplazadas por p∗ j ≥ pj (donde p∗ j representa el objetivo para el precio máximo en ese artículo) en BAL. Comentario 2: Computación. Todos los límites en i se mantienen, y este conjunto crece en todas las etapas y en todas las rondas del intercambio. Por lo tanto, el esfuerzo computacional en la generación de restricciones se reutiliza. En la implementación, nos aseguramos de abordar una serie de problemas que surgen debido a problemas de punto flotante. Preferimos pecar de conservadores al determinar si agregar o no otra restricción al realizar la verificación (13). Esto evita problemas de inviabilidad posteriores. Además, al fijar a los postores con el fin de refinar lexicográficamente, relajamos las restricciones asociadas con un pequeño > 0 en el lado derecho. 5.3 Reglas de Actividad de Preferencia Revelada El papel de las reglas de actividad en la subasta es garantizar tanto la consistencia como el progreso en las rondas [21]. La consistencia en nuestro intercambio requiere que los oferentes ajusten los límites a medida que avanza el intercambio. Las reglas de la actividad garantizan que los postores estén activos durante las primeras rondas y promueven una elicitación útil a lo largo del intercambio. Adoptamos una regla de actividad de preferencia revelada (RP) simple. La idea se basa vagamente en la regla de RP en Ausubel et al. [1], donde se utiliza para los AC unilaterales. La motivación es requerir más que simplemente consistencia: necesitamos que los oferentes proporcionen suficiente información para que el sistema pueda demostrar que una asignación es (aproximadamente) eficiente. Es útil pensar en los postores interactuando con agentes de proxy que actuarán en su nombre al responder a los precios provisionales pt−1 determinados al final de la ronda t − 1. El único conocimiento que tiene un intermediario sobre la valoración de un postor es a través del árbol de ofertas. Supongamos que un intermediario fue consultado por la bolsa y se le preguntó en qué operación estaba más interesado el oferente a los precios provisionales. La regla de RP dice lo siguiente: el proxy debe tener suficiente 7. Por ejemplo, aplicando esto a la precisión en el Ejemplo 2, resolvemos una vez y encontramos que los postores 1 y 2 son vinculantes, con un error δ∗ = 2/3. Fijamos estos y luego minimizamos el error para los postores 3 y 4. Finalmente, esto da p(A) = p(B) = 10/3 y p(C) = p(D) = 5/3, con precisión de 2/3 para los postores 1 y 2 y 1/3 para los postores 3 y 4. Se necesitan 254 información para poder determinar este intercambio que maximiza el excedente al precio actual. Considera los siguientes ejemplos: Ejemplo 7. Un postor tiene XOR(+A, +B) y un valor de +5 en la hoja +A y un rango de valores de [5,10] en la hoja +B. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el representante sabe que, sin importar cómo se resuelva la incertidumbre restante del valor en +B, el postor siempre preferirá (débilmente) +B a +A. Ejemplo 8. Un postor tiene XOR(+A, +B) y límites de valor [5, 10] en el nodo raíz y un valor de 1 en la hoja +A. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el postor siempre preferirá +A a +B a precios iguales, sin importar cómo se resuelva finalmente el valor incierto en el nodo raíz. Sobrecargando la notación, sea vi ∈ Ti una valoración que sea consistente con las valoraciones inferiores y superiores en el árbol de oferta Ti. Definición 4. El árbol de oferta Ti satisface RP a precios pt−1 si y solo si existe algún intercambio factible L∗ para el cual, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. Para determinar esto para el postor i, resolvemos una secuencia de problemas, cada uno de los cuales es una variación del problema WD. Primero, construimos un intercambio candidato de límite inferior, que es un intercambio factible que resuelve: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) La solución π∗ l a RP1(i) representa el pago máximo que el postor i puede lograr en todos los intercambios factibles, dado su valoración pesimista. Segundo, rompemos los lazos para encontrar un intercambio con la máxima incertidumbre del valor en todas las posibles soluciones a RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] sujeto a λ ∈ Feas(x0) (22) vi(λi) − pt−1(λi) ≥ π∗ l (23) Adoptamos la solución L∗ i como nuestro candidato para el intercambio que puede satisfacer RP. Para entender la importancia de esta regla de desempate, considera el Ejemplo 7. El proxy puede demostrar que +B pero no +A es una mejor respuesta para todos los vi ∈ Ti, y debería elegir +B como su candidato. Observa que +B es un contraejemplo para +A, pero no al revés. Ahora, construimos una valuación modificada ˜vi, estableciendo ˜viβ = viβ, si β ∈ sat(L∗ i) viβ, de lo contrario. (24) donde sat(L∗ i) es el conjunto de nodos que están satisfechos en el árbol de límite inferior para el comercio L∗ i. Dada esta valuación modificada, encontramos U∗ para resolver: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Sea π∗ u el beneficio de este intercambio óptimo en los valores modificados ˜v. Llamamos al intercambio U∗ i el intercambio testigo. Mostramos en la Proposición 1 que la regla RP se cumple si y solo si π∗ l ≥ π∗ u. La construcción de la valoración modificada como ˜vi reconoce que existe incertidumbre compartida en las operaciones que cumplen los mismos nodos en un árbol de ofertas. El ejemplo 8 ayuda a ilustrar esto. Simplemente usando vi en RP3(i), encontraríamos que L∗ i es comprar A con un pago de π∗ l = 3 pero luego encontraríamos que U∗ i es comprar B con π∗ u = 7 y fallar en RP. Debemos reconocer que, sin importar cómo se resuelva la incertidumbre en el nodo raíz, afectará a +A y +B de la misma manera. Por esta razón, establecimos ˜viβ = viβ = 5 en el nodo raíz, que es exactamente el mismo valor que se adoptó al determinar π∗ l. Entonces, RP3(i) aplicado a U∗ i da como resultado comprar A y se considera que el test de RP ha sido aprobado. Proposición 1. El árbol de oferta Ti satisface RP dado los precios pt−1 si y solo si cualquier intercambio de límite inferior L∗ i que resuelve RP1(i) y RP2(i) satisface: vi(Ti, L∗ i) − pt−1 (L∗ i) ≥ ˜vi(Ti, U∗ i) − pt−1 (U∗ i), (26) donde ˜vi es la valoración modificada en la ecuación (24). Prueba. Para la suficiencia, observe que la diferencia en el pago entre el intercambio L∗ i y otro intercambio λi no se ve afectada por la forma en que se resuelve la incertidumbre en cualquier nodo que esté satisfecho tanto en L∗ i como en λi. Corregir los valores en ˜vi en los nodos satisfechos en L∗ i tiene el efecto de eliminar esta consideración cuando se selecciona un intercambio U∗ i que satisface uno de estos nodos. Por otro lado, fijar los valores en estos nodos no tiene efecto en las operaciones consideradas en RP3(i) que no comparten un nodo con L∗ i. Para la dirección necesaria, primero mostramos que cualquier intercambio que satisfaga RP debe resolver RP1(i). Supongamos lo contrario, que algún λi con un pago mayor que π∗ l cumple con RP. Sin embargo, la valoración vi ∈ Ti junto con L∗ i presenta un contraejemplo a RP (Eq. 20). Ahora, supongamos (por contradicción) que algún λi con ganancia máxima π∗ l pero incertidumbre menor que L∗ i cumple con RP. Procede mediante el análisis de casos. Caso a): solo una solución a RP1(i) tiene un valor incierto y, por lo tanto, λi tiene un valor seguro. Pero, esto no puede satisfacer a RP porque L∗ i con un valor incierto sería un contraejemplo para RP (Eq. 20). Caso b): dos o más soluciones a RP1(i) tienen un valor incierto. Aquí argumentamos primero que uno de estos intercambios debe satisfacer un (débil) superconjunto de todos los nodos con valor incierto que son satisfechos por todos los demás intercambios en este conjunto. Esto es por RP. Sin esto, entonces para cualquier elección de comercio que resuelva RP1(i), hay otro comercio con un conjunto disjunto de nodos inciertos pero satisfechos que proporciona un contraejemplo a RP (Ec. 20). Ahora, considera el caso en el que algún intercambio contiene un superconjunto de todos los nodos inciertos satisfechos de los otros intercambios. Claramente RP2(i) elegirá este intercambio, L∗ i, y λi debe satisfacer un subconjunto de estos nodos (por suposición). Pero ahora vemos que λi no puede cumplir con RP porque L∗ i sería un contraejemplo para RP. El incumplimiento de la regla de actividad debe tener alguna consecuencia. En las reglas actuales, la acción predeterminada que elegimos es establecer los límites superiores en las valoraciones hasta el valor máximo del precio provisional en un nodo8 y el valor del límite inferior en ese nodo.9 Tal postor puede permanecer activo 8 El precio provisional en un nodo se define como el precio total mínimo entre todos los intercambios factibles para los cuales el subárbol enraizado en el árbol está satisfecho. 9 Esto es completamente análogo a cuando un postor en una subasta de reloj ascendente deja de ofertar a un precio: no se le permite ofertar a un precio más alto nuevamente en rondas futuras. 255 dentro del intercambio, pero solo con valoraciones que sean consistentes con estos nuevos límites. 5.4 Retroalimentación del postor En cada ronda, nuestro diseño predeterminado proporciona a cada postor el intercambio provisional y también los precios provisionales actuales. Ver el 7 para una discusión adicional. También brindamos orientación para ayudar a un licitador a cumplir con la regla de RP. Que sat(L∗ i ) y sat(U∗ i ) denoten los nodos que se satisfacen en los intercambios L∗ i y U∗ i, tal como se calcula en RP1-RP3. Lema 2. Cuando RP falla, un postor debe aumentar un límite inferior en al menos un nodo en sat(L∗ i) \\ sat(U∗ i) o disminuir un límite superior en al menos un nodo en sat(U∗ i) \\ sat(L∗ i) para cumplir con la regla de actividad. Prueba. Cambiar los valores superiores o inferiores en los nodos que no cumplen con ninguno de los intercambios no cambia ni L∗ i ni U∗ i, y no altera el beneficio de estos intercambios. Por lo tanto, la condición de RP seguirá fallando. De igual manera, cambiar los límites en los nodos que se satisfacen en ambos intercambios no tiene efecto en la preferencia revelada. Un cambio en un límite inferior en un nodo compartido afecta tanto a L∗ i como a U∗ i de manera idéntica debido al uso de la valoración modificada para determinar U∗ i. Un cambio en un límite superior en un nodo compartido no tiene efecto en la determinación de L∗ i o U∗ i. Ten en cuenta que cuando sat(U∗ i ) = sat(L∗ i ) entonces la condición (26) siempre se satisface trivialmente, por lo que la orientación en el lema siempre está bien definida cuando RP falla. Este es un mecanismo de retroalimentación elegante porque es adaptable. Una vez que un postor realiza algunos cambios en un subconjunto de estos nodos, el postor puede consultar el intercambio. El intercambio puede responder sí, o puede revisar el conjunto de nodos sat(λ∗ l ) y sat(λ∗ u) según sea necesario. 5.5 Condiciones de Terminación Una vez que cada postor haya comprometido sus nuevas ofertas (y haya cumplido con la regla de RP o haya sufrido la penalización), entonces la ronda t se cierra. En este punto, la tarea es determinar la nueva valoración α, y a su vez la asignación provisional λt y los precios provisionales pt. Una condición de terminación también se verifica, para determinar si se debe pasar el intercambio a una ronda final y definitiva. Para definir la α-valoración, calculamos las siguientes dos cantidades: Pesimista en Pesimista (PP). Determinar un intercambio eficiente, λ∗ l, en valores pesimistas, es decir, resolver maxλ   i vi(λi), y establecer PP=  i vi(λ∗ li). Pessimista a Optimista (PO) Determinar un intercambio eficiente, λ∗ u, en valores optimistas, es decir, resolver maxλ   i vi(λi), y establecer PO=  i vi(λ∗ ui). Primero, hay que tener en cuenta que PP ≥ PO y PP ≥ 0 por definición, para todos los árboles de oferta, aunque PO puede ser negativo (porque el intercambio correcto en v no es actualmente un intercambio útil en v). Reconociendo esto, definir γeff (PP, PO) = 1 + PP − PO PP , (27) cuando PP > 0, y observar que γeff (PP, PO) ≥ 1 cuando esto está definido, y que γeff (PP, PO) comenzará siendo grande y luego tenderá hacia 1 a medida que la asignación optimista converge hacia la asignación pesimista. En cada ronda, definimos αeff ∈ [0, 1] como: αeff = 0 cuando PP es 0, 1/γeff en otro caso (28), lo cual es 0 cuando PP es 0 y luego tiende hacia 1 una vez que PP > 0 en alguna ronda. Esto se utiliza para definir la α-valoración vα i = αeff vi + (1 − αeff )vi, ∀i, (29) que se utiliza para definir la asignación provisional y los precios provisionales. El efecto es definir endógenamente un horario para pasar de valores optimistas a pesimistas a lo largo de las rondas, basado en qué tan cercanos estén los intercambios entre sí. Condición de terminación. Al avanzar a la última y definitiva ronda, y finalmente cerrar, también nos preocupamos por la convergencia de pagos, además de la convergencia hacia un comercio eficiente. Para esto introducimos otro parámetro, αthresh ∈ [0, 1], que tiende de 0 a 1 a medida que los pagos de umbral en las valoraciones inferiores y superiores convergen. Considera el siguiente parámetro: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive), (30) el cual está definido para PP > 0, donde pthresh(v) denota los pagos de umbral en el perfil de valoración v, Nactive es el número de postores que están activamente involucrados en el comercio en la transacción de PP, y || · ||2 es la norma L2. Ten en cuenta que γthresh está definido para pagos y no para ganancias. Esto es apropiado porque la precisión del resultado del intercambio es lo que importa: es decir, el comercio y los pagos. Dado esto, definimos αthresh = 0 cuando PP es 0 y 1/γthresh en otro caso (31), lo cual es 0 mientras PP es 0 y luego tiende hacia 1 a medida que se avanza. Definición 5 (terminación). ICE pasa a una ronda final cuando se cumple una de las siguientes condiciones: 1. αeff ≥ CUTOFFeff y αthresh ≥ CUTOFFthresh, 2. no hay intercambio en los valores optimistas, donde CUTOFFeff, CUTOFFthresh ∈ (0, 1] determinan la precisión requerida para la terminación. Al final de la última y definitiva ronda, vα = v se utiliza para definir el intercambio final y los pagos finales del umbral. Ejemplo 9. Considera nuevamente el Ejemplo 1, y considera los límites superiores e inferiores como se muestra en la Figura 1. Primero, si los límites de los vendedores fueron [−20, −4] entonces hay un intercambio optimista pero no hay un intercambio pesimista, y PO = −4 y PP = 0, y αeff = 0. En los límites representados, tanto los intercambios optimistas como pesimistas ocurren y PO = PP = 4 y αeff = 1. Sin embargo, podemos ver que los pagos umbral son (17, −17) en v pero (14, −14) en v. Al evaluar γthresh, tenemos γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, y αthresh = 2/5. Para CUTOFFthresh < 2/5, el intercambio permanecería abierto. Por otro lado, si el valor que los compradores asignan a +AB estaba entre [18, 24] y el valor que los vendedores asignan a -AB estaba entre [-12, -6], los pagos umbral son (15, -15) en ambos límites superior e inferior, y αthresh = 1. 256 Líneas de Propósito de Componente Agente. El modelo 762 de Soporte Captura el comportamiento estratégico y las decisiones de revelación de información. Proporciona soporte XML para cargar bienes y valoraciones en el mundo 200. El mundo 200 realiza un seguimiento de todos los detalles de agentes, bienes y valoraciones. El Controlador y Comunicación de Intercambio 998 controla el intercambio y coordina el comportamiento remoto de los agentes. El Lenguaje de Subasta 1119 implementa el lenguaje de subasta basado en árboles. El Motor de Reglas de Actividad 203 implementa la regla de preferencia revelada con soporte de rango. El Motor de Reglas de Cierre 137 verifica si se ha alcanzado la condición de terminación de la subasta. El Motor WD 377 proporciona lógica relacionada con WD. El Motor de Precios 460 proporciona lógica relacionada con precios. Los Constructores MIP 346 traducen la lógica utilizada por los motores en nuestra formulación general de optimización. Los Constructores de Precios 256 son utilizados por tres etapas de precios. Los Constructores de Determinación de Ganadores 365 son utilizados por WD, regla de actividad, regla de cierre y generación de restricciones de precios. El código de Soporte del Marco 510 facilita la sustitución modular de los componentes anteriores. Tabla 1: Desglose de Componentes y Código de Intercambio. La INFRAESTRUCTURA DE SISTEMAS ICE consta de aproximadamente 6502 líneas de código Java, divididas en los paquetes funcionales descritos en la Tabla 1.10. El prototipo es modular para que los investigadores puedan reemplazar fácilmente los componentes para experimentación. Además del intercambio central discutido en este documento, hemos desarrollado un componente de agente que permite a un usuario simular el comportamiento y conocimiento de otros jugadores en el sistema, lo que le permite al usuario formular su estrategia antes de jugar realmente. Un usuario especifica un modelo de valoración en una interpretación XML de nuestro lenguaje de oferta, que se revela al intercambio a través de la estrategia de los agentes. Las principales tareas de intercambio son manejadas por motores que dictan la lógica no específica del optimizador. Estos motores impulsan los constructores MIP/LP apropiados. Nos dimos cuenta de que todas nuestras formulaciones de optimización se reducen a dos clases de problemas de optimización. El primero, utilizado para la determinación del ganador, la regla de actividad, la regla de cierre y la generación de restricciones en la fijación de precios, es un MIP que encuentra intercambios que maximizan el valor, manteniendo constantes los precios y los márgenes. El segundo, utilizado por las tres etapas de fijación de precios, es un LP que mantiene constantes las operaciones comerciales, buscando minimizar la holgura, el beneficio o los precios. Aprovechamos la similitud de estos problemas utilizando constructores de LP/MIP comunes que difieren solo en unos pocos ganchos funcionales para proporcionar las variables correctas para la optimización. Hemos generalizado nuestra interfaz de optimización del back-end (actualmente soportamos CPLEX y LPSolve con licencia LGPL) y podemos aprovechar la capacidad de equilibrio de carga y resolución paralela de MIP/LP que esta biblioteca proporciona. DISCUSIÓN El lenguaje de oferta se definió para permitir una simetría perfecta entre compradores y vendedores y proporcionar expresividad en un dominio de intercambio, por ejemplo, para oferentes mixtos interesados en ejecutar operaciones como swaps. Esto resultó especialmente desafiante. El avance se produjo cuando nos enfocamos en los cambios de valor para las operaciones en lugar de proporcionar valores absolutos para las asignaciones. Para simplificar, requerimos la misma estructura de árbol tanto para las valoraciones superiores como inferiores. El tamaño del código se mide en líneas de código fuente físicas (SLOC), generadas utilizando el Contador SLOC de David A. Wheeler. El total de 6502 incluye 184 para instrumentación (no se muestra en la tabla). La interfaz del solucionador JOpt es de otras 1964 líneas, y Castor genera automáticamente alrededor de 5200 líneas de código para la manipulación de archivos XML. Esto permite que el propio lenguaje garantice la consistencia (con el valor superior al menos igual al valor inferior en todas las operaciones) y aplique un estrechamiento monótono de estos límites para todas las operaciones en todas las rondas. También proporciona un método eficiente para verificar la regla de actividad de RP, ya que facilita razonar sobre la incertidumbre compartida entre las operaciones. La decisión de adoptar un enfoque directo y delegado en el cual los licitadores expresan sus valores superiores e inferiores a un agente de confianza que interactúa con la bolsa se tomó temprano en el proceso de diseño. En muchos aspectos, esta es la forma más clara y directa de generalizar el diseño en Parkes et al. [24] y hacerlo iterativo. Además, esto elimina muchas oportunidades para la manipulación estratégica: los postores están restringidos a hacer declaraciones (incrementales) sobre sus valoraciones. Otra ventaja es que hace que la regla de la actividad sea fácil de explicar: los postores siempre pueden cumplir con la regla de la actividad ajustando los límites de manera que su valor real permanezca en el soporte. Quizás lo más importante es que tener información explícita sobre los valores superiores e inferiores permite avanzar en las primeras rondas, incluso cuando no hay un intercambio eficiente a valores pesimistas. La información de los límites superior e inferior también proporciona orientación sobre cuándo terminar. Ten en cuenta que tomado por sí mismo, PP = PO no implica que el intercambio provisional actual sea eficiente con respecto a todos los valores consistentes con la información de valor actual. La diferencia en los valores entre diferentes oficios, agregada entre todos los postores, podría ser similar en los límites inferiores y superiores pero bastante diferente en los valores intermedios (incluyendo la verdad). Sin embargo, conjeturamos que PP = PO demostrará ser un indicador excelente de eficiencia en entornos prácticos donde la forma de las valoraciones superiores e inferiores sí transmita información útil. Esto merece una investigación experimental. Además, el uso del precio y la actividad de RP proporciona garantías adicionales. Adoptamos precios lineales (precios en artículos individuales) en lugar de precios no lineales (con precios en un intercambio que no son iguales a la suma de los precios de los artículos componentes) al principio del proceso de diseño. La concisión de esta representación de precios es muy importante para la viabilidad computacional dentro del intercambio y también para promover la simplicidad y transparencia para los postores. La regla de actividad RP fue adoptada más tarde, y es una buena elección debido a sus excelentes propiedades teóricas cuando se combina con los precios de CE. Lo siguiente se puede establecer fácilmente: dados los precios CE exactos pt−1 para el comercio provisional 12. Esto contrasta con enfoques basados en precios indirectos, como el reloj-proxy [1], en los que los postores deben ser capaces de razonar sobre las restricciones RP implicadas por las ofertas en cada ronda. 257 λt−1 en valoraciones vα, entonces si los valores superiores e inferiores al inicio de la ronda t ya satisfacen la regla RP (y sin necesidad de ningún desempate), el comercio provisional es eficiente para todas las valoraciones consistentes con los árboles de ofertas actuales. Cuando existen precios lineales de CE, esto proporciona una declaración de solidez y completitud: si PP = PO, existen precios lineales de CE, y se cumple la regla de RP, el intercambio provisional es eficiente (solidez); si los precios son precios exactos de CE para el intercambio provisional en vα, pero el intercambio es ineficiente con respecto a algún perfil de valoración consistente con los árboles de oferta actuales, entonces al menos un postor debe fallar en RP con su árbol de oferta actual y se avanzará (completitud). El trabajo futuro debe estudiar la convergencia experimentalmente y extender esta teoría para permitir precios aproximados. Algunos aspectos estratégicos de nuestro diseño de ICE merecen comentario y estudio adicional. Primero, no afirmamos que responder sinceramente a la regla de RP sea un equilibrio ex post. Sin embargo, el intercambio está diseñado para imitar la regla de Umbral en su esquema de pago, que se sabe que tiene propiedades de incentivo útiles. Debemos tener cuidado, sin embargo. Por ejemplo, no sugerimos proporcionar αeff a los licitadores, porque a medida que αeff se acerca a 1, informaría a los licitadores que los valores de las ofertas se vuelven irrelevantes para determinar el intercambio, sino que se utilizan simplemente para determinar los pagos (y los licitadores se volverían cada vez más reacios a aumentar sus valoraciones más bajas). Además, en este trabajo no se ha considerado la posibilidad de colusión entre los licitadores. Este es un tema que merece atención en trabajos futuros. 8. CONCLUSIONES En este trabajo diseñamos y prototipamos un intercambio combinatorio iterativo escalable y altamente expresivo. El diseño incluye muchas características interesantes, como: un nuevo lenguaje de árbol de ofertas para intercambios, un nuevo método para construir precios lineales aproximados a partir de lenguajes expresivos, y un método de elicitación con valoraciones optimistas y pesimistas con un nuevo método para evaluar una regla de actividad de preferencia revelada. El intercambio está completamente implementado en Java y se encuentra en una fase de validación. Los próximos pasos para nuestro trabajo son permitir a los licitadores refinar la estructura del árbol de oferta además de los valores en el árbol. Tenemos la intención de estudiar las propiedades de elicitación del intercambio y hemos creado un conjunto de pruebas de instancias de problemas de intercambio. Además, estamos comenzando a participar en colaboraciones para aplicar el diseño a la programación de franjas horarias de despegue y aterrizaje de aerolíneas y a la asignación de recursos en sistemas computacionales distribuidos de amplia área de red. Agradecimientos Nos gustaría dedicar este artículo a todos los participantes de CS 286r en la Universidad de Harvard en la primavera de 2004. Este trabajo está parcialmente respaldado por la subvención de la NSF IIS-0238147. REFERENCIAS [1] L. Ausubel, P. Cramton y P. Milgrom. La subasta de reloj-proxi: Un diseño práctico de subasta combinatoria. En Cramton et al. [9], capítulo 5. [2] M. Babaioff, N. Nisan y E. Pavlov. Mecanismos para un mercado distribuido espacialmente. En Actas de la 5ta Conferencia de la ACM sobre Comercio Electrónico, páginas 9-20. ACM Press, 2001. Dado el teorema de imposibilidad de Myerson-Satterthwaite [22] y el método mediante el cual determinamos el intercambio, no deberíamos esperar esto. [3] M. Ball, G. Donohue y K. Hoffman. Subastas para la asignación segura, eficiente y equitativa de los recursos del sistema de espacio aéreo. En S. Cramton, Shoham, editor, Subastas Combinatorias. 2004. Próximamente. [4] D. Bertsimas y J. Tsitsiklis. Introducción a la Optimización Lineal. Athena Scientific, 1997. [5] S. Bikhchandani y J. M. Ostroy. El modelo de asignación de paquetes. Revista de Teoría Económica, 107(2):377-406, 2002. [6] C. Boutilier. Una formulación POMDP de problemas de obtención de preferencias. En Proc. 18ª Conferencia Nacional de Inteligencia Artificial (AAAI-02), 2002. [7] C. Boutilier y H. Hoos. Subastando idiomas para subastas combinatorias. En Proc. 17ª Conferencia Internacional Conjunta sobre Inteligencia Artificial (IJCAI-01), 2001. [8] W. Conen y T. Sandholm. Elicitación de preferencias en subastas combinatorias. En Proc. 3ra Conf. ACM sobre Comercio Electrónico (EC-01), páginas 256-259. ACM Press, Nueva York, 2001. [9] P. Cramton, Y. Shoham y R. Steinberg, editores. Subastas combinatorias. MIT Press, 2004. [10] S. de Vries, J. Schummer y R. V. Vohra. En subastas ascendentes de Vickrey para objetos heterogéneos. Informe técnico, MEDS, Escuela Kellogg, Universidad Northwestern, 2003. [11] S. de Vries y R. V. Vohra. Subastas combinatorias: Un estudio. Revista Informs sobre Computación, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana y T. Wilson. Probando algoritmos de precios lineales para su uso en subastas combinatorias ascendentes. Informe técnico, SEOR, Universidad George Mason, 2003. [13] Y. Fu, J. Chase, B. Chun, S. Schwab, y A. Vahdat. Sharp: una arquitectura para el emparejamiento seguro de recursos. En Actas del decimonoveno simposio de principios de sistemas operativos de ACM, páginas 133-148. ACM Press, 2003. [14] B. Hudson y T. Sandholm. Efectividad de tipos de consultas y políticas para la obtención de preferencias en subastas combinatorias. En Proc. 3rd Int. Articulación. Conferencia sobre Agentes Autónomos y Sistemas Multiagente, páginas 386-393, 2004. [15] V. Krishna. Teoría de subastas. Academic Press, 2002. [16] D. Krych. \n\nEditorial Académica, 2002. [16] D. Krych. Cálculo y análisis de equilibrios de Nash de reglas de pago basadas en Vickrey para intercambios combinatorios, Harvard College, abril de 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter y C. DeMartini. Un nuevo y mejorado diseño para subastas iterativas de múltiples objetos. Ciencias de la Gestión, 2004. Aparecer. [18] E. Kwerel y J. Williams. Una propuesta para una transición rápida a la asignación de espectro por mercado. Informe técnico, Oficina de Planes y Políticas de la FCC, noviembre de 2002. [19] S. M. Lahaie y D. C. Parkes. Aplicando algoritmos de aprendizaje a la obtención de preferencias. En Proc. ACM Conf. on Electronic Commerce, páginas 180-188, 2004. [20] R. P. McAfee. Una subasta doble con estrategia dominante. Revista de Teoría Económica, 56:434-450, 1992. [21] P. Milgrom. Poniendo en práctica la teoría de subastas: La subasta ascendente simultánea. J.Pol. Econ., 108:245-272, 2000. [22] R. B. Myerson y M. A. Satterthwaite. Mecanismos eficientes para el comercio bilateral. Revista de Teoría Económica, 28:265-281, 1983. [23] N. Nisan. Subasta y asignación en subastas combinatorias. En Proc. 2ª ACM Conf. sobre Comercio Electrónico (EC-00), páginas 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam y M. Eso. Lograr el equilibrio presupuestario con esquemas de pago basados en Vickrey en intercambios. En Proc. 17ª Conferencia Internacional Conjunta de Inteligencia Artificial (IJCAI-01), páginas 1161-1168, 2001. [25] D. C. Parkes y L. H. Ungar. Subastas combinatorias iterativas: Teoría y práctica. En Proc. 17ª Conferencia Nacional de Inteligencia Artificial (AAAI-00), páginas 74-81, julio de 2000. [26] S. J. Rassenti, V. L. Smith y R. L. Bulfin. Un mecanismo combinatorio para la asignación de franjas horarias en aeropuertos. Revista Bell de Economía, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc y R. M. Harstad. Subastas combinatorias computacionalmente manejables. Ciencia de la Gestión, 44(8):1131-1147, 1998. [28] T. Sandholm y C. Boutilier. Elicitación de preferencias en subastas combinatorias. En Cramton et al. [9], capítulo 10. [29] P. R. Wurman y M. P. Wellman. AkBA: Una subasta combinatoria progresiva y de precio anónimo. En la Segunda Conferencia ACM sobre Comercio Electrónico, páginas 21-29, 2000. 258 ",
            "candidates": [],
            "error": [
                [
                    "determinación de ganadores",
                    "determinación del ganador",
                    "determinación del ganador"
                ]
            ]
        },
        "bidding": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "ICE: An Iterative Combinatorial Exchange David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative combinatorial exchange (ICE).",
                "The exchange incorporates a tree-based <br>bidding</br> language that is concise and expressive for CEs.",
                "Bidders specify lower and upper bounds on their value for different trades.",
                "These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
                "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
                "A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "The exchange is fully implemented and in a validation phase.",
                "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
                "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
                "In a double auction (DA), multiple buyers and sellers trade units of an identical good [20].",
                "In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive <br>bidding</br> language.",
                "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
                "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling.",
                "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
                "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
                "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
                "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
                "This paper presents the first design for an iterative combinatorial exchange (ICE).",
                "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
                "The ICE design problem is multi-faceted and quite hard.",
                "The main innovation in our design is an expressive yet concise tree-based <br>bidding</br> language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide <br>bidding</br>, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round.",
                "The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "The exchange has a number of interesting theoretical properties.",
                "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
                "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
                "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
                "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
                "While we cannot claim that straightforward <br>bidding</br> is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "The exchange is implemented in Java and is currently in validation.",
                "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
                "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
                "We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions.",
                "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based <br>bidding</br> language.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable.",
                "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
                "Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
                "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
                "An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade.",
                "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
                "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the <br>bidding</br> language and avoid enumerating all feasible trades.",
                "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
                "A revealed-preference activity rule [1] ensures progress across rounds.",
                "In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices.",
                "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
                "An outline of the ICE system flow of control is provided in Figure 1.",
                "We will return to this example later in the paper.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance).",
                "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round.",
                "At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29].",
                "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
                "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
                "The price generation methods that we use in ICE generalize the methods in these earlier papers.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule.",
                "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
                "We are not aware of any previous studies of iterative CEs.",
                "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
                "No dominant strategy mechanisms are known for the general CE problem.",
                "ICE is a hybrid auction design, in that it couples simple item prices to drive <br>bidding</br> in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
                "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
                "The <br>bidding</br> language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
                "Rothkopf et al. [27] also describe a restricted tree-based <br>bidding</br> language.",
                "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
                "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
                "The idea of capturing the structure of our <br>bidding</br> language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
                "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
                "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
                "A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
                "So, the final allocation is x1 = x0 + λ.",
                "Each bidder has a value vi(λi) ∈ ¡ for a trade λi.",
                "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
                "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ .",
                "Price p can be negative, indicating the bidder receives a payment for the trade.",
                "We use the term payoff interchangeably with utility.",
                "Our goal in the ICE design is to implement the efficient trade.",
                "The efficient trade, λ∗ , maximizes the total increase in value across bidders.",
                "Definition 1 (Efficient trade).",
                "The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
                "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
                "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
                "All three examples have only one seller, but this is purely illustrative.",
                "Example 1.",
                "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
                "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
                "Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
                "Example 2.",
                "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
                "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
                "The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
                "Example 3.",
                "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
                "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based <br>bidding</br> Language The <br>bidding</br> language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades.",
                "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
                "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
                "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
                "We illustrate the language on each of Examples 1-3 in Figure 2.",
                "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
                "The nodes have zero values where no value is indicated.",
                "Internal nodes are also labeled with interval-choose (IC) ranges.",
                "Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
                "First, if a child is on then its parent must be on.",
                "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
                "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade.",
                "For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
                "On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
                "Given a trade there is often a number of ways to choose the set of satisfied nodes.",
                "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
                "Consider bid tree Ti from bidder i.",
                "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
                "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
                "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
                "Every node is also labeled with a value, viβ ∈ ¡ .",
                "Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.)",
                "Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
                "There will often be a choice.",
                "Ties are broken to maximize value.",
                "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
                "Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
                "This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade.",
                "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
                "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
                "The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
                "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
                "Similarly, the XOR/OR <br>bidding</br> languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
                "OR* is known to be expressive and concise.",
                "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
                "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
                "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
                "In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆vcg,i = V ∗ − V−i the VCG discount.",
                "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
                "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome.",
                "Definition 2.",
                "The Threshold payment scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance).",
                "Example 4.",
                "In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
                "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
                "This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes.",
                "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
                "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
                "THE ICE DESIGN We are now ready to introduce the iterative combinatorial exchange (ICE) design.",
                "Several new components are introduced, relative to the design for the one-shot exchange.",
                "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
                "The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations.",
                "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
                "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v).",
                "Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The <br>bidding</br> language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
                "These take the place of the exact value viβ defined in Section 4.1.",
                "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
                "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
                "The following lemma is useful: Lemma 1.",
                "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
                "Proof.",
                "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
                "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
                "But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
                "Given these provisional prices, the price on trade λi for bidder i is pt (λi) =   j≤m pt j · λij.",
                "Definition 3 (CE prices).",
                "Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
                "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
                "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
                "II: Fairness.",
                "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
                "III: Balance.",
                "Third, we break ties to prefer prices that minimize the maximal price across all items.",
                "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
                "In computing prices, we explain how to compute approximate (or otherwise) prices for structured <br>bidding</br> languages, and without enumerating all possible trades.",
                "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
                "Each step is described in detail below.",
                "I: Accuracy.",
                "We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured <br>bidding</br> languages.",
                "Let λt denote the current provisional trade and suppose the provisional valuation is vα .",
                "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
                "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
                "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.)",
                "Example 5.",
                "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
                "The efficient trade allocates AB to buyer 1 and CD to buyer 3.",
                "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
                "But, (9) has an exponential number of constraints (Eq. 10).",
                "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
                "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
                "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
                "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
                "In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices.",
                "Let ˆλi denote the solution to R-WD(i).",
                "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
                "Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
                "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
                "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
                "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
                "This can be exactly achieved in pricing with pA + pB = 14.",
                "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
                "The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the VCG payoff (at vα ).",
                "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
                "III: Balance.",
                "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items.",
                "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
                "Finally, balance sets p(A) = p(B) = 7.",
                "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
                "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
                "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
                "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
                "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
                "Dunford et al. [12] prefer to smooth prices across rounds.",
                "Comment 1: Lexicographical Refinement.",
                "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
                "For instance, in ACC we successively minimize the maximal error across all bidders.",
                "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
                "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
                "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
                "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL.",
                "Comment 2: Computation.",
                "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
                "Thus, the computational effort in constraint generation is re-used.",
                "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
                "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
                "This avoids later infeasibility issues.",
                "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
                "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
                "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
                "We adopt a simple revealed-preference (RP) activity rule.",
                "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
                "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
                "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
                "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
                "Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices.",
                "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
                "We pin these down and then minimize the error to bidders 3 and 4.",
                "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices.",
                "Consider the following examples: Example 7.",
                "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
                "Example 8.",
                "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
                "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
                "Definition 4.",
                "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
                "First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
                "Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP.",
                "To understand the importance of this tiebreaking rule consider Example 7.",
                "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
                "Notice that +B is a counterexample to +A, but not the other way round.",
                "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i .",
                "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v.",
                "We call trade U∗ i the witness trade.",
                "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
                "Example 8 helps to illustrate this.",
                "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
                "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
                "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
                "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
                "Proposition 1.",
                "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
                "Proof.",
                "For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
                "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes.",
                "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
                "For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i).",
                "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
                "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
                "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
                "Proceed by case analysis.",
                "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
                "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
                "Case b): two or more solutions to RP1(i) have uncertain value.",
                "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
                "This is by RP.",
                "Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
                "Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades.",
                "Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
                "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
                "Failure to meet the activity rule must have some consequence.",
                "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops <br>bidding</br> at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices.",
                "See 7 for an additional discussion.",
                "We also provide guidance to help a bidder meet the RP rule.",
                "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
                "Lemma 2.",
                "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
                "Proof.",
                "Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
                "Thus, the RP condition will continue to fail.",
                "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
                "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
                "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
                "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
                "This is an elegant feedback mechanism because it is adaptive.",
                "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
                "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
                "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
                "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
                "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
                "Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
                "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v).",
                "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
                "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
                "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
                "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
                "Termination Condition.",
                "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade.",
                "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
                "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm.",
                "Note that γthresh is defined for payments and not payoffs.",
                "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments.",
                "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
                "Definition 5 (termination).",
                "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
                "At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments.",
                "Example 9.",
                "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
                "First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0.",
                "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
                "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
                "For CUTOFFthresh < 2/5 the exchange would remain open.",
                "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
                "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 <br>bidding</br> Language Implements the tree-based <br>bidding</br> language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
                "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
                "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
                "A user specifies a valuation model in an XMLinterpretation of our <br>bidding</br> language, which is revealed to the exchange via the agents strategy.",
                "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
                "These engines drive the appropriate MIP/LP builders.",
                "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
                "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
                "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
                "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
                "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
                "DISCUSSION The <br>bidding</br> language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
                "This proved especially challenging.",
                "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
                "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
                "The total of 6502 includes 184 for instrumentation (not shown in the table).",
                "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
                "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
                "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
                "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
                "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
                "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values.",
                "Upper and lower bound information also provides guidance about when to terminate.",
                "Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information.",
                "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
                "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
                "This is worthy of experimental investigation.",
                "Moreover, the use of price and RP activity provides additional guarantees.",
                "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process.",
                "The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
                "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
                "The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees.",
                "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
                "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
                "Some strategic aspects of our ICE design deserve comment, and further study.",
                "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
                "We must be careful, though.",
                "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
                "Also, no consideration has been given in this work to collusion by bidders.",
                "This is an issue that deserves some attention in future work. 8.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative combinatorial exchange.",
                "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
                "The exchange is fully implemented in Java and is in a validation phase.",
                "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
                "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
                "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
                "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
                "This work is supported in part by NSF grant IIS-0238147. 9.",
                "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
                "The clock-proxy auction: A practical combinatorial auction design.",
                "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
                "Mechanisms for a spatially distributed market.",
                "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
                "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
                "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
                "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
                "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
                "Introduction to Linear Optimization.",
                "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
                "A pomdp formulation of preference elicitation problems.",
                "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
                "<br>bidding</br> languages for combinatorial auctions.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
                "Preference elicitation in combinatorial auctions.",
                "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
                "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
                "Combinatorial Auctions.",
                "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
                "On ascending Vickrey auctions for heterogeneous objects.",
                "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
                "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
                "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
                "Chase, B. Chun, S. Schwab, and A. Vahdat.",
                "Sharp: an architecture for secure resource peering.",
                "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
                "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In Proc. 3rd Int.",
                "Joint.",
                "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [16] D. Krych.",
                "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
                "A new and improved design for multi-object iterative auctions.",
                "Management Science, 2004.",
                "To appear. [18] E. Kwerel and J. Williams.",
                "A proposal for a rapid transition to market allocation of spectrum.",
                "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proc.",
                "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
                "A dominant strategy double auction.",
                "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
                "Putting auction theory to work: The simultaneous ascending auction.",
                "J.Pol.",
                "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
                "<br>bidding</br> and allocation in combinatorial auctions.",
                "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
                "Iterative combinatorial auctions: Theory and practice.",
                "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
                "A combinatorial mechanism for airport time slot allocation.",
                "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
            ],
            "original_annotated_samples": [
                "The exchange incorporates a tree-based <br>bidding</br> language that is concise and expressive for CEs.",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive <br>bidding</br> language.",
                "The main innovation in our design is an expressive yet concise tree-based <br>bidding</br> language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide <br>bidding</br>, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "While we cannot claim that straightforward <br>bidding</br> is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based <br>bidding</br> language."
            ],
            "translated_annotated_samples": [
                "El intercambio incorpora un lenguaje de <br>oferta</br> basado en árboles que es conciso y expresivo para los CE.",
                "Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un <br>lenguaje de oferta</br> expresivo.",
                "La principal innovación en nuestro diseño es un lenguaje de <br>oferta</br> basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las <br>oferta</br>s, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas.",
                "Si bien no podemos afirmar que la <br>subasta</br> directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto.",
                "UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de <br>oferta</br> basado en árboles expresivo y conciso."
            ],
            "translated_text": "Presentamos el primer diseño para un intercambio combinatorio iterativo (ICE). El intercambio incorpora un lenguaje de <br>oferta</br> basado en árboles que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20]. En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un <br>lenguaje de oferta</br> expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos. Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un intercambio combinatorio iterativo (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un lenguaje de <br>oferta</br> basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las <br>oferta</br>s, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda. La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la <br>subasta</br> directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de <br>oferta</br> basado en árboles expresivo y conciso. ",
            "candidates": [],
            "error": [
                [
                    "oferta",
                    "lenguaje de oferta",
                    "oferta",
                    "oferta",
                    "subasta",
                    "oferta"
                ]
            ]
        },
        "threshold payment": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "ICE: An Iterative Combinatorial Exchange David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative combinatorial exchange (ICE).",
                "The exchange incorporates a tree-based bidding language that is concise and expressive for CEs.",
                "Bidders specify lower and upper bounds on their value for different trades.",
                "These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
                "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
                "A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "The exchange is fully implemented and in a validation phase.",
                "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
                "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
                "In a double auction (DA), multiple buyers and sellers trade units of an identical good [20].",
                "In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language.",
                "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
                "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling.",
                "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
                "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
                "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
                "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
                "This paper presents the first design for an iterative combinatorial exchange (ICE).",
                "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
                "The ICE design problem is multi-faceted and quite hard.",
                "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round.",
                "The <br>threshold payment</br> rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "The exchange has a number of interesting theoretical properties.",
                "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
                "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
                "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
                "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
                "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the <br>threshold payment</br> rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "The exchange is implemented in Java and is currently in validation.",
                "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
                "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
                "We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions.",
                "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based bidding language.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable.",
                "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
                "Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
                "Payments are computed using the <br>threshold payment</br> rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
                "An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade.",
                "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
                "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades.",
                "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
                "A revealed-preference activity rule [1] ensures progress across rounds.",
                "In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices.",
                "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
                "An outline of the ICE system flow of control is provided in Figure 1.",
                "We will return to this example later in the paper.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance).",
                "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round.",
                "At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29].",
                "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
                "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
                "The price generation methods that we use in ICE generalize the methods in these earlier papers.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the <br>threshold payment</br> rule.",
                "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
                "We are not aware of any previous studies of iterative CEs.",
                "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
                "No dominant strategy mechanisms are known for the general CE problem.",
                "ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
                "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
                "The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
                "Rothkopf et al. [27] also describe a restricted tree-based bidding language.",
                "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
                "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
                "The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
                "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
                "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
                "A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
                "So, the final allocation is x1 = x0 + λ.",
                "Each bidder has a value vi(λi) ∈ ¡ for a trade λi.",
                "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
                "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ .",
                "Price p can be negative, indicating the bidder receives a payment for the trade.",
                "We use the term payoff interchangeably with utility.",
                "Our goal in the ICE design is to implement the efficient trade.",
                "The efficient trade, λ∗ , maximizes the total increase in value across bidders.",
                "Definition 1 (Efficient trade).",
                "The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
                "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
                "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
                "All three examples have only one seller, but this is purely illustrative.",
                "Example 1.",
                "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
                "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
                "Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
                "Example 2.",
                "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
                "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
                "The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
                "Example 3.",
                "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
                "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades.",
                "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
                "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
                "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
                "We illustrate the language on each of Examples 1-3 in Figure 2.",
                "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
                "The nodes have zero values where no value is indicated.",
                "Internal nodes are also labeled with interval-choose (IC) ranges.",
                "Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
                "First, if a child is on then its parent must be on.",
                "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
                "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade.",
                "For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
                "On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
                "Given a trade there is often a number of ways to choose the set of satisfied nodes.",
                "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
                "Consider bid tree Ti from bidder i.",
                "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
                "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
                "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
                "Every node is also labeled with a value, viβ ∈ ¡ .",
                "Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.)",
                "Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
                "There will often be a choice.",
                "Ties are broken to maximize value.",
                "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
                "Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
                "This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade.",
                "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
                "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
                "The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
                "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
                "Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
                "OR* is known to be expressive and concise.",
                "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
                "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
                "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The <br>threshold payment</br> rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
                "In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆vcg,i = V ∗ − V−i the VCG discount.",
                "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
                "The <br>threshold payment</br> rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome.",
                "Definition 2.",
                "The <br>threshold payment</br> scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance).",
                "Example 4.",
                "In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
                "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
                "This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes.",
                "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
                "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
                "THE ICE DESIGN We are now ready to introduce the iterative combinatorial exchange (ICE) design.",
                "Several new components are introduced, relative to the design for the one-shot exchange.",
                "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
                "The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations.",
                "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
                "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v).",
                "Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
                "These take the place of the exact value viβ defined in Section 4.1.",
                "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
                "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
                "The following lemma is useful: Lemma 1.",
                "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
                "Proof.",
                "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
                "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
                "But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
                "Given these provisional prices, the price on trade λi for bidder i is pt (λi) =   j≤m pt j · λij.",
                "Definition 3 (CE prices).",
                "Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
                "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
                "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
                "II: Fairness.",
                "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
                "III: Balance.",
                "Third, we break ties to prefer prices that minimize the maximal price across all items.",
                "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
                "In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades.",
                "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
                "Each step is described in detail below.",
                "I: Accuracy.",
                "We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages.",
                "Let λt denote the current provisional trade and suppose the provisional valuation is vα .",
                "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
                "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
                "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.)",
                "Example 5.",
                "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
                "The efficient trade allocates AB to buyer 1 and CD to buyer 3.",
                "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
                "But, (9) has an exponential number of constraints (Eq. 10).",
                "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
                "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
                "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
                "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
                "In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices.",
                "Let ˆλi denote the solution to R-WD(i).",
                "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
                "Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
                "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
                "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
                "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
                "This can be exactly achieved in pricing with pA + pB = 14.",
                "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
                "The objective here is the same as in the <br>threshold payment</br> rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the VCG payoff (at vα ).",
                "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
                "III: Balance.",
                "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items.",
                "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
                "Finally, balance sets p(A) = p(B) = 7.",
                "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
                "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
                "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
                "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
                "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
                "Dunford et al. [12] prefer to smooth prices across rounds.",
                "Comment 1: Lexicographical Refinement.",
                "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
                "For instance, in ACC we successively minimize the maximal error across all bidders.",
                "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
                "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
                "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
                "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL.",
                "Comment 2: Computation.",
                "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
                "Thus, the computational effort in constraint generation is re-used.",
                "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
                "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
                "This avoids later infeasibility issues.",
                "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
                "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
                "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
                "We adopt a simple revealed-preference (RP) activity rule.",
                "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
                "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
                "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
                "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
                "Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices.",
                "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
                "We pin these down and then minimize the error to bidders 3 and 4.",
                "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices.",
                "Consider the following examples: Example 7.",
                "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
                "Example 8.",
                "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
                "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
                "Definition 4.",
                "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
                "First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
                "Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP.",
                "To understand the importance of this tiebreaking rule consider Example 7.",
                "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
                "Notice that +B is a counterexample to +A, but not the other way round.",
                "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i .",
                "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v.",
                "We call trade U∗ i the witness trade.",
                "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
                "Example 8 helps to illustrate this.",
                "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
                "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
                "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
                "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
                "Proposition 1.",
                "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
                "Proof.",
                "For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
                "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes.",
                "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
                "For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i).",
                "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
                "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
                "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
                "Proceed by case analysis.",
                "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
                "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
                "Case b): two or more solutions to RP1(i) have uncertain value.",
                "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
                "This is by RP.",
                "Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
                "Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades.",
                "Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
                "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
                "Failure to meet the activity rule must have some consequence.",
                "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices.",
                "See 7 for an additional discussion.",
                "We also provide guidance to help a bidder meet the RP rule.",
                "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
                "Lemma 2.",
                "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
                "Proof.",
                "Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
                "Thus, the RP condition will continue to fail.",
                "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
                "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
                "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
                "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
                "This is an elegant feedback mechanism because it is adaptive.",
                "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
                "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
                "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
                "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
                "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
                "Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
                "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v).",
                "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
                "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
                "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
                "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
                "Termination Condition.",
                "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade.",
                "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
                "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm.",
                "Note that γthresh is defined for payments and not payoffs.",
                "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments.",
                "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
                "Definition 5 (termination).",
                "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
                "At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments.",
                "Example 9.",
                "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
                "First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0.",
                "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
                "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
                "For CUTOFFthresh < 2/5 the exchange would remain open.",
                "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
                "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the tree-based bidding language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
                "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
                "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
                "A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy.",
                "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
                "These engines drive the appropriate MIP/LP builders.",
                "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
                "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
                "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
                "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
                "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
                "DISCUSSION The bidding language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
                "This proved especially challenging.",
                "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
                "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
                "The total of 6502 includes 184 for instrumentation (not shown in the table).",
                "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
                "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
                "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
                "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
                "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
                "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values.",
                "Upper and lower bound information also provides guidance about when to terminate.",
                "Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information.",
                "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
                "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
                "This is worthy of experimental investigation.",
                "Moreover, the use of price and RP activity provides additional guarantees.",
                "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process.",
                "The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
                "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
                "The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees.",
                "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
                "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
                "Some strategic aspects of our ICE design deserve comment, and further study.",
                "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
                "We must be careful, though.",
                "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
                "Also, no consideration has been given in this work to collusion by bidders.",
                "This is an issue that deserves some attention in future work. 8.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative combinatorial exchange.",
                "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
                "The exchange is fully implemented in Java and is in a validation phase.",
                "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
                "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
                "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
                "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
                "This work is supported in part by NSF grant IIS-0238147. 9.",
                "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
                "The clock-proxy auction: A practical combinatorial auction design.",
                "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
                "Mechanisms for a spatially distributed market.",
                "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
                "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
                "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
                "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
                "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
                "Introduction to Linear Optimization.",
                "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
                "A pomdp formulation of preference elicitation problems.",
                "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
                "Bidding languages for combinatorial auctions.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
                "Preference elicitation in combinatorial auctions.",
                "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
                "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
                "Combinatorial Auctions.",
                "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
                "On ascending Vickrey auctions for heterogeneous objects.",
                "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
                "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
                "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
                "Chase, B. Chun, S. Schwab, and A. Vahdat.",
                "Sharp: an architecture for secure resource peering.",
                "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
                "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In Proc. 3rd Int.",
                "Joint.",
                "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [16] D. Krych.",
                "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
                "A new and improved design for multi-object iterative auctions.",
                "Management Science, 2004.",
                "To appear. [18] E. Kwerel and J. Williams.",
                "A proposal for a rapid transition to market allocation of spectrum.",
                "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proc.",
                "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
                "A dominant strategy double auction.",
                "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
                "Putting auction theory to work: The simultaneous ascending auction.",
                "J.Pol.",
                "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
                "Iterative combinatorial auctions: Theory and practice.",
                "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
                "A combinatorial mechanism for airport time slot allocation.",
                "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
            ],
            "original_annotated_samples": [
                "The <br>threshold payment</br> rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the <br>threshold payment</br> rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "Payments are computed using the <br>threshold payment</br> rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the <br>threshold payment</br> rule.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The <br>threshold payment</br> rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance."
            ],
            "translated_annotated_samples": [
                "La <br>regla de pago umbral</br>, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales.",
                "Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la <br>regla de pago del Umbral</br> minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto.",
                "Los pagos se calculan utilizando la <br>regla de pago del umbral</br> [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de precios.",
                "Parkes et al. [24] estudiaron intercambios combinatorios de oferta sellada e introdujeron la regla de <br>pago umbral</br>.",
                "Estos artículos pueden ser asignados de nuevo a los agentes que vendieron los artículos, es decir, para los cuales λij < 0. 4.3 Cálculo de Pagos Umbral La regla de <br>pago umbral</br> se basa en los pagos en el mecanismo de Vickrey-Clarke-Groves (VCG) [15], que en sí mismo es veraz y eficiente pero no satisface el equilibrio presupuestario."
            ],
            "translated_text": "Presentamos el primer diseño para un intercambio combinatorio iterativo (ICE). El intercambio incorpora un lenguaje de oferta basado en árboles que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20]. En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos. Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un intercambio combinatorio iterativo (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda. La <br>regla de pago umbral</br>, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la <br>regla de pago del Umbral</br> minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de oferta basado en árboles expresivo y conciso. El lenguaje describe valores para intercambios, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el intercambio sea aceptable. El lenguaje permite a los postores expresar límites superiores e inferiores en el valor, los cuales pueden ser ajustados en cada ronda. • Determinación del ganador. La determinación del ganador (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación. Comparar la solución en los valores superiores e inferiores permite tomar una decisión sobre la terminación, con el progreso en rondas intermedias impulsado por una valoración intermedia y los valores inferiores adoptados al finalizar. • Pagos. Los pagos se calculan utilizando la <br>regla de pago del umbral</br> [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de precios. Se calcula un precio aproximado para cada artículo en el intercambio en cada ronda, en función de las valoraciones intermedias y el intercambio provisional. Los precios se optimizan para aproximar los precios de equilibrio competitivo, y luego se optimizan aún más para aproximar mejor los pagos del umbral actual con los lazos restantes rotos para favorecer los precios equilibrados entre diferentes artículos. Al calcular los precios, adoptamos los métodos de generación de restricciones para explotar la estructura del lenguaje de oferta y evitar enumerar todos los intercambios factibles. El subproblema para generar nuevas restricciones es una variación del problema WD. • Regla de actividad. Una regla de actividad de preferencia revelada [1] garantiza progreso a lo largo de las rondas. Para permanecer activo, un oferente debe ajustar los límites para que haya suficiente información para definir un intercambio que maximice el excedente a los precios actuales. Otra variación del problema de WD se formula, tanto para verificar que se cumple la regla de actividad como para proporcionar retroalimentación a un postor para explicar cómo cumplir la regla. Se proporciona un esquema del flujo de control del sistema ICE en la Figura 1. Volveremos a este ejemplo más adelante en el documento. Por ahora, simplemente observa en este ejemplo de dos agentes que los agentes establecen límites inferiores y superiores que son verificados en la regla de actividad, y luego pasados a la determinación del ganador (WD), y luego a través de tres etapas de fijación de precios (precisión, equidad, equilibrio). Al pasar la regla de cierre (en la que se verifican los parámetros αeff y αthresh para la convergencia del comercio y los pagos), el intercambio pasa a una última y definitiva ronda. Al final de esta ronda, el intercambio y los pagos finalmente se determinan, basados en las valoraciones más bajas. 2.1 Trabajo Relacionado En la literatura se conocen muchos CAs de un solo lado con precios ascendentes [10, 25, 29]. También se han propuesto enfoques de elicitación directa para los AC unilaterales en los que los agentes responden a preguntas explícitas sobre sus valoraciones [8, 14, 19]. Un número de CAs ascendentes están diseñados para trabajar con precios simples en artículos [12, 17]. Los métodos de generación de precios que utilizamos en ICE generalizan los métodos de estos artículos anteriores. Parkes et al. [24] estudiaron intercambios combinatorios de oferta sellada e introdujeron la regla de <br>pago umbral</br>. Posteriormente, Krych [16] demostró experimentalmente que la regla del Umbral promueve asignaciones eficientes. No tenemos conocimiento de ningún estudio previo sobre CEs iterativos. Las estrategias dominantes DAs son conocidas por la demanda unitaria [20] y también por agentes de mente única [2]. No se conocen mecanismos de estrategia dominante para el problema general de la CE. ICE es un diseño de subasta híbrido, ya que combina precios simples de artículos para impulsar las ofertas en las primeras rondas con WD combinatorio y pagos, una característica que comparte con el diseño de reloj-proxy de Ausubel et al. [1] para subastas unilaterales. Adoptamos una variación de la regla de actividad de preferencia revelada en las subastas de proxy de reloj. El lenguaje de subasta comparte algunos elementos estructurales con el lenguaje LGB de Boutilier y Hoos [7], pero tiene semántica muy diferente. Rothkopf et al. [27] también describen un lenguaje de oferta basado en árboles restringido. En LGB, la semántica es la de la lógica proposicional, con los mismos elementos en una asignación capaces de satisfacer un árbol en múltiples lugares. Aunque esto puede hacer que LGB sea especialmente conciso en algunos contextos, la semántica que proponemos parece proporcionar una utilidad local, de modo que el valor de un componente en un árbol pueda ser comprendido de forma independiente al resto del árbol. La idea de capturar la estructura de nuestro lenguaje de oferta de manera explícita dentro de una formulación de programación entera mixta sigue los desarrollos en Boutilier [6]. 3. PRELIMINARES En nuestro modelo, consideramos un conjunto de bienes, indexados {1, . . . , m} y un conjunto de postores, indexados {1, . . . , n}. La asignación inicial de bienes se denota como x0 = (x0 1, . . . , x0 n), donde x0 i = (x0 i1, . . . , x0 im) y x0 ij ≥ 0 para el bien j indicando el número de unidades del bien j que posee el postor i. Un intercambio λ = (λ1, . . . , λn) denota el cambio en la asignación, con λi = (λi1, . . . , λim) donde λij ∈ es el cambio en el número de unidades del ítem j para el postor i. Entonces, la asignación final es x1 = x0 + λ. Cada postor tiene un valor vi(λi) ∈ ¡ para una transacción λi. Este valor puede ser positivo o negativo, y representa el cambio en el valor entre la asignación final x0 i +λi y la asignación inicial x0 i. La utilidad es cuasi-lineal, con ui(λi, p) = vi(λi)−p para el intercambio λi y el pago p ∈ ¡. El precio p puede ser negativo, lo que indica que el postor recibe un pago por la transacción. Utilizamos el término \"pago\" de manera intercambiable con \"utilidad\". Nuestro objetivo en el diseño de ICE es implementar el comercio eficiente. El intercambio eficiente, λ∗, maximiza el aumento total de valor entre los postores. Definición 1 (Comercio eficiente). El intercambio eficiente λ∗ resuelve max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Las restricciones (1) aseguran que ningún agente venda más artículos de los que tiene en su asignación inicial. Las restricciones (2) permiten la disposición gratuita y permiten que los intercambios factibles vendan más artículos de los que se compran (pero no al revés). Posteriormente, adoptamos Feas(x0) para denotar el conjunto de intercambios factibles, dados estos límites y una asignación inicial x0 = (x0 1, . . . , x0 n). 3.1 Ejemplos Prácticos En esta sección, proporcionamos tres ejemplos simples de instancias que utilizaremos para ilustrar varios componentes del intercambio. Todos los tres ejemplos tienen solo un vendedor, pero esto es puramente ilustrativo. Ejemplo 1. Un vendedor y un comprador, dos bienes {A, B}, con el vendedor teniendo una asignación inicial de AB. Cambios en los valores de los intercambios: vendedor comprador Y (−A, −B) Y (+A, +B) -10 +20 El Y indica que tanto el comprador como el vendedor solo están interesados en intercambiar ambos bienes como un paquete. Aquí, el intercambio eficiente (que maximiza el valor) es para el vendedor vender AB al comprador, denotado como λ∗ = ([−1, −1], [+1, +1]). Ejemplo 2. Un vendedor y cuatro compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de las transacciones: vendedor comprador1 comprador 2 comprador 3 comprador 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 El OR indica que el vendedor está dispuesto a vender cualquier cantidad de bienes. El XOR indica que los compradores 2 y 4 están dispuestos a comprar como máximo uno de los dos bienes en los que están interesados. El comercio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD al comprador 3, denotado λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR Ejemplo 1: Ejemplo 3: 2,2 +C +D COMPRADOR 2 2,2 +A +B COMPRADOR 1 +11 +84,4 -B VENDEDOR -A -C -D Ejemplo 2: 1,1 +A +B COMPRADOR 2 2,2 +A +B COMPRADOR 1 +6 +40,4 -B VENDEDOR -C -D-A 1,1 +C +D COMPRADOR 4 2,2 +C +D +3 +2 COMPRADOR 3 -18 Figura 2: Ejemplo de Árboles de Ofertas. Ejemplo 3. Un vendedor y dos compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de los intercambios: vendedor comprador1 comprador 2 Y (−A, −B, −C, −D) Y (+A, +B) Y (+C, +D) -18 +11 +8 El intercambio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD vaya al comprador 2, denotado por λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4. Un DISEÑO DE INTERCAMBIO DE UNA SOLA VEZ La descripción de ICE se divide en dos secciones: una sola vez (oferta sellada) e iterativa. En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a compradores y vendedores, y para extenderse y capturar ofertas de compradores y vendedores mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas. Las ofertas se expresan como árboles de ofertas anotados, y definen el valor de un oferente para todos los intercambios posibles. El lenguaje define cambios en los valores de las transacciones, con hojas anotadas con los artículos intercambiados y nodos anotados con cambios en los valores (ya sea positivos o negativos). La característica principal es que tiene un operador lógico de intervalo general en los nodos internos, y que define una semántica cuidadosa para propagar valores dentro del árbol. Ilustramos el lenguaje en cada uno de los Ejemplos 1-3 en la Figura 2. El lenguaje tiene una estructura de árbol, con operaciones en elementos definidos en las hojas y valores anotados en nodos y hojas. Los nodos tienen valores de cero donde no se indica ningún valor. Los nodos internos también están etiquetados con rangos de intervalo-escoge (IC). Dada una transacción, la semántica del lenguaje define qué nodos en el árbol pueden ser satisfechos o activados. Primero, si un niño está encendido, entonces su padre también debe estar encendido. Segundo, si un nodo padre está encendido, entonces el número de hijos que están encendidos debe estar dentro del rango de IC en el nodo padre. Finalmente, las hojas en las que el postor está comprando artículos solo pueden estar activas si los artículos se proporcionan en el intercambio. Por ejemplo, en el Ejemplo 2 podemos considerar el comercio eficiente, y observar que en este comercio todos los nodos en los árboles de los compradores 1 y 3 (y también el vendedor), pero ninguno de los nodos en los árboles de los compradores 2 y 4, pueden estar encendidos. Por otro lado, en 251 el intercambio en el que A va al comprador 2 y D al comprador 4, entonces los nodos raíz y hojas apropiados pueden estar encendidos para los compradores 2 y 4, pero ningún nodo puede estar encendido para los compradores 1 y 3. Dado un intercambio, a menudo hay varias formas de elegir el conjunto de nodos satisfechos. La semántica del lenguaje requiere que se activen los nodos que maximicen el valor sumado entre los nodos satisfechos. Considera el árbol de oferta Ti del ofertante i. Esto define nodos β ∈ Ti, de los cuales algunos son hojas, Leaf (i) ⊆ Ti. Deje que Child(β) ⊆ Ti denote los hijos de un nodo β (que no es en sí mismo una hoja). Todos los nodos excepto las hojas están etiquetados con el operador de intervalo-escoger [IC x i (β), ICy i (β)]. Cada nodo también está etiquetado con un valor, viβ ∈ ¡. Cada hoja β está etiquetada con un intercambio, qiβ ∈ m (es decir, las hojas pueden definir un intercambio agrupado en más de un tipo de artículo). Dado un intercambio λi al postor i, los operadores de elección de intervalos y los intercambios en las hojas definen qué nodos pueden ser satisfechos. A menudo habrá una elección. Las corbatas se rompen para maximizar el valor. Que satiβ ∈ {0, 1} denote si el nodo β está satisfecho. La solución sati es válida dado el árbol Ti y el intercambio λi, escrita sati ∈ válido(Ti, λi), si y solo si: ¢ β∈Hoja (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Hijo(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Hoja (i) (5) En otras palabras, un conjunto de hojas solo puede considerarse satisfecho dado el intercambio λi si el aumento total en cantidad sumado en todas esas hojas está cubierto por el intercambio, para todos los bienes (Eq. 4). Esto funciona tanto para vendedores como para compradores: para los vendedores, un intercambio es negativo y esto requiere que el número total de artículos indicados como vendidos en el árbol sea al menos igual al número total vendido según lo definido en el intercambio. También necesitamos la propagación ascendente: cada vez que un nodo que no sea la raíz esté satisfecho, su padre también debe estar satisfecho (por β ∈Child(β) satiβ ≤ ICy i (β)satiβ en la Ecuación 5). Finalmente, necesitamos la propagación hacia abajo: cada vez que un nodo interno se satisface, entonces el número apropiado de hijos también debe estar satisfecho (Ec. 5). El valor total del comercio λi, dado el árbol de ofertas Ti, se define como: vi(Ti, λi) = máximo sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) El lenguaje basado en árboles generaliza los lenguajes existentes. Por ejemplo: IC(2, 2) en un nodo con 2 hijos es equivalente a un operador AND; IC(1, 3) en un nodo con 3 hijos es equivalente a un operador OR; e IC(1, 1) en un nodo con 2 hijos es equivalente a un operador XOR. De manera similar, los lenguajes de oferta XOR/OR pueden ser expresados directamente como un árbol de oferta en nuestro lenguaje. La determinación del ganador Este apartado define el problema de determinación del ganador, el cual está formulado como un MIP y resuelto en nuestra implementación con un solucionador comercial. El solucionador utiliza búsqueda de ramificación y acotamiento con generación de cortes dinámicos y heurísticas de ramificación para resolver MIPs grandes en tiempos de ejecución económicamente factibles. El lenguaje OR* es el lenguaje OR con elementos ficticios para proporcionar estructura adicional. OR* se sabe que es expresivo y conciso. Sin embargo, no se sabe si OR* domina a XOR/OR en cuanto a concisión [23]. En la definición de la representación MIP, tenemos cuidado de evitar una enumeración basada en XOR de todos los paquetes. Una variación del problema de WD se reutiliza muchas veces dentro del intercambio, por ejemplo, para la generación de columnas en la fijación de precios y para verificar la preferencia revelada. Dado el conjunto de árboles de ofertas T = (T1, . . . , Tn) y la asignación inicial x0, la formulación mixta entera para WD es: WD(T, x0): max λ, sat ¢ i ¢ β ∈ Ti viβ · satiβ sujeto a (1), (2), satiβ ∈ {0, 1}, λij ∈ sati ∈ válido(Ti, λi), ∀i. Algunos bienes pueden quedar sin asignar porque se permite la disposición libre dentro de las reglas de liquidación de la determinación del ganador. Estos artículos pueden ser asignados de nuevo a los agentes que vendieron los artículos, es decir, para los cuales λij < 0. 4.3 Cálculo de Pagos Umbral La regla de <br>pago umbral</br> se basa en los pagos en el mecanismo de Vickrey-Clarke-Groves (VCG) [15], que en sí mismo es veraz y eficiente pero no satisface el equilibrio presupuestario. ",
            "candidates": [],
            "error": [
                [
                    "regla de pago umbral",
                    "regla de pago del Umbral",
                    "regla de pago del umbral",
                    "pago umbral",
                    "pago umbral"
                ]
            ]
        },
        "combinatorial exchange": {
            "translated_key": "intercambio combinatorio",
            "is_in_text": true,
            "original_annotated_sentences": [
                "ICE: An Iterative <br>combinatorial exchange</br> David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative <br>combinatorial exchange</br> (ICE).",
                "The exchange incorporates a tree-based bidding language that is concise and expressive for CEs.",
                "Bidders specify lower and upper bounds on their value for different trades.",
                "These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
                "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
                "A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "The exchange is fully implemented and in a validation phase.",
                "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
                "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
                "In a double auction (DA), multiple buyers and sellers trade units of an identical good [20].",
                "In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language.",
                "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
                "A <br>combinatorial exchange</br> (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling.",
                "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
                "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
                "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
                "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
                "This paper presents the first design for an iterative <br>combinatorial exchange</br> (ICE).",
                "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
                "The ICE design problem is multi-faceted and quite hard.",
                "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round.",
                "The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "The exchange has a number of interesting theoretical properties.",
                "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
                "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
                "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
                "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
                "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "The exchange is implemented in Java and is currently in validation.",
                "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
                "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
                "We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions.",
                "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based bidding language.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable.",
                "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
                "Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
                "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
                "An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade.",
                "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
                "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades.",
                "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
                "A revealed-preference activity rule [1] ensures progress across rounds.",
                "In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices.",
                "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
                "An outline of the ICE system flow of control is provided in Figure 1.",
                "We will return to this example later in the paper.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance).",
                "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round.",
                "At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29].",
                "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
                "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
                "The price generation methods that we use in ICE generalize the methods in these earlier papers.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule.",
                "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
                "We are not aware of any previous studies of iterative CEs.",
                "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
                "No dominant strategy mechanisms are known for the general CE problem.",
                "ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
                "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
                "The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
                "Rothkopf et al. [27] also describe a restricted tree-based bidding language.",
                "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
                "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
                "The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
                "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
                "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
                "A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
                "So, the final allocation is x1 = x0 + λ.",
                "Each bidder has a value vi(λi) ∈ ¡ for a trade λi.",
                "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
                "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ .",
                "Price p can be negative, indicating the bidder receives a payment for the trade.",
                "We use the term payoff interchangeably with utility.",
                "Our goal in the ICE design is to implement the efficient trade.",
                "The efficient trade, λ∗ , maximizes the total increase in value across bidders.",
                "Definition 1 (Efficient trade).",
                "The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
                "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
                "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
                "All three examples have only one seller, but this is purely illustrative.",
                "Example 1.",
                "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
                "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
                "Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
                "Example 2.",
                "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
                "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
                "The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
                "Example 3.",
                "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
                "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades.",
                "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
                "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
                "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
                "We illustrate the language on each of Examples 1-3 in Figure 2.",
                "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
                "The nodes have zero values where no value is indicated.",
                "Internal nodes are also labeled with interval-choose (IC) ranges.",
                "Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
                "First, if a child is on then its parent must be on.",
                "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
                "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade.",
                "For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
                "On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
                "Given a trade there is often a number of ways to choose the set of satisfied nodes.",
                "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
                "Consider bid tree Ti from bidder i.",
                "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
                "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
                "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
                "Every node is also labeled with a value, viβ ∈ ¡ .",
                "Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.)",
                "Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
                "There will often be a choice.",
                "Ties are broken to maximize value.",
                "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
                "Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
                "This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade.",
                "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
                "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
                "The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
                "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
                "Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
                "OR* is known to be expressive and concise.",
                "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
                "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
                "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
                "In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆vcg,i = V ∗ − V−i the VCG discount.",
                "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
                "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome.",
                "Definition 2.",
                "The Threshold payment scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance).",
                "Example 4.",
                "In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
                "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
                "This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes.",
                "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
                "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
                "THE ICE DESIGN We are now ready to introduce the iterative <br>combinatorial exchange</br> (ICE) design.",
                "Several new components are introduced, relative to the design for the one-shot exchange.",
                "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
                "The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations.",
                "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
                "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v).",
                "Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
                "These take the place of the exact value viβ defined in Section 4.1.",
                "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
                "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
                "The following lemma is useful: Lemma 1.",
                "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
                "Proof.",
                "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
                "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
                "But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
                "Given these provisional prices, the price on trade λi for bidder i is pt (λi) =   j≤m pt j · λij.",
                "Definition 3 (CE prices).",
                "Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
                "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
                "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
                "II: Fairness.",
                "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
                "III: Balance.",
                "Third, we break ties to prefer prices that minimize the maximal price across all items.",
                "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
                "In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades.",
                "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
                "Each step is described in detail below.",
                "I: Accuracy.",
                "We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages.",
                "Let λt denote the current provisional trade and suppose the provisional valuation is vα .",
                "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
                "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
                "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.)",
                "Example 5.",
                "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
                "The efficient trade allocates AB to buyer 1 and CD to buyer 3.",
                "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
                "But, (9) has an exponential number of constraints (Eq. 10).",
                "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
                "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
                "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
                "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
                "In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices.",
                "Let ˆλi denote the solution to R-WD(i).",
                "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
                "Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
                "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
                "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
                "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
                "This can be exactly achieved in pricing with pA + pB = 14.",
                "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
                "The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the VCG payoff (at vα ).",
                "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
                "III: Balance.",
                "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items.",
                "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
                "Finally, balance sets p(A) = p(B) = 7.",
                "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
                "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
                "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
                "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
                "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
                "Dunford et al. [12] prefer to smooth prices across rounds.",
                "Comment 1: Lexicographical Refinement.",
                "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
                "For instance, in ACC we successively minimize the maximal error across all bidders.",
                "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
                "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
                "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
                "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL.",
                "Comment 2: Computation.",
                "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
                "Thus, the computational effort in constraint generation is re-used.",
                "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
                "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
                "This avoids later infeasibility issues.",
                "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
                "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
                "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
                "We adopt a simple revealed-preference (RP) activity rule.",
                "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
                "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
                "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
                "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
                "Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices.",
                "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
                "We pin these down and then minimize the error to bidders 3 and 4.",
                "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices.",
                "Consider the following examples: Example 7.",
                "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
                "Example 8.",
                "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
                "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
                "Definition 4.",
                "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
                "First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
                "Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP.",
                "To understand the importance of this tiebreaking rule consider Example 7.",
                "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
                "Notice that +B is a counterexample to +A, but not the other way round.",
                "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i .",
                "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v.",
                "We call trade U∗ i the witness trade.",
                "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
                "Example 8 helps to illustrate this.",
                "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
                "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
                "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
                "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
                "Proposition 1.",
                "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
                "Proof.",
                "For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
                "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes.",
                "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
                "For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i).",
                "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
                "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
                "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
                "Proceed by case analysis.",
                "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
                "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
                "Case b): two or more solutions to RP1(i) have uncertain value.",
                "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
                "This is by RP.",
                "Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
                "Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades.",
                "Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
                "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
                "Failure to meet the activity rule must have some consequence.",
                "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices.",
                "See 7 for an additional discussion.",
                "We also provide guidance to help a bidder meet the RP rule.",
                "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
                "Lemma 2.",
                "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
                "Proof.",
                "Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
                "Thus, the RP condition will continue to fail.",
                "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
                "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
                "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
                "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
                "This is an elegant feedback mechanism because it is adaptive.",
                "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
                "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
                "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
                "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
                "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
                "Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
                "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v).",
                "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
                "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
                "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
                "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
                "Termination Condition.",
                "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade.",
                "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
                "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm.",
                "Note that γthresh is defined for payments and not payoffs.",
                "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments.",
                "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
                "Definition 5 (termination).",
                "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
                "At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments.",
                "Example 9.",
                "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
                "First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0.",
                "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
                "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
                "For CUTOFFthresh < 2/5 the exchange would remain open.",
                "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
                "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the tree-based bidding language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
                "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
                "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
                "A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy.",
                "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
                "These engines drive the appropriate MIP/LP builders.",
                "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
                "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
                "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
                "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
                "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
                "DISCUSSION The bidding language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
                "This proved especially challenging.",
                "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
                "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
                "The total of 6502 includes 184 for instrumentation (not shown in the table).",
                "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
                "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
                "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
                "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
                "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
                "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values.",
                "Upper and lower bound information also provides guidance about when to terminate.",
                "Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information.",
                "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
                "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
                "This is worthy of experimental investigation.",
                "Moreover, the use of price and RP activity provides additional guarantees.",
                "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process.",
                "The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
                "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
                "The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees.",
                "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
                "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
                "Some strategic aspects of our ICE design deserve comment, and further study.",
                "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
                "We must be careful, though.",
                "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
                "Also, no consideration has been given in this work to collusion by bidders.",
                "This is an issue that deserves some attention in future work. 8.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative <br>combinatorial exchange</br>.",
                "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
                "The exchange is fully implemented in Java and is in a validation phase.",
                "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
                "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
                "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
                "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
                "This work is supported in part by NSF grant IIS-0238147. 9.",
                "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
                "The clock-proxy auction: A practical combinatorial auction design.",
                "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
                "Mechanisms for a spatially distributed market.",
                "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
                "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
                "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
                "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
                "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
                "Introduction to Linear Optimization.",
                "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
                "A pomdp formulation of preference elicitation problems.",
                "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
                "Bidding languages for combinatorial auctions.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
                "Preference elicitation in combinatorial auctions.",
                "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
                "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
                "Combinatorial Auctions.",
                "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
                "On ascending Vickrey auctions for heterogeneous objects.",
                "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
                "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
                "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
                "Chase, B. Chun, S. Schwab, and A. Vahdat.",
                "Sharp: an architecture for secure resource peering.",
                "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
                "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In Proc. 3rd Int.",
                "Joint.",
                "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [16] D. Krych.",
                "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
                "A new and improved design for multi-object iterative auctions.",
                "Management Science, 2004.",
                "To appear. [18] E. Kwerel and J. Williams.",
                "A proposal for a rapid transition to market allocation of spectrum.",
                "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proc.",
                "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
                "A dominant strategy double auction.",
                "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
                "Putting auction theory to work: The simultaneous ascending auction.",
                "J.Pol.",
                "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
                "Iterative combinatorial auctions: Theory and practice.",
                "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
                "A combinatorial mechanism for airport time slot allocation.",
                "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
            ],
            "original_annotated_samples": [
                "ICE: An Iterative <br>combinatorial exchange</br> David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative <br>combinatorial exchange</br> (ICE).",
                "A <br>combinatorial exchange</br> (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
                "This paper presents the first design for an iterative <br>combinatorial exchange</br> (ICE).",
                "THE ICE DESIGN We are now ready to introduce the iterative <br>combinatorial exchange</br> (ICE) design.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative <br>combinatorial exchange</br>."
            ],
            "translated_annotated_samples": [
                "Presentamos el primer diseño para un <br>intercambio combinatorio</br> iterativo (ICE).",
                "Un <br>intercambio combinatorio</br> (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos.",
                "Este documento presenta el primer diseño para un <br>intercambio combinatorio</br> iterativo (ICE).",
                "El diseño ICE Estamos listos para presentar el diseño de <br>intercambio combinatorio</br> iterativo (ICE).",
                "CONCLUSIONES En este trabajo diseñamos y prototipamos un <br>intercambio combinatorio</br> iterativo escalable y altamente expresivo."
            ],
            "translated_text": "Presentamos el primer diseño para un <br>intercambio combinatorio</br> iterativo (ICE). El intercambio incorpora un lenguaje de oferta basado en árboles que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20]. En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un <br>intercambio combinatorio</br> (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos. Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un <br>intercambio combinatorio</br> iterativo (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda. La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de oferta basado en árboles expresivo y conciso. El lenguaje describe valores para intercambios, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el intercambio sea aceptable. El lenguaje permite a los postores expresar límites superiores e inferiores en el valor, los cuales pueden ser ajustados en cada ronda. • Determinación del ganador. La determinación del ganador (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación. Comparar la solución en los valores superiores e inferiores permite tomar una decisión sobre la terminación, con el progreso en rondas intermedias impulsado por una valoración intermedia y los valores inferiores adoptados al finalizar. • Pagos. Los pagos se calculan utilizando la regla de pago del umbral [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de precios. Se calcula un precio aproximado para cada artículo en el intercambio en cada ronda, en función de las valoraciones intermedias y el intercambio provisional. Los precios se optimizan para aproximar los precios de equilibrio competitivo, y luego se optimizan aún más para aproximar mejor los pagos del umbral actual con los lazos restantes rotos para favorecer los precios equilibrados entre diferentes artículos. Al calcular los precios, adoptamos los métodos de generación de restricciones para explotar la estructura del lenguaje de oferta y evitar enumerar todos los intercambios factibles. El subproblema para generar nuevas restricciones es una variación del problema WD. • Regla de actividad. Una regla de actividad de preferencia revelada [1] garantiza progreso a lo largo de las rondas. Para permanecer activo, un oferente debe ajustar los límites para que haya suficiente información para definir un intercambio que maximice el excedente a los precios actuales. Otra variación del problema de WD se formula, tanto para verificar que se cumple la regla de actividad como para proporcionar retroalimentación a un postor para explicar cómo cumplir la regla. Se proporciona un esquema del flujo de control del sistema ICE en la Figura 1. Volveremos a este ejemplo más adelante en el documento. Por ahora, simplemente observa en este ejemplo de dos agentes que los agentes establecen límites inferiores y superiores que son verificados en la regla de actividad, y luego pasados a la determinación del ganador (WD), y luego a través de tres etapas de fijación de precios (precisión, equidad, equilibrio). Al pasar la regla de cierre (en la que se verifican los parámetros αeff y αthresh para la convergencia del comercio y los pagos), el intercambio pasa a una última y definitiva ronda. Al final de esta ronda, el intercambio y los pagos finalmente se determinan, basados en las valoraciones más bajas. 2.1 Trabajo Relacionado En la literatura se conocen muchos CAs de un solo lado con precios ascendentes [10, 25, 29]. También se han propuesto enfoques de elicitación directa para los AC unilaterales en los que los agentes responden a preguntas explícitas sobre sus valoraciones [8, 14, 19]. Un número de CAs ascendentes están diseñados para trabajar con precios simples en artículos [12, 17]. Los métodos de generación de precios que utilizamos en ICE generalizan los métodos de estos artículos anteriores. Parkes et al. [24] estudiaron intercambios combinatorios de oferta sellada e introdujeron la regla de pago umbral. Posteriormente, Krych [16] demostró experimentalmente que la regla del Umbral promueve asignaciones eficientes. No tenemos conocimiento de ningún estudio previo sobre CEs iterativos. Las estrategias dominantes DAs son conocidas por la demanda unitaria [20] y también por agentes de mente única [2]. No se conocen mecanismos de estrategia dominante para el problema general de la CE. ICE es un diseño de subasta híbrido, ya que combina precios simples de artículos para impulsar las ofertas en las primeras rondas con WD combinatorio y pagos, una característica que comparte con el diseño de reloj-proxy de Ausubel et al. [1] para subastas unilaterales. Adoptamos una variación de la regla de actividad de preferencia revelada en las subastas de proxy de reloj. El lenguaje de subasta comparte algunos elementos estructurales con el lenguaje LGB de Boutilier y Hoos [7], pero tiene semántica muy diferente. Rothkopf et al. [27] también describen un lenguaje de oferta basado en árboles restringido. En LGB, la semántica es la de la lógica proposicional, con los mismos elementos en una asignación capaces de satisfacer un árbol en múltiples lugares. Aunque esto puede hacer que LGB sea especialmente conciso en algunos contextos, la semántica que proponemos parece proporcionar una utilidad local, de modo que el valor de un componente en un árbol pueda ser comprendido de forma independiente al resto del árbol. La idea de capturar la estructura de nuestro lenguaje de oferta de manera explícita dentro de una formulación de programación entera mixta sigue los desarrollos en Boutilier [6]. 3. PRELIMINARES En nuestro modelo, consideramos un conjunto de bienes, indexados {1, . . . , m} y un conjunto de postores, indexados {1, . . . , n}. La asignación inicial de bienes se denota como x0 = (x0 1, . . . , x0 n), donde x0 i = (x0 i1, . . . , x0 im) y x0 ij ≥ 0 para el bien j indicando el número de unidades del bien j que posee el postor i. Un intercambio λ = (λ1, . . . , λn) denota el cambio en la asignación, con λi = (λi1, . . . , λim) donde λij ∈ es el cambio en el número de unidades del ítem j para el postor i. Entonces, la asignación final es x1 = x0 + λ. Cada postor tiene un valor vi(λi) ∈ ¡ para una transacción λi. Este valor puede ser positivo o negativo, y representa el cambio en el valor entre la asignación final x0 i +λi y la asignación inicial x0 i. La utilidad es cuasi-lineal, con ui(λi, p) = vi(λi)−p para el intercambio λi y el pago p ∈ ¡. El precio p puede ser negativo, lo que indica que el postor recibe un pago por la transacción. Utilizamos el término \"pago\" de manera intercambiable con \"utilidad\". Nuestro objetivo en el diseño de ICE es implementar el comercio eficiente. El intercambio eficiente, λ∗, maximiza el aumento total de valor entre los postores. Definición 1 (Comercio eficiente). El intercambio eficiente λ∗ resuelve max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Las restricciones (1) aseguran que ningún agente venda más artículos de los que tiene en su asignación inicial. Las restricciones (2) permiten la disposición gratuita y permiten que los intercambios factibles vendan más artículos de los que se compran (pero no al revés). Posteriormente, adoptamos Feas(x0) para denotar el conjunto de intercambios factibles, dados estos límites y una asignación inicial x0 = (x0 1, . . . , x0 n). 3.1 Ejemplos Prácticos En esta sección, proporcionamos tres ejemplos simples de instancias que utilizaremos para ilustrar varios componentes del intercambio. Todos los tres ejemplos tienen solo un vendedor, pero esto es puramente ilustrativo. Ejemplo 1. Un vendedor y un comprador, dos bienes {A, B}, con el vendedor teniendo una asignación inicial de AB. Cambios en los valores de los intercambios: vendedor comprador Y (−A, −B) Y (+A, +B) -10 +20 El Y indica que tanto el comprador como el vendedor solo están interesados en intercambiar ambos bienes como un paquete. Aquí, el intercambio eficiente (que maximiza el valor) es para el vendedor vender AB al comprador, denotado como λ∗ = ([−1, −1], [+1, +1]). Ejemplo 2. Un vendedor y cuatro compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de las transacciones: vendedor comprador1 comprador 2 comprador 3 comprador 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 El OR indica que el vendedor está dispuesto a vender cualquier cantidad de bienes. El XOR indica que los compradores 2 y 4 están dispuestos a comprar como máximo uno de los dos bienes en los que están interesados. El comercio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD al comprador 3, denotado λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR Ejemplo 1: Ejemplo 3: 2,2 +C +D COMPRADOR 2 2,2 +A +B COMPRADOR 1 +11 +84,4 -B VENDEDOR -A -C -D Ejemplo 2: 1,1 +A +B COMPRADOR 2 2,2 +A +B COMPRADOR 1 +6 +40,4 -B VENDEDOR -C -D-A 1,1 +C +D COMPRADOR 4 2,2 +C +D +3 +2 COMPRADOR 3 -18 Figura 2: Ejemplo de Árboles de Ofertas. Ejemplo 3. Un vendedor y dos compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de los intercambios: vendedor comprador1 comprador 2 Y (−A, −B, −C, −D) Y (+A, +B) Y (+C, +D) -18 +11 +8 El intercambio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD vaya al comprador 2, denotado por λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4. Un DISEÑO DE INTERCAMBIO DE UNA SOLA VEZ La descripción de ICE se divide en dos secciones: una sola vez (oferta sellada) e iterativa. En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a compradores y vendedores, y para extenderse y capturar ofertas de compradores y vendedores mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas. Las ofertas se expresan como árboles de ofertas anotados, y definen el valor de un oferente para todos los intercambios posibles. El lenguaje define cambios en los valores de las transacciones, con hojas anotadas con los artículos intercambiados y nodos anotados con cambios en los valores (ya sea positivos o negativos). La característica principal es que tiene un operador lógico de intervalo general en los nodos internos, y que define una semántica cuidadosa para propagar valores dentro del árbol. Ilustramos el lenguaje en cada uno de los Ejemplos 1-3 en la Figura 2. El lenguaje tiene una estructura de árbol, con operaciones en elementos definidos en las hojas y valores anotados en nodos y hojas. Los nodos tienen valores de cero donde no se indica ningún valor. Los nodos internos también están etiquetados con rangos de intervalo-escoge (IC). Dada una transacción, la semántica del lenguaje define qué nodos en el árbol pueden ser satisfechos o activados. Primero, si un niño está encendido, entonces su padre también debe estar encendido. Segundo, si un nodo padre está encendido, entonces el número de hijos que están encendidos debe estar dentro del rango de IC en el nodo padre. Finalmente, las hojas en las que el postor está comprando artículos solo pueden estar activas si los artículos se proporcionan en el intercambio. Por ejemplo, en el Ejemplo 2 podemos considerar el comercio eficiente, y observar que en este comercio todos los nodos en los árboles de los compradores 1 y 3 (y también el vendedor), pero ninguno de los nodos en los árboles de los compradores 2 y 4, pueden estar encendidos. Por otro lado, en 251 el intercambio en el que A va al comprador 2 y D al comprador 4, entonces los nodos raíz y hojas apropiados pueden estar encendidos para los compradores 2 y 4, pero ningún nodo puede estar encendido para los compradores 1 y 3. Dado un intercambio, a menudo hay varias formas de elegir el conjunto de nodos satisfechos. La semántica del lenguaje requiere que se activen los nodos que maximicen el valor sumado entre los nodos satisfechos. Considera el árbol de oferta Ti del ofertante i. Esto define nodos β ∈ Ti, de los cuales algunos son hojas, Leaf (i) ⊆ Ti. Deje que Child(β) ⊆ Ti denote los hijos de un nodo β (que no es en sí mismo una hoja). Todos los nodos excepto las hojas están etiquetados con el operador de intervalo-escoger [IC x i (β), ICy i (β)]. Cada nodo también está etiquetado con un valor, viβ ∈ ¡. Cada hoja β está etiquetada con un intercambio, qiβ ∈ m (es decir, las hojas pueden definir un intercambio agrupado en más de un tipo de artículo). Dado un intercambio λi al postor i, los operadores de elección de intervalos y los intercambios en las hojas definen qué nodos pueden ser satisfechos. A menudo habrá una elección. Las corbatas se rompen para maximizar el valor. Que satiβ ∈ {0, 1} denote si el nodo β está satisfecho. La solución sati es válida dado el árbol Ti y el intercambio λi, escrita sati ∈ válido(Ti, λi), si y solo si: ¢ β∈Hoja (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Hijo(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Hoja (i) (5) En otras palabras, un conjunto de hojas solo puede considerarse satisfecho dado el intercambio λi si el aumento total en cantidad sumado en todas esas hojas está cubierto por el intercambio, para todos los bienes (Eq. 4). Esto funciona tanto para vendedores como para compradores: para los vendedores, un intercambio es negativo y esto requiere que el número total de artículos indicados como vendidos en el árbol sea al menos igual al número total vendido según lo definido en el intercambio. También necesitamos la propagación ascendente: cada vez que un nodo que no sea la raíz esté satisfecho, su padre también debe estar satisfecho (por β ∈Child(β) satiβ ≤ ICy i (β)satiβ en la Ecuación 5). Finalmente, necesitamos la propagación hacia abajo: cada vez que un nodo interno se satisface, entonces el número apropiado de hijos también debe estar satisfecho (Ec. 5). El valor total del comercio λi, dado el árbol de ofertas Ti, se define como: vi(Ti, λi) = máximo sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) El lenguaje basado en árboles generaliza los lenguajes existentes. Por ejemplo: IC(2, 2) en un nodo con 2 hijos es equivalente a un operador AND; IC(1, 3) en un nodo con 3 hijos es equivalente a un operador OR; e IC(1, 1) en un nodo con 2 hijos es equivalente a un operador XOR. De manera similar, los lenguajes de oferta XOR/OR pueden ser expresados directamente como un árbol de oferta en nuestro lenguaje. La determinación del ganador Este apartado define el problema de determinación del ganador, el cual está formulado como un MIP y resuelto en nuestra implementación con un solucionador comercial. El solucionador utiliza búsqueda de ramificación y acotamiento con generación de cortes dinámicos y heurísticas de ramificación para resolver MIPs grandes en tiempos de ejecución económicamente factibles. El lenguaje OR* es el lenguaje OR con elementos ficticios para proporcionar estructura adicional. OR* se sabe que es expresivo y conciso. Sin embargo, no se sabe si OR* domina a XOR/OR en cuanto a concisión [23]. En la definición de la representación MIP, tenemos cuidado de evitar una enumeración basada en XOR de todos los paquetes. Una variación del problema de WD se reutiliza muchas veces dentro del intercambio, por ejemplo, para la generación de columnas en la fijación de precios y para verificar la preferencia revelada. Dado el conjunto de árboles de ofertas T = (T1, . . . , Tn) y la asignación inicial x0, la formulación mixta entera para WD es: WD(T, x0): max λ, sat ¢ i ¢ β ∈ Ti viβ · satiβ sujeto a (1), (2), satiβ ∈ {0, 1}, λij ∈ sati ∈ válido(Ti, λi), ∀i. Algunos bienes pueden quedar sin asignar porque se permite la disposición libre dentro de las reglas de liquidación de la determinación del ganador. Estos artículos pueden ser asignados de nuevo a los agentes que vendieron los artículos, es decir, para los cuales λij < 0. 4.3 Cálculo de Pagos Umbral La regla de pago umbral se basa en los pagos en el mecanismo de Vickrey-Clarke-Groves (VCG) [15], que en sí mismo es veraz y eficiente pero no satisface el equilibrio presupuestario. El equilibrio presupuestario requiere que los pagos totales al intercambio sean iguales a los pagos totales realizados por el intercambio. En VCG, el pago pagado por el agente i es pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) donde λ∗ es el intercambio eficiente, V ∗ es el valor reportado de este intercambio, y V−i es el valor reportado del intercambio eficiente que se implementaría sin el postor i. Llamamos a ∆vcg,i = V ∗ − V−i el descuento VCG. Por ejemplo, en el Ejemplo 1 pvcg,vendedor = −10 − (+10 − 0) = −20 y pvcg,comprador = +20 − (+10 − 0) = 10, y el intercambio se llevaría a cabo con un déficit presupuestario de −20 + 10 = −10. La regla de pago del umbral [24] determina pagos equilibrados presupuestarios para minimizar el error máximo entre todos los agentes respecto al resultado VCG. Definición 2. El esquema de pago de umbral implementa el intercambio eficiente λ∗ dado los ofertas, y establece los pagos pthresh,i = ˆvi(λ∗ i ) − ∆i, donde ∆ = (∆1, . . . , ∆n) se establece para minimizar maxi(∆vcg,i − ∆i) sujeto a ∆i ≤ ∆vcg,i e   i ∆i ≤ V ∗ (esto garantiza el equilibrio presupuestario). Ejemplo 4. En el Ejemplo 2, los descuentos de VCG son (9, 2, 0, 1, 0) para el vendedor y cuatro compradores respectivamente, los pagos de VCG son (−9, 4, 0, 2, 0) y el intercambio se realiza con un déficit de -3. En Threshold, los descuentos son (8, 1, 0, 0, 0) y los pagos son (−8, 5, 0, 3, 0). Esto minimiza el error en el peor de los casos para los descuentos VCG en todos los esquemas de pago equilibrados en presupuesto. Los pagos de umbral están diseñados para minimizar el incentivo máximo ex post para manipular. Krych [16] confirmó que Threshold promueve la eficiencia asignativa en el equilibrio de Bayes-Nash restringido y aproximado. 5. El diseño ICE Estamos listos para presentar el diseño de <br>intercambio combinatorio</br> iterativo (ICE). Se introducen varios componentes nuevos, en relación con el diseño para el intercambio único. En lugar de proporcionar valoraciones precisas, los postores pueden proporcionar valoraciones inferiores y superiores y revisar esta información de oferta en cada ronda. El intercambio proporciona retroalimentación basada en precios 252 para guiar a los postores en este proceso, y finaliza con un intercambio eficiente (o aproximadamente eficiente) con respecto a las valoraciones reportadas. En cada ronda t ∈ {0, 1, . . .} se utilizan los límites inferiores y superiores actuales, vt y vt, para definir un perfil de valoración provisional vα (la α-valoración), junto con un intercambio provisional λt y precios provisionales pt = (pt 1, . . . , pt m) en los artículos. La α-valoración es una combinación lineal de las valoraciones superiores e inferiores actuales, con αEFF ∈ [0, 1] elegido endógenamente en función de la cercanía del intercambio optimista (en v) y el intercambio pesimista (en v). Los precios pt se utilizan para informar una regla de actividad y avanzar hacia un comercio eficiente. 5.1 Valoraciones superiores e inferiores El lenguaje de la oferta se amplía para permitir que un oferente i informe un valor inferior y superior (viβ, viβ) en cada nodo. Estos ocupan el lugar del valor exacto viβ definido en la Sección 4.1. Basándonos en estas etiquetas, podemos definir las funciones de valoración vi(Ti, λi) y vi(Ti, λi), utilizando exactamente la misma semántica que en la Ecuación (6). Decimos que un árbol de ofertas está bien formado si viβ ≤ viβ para todos los nodos. El siguiente lema es útil: Lema 1. Dado un árbol bien formado, T, entonces vi(Ti, λi) ≤ vi(Ti, λi) para todos los intercambios. Prueba. Supongamos que existe algún λi para el cual vi(Ti, λi) > vi(Ti, λi). Entonces, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ. Sin embargo, esto es una contradicción porque el intercambio λ que define vi(Ti, λi) sigue siendo factible con límites superiores vi, y viβ ≥ viβ para todos los nodos β en un árbol bien formado. 5.2 Retroalimentación de precios En cada ronda, se determinan los precios de equilibrio competitivo aproximados (CE), pt = (pt 1, . . . , pt m). Dado estos precios provisionales, el precio en el intercambio λi para el postor i es pt (λi) = j≤m pt j · λij. Definición 3 (precios de la CE). Los precios p∗ son precios de equilibrio competitivo si el intercambio eficiente λ∗ está respaldado a precios p∗, de modo que para cada postor: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) Los precios de CE no siempre existirán y a menudo necesitaremos calcular precios aproximados [5]. Extendemos las ideas de Rassenti et al. [26], Kwasnica et al. [17] y Dunford et al. [12], y seleccionamos precios aproximados de la siguiente manera: I: Precisión. Primero, calculamos los precios que minimizan el error máximo en las restricciones de mejor respuesta de todos los postores. II: Equidad. Segundo, rompemos los empates para preferir precios que minimicen la desviación máxima de los pagos umbral entre todos los postores. III: Equilibrio. En tercer lugar, rompemos los empates para preferir precios que minimicen el precio máximo entre todos los artículos. En conjunto, estos pasos están diseñados para promover la informatividad de los precios en impulsar el progreso a lo largo de las rondas. Al calcular los precios, explicamos cómo calcular precios aproximados (o de otra manera) para lenguajes de oferta estructurados, sin enumerar todos los intercambios posibles. Para esto, adoptamos la generación de restricciones para manejar de manera eficiente un número exponencial de restricciones. Cada paso se describe detalladamente a continuación. Yo: Precisión. Adoptamos una definición de precisión de precio que generaliza las nociones adoptadas en trabajos anteriores para lenguajes de oferta no estructurados. Que λt denote el comercio provisional actual y suponga que la valoración provisional es vα. Para calcular precios de CE precisos, consideramos: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j. Este programa lineal (LP) está diseñado para encontrar precios que minimicen el error en el peor de los casos entre todos los agentes. De la definición de los precios de equilibrio competitivo (CE), se sigue que los precios de equilibrio competitivo tendrían δ = 0 como solución a (9), momento en el cual el intercambio λt i estaría en el conjunto de mejor respuesta de cada agente (con λt i = ∅, es decir, sin intercambio, para todos los agentes sin excedente para el intercambio a los precios). Ejemplo 5. Podemos ilustrar la formulación (9) en el Ejemplo 2, asumiendo para simplificar que vα = v (es decir, verdad). El comercio eficiente asigna AB al comprador 1 y CD al comprador 3. La precisión buscará los precios p(A), p(B), p(C) y p(D) para minimizar el δ ≥ 0 requerido para satisfacer las restricciones: p(A) + p(B) + p(C) + p(D) ≥ 0 (vendedor) p(A) + p(B) ≤ 6 + δ (comprador 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (comprador 2) p(C) + p(D) ≤ 3 (comprador 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (comprador 4) Una solución óptima requiere que p(A) = p(B) = 10/3, con δ = 2/3, y que p(C) y p(D) tomen valores como p(C) = p(D) = 3/2. Pero, (9) tiene un número exponencial de restricciones (Ec. 10). En lugar de resolverlo explícitamente, utilizamos la generación de restricciones [4] y generamos dinámicamente un subconjunto suficiente de restricciones. Que \\(i\\) denote un subconjunto manejable de todos los intercambios factibles posibles para el oferente \\(i\\). Entonces, una versión relajada de (9) (escrita ACC) se formula sustituyendo (10) con vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) donde   i es un conjunto de intercambios que son factibles para el postor i dado las otras ofertas. Fijando los precios p∗, luego resolvemos n subproblemas (uno para cada postor), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0), (12) para verificar si la solución (p∗, δ∗) a ACC es factible en el problema (9). En R-WD(i) el objetivo es determinar un intercambio más preferido para cada postor a estos precios. Que ˆλi denote la solución a R-WD(i). Verificar la condición: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) y si esta condición se cumple para todos los postores i, entonces la solución (p∗ , δ∗ ) es óptima para el problema (9). De lo contrario, se agrega el intercambio ˆλi a i para todos los postores i para los cuales esta restricción se viola en 253 y volvemos a resolver el LP con el nuevo conjunto de restricciones. II: Equidad. Segundo, rompemos los empates restantes para preferir precios justos: eligiendo precios que minimicen el error en el peor de los casos con respecto a los pagos umbral (es decir, la utilidad para los postores con pagos umbral), pero sin elegir precios que sean menos precisos. Ejemplo 6. Por ejemplo, la precisión en el Ejemplo 1 (representado en la Figura 1) requiere que 12 ≤ pA + pB ≤ 16 (para vα = v). En estas valoraciones, los pagos umbral serían de 2 para tanto el vendedor como el comprador. Esto se puede lograr exactamente en la fijación de precios con pA + pB = 14. El método de desempate de equidad se formula como el siguiente LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima, de ACC. El objetivo aquí es el mismo que en la regla de pago del umbral (ver Sección 4.3): minimizar el error máximo entre el pago del postor (en vα) para el intercambio provisional y el pago VCG (en vα). El problema FAIR también se resuelve mediante la generación de restricciones, utilizando R-WD(i) para agregar restricciones adicionales violadas según sea necesario. III: Equilibrio. En tercer lugar, rompemos los empates restantes para preferir precios equilibrados: eligiendo precios que minimicen el precio máximo entre todos los artículos. Volviendo de nuevo al Ejemplo 1, representado en la Figura 1, vemos que la precisión y la equidad requieren que p(A) + p(B) = 14. Finalmente, el conjunto de equilibrio establece que p(A) = p(B) = 7. El equilibrio está justificado cuando, manteniendo todo lo demás igual, los elementos son más propensos a tener valores similares que diferentes. El LP para el equilibrio se formula de la siguiente manera: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima de ACC y π∗ representa el error en la solución óptima de FAIR. La generación de restricciones también se utiliza para resolver BAL, generando nuevos intercambios para i según sea necesario. El problema R-WD(i) es una especialización del problema WD, en el que el objetivo es maximizar el pago de un único postor, en lugar del valor total entre todos los postores. Se resuelve como un MIP, al reescribir el objetivo en WD(T, x0) como max{viβ · satiβ − j p∗ j · λij} para el agente i. Por lo tanto, la estructura del lenguaje del árbol de ofertas se explota para generar nuevas restricciones, ya que esto se resuelve como un MIP conciso. Los otros postores se mantienen en el MIP (pero no aparecen en el objetivo) y se utilizan para definir el espacio de intercambios factibles. Los métodos de Dunford et al. [12], que utilizan un enfoque de núcleo, también están estrechamente relacionados. El uso del equilibrio fue defendido por Kwasnica et al. [17]. Dunford et al. [12] prefieren suavizar los precios a lo largo de las rondas. Comentario 1: Refinamiento lexicográfico. Para los tres subproblemas también realizamos un refinamiento lexicográfico (con respecto a los postores en ACC y FAIR, y con respecto a los bienes en BAL). Por ejemplo, en ACC minimizamos sucesivamente el error máximo entre todos los postores. Dada una solución inicial, primero identificamos el error en todos los postores para quienes una restricción (11) está vinculante. Para dicho postor i, la restricción se reemplaza por vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) y el error para el postor i ya no aparece explícitamente en el objetivo. ACC se vuelve a resolver y avanza al minimizar aún más el error máximo entre todos los postores que aún no han sido identificados. Esto continúa, fijando a cualquier nuevo postor para quien una de las restricciones (11) sea vinculante, hasta que el error esté optimizado lexicográficamente para todos los postores. El mismo proceso exacto se repite para FAIR y BAL, con los postores fijados y las restricciones (15) reemplazadas por π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (donde π∗ i es el objetivo actual) en FAIR, y los artículos fijados y las restricciones (18) reemplazadas por p∗ j ≥ pj (donde p∗ j representa el objetivo para el precio máximo en ese artículo) en BAL. Comentario 2: Computación. Todos los límites en i se mantienen, y este conjunto crece en todas las etapas y en todas las rondas del intercambio. Por lo tanto, el esfuerzo computacional en la generación de restricciones se reutiliza. En la implementación, nos aseguramos de abordar una serie de problemas que surgen debido a problemas de punto flotante. Preferimos pecar de conservadores al determinar si agregar o no otra restricción al realizar la verificación (13). Esto evita problemas de inviabilidad posteriores. Además, al fijar a los postores con el fin de refinar lexicográficamente, relajamos las restricciones asociadas con un pequeño > 0 en el lado derecho. 5.3 Reglas de Actividad de Preferencia Revelada El papel de las reglas de actividad en la subasta es garantizar tanto la consistencia como el progreso en las rondas [21]. La consistencia en nuestro intercambio requiere que los oferentes ajusten los límites a medida que avanza el intercambio. Las reglas de la actividad garantizan que los postores estén activos durante las primeras rondas y promueven una elicitación útil a lo largo del intercambio. Adoptamos una regla de actividad de preferencia revelada (RP) simple. La idea se basa vagamente en la regla de RP en Ausubel et al. [1], donde se utiliza para los AC unilaterales. La motivación es requerir más que simplemente consistencia: necesitamos que los oferentes proporcionen suficiente información para que el sistema pueda demostrar que una asignación es (aproximadamente) eficiente. Es útil pensar en los postores interactuando con agentes de proxy que actuarán en su nombre al responder a los precios provisionales pt−1 determinados al final de la ronda t − 1. El único conocimiento que tiene un intermediario sobre la valoración de un postor es a través del árbol de ofertas. Supongamos que un intermediario fue consultado por la bolsa y se le preguntó en qué operación estaba más interesado el oferente a los precios provisionales. La regla de RP dice lo siguiente: el proxy debe tener suficiente 7. Por ejemplo, aplicando esto a la precisión en el Ejemplo 2, resolvemos una vez y encontramos que los postores 1 y 2 son vinculantes, con un error δ∗ = 2/3. Fijamos estos y luego minimizamos el error para los postores 3 y 4. Finalmente, esto da p(A) = p(B) = 10/3 y p(C) = p(D) = 5/3, con precisión de 2/3 para los postores 1 y 2 y 1/3 para los postores 3 y 4. Se necesitan 254 información para poder determinar este intercambio que maximiza el excedente al precio actual. Considera los siguientes ejemplos: Ejemplo 7. Un postor tiene XOR(+A, +B) y un valor de +5 en la hoja +A y un rango de valores de [5,10] en la hoja +B. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el representante sabe que, sin importar cómo se resuelva la incertidumbre restante del valor en +B, el postor siempre preferirá (débilmente) +B a +A. Ejemplo 8. Un postor tiene XOR(+A, +B) y límites de valor [5, 10] en el nodo raíz y un valor de 1 en la hoja +A. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el postor siempre preferirá +A a +B a precios iguales, sin importar cómo se resuelva finalmente el valor incierto en el nodo raíz. Sobrecargando la notación, sea vi ∈ Ti una valoración que sea consistente con las valoraciones inferiores y superiores en el árbol de oferta Ti. Definición 4. El árbol de oferta Ti satisface RP a precios pt−1 si y solo si existe algún intercambio factible L∗ para el cual, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. Para determinar esto para el postor i, resolvemos una secuencia de problemas, cada uno de los cuales es una variación del problema WD. Primero, construimos un intercambio candidato de límite inferior, que es un intercambio factible que resuelve: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) La solución π∗ l a RP1(i) representa el pago máximo que el postor i puede lograr en todos los intercambios factibles, dado su valoración pesimista. Segundo, rompemos los lazos para encontrar un intercambio con la máxima incertidumbre del valor en todas las posibles soluciones a RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] sujeto a λ ∈ Feas(x0) (22) vi(λi) − pt−1(λi) ≥ π∗ l (23) Adoptamos la solución L∗ i como nuestro candidato para el intercambio que puede satisfacer RP. Para entender la importancia de esta regla de desempate, considera el Ejemplo 7. El proxy puede demostrar que +B pero no +A es una mejor respuesta para todos los vi ∈ Ti, y debería elegir +B como su candidato. Observa que +B es un contraejemplo para +A, pero no al revés. Ahora, construimos una valuación modificada ˜vi, estableciendo ˜viβ = viβ, si β ∈ sat(L∗ i) viβ, de lo contrario. (24) donde sat(L∗ i) es el conjunto de nodos que están satisfechos en el árbol de límite inferior para el comercio L∗ i. Dada esta valuación modificada, encontramos U∗ para resolver: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Sea π∗ u el beneficio de este intercambio óptimo en los valores modificados ˜v. Llamamos al intercambio U∗ i el intercambio testigo. Mostramos en la Proposición 1 que la regla RP se cumple si y solo si π∗ l ≥ π∗ u. La construcción de la valoración modificada como ˜vi reconoce que existe incertidumbre compartida en las operaciones que cumplen los mismos nodos en un árbol de ofertas. El ejemplo 8 ayuda a ilustrar esto. Simplemente usando vi en RP3(i), encontraríamos que L∗ i es comprar A con un pago de π∗ l = 3 pero luego encontraríamos que U∗ i es comprar B con π∗ u = 7 y fallar en RP. Debemos reconocer que, sin importar cómo se resuelva la incertidumbre en el nodo raíz, afectará a +A y +B de la misma manera. Por esta razón, establecimos ˜viβ = viβ = 5 en el nodo raíz, que es exactamente el mismo valor que se adoptó al determinar π∗ l. Entonces, RP3(i) aplicado a U∗ i da como resultado comprar A y se considera que el test de RP ha sido aprobado. Proposición 1. El árbol de oferta Ti satisface RP dado los precios pt−1 si y solo si cualquier intercambio de límite inferior L∗ i que resuelve RP1(i) y RP2(i) satisface: vi(Ti, L∗ i) − pt−1 (L∗ i) ≥ ˜vi(Ti, U∗ i) − pt−1 (U∗ i), (26) donde ˜vi es la valoración modificada en la ecuación (24). Prueba. Para la suficiencia, observe que la diferencia en el pago entre el intercambio L∗ i y otro intercambio λi no se ve afectada por la forma en que se resuelve la incertidumbre en cualquier nodo que esté satisfecho tanto en L∗ i como en λi. Corregir los valores en ˜vi en los nodos satisfechos en L∗ i tiene el efecto de eliminar esta consideración cuando se selecciona un intercambio U∗ i que satisface uno de estos nodos. Por otro lado, fijar los valores en estos nodos no tiene efecto en las operaciones consideradas en RP3(i) que no comparten un nodo con L∗ i. Para la dirección necesaria, primero mostramos que cualquier intercambio que satisfaga RP debe resolver RP1(i). Supongamos lo contrario, que algún λi con un pago mayor que π∗ l cumple con RP. Sin embargo, la valoración vi ∈ Ti junto con L∗ i presenta un contraejemplo a RP (Eq. 20). Ahora, supongamos (por contradicción) que algún λi con ganancia máxima π∗ l pero incertidumbre menor que L∗ i cumple con RP. Procede mediante el análisis de casos. Caso a): solo una solución a RP1(i) tiene un valor incierto y, por lo tanto, λi tiene un valor seguro. Pero, esto no puede satisfacer a RP porque L∗ i con un valor incierto sería un contraejemplo para RP (Eq. 20). Caso b): dos o más soluciones a RP1(i) tienen un valor incierto. Aquí argumentamos primero que uno de estos intercambios debe satisfacer un (débil) superconjunto de todos los nodos con valor incierto que son satisfechos por todos los demás intercambios en este conjunto. Esto es por RP. Sin esto, entonces para cualquier elección de comercio que resuelva RP1(i), hay otro comercio con un conjunto disjunto de nodos inciertos pero satisfechos que proporciona un contraejemplo a RP (Ec. 20). Ahora, considera el caso en el que algún intercambio contiene un superconjunto de todos los nodos inciertos satisfechos de los otros intercambios. Claramente RP2(i) elegirá este intercambio, L∗ i, y λi debe satisfacer un subconjunto de estos nodos (por suposición). Pero ahora vemos que λi no puede cumplir con RP porque L∗ i sería un contraejemplo para RP. El incumplimiento de la regla de actividad debe tener alguna consecuencia. En las reglas actuales, la acción predeterminada que elegimos es establecer los límites superiores en las valoraciones hasta el valor máximo del precio provisional en un nodo8 y el valor del límite inferior en ese nodo.9 Tal postor puede permanecer activo 8 El precio provisional en un nodo se define como el precio total mínimo entre todos los intercambios factibles para los cuales el subárbol enraizado en el árbol está satisfecho. 9 Esto es completamente análogo a cuando un postor en una subasta de reloj ascendente deja de ofertar a un precio: no se le permite ofertar a un precio más alto nuevamente en rondas futuras. 255 dentro del intercambio, pero solo con valoraciones que sean consistentes con estos nuevos límites. 5.4 Retroalimentación del postor En cada ronda, nuestro diseño predeterminado proporciona a cada postor el intercambio provisional y también los precios provisionales actuales. Ver el 7 para una discusión adicional. También brindamos orientación para ayudar a un licitador a cumplir con la regla de RP. Que sat(L∗ i ) y sat(U∗ i ) denoten los nodos que se satisfacen en los intercambios L∗ i y U∗ i, tal como se calcula en RP1-RP3. Lema 2. Cuando RP falla, un postor debe aumentar un límite inferior en al menos un nodo en sat(L∗ i) \\ sat(U∗ i) o disminuir un límite superior en al menos un nodo en sat(U∗ i) \\ sat(L∗ i) para cumplir con la regla de actividad. Prueba. Cambiar los valores superiores o inferiores en los nodos que no cumplen con ninguno de los intercambios no cambia ni L∗ i ni U∗ i, y no altera el beneficio de estos intercambios. Por lo tanto, la condición de RP seguirá fallando. De igual manera, cambiar los límites en los nodos que se satisfacen en ambos intercambios no tiene efecto en la preferencia revelada. Un cambio en un límite inferior en un nodo compartido afecta tanto a L∗ i como a U∗ i de manera idéntica debido al uso de la valoración modificada para determinar U∗ i. Un cambio en un límite superior en un nodo compartido no tiene efecto en la determinación de L∗ i o U∗ i. Ten en cuenta que cuando sat(U∗ i ) = sat(L∗ i ) entonces la condición (26) siempre se satisface trivialmente, por lo que la orientación en el lema siempre está bien definida cuando RP falla. Este es un mecanismo de retroalimentación elegante porque es adaptable. Una vez que un postor realiza algunos cambios en un subconjunto de estos nodos, el postor puede consultar el intercambio. El intercambio puede responder sí, o puede revisar el conjunto de nodos sat(λ∗ l ) y sat(λ∗ u) según sea necesario. 5.5 Condiciones de Terminación Una vez que cada postor haya comprometido sus nuevas ofertas (y haya cumplido con la regla de RP o haya sufrido la penalización), entonces la ronda t se cierra. En este punto, la tarea es determinar la nueva valoración α, y a su vez la asignación provisional λt y los precios provisionales pt. Una condición de terminación también se verifica, para determinar si se debe pasar el intercambio a una ronda final y definitiva. Para definir la α-valoración, calculamos las siguientes dos cantidades: Pesimista en Pesimista (PP). Determinar un intercambio eficiente, λ∗ l, en valores pesimistas, es decir, resolver maxλ   i vi(λi), y establecer PP=  i vi(λ∗ li). Pessimista a Optimista (PO) Determinar un intercambio eficiente, λ∗ u, en valores optimistas, es decir, resolver maxλ   i vi(λi), y establecer PO=  i vi(λ∗ ui). Primero, hay que tener en cuenta que PP ≥ PO y PP ≥ 0 por definición, para todos los árboles de oferta, aunque PO puede ser negativo (porque el intercambio correcto en v no es actualmente un intercambio útil en v). Reconociendo esto, definir γeff (PP, PO) = 1 + PP − PO PP , (27) cuando PP > 0, y observar que γeff (PP, PO) ≥ 1 cuando esto está definido, y que γeff (PP, PO) comenzará siendo grande y luego tenderá hacia 1 a medida que la asignación optimista converge hacia la asignación pesimista. En cada ronda, definimos αeff ∈ [0, 1] como: αeff = 0 cuando PP es 0, 1/γeff en otro caso (28), lo cual es 0 cuando PP es 0 y luego tiende hacia 1 una vez que PP > 0 en alguna ronda. Esto se utiliza para definir la α-valoración vα i = αeff vi + (1 − αeff )vi, ∀i, (29) que se utiliza para definir la asignación provisional y los precios provisionales. El efecto es definir endógenamente un horario para pasar de valores optimistas a pesimistas a lo largo de las rondas, basado en qué tan cercanos estén los intercambios entre sí. Condición de terminación. Al avanzar a la última y definitiva ronda, y finalmente cerrar, también nos preocupamos por la convergencia de pagos, además de la convergencia hacia un comercio eficiente. Para esto introducimos otro parámetro, αthresh ∈ [0, 1], que tiende de 0 a 1 a medida que los pagos de umbral en las valoraciones inferiores y superiores convergen. Considera el siguiente parámetro: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive), (30) el cual está definido para PP > 0, donde pthresh(v) denota los pagos de umbral en el perfil de valoración v, Nactive es el número de postores que están activamente involucrados en el comercio en la transacción de PP, y || · ||2 es la norma L2. Ten en cuenta que γthresh está definido para pagos y no para ganancias. Esto es apropiado porque la precisión del resultado del intercambio es lo que importa: es decir, el comercio y los pagos. Dado esto, definimos αthresh = 0 cuando PP es 0 y 1/γthresh en otro caso (31), lo cual es 0 mientras PP es 0 y luego tiende hacia 1 a medida que se avanza. Definición 5 (terminación). ICE pasa a una ronda final cuando se cumple una de las siguientes condiciones: 1. αeff ≥ CUTOFFeff y αthresh ≥ CUTOFFthresh, 2. no hay intercambio en los valores optimistas, donde CUTOFFeff, CUTOFFthresh ∈ (0, 1] determinan la precisión requerida para la terminación. Al final de la última y definitiva ronda, vα = v se utiliza para definir el intercambio final y los pagos finales del umbral. Ejemplo 9. Considera nuevamente el Ejemplo 1, y considera los límites superiores e inferiores como se muestra en la Figura 1. Primero, si los límites de los vendedores fueron [−20, −4] entonces hay un intercambio optimista pero no hay un intercambio pesimista, y PO = −4 y PP = 0, y αeff = 0. En los límites representados, tanto los intercambios optimistas como pesimistas ocurren y PO = PP = 4 y αeff = 1. Sin embargo, podemos ver que los pagos umbral son (17, −17) en v pero (14, −14) en v. Al evaluar γthresh, tenemos γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, y αthresh = 2/5. Para CUTOFFthresh < 2/5, el intercambio permanecería abierto. Por otro lado, si el valor que los compradores asignan a +AB estaba entre [18, 24] y el valor que los vendedores asignan a -AB estaba entre [-12, -6], los pagos umbral son (15, -15) en ambos límites superior e inferior, y αthresh = 1. 256 Líneas de Propósito de Componente Agente. El modelo 762 de Soporte Captura el comportamiento estratégico y las decisiones de revelación de información. Proporciona soporte XML para cargar bienes y valoraciones en el mundo 200. El mundo 200 realiza un seguimiento de todos los detalles de agentes, bienes y valoraciones. El Controlador y Comunicación de Intercambio 998 controla el intercambio y coordina el comportamiento remoto de los agentes. El Lenguaje de Subasta 1119 implementa el lenguaje de subasta basado en árboles. El Motor de Reglas de Actividad 203 implementa la regla de preferencia revelada con soporte de rango. El Motor de Reglas de Cierre 137 verifica si se ha alcanzado la condición de terminación de la subasta. El Motor WD 377 proporciona lógica relacionada con WD. El Motor de Precios 460 proporciona lógica relacionada con precios. Los Constructores MIP 346 traducen la lógica utilizada por los motores en nuestra formulación general de optimización. Los Constructores de Precios 256 son utilizados por tres etapas de precios. Los Constructores de Determinación de Ganadores 365 son utilizados por WD, regla de actividad, regla de cierre y generación de restricciones de precios. El código de Soporte del Marco 510 facilita la sustitución modular de los componentes anteriores. Tabla 1: Desglose de Componentes y Código de Intercambio. La INFRAESTRUCTURA DE SISTEMAS ICE consta de aproximadamente 6502 líneas de código Java, divididas en los paquetes funcionales descritos en la Tabla 1.10. El prototipo es modular para que los investigadores puedan reemplazar fácilmente los componentes para experimentación. Además del intercambio central discutido en este documento, hemos desarrollado un componente de agente que permite a un usuario simular el comportamiento y conocimiento de otros jugadores en el sistema, lo que le permite al usuario formular su estrategia antes de jugar realmente. Un usuario especifica un modelo de valoración en una interpretación XML de nuestro lenguaje de oferta, que se revela al intercambio a través de la estrategia de los agentes. Las principales tareas de intercambio son manejadas por motores que dictan la lógica no específica del optimizador. Estos motores impulsan los constructores MIP/LP apropiados. Nos dimos cuenta de que todas nuestras formulaciones de optimización se reducen a dos clases de problemas de optimización. El primero, utilizado para la determinación del ganador, la regla de actividad, la regla de cierre y la generación de restricciones en la fijación de precios, es un MIP que encuentra intercambios que maximizan el valor, manteniendo constantes los precios y los márgenes. El segundo, utilizado por las tres etapas de fijación de precios, es un LP que mantiene constantes las operaciones comerciales, buscando minimizar la holgura, el beneficio o los precios. Aprovechamos la similitud de estos problemas utilizando constructores de LP/MIP comunes que difieren solo en unos pocos ganchos funcionales para proporcionar las variables correctas para la optimización. Hemos generalizado nuestra interfaz de optimización del back-end (actualmente soportamos CPLEX y LPSolve con licencia LGPL) y podemos aprovechar la capacidad de equilibrio de carga y resolución paralela de MIP/LP que esta biblioteca proporciona. DISCUSIÓN El lenguaje de oferta se definió para permitir una simetría perfecta entre compradores y vendedores y proporcionar expresividad en un dominio de intercambio, por ejemplo, para oferentes mixtos interesados en ejecutar operaciones como swaps. Esto resultó especialmente desafiante. El avance se produjo cuando nos enfocamos en los cambios de valor para las operaciones en lugar de proporcionar valores absolutos para las asignaciones. Para simplificar, requerimos la misma estructura de árbol tanto para las valoraciones superiores como inferiores. El tamaño del código se mide en líneas de código fuente físicas (SLOC), generadas utilizando el Contador SLOC de David A. Wheeler. El total de 6502 incluye 184 para instrumentación (no se muestra en la tabla). La interfaz del solucionador JOpt es de otras 1964 líneas, y Castor genera automáticamente alrededor de 5200 líneas de código para la manipulación de archivos XML. Esto permite que el propio lenguaje garantice la consistencia (con el valor superior al menos igual al valor inferior en todas las operaciones) y aplique un estrechamiento monótono de estos límites para todas las operaciones en todas las rondas. También proporciona un método eficiente para verificar la regla de actividad de RP, ya que facilita razonar sobre la incertidumbre compartida entre las operaciones. La decisión de adoptar un enfoque directo y delegado en el cual los licitadores expresan sus valores superiores e inferiores a un agente de confianza que interactúa con la bolsa se tomó temprano en el proceso de diseño. En muchos aspectos, esta es la forma más clara y directa de generalizar el diseño en Parkes et al. [24] y hacerlo iterativo. Además, esto elimina muchas oportunidades para la manipulación estratégica: los postores están restringidos a hacer declaraciones (incrementales) sobre sus valoraciones. Otra ventaja es que hace que la regla de la actividad sea fácil de explicar: los postores siempre pueden cumplir con la regla de la actividad ajustando los límites de manera que su valor real permanezca en el soporte. Quizás lo más importante es que tener información explícita sobre los valores superiores e inferiores permite avanzar en las primeras rondas, incluso cuando no hay un intercambio eficiente a valores pesimistas. La información de los límites superior e inferior también proporciona orientación sobre cuándo terminar. Ten en cuenta que tomado por sí mismo, PP = PO no implica que el intercambio provisional actual sea eficiente con respecto a todos los valores consistentes con la información de valor actual. La diferencia en los valores entre diferentes oficios, agregada entre todos los postores, podría ser similar en los límites inferiores y superiores pero bastante diferente en los valores intermedios (incluyendo la verdad). Sin embargo, conjeturamos que PP = PO demostrará ser un indicador excelente de eficiencia en entornos prácticos donde la forma de las valoraciones superiores e inferiores sí transmita información útil. Esto merece una investigación experimental. Además, el uso del precio y la actividad de RP proporciona garantías adicionales. Adoptamos precios lineales (precios en artículos individuales) en lugar de precios no lineales (con precios en un intercambio que no son iguales a la suma de los precios de los artículos componentes) al principio del proceso de diseño. La concisión de esta representación de precios es muy importante para la viabilidad computacional dentro del intercambio y también para promover la simplicidad y transparencia para los postores. La regla de actividad RP fue adoptada más tarde, y es una buena elección debido a sus excelentes propiedades teóricas cuando se combina con los precios de CE. Lo siguiente se puede establecer fácilmente: dados los precios CE exactos pt−1 para el comercio provisional 12. Esto contrasta con enfoques basados en precios indirectos, como el reloj-proxy [1], en los que los postores deben ser capaces de razonar sobre las restricciones RP implicadas por las ofertas en cada ronda. 257 λt−1 en valoraciones vα, entonces si los valores superiores e inferiores al inicio de la ronda t ya satisfacen la regla RP (y sin necesidad de ningún desempate), el comercio provisional es eficiente para todas las valoraciones consistentes con los árboles de ofertas actuales. Cuando existen precios lineales de CE, esto proporciona una declaración de solidez y completitud: si PP = PO, existen precios lineales de CE, y se cumple la regla de RP, el intercambio provisional es eficiente (solidez); si los precios son precios exactos de CE para el intercambio provisional en vα, pero el intercambio es ineficiente con respecto a algún perfil de valoración consistente con los árboles de oferta actuales, entonces al menos un postor debe fallar en RP con su árbol de oferta actual y se avanzará (completitud). El trabajo futuro debe estudiar la convergencia experimentalmente y extender esta teoría para permitir precios aproximados. Algunos aspectos estratégicos de nuestro diseño de ICE merecen comentario y estudio adicional. Primero, no afirmamos que responder sinceramente a la regla de RP sea un equilibrio ex post. Sin embargo, el intercambio está diseñado para imitar la regla de Umbral en su esquema de pago, que se sabe que tiene propiedades de incentivo útiles. Debemos tener cuidado, sin embargo. Por ejemplo, no sugerimos proporcionar αeff a los licitadores, porque a medida que αeff se acerca a 1, informaría a los licitadores que los valores de las ofertas se vuelven irrelevantes para determinar el intercambio, sino que se utilizan simplemente para determinar los pagos (y los licitadores se volverían cada vez más reacios a aumentar sus valoraciones más bajas). Además, en este trabajo no se ha considerado la posibilidad de colusión entre los licitadores. Este es un tema que merece atención en trabajos futuros. 8. CONCLUSIONES En este trabajo diseñamos y prototipamos un <br>intercambio combinatorio</br> iterativo escalable y altamente expresivo. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "vcg": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "ICE: An Iterative Combinatorial Exchange David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative combinatorial exchange (ICE).",
                "The exchange incorporates a tree-based bidding language that is concise and expressive for CEs.",
                "Bidders specify lower and upper bounds on their value for different trades.",
                "These bounds allow price discovery and useful preference elicitation in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
                "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
                "A <br>vcg</br>-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "The exchange is fully implemented and in a validation phase.",
                "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
                "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
                "In a double auction (DA), multiple buyers and sellers trade units of an identical good [20].",
                "In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language.",
                "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
                "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling.",
                "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
                "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
                "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
                "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
                "This paper presents the first design for an iterative combinatorial exchange (ICE).",
                "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
                "The ICE design problem is multi-faceted and quite hard.",
                "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round.",
                "The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "The exchange has a number of interesting theoretical properties.",
                "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
                "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
                "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
                "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
                "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "The exchange is implemented in Java and is currently in validation.",
                "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
                "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
                "We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions.",
                "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based bidding language.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable.",
                "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
                "Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
                "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
                "An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade.",
                "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
                "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades.",
                "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
                "A revealed-preference activity rule [1] ensures progress across rounds.",
                "In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices.",
                "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
                "An outline of the ICE system flow of control is provided in Figure 1.",
                "We will return to this example later in the paper.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance).",
                "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round.",
                "At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29].",
                "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
                "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
                "The price generation methods that we use in ICE generalize the methods in these earlier papers.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule.",
                "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
                "We are not aware of any previous studies of iterative CEs.",
                "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
                "No dominant strategy mechanisms are known for the general CE problem.",
                "ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
                "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
                "The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
                "Rothkopf et al. [27] also describe a restricted tree-based bidding language.",
                "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
                "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
                "The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
                "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
                "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
                "A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
                "So, the final allocation is x1 = x0 + λ.",
                "Each bidder has a value vi(λi) ∈ ¡ for a trade λi.",
                "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
                "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ .",
                "Price p can be negative, indicating the bidder receives a payment for the trade.",
                "We use the term payoff interchangeably with utility.",
                "Our goal in the ICE design is to implement the efficient trade.",
                "The efficient trade, λ∗ , maximizes the total increase in value across bidders.",
                "Definition 1 (Efficient trade).",
                "The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
                "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
                "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
                "All three examples have only one seller, but this is purely illustrative.",
                "Example 1.",
                "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
                "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
                "Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
                "Example 2.",
                "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
                "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
                "The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
                "Example 3.",
                "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
                "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades.",
                "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
                "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
                "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
                "We illustrate the language on each of Examples 1-3 in Figure 2.",
                "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
                "The nodes have zero values where no value is indicated.",
                "Internal nodes are also labeled with interval-choose (IC) ranges.",
                "Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
                "First, if a child is on then its parent must be on.",
                "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
                "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade.",
                "For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
                "On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
                "Given a trade there is often a number of ways to choose the set of satisfied nodes.",
                "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
                "Consider bid tree Ti from bidder i.",
                "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
                "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
                "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
                "Every node is also labeled with a value, viβ ∈ ¡ .",
                "Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.)",
                "Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
                "There will often be a choice.",
                "Ties are broken to maximize value.",
                "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
                "Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
                "This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade.",
                "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
                "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
                "The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
                "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
                "Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
                "OR* is known to be expressive and concise.",
                "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
                "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
                "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (<br>vcg</br>) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
                "In <br>vcg</br>, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆<br>vcg</br>i = V ∗ − V−i the <br>vcg</br> discount.",
                "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
                "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the <br>vcg</br> outcome.",
                "Definition 2.",
                "The Threshold payment scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆<br>vcg</br>i − ∆i) subject to ∆i ≤ ∆<br>vcg</br>i and   i ∆i ≤ V ∗ (this gives budget-balance).",
                "Example 4.",
                "In Example 2, the <br>vcg</br> discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, <br>vcg</br> payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
                "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
                "This minimizes the worst-case error to <br>vcg</br> discounts across all budget-balanced payment schemes.",
                "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
                "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
                "THE ICE DESIGN We are now ready to introduce the iterative combinatorial exchange (ICE) design.",
                "Several new components are introduced, relative to the design for the one-shot exchange.",
                "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
                "The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations.",
                "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
                "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v).",
                "Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
                "These take the place of the exact value viβ defined in Section 4.1.",
                "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
                "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
                "The following lemma is useful: Lemma 1.",
                "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
                "Proof.",
                "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
                "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
                "But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
                "Given these provisional prices, the price on trade λi for bidder i is pt (λi) =   j≤m pt j · λij.",
                "Definition 3 (CE prices).",
                "Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
                "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
                "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
                "II: Fairness.",
                "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
                "III: Balance.",
                "Third, we break ties to prefer prices that minimize the maximal price across all items.",
                "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
                "In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades.",
                "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
                "Each step is described in detail below.",
                "I: Accuracy.",
                "We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages.",
                "Let λt denote the current provisional trade and suppose the provisional valuation is vα .",
                "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
                "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
                "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.)",
                "Example 5.",
                "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
                "The efficient trade allocates AB to buyer 1 and CD to buyer 3.",
                "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
                "But, (9) has an exponential number of constraints (Eq. 10).",
                "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
                "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
                "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
                "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
                "In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices.",
                "Let ˆλi denote the solution to R-WD(i).",
                "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
                "Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
                "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
                "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
                "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
                "This can be exactly achieved in pricing with pA + pB = 14.",
                "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
                "The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the <br>vcg</br> payoff (at vα ).",
                "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
                "III: Balance.",
                "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items.",
                "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
                "Finally, balance sets p(A) = p(B) = 7.",
                "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
                "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
                "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
                "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
                "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
                "Dunford et al. [12] prefer to smooth prices across rounds.",
                "Comment 1: Lexicographical Refinement.",
                "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
                "For instance, in ACC we successively minimize the maximal error across all bidders.",
                "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
                "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
                "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
                "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL.",
                "Comment 2: Computation.",
                "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
                "Thus, the computational effort in constraint generation is re-used.",
                "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
                "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
                "This avoids later infeasibility issues.",
                "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
                "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
                "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
                "We adopt a simple revealed-preference (RP) activity rule.",
                "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
                "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
                "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
                "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
                "Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices.",
                "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
                "We pin these down and then minimize the error to bidders 3 and 4.",
                "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices.",
                "Consider the following examples: Example 7.",
                "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
                "Example 8.",
                "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
                "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
                "Definition 4.",
                "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
                "First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
                "Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP.",
                "To understand the importance of this tiebreaking rule consider Example 7.",
                "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
                "Notice that +B is a counterexample to +A, but not the other way round.",
                "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i .",
                "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v.",
                "We call trade U∗ i the witness trade.",
                "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
                "Example 8 helps to illustrate this.",
                "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
                "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
                "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
                "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
                "Proposition 1.",
                "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
                "Proof.",
                "For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
                "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes.",
                "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
                "For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i).",
                "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
                "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
                "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
                "Proceed by case analysis.",
                "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
                "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
                "Case b): two or more solutions to RP1(i) have uncertain value.",
                "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
                "This is by RP.",
                "Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
                "Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades.",
                "Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
                "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
                "Failure to meet the activity rule must have some consequence.",
                "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices.",
                "See 7 for an additional discussion.",
                "We also provide guidance to help a bidder meet the RP rule.",
                "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
                "Lemma 2.",
                "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
                "Proof.",
                "Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
                "Thus, the RP condition will continue to fail.",
                "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
                "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
                "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
                "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
                "This is an elegant feedback mechanism because it is adaptive.",
                "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
                "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
                "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
                "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
                "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
                "Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
                "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v).",
                "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
                "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
                "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
                "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
                "Termination Condition.",
                "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade.",
                "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
                "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm.",
                "Note that γthresh is defined for payments and not payoffs.",
                "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments.",
                "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
                "Definition 5 (termination).",
                "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
                "At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments.",
                "Example 9.",
                "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
                "First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0.",
                "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
                "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
                "For CUTOFFthresh < 2/5 the exchange would remain open.",
                "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
                "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the tree-based bidding language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
                "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
                "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
                "A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy.",
                "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
                "These engines drive the appropriate MIP/LP builders.",
                "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
                "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
                "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
                "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
                "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
                "DISCUSSION The bidding language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
                "This proved especially challenging.",
                "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
                "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
                "The total of 6502 includes 184 for instrumentation (not shown in the table).",
                "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
                "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
                "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
                "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
                "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
                "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values.",
                "Upper and lower bound information also provides guidance about when to terminate.",
                "Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information.",
                "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
                "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
                "This is worthy of experimental investigation.",
                "Moreover, the use of price and RP activity provides additional guarantees.",
                "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process.",
                "The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
                "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
                "The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees.",
                "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
                "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
                "Some strategic aspects of our ICE design deserve comment, and further study.",
                "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
                "We must be careful, though.",
                "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
                "Also, no consideration has been given in this work to collusion by bidders.",
                "This is an issue that deserves some attention in future work. 8.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative combinatorial exchange.",
                "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
                "The exchange is fully implemented in Java and is in a validation phase.",
                "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
                "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
                "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
                "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
                "This work is supported in part by NSF grant IIS-0238147. 9.",
                "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
                "The clock-proxy auction: A practical combinatorial auction design.",
                "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
                "Mechanisms for a spatially distributed market.",
                "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
                "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
                "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
                "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
                "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
                "Introduction to Linear Optimization.",
                "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
                "A pomdp formulation of preference elicitation problems.",
                "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
                "Bidding languages for combinatorial auctions.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
                "Preference elicitation in combinatorial auctions.",
                "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
                "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
                "Combinatorial Auctions.",
                "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
                "On ascending Vickrey auctions for heterogeneous objects.",
                "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
                "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
                "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
                "Chase, B. Chun, S. Schwab, and A. Vahdat.",
                "Sharp: an architecture for secure resource peering.",
                "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
                "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
                "Effectiveness of query types and policies for preference elicitation in combinatorial auctions.",
                "In Proc. 3rd Int.",
                "Joint.",
                "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [16] D. Krych.",
                "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
                "A new and improved design for multi-object iterative auctions.",
                "Management Science, 2004.",
                "To appear. [18] E. Kwerel and J. Williams.",
                "A proposal for a rapid transition to market allocation of spectrum.",
                "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
                "Applying learning algorithms to preference elicitation.",
                "In Proc.",
                "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
                "A dominant strategy double auction.",
                "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
                "Putting auction theory to work: The simultaneous ascending auction.",
                "J.Pol.",
                "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
                "Iterative combinatorial auctions: Theory and practice.",
                "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
                "A combinatorial mechanism for airport time slot allocation.",
                "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
                "Preference elicitation in combinatorial auctions.",
                "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
            ],
            "original_annotated_samples": [
                "A <br>vcg</br>-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (<br>vcg</br>) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "In <br>vcg</br>, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆<br>vcg</br>i = V ∗ − V−i the <br>vcg</br> discount.",
                "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the <br>vcg</br> outcome."
            ],
            "translated_annotated_samples": [
                "Se utiliza un <br>esquema de pago basado en VCG</br> que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales.",
                "Estos artículos pueden ser asignados de nuevo a los agentes que vendieron los artículos, es decir, para los cuales λij < 0. 4.3 Cálculo de Pagos Umbral La regla de pago umbral se basa en los pagos en el <br>mecanismo de Vickrey-Clarke-Groves</br> (VCG) [15], que en sí mismo es veraz y eficiente pero no satisface el equilibrio presupuestario.",
                "En <br>VCG</br>, el pago pagado por el agente i es pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) donde λ∗ es el intercambio eficiente, V ∗ es el valor reportado de este intercambio, y V−i es el valor reportado del intercambio eficiente que se implementaría sin el postor i.",
                "Llamamos a ∆vcg,i = V ∗ − V−i el <br>descuento VCG</br>.",
                "La regla de pago del umbral [24] determina pagos equilibrados presupuestarios para minimizar el error máximo entre todos los agentes respecto al <br>resultado VCG</br>."
            ],
            "translated_text": "Presentamos el primer diseño para un intercambio combinatorio iterativo (ICE). El intercambio incorpora un lenguaje de oferta basado en árboles que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un <br>esquema de pago basado en VCG</br> que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20]. En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos. Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un intercambio combinatorio iterativo (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda. La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de oferta basado en árboles expresivo y conciso. El lenguaje describe valores para intercambios, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el intercambio sea aceptable. El lenguaje permite a los postores expresar límites superiores e inferiores en el valor, los cuales pueden ser ajustados en cada ronda. • Determinación del ganador. La determinación del ganador (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación. Comparar la solución en los valores superiores e inferiores permite tomar una decisión sobre la terminación, con el progreso en rondas intermedias impulsado por una valoración intermedia y los valores inferiores adoptados al finalizar. • Pagos. Los pagos se calculan utilizando la regla de pago del umbral [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de precios. Se calcula un precio aproximado para cada artículo en el intercambio en cada ronda, en función de las valoraciones intermedias y el intercambio provisional. Los precios se optimizan para aproximar los precios de equilibrio competitivo, y luego se optimizan aún más para aproximar mejor los pagos del umbral actual con los lazos restantes rotos para favorecer los precios equilibrados entre diferentes artículos. Al calcular los precios, adoptamos los métodos de generación de restricciones para explotar la estructura del lenguaje de oferta y evitar enumerar todos los intercambios factibles. El subproblema para generar nuevas restricciones es una variación del problema WD. • Regla de actividad. Una regla de actividad de preferencia revelada [1] garantiza progreso a lo largo de las rondas. Para permanecer activo, un oferente debe ajustar los límites para que haya suficiente información para definir un intercambio que maximice el excedente a los precios actuales. Otra variación del problema de WD se formula, tanto para verificar que se cumple la regla de actividad como para proporcionar retroalimentación a un postor para explicar cómo cumplir la regla. Se proporciona un esquema del flujo de control del sistema ICE en la Figura 1. Volveremos a este ejemplo más adelante en el documento. Por ahora, simplemente observa en este ejemplo de dos agentes que los agentes establecen límites inferiores y superiores que son verificados en la regla de actividad, y luego pasados a la determinación del ganador (WD), y luego a través de tres etapas de fijación de precios (precisión, equidad, equilibrio). Al pasar la regla de cierre (en la que se verifican los parámetros αeff y αthresh para la convergencia del comercio y los pagos), el intercambio pasa a una última y definitiva ronda. Al final de esta ronda, el intercambio y los pagos finalmente se determinan, basados en las valoraciones más bajas. 2.1 Trabajo Relacionado En la literatura se conocen muchos CAs de un solo lado con precios ascendentes [10, 25, 29]. También se han propuesto enfoques de elicitación directa para los AC unilaterales en los que los agentes responden a preguntas explícitas sobre sus valoraciones [8, 14, 19]. Un número de CAs ascendentes están diseñados para trabajar con precios simples en artículos [12, 17]. Los métodos de generación de precios que utilizamos en ICE generalizan los métodos de estos artículos anteriores. Parkes et al. [24] estudiaron intercambios combinatorios de oferta sellada e introdujeron la regla de pago umbral. Posteriormente, Krych [16] demostró experimentalmente que la regla del Umbral promueve asignaciones eficientes. No tenemos conocimiento de ningún estudio previo sobre CEs iterativos. Las estrategias dominantes DAs son conocidas por la demanda unitaria [20] y también por agentes de mente única [2]. No se conocen mecanismos de estrategia dominante para el problema general de la CE. ICE es un diseño de subasta híbrido, ya que combina precios simples de artículos para impulsar las ofertas en las primeras rondas con WD combinatorio y pagos, una característica que comparte con el diseño de reloj-proxy de Ausubel et al. [1] para subastas unilaterales. Adoptamos una variación de la regla de actividad de preferencia revelada en las subastas de proxy de reloj. El lenguaje de subasta comparte algunos elementos estructurales con el lenguaje LGB de Boutilier y Hoos [7], pero tiene semántica muy diferente. Rothkopf et al. [27] también describen un lenguaje de oferta basado en árboles restringido. En LGB, la semántica es la de la lógica proposicional, con los mismos elementos en una asignación capaces de satisfacer un árbol en múltiples lugares. Aunque esto puede hacer que LGB sea especialmente conciso en algunos contextos, la semántica que proponemos parece proporcionar una utilidad local, de modo que el valor de un componente en un árbol pueda ser comprendido de forma independiente al resto del árbol. La idea de capturar la estructura de nuestro lenguaje de oferta de manera explícita dentro de una formulación de programación entera mixta sigue los desarrollos en Boutilier [6]. 3. PRELIMINARES En nuestro modelo, consideramos un conjunto de bienes, indexados {1, . . . , m} y un conjunto de postores, indexados {1, . . . , n}. La asignación inicial de bienes se denota como x0 = (x0 1, . . . , x0 n), donde x0 i = (x0 i1, . . . , x0 im) y x0 ij ≥ 0 para el bien j indicando el número de unidades del bien j que posee el postor i. Un intercambio λ = (λ1, . . . , λn) denota el cambio en la asignación, con λi = (λi1, . . . , λim) donde λij ∈ es el cambio en el número de unidades del ítem j para el postor i. Entonces, la asignación final es x1 = x0 + λ. Cada postor tiene un valor vi(λi) ∈ ¡ para una transacción λi. Este valor puede ser positivo o negativo, y representa el cambio en el valor entre la asignación final x0 i +λi y la asignación inicial x0 i. La utilidad es cuasi-lineal, con ui(λi, p) = vi(λi)−p para el intercambio λi y el pago p ∈ ¡. El precio p puede ser negativo, lo que indica que el postor recibe un pago por la transacción. Utilizamos el término \"pago\" de manera intercambiable con \"utilidad\". Nuestro objetivo en el diseño de ICE es implementar el comercio eficiente. El intercambio eficiente, λ∗, maximiza el aumento total de valor entre los postores. Definición 1 (Comercio eficiente). El intercambio eficiente λ∗ resuelve max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Las restricciones (1) aseguran que ningún agente venda más artículos de los que tiene en su asignación inicial. Las restricciones (2) permiten la disposición gratuita y permiten que los intercambios factibles vendan más artículos de los que se compran (pero no al revés). Posteriormente, adoptamos Feas(x0) para denotar el conjunto de intercambios factibles, dados estos límites y una asignación inicial x0 = (x0 1, . . . , x0 n). 3.1 Ejemplos Prácticos En esta sección, proporcionamos tres ejemplos simples de instancias que utilizaremos para ilustrar varios componentes del intercambio. Todos los tres ejemplos tienen solo un vendedor, pero esto es puramente ilustrativo. Ejemplo 1. Un vendedor y un comprador, dos bienes {A, B}, con el vendedor teniendo una asignación inicial de AB. Cambios en los valores de los intercambios: vendedor comprador Y (−A, −B) Y (+A, +B) -10 +20 El Y indica que tanto el comprador como el vendedor solo están interesados en intercambiar ambos bienes como un paquete. Aquí, el intercambio eficiente (que maximiza el valor) es para el vendedor vender AB al comprador, denotado como λ∗ = ([−1, −1], [+1, +1]). Ejemplo 2. Un vendedor y cuatro compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de las transacciones: vendedor comprador1 comprador 2 comprador 3 comprador 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 El OR indica que el vendedor está dispuesto a vender cualquier cantidad de bienes. El XOR indica que los compradores 2 y 4 están dispuestos a comprar como máximo uno de los dos bienes en los que están interesados. El comercio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD al comprador 3, denotado λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR Ejemplo 1: Ejemplo 3: 2,2 +C +D COMPRADOR 2 2,2 +A +B COMPRADOR 1 +11 +84,4 -B VENDEDOR -A -C -D Ejemplo 2: 1,1 +A +B COMPRADOR 2 2,2 +A +B COMPRADOR 1 +6 +40,4 -B VENDEDOR -C -D-A 1,1 +C +D COMPRADOR 4 2,2 +C +D +3 +2 COMPRADOR 3 -18 Figura 2: Ejemplo de Árboles de Ofertas. Ejemplo 3. Un vendedor y dos compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de los intercambios: vendedor comprador1 comprador 2 Y (−A, −B, −C, −D) Y (+A, +B) Y (+C, +D) -18 +11 +8 El intercambio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD vaya al comprador 2, denotado por λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4. Un DISEÑO DE INTERCAMBIO DE UNA SOLA VEZ La descripción de ICE se divide en dos secciones: una sola vez (oferta sellada) e iterativa. En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a compradores y vendedores, y para extenderse y capturar ofertas de compradores y vendedores mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas. Las ofertas se expresan como árboles de ofertas anotados, y definen el valor de un oferente para todos los intercambios posibles. El lenguaje define cambios en los valores de las transacciones, con hojas anotadas con los artículos intercambiados y nodos anotados con cambios en los valores (ya sea positivos o negativos). La característica principal es que tiene un operador lógico de intervalo general en los nodos internos, y que define una semántica cuidadosa para propagar valores dentro del árbol. Ilustramos el lenguaje en cada uno de los Ejemplos 1-3 en la Figura 2. El lenguaje tiene una estructura de árbol, con operaciones en elementos definidos en las hojas y valores anotados en nodos y hojas. Los nodos tienen valores de cero donde no se indica ningún valor. Los nodos internos también están etiquetados con rangos de intervalo-escoge (IC). Dada una transacción, la semántica del lenguaje define qué nodos en el árbol pueden ser satisfechos o activados. Primero, si un niño está encendido, entonces su padre también debe estar encendido. Segundo, si un nodo padre está encendido, entonces el número de hijos que están encendidos debe estar dentro del rango de IC en el nodo padre. Finalmente, las hojas en las que el postor está comprando artículos solo pueden estar activas si los artículos se proporcionan en el intercambio. Por ejemplo, en el Ejemplo 2 podemos considerar el comercio eficiente, y observar que en este comercio todos los nodos en los árboles de los compradores 1 y 3 (y también el vendedor), pero ninguno de los nodos en los árboles de los compradores 2 y 4, pueden estar encendidos. Por otro lado, en 251 el intercambio en el que A va al comprador 2 y D al comprador 4, entonces los nodos raíz y hojas apropiados pueden estar encendidos para los compradores 2 y 4, pero ningún nodo puede estar encendido para los compradores 1 y 3. Dado un intercambio, a menudo hay varias formas de elegir el conjunto de nodos satisfechos. La semántica del lenguaje requiere que se activen los nodos que maximicen el valor sumado entre los nodos satisfechos. Considera el árbol de oferta Ti del ofertante i. Esto define nodos β ∈ Ti, de los cuales algunos son hojas, Leaf (i) ⊆ Ti. Deje que Child(β) ⊆ Ti denote los hijos de un nodo β (que no es en sí mismo una hoja). Todos los nodos excepto las hojas están etiquetados con el operador de intervalo-escoger [IC x i (β), ICy i (β)]. Cada nodo también está etiquetado con un valor, viβ ∈ ¡. Cada hoja β está etiquetada con un intercambio, qiβ ∈ m (es decir, las hojas pueden definir un intercambio agrupado en más de un tipo de artículo). Dado un intercambio λi al postor i, los operadores de elección de intervalos y los intercambios en las hojas definen qué nodos pueden ser satisfechos. A menudo habrá una elección. Las corbatas se rompen para maximizar el valor. Que satiβ ∈ {0, 1} denote si el nodo β está satisfecho. La solución sati es válida dado el árbol Ti y el intercambio λi, escrita sati ∈ válido(Ti, λi), si y solo si: ¢ β∈Hoja (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Hijo(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Hoja (i) (5) En otras palabras, un conjunto de hojas solo puede considerarse satisfecho dado el intercambio λi si el aumento total en cantidad sumado en todas esas hojas está cubierto por el intercambio, para todos los bienes (Eq. 4). Esto funciona tanto para vendedores como para compradores: para los vendedores, un intercambio es negativo y esto requiere que el número total de artículos indicados como vendidos en el árbol sea al menos igual al número total vendido según lo definido en el intercambio. También necesitamos la propagación ascendente: cada vez que un nodo que no sea la raíz esté satisfecho, su padre también debe estar satisfecho (por β ∈Child(β) satiβ ≤ ICy i (β)satiβ en la Ecuación 5). Finalmente, necesitamos la propagación hacia abajo: cada vez que un nodo interno se satisface, entonces el número apropiado de hijos también debe estar satisfecho (Ec. 5). El valor total del comercio λi, dado el árbol de ofertas Ti, se define como: vi(Ti, λi) = máximo sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) El lenguaje basado en árboles generaliza los lenguajes existentes. Por ejemplo: IC(2, 2) en un nodo con 2 hijos es equivalente a un operador AND; IC(1, 3) en un nodo con 3 hijos es equivalente a un operador OR; e IC(1, 1) en un nodo con 2 hijos es equivalente a un operador XOR. De manera similar, los lenguajes de oferta XOR/OR pueden ser expresados directamente como un árbol de oferta en nuestro lenguaje. La determinación del ganador Este apartado define el problema de determinación del ganador, el cual está formulado como un MIP y resuelto en nuestra implementación con un solucionador comercial. El solucionador utiliza búsqueda de ramificación y acotamiento con generación de cortes dinámicos y heurísticas de ramificación para resolver MIPs grandes en tiempos de ejecución económicamente factibles. El lenguaje OR* es el lenguaje OR con elementos ficticios para proporcionar estructura adicional. OR* se sabe que es expresivo y conciso. Sin embargo, no se sabe si OR* domina a XOR/OR en cuanto a concisión [23]. En la definición de la representación MIP, tenemos cuidado de evitar una enumeración basada en XOR de todos los paquetes. Una variación del problema de WD se reutiliza muchas veces dentro del intercambio, por ejemplo, para la generación de columnas en la fijación de precios y para verificar la preferencia revelada. Dado el conjunto de árboles de ofertas T = (T1, . . . , Tn) y la asignación inicial x0, la formulación mixta entera para WD es: WD(T, x0): max λ, sat ¢ i ¢ β ∈ Ti viβ · satiβ sujeto a (1), (2), satiβ ∈ {0, 1}, λij ∈ sati ∈ válido(Ti, λi), ∀i. Algunos bienes pueden quedar sin asignar porque se permite la disposición libre dentro de las reglas de liquidación de la determinación del ganador. Estos artículos pueden ser asignados de nuevo a los agentes que vendieron los artículos, es decir, para los cuales λij < 0. 4.3 Cálculo de Pagos Umbral La regla de pago umbral se basa en los pagos en el <br>mecanismo de Vickrey-Clarke-Groves</br> (VCG) [15], que en sí mismo es veraz y eficiente pero no satisface el equilibrio presupuestario. El equilibrio presupuestario requiere que los pagos totales al intercambio sean iguales a los pagos totales realizados por el intercambio. En <br>VCG</br>, el pago pagado por el agente i es pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) donde λ∗ es el intercambio eficiente, V ∗ es el valor reportado de este intercambio, y V−i es el valor reportado del intercambio eficiente que se implementaría sin el postor i. Llamamos a ∆vcg,i = V ∗ − V−i el <br>descuento VCG</br>. Por ejemplo, en el Ejemplo 1 pvcg,vendedor = −10 − (+10 − 0) = −20 y pvcg,comprador = +20 − (+10 − 0) = 10, y el intercambio se llevaría a cabo con un déficit presupuestario de −20 + 10 = −10. La regla de pago del umbral [24] determina pagos equilibrados presupuestarios para minimizar el error máximo entre todos los agentes respecto al <br>resultado VCG</br>. ",
            "candidates": [],
            "error": [
                [
                    "esquema de pago basado en VCG",
                    "mecanismo de Vickrey-Clarke-Groves",
                    "VCG",
                    "descuento VCG",
                    "resultado VCG"
                ]
            ]
        },
        "preference elicitation": {
            "translated_key": "obtención de preferencias",
            "is_in_text": true,
            "original_annotated_sentences": [
                "ICE: An Iterative Combinatorial Exchange David C. Parkes∗ † Ruggiero Cavallo† Nick Elprin† Adam Juda† S´ebastien Lahaie† Benjamin Lubin† Loizos Michael† Jeffrey Shneidman† Hassan Sultan† ABSTRACT We present the first design for an iterative combinatorial exchange (ICE).",
                "The exchange incorporates a tree-based bidding language that is concise and expressive for CEs.",
                "Bidders specify lower and upper bounds on their value for different trades.",
                "These bounds allow price discovery and useful <br>preference elicitation</br> in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "All computation in the exchange is carefully optimized to exploit the structure of the bid-trees and to avoid enumerating trades.",
                "A proxied interpretation of a revealedpreference activity rule ensures progress across rounds.",
                "A VCG-based payment scheme that has been shown to mitigate opportunities for bargaining and strategic behavior is used to determine final payments.",
                "The exchange is fully implemented and in a validation phase.",
                "Categories and Subject Descriptors: I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence; J.4 [Computer Applications]: Social and Behavioral Sciences -Economics General Terms: Algorithms, Economics, Theory. 1.",
                "INTRODUCTION Combinatorial exchanges combine and generalize two different mechanisms: double auctions and combinatorial auctions.",
                "In a double auction (DA), multiple buyers and sellers trade units of an identical good [20].",
                "In a combinatorial auction (CA), a single seller has multiple heterogeneous items up for sale [11].",
                "Buyers may have complementarities or substitutabilities between goods, and are provided with an expressive bidding language.",
                "A common goal in both market designs is to determine the efficient allocation, which is the allocation that maximizes total value.",
                "A combinatorial exchange (CE) [24] is a combinatorial double auction that brings together multiple buyers and sellers to trade multiple heterogeneous goods.",
                "For example, in an exchange for wireless spectrum, a bidder may declare that she is willing to pay $1 million for a trade where she obtains licenses for New York City, Boston, and Philadelphia, and loses her license for Washington DC.",
                "Thus, unlike a DA, a CE allows all participants to express complex valuations via expressive bids.",
                "Unlike a CA, a CE allows for fragmented ownership, with multiple buyers and sellers and agents that are both buying and selling.",
                "CEs have received recent attention both in the context of wireless spectrum allocation [18] and for airport takeoff and landing slot allocation [3].",
                "In both of these domains there are incumbents with property rights, and it is important to facilitate a complex multi-way reallocation of resources.",
                "Another potential application domain for CEs is to resource allocation in shared distributed systems, such as PlanetLab [13].",
                "The instantiation of our general purpose design to specific domains is a compelling next step in our research.",
                "This paper presents the first design for an iterative combinatorial exchange (ICE).",
                "The genesis of this project was a class, CS 286r Topics at the Interface between Economics and Computer Science, taught at Harvard University in Spring 2004.1 The entire class was dedicated to the design and prototyping of an iterative CE.",
                "The ICE design problem is multi-faceted and quite hard.",
                "The main innovation in our design is an expressive yet concise tree-based bidding language (which generalizes known languages such as XOR/OR [23]), and the tight coupling of this language with efficient algorithms for price-feedback to guide bidding, winner-determination to determine trades, and revealed-preference activity rules to ensure progress across rounds.",
                "The exchange is iterative: bidders express upper and lower valuations on trades by annotating their bid-tree, and then tighten these bounds in response to price feedback in each round.",
                "The Threshold payment rule, introduced by Parkes et al. [24], is used to determine final payments.",
                "The exchange has a number of interesting theoretical properties.",
                "For instance, when there exist linear prices we establish soundness and completeness: for straightforward bidders that adjust their bounds to meet activity rules while keeping their true value within the bounds, the exchange will terminate with the efficient allocation.",
                "In addition, the 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 Truth Agent Act Rule WD ACC FAIR BALClosing RuleVickreyThreshold DONE !",
                "DONE 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER 2,2 +A +15 +8 +B +15 +8 BUYER 2,2 -A -2 -6 -B -2 -6 SELLER BUYER, buy AB SELLER, sell AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PBUYER = 16 - (4-0) = 12 PSELLER = -12 - (4-0) = -16 PBUYER = 14 PSELLER = -14 Pessim istic O ptim istic = 1 Figure 1: ICE System Flow of Control efficient allocation can often be determined without bidders revealing, or even knowing, their exact value for all trades.",
                "This is essential in complex domains where the valuation problem can itself be very challenging for a participant [28].",
                "While we cannot claim that straightforward bidding is an equilibrium of the exchange (and indeed, should not expect to by the Myerson-Satterthwaite impossibility theorem [22]), the Threshold payment rule minimizes the ex post incentive to manipulate across all budget-balanced payment rules.",
                "The exchange is implemented in Java and is currently in validation.",
                "In describing the exchange we will first provide an overview of the main components and introduce several working examples.",
                "Then, we introduce the basic components for a simple one-shot variation in which bidders state their exact values for trades in a single round.",
                "We then describe the full iterative exchange, with upper and lower values, price-feedback, activity rules, and termination conditions.",
                "We state some theoretical properties of the exchange, and end with a discussion to motivate our main design decisions, and suggest some next steps. 2.",
                "AN OVERVIEW OF THE ICE DESIGN The design has four main components, which we will introduce in order through the rest of the paper: • Expressive and concise tree-based bidding language.",
                "The language describes values for trades, such as my value for selling AB and buying C is $100, or my value for selling ABC is -$50, with negative values indicating that a bidder must receive a payment for the trade to be acceptable.",
                "The language allows bidders to express upper and lower bounds on value, which can be tightened across rounds. • Winner Determination.",
                "Winner-determination (WD) is formulated as a mixed-integer program (MIP), with the structure of the bid-trees captured explicitly in the formulation.",
                "Comparing the solution at upper and lower values allows for a determination to be made about termination, with progress in intermediate rounds driven by an intermediate valuation and the lower values adopted on termination. • Payments.",
                "Payments are computed using the Threshold payment rule [24], with the intermediate valuations adopted in early rounds and lower values adopted on termination. • Price feedback.",
                "An approximate price is computed for each item in the exchange in each round, in terms of the intermediate valuations and the provisional trade.",
                "The prices are optimized to approximate competitive equilibrium prices, and further optimized to best approximate the current Threshold payments with remaining ties broken to favor prices that are balanced across different items.",
                "In computing the prices, we adopt the methods of constraint-generation to exploit the structure of the bidding language and avoid enumerating all feasible trades.",
                "The subproblem to generate new constraints is a variation of the WD problem. • Activity rule.",
                "A revealed-preference activity rule [1] ensures progress across rounds.",
                "In order to remain active, a bidder must tighten bounds so that there is enough information to define a trade that maximizes surplus at the current prices.",
                "Another variation on the WD problem is formulated, both to verify that the activity rule is met and also to provide feedback to a bidder to explain how to meet the rule.",
                "An outline of the ICE system flow of control is provided in Figure 1.",
                "We will return to this example later in the paper.",
                "For now, just observe in this two-agent example that the agents state lower and upper bounds that are checked in the activity rule, and then passed to winner-determination (WD), and then through three stages of pricing (accuracy, fairness, balance).",
                "On passing the closing rule (in which parameters αeff and αthresh are checked for convergence of the trade and payments), the exchange goes to a last-and-final round.",
                "At the end of this round, the trade and payments are finally determined, based on the lower valuations. 2.1 Related Work Many ascending-price one-sided CAs are known in the literature [10, 25, 29].",
                "Direct elicitation approaches have also been proposed for one-sided CAs in which agents respond to explicit queries about their valuations [8, 14, 19].",
                "A number of ascending CAs are designed to work with simple prices on items [12, 17].",
                "The price generation methods that we use in ICE generalize the methods in these earlier papers.",
                "Parkes et al. [24] studied sealed-bid combinatorial exchanges and introduced the Threshold payment rule.",
                "Subsequently, Krych [16] demonstrated experimentally that the Threshold rule promotes efficient allocations.",
                "We are not aware of any previous studies of iterative CEs.",
                "Dominant strategy DAs are known for unit demand [20] and also for single-minded agents [2].",
                "No dominant strategy mechanisms are known for the general CE problem.",
                "ICE is a hybrid auction design, in that it couples simple item prices to drive bidding in early rounds with combinatorial WD and payments, a feature it shares with the clock-proxy design of Ausubel et al. [1] for one-sided CAs.",
                "We adopt a variation on the clock-proxy auctionss revealedpreference activity rule.",
                "The bidding language shares some structural elements with the LGB language of Boutilier and Hoos [7], but has very different semantics.",
                "Rothkopf et al. [27] also describe a restricted tree-based bidding language.",
                "In LGB, the semantics are those of propositional logic, with the same items in an allocation able to satisfy a tree in multiple places.",
                "Although this can make LGB especially concise in some settings, the semantics that we propose appear to provide useful locality, so that the value of one component in a tree can be understood independently from the rest of the tree.",
                "The idea of capturing the structure of our bidding language explicitly within a mixed-integer programming formulation follows the developments in Boutilier [6]. 3.",
                "PRELIMINARIES In our model, we consider a set of goods, indexed {1, . . . , m} and a set of bidders, indexed {1, . . . , n}.",
                "The initial allocation of goods is denoted x0 = (x0 1, . . . , x0 n), with x0 i = (x0 i1, . . . , x0 im) and x0 ij ≥ 0 for good j indicating the number 250 of units of good j held by bidder i.",
                "A trade λ = (λ1, . . . , λn) denotes the change in allocation, with λi = (λi1, . . . , λim) where λij ∈   is the change in the number of units of item j to bidder i.",
                "So, the final allocation is x1 = x0 + λ.",
                "Each bidder has a value vi(λi) ∈ ¡ for a trade λi.",
                "This value can be positive or negative, and represents the change in value between the final allocation x0 i +λi and the initial allocation x0 i .",
                "Utility is quasi-linear, with ui(λi, p) = vi(λi)−p for trade λi and payment p ∈ ¡ .",
                "Price p can be negative, indicating the bidder receives a payment for the trade.",
                "We use the term payoff interchangeably with utility.",
                "Our goal in the ICE design is to implement the efficient trade.",
                "The efficient trade, λ∗ , maximizes the total increase in value across bidders.",
                "Definition 1 (Efficient trade).",
                "The efficient trade λ∗ solves max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Constraints (1) ensure that no agent sells more items than it has in its initial allocation.",
                "Constraints (2) provide free disposal, and allows feasible trades to sell more items than are purchased (but not vice versa).",
                "Later, we adopt Feas(x0 ) to denote the set of feasible trades, given these constraints and given an initial allocation x0 = (x0 1, . . . , x0 n). 3.1 Working Examples In this section, we provide three simple examples of instances that we will use to illustrate various components of the exchange.",
                "All three examples have only one seller, but this is purely illustrative.",
                "Example 1.",
                "One seller and one buyer, two goods {A, B}, with the seller having an initial allocation of AB.",
                "Changes in values for trades: seller buyer AND(−A, −B) AND(+A, +B) -10 +20 The AND indicates that both the buyer and the seller are only interested in trading both goods as a bundle.",
                "Here, the efficient (value-maximizing) trade is for the seller to sell AB to the buyer, denoted λ∗ = ([−1, −1], [+1, +1]).",
                "Example 2.",
                "One seller and four buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 buyer 3 buyer 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 The OR indicates that the seller is willing to sell any number of goods.",
                "The XOR indicates that buyers 2 and 4 are willing to buy at most one of the two goods in which they are interested.",
                "The efficient trade is for bundle AB to go to buyer 1 and bundle CD to buyer 3, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 BUYER 2,2 -A -5 -B -5 SELLER Example 1: Example 3: 2,2 +C +D BUYER 2 2,2 +A +B BUYER 1 +11 +84,4 -B SELLER -A -C -D Example 2: 1,1 +A +B BUYER 2 2,2 +A +B BUYER 1 +6 +40,4 -B SELLER -C -D-A 1,1 +C +D BUYER 4 2,2 +C +D +3 +2 BUYER 3 -18 Figure 2: Example Bid Trees.",
                "Example 3.",
                "One seller and two buyers, four goods {A, B, C, D}, with the seller having an initial allocation of ABCD.",
                "Changes in values for trades: seller buyer1 buyer 2 AND(−A, −B, −C, −D) AND(+A, +B) AND(+C, +D) -18 +11 +8 The efficient trade is for bundle AB to go to buyer 1 and bundle CD to go to buyer 2, denoted λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4.",
                "A ONE-SHOT EXCHANGE DESIGN The description of ICE is broken down into two sections: one-shot (sealed-bid) and iterative.",
                "In this section we abstract away the iterative aspect and introduce a specialization of the tree-based language that supports only exact values on nodes. 4.1 Tree-Based Bidding Language The bidding language is designed to be expressive and concise, entirely symmetric with respect to buyers and sellers, and to extend to capture bids from mixed buyers and sellers, ranging from simple swaps to highly complex trades.",
                "Bids are expressed as annotated bid trees, and define a bidders value for all possible trades.",
                "The language defines changes in values on trades, with leaves annotated with traded items and nodes annotated with changes in values (either positive or negative).",
                "The main feature is that it has a general interval-choose logical operator on internal nodes, and that it defines careful semantics for propagating values within the tree.",
                "We illustrate the language on each of Examples 1-3 in Figure 2.",
                "The language has a tree structure, with trades on items defined on leaves and values annotated on nodes and leaves.",
                "The nodes have zero values where no value is indicated.",
                "Internal nodes are also labeled with interval-choose (IC) ranges.",
                "Given a trade, the semantics of the language define which nodes in the tree can be satisfied, or switched-on.",
                "First, if a child is on then its parent must be on.",
                "Second, if a parent node is on, then the number of children that are on must be within the IC range on the parent node.",
                "Finally, leaves in which the bidder is buying items can only be on if the items are provided in the trade.",
                "For instance, in Example 2 we can consider the efficient trade, and observe that in this trade all nodes in the trees of buyers 1 and 3 (and also the seller), but none of the nodes in the trees of buyers 2 and 4, can be on.",
                "On the other hand, in 251 the trade in which A goes to buyer 2 and D to buyer 4, then the root and appropriate leaf nodes can be on for buyers 2 and 4, but no nodes can be on for buyers 1 and 3.",
                "Given a trade there is often a number of ways to choose the set of satisfied nodes.",
                "The semantics of the language require that the nodes that maximize the summed value across satisfied nodes be activated.",
                "Consider bid tree Ti from bidder i.",
                "This defines nodes β ∈ Ti, of which some are leaves, Leaf (i) ⊆ Ti.",
                "Let Child(β) ⊆ Ti denote the children of a node β (that is not itself a leaf).",
                "All nodes except leaves are labeled with the interval-choose operator [IC x i (β), ICy i (β)].",
                "Every node is also labeled with a value, viβ ∈ ¡ .",
                "Each leaf β is labeled with a trade, qiβ ∈   m (i.e., leaves can define a bundled trade on more than one type of item.)",
                "Given a trade λi to bidder i, the interval-choose operators and trades on leaves define which nodes can be satisfied.",
                "There will often be a choice.",
                "Ties are broken to maximize value.",
                "Let satiβ ∈ {0, 1} denote whether node β is satisfied.",
                "Solution sati is valid given tree Ti and trade λi, written sati ∈ valid(Ti, λi), if and only if: ¢ β∈Leaf (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Child(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Leaf (i) (5) In words, a set of leaves can only be considered satisfied given trade λi if the total increase in quantity summed across all such leaves is covered by the trade, for all goods (Eq. 4).",
                "This works for sellers as well as buyers: for sellers a trade is negative and this requires that the total number of items indicated sold in the tree is at least the total number sold as defined in the trade.",
                "We also need upwards-propagation: any time a node other than the root is satisfied then its parent must be satisfied (by   β ∈Child(β) satiβ ≤ ICy i (β)satiβ in Eq. 5).",
                "Finally, we need downwards-propagation: any time an internal node is satisfied then the appropriate number of children must also be satisfied (Eq. 5).",
                "The total value of trade λi, given bid-tree Ti, is defined as: vi(Ti, λi) = max sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) The tree-based language generalizes existing languages.",
                "For instance: IC(2, 2) on a node with 2 children is equivalent to an AND operator; IC(1, 3) on a node with 3 children is equivalent to an OR operator; and IC(1, 1) on a node with 2 children is equivalent to an XOR operator.",
                "Similarly, the XOR/OR bidding languages can be directly expressed as a bid tree in our language.2 4.2 Winner Determination This section defines the winner determination problem, which is formulated as a MIP and solved in our implementation with a commercial solver.3 The solver uses branchand-bound search with dynamic cut generation and branching heuristics to solve large MIPs in economically feasible run times. 2 The OR* language is the OR language with dummy items to provide additional structure.",
                "OR* is known to be expressive and concise.",
                "However, it is not known whether OR* dominates XOR/OR in terms of conciseness [23]. 3 CPLEX, www.ilog.com In defining the MIP representation we are careful to avoid an XOR-based enumeration of all bundles.",
                "A variation on the WD problem is reused many times within the exchange, e.g. for column generation in pricing and for checking revealed preference.",
                "Given bid trees T = (T1, . . . , Tn) and initial allocation x0 , the mixed-integer formulation for WD is: WD(T, x0 ) : max λ,sat ¢ i ¢ β∈Ti viβ · satiβ s.t. (1), (2), satiβ ∈ {0, 1}, λij ∈   sati ∈ valid(Ti, λi), ∀i Some goods may go unassigned because free disposal is allowed within the clearing rules of winner determination.",
                "These items can be allocated back to agents that sold the items, i.e. for which λij < 0. 4.3 Computing Threshold Payments The Threshold payment rule is based on the payments in the Vickrey-Clarke-Groves (VCG) mechanism [15], which itself is truthful and efficient but does not satisfy budget balance.",
                "Budget-balance requires that the total payments to the exchange are equal to the total payments made by the exchange.",
                "In VCG, the payment paid by agent i is pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) where λ∗ is the efficient trade, V ∗ is the reported value of this trade, and V−i is the reported value of the efficient trade that would be implemented without bidder i.",
                "We call ∆vcg,i = V ∗ − V−i the VCG discount.",
                "For instance, in Example 1 pvcg,seller = −10 − (+10 − 0) = −20 and pvcg,buyer = +20 − (+10 − 0) = 10, and the exchange would run at a budget deficit of −20 + 10 = −10.",
                "The Threshold payment rule [24] determines budgetbalanced payments to minimize the maximal error across all agents to the VCG outcome.",
                "Definition 2.",
                "The Threshold payment scheme implements the efficient trade λ∗ given bids, and sets payments pthresh,i = ˆvi(λ∗ i ) − ∆i, where ∆ = (∆1, . . . , ∆n) is set to minimize maxi(∆vcg,i − ∆i) subject to ∆i ≤ ∆vcg,i and   i ∆i ≤ V ∗ (this gives budget-balance).",
                "Example 4.",
                "In Example 2, the VCG discounts are (9, 2, 0, 1, 0) to the seller and four buyers respectively, VCG payments are (−9, 4, 0, 2, 0) and the exchange runs at a deficit of -3.",
                "In Threshold, the discounts are (8, 1, 0, 0, 0) and the payments are (−8, 5, 0, 3, 0).",
                "This minimizes the worst-case error to VCG discounts across all budget-balanced payment schemes.",
                "Threshold payments are designed to minimize the maximal ex post incentive to manipulate.",
                "Krych [16] confirmed that Threshold promotes allocative efficiency in restricted and approximate Bayes-Nash equilibrium. 5.",
                "THE ICE DESIGN We are now ready to introduce the iterative combinatorial exchange (ICE) design.",
                "Several new components are introduced, relative to the design for the one-shot exchange.",
                "Rather than provide precise valuations, bidders can provide lower and upper valuations and revise this bid information across rounds.",
                "The exchange provides price-based feedback 252 to guide bidders in this process, and terminates with an efficient (or approximately-efficient) trade with respect to reported valuations.",
                "In each round t ∈ {0, 1, . . .} the current lower and upper bounds, vt and vt , are used to define a provisional valuation profile vα (the α-valuation), together with a provisional trade λt and provisional prices pt = (pt 1, . . . , pt m) on items.",
                "The α-valuation is a linear combination of the current upper and lower valuations, with αEFF ∈ [0, 1] chosen endogenously based on the closeness of the optimistic trade (at v) and the pessimistic trade (at v).",
                "Prices pt are used to inform an activity rule, and drive progress towards an efficient trade. 5.1 Upper and Lower Valuations The bidding language is extended to allow a bidder i to report a lower and upper value (viβ, viβ) on each node.",
                "These take the place of the exact value viβ defined in Section 4.1.",
                "Based on these labels, we can define the valuation functions vi(Ti, λi) and vi(Ti, λi), using the exact same semantics as in Eq. (6).",
                "We say that such a bid-tree is well-formed if viβ ≤ viβ for all nodes.",
                "The following lemma is useful: Lemma 1.",
                "Given a well-formed tree, T, then vi(Ti, λi) ≤ vi(Ti, λi) for all trades.",
                "Proof.",
                "Suppose there is some λi for which vi(Ti, λi) > vi(Ti, λi).",
                "Then, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ.",
                "But, this is a contradiction because the trade λ that defines vi(Ti, λi) is still feasible with upper bounds vi, and viβ ≥ viβ for all nodes β in a well-formed tree. 5.2 Price Feedback In each round, approximate competitive-equilibrium (CE) prices, pt = (pt 1, . . . , pt m), are determined.",
                "Given these provisional prices, the price on trade λi for bidder i is pt (λi) =   j≤m pt j · λij.",
                "Definition 3 (CE prices).",
                "Prices p∗ are competitive equilibrium prices if the efficient trade λ∗ is supported at prices p∗ , so that for each bidder: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) CE prices will not always exist and we will often need to compute approximate prices [5].",
                "We extend ideas due to Rassenti et al. [26], Kwasnica et al. [17] and Dunford et al. [12], and select approximate prices as follows: I: Accuracy.",
                "First, we compute prices that minimize the maximal error in the best-response constraints across all bidders.",
                "II: Fairness.",
                "Second, we break ties to prefer prices that minimize the maximal deviation from Threshold payments across all bidders.",
                "III: Balance.",
                "Third, we break ties to prefer prices that minimize the maximal price across all items.",
                "Taken together, these steps are designed to promote the informativeness of the prices in driving progress across rounds.",
                "In computing prices, we explain how to compute approximate (or otherwise) prices for structured bidding languages, and without enumerating all possible trades.",
                "For this, we adopt constraint generation to efficient handle an exponential number of constraints.",
                "Each step is described in detail below.",
                "I: Accuracy.",
                "We adopt a definition of price accuracy that generalizes the notions adopted in previous papers for unstructured bidding languages.",
                "Let λt denote the current provisional trade and suppose the provisional valuation is vα .",
                "To compute accurate CE prices, we consider: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j.",
                "This linear program (LP) is designed to find prices that minimize the worst-case error across all agents.",
                "From the definition of CE prices, it follows that CE prices would have δ = 0 as a solution to (9), at which point trade λt i would be in the best-response set of every agent (with λt i = ∅, i.e. no trade, for all agents with no surplus for trade at the prices.)",
                "Example 5.",
                "We can illustrate the formulation (9) on Example 2, assuming for simplicity that vα = v (i.e. truth).",
                "The efficient trade allocates AB to buyer 1 and CD to buyer 3.",
                "Accuracy will seek prices p(A), p(B), p(C) and p(D) to minimize the δ ≥ 0 required to satisfy constraints: p(A) + p(B) + p(C) + p(D) ≥ 0 (seller) p(A) + p(B) ≤ 6 + δ (buyer 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (buyer 2) p(C) + p(D) ≤ 3 (buyer 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (buyer 4) An optimal solution requires p(A) = p(B) = 10/3, with δ = 2/3, with p(C) and p(D) taking values such as p(C) = p(D) = 3/2.",
                "But, (9) has an exponential number of constraints (Eq. 10).",
                "Rather than solve it explicitly we use constraint generation [4] and dynamically generate a sufficient subset of constraints.",
                "Let   i denote a manageable subset of all possible feasible trades to bidder i.",
                "Then, a relaxed version of (9) (written ACC) is formulated by substituting (10) with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) where   i is a set of trades that are feasible for bidder i given the other bids.",
                "Fixing the prices p∗ , we then solve n subproblems (one for each bidder), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0 ), (12) to check whether solution (p∗ , δ∗ ) to ACC is feasible in problem (9).",
                "In R-WD(i) the objective is to determine a most preferred trade for each bidder at these prices.",
                "Let ˆλi denote the solution to R-WD(i).",
                "Check condition: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) and if this condition holds for all bidders i, then solution (p∗ , δ∗ ) is optimal for problem (9).",
                "Otherwise, trade ˆλi is added to   i for all bidders i for which this constraint is 253 violated and we re-solve the LP with the new set of constraints.4 II: Fairness.",
                "Second, we break remaining ties to prefer fair prices: choosing prices that minimize the worst-case error with respect to Threshold payoffs (i.e. utility to bidders with Threshold payments), but without choosing prices that are less accurate.5 Example 6.",
                "For example, accuracy in Example 1 (depicted in Figure 1) requires 12 ≤ pA +pB ≤ 16 (for vα = v).",
                "At these valuations the Threshold payoffs would be 2 to both the seller and the buyer.",
                "This can be exactly achieved in pricing with pA + pB = 14.",
                "The fairness tie-breaking method is formulated as the following LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution, from ACC.",
                "The objective here is the same as in the Threshold payment rule (see Section 4.3): minimize the maximal error between bidder payoff (at vα ) for the provisional trade and the VCG payoff (at vα ).",
                "Problem FAIR is also solved through constraint generation, using R-WD(i) to add additional violated constraints as necessary.",
                "III: Balance.",
                "Third, we break remaining ties to prefer balanced prices: choosing prices that minimize the maximal price across all items.",
                "Returning again to Example 1, depicted in Figure 1, we see that accuracy and fairness require p(A) + p(B) = 14.",
                "Finally, balance sets p(A) = p(B) = 7.",
                "Balance is justified when, all else being equal, items are more likely to have similar than dissimilar values.6 The LP for balance is formulated as follows: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, where δ∗ represents the error in the optimal solution from ACC and π∗ represents the error in the optimal solution from FAIR.",
                "Constraint generation is also used to solve BAL, generating new trades for   i as necessary. 4 Problem R-WD(i) is a specialization of the WD problem, in which the objective is to maximize the payoff of a single bidder, rather than the total value across all bidders.",
                "It is solved as a MIP, by rewriting the objective in WD(T, x0 ) as max{viβ · satiβ −   j p∗ j · λij } for agent i.",
                "Thus, the structure of the bid-tree language is exploited in generating new constraints, because this is solved as a concise MIP.",
                "The other bidders are kept around in the MIP (but do not appear in the objective), and are used to define the space of feasible trades. 5 The methods of Dunford et al. [12], that use a nucleolus approach, are also closely related. 6 The use of balance was advocated by Kwasnica et al. [17].",
                "Dunford et al. [12] prefer to smooth prices across rounds.",
                "Comment 1: Lexicographical Refinement.",
                "For all three sub-problems we also perform lexicographical refinement (with respect to bidders in ACC and FAIR, and with respect to goods in BAL).",
                "For instance, in ACC we successively minimize the maximal error across all bidders.",
                "Given an initial solution we first pin down the error on all bidders for whom a constraint (11) is binding.",
                "For such a bidder i, the constraint is replaced with vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) and the error to bidder i no longer appears explicitly in the objective.",
                "ACC is then re-solved, and makes progress by further minimizing the maximal error across all bidders yet to be pinned down.",
                "This continues, pinning down any new bidders for whom one of constraints (11) is binding, until the error is lexicographically optimized for all bidders.7 The exact same process is repeated for FAIR and BAL, with bidders pinned down and constraints (15) replaced with π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (where π∗ i is the current objective) in FAIR, and items pinned down and constraints (18) replaced with p∗ j ≥ pj (where p∗ j represents the target for the maximal price on that item) in BAL.",
                "Comment 2: Computation.",
                "All constraints in   i are retained, and this set grows across all stages and across all rounds of the exchange.",
                "Thus, the computational effort in constraint generation is re-used.",
                "In implementation we are careful to address a number of -issues that arise due to floating-point issues.",
                "We prefer to err on the side of being conservative in determining whether or not to add another constraint in performing check (13).",
                "This avoids later infeasibility issues.",
                "In addition, when pinning-down bidders for the purpose of lexicographical refinement we relax the associated bidder-constraints with a small > 0 on the righthand side. 5.3 Revealed-Preference Activity Rules The role of activity rules in the auction is to ensure both consistency and progress across rounds [21].",
                "Consistency in our exchange requires that bidders tighten bounds as the exchange progresses.",
                "Activity rules ensure that bidders are active during early rounds, and promote useful elicitation throughout the exchange.",
                "We adopt a simple revealed-preference (RP) activity rule.",
                "The idea is loosely based around the RP-rule in Ausubel et al. [1], where it is used for one-sided CAs.",
                "The motivation is to require more than simply consistency: we need bidders to provide enough information for the system to be able to to prove that an allocation is (approximately) efficient.",
                "It is helpful to think about the bidders interacting with proxy agents that will act on their behalf in responding to provisional prices pt−1 determined at the end of round t − 1.",
                "The only knowledge that such a proxy has of the valuation of a bidder is through the bid-tree.",
                "Suppose a proxy was queried by the exchange and asked which trade the bidder was most interested in at the provisional prices.",
                "The RP rule says the following: the proxy must have enough 7 For example, applying this to accuracy on Example 2 we solve once and find bidders 1 and 2 are binding, for error δ∗ = 2/3.",
                "We pin these down and then minimize the error to bidders 3 and 4.",
                "Finally, this gives p(A) = p(B) = 10/3 and p(C) = p(D) = 5/3, with accuracy 2/3 to bidders 1 and 2 and 1/3 to bidders 3 and 4. 254 information to be able to determine this surplus-maximizing trade at current prices.",
                "Consider the following examples: Example 7.",
                "A bidder has XOR(+A, +B) and a value of +5 on the leaf +A and a value range of [5,10] on leaf +B.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the proxy knows that however the remaining value uncertainty on +B is resolved the bidder will always (weakly) prefer +B to +A.",
                "Example 8.",
                "A bidder has XOR(+A, +B) and value bounds [5, 10] on the root node and a value of 1 on leaf +A.",
                "Suppose prices are currently 3 for each of A and B.",
                "The RP rule is satisfied because the bidder will always prefer +A to +B at equal prices, whichever way the uncertain value on the root node is ultimately resolved.",
                "Overloading notation, let vi ∈ Ti denote a valuation that is consistent with lower and upper valuations in bid tree Ti.",
                "Definition 4.",
                "Bid tree Ti satisfies RP at prices pt−1 if and only if there exists some feasible trade L∗ for which, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. (20) To make this determination for bidder i we solve a sequence of problems, each of which is a variation on the WD problem.",
                "First, we construct a candidate lower-bound trade, which is a feasible trade that solves: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) The solution π∗ l to RP1(i) represents the maximal payoff that bidder i can achieve across all feasible trades, given its pessimistic valuation.",
                "Second, we break ties to find a trade with maximal value uncertainty across all possible solutions to RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] s.t. λ ∈ Feas(x0 ) (22) vi(λi) − pt−1 (λi) ≥ π∗ l (23) We adopt solution L∗ i as our candidate for the trade that may satisfy RP.",
                "To understand the importance of this tiebreaking rule consider Example 7.",
                "The proxy can prove +B but not +A is a best-response for all vi ∈ Ti, and should choose +B as its candidate.",
                "Notice that +B is a counterexample to +A, but not the other way round.",
                "Now, we construct a modified valuation ˜vi, by setting ˜viβ =   viβ , if β ∈ sat(L∗ i ) viβ , otherwise. (24) where sat(L∗ i ) is the set of nodes that are satisfied in the lower-bound tree for trade L∗ i .",
                "Given this modified valuation, we find U∗ to solve: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Let π∗ u denote the payoff from this optimal trade at modified values ˜v.",
                "We call trade U∗ i the witness trade.",
                "We show in Proposition 1 that the RP rule is satisfied if and only if π∗ l ≥ π∗ u. Constructing the modified valuation as ˜vi recognizes that there is shared uncertainty across trades that satisfy the same nodes in a bid tree.",
                "Example 8 helps to illustrate this.",
                "Just using vi in RP3(i), we would find L∗ i is buy A with payoff π∗ l = 3 but then find U∗ i is buy B with π∗ u = 7 and fail RP.",
                "We must recognize that however the uncertainty on the root node is resolved it will affect +A and +B in exactly the same way.",
                "For this reason, we set ˜viβ = viβ = 5 on the root node, which is exactly the same value that was adopted in determining π∗ l .",
                "Then, RP3(i) applied to U∗ i gives buy A and the RP test is judged to be passed.",
                "Proposition 1.",
                "Bid tree Ti satisfies RP given prices pt−1 if and only if any lower-bound trade L∗ i that solves RP1(i) and RP2(i) satisfies: vi(Ti, L∗ i ) − pt−1 (L∗ i ) ≥ ˜vi(Ti, U∗ i ) − pt−1 (U∗ i ), (26) where ˜vi is the modified valuation in Eq. (24).",
                "Proof.",
                "For sufficiency, notice that the difference in payoff between trade L∗ i and another trade λi is unaffected by the way uncertainty is resolved on any node that is satisfied in both L∗ i and λi.",
                "Fixing the values in ˜vi on nodes satisfied in L∗ i has the effect of removing this consideration when a trade U∗ i is selected that satisfies one of these nodes.",
                "On the other hand, fixing the values on these nodes has no effect on trades considered in RP3(i) that do not share a node with L∗ i .",
                "For the necessary direction, we first show that any trade that satisfies RP must solve RP1(i).",
                "Suppose otherwise, that some λi with payoff greater than π∗ l satisfies RP.",
                "But, valuation vi ∈ Ti together with L∗ i presents a counterexample to RP (Eq. 20).",
                "Now, suppose (for contradiction) that some λi with maximal payoff π∗ l but uncertainty less than L∗ i satisfies RP.",
                "Proceed by case analysis.",
                "Case a): only one solution to RP1(i) has uncertain value and so λi has certain value.",
                "But, this cannot satisfy RP because L∗ i with uncertain value would be a counterexample to RP (Eq. 20).",
                "Case b): two or more solutions to RP1(i) have uncertain value.",
                "Here, we first argue that one of these trades must satisfy a (weak) superset of all the nodes with uncertain value that are satisfied by all other trades in this set.",
                "This is by RP.",
                "Without this, then for any choice of trade that solves RP1(i), there is another trade with a disjoint set of uncertain but satisfied nodes that provides a counterexample to RP (Eq. 20).",
                "Now, consider the case that some trade contains a superset of all the uncertain satisfied nodes of the other trades.",
                "Clearly RP2(i) will choose this trade, L∗ i , and λi must satisfy a subset of these nodes (by assumption).",
                "But, we now see that λi cannot satisfy RP because L∗ i would be a counterexample to RP.",
                "Failure to meet the activity rule must have some consequence.",
                "In the current rules, the default action we choose is to set the upper bounds in valuations down to the maximal value of the provisional price on a node8 and the lowerbound value on that node.9 Such a bidder can remain active 8 The provisional price on a node is defined as the minimal total price across all feasible trades for which the subtree rooted at the tree is satisfied. 9 This is entirely analogous to when a bidder in an ascending clock auction stops bidding at a price: she is not permitted to bid at a higher price again in future rounds. 255 within the exchange, but only with valuations that are consistent with these new bounds. 5.4 Bidder Feedback In each round, our default design provides every bidder with the provisional trade and also with the current provisional prices.",
                "See 7 for an additional discussion.",
                "We also provide guidance to help a bidder meet the RP rule.",
                "Let sat(L∗ i ) and sat(U∗ i ) denote the nodes that are satisfied in trades L∗ i and U∗ i , as computed in RP1-RP3.",
                "Lemma 2.",
                "When RP fails, a bidder must increase a lower bound on at least one node in sat(L∗ i ) \\ sat(U∗ i ) or decrease an upper bound on at least one node in sat(U∗ i ) \\ sat(L∗ i ) in order to meet the activity rule.",
                "Proof.",
                "Changing the upper- or lower- values on nodes that are not satisfied by either trade does not change L∗ i or U∗ i , and does not change the payoff from these trades.",
                "Thus, the RP condition will continue to fail.",
                "Similarly, changing the bounds on nodes that are satisfied in both trades has no effect on revealed preference.",
                "A change to a lower bound on a shared node affects both L∗ i and U∗ i identically because of the use of the modified valuation to determine U∗ i .",
                "A change to an upper bound on a shared node has no effect in determining either L∗ i or U∗ i .",
                "Note that when sat(U∗ i ) = sat(L∗ i ) then condition (26) is always trivially satisfied, and so the guidance in the lemma is always well-defined when RP fails.",
                "This is an elegant feedback mechanism because it is adaptive.",
                "Once a bidder makes some changes on some subset of these nodes, the bidder can query the exchange.",
                "The exchange can then respond yes, or can revise the set of nodes sat(λ∗ l ) and sat(λ∗ u) as necessary. 5.5 Termination Conditions Once each bidder has committed its new bids (and either met the RP rule or suffered the penalty) then round t closes.",
                "At this point, the task is to determine the new α-valuation, and in turn the provisional allocation λt and provisional prices pt .",
                "A termination condition is also checked, to determine whether to move the exchange to a last-and-final round.",
                "To define the α-valuation we compute the following two quantities: Pessimistic at Pessimistic (PP) Determine an efficient trade, λ∗ l , at pessimistic values, i.e. to solve maxλ   i vi(λi), and set PP=  i vi(λ∗ li).",
                "Pessimistic at Optimistic (PO) Determine an efficient trade, λ∗ u, at optimistic values, i.e. to solve maxλ   i vi(λi), and set PO=  i vi(λ∗ ui).",
                "First, note that PP ≥ PO and PP ≥ 0 by definition, for all bid-trees, although PO can be negative (because the right trade at v is not currently a useful trade at v).",
                "Recognizing this, define γeff (PP, PO) = 1 + PP − PO PP , (27) when PP > 0, and observe that γeff (PP, PO) ≥ 1 when this is defined, and that γeff (PP, PO) will start large and then trend towards 1 as the optimistic allocation converges towards the pessimistic allocation.",
                "In each round, we define αeff ∈ [0, 1] as: αeff =   0 when PP is 0 1/γeff otherwise (28) which is 0 while PP is 0 and then trends towards 1 once PP> 0 in some round.",
                "This is used to define α-valuation vα i = αeff vi + (1 − αeff )vi, ∀i, (29) which is used to define the provisional allocation and provisional prices.",
                "The effect is to endogenously define a schedule for moving from optimistic to pessimistic values across rounds, based on how close the trades are to one another.",
                "Termination Condition.",
                "In moving to the last-and-final round, and finally closing, we also care about the convergence of payments, in addition to the convergence towards an efficient trade.",
                "For this we introduce another parameter, αthresh ∈ [0, 1], that trends from 0 to 1 as the Threshold payments at lower and upper valuations converge.",
                "Consider the following parameter: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive) , (30) which is defined for PP > 0, where pthresh(v) denotes the Threshold payments at valuation profile v, Nactive is the number of bidders that are actively engaged in trade in the PP trade, and || · ||2 is the L2-norm.",
                "Note that γthresh is defined for payments and not payoffs.",
                "This is appropriate because it is the accuracy of the outcome of the exchange that matters: i.e. the trade and the payments.",
                "Given this, we define αthresh =   0 when PP is 0 1/γthresh otherwise (31) which is 0 while PP is 0 and then trends towards 1 as progress is made.",
                "Definition 5 (termination).",
                "ICE transitions to a lastand-final round when one of the following holds: 1. αeff ≥ CUTOFFeff and αthresh ≥ CUTOFFthresh, 2. there is no trade at the optimistic values, where CUTOFFeff , CUTOFFthresh ∈ (0, 1] determine the accuracy required for termination.",
                "At the end of the last-and-final round vα = v is used to define the final trade and the final Threshold payments.",
                "Example 9.",
                "Consider again Example 1, and consider the upper and lower bounds as depicted in Figure 1.",
                "First, if the sellers bounds were [−20, −4] then there is an optimistic trade but no pessimistic trade, and PO = −4 and PP = 0, and αeff = 0.",
                "At the bounds depicted, both the optimistic and the pessimistic trades occur and PO = PP = 4 and αeff = 1.",
                "However, we can see the Threshold payments are (17, −17) at v but (14, −14) at v. Evaluating γthresh , we have γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, and αthresh = 2/5.",
                "For CUTOFFthresh < 2/5 the exchange would remain open.",
                "On the other hand, if the buyers value for +AB was between [18, 24] and the sellers value for −AB was between [−12, −6], the Threshold payments are (15, −15) at both upper and lower bounds, and αthresh = 1. 256 Component Purpose Lines Agent.",
                "Captures strategic behavior and information revelation decisions 762 Model Support Provides XML support to load goods and valuations into world 200 World Keeps track of all agent, good, and valuation details 998 Exchange Driver & Communication Controls exchange, and coordinates remote agent behavior 585 Bidding Language Implements the tree-based bidding language 1119 Activity Rule Engine Implements the revealed preference rule with range support 203 Closing Rule Engine Checks if auction termination condition reached 137 WD Engine Provides WD-related logic 377 Pricing Engine Provides Pricing-related logic 460 MIP Builders Translates logic used by engines into our general optimizer formulation 346 Pricing Builders Used by three pricing stages 256 Winner Determination Builders Used by WD, activity rule, closing rule, and pricing constraint generation 365 Framework Support code; eases modular replacement of above components 510 Table 1: Exchange Component and Code Breakdown. 6.",
                "SYSTEMS INFRASTRUCTURE ICE is approximately 6502 lines of Java code, broken up into the functional packages described in Table 1.10 The prototype is modular so that researchers may easily replace components for experimentation.",
                "In addition to the core exchange discussed in this paper, we have developed an agent component that allows a user to simulate the behavior and knowledge of other players in the system, better allowing a user to formulate their strategy in advance of actual play.",
                "A user specifies a valuation model in an XMLinterpretation of our bidding language, which is revealed to the exchange via the agents strategy.",
                "Major exchange tasks are handled by engines that dictate the non-optimizer specific logic.",
                "These engines drive the appropriate MIP/LP builders.",
                "We realized that all of our optimization formulations boil down to two classes of optimization problem.",
                "The first, used by winner determination, activity rule, closing rule, and constraint generation in pricing, is a MIP that finds trades that maximize value, holding prices and slacks constant.",
                "The second, used by the three pricing stages, is an LP that holds trades constant, seeking to minimize slack, profit, or prices.",
                "We take advantage of the commonality of these problems by using common LP/MIP builders that differ only by a few functional hooks to provide the correct variables for optimization.",
                "We have generalized our back-end optimization solver interface11 (we currently support CPLEX and the LGPL- licensed LPSolve), and can take advantage of the load-balancing and parallel MIP/LP solving capability that this library provides. 7.",
                "DISCUSSION The bidding language was defined to allow for perfect symmetry between buyers and sellers and provide expressiveness in an exchange domain, for instance for mixed bidders interested in executing trades such as swaps.",
                "This proved especially challenging.",
                "The breakthrough came when we focused on changes in value for trades rather than providing absolute values for allocations.",
                "For simplicity, we require the same tree structure for both the upper and lower valuations. 10 Code size is measured in physical source line of code (SLOC), as generated using David A. Wheelers SLOC Count.",
                "The total of 6502 includes 184 for instrumentation (not shown in the table).",
                "The JOpt solver interface is another 1964 lines, and Castor automatically generates around 5200 lines of code for XML file manipulation. 11 http://econcs.eecs.harvard.edu/jopt This allows the language itself to ensure consistency (with the upper value at least the lower value on all trades) and enforce monotonic tightening of these bounds for all trades across rounds.",
                "It also provides for an efficient method to check the RP activity rule, because it makes it simple to reason about shared uncertainty between trades.",
                "The decision to adopt a direct and proxied approach in which bidders express their upper and lower values to a trusted proxy agent that interacts with the exchange was made early in the design process.",
                "In many ways this is the clearest and most immediate way to generalize the design in Parkes et al. [24] and make it iterative.",
                "In addition, this removes much opportunity for strategic manipulation: bidders are restricted to making (incremental) statements about their valuations.",
                "Another advantage is that it makes the activity rule easy to explain: bidders can always meet the activity rule by tightening bounds such that their true value remains in the support.12 Perhaps most importantly, having explicit information on upper and lower values permits progress in early rounds, even while there is no efficient trade at pessimistic values.",
                "Upper and lower bound information also provides guidance about when to terminate.",
                "Note that taken by itself, PP = PO does not imply that the current provisional trade is efficient with respect to all values consistent with current value information.",
                "The difference in values between different trades, aggregated across all bidders, could be similar at lower and upper bounds but quite different at intermediate values (including truth).",
                "Nevertheless, we conjecture that PP = PO will prove an excellent indicator of efficiency in practical settings where the shape of the upper and lower valuations does convey useful information.",
                "This is worthy of experimental investigation.",
                "Moreover, the use of price and RP activity provides additional guarantees.",
                "We adopted linear prices (prices on individual items) rather than non-linear prices (with prices on a trade not equal to the sum of the prices on the component items) early in the design process.",
                "The conciseness of this price representation is very important for computational tractability within the exchange and also to promote simplicity and transparency for bidders.",
                "The RP activity rule was adopted later, and is a good choice because of its excellent theoretical properties when coupled with CE prices.",
                "The following can be easily established: given exact CE prices pt−1 for provisional trade 12 This is in contrast to indirect price-based approaches, such as clock-proxy [1], in which bidders must be able to reason about the RP-constraints implied by bids in each round. 257 λt−1 at valuations vα , then if the upper and lower values at the start of round t already satisfy the RP rule (and without the need for any tie-breaking), the provisional trade is efficient for all valuations consistent with the current bid trees.",
                "When linear CE prices exist, this provides for a soundness and completeness statement: if PP = PO, linear CE prices exist, and the RP rule is satisfied, the provisional trade is efficient (soundness); if prices are exact CE prices for the provisional trade at vα , but the trade is inefficient with respect to some valuation profile consistent with the current bid trees, then at least one bidder must fail RP with her current bid tree and progress will be made (completeness).",
                "Future work must study convergence experimentally, and extend this theory to allow for approximate prices.",
                "Some strategic aspects of our ICE design deserve comment, and further study.",
                "First, we do not claim that truthfully responding to the RP rule is an ex post equilibrium.13 However, the exchange is designed to mimic the Threshold rule in its payment scheme, which is known to have useful incentive properties [16].",
                "We must be careful, though.",
                "For instance we do not suggest to provide αeff to bidders, because as αeff approaches 1 it would inform bidders that bid values are becoming irrelevant to determining the trade but merely used to determine payments (and bidders would become increasingly reluctant to increase their lower valuations).",
                "Also, no consideration has been given in this work to collusion by bidders.",
                "This is an issue that deserves some attention in future work. 8.",
                "CONCLUSIONS In this work we designed and prototyped a scalable and highly-expressive iterative combinatorial exchange.",
                "The design includes many interesting features, including: a new bid-tree language for exchanges, a new method to construct approximate linear prices from expressive languages, and a proxied elicitation method with optimistic and pessimistic valuations with a new method to evaluate a revealed- preference activity rule.",
                "The exchange is fully implemented in Java and is in a validation phase.",
                "The next steps for our work are to allow bidders to refine the structure of the bid tree in addition to values on the tree.",
                "We intend to study the elicitation properties of the exchange and we have put together a test suite of exchange problem instances.",
                "In addition, we are beginning to engage in collaborations to apply the design to airline takeoff and landing slot scheduling and to resource allocation in widearea network distributed computational systems.",
                "Acknowledgments We would like to dedicate this paper to all of the participants in CS 286r at Harvard University in Spring 2004.",
                "This work is supported in part by NSF grant IIS-0238147. 9.",
                "REFERENCES [1] L. Ausubel, P. Cramton, and P. Milgrom.",
                "The clock-proxy auction: A practical combinatorial auction design.",
                "In Cramton et al. [9], chapter 5. [2] M. Babaioff, N. Nisan, and E. Pavlov.",
                "Mechanisms for a spatially distributed market.",
                "In Proc. 5th ACM Conf. on Electronic Commerce, pages 9-20.",
                "ACM Press, 2001. 13 Given the Myerson-Satterthwaite impossibility theorem [22] and the method by which we determine the trade we should not expect this. [3] M. Ball, G. Donohue, and K. Hoffman.",
                "Auctions for the safe, efficient, and equitable allocation of airspace system resources.",
                "In S. Cramton, Shoham, editor, Combinatorial Auctions. 2004.",
                "Forthcoming. [4] D. Bertsimas and J. Tsitsiklis.",
                "Introduction to Linear Optimization.",
                "Athena Scientific, 1997. [5] S. Bikhchandani and J. M. Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 107(2):377-406, 2002. [6] C. Boutilier.",
                "A pomdp formulation of <br>preference elicitation</br> problems.",
                "In Proc. 18th National Conference on Artificial Intelligence (AAAI-02), 2002. [7] C. Boutilier and H. Hoos.",
                "Bidding languages for combinatorial auctions.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 2001. [8] W. Conen and T. Sandholm.",
                "<br>preference elicitation</br> in combinatorial auctions.",
                "In Proc. 3rd ACM Conf. on Electronic Commerce (EC-01), pages 256-259.",
                "ACM Press, New York, 2001. [9] P. Cramton, Y. Shoham, and R. Steinberg, editors.",
                "Combinatorial Auctions.",
                "MIT Press, 2004. [10] S. de Vries, J. Schummer, and R. V. Vohra.",
                "On ascending Vickrey auctions for heterogeneous objects.",
                "Technical report, MEDS, Kellogg School, Northwestern University, 2003. [11] S. de Vries and R. V. Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana, and T. Wilson.",
                "Testing linear pricing algorithms for use in ascending combinatorial auctions.",
                "Technical report, SEOR, George Mason University, 2003. [13] Y. Fu, J.",
                "Chase, B. Chun, S. Schwab, and A. Vahdat.",
                "Sharp: an architecture for secure resource peering.",
                "In Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 133-148.",
                "ACM Press, 2003. [14] B. Hudson and T. Sandholm.",
                "Effectiveness of query types and policies for <br>preference elicitation</br> in combinatorial auctions.",
                "In Proc. 3rd Int.",
                "Joint.",
                "Conf. on Autonomous Agents and Multi Agent Systems, pages 386-393, 2004. [15] V. Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [16] D. Krych.",
                "Calculation and analysis of Nash equilibria of Vickrey-based payment rules for combinatorial exchanges, Harvard College, April 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter, and C. DeMartini.",
                "A new and improved design for multi-object iterative auctions.",
                "Management Science, 2004.",
                "To appear. [18] E. Kwerel and J. Williams.",
                "A proposal for a rapid transition to market allocation of spectrum.",
                "Technical report, FCC Office of Plans and Policy, Nov 2002. [19] S. M. Lahaie and D. C. Parkes.",
                "Applying learning algorithms to <br>preference elicitation</br>.",
                "In Proc.",
                "ACM Conf. on Electronic Commerce, pages 180-188, 2004. [20] R. P. McAfee.",
                "A dominant strategy double auction.",
                "J. of Economic Theory, 56:434-450, 1992. [21] P. Milgrom.",
                "Putting auction theory to work: The simultaneous ascending auction.",
                "J.Pol.",
                "Econ., 108:245-272, 2000. [22] R. B. Myerson and M. A. Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [23] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. 2nd ACM Conf. on Electronic Commerce (EC-00), pages 1-12, 2000. [24] D. C. Parkes, J. R. Kalagnanam, and M. Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In Proc. 17th International Joint Conference on Artificial Intelligence (IJCAI-01), pages 1161-1168, 2001. [25] D. C. Parkes and L. H. Ungar.",
                "Iterative combinatorial auctions: Theory and practice.",
                "In Proc. 17th National Conference on Artificial Intelligence (AAAI-00), pages 74-81, July 2000. [26] S. J. Rassenti, V. L. Smith, and R. L. Bulfin.",
                "A combinatorial mechanism for airport time slot allocation.",
                "Bell Journal of Economics, 13:402-417, 1982. [27] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [28] T. Sandholm and C. Boutilier.",
                "<br>preference elicitation</br> in combinatorial auctions.",
                "In Cramton et al. [9], chapter 10. [29] P. R. Wurman and M. P. Wellman.",
                "AkBA: A progressive, anonymous-price combinatorial auction.",
                "In Second ACM Conference on Electronic Commerce, pages 21-29, 2000. 258"
            ],
            "original_annotated_samples": [
                "These bounds allow price discovery and useful <br>preference elicitation</br> in early rounds, and allow termination with an efficient trade despite partial information on bidder valuations.",
                "A pomdp formulation of <br>preference elicitation</br> problems.",
                "<br>preference elicitation</br> in combinatorial auctions.",
                "Effectiveness of query types and policies for <br>preference elicitation</br> in combinatorial auctions.",
                "Applying learning algorithms to <br>preference elicitation</br>."
            ],
            "translated_annotated_samples": [
                "Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores.",
                "Una formulación POMDP de problemas de <br>obtención de preferencias</br>.",
                "Elicitación de preferencias en subastas combinatorias.",
                "Efectividad de tipos de consultas y políticas para la <br>obtención de preferencias</br> en subastas combinatorias.",
                "Aplicando algoritmos de aprendizaje a la <br>obtención de preferencias</br>."
            ],
            "translated_text": "Presentamos el primer diseño para un intercambio combinatorio iterativo (ICE). El intercambio incorpora un lenguaje de oferta basado en árboles que es conciso y expresivo para los CE. Los postores especifican límites inferiores y superiores en su valor para diferentes intercambios. Estos límites permiten descubrir precios y obtener preferencias útiles en las primeras rondas, y permiten finalizar con un intercambio eficiente a pesar de contar con información parcial sobre las valoraciones de los postores. Toda la computación en el intercambio está cuidadosamente optimizada para aprovechar la estructura de los árboles de oferta y evitar la enumeración de intercambios. Una interpretación proxy de una regla de actividad de preferencia revelada garantiza progreso a lo largo de las rondas. Se utiliza un esquema de pago basado en VCG que ha demostrado mitigar oportunidades de negociación y comportamiento estratégico para determinar los pagos finales. El intercambio está completamente implementado y en una fase de validación. Categorías y Descriptores de Asignaturas: I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales: Algoritmos, Economía, Teoría. 1. INTRODUCCIÓN Los intercambios combinatorios combinan y generalizan dos mecanismos diferentes: subastas dobles y subastas combinatorias. En una subasta doble (DA), múltiples compradores y vendedores intercambian unidades de un bien idéntico [20]. En una subasta combinatoria (CA), un único vendedor tiene a la venta varios artículos heterogéneos [11]. Los compradores pueden tener complementariedades o sustituciones entre bienes, y se les proporciona un lenguaje de oferta expresivo. Un objetivo común en ambos diseños de mercado es determinar la asignación eficiente, que es la asignación que maximiza el valor total. Un intercambio combinatorio (CE) [24] es una subasta doble combinatoria que reúne a múltiples compradores y vendedores para comerciar múltiples bienes heterogéneos. Por ejemplo, en un intercambio por espectro inalámbrico, un postor puede declarar que está dispuesto a pagar $1 millón por un intercambio donde obtiene licencias para Nueva York, Boston y Filadelfia, y pierde su licencia para Washington DC. Por lo tanto, a diferencia de un DA, un CE permite que todos los participantes expresen valoraciones complejas a través de ofertas expresivas. A diferencia de una SA, una SE permite la propiedad fragmentada, con múltiples compradores y vendedores y agentes que compran y venden. Los CEs han recibido atención reciente tanto en el contexto de la asignación de espectro inalámbrico [18] como para la asignación de franjas horarias de despegue y aterrizaje en aeropuertos [3]. En ambos de estos dominios hay titulares con derechos de propiedad, y es importante facilitar una compleja reasignación de recursos de múltiples vías. Otro posible campo de aplicación para los EC es la asignación de recursos en sistemas distribuidos compartidos, como PlanetLab [13]. La instanciación de nuestro diseño de propósito general a dominios específicos es un paso siguiente convincente en nuestra investigación. Este documento presenta el primer diseño para un intercambio combinatorio iterativo (ICE). La génesis de este proyecto fue una clase, CS 286r Temas en la Interfaz entre Economía e Informática, impartida en la Universidad de Harvard en la primavera de 2004. Toda la clase estuvo dedicada al diseño y prototipado de un CE iterativo. El problema de diseño de ICE es multifacético y bastante difícil. La principal innovación en nuestro diseño es un lenguaje de oferta basado en árboles expresivo pero conciso (que generaliza lenguajes conocidos como XOR/OR [23]), y el acoplamiento estrecho de este lenguaje con algoritmos eficientes para retroalimentación de precios para guiar las ofertas, determinación de ganadores para determinar intercambios, y reglas de actividad de preferencia revelada para garantizar el progreso a lo largo de las rondas. El intercambio es iterativo: los postores expresan valoraciones superiores e inferiores sobre las operaciones al anotar su árbol de ofertas, y luego ajustan estos límites en respuesta a la retroalimentación de precios en cada ronda. La regla de pago umbral, introducida por Parkes et al. [24], se utiliza para determinar los pagos finales. El intercambio tiene una serie de interesantes propiedades teóricas. Por ejemplo, cuando existen precios lineales establecemos la solidez y la completitud: para los postores directos que ajustan sus límites para cumplir con las reglas de actividad manteniendo su verdadero valor dentro de los límites, el intercambio finalizará con la asignación eficiente. Además, la Regla del Agente de la Verdad 1 http://www.eecs.harvard.edu/∼parkes/cs286r/ice.html 249 WD ACC FAIR BALClosing RuleVickreyThreshold DONE ! HECHO 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR 2,2 +A +15 +8 +B +15 +8 COMPRADOR 2,2 -A -2 -6 -B -2 -6 VENDEDOR COMPRADOR, comprar AB VENDEDOR, vender AB 12 < PA+PB < 16 PA+PB=14 PA=PB=7 PCOMPRADOR = 16 - (4-0) = 12 PVENDEDOR = -12 - (4-0) = -16 PCOMPRADOR = 14 PVENDEDOR = -14 Pesimista Optimista = 1 Figura 1: Flujo de Control del Sistema ICE la asignación eficiente a menudo puede determinarse sin que los postores revelen, o incluso sepan, su valor exacto para todas las operaciones. Esto es esencial en dominios complejos donde el problema de valoración puede ser muy desafiante para un participante [28]. Si bien no podemos afirmar que la subasta directa sea un equilibrio del intercambio (y de hecho, no deberíamos esperarlo según el teorema de imposibilidad de Myerson-Satterthwaite [22]), la regla de pago del Umbral minimiza el incentivo ex post para manipular en comparación con todas las reglas de pago equilibradas en presupuesto. El intercambio está implementado en Java y actualmente se encuentra en validación. Al describir el intercambio, primero proporcionaremos una visión general de los componentes principales e introduciremos varios ejemplos prácticos. Luego, introducimos los componentes básicos para una variación simple de una sola vez en la que los postores declaran sus valores exactos para intercambios en una sola ronda. Luego describimos el intercambio iterativo completo, con valores superiores e inferiores, retroalimentación de precios, reglas de actividad y condiciones de terminación. Presentamos algunas propiedades teóricas del intercambio, y concluimos con una discusión para motivar nuestras decisiones de diseño principales, y sugerir algunos pasos a seguir. 2. UNA VISIÓN GENERAL DEL DISEÑO DE ICE El diseño tiene cuatro componentes principales, los cuales presentaremos en orden a lo largo del resto del documento: • Lenguaje de oferta basado en árboles expresivo y conciso. El lenguaje describe valores para intercambios, como mi valor para vender AB y comprar C es de $100, o mi valor para vender ABC es de -$50, con valores negativos indicando que un oferente debe recibir un pago para que el intercambio sea aceptable. El lenguaje permite a los postores expresar límites superiores e inferiores en el valor, los cuales pueden ser ajustados en cada ronda. • Determinación del ganador. La determinación del ganador (WD) se formula como un programa entero mixto (MIP), con la estructura de los árboles de oferta capturada explícitamente en la formulación. Comparar la solución en los valores superiores e inferiores permite tomar una decisión sobre la terminación, con el progreso en rondas intermedias impulsado por una valoración intermedia y los valores inferiores adoptados al finalizar. • Pagos. Los pagos se calculan utilizando la regla de pago del umbral [24], con las valoraciones intermedias adoptadas en las primeras rondas y valores más bajos adoptados al finalizar. • Retroalimentación de precios. Se calcula un precio aproximado para cada artículo en el intercambio en cada ronda, en función de las valoraciones intermedias y el intercambio provisional. Los precios se optimizan para aproximar los precios de equilibrio competitivo, y luego se optimizan aún más para aproximar mejor los pagos del umbral actual con los lazos restantes rotos para favorecer los precios equilibrados entre diferentes artículos. Al calcular los precios, adoptamos los métodos de generación de restricciones para explotar la estructura del lenguaje de oferta y evitar enumerar todos los intercambios factibles. El subproblema para generar nuevas restricciones es una variación del problema WD. • Regla de actividad. Una regla de actividad de preferencia revelada [1] garantiza progreso a lo largo de las rondas. Para permanecer activo, un oferente debe ajustar los límites para que haya suficiente información para definir un intercambio que maximice el excedente a los precios actuales. Otra variación del problema de WD se formula, tanto para verificar que se cumple la regla de actividad como para proporcionar retroalimentación a un postor para explicar cómo cumplir la regla. Se proporciona un esquema del flujo de control del sistema ICE en la Figura 1. Volveremos a este ejemplo más adelante en el documento. Por ahora, simplemente observa en este ejemplo de dos agentes que los agentes establecen límites inferiores y superiores que son verificados en la regla de actividad, y luego pasados a la determinación del ganador (WD), y luego a través de tres etapas de fijación de precios (precisión, equidad, equilibrio). Al pasar la regla de cierre (en la que se verifican los parámetros αeff y αthresh para la convergencia del comercio y los pagos), el intercambio pasa a una última y definitiva ronda. Al final de esta ronda, el intercambio y los pagos finalmente se determinan, basados en las valoraciones más bajas. 2.1 Trabajo Relacionado En la literatura se conocen muchos CAs de un solo lado con precios ascendentes [10, 25, 29]. También se han propuesto enfoques de elicitación directa para los AC unilaterales en los que los agentes responden a preguntas explícitas sobre sus valoraciones [8, 14, 19]. Un número de CAs ascendentes están diseñados para trabajar con precios simples en artículos [12, 17]. Los métodos de generación de precios que utilizamos en ICE generalizan los métodos de estos artículos anteriores. Parkes et al. [24] estudiaron intercambios combinatorios de oferta sellada e introdujeron la regla de pago umbral. Posteriormente, Krych [16] demostró experimentalmente que la regla del Umbral promueve asignaciones eficientes. No tenemos conocimiento de ningún estudio previo sobre CEs iterativos. Las estrategias dominantes DAs son conocidas por la demanda unitaria [20] y también por agentes de mente única [2]. No se conocen mecanismos de estrategia dominante para el problema general de la CE. ICE es un diseño de subasta híbrido, ya que combina precios simples de artículos para impulsar las ofertas en las primeras rondas con WD combinatorio y pagos, una característica que comparte con el diseño de reloj-proxy de Ausubel et al. [1] para subastas unilaterales. Adoptamos una variación de la regla de actividad de preferencia revelada en las subastas de proxy de reloj. El lenguaje de subasta comparte algunos elementos estructurales con el lenguaje LGB de Boutilier y Hoos [7], pero tiene semántica muy diferente. Rothkopf et al. [27] también describen un lenguaje de oferta basado en árboles restringido. En LGB, la semántica es la de la lógica proposicional, con los mismos elementos en una asignación capaces de satisfacer un árbol en múltiples lugares. Aunque esto puede hacer que LGB sea especialmente conciso en algunos contextos, la semántica que proponemos parece proporcionar una utilidad local, de modo que el valor de un componente en un árbol pueda ser comprendido de forma independiente al resto del árbol. La idea de capturar la estructura de nuestro lenguaje de oferta de manera explícita dentro de una formulación de programación entera mixta sigue los desarrollos en Boutilier [6]. 3. PRELIMINARES En nuestro modelo, consideramos un conjunto de bienes, indexados {1, . . . , m} y un conjunto de postores, indexados {1, . . . , n}. La asignación inicial de bienes se denota como x0 = (x0 1, . . . , x0 n), donde x0 i = (x0 i1, . . . , x0 im) y x0 ij ≥ 0 para el bien j indicando el número de unidades del bien j que posee el postor i. Un intercambio λ = (λ1, . . . , λn) denota el cambio en la asignación, con λi = (λi1, . . . , λim) donde λij ∈ es el cambio en el número de unidades del ítem j para el postor i. Entonces, la asignación final es x1 = x0 + λ. Cada postor tiene un valor vi(λi) ∈ ¡ para una transacción λi. Este valor puede ser positivo o negativo, y representa el cambio en el valor entre la asignación final x0 i +λi y la asignación inicial x0 i. La utilidad es cuasi-lineal, con ui(λi, p) = vi(λi)−p para el intercambio λi y el pago p ∈ ¡. El precio p puede ser negativo, lo que indica que el postor recibe un pago por la transacción. Utilizamos el término \"pago\" de manera intercambiable con \"utilidad\". Nuestro objetivo en el diseño de ICE es implementar el comercio eficiente. El intercambio eficiente, λ∗, maximiza el aumento total de valor entre los postores. Definición 1 (Comercio eficiente). El intercambio eficiente λ∗ resuelve max (λ1,...,λn) ¢ i vi(λi) s.t. λij + x0 ij ≥ 0, ∀i, ∀j (1) ¢ i λij ≤ 0, ∀j (2) λij ∈   (3) Las restricciones (1) aseguran que ningún agente venda más artículos de los que tiene en su asignación inicial. Las restricciones (2) permiten la disposición gratuita y permiten que los intercambios factibles vendan más artículos de los que se compran (pero no al revés). Posteriormente, adoptamos Feas(x0) para denotar el conjunto de intercambios factibles, dados estos límites y una asignación inicial x0 = (x0 1, . . . , x0 n). 3.1 Ejemplos Prácticos En esta sección, proporcionamos tres ejemplos simples de instancias que utilizaremos para ilustrar varios componentes del intercambio. Todos los tres ejemplos tienen solo un vendedor, pero esto es puramente ilustrativo. Ejemplo 1. Un vendedor y un comprador, dos bienes {A, B}, con el vendedor teniendo una asignación inicial de AB. Cambios en los valores de los intercambios: vendedor comprador Y (−A, −B) Y (+A, +B) -10 +20 El Y indica que tanto el comprador como el vendedor solo están interesados en intercambiar ambos bienes como un paquete. Aquí, el intercambio eficiente (que maximiza el valor) es para el vendedor vender AB al comprador, denotado como λ∗ = ([−1, −1], [+1, +1]). Ejemplo 2. Un vendedor y cuatro compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de las transacciones: vendedor comprador1 comprador 2 comprador 3 comprador 4 OR(−A, −B, AND(+A, XOR(+A, AND(+C, XOR(+C, −C, −D) +B) +B) +D) +D) 0 +6 +4 +3 +2 El OR indica que el vendedor está dispuesto a vender cualquier cantidad de bienes. El XOR indica que los compradores 2 y 4 están dispuestos a comprar como máximo uno de los dos bienes en los que están interesados. El comercio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD al comprador 3, denotado λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, 0, 0], [0, 0, +1, +1], [0, 0, 0, 0]). 2,2 +A +10 +B +10 COMPRADOR 2,2 -A -5 -B -5 VENDEDOR Ejemplo 1: Ejemplo 3: 2,2 +C +D COMPRADOR 2 2,2 +A +B COMPRADOR 1 +11 +84,4 -B VENDEDOR -A -C -D Ejemplo 2: 1,1 +A +B COMPRADOR 2 2,2 +A +B COMPRADOR 1 +6 +40,4 -B VENDEDOR -C -D-A 1,1 +C +D COMPRADOR 4 2,2 +C +D +3 +2 COMPRADOR 3 -18 Figura 2: Ejemplo de Árboles de Ofertas. Ejemplo 3. Un vendedor y dos compradores, cuatro bienes {A, B, C, D}, con el vendedor teniendo una asignación inicial de ABCD. Cambios en los valores de los intercambios: vendedor comprador1 comprador 2 Y (−A, −B, −C, −D) Y (+A, +B) Y (+C, +D) -18 +11 +8 El intercambio eficiente es que el paquete AB vaya al comprador 1 y el paquete CD vaya al comprador 2, denotado por λ∗ = ([−1, −1, −1, −1], [+1, +1, 0, 0], [0, 0, +1, +1]). 4. Un DISEÑO DE INTERCAMBIO DE UNA SOLA VEZ La descripción de ICE se divide en dos secciones: una sola vez (oferta sellada) e iterativa. En esta sección abstraemos el aspecto iterativo e introducimos una especialización del lenguaje basado en árboles que admite solo valores exactos en los nodos. 4.1 Lenguaje de Ofertas Basado en Árboles El lenguaje de ofertas está diseñado para ser expresivo y conciso, completamente simétrico con respecto a compradores y vendedores, y para extenderse y capturar ofertas de compradores y vendedores mixtos, que van desde intercambios simples hasta operaciones comerciales altamente complejas. Las ofertas se expresan como árboles de ofertas anotados, y definen el valor de un oferente para todos los intercambios posibles. El lenguaje define cambios en los valores de las transacciones, con hojas anotadas con los artículos intercambiados y nodos anotados con cambios en los valores (ya sea positivos o negativos). La característica principal es que tiene un operador lógico de intervalo general en los nodos internos, y que define una semántica cuidadosa para propagar valores dentro del árbol. Ilustramos el lenguaje en cada uno de los Ejemplos 1-3 en la Figura 2. El lenguaje tiene una estructura de árbol, con operaciones en elementos definidos en las hojas y valores anotados en nodos y hojas. Los nodos tienen valores de cero donde no se indica ningún valor. Los nodos internos también están etiquetados con rangos de intervalo-escoge (IC). Dada una transacción, la semántica del lenguaje define qué nodos en el árbol pueden ser satisfechos o activados. Primero, si un niño está encendido, entonces su padre también debe estar encendido. Segundo, si un nodo padre está encendido, entonces el número de hijos que están encendidos debe estar dentro del rango de IC en el nodo padre. Finalmente, las hojas en las que el postor está comprando artículos solo pueden estar activas si los artículos se proporcionan en el intercambio. Por ejemplo, en el Ejemplo 2 podemos considerar el comercio eficiente, y observar que en este comercio todos los nodos en los árboles de los compradores 1 y 3 (y también el vendedor), pero ninguno de los nodos en los árboles de los compradores 2 y 4, pueden estar encendidos. Por otro lado, en 251 el intercambio en el que A va al comprador 2 y D al comprador 4, entonces los nodos raíz y hojas apropiados pueden estar encendidos para los compradores 2 y 4, pero ningún nodo puede estar encendido para los compradores 1 y 3. Dado un intercambio, a menudo hay varias formas de elegir el conjunto de nodos satisfechos. La semántica del lenguaje requiere que se activen los nodos que maximicen el valor sumado entre los nodos satisfechos. Considera el árbol de oferta Ti del ofertante i. Esto define nodos β ∈ Ti, de los cuales algunos son hojas, Leaf (i) ⊆ Ti. Deje que Child(β) ⊆ Ti denote los hijos de un nodo β (que no es en sí mismo una hoja). Todos los nodos excepto las hojas están etiquetados con el operador de intervalo-escoger [IC x i (β), ICy i (β)]. Cada nodo también está etiquetado con un valor, viβ ∈ ¡. Cada hoja β está etiquetada con un intercambio, qiβ ∈ m (es decir, las hojas pueden definir un intercambio agrupado en más de un tipo de artículo). Dado un intercambio λi al postor i, los operadores de elección de intervalos y los intercambios en las hojas definen qué nodos pueden ser satisfechos. A menudo habrá una elección. Las corbatas se rompen para maximizar el valor. Que satiβ ∈ {0, 1} denote si el nodo β está satisfecho. La solución sati es válida dado el árbol Ti y el intercambio λi, escrita sati ∈ válido(Ti, λi), si y solo si: ¢ β∈Hoja (i) qiβj · satiβ ≤ λij , ∀i, ∀j (4) ICx i (β)satiβ ≤ ¢ β ∈Hijo(β) satiβ ≤ ICy i (β)satiβ, ∀β /∈ Hoja (i) (5) En otras palabras, un conjunto de hojas solo puede considerarse satisfecho dado el intercambio λi si el aumento total en cantidad sumado en todas esas hojas está cubierto por el intercambio, para todos los bienes (Eq. 4). Esto funciona tanto para vendedores como para compradores: para los vendedores, un intercambio es negativo y esto requiere que el número total de artículos indicados como vendidos en el árbol sea al menos igual al número total vendido según lo definido en el intercambio. También necesitamos la propagación ascendente: cada vez que un nodo que no sea la raíz esté satisfecho, su padre también debe estar satisfecho (por β ∈Child(β) satiβ ≤ ICy i (β)satiβ en la Ecuación 5). Finalmente, necesitamos la propagación hacia abajo: cada vez que un nodo interno se satisface, entonces el número apropiado de hijos también debe estar satisfecho (Ec. 5). El valor total del comercio λi, dado el árbol de ofertas Ti, se define como: vi(Ti, λi) = máximo sat∈valid(Ti,λi) ¢ β∈T vβ · satβ (6) El lenguaje basado en árboles generaliza los lenguajes existentes. Por ejemplo: IC(2, 2) en un nodo con 2 hijos es equivalente a un operador AND; IC(1, 3) en un nodo con 3 hijos es equivalente a un operador OR; e IC(1, 1) en un nodo con 2 hijos es equivalente a un operador XOR. De manera similar, los lenguajes de oferta XOR/OR pueden ser expresados directamente como un árbol de oferta en nuestro lenguaje. La determinación del ganador Este apartado define el problema de determinación del ganador, el cual está formulado como un MIP y resuelto en nuestra implementación con un solucionador comercial. El solucionador utiliza búsqueda de ramificación y acotamiento con generación de cortes dinámicos y heurísticas de ramificación para resolver MIPs grandes en tiempos de ejecución económicamente factibles. El lenguaje OR* es el lenguaje OR con elementos ficticios para proporcionar estructura adicional. OR* se sabe que es expresivo y conciso. Sin embargo, no se sabe si OR* domina a XOR/OR en cuanto a concisión [23]. En la definición de la representación MIP, tenemos cuidado de evitar una enumeración basada en XOR de todos los paquetes. Una variación del problema de WD se reutiliza muchas veces dentro del intercambio, por ejemplo, para la generación de columnas en la fijación de precios y para verificar la preferencia revelada. Dado el conjunto de árboles de ofertas T = (T1, . . . , Tn) y la asignación inicial x0, la formulación mixta entera para WD es: WD(T, x0): max λ, sat ¢ i ¢ β ∈ Ti viβ · satiβ sujeto a (1), (2), satiβ ∈ {0, 1}, λij ∈ sati ∈ válido(Ti, λi), ∀i. Algunos bienes pueden quedar sin asignar porque se permite la disposición libre dentro de las reglas de liquidación de la determinación del ganador. Estos artículos pueden ser asignados de nuevo a los agentes que vendieron los artículos, es decir, para los cuales λij < 0. 4.3 Cálculo de Pagos Umbral La regla de pago umbral se basa en los pagos en el mecanismo de Vickrey-Clarke-Groves (VCG) [15], que en sí mismo es veraz y eficiente pero no satisface el equilibrio presupuestario. El equilibrio presupuestario requiere que los pagos totales al intercambio sean iguales a los pagos totales realizados por el intercambio. En VCG, el pago pagado por el agente i es pvcg,i = ˆv(λ∗ i ) − (V ∗ − V−i) (7) donde λ∗ es el intercambio eficiente, V ∗ es el valor reportado de este intercambio, y V−i es el valor reportado del intercambio eficiente que se implementaría sin el postor i. Llamamos a ∆vcg,i = V ∗ − V−i el descuento VCG. Por ejemplo, en el Ejemplo 1 pvcg,vendedor = −10 − (+10 − 0) = −20 y pvcg,comprador = +20 − (+10 − 0) = 10, y el intercambio se llevaría a cabo con un déficit presupuestario de −20 + 10 = −10. La regla de pago del umbral [24] determina pagos equilibrados presupuestarios para minimizar el error máximo entre todos los agentes respecto al resultado VCG. Definición 2. El esquema de pago de umbral implementa el intercambio eficiente λ∗ dado los ofertas, y establece los pagos pthresh,i = ˆvi(λ∗ i ) − ∆i, donde ∆ = (∆1, . . . , ∆n) se establece para minimizar maxi(∆vcg,i − ∆i) sujeto a ∆i ≤ ∆vcg,i e   i ∆i ≤ V ∗ (esto garantiza el equilibrio presupuestario). Ejemplo 4. En el Ejemplo 2, los descuentos de VCG son (9, 2, 0, 1, 0) para el vendedor y cuatro compradores respectivamente, los pagos de VCG son (−9, 4, 0, 2, 0) y el intercambio se realiza con un déficit de -3. En Threshold, los descuentos son (8, 1, 0, 0, 0) y los pagos son (−8, 5, 0, 3, 0). Esto minimiza el error en el peor de los casos para los descuentos VCG en todos los esquemas de pago equilibrados en presupuesto. Los pagos de umbral están diseñados para minimizar el incentivo máximo ex post para manipular. Krych [16] confirmó que Threshold promueve la eficiencia asignativa en el equilibrio de Bayes-Nash restringido y aproximado. 5. El diseño ICE Estamos listos para presentar el diseño de intercambio combinatorio iterativo (ICE). Se introducen varios componentes nuevos, en relación con el diseño para el intercambio único. En lugar de proporcionar valoraciones precisas, los postores pueden proporcionar valoraciones inferiores y superiores y revisar esta información de oferta en cada ronda. El intercambio proporciona retroalimentación basada en precios 252 para guiar a los postores en este proceso, y finaliza con un intercambio eficiente (o aproximadamente eficiente) con respecto a las valoraciones reportadas. En cada ronda t ∈ {0, 1, . . .} se utilizan los límites inferiores y superiores actuales, vt y vt, para definir un perfil de valoración provisional vα (la α-valoración), junto con un intercambio provisional λt y precios provisionales pt = (pt 1, . . . , pt m) en los artículos. La α-valoración es una combinación lineal de las valoraciones superiores e inferiores actuales, con αEFF ∈ [0, 1] elegido endógenamente en función de la cercanía del intercambio optimista (en v) y el intercambio pesimista (en v). Los precios pt se utilizan para informar una regla de actividad y avanzar hacia un comercio eficiente. 5.1 Valoraciones superiores e inferiores El lenguaje de la oferta se amplía para permitir que un oferente i informe un valor inferior y superior (viβ, viβ) en cada nodo. Estos ocupan el lugar del valor exacto viβ definido en la Sección 4.1. Basándonos en estas etiquetas, podemos definir las funciones de valoración vi(Ti, λi) y vi(Ti, λi), utilizando exactamente la misma semántica que en la Ecuación (6). Decimos que un árbol de ofertas está bien formado si viβ ≤ viβ para todos los nodos. El siguiente lema es útil: Lema 1. Dado un árbol bien formado, T, entonces vi(Ti, λi) ≤ vi(Ti, λi) para todos los intercambios. Prueba. Supongamos que existe algún λi para el cual vi(Ti, λi) > vi(Ti, λi). Entonces, maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ > maxsat∈valid(Ti,λi)   β∈Ti viβ · satβ. Sin embargo, esto es una contradicción porque el intercambio λ que define vi(Ti, λi) sigue siendo factible con límites superiores vi, y viβ ≥ viβ para todos los nodos β en un árbol bien formado. 5.2 Retroalimentación de precios En cada ronda, se determinan los precios de equilibrio competitivo aproximados (CE), pt = (pt 1, . . . , pt m). Dado estos precios provisionales, el precio en el intercambio λi para el postor i es pt (λi) = j≤m pt j · λij. Definición 3 (precios de la CE). Los precios p∗ son precios de equilibrio competitivo si el intercambio eficiente λ∗ está respaldado a precios p∗, de modo que para cada postor: λ∗ i ∈ arg max λ∈Feas(x0) {vi(λi) − p∗ (λi)} (8) Los precios de CE no siempre existirán y a menudo necesitaremos calcular precios aproximados [5]. Extendemos las ideas de Rassenti et al. [26], Kwasnica et al. [17] y Dunford et al. [12], y seleccionamos precios aproximados de la siguiente manera: I: Precisión. Primero, calculamos los precios que minimizan el error máximo en las restricciones de mejor respuesta de todos los postores. II: Equidad. Segundo, rompemos los empates para preferir precios que minimicen la desviación máxima de los pagos umbral entre todos los postores. III: Equilibrio. En tercer lugar, rompemos los empates para preferir precios que minimicen el precio máximo entre todos los artículos. En conjunto, estos pasos están diseñados para promover la informatividad de los precios en impulsar el progreso a lo largo de las rondas. Al calcular los precios, explicamos cómo calcular precios aproximados (o de otra manera) para lenguajes de oferta estructurados, sin enumerar todos los intercambios posibles. Para esto, adoptamos la generación de restricciones para manejar de manera eficiente un número exponencial de restricciones. Cada paso se describe detalladamente a continuación. Yo: Precisión. Adoptamos una definición de precisión de precio que generaliza las nociones adoptadas en trabajos anteriores para lenguajes de oferta no estructurados. Que λt denote el comercio provisional actual y suponga que la valoración provisional es vα. Para calcular precios de CE precisos, consideramos: min p,δ δ (9) s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ (10) δ ≥ 0,pj ≥ 0, ∀j. Este programa lineal (LP) está diseñado para encontrar precios que minimicen el error en el peor de los casos entre todos los agentes. De la definición de los precios de equilibrio competitivo (CE), se sigue que los precios de equilibrio competitivo tendrían δ = 0 como solución a (9), momento en el cual el intercambio λt i estaría en el conjunto de mejor respuesta de cada agente (con λt i = ∅, es decir, sin intercambio, para todos los agentes sin excedente para el intercambio a los precios). Ejemplo 5. Podemos ilustrar la formulación (9) en el Ejemplo 2, asumiendo para simplificar que vα = v (es decir, verdad). El comercio eficiente asigna AB al comprador 1 y CD al comprador 3. La precisión buscará los precios p(A), p(B), p(C) y p(D) para minimizar el δ ≥ 0 requerido para satisfacer las restricciones: p(A) + p(B) + p(C) + p(D) ≥ 0 (vendedor) p(A) + p(B) ≤ 6 + δ (comprador 1) p(A) + δ ≥ 4, p(B) + δ ≥ 4 (comprador 2) p(C) + p(D) ≤ 3 (comprador 3) p(C) + δ ≥ 2, p(D) + δ ≥ 2 (comprador 4) Una solución óptima requiere que p(A) = p(B) = 10/3, con δ = 2/3, y que p(C) y p(D) tomen valores como p(C) = p(D) = 3/2. Pero, (9) tiene un número exponencial de restricciones (Ec. 10). En lugar de resolverlo explícitamente, utilizamos la generación de restricciones [4] y generamos dinámicamente un subconjunto suficiente de restricciones. Que \\(i\\) denote un subconjunto manejable de todos los intercambios factibles posibles para el oferente \\(i\\). Entonces, una versión relajada de (9) (escrita ACC) se formula sustituyendo (10) con vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ, ∀i, ∀λ ∈   i , (11) donde   i es un conjunto de intercambios que son factibles para el postor i dado las otras ofertas. Fijando los precios p∗, luego resolvemos n subproblemas (uno para cada postor), max λ vα i (λi) − p∗ (λi) [R-WD(i)] s.t. λ ∈ Feas(x0), (12) para verificar si la solución (p∗, δ∗) a ACC es factible en el problema (9). En R-WD(i) el objetivo es determinar un intercambio más preferido para cada postor a estos precios. Que ˆλi denote la solución a R-WD(i). Verificar la condición: vα i (ˆλi) − p∗ (ˆλ) ≤ vα i (λt i) − p∗ (λt i) + δ∗ , (13) y si esta condición se cumple para todos los postores i, entonces la solución (p∗ , δ∗ ) es óptima para el problema (9). De lo contrario, se agrega el intercambio ˆλi a i para todos los postores i para los cuales esta restricción se viola en 253 y volvemos a resolver el LP con el nuevo conjunto de restricciones. II: Equidad. Segundo, rompemos los empates restantes para preferir precios justos: eligiendo precios que minimicen el error en el peor de los casos con respecto a los pagos umbral (es decir, la utilidad para los postores con pagos umbral), pero sin elegir precios que sean menos precisos. Ejemplo 6. Por ejemplo, la precisión en el Ejemplo 1 (representado en la Figura 1) requiere que 12 ≤ pA + pB ≤ 16 (para vα = v). En estas valoraciones, los pagos umbral serían de 2 para tanto el vendedor como el comprador. Esto se puede lograr exactamente en la fijación de precios con pA + pB = 14. El método de desempate de equidad se formula como el siguiente LP: min p,π π [FAIR] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (14) π ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i (15) π ≥ 0,pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima, de ACC. El objetivo aquí es el mismo que en la regla de pago del umbral (ver Sección 4.3): minimizar el error máximo entre el pago del postor (en vα) para el intercambio provisional y el pago VCG (en vα). El problema FAIR también se resuelve mediante la generación de restricciones, utilizando R-WD(i) para agregar restricciones adicionales violadas según sea necesario. III: Equilibrio. En tercer lugar, rompemos los empates restantes para preferir precios equilibrados: eligiendo precios que minimicen el precio máximo entre todos los artículos. Volviendo de nuevo al Ejemplo 1, representado en la Figura 1, vemos que la precisión y la equidad requieren que p(A) + p(B) = 14. Finalmente, el conjunto de equilibrio establece que p(A) = p(B) = 7. El equilibrio está justificado cuando, manteniendo todo lo demás igual, los elementos son más propensos a tener valores similares que diferentes. El LP para el equilibrio se formula de la siguiente manera: min p,Y Y [BAL] s.t. vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀i, ∀λ ∈   i (16) π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀i, (17) Y ≥ pj, ∀j (18) Y ≥ 0, pj ≥ 0, ∀j, donde δ∗ representa el error en la solución óptima de ACC y π∗ representa el error en la solución óptima de FAIR. La generación de restricciones también se utiliza para resolver BAL, generando nuevos intercambios para i según sea necesario. El problema R-WD(i) es una especialización del problema WD, en el que el objetivo es maximizar el pago de un único postor, en lugar del valor total entre todos los postores. Se resuelve como un MIP, al reescribir el objetivo en WD(T, x0) como max{viβ · satiβ − j p∗ j · λij} para el agente i. Por lo tanto, la estructura del lenguaje del árbol de ofertas se explota para generar nuevas restricciones, ya que esto se resuelve como un MIP conciso. Los otros postores se mantienen en el MIP (pero no aparecen en el objetivo) y se utilizan para definir el espacio de intercambios factibles. Los métodos de Dunford et al. [12], que utilizan un enfoque de núcleo, también están estrechamente relacionados. El uso del equilibrio fue defendido por Kwasnica et al. [17]. Dunford et al. [12] prefieren suavizar los precios a lo largo de las rondas. Comentario 1: Refinamiento lexicográfico. Para los tres subproblemas también realizamos un refinamiento lexicográfico (con respecto a los postores en ACC y FAIR, y con respecto a los bienes en BAL). Por ejemplo, en ACC minimizamos sucesivamente el error máximo entre todos los postores. Dada una solución inicial, primero identificamos el error en todos los postores para quienes una restricción (11) está vinculante. Para dicho postor i, la restricción se reemplaza por vα i (λ) − p(λ) ≤ vα i (λt i) − p(λt i) + δ∗ i , ∀λ ∈   i , (19) y el error para el postor i ya no aparece explícitamente en el objetivo. ACC se vuelve a resolver y avanza al minimizar aún más el error máximo entre todos los postores que aún no han sido identificados. Esto continúa, fijando a cualquier nuevo postor para quien una de las restricciones (11) sea vinculante, hasta que el error esté optimizado lexicográficamente para todos los postores. El mismo proceso exacto se repite para FAIR y BAL, con los postores fijados y las restricciones (15) reemplazadas por π∗ i ≥ πvcg,i − (vα i (λt i) − p(λt i)), ∀λ ∈   i , (donde π∗ i es el objetivo actual) en FAIR, y los artículos fijados y las restricciones (18) reemplazadas por p∗ j ≥ pj (donde p∗ j representa el objetivo para el precio máximo en ese artículo) en BAL. Comentario 2: Computación. Todos los límites en i se mantienen, y este conjunto crece en todas las etapas y en todas las rondas del intercambio. Por lo tanto, el esfuerzo computacional en la generación de restricciones se reutiliza. En la implementación, nos aseguramos de abordar una serie de problemas que surgen debido a problemas de punto flotante. Preferimos pecar de conservadores al determinar si agregar o no otra restricción al realizar la verificación (13). Esto evita problemas de inviabilidad posteriores. Además, al fijar a los postores con el fin de refinar lexicográficamente, relajamos las restricciones asociadas con un pequeño > 0 en el lado derecho. 5.3 Reglas de Actividad de Preferencia Revelada El papel de las reglas de actividad en la subasta es garantizar tanto la consistencia como el progreso en las rondas [21]. La consistencia en nuestro intercambio requiere que los oferentes ajusten los límites a medida que avanza el intercambio. Las reglas de la actividad garantizan que los postores estén activos durante las primeras rondas y promueven una elicitación útil a lo largo del intercambio. Adoptamos una regla de actividad de preferencia revelada (RP) simple. La idea se basa vagamente en la regla de RP en Ausubel et al. [1], donde se utiliza para los AC unilaterales. La motivación es requerir más que simplemente consistencia: necesitamos que los oferentes proporcionen suficiente información para que el sistema pueda demostrar que una asignación es (aproximadamente) eficiente. Es útil pensar en los postores interactuando con agentes de proxy que actuarán en su nombre al responder a los precios provisionales pt−1 determinados al final de la ronda t − 1. El único conocimiento que tiene un intermediario sobre la valoración de un postor es a través del árbol de ofertas. Supongamos que un intermediario fue consultado por la bolsa y se le preguntó en qué operación estaba más interesado el oferente a los precios provisionales. La regla de RP dice lo siguiente: el proxy debe tener suficiente 7. Por ejemplo, aplicando esto a la precisión en el Ejemplo 2, resolvemos una vez y encontramos que los postores 1 y 2 son vinculantes, con un error δ∗ = 2/3. Fijamos estos y luego minimizamos el error para los postores 3 y 4. Finalmente, esto da p(A) = p(B) = 10/3 y p(C) = p(D) = 5/3, con precisión de 2/3 para los postores 1 y 2 y 1/3 para los postores 3 y 4. Se necesitan 254 información para poder determinar este intercambio que maximiza el excedente al precio actual. Considera los siguientes ejemplos: Ejemplo 7. Un postor tiene XOR(+A, +B) y un valor de +5 en la hoja +A y un rango de valores de [5,10] en la hoja +B. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el representante sabe que, sin importar cómo se resuelva la incertidumbre restante del valor en +B, el postor siempre preferirá (débilmente) +B a +A. Ejemplo 8. Un postor tiene XOR(+A, +B) y límites de valor [5, 10] en el nodo raíz y un valor de 1 en la hoja +A. Supongamos que los precios actuales son 3 por cada uno de A y B. La regla de RP se cumple porque el postor siempre preferirá +A a +B a precios iguales, sin importar cómo se resuelva finalmente el valor incierto en el nodo raíz. Sobrecargando la notación, sea vi ∈ Ti una valoración que sea consistente con las valoraciones inferiores y superiores en el árbol de oferta Ti. Definición 4. El árbol de oferta Ti satisface RP a precios pt−1 si y solo si existe algún intercambio factible L∗ para el cual, vi(L∗ i ) − pt−1 (L∗ i ) ≥ max λ∈Feas(x0) vi(λi) − pt−1 (λi), ∀vi ∈ Ti. Para determinar esto para el postor i, resolvemos una secuencia de problemas, cada uno de los cuales es una variación del problema WD. Primero, construimos un intercambio candidato de límite inferior, que es un intercambio factible que resuelve: max λ vi(λi) − pt−1 (λi) [RP1(i)] s.t. λ ∈ Feas(x0 ), (21) La solución π∗ l a RP1(i) representa el pago máximo que el postor i puede lograr en todos los intercambios factibles, dado su valoración pesimista. Segundo, rompemos los lazos para encontrar un intercambio con la máxima incertidumbre del valor en todas las posibles soluciones a RP1(i): max λ vi(λi) − vi(λi) [RP2(i)] sujeto a λ ∈ Feas(x0) (22) vi(λi) − pt−1(λi) ≥ π∗ l (23) Adoptamos la solución L∗ i como nuestro candidato para el intercambio que puede satisfacer RP. Para entender la importancia de esta regla de desempate, considera el Ejemplo 7. El proxy puede demostrar que +B pero no +A es una mejor respuesta para todos los vi ∈ Ti, y debería elegir +B como su candidato. Observa que +B es un contraejemplo para +A, pero no al revés. Ahora, construimos una valuación modificada ˜vi, estableciendo ˜viβ = viβ, si β ∈ sat(L∗ i) viβ, de lo contrario. (24) donde sat(L∗ i) es el conjunto de nodos que están satisfechos en el árbol de límite inferior para el comercio L∗ i. Dada esta valuación modificada, encontramos U∗ para resolver: max λ ˜vi(λi) − pt−1 (λi) [RP3(i)] s.t. λ ∈ Feas(x0 ) (25) Sea π∗ u el beneficio de este intercambio óptimo en los valores modificados ˜v. Llamamos al intercambio U∗ i el intercambio testigo. Mostramos en la Proposición 1 que la regla RP se cumple si y solo si π∗ l ≥ π∗ u. La construcción de la valoración modificada como ˜vi reconoce que existe incertidumbre compartida en las operaciones que cumplen los mismos nodos en un árbol de ofertas. El ejemplo 8 ayuda a ilustrar esto. Simplemente usando vi en RP3(i), encontraríamos que L∗ i es comprar A con un pago de π∗ l = 3 pero luego encontraríamos que U∗ i es comprar B con π∗ u = 7 y fallar en RP. Debemos reconocer que, sin importar cómo se resuelva la incertidumbre en el nodo raíz, afectará a +A y +B de la misma manera. Por esta razón, establecimos ˜viβ = viβ = 5 en el nodo raíz, que es exactamente el mismo valor que se adoptó al determinar π∗ l. Entonces, RP3(i) aplicado a U∗ i da como resultado comprar A y se considera que el test de RP ha sido aprobado. Proposición 1. El árbol de oferta Ti satisface RP dado los precios pt−1 si y solo si cualquier intercambio de límite inferior L∗ i que resuelve RP1(i) y RP2(i) satisface: vi(Ti, L∗ i) − pt−1 (L∗ i) ≥ ˜vi(Ti, U∗ i) − pt−1 (U∗ i), (26) donde ˜vi es la valoración modificada en la ecuación (24). Prueba. Para la suficiencia, observe que la diferencia en el pago entre el intercambio L∗ i y otro intercambio λi no se ve afectada por la forma en que se resuelve la incertidumbre en cualquier nodo que esté satisfecho tanto en L∗ i como en λi. Corregir los valores en ˜vi en los nodos satisfechos en L∗ i tiene el efecto de eliminar esta consideración cuando se selecciona un intercambio U∗ i que satisface uno de estos nodos. Por otro lado, fijar los valores en estos nodos no tiene efecto en las operaciones consideradas en RP3(i) que no comparten un nodo con L∗ i. Para la dirección necesaria, primero mostramos que cualquier intercambio que satisfaga RP debe resolver RP1(i). Supongamos lo contrario, que algún λi con un pago mayor que π∗ l cumple con RP. Sin embargo, la valoración vi ∈ Ti junto con L∗ i presenta un contraejemplo a RP (Eq. 20). Ahora, supongamos (por contradicción) que algún λi con ganancia máxima π∗ l pero incertidumbre menor que L∗ i cumple con RP. Procede mediante el análisis de casos. Caso a): solo una solución a RP1(i) tiene un valor incierto y, por lo tanto, λi tiene un valor seguro. Pero, esto no puede satisfacer a RP porque L∗ i con un valor incierto sería un contraejemplo para RP (Eq. 20). Caso b): dos o más soluciones a RP1(i) tienen un valor incierto. Aquí argumentamos primero que uno de estos intercambios debe satisfacer un (débil) superconjunto de todos los nodos con valor incierto que son satisfechos por todos los demás intercambios en este conjunto. Esto es por RP. Sin esto, entonces para cualquier elección de comercio que resuelva RP1(i), hay otro comercio con un conjunto disjunto de nodos inciertos pero satisfechos que proporciona un contraejemplo a RP (Ec. 20). Ahora, considera el caso en el que algún intercambio contiene un superconjunto de todos los nodos inciertos satisfechos de los otros intercambios. Claramente RP2(i) elegirá este intercambio, L∗ i, y λi debe satisfacer un subconjunto de estos nodos (por suposición). Pero ahora vemos que λi no puede cumplir con RP porque L∗ i sería un contraejemplo para RP. El incumplimiento de la regla de actividad debe tener alguna consecuencia. En las reglas actuales, la acción predeterminada que elegimos es establecer los límites superiores en las valoraciones hasta el valor máximo del precio provisional en un nodo8 y el valor del límite inferior en ese nodo.9 Tal postor puede permanecer activo 8 El precio provisional en un nodo se define como el precio total mínimo entre todos los intercambios factibles para los cuales el subárbol enraizado en el árbol está satisfecho. 9 Esto es completamente análogo a cuando un postor en una subasta de reloj ascendente deja de ofertar a un precio: no se le permite ofertar a un precio más alto nuevamente en rondas futuras. 255 dentro del intercambio, pero solo con valoraciones que sean consistentes con estos nuevos límites. 5.4 Retroalimentación del postor En cada ronda, nuestro diseño predeterminado proporciona a cada postor el intercambio provisional y también los precios provisionales actuales. Ver el 7 para una discusión adicional. También brindamos orientación para ayudar a un licitador a cumplir con la regla de RP. Que sat(L∗ i ) y sat(U∗ i ) denoten los nodos que se satisfacen en los intercambios L∗ i y U∗ i, tal como se calcula en RP1-RP3. Lema 2. Cuando RP falla, un postor debe aumentar un límite inferior en al menos un nodo en sat(L∗ i) \\ sat(U∗ i) o disminuir un límite superior en al menos un nodo en sat(U∗ i) \\ sat(L∗ i) para cumplir con la regla de actividad. Prueba. Cambiar los valores superiores o inferiores en los nodos que no cumplen con ninguno de los intercambios no cambia ni L∗ i ni U∗ i, y no altera el beneficio de estos intercambios. Por lo tanto, la condición de RP seguirá fallando. De igual manera, cambiar los límites en los nodos que se satisfacen en ambos intercambios no tiene efecto en la preferencia revelada. Un cambio en un límite inferior en un nodo compartido afecta tanto a L∗ i como a U∗ i de manera idéntica debido al uso de la valoración modificada para determinar U∗ i. Un cambio en un límite superior en un nodo compartido no tiene efecto en la determinación de L∗ i o U∗ i. Ten en cuenta que cuando sat(U∗ i ) = sat(L∗ i ) entonces la condición (26) siempre se satisface trivialmente, por lo que la orientación en el lema siempre está bien definida cuando RP falla. Este es un mecanismo de retroalimentación elegante porque es adaptable. Una vez que un postor realiza algunos cambios en un subconjunto de estos nodos, el postor puede consultar el intercambio. El intercambio puede responder sí, o puede revisar el conjunto de nodos sat(λ∗ l ) y sat(λ∗ u) según sea necesario. 5.5 Condiciones de Terminación Una vez que cada postor haya comprometido sus nuevas ofertas (y haya cumplido con la regla de RP o haya sufrido la penalización), entonces la ronda t se cierra. En este punto, la tarea es determinar la nueva valoración α, y a su vez la asignación provisional λt y los precios provisionales pt. Una condición de terminación también se verifica, para determinar si se debe pasar el intercambio a una ronda final y definitiva. Para definir la α-valoración, calculamos las siguientes dos cantidades: Pesimista en Pesimista (PP). Determinar un intercambio eficiente, λ∗ l, en valores pesimistas, es decir, resolver maxλ   i vi(λi), y establecer PP=  i vi(λ∗ li). Pessimista a Optimista (PO) Determinar un intercambio eficiente, λ∗ u, en valores optimistas, es decir, resolver maxλ   i vi(λi), y establecer PO=  i vi(λ∗ ui). Primero, hay que tener en cuenta que PP ≥ PO y PP ≥ 0 por definición, para todos los árboles de oferta, aunque PO puede ser negativo (porque el intercambio correcto en v no es actualmente un intercambio útil en v). Reconociendo esto, definir γeff (PP, PO) = 1 + PP − PO PP , (27) cuando PP > 0, y observar que γeff (PP, PO) ≥ 1 cuando esto está definido, y que γeff (PP, PO) comenzará siendo grande y luego tenderá hacia 1 a medida que la asignación optimista converge hacia la asignación pesimista. En cada ronda, definimos αeff ∈ [0, 1] como: αeff = 0 cuando PP es 0, 1/γeff en otro caso (28), lo cual es 0 cuando PP es 0 y luego tiende hacia 1 una vez que PP > 0 en alguna ronda. Esto se utiliza para definir la α-valoración vα i = αeff vi + (1 − αeff )vi, ∀i, (29) que se utiliza para definir la asignación provisional y los precios provisionales. El efecto es definir endógenamente un horario para pasar de valores optimistas a pesimistas a lo largo de las rondas, basado en qué tan cercanos estén los intercambios entre sí. Condición de terminación. Al avanzar a la última y definitiva ronda, y finalmente cerrar, también nos preocupamos por la convergencia de pagos, además de la convergencia hacia un comercio eficiente. Para esto introducimos otro parámetro, αthresh ∈ [0, 1], que tiende de 0 a 1 a medida que los pagos de umbral en las valoraciones inferiores y superiores convergen. Considera el siguiente parámetro: γthresh = 1 + ||pthresh(v) − pthresh(v)||2 (PP/Nactive), (30) el cual está definido para PP > 0, donde pthresh(v) denota los pagos de umbral en el perfil de valoración v, Nactive es el número de postores que están activamente involucrados en el comercio en la transacción de PP, y || · ||2 es la norma L2. Ten en cuenta que γthresh está definido para pagos y no para ganancias. Esto es apropiado porque la precisión del resultado del intercambio es lo que importa: es decir, el comercio y los pagos. Dado esto, definimos αthresh = 0 cuando PP es 0 y 1/γthresh en otro caso (31), lo cual es 0 mientras PP es 0 y luego tiende hacia 1 a medida que se avanza. Definición 5 (terminación). ICE pasa a una ronda final cuando se cumple una de las siguientes condiciones: 1. αeff ≥ CUTOFFeff y αthresh ≥ CUTOFFthresh, 2. no hay intercambio en los valores optimistas, donde CUTOFFeff, CUTOFFthresh ∈ (0, 1] determinan la precisión requerida para la terminación. Al final de la última y definitiva ronda, vα = v se utiliza para definir el intercambio final y los pagos finales del umbral. Ejemplo 9. Considera nuevamente el Ejemplo 1, y considera los límites superiores e inferiores como se muestra en la Figura 1. Primero, si los límites de los vendedores fueron [−20, −4] entonces hay un intercambio optimista pero no hay un intercambio pesimista, y PO = −4 y PP = 0, y αeff = 0. En los límites representados, tanto los intercambios optimistas como pesimistas ocurren y PO = PP = 4 y αeff = 1. Sin embargo, podemos ver que los pagos umbral son (17, −17) en v pero (14, −14) en v. Al evaluar γthresh, tenemos γthresh = 1 + √ 1/2(32+32) (4/2) = 5/2, y αthresh = 2/5. Para CUTOFFthresh < 2/5, el intercambio permanecería abierto. Por otro lado, si el valor que los compradores asignan a +AB estaba entre [18, 24] y el valor que los vendedores asignan a -AB estaba entre [-12, -6], los pagos umbral son (15, -15) en ambos límites superior e inferior, y αthresh = 1. 256 Líneas de Propósito de Componente Agente. El modelo 762 de Soporte Captura el comportamiento estratégico y las decisiones de revelación de información. Proporciona soporte XML para cargar bienes y valoraciones en el mundo 200. El mundo 200 realiza un seguimiento de todos los detalles de agentes, bienes y valoraciones. El Controlador y Comunicación de Intercambio 998 controla el intercambio y coordina el comportamiento remoto de los agentes. El Lenguaje de Subasta 1119 implementa el lenguaje de subasta basado en árboles. El Motor de Reglas de Actividad 203 implementa la regla de preferencia revelada con soporte de rango. El Motor de Reglas de Cierre 137 verifica si se ha alcanzado la condición de terminación de la subasta. El Motor WD 377 proporciona lógica relacionada con WD. El Motor de Precios 460 proporciona lógica relacionada con precios. Los Constructores MIP 346 traducen la lógica utilizada por los motores en nuestra formulación general de optimización. Los Constructores de Precios 256 son utilizados por tres etapas de precios. Los Constructores de Determinación de Ganadores 365 son utilizados por WD, regla de actividad, regla de cierre y generación de restricciones de precios. El código de Soporte del Marco 510 facilita la sustitución modular de los componentes anteriores. Tabla 1: Desglose de Componentes y Código de Intercambio. La INFRAESTRUCTURA DE SISTEMAS ICE consta de aproximadamente 6502 líneas de código Java, divididas en los paquetes funcionales descritos en la Tabla 1.10. El prototipo es modular para que los investigadores puedan reemplazar fácilmente los componentes para experimentación. Además del intercambio central discutido en este documento, hemos desarrollado un componente de agente que permite a un usuario simular el comportamiento y conocimiento de otros jugadores en el sistema, lo que le permite al usuario formular su estrategia antes de jugar realmente. Un usuario especifica un modelo de valoración en una interpretación XML de nuestro lenguaje de oferta, que se revela al intercambio a través de la estrategia de los agentes. Las principales tareas de intercambio son manejadas por motores que dictan la lógica no específica del optimizador. Estos motores impulsan los constructores MIP/LP apropiados. Nos dimos cuenta de que todas nuestras formulaciones de optimización se reducen a dos clases de problemas de optimización. El primero, utilizado para la determinación del ganador, la regla de actividad, la regla de cierre y la generación de restricciones en la fijación de precios, es un MIP que encuentra intercambios que maximizan el valor, manteniendo constantes los precios y los márgenes. El segundo, utilizado por las tres etapas de fijación de precios, es un LP que mantiene constantes las operaciones comerciales, buscando minimizar la holgura, el beneficio o los precios. Aprovechamos la similitud de estos problemas utilizando constructores de LP/MIP comunes que difieren solo en unos pocos ganchos funcionales para proporcionar las variables correctas para la optimización. Hemos generalizado nuestra interfaz de optimización del back-end (actualmente soportamos CPLEX y LPSolve con licencia LGPL) y podemos aprovechar la capacidad de equilibrio de carga y resolución paralela de MIP/LP que esta biblioteca proporciona. DISCUSIÓN El lenguaje de oferta se definió para permitir una simetría perfecta entre compradores y vendedores y proporcionar expresividad en un dominio de intercambio, por ejemplo, para oferentes mixtos interesados en ejecutar operaciones como swaps. Esto resultó especialmente desafiante. El avance se produjo cuando nos enfocamos en los cambios de valor para las operaciones en lugar de proporcionar valores absolutos para las asignaciones. Para simplificar, requerimos la misma estructura de árbol tanto para las valoraciones superiores como inferiores. El tamaño del código se mide en líneas de código fuente físicas (SLOC), generadas utilizando el Contador SLOC de David A. Wheeler. El total de 6502 incluye 184 para instrumentación (no se muestra en la tabla). La interfaz del solucionador JOpt es de otras 1964 líneas, y Castor genera automáticamente alrededor de 5200 líneas de código para la manipulación de archivos XML. Esto permite que el propio lenguaje garantice la consistencia (con el valor superior al menos igual al valor inferior en todas las operaciones) y aplique un estrechamiento monótono de estos límites para todas las operaciones en todas las rondas. También proporciona un método eficiente para verificar la regla de actividad de RP, ya que facilita razonar sobre la incertidumbre compartida entre las operaciones. La decisión de adoptar un enfoque directo y delegado en el cual los licitadores expresan sus valores superiores e inferiores a un agente de confianza que interactúa con la bolsa se tomó temprano en el proceso de diseño. En muchos aspectos, esta es la forma más clara y directa de generalizar el diseño en Parkes et al. [24] y hacerlo iterativo. Además, esto elimina muchas oportunidades para la manipulación estratégica: los postores están restringidos a hacer declaraciones (incrementales) sobre sus valoraciones. Otra ventaja es que hace que la regla de la actividad sea fácil de explicar: los postores siempre pueden cumplir con la regla de la actividad ajustando los límites de manera que su valor real permanezca en el soporte. Quizás lo más importante es que tener información explícita sobre los valores superiores e inferiores permite avanzar en las primeras rondas, incluso cuando no hay un intercambio eficiente a valores pesimistas. La información de los límites superior e inferior también proporciona orientación sobre cuándo terminar. Ten en cuenta que tomado por sí mismo, PP = PO no implica que el intercambio provisional actual sea eficiente con respecto a todos los valores consistentes con la información de valor actual. La diferencia en los valores entre diferentes oficios, agregada entre todos los postores, podría ser similar en los límites inferiores y superiores pero bastante diferente en los valores intermedios (incluyendo la verdad). Sin embargo, conjeturamos que PP = PO demostrará ser un indicador excelente de eficiencia en entornos prácticos donde la forma de las valoraciones superiores e inferiores sí transmita información útil. Esto merece una investigación experimental. Además, el uso del precio y la actividad de RP proporciona garantías adicionales. Adoptamos precios lineales (precios en artículos individuales) en lugar de precios no lineales (con precios en un intercambio que no son iguales a la suma de los precios de los artículos componentes) al principio del proceso de diseño. La concisión de esta representación de precios es muy importante para la viabilidad computacional dentro del intercambio y también para promover la simplicidad y transparencia para los postores. La regla de actividad RP fue adoptada más tarde, y es una buena elección debido a sus excelentes propiedades teóricas cuando se combina con los precios de CE. Lo siguiente se puede establecer fácilmente: dados los precios CE exactos pt−1 para el comercio provisional 12. Esto contrasta con enfoques basados en precios indirectos, como el reloj-proxy [1], en los que los postores deben ser capaces de razonar sobre las restricciones RP implicadas por las ofertas en cada ronda. 257 λt−1 en valoraciones vα, entonces si los valores superiores e inferiores al inicio de la ronda t ya satisfacen la regla RP (y sin necesidad de ningún desempate), el comercio provisional es eficiente para todas las valoraciones consistentes con los árboles de ofertas actuales. Cuando existen precios lineales de CE, esto proporciona una declaración de solidez y completitud: si PP = PO, existen precios lineales de CE, y se cumple la regla de RP, el intercambio provisional es eficiente (solidez); si los precios son precios exactos de CE para el intercambio provisional en vα, pero el intercambio es ineficiente con respecto a algún perfil de valoración consistente con los árboles de oferta actuales, entonces al menos un postor debe fallar en RP con su árbol de oferta actual y se avanzará (completitud). El trabajo futuro debe estudiar la convergencia experimentalmente y extender esta teoría para permitir precios aproximados. Algunos aspectos estratégicos de nuestro diseño de ICE merecen comentario y estudio adicional. Primero, no afirmamos que responder sinceramente a la regla de RP sea un equilibrio ex post. Sin embargo, el intercambio está diseñado para imitar la regla de Umbral en su esquema de pago, que se sabe que tiene propiedades de incentivo útiles. Debemos tener cuidado, sin embargo. Por ejemplo, no sugerimos proporcionar αeff a los licitadores, porque a medida que αeff se acerca a 1, informaría a los licitadores que los valores de las ofertas se vuelven irrelevantes para determinar el intercambio, sino que se utilizan simplemente para determinar los pagos (y los licitadores se volverían cada vez más reacios a aumentar sus valoraciones más bajas). Además, en este trabajo no se ha considerado la posibilidad de colusión entre los licitadores. Este es un tema que merece atención en trabajos futuros. 8. CONCLUSIONES En este trabajo diseñamos y prototipamos un intercambio combinatorio iterativo escalable y altamente expresivo. El diseño incluye muchas características interesantes, como: un nuevo lenguaje de árbol de ofertas para intercambios, un nuevo método para construir precios lineales aproximados a partir de lenguajes expresivos, y un método de elicitación con valoraciones optimistas y pesimistas con un nuevo método para evaluar una regla de actividad de preferencia revelada. El intercambio está completamente implementado en Java y se encuentra en una fase de validación. Los próximos pasos para nuestro trabajo son permitir a los licitadores refinar la estructura del árbol de oferta además de los valores en el árbol. Tenemos la intención de estudiar las propiedades de elicitación del intercambio y hemos creado un conjunto de pruebas de instancias de problemas de intercambio. Además, estamos comenzando a participar en colaboraciones para aplicar el diseño a la programación de franjas horarias de despegue y aterrizaje de aerolíneas y a la asignación de recursos en sistemas computacionales distribuidos de amplia área de red. Agradecimientos Nos gustaría dedicar este artículo a todos los participantes de CS 286r en la Universidad de Harvard en la primavera de 2004. Este trabajo está parcialmente respaldado por la subvención de la NSF IIS-0238147. REFERENCIAS [1] L. Ausubel, P. Cramton y P. Milgrom. La subasta de reloj-proxi: Un diseño práctico de subasta combinatoria. En Cramton et al. [9], capítulo 5. [2] M. Babaioff, N. Nisan y E. Pavlov. Mecanismos para un mercado distribuido espacialmente. En Actas de la 5ta Conferencia de la ACM sobre Comercio Electrónico, páginas 9-20. ACM Press, 2001. Dado el teorema de imposibilidad de Myerson-Satterthwaite [22] y el método mediante el cual determinamos el intercambio, no deberíamos esperar esto. [3] M. Ball, G. Donohue y K. Hoffman. Subastas para la asignación segura, eficiente y equitativa de los recursos del sistema de espacio aéreo. En S. Cramton, Shoham, editor, Subastas Combinatorias. 2004. Próximamente. [4] D. Bertsimas y J. Tsitsiklis. Introducción a la Optimización Lineal. Athena Scientific, 1997. [5] S. Bikhchandani y J. M. Ostroy. El modelo de asignación de paquetes. Revista de Teoría Económica, 107(2):377-406, 2002. [6] C. Boutilier. Una formulación POMDP de problemas de <br>obtención de preferencias</br>. En Proc. 18ª Conferencia Nacional de Inteligencia Artificial (AAAI-02), 2002. [7] C. Boutilier y H. Hoos. Subastando idiomas para subastas combinatorias. En Proc. 17ª Conferencia Internacional Conjunta sobre Inteligencia Artificial (IJCAI-01), 2001. [8] W. Conen y T. Sandholm. Elicitación de preferencias en subastas combinatorias. En Proc. 3ra Conf. ACM sobre Comercio Electrónico (EC-01), páginas 256-259. ACM Press, Nueva York, 2001. [9] P. Cramton, Y. Shoham y R. Steinberg, editores. Subastas combinatorias. MIT Press, 2004. [10] S. de Vries, J. Schummer y R. V. Vohra. En subastas ascendentes de Vickrey para objetos heterogéneos. Informe técnico, MEDS, Escuela Kellogg, Universidad Northwestern, 2003. [11] S. de Vries y R. V. Vohra. Subastas combinatorias: Un estudio. Revista Informs sobre Computación, 15(3):284-309, 2003. [12] M. Dunford, K. Hoffman, D. Menon, R. Sultana y T. Wilson. Probando algoritmos de precios lineales para su uso en subastas combinatorias ascendentes. Informe técnico, SEOR, Universidad George Mason, 2003. [13] Y. Fu, J. Chase, B. Chun, S. Schwab, y A. Vahdat. Sharp: una arquitectura para el emparejamiento seguro de recursos. En Actas del decimonoveno simposio de principios de sistemas operativos de ACM, páginas 133-148. ACM Press, 2003. [14] B. Hudson y T. Sandholm. Efectividad de tipos de consultas y políticas para la <br>obtención de preferencias</br> en subastas combinatorias. En Proc. 3rd Int. Articulación. Conferencia sobre Agentes Autónomos y Sistemas Multiagente, páginas 386-393, 2004. [15] V. Krishna. Teoría de subastas. Academic Press, 2002. [16] D. Krych. \n\nEditorial Académica, 2002. [16] D. Krych. Cálculo y análisis de equilibrios de Nash de reglas de pago basadas en Vickrey para intercambios combinatorios, Harvard College, abril de 2003. [17] A. M. Kwasnica, J. O. Ledyard, D. Porter y C. DeMartini. Un nuevo y mejorado diseño para subastas iterativas de múltiples objetos. Ciencias de la Gestión, 2004. Aparecer. [18] E. Kwerel y J. Williams. Una propuesta para una transición rápida a la asignación de espectro por mercado. Informe técnico, Oficina de Planes y Políticas de la FCC, noviembre de 2002. [19] S. M. Lahaie y D. C. Parkes. Aplicando algoritmos de aprendizaje a la <br>obtención de preferencias</br>. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        }
    }
}