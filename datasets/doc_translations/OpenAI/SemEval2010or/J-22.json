{
    "id": "J-22",
    "original_text": "Betting on Permutations Yiling Chen Yahoo! Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo! Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race. We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers. Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! . We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case. Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2. For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible. Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B. We prove that the auctioneer problem becomes NP-hard for pair betting. We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time. We also show that a natural greedy algorithm gives a poor approximation for indivisible orders. Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1. INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value. For example, buying a stock is a bet that the stocks value is greater than its current price. Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment. The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs. In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15]. Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election. The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win. In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event. Almost all existing financial and betting exchanges pair up bilateral trading partners. For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite. However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible. For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist. We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements. In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates. For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally. Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc. The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match. As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively. Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote. There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem. We want to offer traders the most expressive bidding language possible while maintaining computational feasibility. We explore two bidding languages that seem natural from a trader perspective. Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10. Symetrically, traders can also bet on which candidates will fall in a particular position. In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets. The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders. Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem. We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2. BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates. The final outcome or state s ∈ S is an ordinal ranking of the n candidates. For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times. The state space S contains all n! mutually exclusive and exhaustive permutations of candidates. In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively. In practice at the racetrack, each of these different types of bets are processed in separate pools or groups. In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix. This separation can hurt liquidity and information aggregation. For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show. Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically. Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer. In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders. We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem. We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true. Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.) A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order. The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles. In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities). This is the so-called complete Arrow-Debreu securities market [1] for our setting. In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings. Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows. A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks. The corresponding matching problem is polynomial, however the language is not very expressive. A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market. The price space of the market reveals the collective estimates of win probabilities but nothing else. Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility. Our work is in direct analogy to work by Fortnow et. al. [6]. Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics. The authors consider a state space of the 2n possible outcomes of n binary variables. Traders express bets in Boolean logic. The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete. Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes. The market starts with a joint probability distribution across all outcomes. It works like a sequential version of a scoring rule. Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule. The market maker pays the last trader. Hence, he bears risk and may incur loss. Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded. However, the computational aspects on how to operate the mechanism have not been fully explored. Our mechanisms have an auctioneer who does not bear any risk and only matches orders. Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue. Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods. Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare. Our mechanisms allow traders to construct bets for an event with n! outcomes. Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3. PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market. We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates. The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome. A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem. For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows. Consider an index set of bets or orders O which traders submit to the auctioneer. Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi. Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized. Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context. The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order. Let xi be the fraction of order i ∈ O accepted. In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1]. Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise. There are two possible problems that the auctioneer may want to solve. The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome. We call this problem the existence of a match or sometimes simply, the matching problem. The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc. Definition 1 (Existence of match, indivisible orders). Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders. Definition 2 (Existence of match, divisible orders). Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem. It only returns whether trade can occur at no risk to the auctioneer. In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept. Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer. The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit. Definition 3 (Optimal match, indivisible orders). Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definition 4 (Optimal match, divisible orders). Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. The variable c is the worst-case profit for the auctioneer. Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed. The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets. Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position. A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise. For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth. Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j. For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second. The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O. Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions. With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time. In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems. When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed. The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state. The following example illustrates the matching problem for indivisible orders in the subset-betting market. Example 1. Suppose n = 3. Objects α, β, and γ compete for positions 1, 2, and 3 in a competition. The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7. There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα. The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states. For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates. A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise. There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates. Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1. Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders. The same definitions for existence of a match and optimal match from Section 3.1 apply. The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe. With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit. Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one. However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall. The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4. COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints. Brute-force methods would take exponential time to solve. However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time. Theorem 1. The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof. Consider the linear programming problem (4) for finding an optimal match. This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints. However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8]. The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint. For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3]. The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions. For every order of the form α|Φ there are edges from candidate node α to every position node in Φ. For orders of the form Ψ|j there are edges from each candidate in Ψ to position j. For each order i we put weight qixi on each of these edges. All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge. Every state s then corresponds to a perfect matching in the bipartite graph. In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate. Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13]. Hence, the separation problem can be solved in polynomial time. Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching. Thus, the matching problem can be solved in polynomial time also. 5. COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer. In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders. We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match. The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities. In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match. Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution. In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1. A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on. An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be. All edges have equal weight of 1. We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number. Where not stated, < 1/(2|E|) for a graph H(V, E). In other cases, the value is determined in context. A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG). Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight. Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10]. We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3. Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem. The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG. Our hardness proof is based on the following lemmas. Lemma 2. Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1. Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof. If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge. For any state s, all winning edges necessarily form a DAG. Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers). Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges. Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners. This gives the maximum number of winning edges wmax. All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges. The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H). The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax. Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|. Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6). We have the following lemma. Lemma 3. If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G). Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof. G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G). Suppose k(G∗ ) < k(G). Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|. Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ . Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized. Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G). The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set. Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard. Theorem 4. Computing the maximum worst-case profit in indivisible pair betting is NP-hard. Proof. By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges. Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G). Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard. Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard. However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard. It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit. Next, we prove that the indivisible optimal matching problem is actually NP-hard. We will use the following short fact repeatedly. Lemma 5 (Edge removal lemma). Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1. Proof. Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe. Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe. Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F . Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1. Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1. Theorem 6. Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof. We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle. Consider an instance graph G of the minimum feedback arc set problem. We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem. Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges. By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G . The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations. In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ). At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma. Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1. Hence the number of iterations is equal to k(G). Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3. Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders. Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution. Example 2. We show that the linear program (7) sometimes has a non-integer optimal solution. A B C D E F b b b b b b b b b Figure 2: An order graph. Letters on edges represent order prices. Consider the graph in Figure 2. There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD. Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78. With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3). On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3). Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems. Lemma 7. Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof. For any state s, the winning edges form a DAG. Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized. The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H). Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7). We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ . When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ). When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ). Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G). Hence, we have the above relation. Lemma 9. There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G). Proof. From lemma 8, l(G∗ ) ≤ k(G). We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe. When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Suppose l(G∗ ) < k(G). If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G). If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ). Because xes are less than 1, l(G∗ ) > k(G) is impossible. Thus, l(G∗ ) = k(G). Theorem 10. Finding the optimal worst-case profit in divisible pair betting is NP-hard. Proof. Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard. Hence, finding the optimal worst-case profit is NP-hard. Theorem 10 states that solving the linear program (7) is NP-hard. Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit. Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly. However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well. First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9. Lemma 11. Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1. Then, k(H − {e}) = k(H). Proof. Assume the contrary, namely k(H−{e}) < k(H). Then by Lemma 5, k(H − {e}) = k(H) − 1. Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1. The contradiction arises. Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph. We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows. Theorem 12. Finding the optimal match in divisible pair betting is NP-hard. Proof. We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H). The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted. In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G). It remains to verify that each iteration reduces k(G) by exactly 1. Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph. We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight. By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged. Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight. By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure. Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease. Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders. Lemma 13. A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof. The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full. Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates. Hence, whichever state is realized, not all of the edges in the cycle can be winning edges. The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders. Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle. It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time. Lemma 14. It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof. Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be). Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem. For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v). The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized. Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time. If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match. Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit. Figure 1 exhibits such a situation. If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist. However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle. The labels in the faces give the number of edges in the corresponding cycle. Lemma 15. The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles. Proof. Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges. Suppose all edge weights are (1 − ). The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1. Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2. In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best. Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19]. Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11]. When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6. CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates. While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting. In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering. Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate. We examine the auctioneer problem of matching orders without incurring risk. We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible. The complexity changes dramatically for pair betting. We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem. We identify a sufficient condition for the existence of a match, which can be verified in polynomial time. A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting. Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets. We are interested in further exploring better approximation algorithms for pair betting markets. 7. ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo! Research for valuable insights and discussions. 8. REFERENCES [1] K. J. Arrow. The role of securities in the optimal allocation of risk-bearing. Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz. Results from a dozen years of election futures markets research. In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein. Introduction to Algorithms (Second Edition). MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg. Combinatorial Auctions. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross. Wishes, expectations, and actions: A survey on price formation in election stock markets. Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman. Betting boolean-style: A framework for trading in securities based on logical formulas. Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver. The ellipsoid method and its consequences in combinatorial optimization. Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver. Geometric Algorithms and Combinatorial Optimization. Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson. Combinatorial information market design. Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp. Reducibility among combinatorial problems. In Complexity of computer computations (Proc. Sympos., IBM Thomas J. Watson Res. Center, Yorktown Heights, N.Y.), pages 85-103. Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster. Approximation algorithms for cycle packing problems. Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn. The hungarian method for the assignment problem. Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres. Algorithms for the assignment and transportation problems. Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan. Bidding and allocation in combinatorial auctions. In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen. The real power of artificial markets. Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder. Efficiency of experimental security markets with insider information: An application of rational expectations models. Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder. Rational expectations and the aggregation of diverse information in laboratory security markets. Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. Algorithm for optimal winner determination in combinatorial auctions. Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov. Packing directed cycles efficiently. Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335",
    "original_translation": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1. Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración. Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor. Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores). Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras. Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores. Esto proporciona el número máximo de aristas ganadoras wmax. Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG. El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H). La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax. Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|. Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6). Tenemos el siguiente lema. Lema 3. Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G). Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración. G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G). Supongamos que k(G∗) < k(G). Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|. Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗. Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza. Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G). Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación. Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro. Teorema 4. Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro. Prueba. Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas. Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G). Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil. El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro. Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro. Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos. A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro. Utilizaremos el siguiente dato corto repetidamente. Lema 5 (Lema de eliminación de aristas). Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1. Prueba. Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe. Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe. De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1. Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1. Teorema 6. Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba. Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas. Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación. Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo. Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas. Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G. El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones. En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G). En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes. Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k(G). Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. Figura 2: Un gráfico de órdenes. Las letras en los bordes representan los precios de orden. Considera el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD. Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78. Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3). A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba. Para cualquier estado s, las aristas ganadoras forman un DAG. Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza. La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H). Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7). Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗. Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗). Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗). Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G). Prueba. A partir del lema 8, l(G∗ ) ≤ k(G). Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe. Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Supongamos que l(G∗ ) < k(G). Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G). Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗). Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G). Por lo tanto, l(G∗) = k(G). Teorema 10. Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro. Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro. El teorema 10 establece que resolver el programa lineal (7) es NP-duro. De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos. Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también. Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9. Lema 11. Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1. Entonces, k(H − {e}) = k(H). Prueba. Supongamos lo contrario, es decir, k(H−{e}) < k(H). Entonces, por el Lema 5, k(H − {e}) = k(H) − 1. Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1. La contradicción surge. Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo. Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera. Teorema 12. Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro. Prueba. Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H). El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas. En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G). Queda verificar que cada iteración reduce k(G) exactamente en 1. Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo. Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario. Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado. Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor. Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento. Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad. El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración. El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos. Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo. Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico. Lema 14. Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración. Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be). Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta. Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v). El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice. Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico. Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia. Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos. La Figura 1 muestra tal situación. Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un algoritmo voraz natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos. Sin embargo, demostramos que dicho algoritmo voraz puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el algoritmo voraz encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante. Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente. Lema 15. El algoritmo voraz da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos. Prueba. Considera el gráfico en la Figura 3 que consiste en un ciclo con √ n aristas, cada una de las cuales participa en otro ciclo (disjunto de lo contrario) con √ n + 1 aristas. Supongamos que todos los pesos de las aristas son (1 − ). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños dan un mayor beneficio en el peor de los casos, el algoritmo voraz seleccionaría primero el ciclo de longitud √ n, después del cual solo quedaría un ciclo restante de longitud n. Por lo tanto, el número total de ciclos seleccionados por el algoritmo voraz es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lema 15, se puede esperar que los algoritmos voraces den aproximaciones de √ n como máximo. Los algoritmos de aproximación para encontrar el máximo número de ciclos disjuntos por aristas han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de grafos dirigidos, los autores demuestran que un algoritmo voraz proporciona una aproximación de a√ n [11]. Cuando la coincidencia óptima no consiste en ciclos disjuntos de bordes como en el ejemplo de la Figura 3, el algoritmo voraz que intenta encontrar ciclos individuales óptimos falla evidentemente. 6. CONCLUSIÓN Consideramos un escenario de apuestas de permutación, donde los traders apuestan por el orden final de n candidatos. Si bien es antinatural e intratable permitir a los comerciantes apostar directamente en las n! diferentes ordenaciones finales, proponemos dos lenguajes de apuestas expresivas, la apuesta de subconjunto y la apuesta de par. En un mercado de apuestas de subconjuntos, los traders pueden apostar ya sea por un subconjunto de posiciones que un candidato ocupa o por un subconjunto de candidatos que ocupan una posición específica en el orden final. La apuesta por pares permite a los traders apostar si un candidato dado ocupa un rango más alto que otro candidato dado. Examinamos el problema del subastador de emparejar órdenes sin incurrir en riesgos. Encontramos que en un mercado de apuestas de subconjuntos, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes a aceptar de manera que su beneficio en el peor de los casos se maximice en tiempo polinómico si las órdenes son divisibles. La complejidad cambia drásticamente para las apuestas en pareja. Demostramos que el problema de emparejamiento óptimo para el subastador es NP-duro para las apuestas por pares con órdenes tanto indivisibles como divisibles a través de reducciones al problema del conjunto mínimo de arcos de retroalimentación. Identificamos una condición suficiente para la existencia de una coincidencia, la cual puede ser verificada en tiempo polinómico. Se ha demostrado que un algoritmo voraz natural da una mala aproximación para las apuestas de pares indivisibles. Interesantes preguntas abiertas para nuestras apuestas de permutación incluyen la complejidad computacional del emparejamiento indivisible óptimo para las apuestas de subconjuntos y la condición necesaria para la existencia de un emparejamiento en los mercados de apuestas por pares. Estamos interesados en seguir explorando mejores algoritmos de aproximación para mercados de apuestas por pares. AGRADECIMIENTOS Agradecemos a Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin y a los miembros de Yahoo! Investiga para obtener ideas valiosas y discusiones. REFERENCIAS [1] K. J. Arrow. El papel de los valores en la asignación óptima de la capacidad de soportar riesgos. Revisión de Estudios Económicos, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson y T. A. Rietz. Resultados de una docena de años de investigación en mercados de futuros electorales. En C. A. Plott y V. Smith, editores, Manual de Resultados Económicos Experimentales (próximamente). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest y C. Stein. Introducción a los Algoritmos (Segunda Edición). MIT Press y McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham y R. Steinberg. Subastas combinatorias. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, y T. W. Ross. Deseos, expectativas y acciones: Una encuesta sobre la formación de precios en los mercados de acciones electorales. Revista de Comportamiento Económico y Organización, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock y M. P. Wellman. Apostando al estilo booleano: Un marco de trabajo para operar en valores basado en fórmulas lógicas. Sistemas de Apoyo a la Decisión, 39(1):87-104, 2004. [7] M. Grötschel, L. Lovász y A. Schrijver. El método del elipsoide y sus consecuencias en la optimización combinatoria. Combinatorica, 1(2):169-197, 1981. [8] M. Grötschel, L. Lovász, y A. Schrijver. Algoritmos geométricos y optimización combinatoria. Springer-Verlag, Berlín Heidelberg, 1993. [9] R. D. Hanson. Diseño de mercado de información combinatoria. Sistemas de Información Frontiers, 5(1):107-119, 2003. [10] R. M. Karp. Reductibilidad entre problemas combinatorios. En la complejidad de las computaciones computacionales (Proc. Simposio, IBM Thomas J. Watson Res. Centro, Yorktown Heights, Nueva York), páginas 85-103. Plenum, Nueva York, 1972. [11] M. Krivelevich, Z. Nutov y R. Yuster. Algoritmos de aproximación para problemas de empaquetamiento de ciclos. Actas del decimosexto simposio anual ACM-SIAM sobre algoritmos discretos, páginas 556-561, 2005. [12] H. W. Kuhn. El método húngaro para el problema de asignación. Revista Cuatrimestral de Logística de Investigación Naval, 2:83-97, 1955. [13] J. Munkres. Algoritmos para los problemas de asignación y transporte. Revista de la Sociedad de Matemáticas Industriales y Aplicadas, 5(1):32-38, 1957. [14] N. Nisan. Subasta y asignación en subastas combinatorias. En Actas de la 2ª Conferencia de la ACM sobre Comercio Electrónico (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles y F. A. Nielsen. El verdadero poder de los mercados artificiales. Ciencia, 291:987-988, febrero de 2002. [16] C. Plott y S. Sunder. Eficiencia de los mercados de seguridad experimental con información privilegiada: Una aplicación de modelos de expectativas racionales. Revista de Economía Política, 90:663-98, 1982. [17] C. Plott y S. Sunder. Expectativas racionales y la agregación de información diversa en mercados de seguridad de laboratorio. Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. \n\nEconometrica, 56:1085-1118, 1988. [18] T. Sandholm. Algoritmo para la determinación óptima del ganador en subastas combinatorias. Inteligencia Artificial, 135:1-54, 2002. [19] R. Yuster y Z. Nutov. Empaquetando ciclos dirigidos de manera eficiente. Actas del 29º Simposio Internacional sobre Fundamentos Matemáticos de la Ciencia de la Computación (MFCS), 2004. 335",
    "original_sentences": [
        "Betting on Permutations Yiling Chen Yahoo!",
        "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
        "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
        "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
        "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
        "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
        "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
        "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
        "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
        "We prove that the auctioneer problem becomes NP-hard for pair betting.",
        "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
        "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
        "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
        "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
        "For example, buying a stock is a bet that the stocks value is greater than its current price.",
        "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
        "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
        "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
        "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
        "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
        "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
        "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
        "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
        "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
        "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
        "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
        "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
        "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
        "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
        "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
        "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
        "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
        "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
        "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
        "We explore two bidding languages that seem natural from a trader perspective.",
        "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
        "Symetrically, traders can also bet on which candidates will fall in a particular position.",
        "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
        "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
        "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
        "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
        "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
        "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
        "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
        "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
        "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
        "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
        "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
        "This separation can hurt liquidity and information aggregation.",
        "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
        "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
        "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
        "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
        "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
        "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
        "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
        "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
        "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
        "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
        "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
        "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
        "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
        "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
        "The corresponding matching problem is polynomial, however the language is not very expressive.",
        "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
        "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
        "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
        "Our work is in direct analogy to work by Fortnow et. al. [6].",
        "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
        "The authors consider a state space of the 2n possible outcomes of n binary variables.",
        "Traders express bets in Boolean logic.",
        "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
        "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
        "The market starts with a joint probability distribution across all outcomes.",
        "It works like a sequential version of a scoring rule.",
        "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
        "The market maker pays the last trader.",
        "Hence, he bears risk and may incur loss.",
        "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
        "However, the computational aspects on how to operate the mechanism have not been fully explored.",
        "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
        "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
        "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
        "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
        "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
        "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
        "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
        "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
        "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
        "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
        "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
        "Consider an index set of bets or orders O which traders submit to the auctioneer.",
        "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
        "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
        "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
        "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
        "Let xi be the fraction of order i ∈ O accepted.",
        "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
        "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
        "There are two possible problems that the auctioneer may want to solve.",
        "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
        "We call this problem the existence of a match or sometimes simply, the matching problem.",
        "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
        "Definition 1 (Existence of match, indivisible orders).",
        "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
        "Definition 2 (Existence of match, divisible orders).",
        "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
        "It only returns whether trade can occur at no risk to the auctioneer.",
        "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
        "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
        "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
        "Definition 3 (Optimal match, indivisible orders).",
        "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
        "Definition 4 (Optimal match, divisible orders).",
        "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
        "The variable c is the worst-case profit for the auctioneer.",
        "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
        "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
        "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
        "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
        "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
        "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
        "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
        "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
        "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
        "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
        "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
        "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
        "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
        "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
        "Example 1.",
        "Suppose n = 3.",
        "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
        "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
        "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
        "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
        "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
        "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
        "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
        "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
        "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
        "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
        "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
        "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
        "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
        "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
        "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
        "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
        "Brute-force methods would take exponential time to solve.",
        "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
        "Theorem 1.",
        "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
        "Consider the linear programming problem (4) for finding an optimal match.",
        "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
        "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
        "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
        "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
        "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
        "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
        "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
        "For each order i we put weight qixi on each of these edges.",
        "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
        "Every state s then corresponds to a perfect matching in the bipartite graph.",
        "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
        "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
        "Hence, the separation problem can be solved in polynomial time.",
        "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
        "Thus, the matching problem can be solved in polynomial time also. 5.",
        "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
        "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
        "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
        "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
        "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
        "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
        "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
        "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
        "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
        "All edges have equal weight of 1.",
        "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
        "Where not stated, < 1/(2|E|) for a graph H(V, E).",
        "In other cases, the value is determined in context.",
        "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
        "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
        "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
        "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
        "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
        "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
        "Our hardness proof is based on the following lemmas.",
        "Lemma 2.",
        "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
        "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
        "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
        "For any state s, all winning edges necessarily form a DAG.",
        "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
        "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
        "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
        "This gives the maximum number of winning edges wmax.",
        "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
        "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
        "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
        "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
        "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
        "We have the following lemma.",
        "Lemma 3.",
        "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
        "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
        "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
        "Suppose k(G∗ ) < k(G).",
        "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
        "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
        "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
        "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
        "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
        "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
        "Theorem 4.",
        "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
        "Proof.",
        "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
        "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
        "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
        "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
        "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
        "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
        "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
        "We will use the following short fact repeatedly.",
        "Lemma 5 (Edge removal lemma).",
        "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
        "Proof.",
        "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
        "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
        "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
        "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
        "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
        "Theorem 6.",
        "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
        "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
        "Consider an instance graph G of the minimum feedback arc set problem.",
        "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
        "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
        "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
        "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
        "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
        "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
        "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
        "Hence the number of iterations is equal to k(G).",
        "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
        "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
        "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
        "Example 2.",
        "We show that the linear program (7) sometimes has a non-integer optimal solution.",
        "A B C D E F b b b b b b b b b Figure 2: An order graph.",
        "Letters on edges represent order prices.",
        "Consider the graph in Figure 2.",
        "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
        "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
        "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
        "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
        "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
        "Lemma 7.",
        "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
        "For any state s, the winning edges form a DAG.",
        "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
        "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
        "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
        "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
        "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
        "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
        "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
        "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
        "Hence, we have the above relation.",
        "Lemma 9.",
        "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
        "Proof.",
        "From lemma 8, l(G∗ ) ≤ k(G).",
        "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
        "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
        "Suppose l(G∗ ) < k(G).",
        "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
        "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
        "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
        "Thus, l(G∗ ) = k(G).",
        "Theorem 10.",
        "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
        "Proof.",
        "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
        "Hence, finding the optimal worst-case profit is NP-hard.",
        "Theorem 10 states that solving the linear program (7) is NP-hard.",
        "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
        "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
        "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
        "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
        "Lemma 11.",
        "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
        "Then, k(H − {e}) = k(H).",
        "Proof.",
        "Assume the contrary, namely k(H−{e}) < k(H).",
        "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
        "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
        "The contradiction arises.",
        "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
        "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
        "Theorem 12.",
        "Finding the optimal match in divisible pair betting is NP-hard.",
        "Proof.",
        "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
        "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
        "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
        "It remains to verify that each iteration reduces k(G) by exactly 1.",
        "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
        "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
        "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
        "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
        "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
        "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
        "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
        "Lemma 13.",
        "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
        "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
        "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
        "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
        "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
        "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
        "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
        "Lemma 14.",
        "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
        "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
        "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
        "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
        "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
        "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
        "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
        "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
        "Figure 1 exhibits such a situation.",
        "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
        "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
        "The labels in the faces give the number of edges in the corresponding cycle.",
        "Lemma 15.",
        "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
        "Proof.",
        "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
        "Suppose all edge weights are (1 − ).",
        "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
        "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
        "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
        "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
        "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
        "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
        "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
        "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
        "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
        "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
        "We examine the auctioneer problem of matching orders without incurring risk.",
        "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
        "The complexity changes dramatically for pair betting.",
        "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
        "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
        "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
        "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
        "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
        "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
        "Research for valuable insights and discussions. 8.",
        "REFERENCES [1] K. J. Arrow.",
        "The role of securities in the optimal allocation of risk-bearing.",
        "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
        "Results from a dozen years of election futures markets research.",
        "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
        "Introduction to Algorithms (Second Edition).",
        "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
        "Combinatorial Auctions.",
        "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
        "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
        "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
        "Betting boolean-style: A framework for trading in securities based on logical formulas.",
        "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
        "The ellipsoid method and its consequences in combinatorial optimization.",
        "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
        "Geometric Algorithms and Combinatorial Optimization.",
        "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
        "Combinatorial information market design.",
        "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
        "Reducibility among combinatorial problems.",
        "In Complexity of computer computations (Proc.",
        "Sympos., IBM Thomas J. Watson Res.",
        "Center, Yorktown Heights, N.Y.), pages 85-103.",
        "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
        "Approximation algorithms for cycle packing problems.",
        "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
        "The hungarian method for the assignment problem.",
        "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
        "Algorithms for the assignment and transportation problems.",
        "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
        "Bidding and allocation in combinatorial auctions.",
        "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
        "The real power of artificial markets.",
        "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
        "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
        "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
        "Rational expectations and the aggregation of diverse information in laboratory security markets.",
        "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
        "Algorithm for optimal winner determination in combinatorial auctions.",
        "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
        "Packing directed cycles efficiently.",
        "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
    ],
    "translated_text_sentences": [
        "Apostando en Permutaciones Yiling Chen Yahoo!",
        "Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo!",
        "Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos.",
        "Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas.",
        "Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!.",
        "Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso.",
        "La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2.",
        "Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles.",
        "La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B.",
        "Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares.",
        "Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico.",
        "También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles.",
        "Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1.",
        "La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor.",
        "Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual.",
        "Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva.",
        "La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores.",
        "En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15].",
        "Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008.",
        "La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana.",
        "En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento.",
        "Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales.",
        "Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto.",
        "Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales.",
        "Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías.",
        "Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales.",
        "En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos.",
        "Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos.",
        "Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc.",
        "El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable.",
        "Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente.",
        "Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota.",
        "Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento.",
        "Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional.",
        "Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante.",
        "La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10.",
        "Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular.",
        "En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles).",
        "La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes.",
        "Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados.",
        "También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2.",
        "ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos.",
        "El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos.",
        "Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización.",
        "El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos.",
        "En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente.",
        "En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados.",
        "En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan.",
        "Esta separación puede afectar la liquidez y la agregación de información.",
        "Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares.",
        "En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente.",
        "Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan.",
        "En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos.",
        "Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento.",
        "Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera.",
        "Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento).",
        "Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada.",
        "La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas.",
        "En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes).",
        "Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración.",
        "En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos.",
        "Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece.",
        "Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos.",
        "El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo.",
        "Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado.",
        "El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más.",
        "Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional.",
        "Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6].",
        "Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana.",
        "Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias.",
        "Los traders expresan apuestas en lógica booleana.",
        "Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo.",
        "Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados.",
        "El mercado comienza con una distribución conjunta de probabilidad en todos los resultados.",
        "Funciona como una versión secuencial de una regla de puntuación.",
        "Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación.",
        "El creador de mercado paga al último comerciante.",
        "Por lo tanto, él asume riesgos y puede sufrir pérdidas.",
        "Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada.",
        "Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados.",
        "Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes.",
        "La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores.",
        "Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales.",
        "La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social.",
        "Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados.",
        "La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo.",
        "En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general.",
        "Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos.",
        "El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado.",
        "Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento.",
        "Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera.",
        "Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador.",
        "Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi.",
        "Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza.",
        "Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto.",
        "El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden.",
        "Que xi sea la fracción de orden i ∈ O aceptada.",
        "En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1].",
        "Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario.",
        "Hay dos posibles problemas que el subastador puede querer resolver.",
        "La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado.",
        "Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia.",
        "El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc.",
        "Definición 1 (Existencia de coincidencia, órdenes indivisibles).",
        "Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles.",
        "Definición 2 (Existencia de coincidencia, pedidos divisibles).",
        "Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión.",
        "Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador.",
        "Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar.",
        "Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador.",
        "Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos.",
        "Definición 3 (Emparejamiento óptimo, órdenes indivisibles).",
        "Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
        "Definición 4 (Emparejamiento óptimo, pedidos divisibles).",
        "Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
        "La variable c es la ganancia en el peor de los casos para el subastador.",
        "Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos.",
        "La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas.",
        "Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular.",
        "Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario.",
        "Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar.",
        "De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j.",
        "Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar.",
        "El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O.",
        "Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones.",
        "Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico.",
        "En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos.",
        "Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado.",
        "El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro.",
        "El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos.",
        "Ejemplo 1.",
        "Supongamos que n = 3.",
        "Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia.",
        "El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7.",
        "Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα.",
        "Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros.",
        "Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos.",
        "Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario.",
        "Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos.",
        "Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1.",
        "Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles.",
        "Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican.",
        "Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe.",
        "Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa.",
        "Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno.",
        "Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general.",
        "Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4.",
        "COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones.",
        "Los métodos de fuerza bruta tomarían tiempo exponencial para resolver.",
        "Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico.",
        "Teorema 1.",
        "La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba.",
        "Considera el problema de programación lineal (4) para encontrar una coincidencia óptima.",
        "Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones.",
        "Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8].",
        "El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada.",
        "Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3].",
        "El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones.",
        "Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ.",
        "Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j.",
        "Para cada orden i, ponemos peso qixi en cada uno de estos bordes.",
        "Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple.",
        "Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito.",
        "Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato.",
        "Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13].",
        "Por lo tanto, el problema de separación puede resolverse en tiempo polinómico.",
        "Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia.",
        "Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5.",
        "COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador.",
        "En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles.",
        "Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia.",
        "Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento.",
        "Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima.",
        "Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente.",
        "En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1.",
        "Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas.",
        "Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be.",
        "Todos los bordes tienen un peso igual de 1.",
        "Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño.",
        "Donde no se indique, < 1/(2|E|) para un grafo H(V, E).",
        "En otros casos, el valor se determina en el contexto.",
        "Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG).",
        "El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas.",
        "Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10].",
        "Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3.",
        "Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados.",
        "El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG.",
        "Nuestra prueba de dureza se basa en los siguientes lemas.",
        "Lema 2.",
        "Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1.",
        "Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración.",
        "Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor.",
        "Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG.",
        "Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores).",
        "Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras.",
        "Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores.",
        "Esto proporciona el número máximo de aristas ganadoras wmax.",
        "Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG.",
        "El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H).",
        "La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax.",
        "Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
        "Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6).",
        "Tenemos el siguiente lema.",
        "Lema 3.",
        "Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G).",
        "Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración.",
        "G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G).",
        "Supongamos que k(G∗) < k(G).",
        "Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|.",
        "Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗.",
        "Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza.",
        "Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G).",
        "Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación.",
        "Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro.",
        "Teorema 4.",
        "Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro.",
        "Prueba.",
        "Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas.",
        "Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G).",
        "Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil.",
        "El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro.",
        "Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro.",
        "Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos.",
        "A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro.",
        "Utilizaremos el siguiente dato corto repetidamente.",
        "Lema 5 (Lema de eliminación de aristas).",
        "Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1.",
        "Prueba.",
        "Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe.",
        "Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe.",
        "De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F.",
        "Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1.",
        "Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1.",
        "Teorema 6.",
        "Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba.",
        "Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas.",
        "Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación.",
        "Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo.",
        "Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas.",
        "Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G.",
        "El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones.",
        "En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G).",
        "En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes.",
        "Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1.",
        "Por lo tanto, el número de iteraciones es igual a k(G).",
        "Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3.",
        "Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales.",
        "El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible.",
        "Ejemplo 2.",
        "Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera.",
        "Figura 2: Un gráfico de órdenes.",
        "Las letras en los bordes representan los precios de orden.",
        "Considera el gráfico en la Figura 2.",
        "Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD.",
        "Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78.",
        "Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3).",
        "Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3).",
        "A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas.",
        "Lema 7.",
        "Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba.",
        "Para cualquier estado s, las aristas ganadoras forman un DAG.",
        "Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza.",
        "La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H).",
        "Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7).",
        "Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
        "Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗.",
        "Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗).",
        "Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗).",
        "Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G).",
        "Por lo tanto, tenemos la relación anterior.",
        "Lema 9.",
        "Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G).",
        "Prueba.",
        "A partir del lema 8, l(G∗ ) ≤ k(G).",
        "Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe.",
        "Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
        "Supongamos que l(G∗ ) < k(G).",
        "Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G).",
        "Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗).",
        "Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G).",
        "Por lo tanto, l(G∗) = k(G).",
        "Teorema 10.",
        "Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro.",
        "Prueba.",
        "Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro.",
        "Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro.",
        "El teorema 10 establece que resolver el programa lineal (7) es NP-duro.",
        "De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos.",
        "Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente.",
        "Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también.",
        "Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9.",
        "Lema 11.",
        "Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1.",
        "Entonces, k(H − {e}) = k(H).",
        "Prueba.",
        "Supongamos lo contrario, es decir, k(H−{e}) < k(H).",
        "Entonces, por el Lema 5, k(H − {e}) = k(H) − 1.",
        "Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1.",
        "La contradicción surge.",
        "Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo.",
        "Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera.",
        "Teorema 12.",
        "Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro.",
        "Prueba.",
        "Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H).",
        "El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas.",
        "En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G).",
        "Queda verificar que cada iteración reduce k(G) exactamente en 1.",
        "Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo.",
        "Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario.",
        "Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado.",
        "Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor.",
        "Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento.",
        "Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad.",
        "El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles.",
        "Lema 13.",
        "Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración.",
        "El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad.",
        "Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos.",
        "Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores.",
        "El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes.",
        "Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo.",
        "Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico.",
        "Lema 14.",
        "Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración.",
        "Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be).",
        "Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta.",
        "Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v).",
        "El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice.",
        "Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico.",
        "Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia.",
        "Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos.",
        "La Figura 1 muestra tal situación.",
        "Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un algoritmo voraz natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos.",
        "Sin embargo, demostramos que dicho algoritmo voraz puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el algoritmo voraz encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante.",
        "Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente.",
        "Lema 15.",
        "El algoritmo voraz da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos.",
        "Prueba.",
        "Considera el gráfico en la Figura 3 que consiste en un ciclo con √ n aristas, cada una de las cuales participa en otro ciclo (disjunto de lo contrario) con √ n + 1 aristas.",
        "Supongamos que todos los pesos de las aristas son (1 − ).",
        "El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1.",
        "Debido a que los ciclos más pequeños dan un mayor beneficio en el peor de los casos, el algoritmo voraz seleccionaría primero el ciclo de longitud √ n, después del cual solo quedaría un ciclo restante de longitud n. Por lo tanto, el número total de ciclos seleccionados por el algoritmo voraz es 2 y el factor de aproximación en este caso es √ n/2.",
        "A la luz del Lema 15, se puede esperar que los algoritmos voraces den aproximaciones de √ n como máximo.",
        "Los algoritmos de aproximación para encontrar el máximo número de ciclos disjuntos por aristas han sido considerados por Krivelevich, Nutov y Yuster [11, 19].",
        "De hecho, para el caso de grafos dirigidos, los autores demuestran que un algoritmo voraz proporciona una aproximación de a√ n [11].",
        "Cuando la coincidencia óptima no consiste en ciclos disjuntos de bordes como en el ejemplo de la Figura 3, el algoritmo voraz que intenta encontrar ciclos individuales óptimos falla evidentemente. 6.",
        "CONCLUSIÓN Consideramos un escenario de apuestas de permutación, donde los traders apuestan por el orden final de n candidatos.",
        "Si bien es antinatural e intratable permitir a los comerciantes apostar directamente en las n! diferentes ordenaciones finales, proponemos dos lenguajes de apuestas expresivas, la apuesta de subconjunto y la apuesta de par.",
        "En un mercado de apuestas de subconjuntos, los traders pueden apostar ya sea por un subconjunto de posiciones que un candidato ocupa o por un subconjunto de candidatos que ocupan una posición específica en el orden final.",
        "La apuesta por pares permite a los traders apostar si un candidato dado ocupa un rango más alto que otro candidato dado.",
        "Examinamos el problema del subastador de emparejar órdenes sin incurrir en riesgos.",
        "Encontramos que en un mercado de apuestas de subconjuntos, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes a aceptar de manera que su beneficio en el peor de los casos se maximice en tiempo polinómico si las órdenes son divisibles.",
        "La complejidad cambia drásticamente para las apuestas en pareja.",
        "Demostramos que el problema de emparejamiento óptimo para el subastador es NP-duro para las apuestas por pares con órdenes tanto indivisibles como divisibles a través de reducciones al problema del conjunto mínimo de arcos de retroalimentación.",
        "Identificamos una condición suficiente para la existencia de una coincidencia, la cual puede ser verificada en tiempo polinómico.",
        "Se ha demostrado que un algoritmo voraz natural da una mala aproximación para las apuestas de pares indivisibles.",
        "Interesantes preguntas abiertas para nuestras apuestas de permutación incluyen la complejidad computacional del emparejamiento indivisible óptimo para las apuestas de subconjuntos y la condición necesaria para la existencia de un emparejamiento en los mercados de apuestas por pares.",
        "Estamos interesados en seguir explorando mejores algoritmos de aproximación para mercados de apuestas por pares.",
        "AGRADECIMIENTOS Agradecemos a Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin y a los miembros de Yahoo!",
        "Investiga para obtener ideas valiosas y discusiones.",
        "REFERENCIAS [1] K. J. Arrow.",
        "El papel de los valores en la asignación óptima de la capacidad de soportar riesgos.",
        "Revisión de Estudios Económicos, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson y T. A. Rietz.",
        "Resultados de una docena de años de investigación en mercados de futuros electorales.",
        "En C. A. Plott y V. Smith, editores, Manual de Resultados Económicos Experimentales (próximamente). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest y C. Stein.",
        "Introducción a los Algoritmos (Segunda Edición).",
        "MIT Press y McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham y R. Steinberg.",
        "Subastas combinatorias.",
        "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, y T. W. Ross.",
        "Deseos, expectativas y acciones: Una encuesta sobre la formación de precios en los mercados de acciones electorales.",
        "Revista de Comportamiento Económico y Organización, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock y M. P. Wellman.",
        "Apostando al estilo booleano: Un marco de trabajo para operar en valores basado en fórmulas lógicas.",
        "Sistemas de Apoyo a la Decisión, 39(1):87-104, 2004. [7] M. Grötschel, L. Lovász y A. Schrijver.",
        "El método del elipsoide y sus consecuencias en la optimización combinatoria.",
        "Combinatorica, 1(2):169-197, 1981. [8] M. Grötschel, L. Lovász, y A. Schrijver.",
        "Algoritmos geométricos y optimización combinatoria.",
        "Springer-Verlag, Berlín Heidelberg, 1993. [9] R. D. Hanson.",
        "Diseño de mercado de información combinatoria.",
        "Sistemas de Información Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
        "Reductibilidad entre problemas combinatorios.",
        "En la complejidad de las computaciones computacionales (Proc.",
        "Simposio, IBM Thomas J. Watson Res.",
        "Centro, Yorktown Heights, Nueva York), páginas 85-103.",
        "Plenum, Nueva York, 1972. [11] M. Krivelevich, Z. Nutov y R. Yuster.",
        "Algoritmos de aproximación para problemas de empaquetamiento de ciclos.",
        "Actas del decimosexto simposio anual ACM-SIAM sobre algoritmos discretos, páginas 556-561, 2005. [12] H. W. Kuhn.",
        "El método húngaro para el problema de asignación.",
        "Revista Cuatrimestral de Logística de Investigación Naval, 2:83-97, 1955. [13] J. Munkres.",
        "Algoritmos para los problemas de asignación y transporte.",
        "Revista de la Sociedad de Matemáticas Industriales y Aplicadas, 5(1):32-38, 1957. [14] N. Nisan.",
        "Subasta y asignación en subastas combinatorias.",
        "En Actas de la 2ª Conferencia de la ACM sobre Comercio Electrónico (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles y F. A. Nielsen.",
        "El verdadero poder de los mercados artificiales.",
        "Ciencia, 291:987-988, febrero de 2002. [16] C. Plott y S. Sunder.",
        "Eficiencia de los mercados de seguridad experimental con información privilegiada: Una aplicación de modelos de expectativas racionales.",
        "Revista de Economía Política, 90:663-98, 1982. [17] C. Plott y S. Sunder.",
        "Expectativas racionales y la agregación de información diversa en mercados de seguridad de laboratorio.",
        "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. \n\nEconometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
        "Algoritmo para la determinación óptima del ganador en subastas combinatorias.",
        "Inteligencia Artificial, 135:1-54, 2002. [19] R. Yuster y Z. Nutov.",
        "Empaquetando ciclos dirigidos de manera eficiente.",
        "Actas del 29º Simposio Internacional sobre Fundamentos Matemáticos de la Ciencia de la Computación (MFCS), 2004. 335"
    ],
    "error_count": 6,
    "keys": {
        "permutation betting": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a <br>permutation betting</br> scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider <br>permutation betting</br>, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "<br>permutation betting</br> In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general <br>permutation betting</br> market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a <br>permutation betting</br> market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a <br>permutation betting</br> scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our <br>permutation betting</br> include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a <br>permutation betting</br> scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "BACKGROUND AND RELATED WORK We consider <br>permutation betting</br>, or betting on the outcome of a competition among n candidates.",
                "<br>permutation betting</br> In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general <br>permutation betting</br> market.",
                "For any bidding language and number of securities in a <br>permutation betting</br> market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "CONCLUSION We consider a <br>permutation betting</br> scenario, where traders wager on the final ordering of n candidates."
            ],
            "translated_annotated_samples": [
                "Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de <br>apuestas de permutación</br>, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos.",
                "ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las <br>apuestas de permutación</br>, o apostar por el resultado de una competencia entre n candidatos.",
                "En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de <br>apuestas de permutaciones</br> general.",
                "Para cualquier idioma de oferta y número de valores en un mercado de <br>apuestas de permutación</br>, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera.",
                "CONCLUSIÓN Consideramos un escenario de <br>apuestas de permutación</br>, donde los traders apuestan por el orden final de n candidatos."
            ],
            "translated_text": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de <br>apuestas de permutación</br>, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las <br>apuestas de permutación</br>, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de <br>apuestas de permutaciones</br> general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de <br>apuestas de permutación</br>, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1. Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración. Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor. Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores). Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras. Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores. Esto proporciona el número máximo de aristas ganadoras wmax. Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG. El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H). La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax. Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|. Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6). Tenemos el siguiente lema. Lema 3. Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G). Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración. G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G). Supongamos que k(G∗) < k(G). Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|. Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗. Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza. Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G). Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación. Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro. Teorema 4. Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro. Prueba. Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas. Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G). Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil. El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro. Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro. Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos. A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro. Utilizaremos el siguiente dato corto repetidamente. Lema 5 (Lema de eliminación de aristas). Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1. Prueba. Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe. Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe. De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1. Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1. Teorema 6. Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba. Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas. Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación. Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo. Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas. Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G. El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones. En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G). En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes. Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k(G). Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. Figura 2: Un gráfico de órdenes. Las letras en los bordes representan los precios de orden. Considera el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD. Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78. Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3). A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba. Para cualquier estado s, las aristas ganadoras forman un DAG. Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza. La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H). Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7). Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗. Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗). Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗). Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G). Prueba. A partir del lema 8, l(G∗ ) ≤ k(G). Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe. Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Supongamos que l(G∗ ) < k(G). Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G). Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗). Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G). Por lo tanto, l(G∗) = k(G). Teorema 10. Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro. Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro. El teorema 10 establece que resolver el programa lineal (7) es NP-duro. De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos. Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también. Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9. Lema 11. Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1. Entonces, k(H − {e}) = k(H). Prueba. Supongamos lo contrario, es decir, k(H−{e}) < k(H). Entonces, por el Lema 5, k(H − {e}) = k(H) − 1. Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1. La contradicción surge. Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo. Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera. Teorema 12. Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro. Prueba. Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H). El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas. En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G). Queda verificar que cada iteración reduce k(G) exactamente en 1. Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo. Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario. Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado. Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor. Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento. Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad. El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración. El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos. Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo. Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico. Lema 14. Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración. Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be). Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta. Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v). El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice. Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico. Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia. Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos. La Figura 1 muestra tal situación. Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un algoritmo voraz natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos. Sin embargo, demostramos que dicho algoritmo voraz puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el algoritmo voraz encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante. Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente. Lema 15. El algoritmo voraz da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos. Prueba. Considera el gráfico en la Figura 3 que consiste en un ciclo con √ n aristas, cada una de las cuales participa en otro ciclo (disjunto de lo contrario) con √ n + 1 aristas. Supongamos que todos los pesos de las aristas son (1 − ). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños dan un mayor beneficio en el peor de los casos, el algoritmo voraz seleccionaría primero el ciclo de longitud √ n, después del cual solo quedaría un ciclo restante de longitud n. Por lo tanto, el número total de ciclos seleccionados por el algoritmo voraz es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lema 15, se puede esperar que los algoritmos voraces den aproximaciones de √ n como máximo. Los algoritmos de aproximación para encontrar el máximo número de ciclos disjuntos por aristas han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de grafos dirigidos, los autores demuestran que un algoritmo voraz proporciona una aproximación de a√ n [11]. Cuando la coincidencia óptima no consiste en ciclos disjuntos de bordes como en el ejemplo de la Figura 3, el algoritmo voraz que intenta encontrar ciclos individuales óptimos falla evidentemente. 6. CONCLUSIÓN Consideramos un escenario de <br>apuestas de permutación</br>, donde los traders apuestan por el orden final de n candidatos. ",
            "candidates": [],
            "error": [
                [
                    "apuestas de permutación",
                    "apuestas de permutación",
                    "apuestas de permutaciones",
                    "apuestas de permutación",
                    "apuestas de permutación"
                ]
            ]
        },
        "subset betting": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "<br>subset betting</br> allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For <br>subset betting</br>, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "<br>subset betting</br>, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 <br>subset betting</br> A <br>subset betting</br> market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a <br>subset betting</br> market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF <br>subset betting</br> The matching problems of the auctioneer in any permutation market, including the <br>subset betting</br> market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the <br>subset betting</br> market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a <br>subset betting</br> market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the <br>subset betting</br> market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, <br>subset betting</br> and pair betting.",
                "In a <br>subset betting</br> market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a <br>subset betting</br> market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for <br>subset betting</br> and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [
                "<br>subset betting</br> allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For <br>subset betting</br>, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "<br>subset betting</br>, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "The optimal worst-case profit may remain unknown. 3.2 <br>subset betting</br> A <br>subset betting</br> market allows two different types of bets.",
                "The auctioneer in a <br>subset betting</br> market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O."
            ],
            "translated_annotated_samples": [
                "La <br>apuesta de subconjunto</br> permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2.",
                "Para las <br>apuestas de subconjuntos</br>, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles.",
                "La <br>apuesta de subconjunto</br>, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10.",
                "La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de <br>apuestas de subconjunto</br> permite dos tipos diferentes de apuestas.",
                "El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O."
            ],
            "translated_text": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La <br>apuesta de subconjunto</br> permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las <br>apuestas de subconjuntos</br>, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La <br>apuesta de subconjunto</br>, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de <br>apuestas de subconjunto</br> permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. ",
            "candidates": [],
            "error": [
                [
                    "apuesta de subconjunto",
                    "apuestas de subconjuntos",
                    "apuesta de subconjunto",
                    "apuestas de subconjunto"
                ]
            ]
        },
        "bilateral trading partner": {
            "translated_key": "socios comerciales bilaterales",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up <br>bilateral trading partner</br>s.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [
                "Almost all existing financial and betting exchanges pair up <br>bilateral trading partner</br>s."
            ],
            "translated_annotated_samples": [
                "Casi todos los intercambios financieros y de apuestas existentes emparejan a <br>socios comerciales bilaterales</br>."
            ],
            "translated_text": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a <br>socios comerciales bilaterales</br>. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1. Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración. Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor. Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores). Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras. Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores. Esto proporciona el número máximo de aristas ganadoras wmax. Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG. El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H). La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax. Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|. Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6). Tenemos el siguiente lema. Lema 3. Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G). Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración. G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G). Supongamos que k(G∗) < k(G). Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|. Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗. Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza. Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G). Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación. Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro. Teorema 4. Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro. Prueba. Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas. Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G). Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil. El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro. Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro. Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos. A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro. Utilizaremos el siguiente dato corto repetidamente. Lema 5 (Lema de eliminación de aristas). Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1. Prueba. Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe. Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe. De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1. Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1. Teorema 6. Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba. Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas. Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación. Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo. Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas. Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G. El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones. En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G). En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes. Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k(G). Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. Figura 2: Un gráfico de órdenes. Las letras en los bordes representan los precios de orden. Considera el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD. Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78. Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3). A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba. Para cualquier estado s, las aristas ganadoras forman un DAG. Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza. La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H). Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7). Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗. Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗). Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗). Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G). Prueba. A partir del lema 8, l(G∗ ) ≤ k(G). Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe. Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Supongamos que l(G∗ ) < k(G). Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G). Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗). Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G). Por lo tanto, l(G∗) = k(G). Teorema 10. Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro. Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro. El teorema 10 establece que resolver el programa lineal (7) es NP-duro. De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos. Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también. Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9. Lema 11. Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1. Entonces, k(H − {e}) = k(H). Prueba. Supongamos lo contrario, es decir, k(H−{e}) < k(H). Entonces, por el Lema 5, k(H − {e}) = k(H) − 1. Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1. La contradicción surge. Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo. Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera. Teorema 12. Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro. Prueba. Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H). El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas. En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G). Queda verificar que cada iteración reduce k(G) exactamente en 1. Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo. Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario. Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado. Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor. Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento. Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad. El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración. El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos. Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo. Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico. Lema 14. Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración. Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be). Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta. Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v). El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice. Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico. Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia. Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos. La Figura 1 muestra tal situación. Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un algoritmo voraz natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos. Sin embargo, demostramos que dicho algoritmo voraz puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el algoritmo voraz encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante. Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente. Lema 15. El algoritmo voraz da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos. Prueba. Considera el gráfico en la Figura 3 que consiste en un ciclo con √ n aristas, cada una de las cuales participa en otro ciclo (disjunto de lo contrario) con √ n + 1 aristas. Supongamos que todos los pesos de las aristas son (1 − ). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños dan un mayor beneficio en el peor de los casos, el algoritmo voraz seleccionaría primero el ciclo de longitud √ n, después del cual solo quedaría un ciclo restante de longitud n. Por lo tanto, el número total de ciclos seleccionados por el algoritmo voraz es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lema 15, se puede esperar que los algoritmos voraces den aproximaciones de √ n como máximo. Los algoritmos de aproximación para encontrar el máximo número de ciclos disjuntos por aristas han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de grafos dirigidos, los autores demuestran que un algoritmo voraz proporciona una aproximación de a√ n [11]. Cuando la coincidencia óptima no consiste en ciclos disjuntos de bordes como en el ejemplo de la Figura 3, el algoritmo voraz que intenta encontrar ciclos individuales óptimos falla evidentemente. 6. CONCLUSIÓN Consideramos un escenario de apuestas de permutación, donde los traders apuestan por el orden final de n candidatos. Si bien es antinatural e intratable permitir a los comerciantes apostar directamente en las n! diferentes ordenaciones finales, proponemos dos lenguajes de apuestas expresivas, la apuesta de subconjunto y la apuesta de par. En un mercado de apuestas de subconjuntos, los traders pueden apostar ya sea por un subconjunto de posiciones que un candidato ocupa o por un subconjunto de candidatos que ocupan una posición específica en el orden final. La apuesta por pares permite a los traders apostar si un candidato dado ocupa un rango más alto que otro candidato dado. Examinamos el problema del subastador de emparejar órdenes sin incurrir en riesgos. Encontramos que en un mercado de apuestas de subconjuntos, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes a aceptar de manera que su beneficio en el peor de los casos se maximice en tiempo polinómico si las órdenes son divisibles. La complejidad cambia drásticamente para las apuestas en pareja. Demostramos que el problema de emparejamiento óptimo para el subastador es NP-duro para las apuestas por pares con órdenes tanto indivisibles como divisibles a través de reducciones al problema del conjunto mínimo de arcos de retroalimentación. Identificamos una condición suficiente para la existencia de una coincidencia, la cual puede ser verificada en tiempo polinómico. Se ha demostrado que un algoritmo voraz natural da una mala aproximación para las apuestas de pares indivisibles. Interesantes preguntas abiertas para nuestras apuestas de permutación incluyen la complejidad computacional del emparejamiento indivisible óptimo para las apuestas de subconjuntos y la condición necesaria para la existencia de un emparejamiento en los mercados de apuestas por pares. Estamos interesados en seguir explorando mejores algoritmos de aproximación para mercados de apuestas por pares. AGRADECIMIENTOS Agradecemos a Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin y a los miembros de Yahoo! Investiga para obtener ideas valiosas y discusiones. REFERENCIAS [1] K. J. Arrow. El papel de los valores en la asignación óptima de la capacidad de soportar riesgos. Revisión de Estudios Económicos, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson y T. A. Rietz. Resultados de una docena de años de investigación en mercados de futuros electorales. En C. A. Plott y V. Smith, editores, Manual de Resultados Económicos Experimentales (próximamente). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest y C. Stein. Introducción a los Algoritmos (Segunda Edición). MIT Press y McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham y R. Steinberg. Subastas combinatorias. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, y T. W. Ross. Deseos, expectativas y acciones: Una encuesta sobre la formación de precios en los mercados de acciones electorales. Revista de Comportamiento Económico y Organización, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock y M. P. Wellman. Apostando al estilo booleano: Un marco de trabajo para operar en valores basado en fórmulas lógicas. Sistemas de Apoyo a la Decisión, 39(1):87-104, 2004. [7] M. Grötschel, L. Lovász y A. Schrijver. El método del elipsoide y sus consecuencias en la optimización combinatoria. Combinatorica, 1(2):169-197, 1981. [8] M. Grötschel, L. Lovász, y A. Schrijver. Algoritmos geométricos y optimización combinatoria. Springer-Verlag, Berlín Heidelberg, 1993. [9] R. D. Hanson. Diseño de mercado de información combinatoria. Sistemas de Información Frontiers, 5(1):107-119, 2003. [10] R. M. Karp. Reductibilidad entre problemas combinatorios. En la complejidad de las computaciones computacionales (Proc. Simposio, IBM Thomas J. Watson Res. Centro, Yorktown Heights, Nueva York), páginas 85-103. Plenum, Nueva York, 1972. [11] M. Krivelevich, Z. Nutov y R. Yuster. Algoritmos de aproximación para problemas de empaquetamiento de ciclos. Actas del decimosexto simposio anual ACM-SIAM sobre algoritmos discretos, páginas 556-561, 2005. [12] H. W. Kuhn. El método húngaro para el problema de asignación. Revista Cuatrimestral de Logística de Investigación Naval, 2:83-97, 1955. [13] J. Munkres. Algoritmos para los problemas de asignación y transporte. Revista de la Sociedad de Matemáticas Industriales y Aplicadas, 5(1):32-38, 1957. [14] N. Nisan. Subasta y asignación en subastas combinatorias. En Actas de la 2ª Conferencia de la ACM sobre Comercio Electrónico (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles y F. A. Nielsen. El verdadero poder de los mercados artificiales. Ciencia, 291:987-988, febrero de 2002. [16] C. Plott y S. Sunder. Eficiencia de los mercados de seguridad experimental con información privilegiada: Una aplicación de modelos de expectativas racionales. Revista de Economía Política, 90:663-98, 1982. [17] C. Plott y S. Sunder. Expectativas racionales y la agregación de información diversa en mercados de seguridad de laboratorio. Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. \n\nEconometrica, 56:1085-1118, 1988. [18] T. Sandholm. Algoritmo para la determinación óptima del ganador en subastas combinatorias. Inteligencia Artificial, 135:1-54, 2002. [19] R. Yuster y Z. Nutov. Empaquetando ciclos dirigidos de manera eficiente. Actas del 29º Simposio Internacional sobre Fundamentos Matemáticos de la Ciencia de la Computación (MFCS), 2004. 335 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "polynomial-time algorithm": {
            "translated_key": "algoritmo de tiempo polinómico",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a <br>polynomial-time algorithm</br> for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [
                "In Section 4, we derive a <br>polynomial-time algorithm</br> for matching (divisible) subset bets."
            ],
            "translated_annotated_samples": [
                "En la Sección 4, derivamos un <br>algoritmo de tiempo polinómico</br> para emparejar apuestas de subconjuntos (divisibles)."
            ],
            "translated_text": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un <br>algoritmo de tiempo polinómico</br> para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1. Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración. Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor. Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores). Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras. Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores. Esto proporciona el número máximo de aristas ganadoras wmax. Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG. El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H). La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax. Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|. Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6). Tenemos el siguiente lema. Lema 3. Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G). Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración. G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G). Supongamos que k(G∗) < k(G). Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|. Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗. Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza. Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G). Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación. Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro. Teorema 4. Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro. Prueba. Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas. Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G). Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil. El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro. Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro. Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos. A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro. Utilizaremos el siguiente dato corto repetidamente. Lema 5 (Lema de eliminación de aristas). Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1. Prueba. Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe. Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe. De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1. Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1. Teorema 6. Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba. Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas. Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación. Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo. Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas. Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G. El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones. En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G). En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes. Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k(G). Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. Figura 2: Un gráfico de órdenes. Las letras en los bordes representan los precios de orden. Considera el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD. Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78. Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3). A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba. Para cualquier estado s, las aristas ganadoras forman un DAG. Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza. La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H). Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7). Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗. Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗). Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗). Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G). Prueba. A partir del lema 8, l(G∗ ) ≤ k(G). Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe. Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Supongamos que l(G∗ ) < k(G). Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G). Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗). Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G). Por lo tanto, l(G∗) = k(G). Teorema 10. Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro. Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro. El teorema 10 establece que resolver el programa lineal (7) es NP-duro. De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos. Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también. Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9. Lema 11. Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1. Entonces, k(H − {e}) = k(H). Prueba. Supongamos lo contrario, es decir, k(H−{e}) < k(H). Entonces, por el Lema 5, k(H − {e}) = k(H) − 1. Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1. La contradicción surge. Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo. Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera. Teorema 12. Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro. Prueba. Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H). El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas. En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G). Queda verificar que cada iteración reduce k(G) exactamente en 1. Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo. Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario. Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado. Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor. Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento. Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad. El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración. El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos. Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo. Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico. Lema 14. Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración. Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be). Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta. Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v). El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice. Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico. Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia. Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos. La Figura 1 muestra tal situación. Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un algoritmo voraz natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos. Sin embargo, demostramos que dicho algoritmo voraz puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el algoritmo voraz encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante. Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente. Lema 15. El algoritmo voraz da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos. Prueba. Considera el gráfico en la Figura 3 que consiste en un ciclo con √ n aristas, cada una de las cuales participa en otro ciclo (disjunto de lo contrario) con √ n + 1 aristas. Supongamos que todos los pesos de las aristas son (1 − ). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños dan un mayor beneficio en el peor de los casos, el algoritmo voraz seleccionaría primero el ciclo de longitud √ n, después del cual solo quedaría un ciclo restante de longitud n. Por lo tanto, el número total de ciclos seleccionados por el algoritmo voraz es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lema 15, se puede esperar que los algoritmos voraces den aproximaciones de √ n como máximo. Los algoritmos de aproximación para encontrar el máximo número de ciclos disjuntos por aristas han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de grafos dirigidos, los autores demuestran que un algoritmo voraz proporciona una aproximación de a√ n [11]. Cuando la coincidencia óptima no consiste en ciclos disjuntos de bordes como en el ejemplo de la Figura 3, el algoritmo voraz que intenta encontrar ciclos individuales óptimos falla evidentemente. 6. CONCLUSIÓN Consideramos un escenario de apuestas de permutación, donde los traders apuestan por el orden final de n candidatos. Si bien es antinatural e intratable permitir a los comerciantes apostar directamente en las n! diferentes ordenaciones finales, proponemos dos lenguajes de apuestas expresivas, la apuesta de subconjunto y la apuesta de par. En un mercado de apuestas de subconjuntos, los traders pueden apostar ya sea por un subconjunto de posiciones que un candidato ocupa o por un subconjunto de candidatos que ocupan una posición específica en el orden final. La apuesta por pares permite a los traders apostar si un candidato dado ocupa un rango más alto que otro candidato dado. Examinamos el problema del subastador de emparejar órdenes sin incurrir en riesgos. Encontramos que en un mercado de apuestas de subconjuntos, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes a aceptar de manera que su beneficio en el peor de los casos se maximice en tiempo polinómico si las órdenes son divisibles. La complejidad cambia drásticamente para las apuestas en pareja. Demostramos que el problema de emparejamiento óptimo para el subastador es NP-duro para las apuestas por pares con órdenes tanto indivisibles como divisibles a través de reducciones al problema del conjunto mínimo de arcos de retroalimentación. Identificamos una condición suficiente para la existencia de una coincidencia, la cual puede ser verificada en tiempo polinómico. Se ha demostrado que un algoritmo voraz natural da una mala aproximación para las apuestas de pares indivisibles. Interesantes preguntas abiertas para nuestras apuestas de permutación incluyen la complejidad computacional del emparejamiento indivisible óptimo para las apuestas de subconjuntos y la condición necesaria para la existencia de un emparejamiento en los mercados de apuestas por pares. Estamos interesados en seguir explorando mejores algoritmos de aproximación para mercados de apuestas por pares. AGRADECIMIENTOS Agradecemos a Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin y a los miembros de Yahoo! Investiga para obtener ideas valiosas y discusiones. REFERENCIAS [1] K. J. Arrow. El papel de los valores en la asignación óptima de la capacidad de soportar riesgos. Revisión de Estudios Económicos, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson y T. A. Rietz. Resultados de una docena de años de investigación en mercados de futuros electorales. En C. A. Plott y V. Smith, editores, Manual de Resultados Económicos Experimentales (próximamente). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest y C. Stein. Introducción a los Algoritmos (Segunda Edición). MIT Press y McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham y R. Steinberg. Subastas combinatorias. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, y T. W. Ross. Deseos, expectativas y acciones: Una encuesta sobre la formación de precios en los mercados de acciones electorales. Revista de Comportamiento Económico y Organización, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock y M. P. Wellman. Apostando al estilo booleano: Un marco de trabajo para operar en valores basado en fórmulas lógicas. Sistemas de Apoyo a la Decisión, 39(1):87-104, 2004. [7] M. Grötschel, L. Lovász y A. Schrijver. El método del elipsoide y sus consecuencias en la optimización combinatoria. Combinatorica, 1(2):169-197, 1981. [8] M. Grötschel, L. Lovász, y A. Schrijver. Algoritmos geométricos y optimización combinatoria. Springer-Verlag, Berlín Heidelberg, 1993. [9] R. D. Hanson. Diseño de mercado de información combinatoria. Sistemas de Información Frontiers, 5(1):107-119, 2003. [10] R. M. Karp. Reductibilidad entre problemas combinatorios. En la complejidad de las computaciones computacionales (Proc. Simposio, IBM Thomas J. Watson Res. Centro, Yorktown Heights, Nueva York), páginas 85-103. Plenum, Nueva York, 1972. [11] M. Krivelevich, Z. Nutov y R. Yuster. Algoritmos de aproximación para problemas de empaquetamiento de ciclos. Actas del decimosexto simposio anual ACM-SIAM sobre algoritmos discretos, páginas 556-561, 2005. [12] H. W. Kuhn. El método húngaro para el problema de asignación. Revista Cuatrimestral de Logística de Investigación Naval, 2:83-97, 1955. [13] J. Munkres. Algoritmos para los problemas de asignación y transporte. Revista de la Sociedad de Matemáticas Industriales y Aplicadas, 5(1):32-38, 1957. [14] N. Nisan. Subasta y asignación en subastas combinatorias. En Actas de la 2ª Conferencia de la ACM sobre Comercio Electrónico (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles y F. A. Nielsen. El verdadero poder de los mercados artificiales. Ciencia, 291:987-988, febrero de 2002. [16] C. Plott y S. Sunder. Eficiencia de los mercados de seguridad experimental con información privilegiada: Una aplicación de modelos de expectativas racionales. Revista de Economía Política, 90:663-98, 1982. [17] C. Plott y S. Sunder. Expectativas racionales y la agregación de información diversa en mercados de seguridad de laboratorio. Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. \n\nEconometrica, 56:1085-1118, 1988. [18] T. Sandholm. Algoritmo para la determinación óptima del ganador en subastas combinatorias. Inteligencia Artificial, 135:1-54, 2002. [19] R. Yuster y Z. Nutov. Empaquetando ciclos dirigidos de manera eficiente. Actas del 29º Simposio Internacional sobre Fundamentos Matemáticos de la Ciencia de la Computación (MFCS), 2004. 335 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "information aggregation": {
            "translated_key": "agregación de información",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and <br>information aggregation</br>.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [
                "This separation can hurt liquidity and <br>information aggregation</br>."
            ],
            "translated_annotated_samples": [
                "Esta separación puede afectar la liquidez y la <br>agregación de información</br>."
            ],
            "translated_text": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la <br>agregación de información</br>. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1. Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración. Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor. Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores). Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras. Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores. Esto proporciona el número máximo de aristas ganadoras wmax. Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG. El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H). La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax. Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|. Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6). Tenemos el siguiente lema. Lema 3. Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G). Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración. G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G). Supongamos que k(G∗) < k(G). Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|. Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗. Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza. Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G). Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación. Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro. Teorema 4. Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro. Prueba. Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas. Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G). Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil. El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro. Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro. Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos. A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro. Utilizaremos el siguiente dato corto repetidamente. Lema 5 (Lema de eliminación de aristas). Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1. Prueba. Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe. Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe. De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1. Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1. Teorema 6. Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba. Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas. Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación. Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo. Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas. Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G. El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones. En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G). En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes. Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k(G). Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. Figura 2: Un gráfico de órdenes. Las letras en los bordes representan los precios de orden. Considera el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD. Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78. Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3). A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba. Para cualquier estado s, las aristas ganadoras forman un DAG. Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza. La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H). Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7). Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗. Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗). Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗). Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G). Prueba. A partir del lema 8, l(G∗ ) ≤ k(G). Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe. Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Supongamos que l(G∗ ) < k(G). Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G). Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗). Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G). Por lo tanto, l(G∗) = k(G). Teorema 10. Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro. Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro. El teorema 10 establece que resolver el programa lineal (7) es NP-duro. De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos. Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también. Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9. Lema 11. Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1. Entonces, k(H − {e}) = k(H). Prueba. Supongamos lo contrario, es decir, k(H−{e}) < k(H). Entonces, por el Lema 5, k(H − {e}) = k(H) − 1. Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1. La contradicción surge. Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo. Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera. Teorema 12. Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro. Prueba. Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H). El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas. En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G). Queda verificar que cada iteración reduce k(G) exactamente en 1. Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo. Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario. Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado. Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor. Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento. Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad. El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración. El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos. Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo. Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico. Lema 14. Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración. Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be). Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta. Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v). El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice. Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico. Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia. Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos. La Figura 1 muestra tal situación. Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un algoritmo voraz natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos. Sin embargo, demostramos que dicho algoritmo voraz puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el algoritmo voraz encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante. Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente. Lema 15. El algoritmo voraz da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos. Prueba. Considera el gráfico en la Figura 3 que consiste en un ciclo con √ n aristas, cada una de las cuales participa en otro ciclo (disjunto de lo contrario) con √ n + 1 aristas. Supongamos que todos los pesos de las aristas son (1 − ). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños dan un mayor beneficio en el peor de los casos, el algoritmo voraz seleccionaría primero el ciclo de longitud √ n, después del cual solo quedaría un ciclo restante de longitud n. Por lo tanto, el número total de ciclos seleccionados por el algoritmo voraz es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lema 15, se puede esperar que los algoritmos voraces den aproximaciones de √ n como máximo. Los algoritmos de aproximación para encontrar el máximo número de ciclos disjuntos por aristas han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de grafos dirigidos, los autores demuestran que un algoritmo voraz proporciona una aproximación de a√ n [11]. Cuando la coincidencia óptima no consiste en ciclos disjuntos de bordes como en el ejemplo de la Figura 3, el algoritmo voraz que intenta encontrar ciclos individuales óptimos falla evidentemente. 6. CONCLUSIÓN Consideramos un escenario de apuestas de permutación, donde los traders apuestan por el orden final de n candidatos. Si bien es antinatural e intratable permitir a los comerciantes apostar directamente en las n! diferentes ordenaciones finales, proponemos dos lenguajes de apuestas expresivas, la apuesta de subconjunto y la apuesta de par. En un mercado de apuestas de subconjuntos, los traders pueden apostar ya sea por un subconjunto de posiciones que un candidato ocupa o por un subconjunto de candidatos que ocupan una posición específica en el orden final. La apuesta por pares permite a los traders apostar si un candidato dado ocupa un rango más alto que otro candidato dado. Examinamos el problema del subastador de emparejar órdenes sin incurrir en riesgos. Encontramos que en un mercado de apuestas de subconjuntos, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes a aceptar de manera que su beneficio en el peor de los casos se maximice en tiempo polinómico si las órdenes son divisibles. La complejidad cambia drásticamente para las apuestas en pareja. Demostramos que el problema de emparejamiento óptimo para el subastador es NP-duro para las apuestas por pares con órdenes tanto indivisibles como divisibles a través de reducciones al problema del conjunto mínimo de arcos de retroalimentación. Identificamos una condición suficiente para la existencia de una coincidencia, la cual puede ser verificada en tiempo polinómico. Se ha demostrado que un algoritmo voraz natural da una mala aproximación para las apuestas de pares indivisibles. Interesantes preguntas abiertas para nuestras apuestas de permutación incluyen la complejidad computacional del emparejamiento indivisible óptimo para las apuestas de subconjuntos y la condición necesaria para la existencia de un emparejamiento en los mercados de apuestas por pares. Estamos interesados en seguir explorando mejores algoritmos de aproximación para mercados de apuestas por pares. AGRADECIMIENTOS Agradecemos a Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin y a los miembros de Yahoo! Investiga para obtener ideas valiosas y discusiones. REFERENCIAS [1] K. J. Arrow. El papel de los valores en la asignación óptima de la capacidad de soportar riesgos. Revisión de Estudios Económicos, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson y T. A. Rietz. Resultados de una docena de años de investigación en mercados de futuros electorales. En C. A. Plott y V. Smith, editores, Manual de Resultados Económicos Experimentales (próximamente). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest y C. Stein. Introducción a los Algoritmos (Segunda Edición). MIT Press y McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham y R. Steinberg. Subastas combinatorias. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, y T. W. Ross. Deseos, expectativas y acciones: Una encuesta sobre la formación de precios en los mercados de acciones electorales. Revista de Comportamiento Económico y Organización, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock y M. P. Wellman. Apostando al estilo booleano: Un marco de trabajo para operar en valores basado en fórmulas lógicas. Sistemas de Apoyo a la Decisión, 39(1):87-104, 2004. [7] M. Grötschel, L. Lovász y A. Schrijver. El método del elipsoide y sus consecuencias en la optimización combinatoria. Combinatorica, 1(2):169-197, 1981. [8] M. Grötschel, L. Lovász, y A. Schrijver. Algoritmos geométricos y optimización combinatoria. Springer-Verlag, Berlín Heidelberg, 1993. [9] R. D. Hanson. Diseño de mercado de información combinatoria. Sistemas de Información Frontiers, 5(1):107-119, 2003. [10] R. M. Karp. Reductibilidad entre problemas combinatorios. En la complejidad de las computaciones computacionales (Proc. Simposio, IBM Thomas J. Watson Res. Centro, Yorktown Heights, Nueva York), páginas 85-103. Plenum, Nueva York, 1972. [11] M. Krivelevich, Z. Nutov y R. Yuster. Algoritmos de aproximación para problemas de empaquetamiento de ciclos. Actas del decimosexto simposio anual ACM-SIAM sobre algoritmos discretos, páginas 556-561, 2005. [12] H. W. Kuhn. El método húngaro para el problema de asignación. Revista Cuatrimestral de Logística de Investigación Naval, 2:83-97, 1955. [13] J. Munkres. Algoritmos para los problemas de asignación y transporte. Revista de la Sociedad de Matemáticas Industriales y Aplicadas, 5(1):32-38, 1957. [14] N. Nisan. Subasta y asignación en subastas combinatorias. En Actas de la 2ª Conferencia de la ACM sobre Comercio Electrónico (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles y F. A. Nielsen. El verdadero poder de los mercados artificiales. Ciencia, 291:987-988, febrero de 2002. [16] C. Plott y S. Sunder. Eficiencia de los mercados de seguridad experimental con información privilegiada: Una aplicación de modelos de expectativas racionales. Revista de Economía Política, 90:663-98, 1982. [17] C. Plott y S. Sunder. Expectativas racionales y la agregación de información diversa en mercados de seguridad de laboratorio. Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. \n\nEconometrica, 56:1085-1118, 1988. [18] T. Sandholm. Algoritmo para la determinación óptima del ganador en subastas combinatorias. Inteligencia Artificial, 135:1-54, 2002. [19] R. Yuster y Z. Nutov. Empaquetando ciclos dirigidos de manera eficiente. Actas del 29º Simposio Internacional sobre Fundamentos Matemáticos de la Ciencia de la Computación (MFCS), 2004. 335 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "permutation combinatoric": {
            "translated_key": "combinatoria de permutaciones",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore <br>permutation combinatoric</br>s, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [
                "Whereas we explore <br>permutation combinatoric</br>s, Fortnow et. al. explore Boolean combinatorics."
            ],
            "translated_annotated_samples": [
                "Mientras exploramos la <br>combinatoria de permutaciones</br>, Fortnow y otros exploran la combinatoria booleana."
            ],
            "translated_text": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la <br>combinatoria de permutaciones</br>, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1. Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración. Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor. Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores). Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras. Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores. Esto proporciona el número máximo de aristas ganadoras wmax. Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG. El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H). La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax. Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|. Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6). Tenemos el siguiente lema. Lema 3. Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G). Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración. G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G). Supongamos que k(G∗) < k(G). Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|. Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗. Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza. Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G). Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación. Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro. Teorema 4. Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro. Prueba. Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas. Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G). Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil. El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro. Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro. Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos. A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro. Utilizaremos el siguiente dato corto repetidamente. Lema 5 (Lema de eliminación de aristas). Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1. Prueba. Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe. Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe. De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1. Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1. Teorema 6. Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba. Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas. Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación. Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo. Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas. Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G. El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones. En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G). En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes. Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k(G). Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. Figura 2: Un gráfico de órdenes. Las letras en los bordes representan los precios de orden. Considera el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD. Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78. Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3). A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba. Para cualquier estado s, las aristas ganadoras forman un DAG. Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza. La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H). Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7). Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗. Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗). Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗). Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G). Prueba. A partir del lema 8, l(G∗ ) ≤ k(G). Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe. Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Supongamos que l(G∗ ) < k(G). Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G). Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗). Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G). Por lo tanto, l(G∗) = k(G). Teorema 10. Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro. Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro. El teorema 10 establece que resolver el programa lineal (7) es NP-duro. De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos. Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también. Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9. Lema 11. Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1. Entonces, k(H − {e}) = k(H). Prueba. Supongamos lo contrario, es decir, k(H−{e}) < k(H). Entonces, por el Lema 5, k(H − {e}) = k(H) − 1. Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1. La contradicción surge. Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo. Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera. Teorema 12. Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro. Prueba. Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H). El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas. En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G). Queda verificar que cada iteración reduce k(G) exactamente en 1. Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo. Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario. Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado. Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor. Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento. Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad. El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración. El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos. Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo. Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico. Lema 14. Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración. Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be). Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta. Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v). El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice. Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico. Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia. Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos. La Figura 1 muestra tal situación. Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un algoritmo voraz natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos. Sin embargo, demostramos que dicho algoritmo voraz puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el algoritmo voraz encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante. Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente. Lema 15. El algoritmo voraz da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos. Prueba. Considera el gráfico en la Figura 3 que consiste en un ciclo con √ n aristas, cada una de las cuales participa en otro ciclo (disjunto de lo contrario) con √ n + 1 aristas. Supongamos que todos los pesos de las aristas son (1 − ). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños dan un mayor beneficio en el peor de los casos, el algoritmo voraz seleccionaría primero el ciclo de longitud √ n, después del cual solo quedaría un ciclo restante de longitud n. Por lo tanto, el número total de ciclos seleccionados por el algoritmo voraz es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lema 15, se puede esperar que los algoritmos voraces den aproximaciones de √ n como máximo. Los algoritmos de aproximación para encontrar el máximo número de ciclos disjuntos por aristas han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de grafos dirigidos, los autores demuestran que un algoritmo voraz proporciona una aproximación de a√ n [11]. Cuando la coincidencia óptima no consiste en ciclos disjuntos de bordes como en el ejemplo de la Figura 3, el algoritmo voraz que intenta encontrar ciclos individuales óptimos falla evidentemente. 6. CONCLUSIÓN Consideramos un escenario de apuestas de permutación, donde los traders apuestan por el orden final de n candidatos. Si bien es antinatural e intratable permitir a los comerciantes apostar directamente en las n! diferentes ordenaciones finales, proponemos dos lenguajes de apuestas expresivas, la apuesta de subconjunto y la apuesta de par. En un mercado de apuestas de subconjuntos, los traders pueden apostar ya sea por un subconjunto de posiciones que un candidato ocupa o por un subconjunto de candidatos que ocupan una posición específica en el orden final. La apuesta por pares permite a los traders apostar si un candidato dado ocupa un rango más alto que otro candidato dado. Examinamos el problema del subastador de emparejar órdenes sin incurrir en riesgos. Encontramos que en un mercado de apuestas de subconjuntos, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes a aceptar de manera que su beneficio en el peor de los casos se maximice en tiempo polinómico si las órdenes son divisibles. La complejidad cambia drásticamente para las apuestas en pareja. Demostramos que el problema de emparejamiento óptimo para el subastador es NP-duro para las apuestas por pares con órdenes tanto indivisibles como divisibles a través de reducciones al problema del conjunto mínimo de arcos de retroalimentación. Identificamos una condición suficiente para la existencia de una coincidencia, la cual puede ser verificada en tiempo polinómico. Se ha demostrado que un algoritmo voraz natural da una mala aproximación para las apuestas de pares indivisibles. Interesantes preguntas abiertas para nuestras apuestas de permutación incluyen la complejidad computacional del emparejamiento indivisible óptimo para las apuestas de subconjuntos y la condición necesaria para la existencia de un emparejamiento en los mercados de apuestas por pares. Estamos interesados en seguir explorando mejores algoritmos de aproximación para mercados de apuestas por pares. AGRADECIMIENTOS Agradecemos a Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin y a los miembros de Yahoo! Investiga para obtener ideas valiosas y discusiones. REFERENCIAS [1] K. J. Arrow. El papel de los valores en la asignación óptima de la capacidad de soportar riesgos. Revisión de Estudios Económicos, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson y T. A. Rietz. Resultados de una docena de años de investigación en mercados de futuros electorales. En C. A. Plott y V. Smith, editores, Manual de Resultados Económicos Experimentales (próximamente). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest y C. Stein. Introducción a los Algoritmos (Segunda Edición). MIT Press y McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham y R. Steinberg. Subastas combinatorias. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, y T. W. Ross. Deseos, expectativas y acciones: Una encuesta sobre la formación de precios en los mercados de acciones electorales. Revista de Comportamiento Económico y Organización, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock y M. P. Wellman. Apostando al estilo booleano: Un marco de trabajo para operar en valores basado en fórmulas lógicas. Sistemas de Apoyo a la Decisión, 39(1):87-104, 2004. [7] M. Grötschel, L. Lovász y A. Schrijver. El método del elipsoide y sus consecuencias en la optimización combinatoria. Combinatorica, 1(2):169-197, 1981. [8] M. Grötschel, L. Lovász, y A. Schrijver. Algoritmos geométricos y optimización combinatoria. Springer-Verlag, Berlín Heidelberg, 1993. [9] R. D. Hanson. Diseño de mercado de información combinatoria. Sistemas de Información Frontiers, 5(1):107-119, 2003. [10] R. M. Karp. Reductibilidad entre problemas combinatorios. En la complejidad de las computaciones computacionales (Proc. Simposio, IBM Thomas J. Watson Res. Centro, Yorktown Heights, Nueva York), páginas 85-103. Plenum, Nueva York, 1972. [11] M. Krivelevich, Z. Nutov y R. Yuster. Algoritmos de aproximación para problemas de empaquetamiento de ciclos. Actas del decimosexto simposio anual ACM-SIAM sobre algoritmos discretos, páginas 556-561, 2005. [12] H. W. Kuhn. El método húngaro para el problema de asignación. Revista Cuatrimestral de Logística de Investigación Naval, 2:83-97, 1955. [13] J. Munkres. Algoritmos para los problemas de asignación y transporte. Revista de la Sociedad de Matemáticas Industriales y Aplicadas, 5(1):32-38, 1957. [14] N. Nisan. Subasta y asignación en subastas combinatorias. En Actas de la 2ª Conferencia de la ACM sobre Comercio Electrónico (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles y F. A. Nielsen. El verdadero poder de los mercados artificiales. Ciencia, 291:987-988, febrero de 2002. [16] C. Plott y S. Sunder. Eficiencia de los mercados de seguridad experimental con información privilegiada: Una aplicación de modelos de expectativas racionales. Revista de Economía Política, 90:663-98, 1982. [17] C. Plott y S. Sunder. Expectativas racionales y la agregación de información diversa en mercados de seguridad de laboratorio. Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. \n\nEconometrica, 56:1085-1118, 1988. [18] T. Sandholm. Algoritmo para la determinación óptima del ganador en subastas combinatorias. Inteligencia Artificial, 135:1-54, 2002. [19] R. Yuster y Z. Nutov. Empaquetando ciclos dirigidos de manera eficiente. Actas del 29º Simposio Internacional sobre Fundamentos Matemáticos de la Ciencia de la Computación (MFCS), 2004. 335 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "pair-betting market": {
            "translated_key": "mercado de apuestas por pares",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the <br>pair-betting market</br> have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [
                "The orders in the <br>pair-betting market</br> have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe."
            ],
            "translated_annotated_samples": [
                "Las órdenes en el <br>mercado de apuestas por pares</br> tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe."
            ],
            "translated_text": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el <br>mercado de apuestas por pares</br> tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1. Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración. Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor. Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores). Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras. Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores. Esto proporciona el número máximo de aristas ganadoras wmax. Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG. El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H). La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax. Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|. Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6). Tenemos el siguiente lema. Lema 3. Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G). Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración. G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G). Supongamos que k(G∗) < k(G). Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|. Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗. Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza. Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G). Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación. Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro. Teorema 4. Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro. Prueba. Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas. Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G). Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil. El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro. Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro. Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos. A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro. Utilizaremos el siguiente dato corto repetidamente. Lema 5 (Lema de eliminación de aristas). Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1. Prueba. Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe. Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe. De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1. Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1. Teorema 6. Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba. Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas. Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación. Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo. Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas. Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G. El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones. En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G). En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes. Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k(G). Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. Figura 2: Un gráfico de órdenes. Las letras en los bordes representan los precios de orden. Considera el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD. Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78. Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3). A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba. Para cualquier estado s, las aristas ganadoras forman un DAG. Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza. La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H). Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7). Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗. Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗). Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗). Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G). Prueba. A partir del lema 8, l(G∗ ) ≤ k(G). Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe. Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Supongamos que l(G∗ ) < k(G). Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G). Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗). Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G). Por lo tanto, l(G∗) = k(G). Teorema 10. Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro. Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro. El teorema 10 establece que resolver el programa lineal (7) es NP-duro. De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos. Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también. Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9. Lema 11. Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1. Entonces, k(H − {e}) = k(H). Prueba. Supongamos lo contrario, es decir, k(H−{e}) < k(H). Entonces, por el Lema 5, k(H − {e}) = k(H) − 1. Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1. La contradicción surge. Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo. Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera. Teorema 12. Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro. Prueba. Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H). El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas. En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G). Queda verificar que cada iteración reduce k(G) exactamente en 1. Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo. Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario. Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado. Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor. Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento. Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad. El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración. El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos. Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo. Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico. Lema 14. Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración. Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be). Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta. Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v). El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice. Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico. Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia. Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos. La Figura 1 muestra tal situación. Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un algoritmo voraz natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos. Sin embargo, demostramos que dicho algoritmo voraz puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el algoritmo voraz encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante. Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente. Lema 15. El algoritmo voraz da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos. Prueba. Considera el gráfico en la Figura 3 que consiste en un ciclo con √ n aristas, cada una de las cuales participa en otro ciclo (disjunto de lo contrario) con √ n + 1 aristas. Supongamos que todos los pesos de las aristas son (1 − ). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños dan un mayor beneficio en el peor de los casos, el algoritmo voraz seleccionaría primero el ciclo de longitud √ n, después del cual solo quedaría un ciclo restante de longitud n. Por lo tanto, el número total de ciclos seleccionados por el algoritmo voraz es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lema 15, se puede esperar que los algoritmos voraces den aproximaciones de √ n como máximo. Los algoritmos de aproximación para encontrar el máximo número de ciclos disjuntos por aristas han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de grafos dirigidos, los autores demuestran que un algoritmo voraz proporciona una aproximación de a√ n [11]. Cuando la coincidencia óptima no consiste en ciclos disjuntos de bordes como en el ejemplo de la Figura 3, el algoritmo voraz que intenta encontrar ciclos individuales óptimos falla evidentemente. 6. CONCLUSIÓN Consideramos un escenario de apuestas de permutación, donde los traders apuestan por el orden final de n candidatos. Si bien es antinatural e intratable permitir a los comerciantes apostar directamente en las n! diferentes ordenaciones finales, proponemos dos lenguajes de apuestas expresivas, la apuesta de subconjunto y la apuesta de par. En un mercado de apuestas de subconjuntos, los traders pueden apostar ya sea por un subconjunto de posiciones que un candidato ocupa o por un subconjunto de candidatos que ocupan una posición específica en el orden final. La apuesta por pares permite a los traders apostar si un candidato dado ocupa un rango más alto que otro candidato dado. Examinamos el problema del subastador de emparejar órdenes sin incurrir en riesgos. Encontramos que en un mercado de apuestas de subconjuntos, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes a aceptar de manera que su beneficio en el peor de los casos se maximice en tiempo polinómico si las órdenes son divisibles. La complejidad cambia drásticamente para las apuestas en pareja. Demostramos que el problema de emparejamiento óptimo para el subastador es NP-duro para las apuestas por pares con órdenes tanto indivisibles como divisibles a través de reducciones al problema del conjunto mínimo de arcos de retroalimentación. Identificamos una condición suficiente para la existencia de una coincidencia, la cual puede ser verificada en tiempo polinómico. Se ha demostrado que un algoritmo voraz natural da una mala aproximación para las apuestas de pares indivisibles. Interesantes preguntas abiertas para nuestras apuestas de permutación incluyen la complejidad computacional del emparejamiento indivisible óptimo para las apuestas de subconjuntos y la condición necesaria para la existencia de un emparejamiento en los mercados de apuestas por pares. Estamos interesados en seguir explorando mejores algoritmos de aproximación para mercados de apuestas por pares. AGRADECIMIENTOS Agradecemos a Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin y a los miembros de Yahoo! Investiga para obtener ideas valiosas y discusiones. REFERENCIAS [1] K. J. Arrow. El papel de los valores en la asignación óptima de la capacidad de soportar riesgos. Revisión de Estudios Económicos, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson y T. A. Rietz. Resultados de una docena de años de investigación en mercados de futuros electorales. En C. A. Plott y V. Smith, editores, Manual de Resultados Económicos Experimentales (próximamente). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest y C. Stein. Introducción a los Algoritmos (Segunda Edición). MIT Press y McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham y R. Steinberg. Subastas combinatorias. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, y T. W. Ross. Deseos, expectativas y acciones: Una encuesta sobre la formación de precios en los mercados de acciones electorales. Revista de Comportamiento Económico y Organización, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock y M. P. Wellman. Apostando al estilo booleano: Un marco de trabajo para operar en valores basado en fórmulas lógicas. Sistemas de Apoyo a la Decisión, 39(1):87-104, 2004. [7] M. Grötschel, L. Lovász y A. Schrijver. El método del elipsoide y sus consecuencias en la optimización combinatoria. Combinatorica, 1(2):169-197, 1981. [8] M. Grötschel, L. Lovász, y A. Schrijver. Algoritmos geométricos y optimización combinatoria. Springer-Verlag, Berlín Heidelberg, 1993. [9] R. D. Hanson. Diseño de mercado de información combinatoria. Sistemas de Información Frontiers, 5(1):107-119, 2003. [10] R. M. Karp. Reductibilidad entre problemas combinatorios. En la complejidad de las computaciones computacionales (Proc. Simposio, IBM Thomas J. Watson Res. Centro, Yorktown Heights, Nueva York), páginas 85-103. Plenum, Nueva York, 1972. [11] M. Krivelevich, Z. Nutov y R. Yuster. Algoritmos de aproximación para problemas de empaquetamiento de ciclos. Actas del decimosexto simposio anual ACM-SIAM sobre algoritmos discretos, páginas 556-561, 2005. [12] H. W. Kuhn. El método húngaro para el problema de asignación. Revista Cuatrimestral de Logística de Investigación Naval, 2:83-97, 1955. [13] J. Munkres. Algoritmos para los problemas de asignación y transporte. Revista de la Sociedad de Matemáticas Industriales y Aplicadas, 5(1):32-38, 1957. [14] N. Nisan. Subasta y asignación en subastas combinatorias. En Actas de la 2ª Conferencia de la ACM sobre Comercio Electrónico (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles y F. A. Nielsen. El verdadero poder de los mercados artificiales. Ciencia, 291:987-988, febrero de 2002. [16] C. Plott y S. Sunder. Eficiencia de los mercados de seguridad experimental con información privilegiada: Una aplicación de modelos de expectativas racionales. Revista de Economía Política, 90:663-98, 1982. [17] C. Plott y S. Sunder. Expectativas racionales y la agregación de información diversa en mercados de seguridad de laboratorio. Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. \n\nEconometrica, 56:1085-1118, 1988. [18] T. Sandholm. Algoritmo para la determinación óptima del ganador en subastas combinatorias. Inteligencia Artificial, 135:1-54, 2002. [19] R. Yuster y Z. Nutov. Empaquetando ciclos dirigidos de manera eficiente. Actas del 29º Simposio Internacional sobre Fundamentos Matemáticos de la Ciencia de la Computación (MFCS), 2004. 335 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "bipartite graph": {
            "translated_key": "grafo bipartito",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted <br>bipartite graph</br> can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the <br>bipartite graph</br>.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a <br>bipartite graph</br>, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted <br>bipartite graph</br> can be constructed between the set of candidates and the set of positions.",
                "Every state s then corresponds to a perfect matching in the <br>bipartite graph</br>.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a <br>bipartite graph</br>, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities."
            ],
            "translated_annotated_samples": [
                "El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un <br>grafo bipartito</br> ponderado entre el conjunto de candidatos y el conjunto de posiciones.",
                "Cada estado s corresponde entonces a un emparejamiento perfecto en el <br>grafo bipartito</br>.",
                "Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un <br>grafo bipartito</br>, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento."
            ],
            "translated_text": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un <br>grafo bipartito</br> ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el <br>grafo bipartito</br>. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un <br>grafo bipartito</br>, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1. Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración. Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor. Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores). Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras. Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores. Esto proporciona el número máximo de aristas ganadoras wmax. Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG. El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H). La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax. Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|. Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6). Tenemos el siguiente lema. Lema 3. Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G). Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración. G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G). Supongamos que k(G∗) < k(G). Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|. Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗. Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza. Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G). Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación. Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro. Teorema 4. Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro. Prueba. Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas. Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G). Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil. El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro. Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro. Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos. A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro. Utilizaremos el siguiente dato corto repetidamente. Lema 5 (Lema de eliminación de aristas). Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1. Prueba. Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe. Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe. De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1. Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1. Teorema 6. Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba. Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas. Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación. Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo. Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas. Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G. El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones. En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G). En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes. Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k(G). Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. Figura 2: Un gráfico de órdenes. Las letras en los bordes representan los precios de orden. Considera el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD. Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78. Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3). A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba. Para cualquier estado s, las aristas ganadoras forman un DAG. Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza. La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H). Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7). Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗. Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗). Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗). Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G). Prueba. A partir del lema 8, l(G∗ ) ≤ k(G). Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe. Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Supongamos que l(G∗ ) < k(G). Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G). Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗). Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G). Por lo tanto, l(G∗) = k(G). Teorema 10. Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro. Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro. El teorema 10 establece que resolver el programa lineal (7) es NP-duro. De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos. Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también. Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9. Lema 11. Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1. Entonces, k(H − {e}) = k(H). Prueba. Supongamos lo contrario, es decir, k(H−{e}) < k(H). Entonces, por el Lema 5, k(H − {e}) = k(H) − 1. Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1. La contradicción surge. Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo. Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera. Teorema 12. Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro. Prueba. Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H). El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas. En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G). Queda verificar que cada iteración reduce k(G) exactamente en 1. Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo. Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario. Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado. Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor. Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento. Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad. El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración. El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos. Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo. Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico. Lema 14. Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración. Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be). Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta. Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v). El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice. Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico. Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia. Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos. La Figura 1 muestra tal situación. Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un algoritmo voraz natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos. Sin embargo, demostramos que dicho algoritmo voraz puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el algoritmo voraz encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante. Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente. Lema 15. El algoritmo voraz da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos. Prueba. Considera el gráfico en la Figura 3 que consiste en un ciclo con √ n aristas, cada una de las cuales participa en otro ciclo (disjunto de lo contrario) con √ n + 1 aristas. Supongamos que todos los pesos de las aristas son (1 − ). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños dan un mayor beneficio en el peor de los casos, el algoritmo voraz seleccionaría primero el ciclo de longitud √ n, después del cual solo quedaría un ciclo restante de longitud n. Por lo tanto, el número total de ciclos seleccionados por el algoritmo voraz es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lema 15, se puede esperar que los algoritmos voraces den aproximaciones de √ n como máximo. Los algoritmos de aproximación para encontrar el máximo número de ciclos disjuntos por aristas han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de grafos dirigidos, los autores demuestran que un algoritmo voraz proporciona una aproximación de a√ n [11]. Cuando la coincidencia óptima no consiste en ciclos disjuntos de bordes como en el ejemplo de la Figura 3, el algoritmo voraz que intenta encontrar ciclos individuales óptimos falla evidentemente. 6. CONCLUSIÓN Consideramos un escenario de apuestas de permutación, donde los traders apuestan por el orden final de n candidatos. Si bien es antinatural e intratable permitir a los comerciantes apostar directamente en las n! diferentes ordenaciones finales, proponemos dos lenguajes de apuestas expresivas, la apuesta de subconjunto y la apuesta de par. En un mercado de apuestas de subconjuntos, los traders pueden apostar ya sea por un subconjunto de posiciones que un candidato ocupa o por un subconjunto de candidatos que ocupan una posición específica en el orden final. La apuesta por pares permite a los traders apostar si un candidato dado ocupa un rango más alto que otro candidato dado. Examinamos el problema del subastador de emparejar órdenes sin incurrir en riesgos. Encontramos que en un mercado de apuestas de subconjuntos, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes a aceptar de manera que su beneficio en el peor de los casos se maximice en tiempo polinómico si las órdenes son divisibles. La complejidad cambia drásticamente para las apuestas en pareja. Demostramos que el problema de emparejamiento óptimo para el subastador es NP-duro para las apuestas por pares con órdenes tanto indivisibles como divisibles a través de reducciones al problema del conjunto mínimo de arcos de retroalimentación. Identificamos una condición suficiente para la existencia de una coincidencia, la cual puede ser verificada en tiempo polinómico. Se ha demostrado que un algoritmo voraz natural da una mala aproximación para las apuestas de pares indivisibles. Interesantes preguntas abiertas para nuestras apuestas de permutación incluyen la complejidad computacional del emparejamiento indivisible óptimo para las apuestas de subconjuntos y la condición necesaria para la existencia de un emparejamiento en los mercados de apuestas por pares. Estamos interesados en seguir explorando mejores algoritmos de aproximación para mercados de apuestas por pares. AGRADECIMIENTOS Agradecemos a Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin y a los miembros de Yahoo! Investiga para obtener ideas valiosas y discusiones. REFERENCIAS [1] K. J. Arrow. El papel de los valores en la asignación óptima de la capacidad de soportar riesgos. Revisión de Estudios Económicos, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson y T. A. Rietz. Resultados de una docena de años de investigación en mercados de futuros electorales. En C. A. Plott y V. Smith, editores, Manual de Resultados Económicos Experimentales (próximamente). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest y C. Stein. Introducción a los Algoritmos (Segunda Edición). MIT Press y McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham y R. Steinberg. Subastas combinatorias. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, y T. W. Ross. Deseos, expectativas y acciones: Una encuesta sobre la formación de precios en los mercados de acciones electorales. Revista de Comportamiento Económico y Organización, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock y M. P. Wellman. Apostando al estilo booleano: Un marco de trabajo para operar en valores basado en fórmulas lógicas. Sistemas de Apoyo a la Decisión, 39(1):87-104, 2004. [7] M. Grötschel, L. Lovász y A. Schrijver. El método del elipsoide y sus consecuencias en la optimización combinatoria. Combinatorica, 1(2):169-197, 1981. [8] M. Grötschel, L. Lovász, y A. Schrijver. Algoritmos geométricos y optimización combinatoria. Springer-Verlag, Berlín Heidelberg, 1993. [9] R. D. Hanson. Diseño de mercado de información combinatoria. Sistemas de Información Frontiers, 5(1):107-119, 2003. [10] R. M. Karp. Reductibilidad entre problemas combinatorios. En la complejidad de las computaciones computacionales (Proc. Simposio, IBM Thomas J. Watson Res. Centro, Yorktown Heights, Nueva York), páginas 85-103. Plenum, Nueva York, 1972. [11] M. Krivelevich, Z. Nutov y R. Yuster. Algoritmos de aproximación para problemas de empaquetamiento de ciclos. Actas del decimosexto simposio anual ACM-SIAM sobre algoritmos discretos, páginas 556-561, 2005. [12] H. W. Kuhn. El método húngaro para el problema de asignación. Revista Cuatrimestral de Logística de Investigación Naval, 2:83-97, 1955. [13] J. Munkres. Algoritmos para los problemas de asignación y transporte. Revista de la Sociedad de Matemáticas Industriales y Aplicadas, 5(1):32-38, 1957. [14] N. Nisan. Subasta y asignación en subastas combinatorias. En Actas de la 2ª Conferencia de la ACM sobre Comercio Electrónico (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles y F. A. Nielsen. El verdadero poder de los mercados artificiales. Ciencia, 291:987-988, febrero de 2002. [16] C. Plott y S. Sunder. Eficiencia de los mercados de seguridad experimental con información privilegiada: Una aplicación de modelos de expectativas racionales. Revista de Economía Política, 90:663-98, 1982. [17] C. Plott y S. Sunder. Expectativas racionales y la agregación de información diversa en mercados de seguridad de laboratorio. Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. \n\nEconometrica, 56:1085-1118, 1988. [18] T. Sandholm. Algoritmo para la determinación óptima del ganador en subastas combinatorias. Inteligencia Artificial, 135:1-54, 2002. [19] R. Yuster y Z. Nutov. Empaquetando ciclos dirigidos de manera eficiente. Actas del 29º Simposio Internacional sobre Fundamentos Matemáticos de la Ciencia de la Computación (MFCS), 2004. 335 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "minimum feedback": {
            "translated_key": "conjunto mínimo de arcos de retroalimentación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted <br>minimum feedback</br> arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted <br>minimum feedback</br> arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted <br>minimum feedback</br> arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted <br>minimum feedback</br> arc set problem is to find a feedback arc set with the minimum cardinality, while weighted <br>minimum feedback</br> arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted <br>minimum feedback</br> arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted <br>minimum feedback</br> arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted <br>minimum feedback</br> arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the <br>minimum feedback</br> arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the <br>minimum feedback</br> arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted <br>minimum feedback</br> arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted <br>minimum feedback</br> arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the <br>minimum feedback</br> arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the <br>minimum feedback</br> arc set of G, k(G).",
                "Because the <br>minimum feedback</br> arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted <br>minimum feedback</br> arc set solution l(H) by no more than xe and reduces the unweighted <br>minimum feedback</br> arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted <br>minimum feedback</br> arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted <br>minimum feedback</br> arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted <br>minimum feedback</br> arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted <br>minimum feedback</br> arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted <br>minimum feedback</br> arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the <br>minimum feedback</br> arc set problem.",
                "We are interested in computing k(G), the size of the <br>minimum feedback</br> arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of <br>minimum feedback</br> arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the <br>minimum feedback</br> arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the <br>minimum feedback</br> arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted <br>minimum feedback</br> arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted <br>minimum feedback</br> arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted <br>minimum feedback</br> arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted <br>minimum feedback</br> arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted <br>minimum feedback</br> arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the <br>minimum feedback</br> arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted <br>minimum feedback</br> arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the <br>minimum feedback</br> arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the <br>minimum feedback</br> arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the <br>minimum feedback</br> arc set: otherwise G is not optimal since G − {e} would have 333 the same <br>minimum feedback</br> arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the <br>minimum feedback</br> arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the <br>minimum feedback</br> arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted <br>minimum feedback</br> arc set problem.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted <br>minimum feedback</br> arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted <br>minimum feedback</br> arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Unweighted <br>minimum feedback</br> arc set problem is to find a feedback arc set with the minimum cardinality, while weighted <br>minimum feedback</br> arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted <br>minimum feedback</br> arc set problems have been shown to be NP-complete [10].",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted <br>minimum feedback</br> arc set problem."
            ],
            "translated_annotated_samples": [
                "Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del <br>conjunto mínimo de arcos de retroalimentación</br> no ponderados.",
                "Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño.",
                "El problema del <br>conjunto mínimo de arcos de retroalimentación</br> no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del <br>conjunto mínimo de arcos de retroalimentación</br> ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas.",
                "Tanto los problemas de <br>conjunto mínimo de arcos de retroalimentación</br> no ponderados como ponderados se ha demostrado que son NP-completos [10].",
                "Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del <br>conjunto mínimo de arcos de retroalimentación</br> no ponderados."
            ],
            "translated_text": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del <br>conjunto mínimo de arcos de retroalimentación</br> no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del <br>conjunto mínimo de arcos de retroalimentación</br> no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del <br>conjunto mínimo de arcos de retroalimentación</br> ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de <br>conjunto mínimo de arcos de retroalimentación</br> no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del <br>conjunto mínimo de arcos de retroalimentación</br> no ponderados. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "greedy algorithm": {
            "translated_key": "algoritmo voraz",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural <br>greedy algorithm</br> gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a <br>greedy algorithm</br> offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural <br>greedy algorithm</br> can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such <br>greedy algorithm</br> can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the <br>greedy algorithm</br> finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The <br>greedy algorithm</br> gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the <br>greedy algorithm</br> would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a <br>greedy algorithm</br> gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, <br>greedy algorithm</br> trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural <br>greedy algorithm</br> has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [
                "We also show that a natural <br>greedy algorithm</br> gives a poor approximation for indivisible orders.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a <br>greedy algorithm</br> offers poor approximation for indivisible pair bets. 2.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural <br>greedy algorithm</br> can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such <br>greedy algorithm</br> can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the <br>greedy algorithm</br> finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The <br>greedy algorithm</br> gives at most an O( √ n)approximation to the maximum number of disjoint cycles."
            ],
            "translated_annotated_samples": [
                "También demostramos que un <br>algoritmo voraz</br> natural proporciona una mala aproximación para pedidos indivisibles.",
                "También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un <br>algoritmo voraz</br> ofrece una mala aproximación para apuestas por pares indivisibles. 2.",
                "Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un <br>algoritmo voraz</br> natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos.",
                "Sin embargo, demostramos que dicho <br>algoritmo voraz</br> puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el <br>algoritmo voraz</br> encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante.",
                "El <br>algoritmo voraz</br> da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos."
            ],
            "translated_text": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un <br>algoritmo voraz</br> natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un <br>algoritmo voraz</br> ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1. Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración. Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor. Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores). Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras. Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores. Esto proporciona el número máximo de aristas ganadoras wmax. Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG. El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H). La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax. Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|. Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6). Tenemos el siguiente lema. Lema 3. Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G). Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración. G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G). Supongamos que k(G∗) < k(G). Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|. Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗. Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza. Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G). Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación. Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro. Teorema 4. Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro. Prueba. Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas. Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G). Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil. El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro. Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro. Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos. A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro. Utilizaremos el siguiente dato corto repetidamente. Lema 5 (Lema de eliminación de aristas). Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1. Prueba. Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe. Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe. De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1. Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1. Teorema 6. Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba. Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas. Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación. Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo. Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas. Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G. El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones. En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G). En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes. Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k(G). Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. Figura 2: Un gráfico de órdenes. Las letras en los bordes representan los precios de orden. Considera el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD. Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78. Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3). A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba. Para cualquier estado s, las aristas ganadoras forman un DAG. Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza. La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H). Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7). Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗. Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗). Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗). Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G). Prueba. A partir del lema 8, l(G∗ ) ≤ k(G). Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe. Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Supongamos que l(G∗ ) < k(G). Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G). Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗). Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G). Por lo tanto, l(G∗) = k(G). Teorema 10. Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro. Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro. El teorema 10 establece que resolver el programa lineal (7) es NP-duro. De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos. Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también. Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9. Lema 11. Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1. Entonces, k(H − {e}) = k(H). Prueba. Supongamos lo contrario, es decir, k(H−{e}) < k(H). Entonces, por el Lema 5, k(H − {e}) = k(H) − 1. Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1. La contradicción surge. Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo. Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera. Teorema 12. Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro. Prueba. Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H). El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas. En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G). Queda verificar que cada iteración reduce k(G) exactamente en 1. Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo. Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario. Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado. Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor. Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento. Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad. El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración. El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos. Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo. Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico. Lema 14. Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración. Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be). Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta. Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v). El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice. Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico. Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia. Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos. La Figura 1 muestra tal situación. Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un <br>algoritmo voraz</br> natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos. Sin embargo, demostramos que dicho <br>algoritmo voraz</br> puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el <br>algoritmo voraz</br> encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante. Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente. Lema 15. El <br>algoritmo voraz</br> da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "complex polynomial transformation": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more <br>complex polynomial transformation</br> involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more <br>complex polynomial transformation</br> involving multiple calls to the optimal match oracle."
            ],
            "translated_annotated_samples": [
                "Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas."
            ],
            "translated_text": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1. Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración. Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor. Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores). Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras. Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores. Esto proporciona el número máximo de aristas ganadoras wmax. Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG. El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H). La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax. Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|. Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6). Tenemos el siguiente lema. Lema 3. Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G). Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración. G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G). Supongamos que k(G∗) < k(G). Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|. Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗. Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza. Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G). Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación. Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro. Teorema 4. Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro. Prueba. Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas. Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G). Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil. El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro. Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro. Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos. A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro. Utilizaremos el siguiente dato corto repetidamente. Lema 5 (Lema de eliminación de aristas). Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1. Prueba. Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe. Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe. De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1. Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1. Teorema 6. Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba. Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas. Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación. Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo. Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas. Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G. El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones. En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G). En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes. Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k(G). Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. Figura 2: Un gráfico de órdenes. Las letras en los bordes representan los precios de orden. Considera el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD. Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78. Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3). A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba. Para cualquier estado s, las aristas ganadoras forman un DAG. Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza. La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H). Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7). Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗. Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗). Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗). Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G). Prueba. A partir del lema 8, l(G∗ ) ≤ k(G). Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe. Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Supongamos que l(G∗ ) < k(G). Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G). Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗). Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G). Por lo tanto, l(G∗) = k(G). Teorema 10. Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro. Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro. El teorema 10 establece que resolver el programa lineal (7) es NP-duro. De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos. Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también. Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9. Lema 11. Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1. Entonces, k(H − {e}) = k(H). Prueba. Supongamos lo contrario, es decir, k(H−{e}) < k(H). Entonces, por el Lema 5, k(H − {e}) = k(H) − 1. Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1. La contradicción surge. Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo. Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera. Teorema 12. Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro. Prueba. Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H). El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas. En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G). Queda verificar que cada iteración reduce k(G) exactamente en 1. Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo. Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario. Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado. Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor. Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento. Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad. El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración. El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos. Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo. Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico. Lema 14. Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración. Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be). Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta. Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v). El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice. Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico. Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia. Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos. La Figura 1 muestra tal situación. Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un algoritmo voraz natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos. Sin embargo, demostramos que dicho algoritmo voraz puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el algoritmo voraz encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante. Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente. Lema 15. El algoritmo voraz da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos. Prueba. Considera el gráfico en la Figura 3 que consiste en un ciclo con √ n aristas, cada una de las cuales participa en otro ciclo (disjunto de lo contrario) con √ n + 1 aristas. Supongamos que todos los pesos de las aristas son (1 − ). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños dan un mayor beneficio en el peor de los casos, el algoritmo voraz seleccionaría primero el ciclo de longitud √ n, después del cual solo quedaría un ciclo restante de longitud n. Por lo tanto, el número total de ciclos seleccionados por el algoritmo voraz es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lema 15, se puede esperar que los algoritmos voraces den aproximaciones de √ n como máximo. Los algoritmos de aproximación para encontrar el máximo número de ciclos disjuntos por aristas han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de grafos dirigidos, los autores demuestran que un algoritmo voraz proporciona una aproximación de a√ n [11]. Cuando la coincidencia óptima no consiste en ciclos disjuntos de bordes como en el ejemplo de la Figura 3, el algoritmo voraz que intenta encontrar ciclos individuales óptimos falla evidentemente. 6. CONCLUSIÓN Consideramos un escenario de apuestas de permutación, donde los traders apuestan por el orden final de n candidatos. Si bien es antinatural e intratable permitir a los comerciantes apostar directamente en las n! diferentes ordenaciones finales, proponemos dos lenguajes de apuestas expresivas, la apuesta de subconjunto y la apuesta de par. En un mercado de apuestas de subconjuntos, los traders pueden apostar ya sea por un subconjunto de posiciones que un candidato ocupa o por un subconjunto de candidatos que ocupan una posición específica en el orden final. La apuesta por pares permite a los traders apostar si un candidato dado ocupa un rango más alto que otro candidato dado. Examinamos el problema del subastador de emparejar órdenes sin incurrir en riesgos. Encontramos que en un mercado de apuestas de subconjuntos, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes a aceptar de manera que su beneficio en el peor de los casos se maximice en tiempo polinómico si las órdenes son divisibles. La complejidad cambia drásticamente para las apuestas en pareja. Demostramos que el problema de emparejamiento óptimo para el subastador es NP-duro para las apuestas por pares con órdenes tanto indivisibles como divisibles a través de reducciones al problema del conjunto mínimo de arcos de retroalimentación. Identificamos una condición suficiente para la existencia de una coincidencia, la cual puede ser verificada en tiempo polinómico. Se ha demostrado que un algoritmo voraz natural da una mala aproximación para las apuestas de pares indivisibles. Interesantes preguntas abiertas para nuestras apuestas de permutación incluyen la complejidad computacional del emparejamiento indivisible óptimo para las apuestas de subconjuntos y la condición necesaria para la existencia de un emparejamiento en los mercados de apuestas por pares. Estamos interesados en seguir explorando mejores algoritmos de aproximación para mercados de apuestas por pares. AGRADECIMIENTOS Agradecemos a Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin y a los miembros de Yahoo! Investiga para obtener ideas valiosas y discusiones. REFERENCIAS [1] K. J. Arrow. El papel de los valores en la asignación óptima de la capacidad de soportar riesgos. Revisión de Estudios Económicos, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson y T. A. Rietz. Resultados de una docena de años de investigación en mercados de futuros electorales. En C. A. Plott y V. Smith, editores, Manual de Resultados Económicos Experimentales (próximamente). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest y C. Stein. Introducción a los Algoritmos (Segunda Edición). MIT Press y McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham y R. Steinberg. Subastas combinatorias. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, y T. W. Ross. Deseos, expectativas y acciones: Una encuesta sobre la formación de precios en los mercados de acciones electorales. Revista de Comportamiento Económico y Organización, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock y M. P. Wellman. Apostando al estilo booleano: Un marco de trabajo para operar en valores basado en fórmulas lógicas. Sistemas de Apoyo a la Decisión, 39(1):87-104, 2004. [7] M. Grötschel, L. Lovász y A. Schrijver. El método del elipsoide y sus consecuencias en la optimización combinatoria. Combinatorica, 1(2):169-197, 1981. [8] M. Grötschel, L. Lovász, y A. Schrijver. Algoritmos geométricos y optimización combinatoria. Springer-Verlag, Berlín Heidelberg, 1993. [9] R. D. Hanson. Diseño de mercado de información combinatoria. Sistemas de Información Frontiers, 5(1):107-119, 2003. [10] R. M. Karp. Reductibilidad entre problemas combinatorios. En la complejidad de las computaciones computacionales (Proc. Simposio, IBM Thomas J. Watson Res. Centro, Yorktown Heights, Nueva York), páginas 85-103. Plenum, Nueva York, 1972. [11] M. Krivelevich, Z. Nutov y R. Yuster. Algoritmos de aproximación para problemas de empaquetamiento de ciclos. Actas del decimosexto simposio anual ACM-SIAM sobre algoritmos discretos, páginas 556-561, 2005. [12] H. W. Kuhn. El método húngaro para el problema de asignación. Revista Cuatrimestral de Logística de Investigación Naval, 2:83-97, 1955. [13] J. Munkres. Algoritmos para los problemas de asignación y transporte. Revista de la Sociedad de Matemáticas Industriales y Aplicadas, 5(1):32-38, 1957. [14] N. Nisan. Subasta y asignación en subastas combinatorias. En Actas de la 2ª Conferencia de la ACM sobre Comercio Electrónico (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles y F. A. Nielsen. El verdadero poder de los mercados artificiales. Ciencia, 291:987-988, febrero de 2002. [16] C. Plott y S. Sunder. Eficiencia de los mercados de seguridad experimental con información privilegiada: Una aplicación de modelos de expectativas racionales. Revista de Economía Política, 90:663-98, 1982. [17] C. Plott y S. Sunder. Expectativas racionales y la agregación de información diversa en mercados de seguridad de laboratorio. Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. \n\nEconometrica, 56:1085-1118, 1988. [18] T. Sandholm. Algoritmo para la determinación óptima del ganador en subastas combinatorias. Inteligencia Artificial, 135:1-54, 2002. [19] R. Yuster y Z. Nutov. Empaquetando ciclos dirigidos de manera eficiente. Actas del 29º Simposio Internacional sobre Fundamentos Matemáticos de la Ciencia de la Computación (MFCS), 2004. 335 ",
            "candidates": [],
            "error": [
                []
            ]
        },
        "prediction market": {
            "translated_key": "mercado de predicciones",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "expressive bet": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two <br>expressive bet</br>ting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two <br>expressive bet</br>ting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [
                "We propose two <br>expressive bet</br>ting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two <br>expressive bet</br>ting languages, subset betting and pair betting."
            ],
            "translated_annotated_samples": [
                "Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso.",
                "Si bien es antinatural e intratable permitir a los comerciantes apostar directamente en las n! diferentes ordenaciones finales, proponemos dos lenguajes de apuestas expresivas, la apuesta de subconjunto y la apuesta de par."
            ],
            "translated_text": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1. Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración. Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor. Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores). Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras. Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores. Esto proporciona el número máximo de aristas ganadoras wmax. Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG. El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H). La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax. Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|. Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6). Tenemos el siguiente lema. Lema 3. Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G). Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración. G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G). Supongamos que k(G∗) < k(G). Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|. Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗. Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza. Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G). Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación. Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro. Teorema 4. Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro. Prueba. Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas. Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G). Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil. El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro. Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro. Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos. A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro. Utilizaremos el siguiente dato corto repetidamente. Lema 5 (Lema de eliminación de aristas). Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1. Prueba. Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe. Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe. De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1. Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1. Teorema 6. Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba. Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas. Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación. Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo. Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas. Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G. El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones. En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G). En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes. Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k(G). Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. Figura 2: Un gráfico de órdenes. Las letras en los bordes representan los precios de orden. Considera el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD. Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78. Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3). A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba. Para cualquier estado s, las aristas ganadoras forman un DAG. Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza. La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H). Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7). Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗. Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗). Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗). Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G). Prueba. A partir del lema 8, l(G∗ ) ≤ k(G). Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe. Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Supongamos que l(G∗ ) < k(G). Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G). Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗). Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G). Por lo tanto, l(G∗) = k(G). Teorema 10. Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro. Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro. El teorema 10 establece que resolver el programa lineal (7) es NP-duro. De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos. Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también. Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9. Lema 11. Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1. Entonces, k(H − {e}) = k(H). Prueba. Supongamos lo contrario, es decir, k(H−{e}) < k(H). Entonces, por el Lema 5, k(H − {e}) = k(H) − 1. Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1. La contradicción surge. Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo. Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera. Teorema 12. Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro. Prueba. Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H). El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas. En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G). Queda verificar que cada iteración reduce k(G) exactamente en 1. Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo. Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario. Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado. Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor. Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento. Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad. El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración. El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos. Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo. Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico. Lema 14. Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración. Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be). Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta. Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v). El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice. Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico. Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia. Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos. La Figura 1 muestra tal situación. Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un algoritmo voraz natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos. Sin embargo, demostramos que dicho algoritmo voraz puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el algoritmo voraz encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante. Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente. Lema 15. El algoritmo voraz da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos. Prueba. Considera el gráfico en la Figura 3 que consiste en un ciclo con √ n aristas, cada una de las cuales participa en otro ciclo (disjunto de lo contrario) con √ n + 1 aristas. Supongamos que todos los pesos de las aristas son (1 − ). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños dan un mayor beneficio en el peor de los casos, el algoritmo voraz seleccionaría primero el ciclo de longitud √ n, después del cual solo quedaría un ciclo restante de longitud n. Por lo tanto, el número total de ciclos seleccionados por el algoritmo voraz es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lema 15, se puede esperar que los algoritmos voraces den aproximaciones de √ n como máximo. Los algoritmos de aproximación para encontrar el máximo número de ciclos disjuntos por aristas han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de grafos dirigidos, los autores demuestran que un algoritmo voraz proporciona una aproximación de a√ n [11]. Cuando la coincidencia óptima no consiste en ciclos disjuntos de bordes como en el ejemplo de la Figura 3, el algoritmo voraz que intenta encontrar ciclos individuales óptimos falla evidentemente. 6. CONCLUSIÓN Consideramos un escenario de apuestas de permutación, donde los traders apuestan por el orden final de n candidatos. Si bien es antinatural e intratable permitir a los comerciantes apostar directamente en las n! diferentes ordenaciones finales, proponemos dos lenguajes de apuestas expresivas, la apuesta de subconjunto y la apuesta de par. En un mercado de apuestas de subconjuntos, los traders pueden apostar ya sea por un subconjunto de posiciones que un candidato ocupa o por un subconjunto de candidatos que ocupan una posición específica en el orden final. La apuesta por pares permite a los traders apostar si un candidato dado ocupa un rango más alto que otro candidato dado. Examinamos el problema del subastador de emparejar órdenes sin incurrir en riesgos. Encontramos que en un mercado de apuestas de subconjuntos, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes a aceptar de manera que su beneficio en el peor de los casos se maximice en tiempo polinómico si las órdenes son divisibles. La complejidad cambia drásticamente para las apuestas en pareja. Demostramos que el problema de emparejamiento óptimo para el subastador es NP-duro para las apuestas por pares con órdenes tanto indivisibles como divisibles a través de reducciones al problema del conjunto mínimo de arcos de retroalimentación. Identificamos una condición suficiente para la existencia de una coincidencia, la cual puede ser verificada en tiempo polinómico. Se ha demostrado que un algoritmo voraz natural da una mala aproximación para las apuestas de pares indivisibles. Interesantes preguntas abiertas para nuestras apuestas de permutación incluyen la complejidad computacional del emparejamiento indivisible óptimo para las apuestas de subconjuntos y la condición necesaria para la existencia de un emparejamiento en los mercados de apuestas por pares. Estamos interesados en seguir explorando mejores algoritmos de aproximación para mercados de apuestas por pares. AGRADECIMIENTOS Agradecemos a Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin y a los miembros de Yahoo! Investiga para obtener ideas valiosas y discusiones. REFERENCIAS [1] K. J. Arrow. El papel de los valores en la asignación óptima de la capacidad de soportar riesgos. Revisión de Estudios Económicos, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson y T. A. Rietz. Resultados de una docena de años de investigación en mercados de futuros electorales. En C. A. Plott y V. Smith, editores, Manual de Resultados Económicos Experimentales (próximamente). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest y C. Stein. Introducción a los Algoritmos (Segunda Edición). MIT Press y McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham y R. Steinberg. Subastas combinatorias. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, y T. W. Ross. Deseos, expectativas y acciones: Una encuesta sobre la formación de precios en los mercados de acciones electorales. Revista de Comportamiento Económico y Organización, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock y M. P. Wellman. Apostando al estilo booleano: Un marco de trabajo para operar en valores basado en fórmulas lógicas. Sistemas de Apoyo a la Decisión, 39(1):87-104, 2004. [7] M. Grötschel, L. Lovász y A. Schrijver. El método del elipsoide y sus consecuencias en la optimización combinatoria. Combinatorica, 1(2):169-197, 1981. [8] M. Grötschel, L. Lovász, y A. Schrijver. Algoritmos geométricos y optimización combinatoria. Springer-Verlag, Berlín Heidelberg, 1993. [9] R. D. Hanson. Diseño de mercado de información combinatoria. Sistemas de Información Frontiers, 5(1):107-119, 2003. [10] R. M. Karp. Reductibilidad entre problemas combinatorios. En la complejidad de las computaciones computacionales (Proc. Simposio, IBM Thomas J. Watson Res. Centro, Yorktown Heights, Nueva York), páginas 85-103. Plenum, Nueva York, 1972. [11] M. Krivelevich, Z. Nutov y R. Yuster. Algoritmos de aproximación para problemas de empaquetamiento de ciclos. Actas del decimosexto simposio anual ACM-SIAM sobre algoritmos discretos, páginas 556-561, 2005. [12] H. W. Kuhn. El método húngaro para el problema de asignación. Revista Cuatrimestral de Logística de Investigación Naval, 2:83-97, 1955. [13] J. Munkres. Algoritmos para los problemas de asignación y transporte. Revista de la Sociedad de Matemáticas Industriales y Aplicadas, 5(1):32-38, 1957. [14] N. Nisan. Subasta y asignación en subastas combinatorias. En Actas de la 2ª Conferencia de la ACM sobre Comercio Electrónico (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles y F. A. Nielsen. El verdadero poder de los mercados artificiales. Ciencia, 291:987-988, febrero de 2002. [16] C. Plott y S. Sunder. Eficiencia de los mercados de seguridad experimental con información privilegiada: Una aplicación de modelos de expectativas racionales. Revista de Economía Política, 90:663-98, 1982. [17] C. Plott y S. Sunder. Expectativas racionales y la agregación de información diversa en mercados de seguridad de laboratorio. Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. \n\nEconometrica, 56:1085-1118, 1988. [18] T. Sandholm. Algoritmo para la determinación óptima del ganador en subastas combinatorias. Inteligencia Artificial, 135:1-54, 2002. [19] R. Yuster y Z. Nutov. Empaquetando ciclos dirigidos de manera eficiente. Actas del 29º Simposio Internacional sobre Fundamentos Matemáticos de la Ciencia de la Computación (MFCS), 2004. 335 ",
            "candidates": [],
            "error": [
                []
            ]
        },
        "order match": {
            "translated_key": "ordenar partido",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "computational complexity": {
            "translated_key": "complejidad computacional",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the <br>computational complexity</br> of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the <br>computational complexity</br> of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the <br>computational complexity</br> of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the <br>computational complexity</br> of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the <br>computational complexity</br> of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [
                "We propose two expressive betting languages that seem natural for bidders, and examine the <br>computational complexity</br> of the auctioneer problem in each case.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the <br>computational complexity</br> of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "There is a tradeoff between the expressiveness of the bidding language and the <br>computational complexity</br> of the matching problem.",
                "We explore the tradeoff between the expressiveness of the bidding language and the <br>computational complexity</br> of the matching problem.",
                "Interesting open questions for our permutation betting include the <br>computational complexity</br> of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets."
            ],
            "translated_annotated_samples": [
                "Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la <br>complejidad computacional</br> del problema del subastador en cada caso.",
                "Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la <br>complejidad computacional</br> del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales.",
                "Existe un equilibrio entre la expresividad del lenguaje de oferta y la <br>complejidad computacional</br> del problema de emparejamiento.",
                "Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la <br>complejidad computacional</br> del problema de emparejamiento.",
                "Interesantes preguntas abiertas para nuestras apuestas de permutación incluyen la <br>complejidad computacional</br> del emparejamiento indivisible óptimo para las apuestas de subconjuntos y la condición necesaria para la existencia de un emparejamiento en los mercados de apuestas por pares."
            ],
            "translated_text": "Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la <br>complejidad computacional</br> del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la <br>complejidad computacional</br> del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la <br>complejidad computacional</br> del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la <br>complejidad computacional</br> del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1. Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración. Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor. Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores). Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras. Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores. Esto proporciona el número máximo de aristas ganadoras wmax. Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG. El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H). La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax. Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|. Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6). Tenemos el siguiente lema. Lema 3. Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G). Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración. G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G). Supongamos que k(G∗) < k(G). Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|. Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗. Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza. Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G). Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación. Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro. Teorema 4. Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro. Prueba. Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas. Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G). Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil. El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro. Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro. Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos. A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro. Utilizaremos el siguiente dato corto repetidamente. Lema 5 (Lema de eliminación de aristas). Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1. Prueba. Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe. Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe. De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1. Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1. Teorema 6. Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba. Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas. Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación. Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo. Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas. Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G. El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones. En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G). En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes. Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k(G). Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. Figura 2: Un gráfico de órdenes. Las letras en los bordes representan los precios de orden. Considera el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD. Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78. Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3). A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba. Para cualquier estado s, las aristas ganadoras forman un DAG. Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza. La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H). Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7). Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗. Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗). Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗). Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G). Prueba. A partir del lema 8, l(G∗ ) ≤ k(G). Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe. Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Supongamos que l(G∗ ) < k(G). Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G). Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗). Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G). Por lo tanto, l(G∗) = k(G). Teorema 10. Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro. Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro. El teorema 10 establece que resolver el programa lineal (7) es NP-duro. De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos. Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también. Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9. Lema 11. Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1. Entonces, k(H − {e}) = k(H). Prueba. Supongamos lo contrario, es decir, k(H−{e}) < k(H). Entonces, por el Lema 5, k(H − {e}) = k(H) − 1. Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1. La contradicción surge. Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo. Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera. Teorema 12. Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro. Prueba. Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H). El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas. En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G). Queda verificar que cada iteración reduce k(G) exactamente en 1. Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo. Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario. Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado. Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor. Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento. Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad. El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración. El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos. Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo. Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico. Lema 14. Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración. Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be). Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta. Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v). El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice. Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico. Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia. Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos. La Figura 1 muestra tal situación. Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un algoritmo voraz natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos. Sin embargo, demostramos que dicho algoritmo voraz puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el algoritmo voraz encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante. Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente. Lema 15. El algoritmo voraz da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos. Prueba. Considera el gráfico en la Figura 3 que consiste en un ciclo con √ n aristas, cada una de las cuales participa en otro ciclo (disjunto de lo contrario) con √ n + 1 aristas. Supongamos que todos los pesos de las aristas son (1 − ). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños dan un mayor beneficio en el peor de los casos, el algoritmo voraz seleccionaría primero el ciclo de longitud √ n, después del cual solo quedaría un ciclo restante de longitud n. Por lo tanto, el número total de ciclos seleccionados por el algoritmo voraz es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lema 15, se puede esperar que los algoritmos voraces den aproximaciones de √ n como máximo. Los algoritmos de aproximación para encontrar el máximo número de ciclos disjuntos por aristas han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de grafos dirigidos, los autores demuestran que un algoritmo voraz proporciona una aproximación de a√ n [11]. Cuando la coincidencia óptima no consiste en ciclos disjuntos de bordes como en el ejemplo de la Figura 3, el algoritmo voraz que intenta encontrar ciclos individuales óptimos falla evidentemente. 6. CONCLUSIÓN Consideramos un escenario de apuestas de permutación, donde los traders apuestan por el orden final de n candidatos. Si bien es antinatural e intratable permitir a los comerciantes apostar directamente en las n! diferentes ordenaciones finales, proponemos dos lenguajes de apuestas expresivas, la apuesta de subconjunto y la apuesta de par. En un mercado de apuestas de subconjuntos, los traders pueden apostar ya sea por un subconjunto de posiciones que un candidato ocupa o por un subconjunto de candidatos que ocupan una posición específica en el orden final. La apuesta por pares permite a los traders apostar si un candidato dado ocupa un rango más alto que otro candidato dado. Examinamos el problema del subastador de emparejar órdenes sin incurrir en riesgos. Encontramos que en un mercado de apuestas de subconjuntos, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes a aceptar de manera que su beneficio en el peor de los casos se maximice en tiempo polinómico si las órdenes son divisibles. La complejidad cambia drásticamente para las apuestas en pareja. Demostramos que el problema de emparejamiento óptimo para el subastador es NP-duro para las apuestas por pares con órdenes tanto indivisibles como divisibles a través de reducciones al problema del conjunto mínimo de arcos de retroalimentación. Identificamos una condición suficiente para la existencia de una coincidencia, la cual puede ser verificada en tiempo polinómico. Se ha demostrado que un algoritmo voraz natural da una mala aproximación para las apuestas de pares indivisibles. Interesantes preguntas abiertas para nuestras apuestas de permutación incluyen la <br>complejidad computacional</br> del emparejamiento indivisible óptimo para las apuestas de subconjuntos y la condición necesaria para la existencia de un emparejamiento en los mercados de apuestas por pares. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        }
    }
}