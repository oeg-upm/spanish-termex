{
    "id": "C-9",
    "original_text": "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept. of Comp. Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications. The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.). It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution. EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach. Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity. Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1. INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system. Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid. Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well. Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters. The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time. Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements. If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node). Migration however is expensive as the whole state of a service has to be transfered. Additionally a non-replicated service is not accessible during migration. Therefore the resource management has to avoid migration if possible. Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided. EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance. Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the resource management, are decentralized. The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services. The resource management focuses on the execution of services that have a long, potentially infinite, operating time. Theses services are organized in projects. Each project has a distributed execution scope called a service environment. Such an environment possibly spans multiple institutions. Each institution represents an administrative domain that can support a project with a fixed set of resources. Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4]. It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate. To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes. The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project. In cases where rededication is not possible, the migration of the demanding service is initiated. EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5]. The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service. To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster. In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability. Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely. Finally a certain amount of node crashes can be tolerated. The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS. Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management. Section 5 describes the framework for decentralized adaptive services. Section 6 describes related work and finally Section 7 concludes the paper. 2. BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware. At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems. Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services. In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1). From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design. The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments. Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub. However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime. This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements. It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3. EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment. The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution. The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments. The service environment supports the execution of services belonging to the same project. Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment. The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services. Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains. Every node provides a set of resources. Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them. Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash. A service environment represents a scope of distribution for one or more services. Usually, a service environment is owned by one organization or community and dedicated to one project. A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted. In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2. One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments. The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account. The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4. DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common grid computing environments. For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6]. For long-term services this is even harder, and it is likely that the resource demand frequently changes. This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env. Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem. In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially. But migration is costly, since the whole state of a service possibly including program code has to be transfered. If the service is not replicated it will be unavailable during migration. Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration. As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge. The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level. At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads. The entity of monitoring is a service or a service component in case of a decentralized adaptive service. Every service has so called local limits that restrict the resource usage in context of the current node. If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible. Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment. In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service. Of course there could be more than one service of the same service environment at a node. Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services. Furthermore each node has node limits that restrict the overall usage of certain resources. A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users. The sum of all local limits at a node must never exceed the node limit of a resource. Therefore observing and controlling the local limits will keep the node limits and preventing overload. NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits. These limits determine the maximum resource usage of a project in scope of a home environment. The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit. GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow. Then we propose an approach for a more efficient solution and discuss its problems. If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service. This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph. These resources then can be assigned to the service environment of the new project which further on can start services on these nodes. Of course a home environment supports usually numerous projects. Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused. As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand. What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node. If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment. When all resources of the node are assigned to other service environments there are two possibilities. All resources are used by services, so we have to migrate a service, or the resources are assigned but not used. In the later case we shall rededicate resources and assign them to the demanding service environment. Finally the service environment might have reached its global limit. In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service. In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately. Thus it is not an option to use broadcast searches for rededication. Instead a more efficient approach with a bounded complexity is necessary. The same applies for detecting if a global limit is reached by a service environment. Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing. Thereby all nodes of a system are partitioned in groups that overlap partially. The union of all groups achieves a full coverage. Group members frequently exchange load information and balance the load by migration. In our case we aim not at balancing the load but the amount of available free resources of a service environment. Each node that supports a certain service environment is at least connected to another node that supports the same project. This way it always should be known if a service environment has still enough resources and therefore if a service can grow. There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations. In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration. In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments. If we remove the mapping between free resources and real resources of a node we can evade these situations. However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem. Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes. However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered. A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins. In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements. The number of bins is bounded as we have a finite number of nodes in our grid. An algorithm for this problem has recently been proposed by Epstein and van Stee in [7]. On the downside this algorithm needs to know all nodes and their actual usage. As the placement of a service is not a time critical problem again a flooding based approach might offer a solution. To reduce the number of answers only nodes that provide sufficient resources need to reply. It has also to be considered to transform the algorithm to a distributed one. Another problem might be that the algorithm optimizes the occupancy too strong. Therefore demand changes of service can lead to overloaded nodes and causing migration. We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5. DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository. Such a service is represented by a fragmented object. This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons. Usually every part of the object is mobile and can be migrated if necessary. Each service has at least two interfaces: one for management tasks and another service specific for the end user. The management interface offers methods to start, stop, and configure service instances. As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8]. The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA. This service then can be started and executed on the grid as a common servant. Additionally it should be possible to migrate the service. This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms. As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service. This is achieved by generating special client-side stubs that communicate with one of the replicas. To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete. The replicas are synchronized via a group communication framework. The IDL extension consists of additional modifiers that affect code generation for client and server side. These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests. Furthermore one can mark methods as local which indicates that they can be locally processed. In this case the IDLcompiler creates placeholder for local execution. Apart form methods that are usual static this is useful to implement client-side contribution and interaction. For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file. Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object. This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed. Finally we provide another modifier to mark administrative operations. If a method is marked with admin an authentication is necessary. The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme. This modifier facilitates the creation of service management methods. Article 5 6. RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks. Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all. But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks. JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing. Actively replicated objects are provided by Jgroup [14] based on RMI. On top of this basic middleware a replication management layer has been implemented called ARM [15]. JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does. ARM can be compared to EDAS but supports no resource aware distribution. Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach. Globe considers replication and caching. Both systems lack support for resource aware distribution. 7. CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed. As described the resource management can be decomposed in two main problems that have to be solved. Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services. For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility. In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture. As described we have already an early implementation of the framework for the decentralized adaptive services. This framework has to be extended to smoothly interact with the resource management and the EDAS architecture. In a final step we need to implement some services that verify the usability of the whole EDAS project. 8. REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III. A new major seti project based on project serendip data and 100,000 personal computers. In Proc. of the Fifth Intl. Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck. Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment. In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004. Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied. Integrating fragmented objects into a CORBA environment. In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli. Dynamic load balancing by diffusion in heterogeneous systems. J. Parallel Distrib. Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro. Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf. Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee. Optimal online bounded space multidimensional packing. In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004. Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck. IDLflex: a flexible and generic compiler for CORBA IDL. In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck. Platform-independent object migration in CORBA. In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck. Stable, time-bound references in context of dynamically changing environments. In MDC05: Proc. of the 25th IEEE Int. Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke. The anatomy of the Grid: Enabling scalable virtual organizations. Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu. Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing. In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002. ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal. Ibis: an efficient java-based grid programming environment. In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002. ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu. Middleware for dependable network services in partitionable distributed systems. SIGOPS Oper. Syst. Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik. Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro. Fragmented objects for distributed abstractions. In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge. An object model for flexible distributed systems. In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995. Article 5",
    "original_translation": "EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept. de la computadora. A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la computación en malla evoluciona y se aplica a un número creciente de aplicaciones. El entorno para servicios adaptativos descentralizados (EDAS) proporciona una infraestructura tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los recursos. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer. La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Las infraestructuras para la computación en malla tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande. La gestión de recursos es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red. Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también. Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros. El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo. En lugar de establecer una infraestructura para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros. Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un nodo más potente y menos cargado). La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido. Además, un servicio no replicado no es accesible durante la migración. Por lo tanto, la gestión de recursos debe evitar la migración si es posible. Además, se debe proporcionar un concepto de servicio que evite la sobrecarga en primer lugar y, en segundo lugar, evite la indisponibilidad del servicio si la migración no se puede evitar. EDAS [2] tiene como objetivo proporcionar una infraestructura tipo rejilla para servicios de largo plazo accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una infraestructura de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos. Los nodos pueden unirse y abandonar dinámicamente la infraestructura, y todas las tareas de gestión, especialmente la gestión de recursos, son descentralizadas. El entorno se construye sobre nuestra infraestructura middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS). La gestión de recursos se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo, potencialmente infinito. Estos servicios están organizados en proyectos. Cada proyecto tiene un alcance de ejecución distribuido llamado entorno de servicio. Un ambiente así posiblemente abarca múltiples instituciones. Cada institución representa un dominio administrativo que puede respaldar un proyecto con un conjunto fijo de recursos. Nuestro enfoque respalda la gestión adaptativa de recursos de todos los proyectos en el alcance de una institución basada en un algoritmo inspirado en los algoritmos difusivos para el equilibrio de carga descentralizado [4]. No se sabe cómo subdividir óptimamente estos recursos para los servicios, ya que la demanda de recursos de los servicios puede cambiar con el tiempo o incluso fluctuar con frecuencia. Para proporcionar recursos según sea necesario, nuestro enfoque redirige automáticamente de manera equitativa los recursos libres o no necesarios entre las instancias de servicio en todos los proyectos y nodos. El proceso completo del artículo 5 de rededicación es escalable ya que es descentralizado y respeta ciertos límites como los recursos físicamente disponibles de un nodo y la cantidad de recursos dedicados a un proyecto. En los casos en los que no sea posible la rededicación, se inicia la migración del servicio exigente. EDAS apoya además modelos de servicio flexibles, incluyendo una estructura cliente/servidor completamente centralizada, sistemas basados completamente en pares, y varias configuraciones intermedias que permiten un uso controlado de los recursos de los pares basado en el modelo de objetos fragmentados [5]. El objetivo general es proporcionar una arquitectura de servicio genérica que permita implementar la funcionalidad del servicio una vez, y luego, idealmente, ejecutar este servicio con diferentes modelos de servicio y adaptarlo en tiempo de ejecución, escalando así desde una instancia local de un solo usuario hasta un servicio escalable que abarque múltiples dominios. Para reducir el esfuerzo de implementación de dichos servicios, se ha desarrollado un marco que respalda la evolución en tiempo de ejecución desde un escenario tradicional de cliente/servidor a un servidor replicado activo con clientes interactuando en una arquitectura híbrida de pares a pares como la conocida en Napster. En una infraestructura de red de servicio a largo plazo, la replicación activa tiene varios beneficios: las réplicas pueden unirse y abandonar el grupo de objetos y, por lo tanto, las réplicas pueden ser migradas sin que el servicio esté no disponible. La carga de solicitudes no modificadoras se puede distribuir de manera uniforme entre las réplicas, lo que hace que las situaciones de sobrecarga sean menos probables. Finalmente se puede tolerar cierta cantidad de caídas de nodos. La siguiente sección describe las características utilizadas de AspectIX seguida de una breve descripción de los componentes principales y conceptos de EDAS. La sección 4 explica los conceptos de autoadministración y rededicación en la gestión de recursos adaptativos distribuidos. La sección 5 describe el marco para servicios adaptativos descentralizados. La sección 6 describe el trabajo relacionado y finalmente la Sección 7 concluye el artículo. MIDDLEWARE BÁSICO El entorno de EDAS se basa en el middleware AspectIX. En su núcleo, proporciona un ORB compatible con CORBA y, como tal, soporta sistemas distribuidos heterogéneos. Además, AspectIX soporta el modelo de objetos fragmentado [5] que se utiliza para implementar y proporcionar servicios adaptativos descentralizados. En el modelo de objeto fragmentado, la distinción entre los stubs del cliente y el objeto del servidor ya no está presente (Fig. 1). Desde un punto de vista abstracto, un objeto fragmentado es una unidad con identidad, interfaz, comportamiento y estado únicos, al igual que en el diseño orientado a objetos clásico. La implementación de estas propiedades, sin embargo, no está limitada a una ubicación específica, sino que puede distribuirse arbitrariamente en varios fragmentos. Cualquier cliente que desee acceder al objeto fragmentado necesita un fragmento local, que proporciona una interfaz idéntica a la de un stub tradicional. Sin embargo, la distribución interna y la interacción no solo son transparentes en la interfaz externa del objeto distribuido, sino que incluso pueden cambiar dinámicamente en tiempo de ejecución. Esto permite que el modelo de objeto fragmentado se adapte a las condiciones cambiantes del entorno o a los requisitos de calidad del servicio. Ofrece cambiar el modelo de servicio a pedido, desde el tradicional cliente-servidor a un enfoque basado en pares, y todo tipo de etapas intermedias mediante la migración e intercambio de fragmentos. Componentes principales de EDAS Figura 1: Objeto fragmentado en tres nodos EDAS tiene tres componentes principales: Cada nodo que apoya activamente los servicios adaptativos descentralizados proporciona un entorno local. El entorno del hogar básicamente gestiona los recursos de uno o más nodos pertenecientes al mismo dominio administrativo o institución. El entorno de servicio se extiende sobre un conjunto de dominios que respaldan un proyecto específico y depende de servicios básicos de los entornos domésticos correspondientes. El entorno de servicio apoya la ejecución de servicios pertenecientes al mismo proyecto. Finalmente, el servicio adaptativo descentralizado se distribuye dinámicamente dentro del alcance de un entorno de servicio asociado. El entorno del hogar tiene el papel de mediador entre los nodos de una institución y uno o más entornos de servicio, cada uno ejecutando un conjunto de servicios. La Fig. 2 muestra tres dominios, cada uno ejecutando un entorno doméstico que abarca todos los nodos de los respectivos dominios. Cada nodo proporciona un conjunto de recursos. Cada dominio tiene un administrador que puede utilizar ese entorno doméstico para asignar recursos a los entornos de servicio y revocarlos. Además de proporcionar la carga del sistema y todo tipo de información sobre el uso de recursos al entorno de servicio, el entorno doméstico también notifica sobre todos los eventos importantes del sistema, como un apagado o fallo de un nodo. Un entorno de servicio representa un alcance de distribución para uno o más servicios. Por lo general, un entorno de servicio es propiedad de una organización o comunidad y está dedicado a un proyecto. Un gerente de servicios puede iniciar, detener y configurar servicios a través de la interfaz del entorno de servicios y decide qué recursos proporcionados por los entornos domésticos son aceptados. En la mayoría de los casos, un entorno de servicio se extiende sobre más de un dominio administrativo, como se muestra en la Figura 2. Una de las principales tareas del entorno de servicio es apoyar la migración de servicios o componentes de servicio, especialmente entre diferentes entornos de origen. El entorno de servicio toma en cuenta los recursos disponibles, los requisitos de los servicios y las políticas proporcionadas por el gerente de servicio. La migración de componentes de servicio puede ser necesaria por diversas razones, como el apagado de nodos, limitaciones de recursos y el crecimiento o reducción del entorno de servicio. 4. La gestión de recursos descentralizada. La gestión de recursos para servicios a largo plazo tiene otros requisitos que la gestión de recursos en entornos comunes de computación en red. Por ejemplo, incluso en el contexto de los sistemas de red tradicionales, es muy difícil determinar o siquiera estimar los requisitos de recursos de una tarea [6]. Para servicios a largo plazo esto es aún más difícil, y es probable que la demanda de recursos cambie con frecuencia. Esto convierte el Artículo 5 Anfitrión F Anfitrión D Anfitrión E Anfitrión A Anfitrión C Servicio Entorno Servicio B Servicio A Entorno Hogar. Entorno del hogar Límite del objeto fragmentado Gerente de servicio Gerente de dominio Gerente de dominio Figura 2: Escenario de EDAS la distribución óptima de servicios sobre un conjunto de nodos en un problema difícil. En general, la migración de servicios es un requisito previo de EDAS, ya que ofrece una solución si la decisión de distribución inicial fue incorrecta (por ejemplo, inicio inicial de un servicio previamente desconocido) o si la demanda de servicios ha cambiado sustancialmente. Pero la migración es costosa, ya que se debe transferir todo el estado de un servicio, posiblemente incluyendo el código del programa. Si el servicio no se replica, estará no disponible durante la migración. Teniendo esto en cuenta, un sistema de gestión de recursos debería ubicar servicios y redistribuir recursos de manera adaptativa entre servicios y nodos según sea necesario para evitar migraciones. Dado que EDAS tiene como objetivo proporcionar una infraestructura tipo rejilla para un gran conjunto de nodos que pueden unirse y abandonar el sistema, todas las tareas de gestión de recursos deben descentralizarse para ser escalables y no deben requerir conocimiento global. La gestión de recursos se puede estructurar en las siguientes tareas diferentes: • Agregar y cambiar los recursos asignados de un entorno de servicio • Colocación automática de servicios al inicio y durante la migración debido a sobrecarga • Mantener todo tipo de límites de recursos, especialmente los límites de entornos de servicio • Compensar la salida y los nodos que se han bloqueado En las siguientes secciones describiremos qué tipo de límites de recursos existen y cómo gestionar los recursos basándonos en estas condiciones básicas. 4.1 Límites de Recursos Nuestro enfoque gestiona los recursos en dos etapas, a nivel de nodo y a nivel de entorno de servicio. A nivel de nodo monitoreamos el uso de todo tipo de recursos físicos como espacio en disco, memoria, CPU y ancho de banda de red, pero también recursos lógicos como archivos abiertos, sockets y hilos. La entidad de monitoreo es un servicio o un componente de servicio en caso de un servicio adaptativo descentralizado. Cada servicio tiene límites locales llamados así que restringen el uso de recursos en el contexto del nodo actual. Si un servicio corre el riesgo de exceder dicho límite local, el entorno doméstico intenta ampliar los límites o notifica al entorno de servicio responsable si la reasignación no es posible. Alcanzar un límite local puede ser causado por dos razones: un nodo sobrecargado o un entorno de servicio sobrecargado. En el primer caso, la migración del servicio podría ser útil, en el segundo caso, la migración a otro dominio administrativo podría ser una opción, o simplemente reducir la demanda de recursos deteniendo el servicio. Por supuesto, podría haber más de un servicio del mismo entorno de servicio en un nodo. Por lo tanto, los recursos asignados de un entorno de servicio en un nodo pueden ser fácilmente calculados sumando todos los límites locales de sus servicios. Además, cada nodo tiene límites que restringen el uso general de ciertos recursos. Un límite de nodo nunca debe exceder los recursos físicos (por ejemplo, espacio en disco) de un nodo y podría ser mucho más pequeño, por ejemplo, para soportar usuarios locales. La suma de todos los límites locales en un nodo nunca debe exceder el límite del nodo de un recurso. Por lo tanto, observar y controlar los límites locales mantendrá los límites del nodo y evitará la sobrecarga. En el nivel institucional, el uso de recursos de un entorno de servicio y sus servicios asociados también está restringido por los llamados límites globales. Estos límites determinan el uso máximo de recursos de un proyecto en el ámbito de un entorno doméstico. La suma de todos los límites locales en todos los nodos de la institución para un proyecto determinado nunca excede su límite global. GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Reasignación de Recursos Adaptativa Comenzamos con una implementación directa para describir el flujo de trabajo principal. Luego proponemos un enfoque para una solución más eficiente y discutimos sus problemas. Si un nuevo proyecto debe ser respaldado por un entorno doméstico, primero es necesario identificar los nodos que ofrecen recursos suficientes no asignados para iniciar un servicio. Esto se puede lograr en una implementación ingenua utilizando un enfoque de inundación como se hace en el protocolo Gnutella, asumiendo que los nodos están conectados en un grafo aleatorio. Estos recursos pueden ser asignados al entorno de servicio del nuevo proyecto, el cual posteriormente puede comenzar a ofrecer servicios en estos nodos. Por supuesto, un entorno hogareño suele apoyar numerosos proyectos. Cada uno de estos proyectos tiene asignaciones de recursos en varios nodos, algunos de ellos ocupados por servicios, otros libres y sin usar. A medida que la demanda de recursos de un servicio cambia, podría ser posible que un servicio alcance su límite local si está bajo una alta demanda. Lo que sucede a continuación depende del uso general de recursos del entorno de servicio y del consumo de recursos en el nodo local. Si el entorno de servicio no ha alcanzado su límite global y el nodo no está sobrecargado, el límite local dependiente del servicio debería extenderse simplemente reduciendo un límite local en otro nodo del mismo entorno de servicio. Cuando todos los recursos del nodo se asignan a otros entornos de servicio, existen dos posibilidades. Todos los recursos son utilizados por los servicios, por lo que debemos migrar un servicio, o los recursos están asignados pero no utilizados. En el último caso reasignaremos recursos y los destinaremos al exigente entorno de servicio. Finalmente, es posible que el entorno de servicio haya alcanzado su límite global. En este caso, el consumo de recursos debe reducirse ya sea migrando el servicio a otro dominio y su entorno de origen dependiente o simplemente limitando el uso de recursos y, si esto no es posible, deteniendo el servicio. A diferencia de la configuración de un nuevo entorno de servicio que no es crítico en cuanto al tiempo y es una tarea menos frecuente, la adaptación de los límites locales ocurre con frecuencia y debe realizarse en el Artículo 5 casi de inmediato. Por lo tanto, no es una opción utilizar búsquedas de difusión para la reafirmación. En cambio, se necesita un enfoque más eficiente con una complejidad limitada. Lo mismo se aplica para detectar si se alcanza un límite global en un entorno de servicio. Actualmente investigamos si esto se puede lograr utilizando un algoritmo difusivo[4] como se utiliza para el equilibrio de carga descentralizado. De esta manera, todos los nodos de un sistema se dividen en grupos que se superponen parcialmente. La unión de todos los grupos logra una cobertura completa. Los miembros del grupo intercambian frecuentemente información de carga y equilibran la carga mediante migración. En nuestro caso, nuestro objetivo no es equilibrar la carga, sino la cantidad de recursos libres disponibles en un entorno de servicio. Cada nodo que respalda un determinado entorno de servicio está conectado al menos a otro nodo que respalda el mismo proyecto. De esta manera siempre se debería saber si un entorno de servicio todavía tiene suficientes recursos y, por lo tanto, si un servicio puede crecer. Todavía quedan cuestiones abiertas, como si los recursos libres equilibrados difusivamente deben estar estrechamente conectados a los recursos reales, comparables a las reservas. En este caso podría haber problemas si un nodo admite varios entornos de servicio que tienen servicios en ejecución en el nodo y se excede un límite de nodo que requeriría la migración del servicio. De hecho, puede ser innecesario ya que los servicios podrían no utilizar todos los recursos asignados, pero el algoritmo difusivo causó la sobrecarga del límite al equilibrar de manera equitativa los recursos libres de todos los entornos de servicio admitidos. Si eliminamos el mapeo entre los recursos gratuitos y los recursos reales de un nodo, podemos evitar estas situaciones. Sin embargo, se vuelve más complicado determinar los recursos libres y no asignados de un entorno doméstico. 4.3 Colocación de Servicios Independientemente del mapeo de recursos libres, la colocación de un servicio es, como ya se ha mencionado, un problema difícil. Distribuir los servicios de manera equitativa en todos los nodos seguramente evitaría la migración en el caso promedio incluso si la demanda de recursos de los servicios cambia. Sin embargo, si la demanda de recursos de los servicios varía considerablemente y la red está congestionada por muchos proyectos, podría suceder que un servicio no pueda ser ubicado porque los recursos disponibles están muy dispersos. Un enfoque diferente sería considerarlo como una variante del problema de empaquetamiento de contenedores que tiene como objetivo empacar elementos en contenedores optimizando el número de contenedores utilizados. En nuestro caso, necesitamos un enfoque en línea ya que los elementos no son conocidos de antemano y tenemos un problema multidimensional debido a que un servicio tiene varios requisitos de recursos. El número de contenedores está limitado ya que tenemos un número finito de nodos en nuestra cuadrícula. Un algoritmo para este problema ha sido propuesto recientemente por Epstein y van Stee en [7]. En el lado negativo, este algoritmo necesita conocer todos los nodos y su uso actual. Dado que la ubicación de un servicio no es un problema crítico en términos de tiempo, nuevamente un enfoque basado en inundaciones podría ofrecer una solución. Para reducir el número de respuestas, solo los nodos que proporcionen recursos suficientes deben responder. También se debe considerar transformar el algoritmo en uno distribuido. Otro problema podría ser que el algoritmo optimiza la ocupación de manera demasiado intensa. Por lo tanto, los cambios en la demanda de servicio pueden provocar nodos sobrecargados y causar migraciones. Creemos que esto se puede prevenir no solo considerando el consumo real de recursos para determinar la demanda de recursos de un servicio, sino teniendo en cuenta la demanda previa. 5. En EDAS, un modelo de servicio descentralizado y adaptable normalmente se corresponde con un servicio tradicional al que acceden los usuarios, como un servidor web, un servidor de mensajería instantánea o un repositorio de código fuente. Un servicio así está representado por un objeto fragmentado. Este objeto se expande o contrae en el alcance abarcado por el entorno de servicio asociado dependiendo de las demandas del servicio y por razones de tolerancia a fallos. Por lo general, cada parte del objeto es móvil y puede ser trasladada si es necesario. Cada servicio tiene al menos dos interfaces: una para tareas de gestión y otro servicio específico para el usuario final. La interfaz de gestión ofrece métodos para iniciar, detener y configurar instancias de servicio. Dado que este conjunto de características requiere un enorme esfuerzo de implementación para hacerlo de nuevo para cada implementación de servicio que apoyamos, respaldamos el desarrollo de servicios adaptativos descentralizados a través de un marco y una versión extendida de IDL en combinación con un compilador especial de IDL [8]. La idea principal es desarrollar un servicio de la manera tradicional cliente/servidor, tal como se hace en CORBA básico. Este servicio puede ser iniciado y ejecutado en la red como un servidor común. Además, debería ser posible migrar el servicio. Esto se puede lograr utilizando un enfoque basado en tipos de valor para describir el estado del servicio como se hace en [9] o utilizando los mecanismos de serialización suministrados por el lenguaje. Como nos gustaría tolerar fallos de nodos y el servicio debería estar disponible durante la migración, apoyamos la replicación activa del servicio. Esto se logra generando stubs especiales del lado del cliente que se comunican con una de las réplicas. Para mantener la conexión entre los clientes y el objeto replicado, utilizamos referencias limitadas en el tiempo [10] que restringen la migración pero hacen que el uso de servicios de ubicación (para hacer frente a referencias obsoletas) sea innecesario. Las réplicas están sincronizadas a través de un marco de comunicación de grupo. La extensión IDL consiste en modificadores adicionales que afectan la generación de código para el lado del cliente y del servidor. Estos se retienen para marcar operaciones no modificativas que permiten respuestas más rápidas y equilibrio de carga de esas solicitudes. Además, se puede marcar los métodos como locales, lo que indica que pueden ser procesados localmente. En este caso, el compilador IDL crea un marcador de posición para la ejecución local. Además de los métodos habituales estáticos, es útil implementar la contribución e interacción del lado del cliente. Por ejemplo, si un cliente falso ofrece un método que resulta en una transferencia de archivos, es posible integrar un protocolo personalizado que reenvíe una solicitud modificada al objeto replicado, el cual no devuelve el archivo como en el caso común, sino URLs que apuntan a clientes que solicitaron previamente el archivo. Ahora el cliente ficticio obtiene los datos de la ubicación ofrecida y responde como si hubieran sido suministrados por el objeto del servidor. Este comportamiento basado en pares, como se conoce en Napster, es transparente para el cliente y puede activarse y desactivarse según las condiciones del entorno, como la carga y la comunidad, según sea necesario. Finalmente proporcionamos otro modificador para marcar operaciones administrativas. Si un método está marcado como administrador, se requiere autenticación. El método de autenticación es adaptable y puede ser mediante una frase de paso, una dirección de internet o cualquier otro esquema de autenticación. Este modificador facilita la creación de métodos de gestión de servicios. Artículo 5 6. Las infraestructuras de cuadrícula como el Globus-Toolkit [11] proporcionan servicios y mecanismos para entornos heterogéneos distribuidos que combinan recursos bajo demanda para resolver tareas que consumen recursos y computacionalmente intensivas. Debido a esta orientación, se centran en diferentes modelos de servicio, no proporcionan soporte para la movilidad de objetos, ni siquiera si apoyan un enfoque de objetos distribuidos en absoluto. Pero lo más importante es que siguen un enfoque diferente de gestión de recursos, ya que se centran en la ejecución paralela de una gran cantidad de tareas cortas y a medio plazo. JavaSymphony [12] y Ibis [13] proporcionan movilidad de objetos pero están limitados al lenguaje de programación Java y se centran en la computación de alto rendimiento orientada a objetos. Los objetos replicados activamente son proporcionados por Jgroup [14] basados en RMI. Encima de este middleware básico se ha implementado una capa de gestión de replicación llamada ARM [15]. JGroup se enfoca en la replicación activa de objetos pero carece de soporte para servicios más flexibles como lo hace EDAS. ARM se puede comparar con EDAS pero no admite la distribución consciente de recursos. Fog [16] y Globe [17] son entornos middleware básicos que admiten el enfoque de objetos fragmentados. Globe considera la replicación y el almacenamiento en caché. Ambos sistemas carecen de soporte para la distribución consciente de los recursos. 7. CONCLUSIÓN Y TRABAJO EN CURSO Basándose en el modelo de objeto fragmentado y la arquitectura del entorno de EDAS, los servicios adaptativos descentralizados pueden ser fácilmente diseñados, implementados y ejecutados. Como se describe, la gestión de recursos se puede descomponer en dos problemas principales que deben resolverse. Controlar y gestionar los límites de recursos, incluido garantizar que los recursos asignados estén disponibles (incluso en el contexto de fallas de nodos) y la colocación autónoma de servicios. Para ambos problemas ofrecemos una solución, un entorno de simulación actualmente implementado verificará su viabilidad. En un próximo paso, la gestión de recursos se integrará en un prototipo de la arquitectura EDAS que ya ha sido implementado. Como se describe, ya tenemos una implementación inicial del marco de trabajo para los servicios adaptativos descentralizados. Este marco debe ser ampliado para interactuar de manera fluida con la gestión de recursos y la arquitectura de EDAS. En un paso final, necesitamos implementar algunos servicios que verifiquen la usabilidad de todo el proyecto EDAS. 8. REFERENCIAS [1] D. Werthimer, S. Bowyer, J. Cobb, D. Gedye, D. Anderson, W. T. Sullivan, III. Un nuevo proyecto SETI importante basado en los datos del proyecto Serendip y 100,000 computadoras personales. En Actas del Quinto Congreso Internacional. Conferencia sobre Bioastronomía, 1997. [2] Hans Reiser, Rüdiger Kapitza, Franz J. Hauck. Servicios Descentralizados y Adaptativos: El Enfoque AspectIX para un Entorno de Red Flexible y Seguro. En Grid Services Engineering and Management (GSEM 2004), Erfurt, Alemania, 2004. Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, y Andreas I. Schmied. Integrando objetos fragmentados en un entorno CORBA. En Proc. de los Net.ObjectDays, 2003. [4] Tiberiu Rotaru y Hans-Heinrich N¨ageli. Equilibrado dinámico de carga mediante difusión en sistemas heterogéneos. I'm sorry, but the sentence \"J.\" does not provide enough context for an accurate translation. Could you please provide more information or a complete sentence for me to translate? Distribución Paralela. Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, y M. Shapiro. Objetos fragmentados para abstracciones distribuidas. [6] Jennifer M. Schopf. Diez acciones cuando se programa en una cuadrícula: el usuario como programador de cuadrícula. páginas 15-23, 2004. [7] Leah Epstein y Rob van Stee. Empaquetado multidimensional en línea óptimo con espacio limitado. En SODA 04: Actas del decimoquinto simposio anual de algoritmos discretos de ACM-SIAM, páginas 214-223, Filadelfia, PA, EE. UU., 2004. Sociedad de Matemáticas Industriales y Aplicadas. [8] Hans P. Reiser, Martin Steckermeier y Franz J. Hauck. IDLflex: un compilador flexible y genérico para IDL de CORBA. En Proc. de los Net.ObjectDays (Erfurt, Alemania, 10-13 de septiembre de 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt y Franz J. Hauck. Migración de objetos independiente de la plataforma en CORBA. En Actas de las Conferencias OTM05 (DOA, Agia Napa, Chipre, 31 de octubre - 04 de noviembre de 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser y Franz J. Hauck. Referencias estables y limitadas en el tiempo en el contexto de entornos que cambian dinámicamente. En MDC05: Actas de la 25ª Conferencia Internacional de IEEE. Conferencia sobre Sistemas de Computación Distribuida - Talleres (Talleres ICDCS 2005), 2005. [11] Ian Foster, Carl Kesselman y Steven Tuecke. La anatomía de la red: Permitiendo organizaciones virtuales escalables. Notas de conferencia en Ciencias de la Computación, 2150, 2001. [12] Thomas Fahringer y Alexandru Jugravu. Javasymphony: nuevas directivas para controlar y sincronizar la localidad, el paralelismo y el equilibrio de carga para la computación en clúster y en grid. En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 8-17, Nueva York, NY, EE. UU., 2002. ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann y Henri E. Bal. Ibis: un entorno de programación en malla eficiente basado en Java. En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 18-27, Nueva York, NY, EE. UU., 2002. ACM Press. [14] Alberto Montresor, Renzo Davoli y Ozalp Babaoglu. Middleware para servicios de red confiables en sistemas distribuidos particionables. SIGOPS Oper. would be translated to \"Operaciones de SIGOPS\" in Spanish. This is not a complete sentence. Please provide more context or the full sentence you would like me to translate. Rev., 35(1):73-96, 2001. [15] H. Meling y B. Helvik. Arm: Gestión autónoma de replicación en jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul y Marc Shapiro. Objetos fragmentados para abstracciones distribuidas. En Lecturas en Sistemas de Computación Distribuida. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum y Wiebren de Jonge. Un modelo de objetos para sistemas distribuidos flexibles. En Actas de la 1ra Conferencia Anual de ASCI, páginas 69-78, 1995. Artículo 5",
    "original_sentences": [
        "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
        "of Comp.",
        "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
        "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
        "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
        "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
        "Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity.",
        "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
        "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
        "Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
        "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
        "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
        "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
        "Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.",
        "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
        "Migration however is expensive as the whole state of a service has to be transfered.",
        "Additionally a non-replicated service is not accessible during migration.",
        "Therefore the resource management has to avoid migration if possible.",
        "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
        "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
        "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the resource management, are decentralized.",
        "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
        "The resource management focuses on the execution of services that have a long, potentially infinite, operating time.",
        "Theses services are organized in projects.",
        "Each project has a distributed execution scope called a service environment.",
        "Such an environment possibly spans multiple institutions.",
        "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
        "Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
        "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
        "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
        "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
        "In cases where rededication is not possible, the migration of the demanding service is initiated.",
        "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
        "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
        "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
        "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
        "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
        "Finally a certain amount of node crashes can be tolerated.",
        "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
        "Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.",
        "Section 5 describes the framework for decentralized adaptive services.",
        "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
        "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
        "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
        "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
        "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
        "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
        "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
        "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
        "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
        "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
        "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
        "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment.",
        "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
        "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
        "The service environment supports the execution of services belonging to the same project.",
        "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
        "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
        "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
        "Every node provides a set of resources.",
        "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
        "Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash.",
        "A service environment represents a scope of distribution for one or more services.",
        "Usually, a service environment is owned by one organization or community and dedicated to one project.",
        "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
        "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
        "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
        "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
        "The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
        "DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common grid computing environments.",
        "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
        "For long-term services this is even harder, and it is likely that the resource demand frequently changes.",
        "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
        "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
        "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
        "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
        "If the service is not replicated it will be unavailable during migration.",
        "Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
        "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge.",
        "The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
        "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
        "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
        "Every service has so called local limits that restrict the resource usage in context of the current node.",
        "If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
        "Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment.",
        "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
        "Of course there could be more than one service of the same service environment at a node.",
        "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
        "Furthermore each node has node limits that restrict the overall usage of certain resources.",
        "A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
        "The sum of all local limits at a node must never exceed the node limit of a resource.",
        "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
        "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
        "These limits determine the maximum resource usage of a project in scope of a home environment.",
        "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
        "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
        "Then we propose an approach for a more efficient solution and discuss its problems.",
        "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
        "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
        "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
        "Of course a home environment supports usually numerous projects.",
        "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
        "As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
        "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node.",
        "If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
        "When all resources of the node are assigned to other service environments there are two possibilities.",
        "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
        "In the later case we shall rededicate resources and assign them to the demanding service environment.",
        "Finally the service environment might have reached its global limit.",
        "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.",
        "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
        "Thus it is not an option to use broadcast searches for rededication.",
        "Instead a more efficient approach with a bounded complexity is necessary.",
        "The same applies for detecting if a global limit is reached by a service environment.",
        "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
        "Thereby all nodes of a system are partitioned in groups that overlap partially.",
        "The union of all groups achieves a full coverage.",
        "Group members frequently exchange load information and balance the load by migration.",
        "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
        "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
        "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
        "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
        "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
        "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
        "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
        "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
        "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
        "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
        "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
        "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
        "The number of bins is bounded as we have a finite number of nodes in our grid.",
        "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
        "On the downside this algorithm needs to know all nodes and their actual usage.",
        "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
        "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
        "It has also to be considered to transform the algorithm to a distributed one.",
        "Another problem might be that the algorithm optimizes the occupancy too strong.",
        "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
        "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
        "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
        "Such a service is represented by a fragmented object.",
        "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
        "Usually every part of the object is mobile and can be migrated if necessary.",
        "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
        "The management interface offers methods to start, stop, and configure service instances.",
        "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
        "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
        "This service then can be started and executed on the grid as a common servant.",
        "Additionally it should be possible to migrate the service.",
        "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
        "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
        "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
        "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
        "The replicas are synchronized via a group communication framework.",
        "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
        "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
        "Furthermore one can mark methods as local which indicates that they can be locally processed.",
        "In this case the IDLcompiler creates placeholder for local execution.",
        "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
        "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
        "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
        "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
        "Finally we provide another modifier to mark administrative operations.",
        "If a method is marked with admin an authentication is necessary.",
        "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
        "This modifier facilitates the creation of service management methods.",
        "Article 5 6.",
        "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
        "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
        "But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks.",
        "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
        "Actively replicated objects are provided by Jgroup [14] based on RMI.",
        "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
        "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
        "ARM can be compared to EDAS but supports no resource aware distribution.",
        "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
        "Globe considers replication and caching.",
        "Both systems lack support for resource aware distribution. 7.",
        "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
        "As described the resource management can be decomposed in two main problems that have to be solved.",
        "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
        "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
        "In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture.",
        "As described we have already an early implementation of the framework for the decentralized adaptive services.",
        "This framework has to be extended to smoothly interact with the resource management and the EDAS architecture.",
        "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
        "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
        "A new major seti project based on project serendip data and 100,000 personal computers.",
        "In Proc. of the Fifth Intl.",
        "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
        "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
        "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
        "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
        "Integrating fragmented objects into a CORBA environment.",
        "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
        "Dynamic load balancing by diffusion in heterogeneous systems.",
        "J.",
        "Parallel Distrib.",
        "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
        "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
        "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
        "Optimal online bounded space multidimensional packing.",
        "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
        "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
        "IDLflex: a flexible and generic compiler for CORBA IDL.",
        "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
        "Platform-independent object migration in CORBA.",
        "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
        "Stable, time-bound references in context of dynamically changing environments.",
        "In MDC05: Proc. of the 25th IEEE Int.",
        "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
        "The anatomy of the Grid: Enabling scalable virtual organizations.",
        "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
        "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
        "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
        "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
        "Ibis: an efficient java-based grid programming environment.",
        "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
        "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
        "Middleware for dependable network services in partitionable distributed systems.",
        "SIGOPS Oper.",
        "Syst.",
        "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
        "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
        "Fragmented objects for distributed abstractions.",
        "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
        "An object model for flexible distributed systems.",
        "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
        "Article 5"
    ],
    "translated_text_sentences": [
        "EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept.",
        "de la computadora.",
        "A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la computación en malla evoluciona y se aplica a un número creciente de aplicaciones.",
        "El entorno para servicios adaptativos descentralizados (EDAS) proporciona una infraestructura tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.).",
        "Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los recursos.",
        "EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer.",
        "La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa.",
        "Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1.",
        "INTRODUCCIÓN Las infraestructuras para la computación en malla tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande.",
        "La gestión de recursos es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red.",
        "Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también.",
        "Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros.",
        "El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo.",
        "En lugar de establecer una infraestructura para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros.",
        "Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un nodo más potente y menos cargado).",
        "La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido.",
        "Además, un servicio no replicado no es accesible durante la migración.",
        "Por lo tanto, la gestión de recursos debe evitar la migración si es posible.",
        "Además, se debe proporcionar un concepto de servicio que evite la sobrecarga en primer lugar y, en segundo lugar, evite la indisponibilidad del servicio si la migración no se puede evitar.",
        "EDAS [2] tiene como objetivo proporcionar una infraestructura tipo rejilla para servicios de largo plazo accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una infraestructura de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos.",
        "Los nodos pueden unirse y abandonar dinámicamente la infraestructura, y todas las tareas de gestión, especialmente la gestión de recursos, son descentralizadas.",
        "El entorno se construye sobre nuestra infraestructura middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS).",
        "La gestión de recursos se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo, potencialmente infinito.",
        "Estos servicios están organizados en proyectos.",
        "Cada proyecto tiene un alcance de ejecución distribuido llamado entorno de servicio.",
        "Un ambiente así posiblemente abarca múltiples instituciones.",
        "Cada institución representa un dominio administrativo que puede respaldar un proyecto con un conjunto fijo de recursos.",
        "Nuestro enfoque respalda la gestión adaptativa de recursos de todos los proyectos en el alcance de una institución basada en un algoritmo inspirado en los algoritmos difusivos para el equilibrio de carga descentralizado [4].",
        "No se sabe cómo subdividir óptimamente estos recursos para los servicios, ya que la demanda de recursos de los servicios puede cambiar con el tiempo o incluso fluctuar con frecuencia.",
        "Para proporcionar recursos según sea necesario, nuestro enfoque redirige automáticamente de manera equitativa los recursos libres o no necesarios entre las instancias de servicio en todos los proyectos y nodos.",
        "El proceso completo del artículo 5 de rededicación es escalable ya que es descentralizado y respeta ciertos límites como los recursos físicamente disponibles de un nodo y la cantidad de recursos dedicados a un proyecto.",
        "En los casos en los que no sea posible la rededicación, se inicia la migración del servicio exigente.",
        "EDAS apoya además modelos de servicio flexibles, incluyendo una estructura cliente/servidor completamente centralizada, sistemas basados completamente en pares, y varias configuraciones intermedias que permiten un uso controlado de los recursos de los pares basado en el modelo de objetos fragmentados [5].",
        "El objetivo general es proporcionar una arquitectura de servicio genérica que permita implementar la funcionalidad del servicio una vez, y luego, idealmente, ejecutar este servicio con diferentes modelos de servicio y adaptarlo en tiempo de ejecución, escalando así desde una instancia local de un solo usuario hasta un servicio escalable que abarque múltiples dominios.",
        "Para reducir el esfuerzo de implementación de dichos servicios, se ha desarrollado un marco que respalda la evolución en tiempo de ejecución desde un escenario tradicional de cliente/servidor a un servidor replicado activo con clientes interactuando en una arquitectura híbrida de pares a pares como la conocida en Napster.",
        "En una infraestructura de red de servicio a largo plazo, la replicación activa tiene varios beneficios: las réplicas pueden unirse y abandonar el grupo de objetos y, por lo tanto, las réplicas pueden ser migradas sin que el servicio esté no disponible.",
        "La carga de solicitudes no modificadoras se puede distribuir de manera uniforme entre las réplicas, lo que hace que las situaciones de sobrecarga sean menos probables.",
        "Finalmente se puede tolerar cierta cantidad de caídas de nodos.",
        "La siguiente sección describe las características utilizadas de AspectIX seguida de una breve descripción de los componentes principales y conceptos de EDAS.",
        "La sección 4 explica los conceptos de autoadministración y rededicación en la gestión de recursos adaptativos distribuidos.",
        "La sección 5 describe el marco para servicios adaptativos descentralizados.",
        "La sección 6 describe el trabajo relacionado y finalmente la Sección 7 concluye el artículo.",
        "MIDDLEWARE BÁSICO El entorno de EDAS se basa en el middleware AspectIX.",
        "En su núcleo, proporciona un ORB compatible con CORBA y, como tal, soporta sistemas distribuidos heterogéneos.",
        "Además, AspectIX soporta el modelo de objetos fragmentado [5] que se utiliza para implementar y proporcionar servicios adaptativos descentralizados.",
        "En el modelo de objeto fragmentado, la distinción entre los stubs del cliente y el objeto del servidor ya no está presente (Fig. 1).",
        "Desde un punto de vista abstracto, un objeto fragmentado es una unidad con identidad, interfaz, comportamiento y estado únicos, al igual que en el diseño orientado a objetos clásico.",
        "La implementación de estas propiedades, sin embargo, no está limitada a una ubicación específica, sino que puede distribuirse arbitrariamente en varios fragmentos.",
        "Cualquier cliente que desee acceder al objeto fragmentado necesita un fragmento local, que proporciona una interfaz idéntica a la de un stub tradicional.",
        "Sin embargo, la distribución interna y la interacción no solo son transparentes en la interfaz externa del objeto distribuido, sino que incluso pueden cambiar dinámicamente en tiempo de ejecución.",
        "Esto permite que el modelo de objeto fragmentado se adapte a las condiciones cambiantes del entorno o a los requisitos de calidad del servicio.",
        "Ofrece cambiar el modelo de servicio a pedido, desde el tradicional cliente-servidor a un enfoque basado en pares, y todo tipo de etapas intermedias mediante la migración e intercambio de fragmentos.",
        "Componentes principales de EDAS Figura 1: Objeto fragmentado en tres nodos EDAS tiene tres componentes principales: Cada nodo que apoya activamente los servicios adaptativos descentralizados proporciona un entorno local.",
        "El entorno del hogar básicamente gestiona los recursos de uno o más nodos pertenecientes al mismo dominio administrativo o institución.",
        "El entorno de servicio se extiende sobre un conjunto de dominios que respaldan un proyecto específico y depende de servicios básicos de los entornos domésticos correspondientes.",
        "El entorno de servicio apoya la ejecución de servicios pertenecientes al mismo proyecto.",
        "Finalmente, el servicio adaptativo descentralizado se distribuye dinámicamente dentro del alcance de un entorno de servicio asociado.",
        "El entorno del hogar tiene el papel de mediador entre los nodos de una institución y uno o más entornos de servicio, cada uno ejecutando un conjunto de servicios.",
        "La Fig. 2 muestra tres dominios, cada uno ejecutando un entorno doméstico que abarca todos los nodos de los respectivos dominios.",
        "Cada nodo proporciona un conjunto de recursos.",
        "Cada dominio tiene un administrador que puede utilizar ese entorno doméstico para asignar recursos a los entornos de servicio y revocarlos.",
        "Además de proporcionar la carga del sistema y todo tipo de información sobre el uso de recursos al entorno de servicio, el entorno doméstico también notifica sobre todos los eventos importantes del sistema, como un apagado o fallo de un nodo.",
        "Un entorno de servicio representa un alcance de distribución para uno o más servicios.",
        "Por lo general, un entorno de servicio es propiedad de una organización o comunidad y está dedicado a un proyecto.",
        "Un gerente de servicios puede iniciar, detener y configurar servicios a través de la interfaz del entorno de servicios y decide qué recursos proporcionados por los entornos domésticos son aceptados.",
        "En la mayoría de los casos, un entorno de servicio se extiende sobre más de un dominio administrativo, como se muestra en la Figura 2.",
        "Una de las principales tareas del entorno de servicio es apoyar la migración de servicios o componentes de servicio, especialmente entre diferentes entornos de origen.",
        "El entorno de servicio toma en cuenta los recursos disponibles, los requisitos de los servicios y las políticas proporcionadas por el gerente de servicio.",
        "La migración de componentes de servicio puede ser necesaria por diversas razones, como el apagado de nodos, limitaciones de recursos y el crecimiento o reducción del entorno de servicio. 4.",
        "La gestión de recursos descentralizada. La gestión de recursos para servicios a largo plazo tiene otros requisitos que la gestión de recursos en entornos comunes de computación en red.",
        "Por ejemplo, incluso en el contexto de los sistemas de red tradicionales, es muy difícil determinar o siquiera estimar los requisitos de recursos de una tarea [6].",
        "Para servicios a largo plazo esto es aún más difícil, y es probable que la demanda de recursos cambie con frecuencia.",
        "Esto convierte el Artículo 5 Anfitrión F Anfitrión D Anfitrión E Anfitrión A Anfitrión C Servicio Entorno Servicio B Servicio A Entorno Hogar.",
        "Entorno del hogar Límite del objeto fragmentado Gerente de servicio Gerente de dominio Gerente de dominio Figura 2: Escenario de EDAS la distribución óptima de servicios sobre un conjunto de nodos en un problema difícil.",
        "En general, la migración de servicios es un requisito previo de EDAS, ya que ofrece una solución si la decisión de distribución inicial fue incorrecta (por ejemplo, inicio inicial de un servicio previamente desconocido) o si la demanda de servicios ha cambiado sustancialmente.",
        "Pero la migración es costosa, ya que se debe transferir todo el estado de un servicio, posiblemente incluyendo el código del programa.",
        "Si el servicio no se replica, estará no disponible durante la migración.",
        "Teniendo esto en cuenta, un sistema de gestión de recursos debería ubicar servicios y redistribuir recursos de manera adaptativa entre servicios y nodos según sea necesario para evitar migraciones.",
        "Dado que EDAS tiene como objetivo proporcionar una infraestructura tipo rejilla para un gran conjunto de nodos que pueden unirse y abandonar el sistema, todas las tareas de gestión de recursos deben descentralizarse para ser escalables y no deben requerir conocimiento global.",
        "La gestión de recursos se puede estructurar en las siguientes tareas diferentes: • Agregar y cambiar los recursos asignados de un entorno de servicio • Colocación automática de servicios al inicio y durante la migración debido a sobrecarga • Mantener todo tipo de límites de recursos, especialmente los límites de entornos de servicio • Compensar la salida y los nodos que se han bloqueado En las siguientes secciones describiremos qué tipo de límites de recursos existen y cómo gestionar los recursos basándonos en estas condiciones básicas. 4.1 Límites de Recursos Nuestro enfoque gestiona los recursos en dos etapas, a nivel de nodo y a nivel de entorno de servicio.",
        "A nivel de nodo monitoreamos el uso de todo tipo de recursos físicos como espacio en disco, memoria, CPU y ancho de banda de red, pero también recursos lógicos como archivos abiertos, sockets y hilos.",
        "La entidad de monitoreo es un servicio o un componente de servicio en caso de un servicio adaptativo descentralizado.",
        "Cada servicio tiene límites locales llamados así que restringen el uso de recursos en el contexto del nodo actual.",
        "Si un servicio corre el riesgo de exceder dicho límite local, el entorno doméstico intenta ampliar los límites o notifica al entorno de servicio responsable si la reasignación no es posible.",
        "Alcanzar un límite local puede ser causado por dos razones: un nodo sobrecargado o un entorno de servicio sobrecargado.",
        "En el primer caso, la migración del servicio podría ser útil, en el segundo caso, la migración a otro dominio administrativo podría ser una opción, o simplemente reducir la demanda de recursos deteniendo el servicio.",
        "Por supuesto, podría haber más de un servicio del mismo entorno de servicio en un nodo.",
        "Por lo tanto, los recursos asignados de un entorno de servicio en un nodo pueden ser fácilmente calculados sumando todos los límites locales de sus servicios.",
        "Además, cada nodo tiene límites que restringen el uso general de ciertos recursos.",
        "Un límite de nodo nunca debe exceder los recursos físicos (por ejemplo, espacio en disco) de un nodo y podría ser mucho más pequeño, por ejemplo, para soportar usuarios locales.",
        "La suma de todos los límites locales en un nodo nunca debe exceder el límite del nodo de un recurso.",
        "Por lo tanto, observar y controlar los límites locales mantendrá los límites del nodo y evitará la sobrecarga.",
        "En el nivel institucional, el uso de recursos de un entorno de servicio y sus servicios asociados también está restringido por los llamados límites globales.",
        "Estos límites determinan el uso máximo de recursos de un proyecto en el ámbito de un entorno doméstico.",
        "La suma de todos los límites locales en todos los nodos de la institución para un proyecto determinado nunca excede su límite global.",
        "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Reasignación de Recursos Adaptativa Comenzamos con una implementación directa para describir el flujo de trabajo principal.",
        "Luego proponemos un enfoque para una solución más eficiente y discutimos sus problemas.",
        "Si un nuevo proyecto debe ser respaldado por un entorno doméstico, primero es necesario identificar los nodos que ofrecen recursos suficientes no asignados para iniciar un servicio.",
        "Esto se puede lograr en una implementación ingenua utilizando un enfoque de inundación como se hace en el protocolo Gnutella, asumiendo que los nodos están conectados en un grafo aleatorio.",
        "Estos recursos pueden ser asignados al entorno de servicio del nuevo proyecto, el cual posteriormente puede comenzar a ofrecer servicios en estos nodos.",
        "Por supuesto, un entorno hogareño suele apoyar numerosos proyectos.",
        "Cada uno de estos proyectos tiene asignaciones de recursos en varios nodos, algunos de ellos ocupados por servicios, otros libres y sin usar.",
        "A medida que la demanda de recursos de un servicio cambia, podría ser posible que un servicio alcance su límite local si está bajo una alta demanda.",
        "Lo que sucede a continuación depende del uso general de recursos del entorno de servicio y del consumo de recursos en el nodo local.",
        "Si el entorno de servicio no ha alcanzado su límite global y el nodo no está sobrecargado, el límite local dependiente del servicio debería extenderse simplemente reduciendo un límite local en otro nodo del mismo entorno de servicio.",
        "Cuando todos los recursos del nodo se asignan a otros entornos de servicio, existen dos posibilidades.",
        "Todos los recursos son utilizados por los servicios, por lo que debemos migrar un servicio, o los recursos están asignados pero no utilizados.",
        "En el último caso reasignaremos recursos y los destinaremos al exigente entorno de servicio.",
        "Finalmente, es posible que el entorno de servicio haya alcanzado su límite global.",
        "En este caso, el consumo de recursos debe reducirse ya sea migrando el servicio a otro dominio y su entorno de origen dependiente o simplemente limitando el uso de recursos y, si esto no es posible, deteniendo el servicio.",
        "A diferencia de la configuración de un nuevo entorno de servicio que no es crítico en cuanto al tiempo y es una tarea menos frecuente, la adaptación de los límites locales ocurre con frecuencia y debe realizarse en el Artículo 5 casi de inmediato.",
        "Por lo tanto, no es una opción utilizar búsquedas de difusión para la reafirmación.",
        "En cambio, se necesita un enfoque más eficiente con una complejidad limitada.",
        "Lo mismo se aplica para detectar si se alcanza un límite global en un entorno de servicio.",
        "Actualmente investigamos si esto se puede lograr utilizando un algoritmo difusivo[4] como se utiliza para el equilibrio de carga descentralizado.",
        "De esta manera, todos los nodos de un sistema se dividen en grupos que se superponen parcialmente.",
        "La unión de todos los grupos logra una cobertura completa.",
        "Los miembros del grupo intercambian frecuentemente información de carga y equilibran la carga mediante migración.",
        "En nuestro caso, nuestro objetivo no es equilibrar la carga, sino la cantidad de recursos libres disponibles en un entorno de servicio.",
        "Cada nodo que respalda un determinado entorno de servicio está conectado al menos a otro nodo que respalda el mismo proyecto.",
        "De esta manera siempre se debería saber si un entorno de servicio todavía tiene suficientes recursos y, por lo tanto, si un servicio puede crecer.",
        "Todavía quedan cuestiones abiertas, como si los recursos libres equilibrados difusivamente deben estar estrechamente conectados a los recursos reales, comparables a las reservas.",
        "En este caso podría haber problemas si un nodo admite varios entornos de servicio que tienen servicios en ejecución en el nodo y se excede un límite de nodo que requeriría la migración del servicio.",
        "De hecho, puede ser innecesario ya que los servicios podrían no utilizar todos los recursos asignados, pero el algoritmo difusivo causó la sobrecarga del límite al equilibrar de manera equitativa los recursos libres de todos los entornos de servicio admitidos.",
        "Si eliminamos el mapeo entre los recursos gratuitos y los recursos reales de un nodo, podemos evitar estas situaciones.",
        "Sin embargo, se vuelve más complicado determinar los recursos libres y no asignados de un entorno doméstico. 4.3 Colocación de Servicios Independientemente del mapeo de recursos libres, la colocación de un servicio es, como ya se ha mencionado, un problema difícil.",
        "Distribuir los servicios de manera equitativa en todos los nodos seguramente evitaría la migración en el caso promedio incluso si la demanda de recursos de los servicios cambia.",
        "Sin embargo, si la demanda de recursos de los servicios varía considerablemente y la red está congestionada por muchos proyectos, podría suceder que un servicio no pueda ser ubicado porque los recursos disponibles están muy dispersos.",
        "Un enfoque diferente sería considerarlo como una variante del problema de empaquetamiento de contenedores que tiene como objetivo empacar elementos en contenedores optimizando el número de contenedores utilizados.",
        "En nuestro caso, necesitamos un enfoque en línea ya que los elementos no son conocidos de antemano y tenemos un problema multidimensional debido a que un servicio tiene varios requisitos de recursos.",
        "El número de contenedores está limitado ya que tenemos un número finito de nodos en nuestra cuadrícula.",
        "Un algoritmo para este problema ha sido propuesto recientemente por Epstein y van Stee en [7].",
        "En el lado negativo, este algoritmo necesita conocer todos los nodos y su uso actual.",
        "Dado que la ubicación de un servicio no es un problema crítico en términos de tiempo, nuevamente un enfoque basado en inundaciones podría ofrecer una solución.",
        "Para reducir el número de respuestas, solo los nodos que proporcionen recursos suficientes deben responder.",
        "También se debe considerar transformar el algoritmo en uno distribuido.",
        "Otro problema podría ser que el algoritmo optimiza la ocupación de manera demasiado intensa.",
        "Por lo tanto, los cambios en la demanda de servicio pueden provocar nodos sobrecargados y causar migraciones.",
        "Creemos que esto se puede prevenir no solo considerando el consumo real de recursos para determinar la demanda de recursos de un servicio, sino teniendo en cuenta la demanda previa. 5.",
        "En EDAS, un modelo de servicio descentralizado y adaptable normalmente se corresponde con un servicio tradicional al que acceden los usuarios, como un servidor web, un servidor de mensajería instantánea o un repositorio de código fuente.",
        "Un servicio así está representado por un objeto fragmentado.",
        "Este objeto se expande o contrae en el alcance abarcado por el entorno de servicio asociado dependiendo de las demandas del servicio y por razones de tolerancia a fallos.",
        "Por lo general, cada parte del objeto es móvil y puede ser trasladada si es necesario.",
        "Cada servicio tiene al menos dos interfaces: una para tareas de gestión y otro servicio específico para el usuario final.",
        "La interfaz de gestión ofrece métodos para iniciar, detener y configurar instancias de servicio.",
        "Dado que este conjunto de características requiere un enorme esfuerzo de implementación para hacerlo de nuevo para cada implementación de servicio que apoyamos, respaldamos el desarrollo de servicios adaptativos descentralizados a través de un marco y una versión extendida de IDL en combinación con un compilador especial de IDL [8].",
        "La idea principal es desarrollar un servicio de la manera tradicional cliente/servidor, tal como se hace en CORBA básico.",
        "Este servicio puede ser iniciado y ejecutado en la red como un servidor común.",
        "Además, debería ser posible migrar el servicio.",
        "Esto se puede lograr utilizando un enfoque basado en tipos de valor para describir el estado del servicio como se hace en [9] o utilizando los mecanismos de serialización suministrados por el lenguaje.",
        "Como nos gustaría tolerar fallos de nodos y el servicio debería estar disponible durante la migración, apoyamos la replicación activa del servicio.",
        "Esto se logra generando stubs especiales del lado del cliente que se comunican con una de las réplicas.",
        "Para mantener la conexión entre los clientes y el objeto replicado, utilizamos referencias limitadas en el tiempo [10] que restringen la migración pero hacen que el uso de servicios de ubicación (para hacer frente a referencias obsoletas) sea innecesario.",
        "Las réplicas están sincronizadas a través de un marco de comunicación de grupo.",
        "La extensión IDL consiste en modificadores adicionales que afectan la generación de código para el lado del cliente y del servidor.",
        "Estos se retienen para marcar operaciones no modificativas que permiten respuestas más rápidas y equilibrio de carga de esas solicitudes.",
        "Además, se puede marcar los métodos como locales, lo que indica que pueden ser procesados localmente.",
        "En este caso, el compilador IDL crea un marcador de posición para la ejecución local.",
        "Además de los métodos habituales estáticos, es útil implementar la contribución e interacción del lado del cliente.",
        "Por ejemplo, si un cliente falso ofrece un método que resulta en una transferencia de archivos, es posible integrar un protocolo personalizado que reenvíe una solicitud modificada al objeto replicado, el cual no devuelve el archivo como en el caso común, sino URLs que apuntan a clientes que solicitaron previamente el archivo.",
        "Ahora el cliente ficticio obtiene los datos de la ubicación ofrecida y responde como si hubieran sido suministrados por el objeto del servidor.",
        "Este comportamiento basado en pares, como se conoce en Napster, es transparente para el cliente y puede activarse y desactivarse según las condiciones del entorno, como la carga y la comunidad, según sea necesario.",
        "Finalmente proporcionamos otro modificador para marcar operaciones administrativas.",
        "Si un método está marcado como administrador, se requiere autenticación.",
        "El método de autenticación es adaptable y puede ser mediante una frase de paso, una dirección de internet o cualquier otro esquema de autenticación.",
        "Este modificador facilita la creación de métodos de gestión de servicios.",
        "Artículo 5 6.",
        "Las infraestructuras de cuadrícula como el Globus-Toolkit [11] proporcionan servicios y mecanismos para entornos heterogéneos distribuidos que combinan recursos bajo demanda para resolver tareas que consumen recursos y computacionalmente intensivas.",
        "Debido a esta orientación, se centran en diferentes modelos de servicio, no proporcionan soporte para la movilidad de objetos, ni siquiera si apoyan un enfoque de objetos distribuidos en absoluto.",
        "Pero lo más importante es que siguen un enfoque diferente de gestión de recursos, ya que se centran en la ejecución paralela de una gran cantidad de tareas cortas y a medio plazo.",
        "JavaSymphony [12] y Ibis [13] proporcionan movilidad de objetos pero están limitados al lenguaje de programación Java y se centran en la computación de alto rendimiento orientada a objetos.",
        "Los objetos replicados activamente son proporcionados por Jgroup [14] basados en RMI.",
        "Encima de este middleware básico se ha implementado una capa de gestión de replicación llamada ARM [15].",
        "JGroup se enfoca en la replicación activa de objetos pero carece de soporte para servicios más flexibles como lo hace EDAS.",
        "ARM se puede comparar con EDAS pero no admite la distribución consciente de recursos.",
        "Fog [16] y Globe [17] son entornos middleware básicos que admiten el enfoque de objetos fragmentados.",
        "Globe considera la replicación y el almacenamiento en caché.",
        "Ambos sistemas carecen de soporte para la distribución consciente de los recursos. 7.",
        "CONCLUSIÓN Y TRABAJO EN CURSO Basándose en el modelo de objeto fragmentado y la arquitectura del entorno de EDAS, los servicios adaptativos descentralizados pueden ser fácilmente diseñados, implementados y ejecutados.",
        "Como se describe, la gestión de recursos se puede descomponer en dos problemas principales que deben resolverse.",
        "Controlar y gestionar los límites de recursos, incluido garantizar que los recursos asignados estén disponibles (incluso en el contexto de fallas de nodos) y la colocación autónoma de servicios.",
        "Para ambos problemas ofrecemos una solución, un entorno de simulación actualmente implementado verificará su viabilidad.",
        "En un próximo paso, la gestión de recursos se integrará en un prototipo de la arquitectura EDAS que ya ha sido implementado.",
        "Como se describe, ya tenemos una implementación inicial del marco de trabajo para los servicios adaptativos descentralizados.",
        "Este marco debe ser ampliado para interactuar de manera fluida con la gestión de recursos y la arquitectura de EDAS.",
        "En un paso final, necesitamos implementar algunos servicios que verifiquen la usabilidad de todo el proyecto EDAS. 8.",
        "REFERENCIAS [1] D. Werthimer, S. Bowyer, J. Cobb, D. Gedye, D. Anderson, W. T. Sullivan, III.",
        "Un nuevo proyecto SETI importante basado en los datos del proyecto Serendip y 100,000 computadoras personales.",
        "En Actas del Quinto Congreso Internacional.",
        "Conferencia sobre Bioastronomía, 1997. [2] Hans Reiser, Rüdiger Kapitza, Franz J. Hauck.",
        "Servicios Descentralizados y Adaptativos: El Enfoque AspectIX para un Entorno de Red Flexible y Seguro.",
        "En Grid Services Engineering and Management (GSEM 2004), Erfurt, Alemania, 2004.",
        "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, y Andreas I. Schmied.",
        "Integrando objetos fragmentados en un entorno CORBA.",
        "En Proc. de los Net.ObjectDays, 2003. [4] Tiberiu Rotaru y Hans-Heinrich N¨ageli.",
        "Equilibrado dinámico de carga mediante difusión en sistemas heterogéneos.",
        "I'm sorry, but the sentence \"J.\" does not provide enough context for an accurate translation. Could you please provide more information or a complete sentence for me to translate?",
        "Distribución Paralela.",
        "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, y M. Shapiro.",
        "Objetos fragmentados para abstracciones distribuidas. [6] Jennifer M. Schopf.",
        "Diez acciones cuando se programa en una cuadrícula: el usuario como programador de cuadrícula. páginas 15-23, 2004. [7] Leah Epstein y Rob van Stee.",
        "Empaquetado multidimensional en línea óptimo con espacio limitado.",
        "En SODA 04: Actas del decimoquinto simposio anual de algoritmos discretos de ACM-SIAM, páginas 214-223, Filadelfia, PA, EE. UU., 2004.",
        "Sociedad de Matemáticas Industriales y Aplicadas. [8] Hans P. Reiser, Martin Steckermeier y Franz J. Hauck.",
        "IDLflex: un compilador flexible y genérico para IDL de CORBA.",
        "En Proc. de los Net.ObjectDays (Erfurt, Alemania, 10-13 de septiembre de 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt y Franz J. Hauck.",
        "Migración de objetos independiente de la plataforma en CORBA.",
        "En Actas de las Conferencias OTM05 (DOA, Agia Napa, Chipre, 31 de octubre - 04 de noviembre de 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser y Franz J. Hauck.",
        "Referencias estables y limitadas en el tiempo en el contexto de entornos que cambian dinámicamente.",
        "En MDC05: Actas de la 25ª Conferencia Internacional de IEEE.",
        "Conferencia sobre Sistemas de Computación Distribuida - Talleres (Talleres ICDCS 2005), 2005. [11] Ian Foster, Carl Kesselman y Steven Tuecke.",
        "La anatomía de la red: Permitiendo organizaciones virtuales escalables.",
        "Notas de conferencia en Ciencias de la Computación, 2150, 2001. [12] Thomas Fahringer y Alexandru Jugravu.",
        "Javasymphony: nuevas directivas para controlar y sincronizar la localidad, el paralelismo y el equilibrio de carga para la computación en clúster y en grid.",
        "En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 8-17, Nueva York, NY, EE. UU., 2002.",
        "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann y Henri E. Bal.",
        "Ibis: un entorno de programación en malla eficiente basado en Java.",
        "En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 18-27, Nueva York, NY, EE. UU., 2002.",
        "ACM Press. [14] Alberto Montresor, Renzo Davoli y Ozalp Babaoglu.",
        "Middleware para servicios de red confiables en sistemas distribuidos particionables.",
        "SIGOPS Oper. would be translated to \"Operaciones de SIGOPS\" in Spanish.",
        "This is not a complete sentence. Please provide more context or the full sentence you would like me to translate.",
        "Rev., 35(1):73-96, 2001. [15] H. Meling y B. Helvik.",
        "Arm: Gestión autónoma de replicación en jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul y Marc Shapiro.",
        "Objetos fragmentados para abstracciones distribuidas.",
        "En Lecturas en Sistemas de Computación Distribuida. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum y Wiebren de Jonge.",
        "Un modelo de objetos para sistemas distribuidos flexibles.",
        "En Actas de la 1ra Conferencia Anual de ASCI, páginas 69-78, 1995.",
        "Artículo 5"
    ],
    "error_count": 8,
    "keys": {
        "decentralized adaptive service": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
                "Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the resource management has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the resource management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The resource management focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of node crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment.",
                "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the <br>decentralized adaptive service</br> is dynamically distributed within the scope of an associated service environment.",
                "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
                "Every node provides a set of resources.",
                "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common grid computing environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
                "For long-term services this is even harder, and it is likely that the resource demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
                "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a <br>decentralized adaptive service</br>.",
                "Every service has so called local limits that restrict the resource usage in context of the current node.",
                "If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a node.",
                "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
                "Furthermore each node has node limits that restrict the overall usage of certain resources.",
                "A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a node must never exceed the node limit of a resource.",
                "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum resource usage of a project in scope of a home environment.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a home environment supports usually numerous projects.",
                "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
                "As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
                "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node.",
                "If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
                "When all resources of the node are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its global limit.",
                "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a global limit is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
                "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
                "<br>decentralized adaptive service</br> MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
                "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no resource aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for resource aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the resource management can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the resource management and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [
                "Finally, the <br>decentralized adaptive service</br> is dynamically distributed within the scope of an associated service environment.",
                "The entity of monitoring is a service or a service component in case of a <br>decentralized adaptive service</br>.",
                "<br>decentralized adaptive service</br> MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository."
            ],
            "translated_annotated_samples": [
                "Finalmente, el <br>servicio adaptativo descentralizado</br> se distribuye dinámicamente dentro del alcance de un entorno de servicio asociado.",
                "La entidad de monitoreo es un servicio o un componente de servicio en caso de un <br>servicio adaptativo descentralizado</br>.",
                "En EDAS, un modelo de <br>servicio descentralizado y adaptable</br> normalmente se corresponde con un servicio tradicional al que acceden los usuarios, como un servidor web, un servidor de mensajería instantánea o un repositorio de código fuente."
            ],
            "translated_text": "EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept. de la computadora. A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la computación en malla evoluciona y se aplica a un número creciente de aplicaciones. El entorno para servicios adaptativos descentralizados (EDAS) proporciona una infraestructura tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los recursos. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer. La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Las infraestructuras para la computación en malla tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande. La gestión de recursos es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red. Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también. Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros. El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo. En lugar de establecer una infraestructura para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros. Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un nodo más potente y menos cargado). La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido. Además, un servicio no replicado no es accesible durante la migración. Por lo tanto, la gestión de recursos debe evitar la migración si es posible. Además, se debe proporcionar un concepto de servicio que evite la sobrecarga en primer lugar y, en segundo lugar, evite la indisponibilidad del servicio si la migración no se puede evitar. EDAS [2] tiene como objetivo proporcionar una infraestructura tipo rejilla para servicios de largo plazo accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una infraestructura de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos. Los nodos pueden unirse y abandonar dinámicamente la infraestructura, y todas las tareas de gestión, especialmente la gestión de recursos, son descentralizadas. El entorno se construye sobre nuestra infraestructura middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS). La gestión de recursos se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo, potencialmente infinito. Estos servicios están organizados en proyectos. Cada proyecto tiene un alcance de ejecución distribuido llamado entorno de servicio. Un ambiente así posiblemente abarca múltiples instituciones. Cada institución representa un dominio administrativo que puede respaldar un proyecto con un conjunto fijo de recursos. Nuestro enfoque respalda la gestión adaptativa de recursos de todos los proyectos en el alcance de una institución basada en un algoritmo inspirado en los algoritmos difusivos para el equilibrio de carga descentralizado [4]. No se sabe cómo subdividir óptimamente estos recursos para los servicios, ya que la demanda de recursos de los servicios puede cambiar con el tiempo o incluso fluctuar con frecuencia. Para proporcionar recursos según sea necesario, nuestro enfoque redirige automáticamente de manera equitativa los recursos libres o no necesarios entre las instancias de servicio en todos los proyectos y nodos. El proceso completo del artículo 5 de rededicación es escalable ya que es descentralizado y respeta ciertos límites como los recursos físicamente disponibles de un nodo y la cantidad de recursos dedicados a un proyecto. En los casos en los que no sea posible la rededicación, se inicia la migración del servicio exigente. EDAS apoya además modelos de servicio flexibles, incluyendo una estructura cliente/servidor completamente centralizada, sistemas basados completamente en pares, y varias configuraciones intermedias que permiten un uso controlado de los recursos de los pares basado en el modelo de objetos fragmentados [5]. El objetivo general es proporcionar una arquitectura de servicio genérica que permita implementar la funcionalidad del servicio una vez, y luego, idealmente, ejecutar este servicio con diferentes modelos de servicio y adaptarlo en tiempo de ejecución, escalando así desde una instancia local de un solo usuario hasta un servicio escalable que abarque múltiples dominios. Para reducir el esfuerzo de implementación de dichos servicios, se ha desarrollado un marco que respalda la evolución en tiempo de ejecución desde un escenario tradicional de cliente/servidor a un servidor replicado activo con clientes interactuando en una arquitectura híbrida de pares a pares como la conocida en Napster. En una infraestructura de red de servicio a largo plazo, la replicación activa tiene varios beneficios: las réplicas pueden unirse y abandonar el grupo de objetos y, por lo tanto, las réplicas pueden ser migradas sin que el servicio esté no disponible. La carga de solicitudes no modificadoras se puede distribuir de manera uniforme entre las réplicas, lo que hace que las situaciones de sobrecarga sean menos probables. Finalmente se puede tolerar cierta cantidad de caídas de nodos. La siguiente sección describe las características utilizadas de AspectIX seguida de una breve descripción de los componentes principales y conceptos de EDAS. La sección 4 explica los conceptos de autoadministración y rededicación en la gestión de recursos adaptativos distribuidos. La sección 5 describe el marco para servicios adaptativos descentralizados. La sección 6 describe el trabajo relacionado y finalmente la Sección 7 concluye el artículo. MIDDLEWARE BÁSICO El entorno de EDAS se basa en el middleware AspectIX. En su núcleo, proporciona un ORB compatible con CORBA y, como tal, soporta sistemas distribuidos heterogéneos. Además, AspectIX soporta el modelo de objetos fragmentado [5] que se utiliza para implementar y proporcionar servicios adaptativos descentralizados. En el modelo de objeto fragmentado, la distinción entre los stubs del cliente y el objeto del servidor ya no está presente (Fig. 1). Desde un punto de vista abstracto, un objeto fragmentado es una unidad con identidad, interfaz, comportamiento y estado únicos, al igual que en el diseño orientado a objetos clásico. La implementación de estas propiedades, sin embargo, no está limitada a una ubicación específica, sino que puede distribuirse arbitrariamente en varios fragmentos. Cualquier cliente que desee acceder al objeto fragmentado necesita un fragmento local, que proporciona una interfaz idéntica a la de un stub tradicional. Sin embargo, la distribución interna y la interacción no solo son transparentes en la interfaz externa del objeto distribuido, sino que incluso pueden cambiar dinámicamente en tiempo de ejecución. Esto permite que el modelo de objeto fragmentado se adapte a las condiciones cambiantes del entorno o a los requisitos de calidad del servicio. Ofrece cambiar el modelo de servicio a pedido, desde el tradicional cliente-servidor a un enfoque basado en pares, y todo tipo de etapas intermedias mediante la migración e intercambio de fragmentos. Componentes principales de EDAS Figura 1: Objeto fragmentado en tres nodos EDAS tiene tres componentes principales: Cada nodo que apoya activamente los servicios adaptativos descentralizados proporciona un entorno local. El entorno del hogar básicamente gestiona los recursos de uno o más nodos pertenecientes al mismo dominio administrativo o institución. El entorno de servicio se extiende sobre un conjunto de dominios que respaldan un proyecto específico y depende de servicios básicos de los entornos domésticos correspondientes. El entorno de servicio apoya la ejecución de servicios pertenecientes al mismo proyecto. Finalmente, el <br>servicio adaptativo descentralizado</br> se distribuye dinámicamente dentro del alcance de un entorno de servicio asociado. El entorno del hogar tiene el papel de mediador entre los nodos de una institución y uno o más entornos de servicio, cada uno ejecutando un conjunto de servicios. La Fig. 2 muestra tres dominios, cada uno ejecutando un entorno doméstico que abarca todos los nodos de los respectivos dominios. Cada nodo proporciona un conjunto de recursos. Cada dominio tiene un administrador que puede utilizar ese entorno doméstico para asignar recursos a los entornos de servicio y revocarlos. Además de proporcionar la carga del sistema y todo tipo de información sobre el uso de recursos al entorno de servicio, el entorno doméstico también notifica sobre todos los eventos importantes del sistema, como un apagado o fallo de un nodo. Un entorno de servicio representa un alcance de distribución para uno o más servicios. Por lo general, un entorno de servicio es propiedad de una organización o comunidad y está dedicado a un proyecto. Un gerente de servicios puede iniciar, detener y configurar servicios a través de la interfaz del entorno de servicios y decide qué recursos proporcionados por los entornos domésticos son aceptados. En la mayoría de los casos, un entorno de servicio se extiende sobre más de un dominio administrativo, como se muestra en la Figura 2. Una de las principales tareas del entorno de servicio es apoyar la migración de servicios o componentes de servicio, especialmente entre diferentes entornos de origen. El entorno de servicio toma en cuenta los recursos disponibles, los requisitos de los servicios y las políticas proporcionadas por el gerente de servicio. La migración de componentes de servicio puede ser necesaria por diversas razones, como el apagado de nodos, limitaciones de recursos y el crecimiento o reducción del entorno de servicio. 4. La gestión de recursos descentralizada. La gestión de recursos para servicios a largo plazo tiene otros requisitos que la gestión de recursos en entornos comunes de computación en red. Por ejemplo, incluso en el contexto de los sistemas de red tradicionales, es muy difícil determinar o siquiera estimar los requisitos de recursos de una tarea [6]. Para servicios a largo plazo esto es aún más difícil, y es probable que la demanda de recursos cambie con frecuencia. Esto convierte el Artículo 5 Anfitrión F Anfitrión D Anfitrión E Anfitrión A Anfitrión C Servicio Entorno Servicio B Servicio A Entorno Hogar. Entorno del hogar Límite del objeto fragmentado Gerente de servicio Gerente de dominio Gerente de dominio Figura 2: Escenario de EDAS la distribución óptima de servicios sobre un conjunto de nodos en un problema difícil. En general, la migración de servicios es un requisito previo de EDAS, ya que ofrece una solución si la decisión de distribución inicial fue incorrecta (por ejemplo, inicio inicial de un servicio previamente desconocido) o si la demanda de servicios ha cambiado sustancialmente. Pero la migración es costosa, ya que se debe transferir todo el estado de un servicio, posiblemente incluyendo el código del programa. Si el servicio no se replica, estará no disponible durante la migración. Teniendo esto en cuenta, un sistema de gestión de recursos debería ubicar servicios y redistribuir recursos de manera adaptativa entre servicios y nodos según sea necesario para evitar migraciones. Dado que EDAS tiene como objetivo proporcionar una infraestructura tipo rejilla para un gran conjunto de nodos que pueden unirse y abandonar el sistema, todas las tareas de gestión de recursos deben descentralizarse para ser escalables y no deben requerir conocimiento global. La gestión de recursos se puede estructurar en las siguientes tareas diferentes: • Agregar y cambiar los recursos asignados de un entorno de servicio • Colocación automática de servicios al inicio y durante la migración debido a sobrecarga • Mantener todo tipo de límites de recursos, especialmente los límites de entornos de servicio • Compensar la salida y los nodos que se han bloqueado En las siguientes secciones describiremos qué tipo de límites de recursos existen y cómo gestionar los recursos basándonos en estas condiciones básicas. 4.1 Límites de Recursos Nuestro enfoque gestiona los recursos en dos etapas, a nivel de nodo y a nivel de entorno de servicio. A nivel de nodo monitoreamos el uso de todo tipo de recursos físicos como espacio en disco, memoria, CPU y ancho de banda de red, pero también recursos lógicos como archivos abiertos, sockets y hilos. La entidad de monitoreo es un servicio o un componente de servicio en caso de un <br>servicio adaptativo descentralizado</br>. Cada servicio tiene límites locales llamados así que restringen el uso de recursos en el contexto del nodo actual. Si un servicio corre el riesgo de exceder dicho límite local, el entorno doméstico intenta ampliar los límites o notifica al entorno de servicio responsable si la reasignación no es posible. Alcanzar un límite local puede ser causado por dos razones: un nodo sobrecargado o un entorno de servicio sobrecargado. En el primer caso, la migración del servicio podría ser útil, en el segundo caso, la migración a otro dominio administrativo podría ser una opción, o simplemente reducir la demanda de recursos deteniendo el servicio. Por supuesto, podría haber más de un servicio del mismo entorno de servicio en un nodo. Por lo tanto, los recursos asignados de un entorno de servicio en un nodo pueden ser fácilmente calculados sumando todos los límites locales de sus servicios. Además, cada nodo tiene límites que restringen el uso general de ciertos recursos. Un límite de nodo nunca debe exceder los recursos físicos (por ejemplo, espacio en disco) de un nodo y podría ser mucho más pequeño, por ejemplo, para soportar usuarios locales. La suma de todos los límites locales en un nodo nunca debe exceder el límite del nodo de un recurso. Por lo tanto, observar y controlar los límites locales mantendrá los límites del nodo y evitará la sobrecarga. En el nivel institucional, el uso de recursos de un entorno de servicio y sus servicios asociados también está restringido por los llamados límites globales. Estos límites determinan el uso máximo de recursos de un proyecto en el ámbito de un entorno doméstico. La suma de todos los límites locales en todos los nodos de la institución para un proyecto determinado nunca excede su límite global. GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Reasignación de Recursos Adaptativa Comenzamos con una implementación directa para describir el flujo de trabajo principal. Luego proponemos un enfoque para una solución más eficiente y discutimos sus problemas. Si un nuevo proyecto debe ser respaldado por un entorno doméstico, primero es necesario identificar los nodos que ofrecen recursos suficientes no asignados para iniciar un servicio. Esto se puede lograr en una implementación ingenua utilizando un enfoque de inundación como se hace en el protocolo Gnutella, asumiendo que los nodos están conectados en un grafo aleatorio. Estos recursos pueden ser asignados al entorno de servicio del nuevo proyecto, el cual posteriormente puede comenzar a ofrecer servicios en estos nodos. Por supuesto, un entorno hogareño suele apoyar numerosos proyectos. Cada uno de estos proyectos tiene asignaciones de recursos en varios nodos, algunos de ellos ocupados por servicios, otros libres y sin usar. A medida que la demanda de recursos de un servicio cambia, podría ser posible que un servicio alcance su límite local si está bajo una alta demanda. Lo que sucede a continuación depende del uso general de recursos del entorno de servicio y del consumo de recursos en el nodo local. Si el entorno de servicio no ha alcanzado su límite global y el nodo no está sobrecargado, el límite local dependiente del servicio debería extenderse simplemente reduciendo un límite local en otro nodo del mismo entorno de servicio. Cuando todos los recursos del nodo se asignan a otros entornos de servicio, existen dos posibilidades. Todos los recursos son utilizados por los servicios, por lo que debemos migrar un servicio, o los recursos están asignados pero no utilizados. En el último caso reasignaremos recursos y los destinaremos al exigente entorno de servicio. Finalmente, es posible que el entorno de servicio haya alcanzado su límite global. En este caso, el consumo de recursos debe reducirse ya sea migrando el servicio a otro dominio y su entorno de origen dependiente o simplemente limitando el uso de recursos y, si esto no es posible, deteniendo el servicio. A diferencia de la configuración de un nuevo entorno de servicio que no es crítico en cuanto al tiempo y es una tarea menos frecuente, la adaptación de los límites locales ocurre con frecuencia y debe realizarse en el Artículo 5 casi de inmediato. Por lo tanto, no es una opción utilizar búsquedas de difusión para la reafirmación. En cambio, se necesita un enfoque más eficiente con una complejidad limitada. Lo mismo se aplica para detectar si se alcanza un límite global en un entorno de servicio. Actualmente investigamos si esto se puede lograr utilizando un algoritmo difusivo[4] como se utiliza para el equilibrio de carga descentralizado. De esta manera, todos los nodos de un sistema se dividen en grupos que se superponen parcialmente. La unión de todos los grupos logra una cobertura completa. Los miembros del grupo intercambian frecuentemente información de carga y equilibran la carga mediante migración. En nuestro caso, nuestro objetivo no es equilibrar la carga, sino la cantidad de recursos libres disponibles en un entorno de servicio. Cada nodo que respalda un determinado entorno de servicio está conectado al menos a otro nodo que respalda el mismo proyecto. De esta manera siempre se debería saber si un entorno de servicio todavía tiene suficientes recursos y, por lo tanto, si un servicio puede crecer. Todavía quedan cuestiones abiertas, como si los recursos libres equilibrados difusivamente deben estar estrechamente conectados a los recursos reales, comparables a las reservas. En este caso podría haber problemas si un nodo admite varios entornos de servicio que tienen servicios en ejecución en el nodo y se excede un límite de nodo que requeriría la migración del servicio. De hecho, puede ser innecesario ya que los servicios podrían no utilizar todos los recursos asignados, pero el algoritmo difusivo causó la sobrecarga del límite al equilibrar de manera equitativa los recursos libres de todos los entornos de servicio admitidos. Si eliminamos el mapeo entre los recursos gratuitos y los recursos reales de un nodo, podemos evitar estas situaciones. Sin embargo, se vuelve más complicado determinar los recursos libres y no asignados de un entorno doméstico. 4.3 Colocación de Servicios Independientemente del mapeo de recursos libres, la colocación de un servicio es, como ya se ha mencionado, un problema difícil. Distribuir los servicios de manera equitativa en todos los nodos seguramente evitaría la migración en el caso promedio incluso si la demanda de recursos de los servicios cambia. Sin embargo, si la demanda de recursos de los servicios varía considerablemente y la red está congestionada por muchos proyectos, podría suceder que un servicio no pueda ser ubicado porque los recursos disponibles están muy dispersos. Un enfoque diferente sería considerarlo como una variante del problema de empaquetamiento de contenedores que tiene como objetivo empacar elementos en contenedores optimizando el número de contenedores utilizados. En nuestro caso, necesitamos un enfoque en línea ya que los elementos no son conocidos de antemano y tenemos un problema multidimensional debido a que un servicio tiene varios requisitos de recursos. El número de contenedores está limitado ya que tenemos un número finito de nodos en nuestra cuadrícula. Un algoritmo para este problema ha sido propuesto recientemente por Epstein y van Stee en [7]. En el lado negativo, este algoritmo necesita conocer todos los nodos y su uso actual. Dado que la ubicación de un servicio no es un problema crítico en términos de tiempo, nuevamente un enfoque basado en inundaciones podría ofrecer una solución. Para reducir el número de respuestas, solo los nodos que proporcionen recursos suficientes deben responder. También se debe considerar transformar el algoritmo en uno distribuido. Otro problema podría ser que el algoritmo optimiza la ocupación de manera demasiado intensa. Por lo tanto, los cambios en la demanda de servicio pueden provocar nodos sobrecargados y causar migraciones. Creemos que esto se puede prevenir no solo considerando el consumo real de recursos para determinar la demanda de recursos de un servicio, sino teniendo en cuenta la demanda previa. 5. En EDAS, un modelo de <br>servicio descentralizado y adaptable</br> normalmente se corresponde con un servicio tradicional al que acceden los usuarios, como un servidor web, un servidor de mensajería instantánea o un repositorio de código fuente. Un servicio así está representado por un objeto fragmentado. Este objeto se expande o contrae en el alcance abarcado por el entorno de servicio asociado dependiendo de las demandas del servicio y por razones de tolerancia a fallos. Por lo general, cada parte del objeto es móvil y puede ser trasladada si es necesario. Cada servicio tiene al menos dos interfaces: una para tareas de gestión y otro servicio específico para el usuario final. La interfaz de gestión ofrece métodos para iniciar, detener y configurar instancias de servicio. Dado que este conjunto de características requiere un enorme esfuerzo de implementación para hacerlo de nuevo para cada implementación de servicio que apoyamos, respaldamos el desarrollo de servicios adaptativos descentralizados a través de un marco y una versión extendida de IDL en combinación con un compilador especial de IDL [8]. La idea principal es desarrollar un servicio de la manera tradicional cliente/servidor, tal como se hace en CORBA básico. Este servicio puede ser iniciado y ejecutado en la red como un servidor común. Además, debería ser posible migrar el servicio. Esto se puede lograr utilizando un enfoque basado en tipos de valor para describir el estado del servicio como se hace en [9] o utilizando los mecanismos de serialización suministrados por el lenguaje. Como nos gustaría tolerar fallos de nodos y el servicio debería estar disponible durante la migración, apoyamos la replicación activa del servicio. Esto se logra generando stubs especiales del lado del cliente que se comunican con una de las réplicas. Para mantener la conexión entre los clientes y el objeto replicado, utilizamos referencias limitadas en el tiempo [10] que restringen la migración pero hacen que el uso de servicios de ubicación (para hacer frente a referencias obsoletas) sea innecesario. Las réplicas están sincronizadas a través de un marco de comunicación de grupo. La extensión IDL consiste en modificadores adicionales que afectan la generación de código para el lado del cliente y del servidor. Estos se retienen para marcar operaciones no modificativas que permiten respuestas más rápidas y equilibrio de carga de esas solicitudes. Además, se puede marcar los métodos como locales, lo que indica que pueden ser procesados localmente. En este caso, el compilador IDL crea un marcador de posición para la ejecución local. Además de los métodos habituales estáticos, es útil implementar la contribución e interacción del lado del cliente. Por ejemplo, si un cliente falso ofrece un método que resulta en una transferencia de archivos, es posible integrar un protocolo personalizado que reenvíe una solicitud modificada al objeto replicado, el cual no devuelve el archivo como en el caso común, sino URLs que apuntan a clientes que solicitaron previamente el archivo. Ahora el cliente ficticio obtiene los datos de la ubicación ofrecida y responde como si hubieran sido suministrados por el objeto del servidor. Este comportamiento basado en pares, como se conoce en Napster, es transparente para el cliente y puede activarse y desactivarse según las condiciones del entorno, como la carga y la comunidad, según sea necesario. Finalmente proporcionamos otro modificador para marcar operaciones administrativas. Si un método está marcado como administrador, se requiere autenticación. El método de autenticación es adaptable y puede ser mediante una frase de paso, una dirección de internet o cualquier otro esquema de autenticación. Este modificador facilita la creación de métodos de gestión de servicios. Artículo 5 6. Las infraestructuras de cuadrícula como el Globus-Toolkit [11] proporcionan servicios y mecanismos para entornos heterogéneos distribuidos que combinan recursos bajo demanda para resolver tareas que consumen recursos y computacionalmente intensivas. Debido a esta orientación, se centran en diferentes modelos de servicio, no proporcionan soporte para la movilidad de objetos, ni siquiera si apoyan un enfoque de objetos distribuidos en absoluto. Pero lo más importante es que siguen un enfoque diferente de gestión de recursos, ya que se centran en la ejecución paralela de una gran cantidad de tareas cortas y a medio plazo. JavaSymphony [12] y Ibis [13] proporcionan movilidad de objetos pero están limitados al lenguaje de programación Java y se centran en la computación de alto rendimiento orientada a objetos. Los objetos replicados activamente son proporcionados por Jgroup [14] basados en RMI. Encima de este middleware básico se ha implementado una capa de gestión de replicación llamada ARM [15]. JGroup se enfoca en la replicación activa de objetos pero carece de soporte para servicios más flexibles como lo hace EDAS. ARM se puede comparar con EDAS pero no admite la distribución consciente de recursos. Fog [16] y Globe [17] son entornos middleware básicos que admiten el enfoque de objetos fragmentados. Globe considera la replicación y el almacenamiento en caché. Ambos sistemas carecen de soporte para la distribución consciente de los recursos. 7. CONCLUSIÓN Y TRABAJO EN CURSO Basándose en el modelo de objeto fragmentado y la arquitectura del entorno de EDAS, los servicios adaptativos descentralizados pueden ser fácilmente diseñados, implementados y ejecutados. Como se describe, la gestión de recursos se puede descomponer en dos problemas principales que deben resolverse. Controlar y gestionar los límites de recursos, incluido garantizar que los recursos asignados estén disponibles (incluso en el contexto de fallas de nodos) y la colocación autónoma de servicios. Para ambos problemas ofrecemos una solución, un entorno de simulación actualmente implementado verificará su viabilidad. En un próximo paso, la gestión de recursos se integrará en un prototipo de la arquitectura EDAS que ya ha sido implementado. Como se describe, ya tenemos una implementación inicial del marco de trabajo para los servicios adaptativos descentralizados. Este marco debe ser ampliado para interactuar de manera fluida con la gestión de recursos y la arquitectura de EDAS. En un paso final, necesitamos implementar algunos servicios que verifiquen la usabilidad de todo el proyecto EDAS. 8. REFERENCIAS [1] D. Werthimer, S. Bowyer, J. Cobb, D. Gedye, D. Anderson, W. T. Sullivan, III. Un nuevo proyecto SETI importante basado en los datos del proyecto Serendip y 100,000 computadoras personales. En Actas del Quinto Congreso Internacional. Conferencia sobre Bioastronomía, 1997. [2] Hans Reiser, Rüdiger Kapitza, Franz J. Hauck. Servicios Descentralizados y Adaptativos: El Enfoque AspectIX para un Entorno de Red Flexible y Seguro. En Grid Services Engineering and Management (GSEM 2004), Erfurt, Alemania, 2004. Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, y Andreas I. Schmied. Integrando objetos fragmentados en un entorno CORBA. En Proc. de los Net.ObjectDays, 2003. [4] Tiberiu Rotaru y Hans-Heinrich N¨ageli. Equilibrado dinámico de carga mediante difusión en sistemas heterogéneos. I'm sorry, but the sentence \"J.\" does not provide enough context for an accurate translation. Could you please provide more information or a complete sentence for me to translate? Distribución Paralela. Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, y M. Shapiro. Objetos fragmentados para abstracciones distribuidas. [6] Jennifer M. Schopf. Diez acciones cuando se programa en una cuadrícula: el usuario como programador de cuadrícula. páginas 15-23, 2004. [7] Leah Epstein y Rob van Stee. Empaquetado multidimensional en línea óptimo con espacio limitado. En SODA 04: Actas del decimoquinto simposio anual de algoritmos discretos de ACM-SIAM, páginas 214-223, Filadelfia, PA, EE. UU., 2004. Sociedad de Matemáticas Industriales y Aplicadas. [8] Hans P. Reiser, Martin Steckermeier y Franz J. Hauck. IDLflex: un compilador flexible y genérico para IDL de CORBA. En Proc. de los Net.ObjectDays (Erfurt, Alemania, 10-13 de septiembre de 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt y Franz J. Hauck. Migración de objetos independiente de la plataforma en CORBA. En Actas de las Conferencias OTM05 (DOA, Agia Napa, Chipre, 31 de octubre - 04 de noviembre de 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser y Franz J. Hauck. Referencias estables y limitadas en el tiempo en el contexto de entornos que cambian dinámicamente. En MDC05: Actas de la 25ª Conferencia Internacional de IEEE. Conferencia sobre Sistemas de Computación Distribuida - Talleres (Talleres ICDCS 2005), 2005. [11] Ian Foster, Carl Kesselman y Steven Tuecke. La anatomía de la red: Permitiendo organizaciones virtuales escalables. Notas de conferencia en Ciencias de la Computación, 2150, 2001. [12] Thomas Fahringer y Alexandru Jugravu. Javasymphony: nuevas directivas para controlar y sincronizar la localidad, el paralelismo y el equilibrio de carga para la computación en clúster y en grid. En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 8-17, Nueva York, NY, EE. UU., 2002. ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann y Henri E. Bal. Ibis: un entorno de programación en malla eficiente basado en Java. En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 18-27, Nueva York, NY, EE. UU., 2002. ACM Press. [14] Alberto Montresor, Renzo Davoli y Ozalp Babaoglu. Middleware para servicios de red confiables en sistemas distribuidos particionables. SIGOPS Oper. would be translated to \"Operaciones de SIGOPS\" in Spanish. This is not a complete sentence. Please provide more context or the full sentence you would like me to translate. Rev., 35(1):73-96, 2001. [15] H. Meling y B. Helvik. Arm: Gestión autónoma de replicación en jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul y Marc Shapiro. Objetos fragmentados para abstracciones distribuidas. En Lecturas en Sistemas de Computación Distribuida. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum y Wiebren de Jonge. Un modelo de objetos para sistemas distribuidos flexibles. En Actas de la 1ra Conferencia Anual de ASCI, páginas 69-78, 1995. Artículo 5 ",
            "candidates": [],
            "error": [
                [
                    "servicio adaptativo descentralizado",
                    "servicio adaptativo descentralizado",
                    "servicio descentralizado y adaptable"
                ]
            ]
        },
        "resource management": {
            "translated_key": "gestión de recursos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic <br>resource management</br> allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "<br>resource management</br> is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
                "Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the <br>resource management</br> has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the <br>resource management</br>, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The <br>resource management</br> focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive <br>resource management</br> of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of node crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive <br>resource management</br>.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment.",
                "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
                "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
                "Every node provides a set of resources.",
                "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT <br>resource management</br> for long-term services has other requirements than <br>resource management</br> in common grid computing environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
                "For long-term services this is even harder, and it is likely that the resource demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a <br>resource management</br> should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all <br>resource management</br> tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The <br>resource management</br> can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do <br>resource management</br> based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
                "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
                "Every service has so called local limits that restrict the resource usage in context of the current node.",
                "If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a node.",
                "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
                "Furthermore each node has node limits that restrict the overall usage of certain resources.",
                "A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a node must never exceed the node limit of a resource.",
                "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum resource usage of a project in scope of a home environment.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a home environment supports usually numerous projects.",
                "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
                "As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
                "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node.",
                "If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
                "When all resources of the node are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its global limit.",
                "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a global limit is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
                "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
                "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
                "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different <br>resource management</br> approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no resource aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for resource aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the <br>resource management</br> can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the <br>resource management</br> will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the <br>resource management</br> and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [
                "Automatic, dynamic <br>resource management</br> allows optimized use of available resources while minimizing the administrative complexity.",
                "<br>resource management</br> is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Therefore the <br>resource management</br> has to avoid migration if possible.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the <br>resource management</br>, are decentralized.",
                "The <br>resource management</br> focuses on the execution of services that have a long, potentially infinite, operating time."
            ],
            "translated_annotated_samples": [
                "La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa.",
                "La <br>gestión de recursos</br> es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red.",
                "Por lo tanto, la <br>gestión de recursos</br> debe evitar la migración si es posible.",
                "Los nodos pueden unirse y abandonar dinámicamente la infraestructura, y todas las tareas de gestión, especialmente la <br>gestión de recursos</br>, son descentralizadas.",
                "La <br>gestión de recursos</br> se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo, potencialmente infinito."
            ],
            "translated_text": "EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept. de la computadora. A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la computación en malla evoluciona y se aplica a un número creciente de aplicaciones. El entorno para servicios adaptativos descentralizados (EDAS) proporciona una infraestructura tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los recursos. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer. La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Las infraestructuras para la computación en malla tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande. La <br>gestión de recursos</br> es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red. Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también. Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros. El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo. En lugar de establecer una infraestructura para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros. Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un nodo más potente y menos cargado). La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido. Además, un servicio no replicado no es accesible durante la migración. Por lo tanto, la <br>gestión de recursos</br> debe evitar la migración si es posible. Además, se debe proporcionar un concepto de servicio que evite la sobrecarga en primer lugar y, en segundo lugar, evite la indisponibilidad del servicio si la migración no se puede evitar. EDAS [2] tiene como objetivo proporcionar una infraestructura tipo rejilla para servicios de largo plazo accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una infraestructura de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos. Los nodos pueden unirse y abandonar dinámicamente la infraestructura, y todas las tareas de gestión, especialmente la <br>gestión de recursos</br>, son descentralizadas. El entorno se construye sobre nuestra infraestructura middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS). La <br>gestión de recursos</br> se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo, potencialmente infinito. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "home environment": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
                "Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the resource management has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the resource management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The resource management focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of node crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a <br>home environment</br>.",
                "The <br>home environment</br> basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
                "The <br>home environment</br> has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a <br>home environment</br> that spans all nodes of the respective domains.",
                "Every node provides a set of resources.",
                "Each domain has a manager who can use that <br>home environment</br> to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of resource-usage information to the service environment, the <br>home environment</br> also notifies about all important system events like a node shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common grid computing environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
                "For long-term services this is even harder, and it is likely that the resource demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "<br>home environment</br> <br>home environment</br> Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
                "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
                "Every service has so called local limits that restrict the resource usage in context of the current node.",
                "If a service runs the risk of exceeding such a local limit the <br>home environment</br> tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a node.",
                "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
                "Furthermore each node has node limits that restrict the overall usage of certain resources.",
                "A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a node must never exceed the node limit of a resource.",
                "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum resource usage of a project in scope of a <br>home environment</br>.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a <br>home environment</br> it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a <br>home environment</br> supports usually numerous projects.",
                "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
                "As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
                "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node.",
                "If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
                "When all resources of the node are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its global limit.",
                "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended <br>home environment</br> or simply by bounding resource usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a global limit is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a <br>home environment</br>. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
                "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
                "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
                "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no resource aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for resource aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the resource management can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the resource management and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a <br>home environment</br>.",
                "The <br>home environment</br> basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The <br>home environment</br> has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a <br>home environment</br> that spans all nodes of the respective domains.",
                "Each domain has a manager who can use that <br>home environment</br> to assign resources to service environments and to revoke them."
            ],
            "translated_annotated_samples": [
                "Componentes principales de EDAS Figura 1: Objeto fragmentado en tres nodos EDAS tiene tres componentes principales: Cada nodo que apoya activamente los servicios adaptativos descentralizados proporciona un <br>entorno local</br>.",
                "El <br>entorno del hogar</br> básicamente gestiona los recursos de uno o más nodos pertenecientes al mismo dominio administrativo o institución.",
                "El <br>entorno del hogar</br> tiene el papel de mediador entre los nodos de una institución y uno o más entornos de servicio, cada uno ejecutando un conjunto de servicios.",
                "La Fig. 2 muestra tres dominios, cada uno ejecutando un <br>entorno doméstico</br> que abarca todos los nodos de los respectivos dominios.",
                "Cada dominio tiene un administrador que puede utilizar ese <br>entorno doméstico</br> para asignar recursos a los entornos de servicio y revocarlos."
            ],
            "translated_text": "EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept. de la computadora. A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la computación en malla evoluciona y se aplica a un número creciente de aplicaciones. El entorno para servicios adaptativos descentralizados (EDAS) proporciona una infraestructura tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los recursos. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer. La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Las infraestructuras para la computación en malla tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande. La gestión de recursos es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red. Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también. Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros. El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo. En lugar de establecer una infraestructura para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros. Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un nodo más potente y menos cargado). La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido. Además, un servicio no replicado no es accesible durante la migración. Por lo tanto, la gestión de recursos debe evitar la migración si es posible. Además, se debe proporcionar un concepto de servicio que evite la sobrecarga en primer lugar y, en segundo lugar, evite la indisponibilidad del servicio si la migración no se puede evitar. EDAS [2] tiene como objetivo proporcionar una infraestructura tipo rejilla para servicios de largo plazo accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una infraestructura de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos. Los nodos pueden unirse y abandonar dinámicamente la infraestructura, y todas las tareas de gestión, especialmente la gestión de recursos, son descentralizadas. El entorno se construye sobre nuestra infraestructura middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS). La gestión de recursos se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo, potencialmente infinito. Estos servicios están organizados en proyectos. Cada proyecto tiene un alcance de ejecución distribuido llamado entorno de servicio. Un ambiente así posiblemente abarca múltiples instituciones. Cada institución representa un dominio administrativo que puede respaldar un proyecto con un conjunto fijo de recursos. Nuestro enfoque respalda la gestión adaptativa de recursos de todos los proyectos en el alcance de una institución basada en un algoritmo inspirado en los algoritmos difusivos para el equilibrio de carga descentralizado [4]. No se sabe cómo subdividir óptimamente estos recursos para los servicios, ya que la demanda de recursos de los servicios puede cambiar con el tiempo o incluso fluctuar con frecuencia. Para proporcionar recursos según sea necesario, nuestro enfoque redirige automáticamente de manera equitativa los recursos libres o no necesarios entre las instancias de servicio en todos los proyectos y nodos. El proceso completo del artículo 5 de rededicación es escalable ya que es descentralizado y respeta ciertos límites como los recursos físicamente disponibles de un nodo y la cantidad de recursos dedicados a un proyecto. En los casos en los que no sea posible la rededicación, se inicia la migración del servicio exigente. EDAS apoya además modelos de servicio flexibles, incluyendo una estructura cliente/servidor completamente centralizada, sistemas basados completamente en pares, y varias configuraciones intermedias que permiten un uso controlado de los recursos de los pares basado en el modelo de objetos fragmentados [5]. El objetivo general es proporcionar una arquitectura de servicio genérica que permita implementar la funcionalidad del servicio una vez, y luego, idealmente, ejecutar este servicio con diferentes modelos de servicio y adaptarlo en tiempo de ejecución, escalando así desde una instancia local de un solo usuario hasta un servicio escalable que abarque múltiples dominios. Para reducir el esfuerzo de implementación de dichos servicios, se ha desarrollado un marco que respalda la evolución en tiempo de ejecución desde un escenario tradicional de cliente/servidor a un servidor replicado activo con clientes interactuando en una arquitectura híbrida de pares a pares como la conocida en Napster. En una infraestructura de red de servicio a largo plazo, la replicación activa tiene varios beneficios: las réplicas pueden unirse y abandonar el grupo de objetos y, por lo tanto, las réplicas pueden ser migradas sin que el servicio esté no disponible. La carga de solicitudes no modificadoras se puede distribuir de manera uniforme entre las réplicas, lo que hace que las situaciones de sobrecarga sean menos probables. Finalmente se puede tolerar cierta cantidad de caídas de nodos. La siguiente sección describe las características utilizadas de AspectIX seguida de una breve descripción de los componentes principales y conceptos de EDAS. La sección 4 explica los conceptos de autoadministración y rededicación en la gestión de recursos adaptativos distribuidos. La sección 5 describe el marco para servicios adaptativos descentralizados. La sección 6 describe el trabajo relacionado y finalmente la Sección 7 concluye el artículo. MIDDLEWARE BÁSICO El entorno de EDAS se basa en el middleware AspectIX. En su núcleo, proporciona un ORB compatible con CORBA y, como tal, soporta sistemas distribuidos heterogéneos. Además, AspectIX soporta el modelo de objetos fragmentado [5] que se utiliza para implementar y proporcionar servicios adaptativos descentralizados. En el modelo de objeto fragmentado, la distinción entre los stubs del cliente y el objeto del servidor ya no está presente (Fig. 1). Desde un punto de vista abstracto, un objeto fragmentado es una unidad con identidad, interfaz, comportamiento y estado únicos, al igual que en el diseño orientado a objetos clásico. La implementación de estas propiedades, sin embargo, no está limitada a una ubicación específica, sino que puede distribuirse arbitrariamente en varios fragmentos. Cualquier cliente que desee acceder al objeto fragmentado necesita un fragmento local, que proporciona una interfaz idéntica a la de un stub tradicional. Sin embargo, la distribución interna y la interacción no solo son transparentes en la interfaz externa del objeto distribuido, sino que incluso pueden cambiar dinámicamente en tiempo de ejecución. Esto permite que el modelo de objeto fragmentado se adapte a las condiciones cambiantes del entorno o a los requisitos de calidad del servicio. Ofrece cambiar el modelo de servicio a pedido, desde el tradicional cliente-servidor a un enfoque basado en pares, y todo tipo de etapas intermedias mediante la migración e intercambio de fragmentos. Componentes principales de EDAS Figura 1: Objeto fragmentado en tres nodos EDAS tiene tres componentes principales: Cada nodo que apoya activamente los servicios adaptativos descentralizados proporciona un <br>entorno local</br>. El <br>entorno del hogar</br> básicamente gestiona los recursos de uno o más nodos pertenecientes al mismo dominio administrativo o institución. El entorno de servicio se extiende sobre un conjunto de dominios que respaldan un proyecto específico y depende de servicios básicos de los entornos domésticos correspondientes. El entorno de servicio apoya la ejecución de servicios pertenecientes al mismo proyecto. Finalmente, el servicio adaptativo descentralizado se distribuye dinámicamente dentro del alcance de un entorno de servicio asociado. El <br>entorno del hogar</br> tiene el papel de mediador entre los nodos de una institución y uno o más entornos de servicio, cada uno ejecutando un conjunto de servicios. La Fig. 2 muestra tres dominios, cada uno ejecutando un <br>entorno doméstico</br> que abarca todos los nodos de los respectivos dominios. Cada nodo proporciona un conjunto de recursos. Cada dominio tiene un administrador que puede utilizar ese <br>entorno doméstico</br> para asignar recursos a los entornos de servicio y revocarlos. ",
            "candidates": [],
            "error": [
                [
                    "entorno local",
                    "entorno del hogar",
                    "entorno del hogar",
                    "entorno doméstico",
                    "entorno doméstico"
                ]
            ]
        },
        "infrastructure": {
            "translated_key": "infraestructura",
            "is_in_text": true,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like <br>infrastructure</br> for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
                "Instead an <br>infrastructure</br> for long-term services has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the resource management has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like <br>infrastructure</br> for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management <br>infrastructure</br>, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the <br>infrastructure</br>, and all management tasks, especially the resource management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware <br>infrastructure</br>, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The resource management focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid <br>infrastructure</br>, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of node crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment.",
                "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
                "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
                "Every node provides a set of resources.",
                "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common grid computing environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
                "For long-term services this is even harder, and it is likely that the resource demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like <br>infrastructure</br> for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
                "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
                "Every service has so called local limits that restrict the resource usage in context of the current node.",
                "If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a node.",
                "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
                "Furthermore each node has node limits that restrict the overall usage of certain resources.",
                "A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a node must never exceed the node limit of a resource.",
                "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum resource usage of a project in scope of a home environment.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a home environment supports usually numerous projects.",
                "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
                "As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
                "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node.",
                "If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
                "When all resources of the node are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its global limit.",
                "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a global limit is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
                "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
                "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
                "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no resource aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for resource aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the resource management can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the resource management and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [
                "The environment for decentralized adaptive services (EDAS) provides a grid-like <br>infrastructure</br> for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "Instead an <br>infrastructure</br> for long-term services has to place services based on their current demand and their estimated future requirements.",
                "EDAS [2] aims at providing a grid-like <br>infrastructure</br> for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management <br>infrastructure</br>, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the <br>infrastructure</br>, and all management tasks, especially the resource management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware <br>infrastructure</br>, which directly supports QoS-based, dynamic reconfiguration of services."
            ],
            "translated_annotated_samples": [
                "El entorno para servicios adaptativos descentralizados (EDAS) proporciona una <br>infraestructura</br> tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.).",
                "En lugar de establecer una <br>infraestructura</br> para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros.",
                "EDAS [2] tiene como objetivo proporcionar una <br>infraestructura</br> tipo rejilla para servicios de largo plazo accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una <br>infraestructura</br> de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos.",
                "Los nodos pueden unirse y abandonar dinámicamente la <br>infraestructura</br>, y todas las tareas de gestión, especialmente la gestión de recursos, son descentralizadas.",
                "El entorno se construye sobre nuestra <br>infraestructura</br> middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS)."
            ],
            "translated_text": "EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept. de la computadora. A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la computación en malla evoluciona y se aplica a un número creciente de aplicaciones. El entorno para servicios adaptativos descentralizados (EDAS) proporciona una <br>infraestructura</br> tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los recursos. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer. La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Las infraestructuras para la computación en malla tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande. La gestión de recursos es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red. Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también. Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros. El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo. En lugar de establecer una <br>infraestructura</br> para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros. Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un nodo más potente y menos cargado). La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido. Además, un servicio no replicado no es accesible durante la migración. Por lo tanto, la gestión de recursos debe evitar la migración si es posible. Además, se debe proporcionar un concepto de servicio que evite la sobrecarga en primer lugar y, en segundo lugar, evite la indisponibilidad del servicio si la migración no se puede evitar. EDAS [2] tiene como objetivo proporcionar una <br>infraestructura</br> tipo rejilla para servicios de largo plazo accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una <br>infraestructura</br> de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos. Los nodos pueden unirse y abandonar dinámicamente la <br>infraestructura</br>, y todas las tareas de gestión, especialmente la gestión de recursos, son descentralizadas. El entorno se construye sobre nuestra <br>infraestructura</br> middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS). ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "client": {
            "translated_key": "cliente",
            "is_in_text": true,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
                "Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the resource management has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the resource management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The resource management focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized <br>client</br>/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional <br>client</br>/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of node crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between <br>client</br> stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any <br>client</br> that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional <br>client</br>-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment.",
                "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
                "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
                "Every node provides a set of resources.",
                "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common grid computing environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
                "For long-term services this is even harder, and it is likely that the resource demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
                "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
                "Every service has so called local limits that restrict the resource usage in context of the current node.",
                "If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a node.",
                "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
                "Furthermore each node has node limits that restrict the overall usage of certain resources.",
                "A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a node must never exceed the node limit of a resource.",
                "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum resource usage of a project in scope of a home environment.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a home environment supports usually numerous projects.",
                "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
                "As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
                "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node.",
                "If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
                "When all resources of the node are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its global limit.",
                "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a global limit is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
                "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
                "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual <br>client</br>/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special <br>client</br>-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for <br>client</br> and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement <br>client</br>-side contribution and interaction.",
                "For example if a <br>client</br>-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the <br>client</br> and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no resource aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for resource aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the resource management can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the resource management and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [
                "EDAS further supports flexible service models, including a fully centralized <br>client</br>/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional <br>client</br>/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In the fragmented object model, the distinction between <br>client</br> stubs and the server object is no longer present (Fig. 1).",
                "Any <br>client</br> that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "It offers to change the service model on demand from traditional <br>client</br>-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3."
            ],
            "translated_annotated_samples": [
                "EDAS apoya además modelos de servicio flexibles, incluyendo una estructura <br>cliente</br>/servidor completamente centralizada, sistemas basados completamente en pares, y varias configuraciones intermedias que permiten un uso controlado de los recursos de los pares basado en el modelo de objetos fragmentados [5].",
                "Para reducir el esfuerzo de implementación de dichos servicios, se ha desarrollado un marco que respalda la evolución en tiempo de ejecución desde un escenario tradicional de <br>cliente</br>/servidor a un servidor replicado activo con <br>cliente</br>s interactuando en una arquitectura híbrida de pares a pares como la conocida en Napster.",
                "En el modelo de objeto fragmentado, la distinción entre los stubs del <br>cliente</br> y el objeto del servidor ya no está presente (Fig. 1).",
                "Cualquier <br>cliente</br> que desee acceder al objeto fragmentado necesita un fragmento local, que proporciona una interfaz idéntica a la de un stub tradicional.",
                "Ofrece cambiar el modelo de servicio a pedido, desde el tradicional <br>cliente</br>-servidor a un enfoque basado en pares, y todo tipo de etapas intermedias mediante la migración e intercambio de fragmentos."
            ],
            "translated_text": "EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept. de la computadora. A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la computación en malla evoluciona y se aplica a un número creciente de aplicaciones. El entorno para servicios adaptativos descentralizados (EDAS) proporciona una infraestructura tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los recursos. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer. La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Las infraestructuras para la computación en malla tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande. La gestión de recursos es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red. Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también. Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros. El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo. En lugar de establecer una infraestructura para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros. Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un nodo más potente y menos cargado). La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido. Además, un servicio no replicado no es accesible durante la migración. Por lo tanto, la gestión de recursos debe evitar la migración si es posible. Además, se debe proporcionar un concepto de servicio que evite la sobrecarga en primer lugar y, en segundo lugar, evite la indisponibilidad del servicio si la migración no se puede evitar. EDAS [2] tiene como objetivo proporcionar una infraestructura tipo rejilla para servicios de largo plazo accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una infraestructura de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos. Los nodos pueden unirse y abandonar dinámicamente la infraestructura, y todas las tareas de gestión, especialmente la gestión de recursos, son descentralizadas. El entorno se construye sobre nuestra infraestructura middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS). La gestión de recursos se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo, potencialmente infinito. Estos servicios están organizados en proyectos. Cada proyecto tiene un alcance de ejecución distribuido llamado entorno de servicio. Un ambiente así posiblemente abarca múltiples instituciones. Cada institución representa un dominio administrativo que puede respaldar un proyecto con un conjunto fijo de recursos. Nuestro enfoque respalda la gestión adaptativa de recursos de todos los proyectos en el alcance de una institución basada en un algoritmo inspirado en los algoritmos difusivos para el equilibrio de carga descentralizado [4]. No se sabe cómo subdividir óptimamente estos recursos para los servicios, ya que la demanda de recursos de los servicios puede cambiar con el tiempo o incluso fluctuar con frecuencia. Para proporcionar recursos según sea necesario, nuestro enfoque redirige automáticamente de manera equitativa los recursos libres o no necesarios entre las instancias de servicio en todos los proyectos y nodos. El proceso completo del artículo 5 de rededicación es escalable ya que es descentralizado y respeta ciertos límites como los recursos físicamente disponibles de un nodo y la cantidad de recursos dedicados a un proyecto. En los casos en los que no sea posible la rededicación, se inicia la migración del servicio exigente. EDAS apoya además modelos de servicio flexibles, incluyendo una estructura <br>cliente</br>/servidor completamente centralizada, sistemas basados completamente en pares, y varias configuraciones intermedias que permiten un uso controlado de los recursos de los pares basado en el modelo de objetos fragmentados [5]. El objetivo general es proporcionar una arquitectura de servicio genérica que permita implementar la funcionalidad del servicio una vez, y luego, idealmente, ejecutar este servicio con diferentes modelos de servicio y adaptarlo en tiempo de ejecución, escalando así desde una instancia local de un solo usuario hasta un servicio escalable que abarque múltiples dominios. Para reducir el esfuerzo de implementación de dichos servicios, se ha desarrollado un marco que respalda la evolución en tiempo de ejecución desde un escenario tradicional de <br>cliente</br>/servidor a un servidor replicado activo con <br>cliente</br>s interactuando en una arquitectura híbrida de pares a pares como la conocida en Napster. En una infraestructura de red de servicio a largo plazo, la replicación activa tiene varios beneficios: las réplicas pueden unirse y abandonar el grupo de objetos y, por lo tanto, las réplicas pueden ser migradas sin que el servicio esté no disponible. La carga de solicitudes no modificadoras se puede distribuir de manera uniforme entre las réplicas, lo que hace que las situaciones de sobrecarga sean menos probables. Finalmente se puede tolerar cierta cantidad de caídas de nodos. La siguiente sección describe las características utilizadas de AspectIX seguida de una breve descripción de los componentes principales y conceptos de EDAS. La sección 4 explica los conceptos de autoadministración y rededicación en la gestión de recursos adaptativos distribuidos. La sección 5 describe el marco para servicios adaptativos descentralizados. La sección 6 describe el trabajo relacionado y finalmente la Sección 7 concluye el artículo. MIDDLEWARE BÁSICO El entorno de EDAS se basa en el middleware AspectIX. En su núcleo, proporciona un ORB compatible con CORBA y, como tal, soporta sistemas distribuidos heterogéneos. Además, AspectIX soporta el modelo de objetos fragmentado [5] que se utiliza para implementar y proporcionar servicios adaptativos descentralizados. En el modelo de objeto fragmentado, la distinción entre los stubs del <br>cliente</br> y el objeto del servidor ya no está presente (Fig. 1). Desde un punto de vista abstracto, un objeto fragmentado es una unidad con identidad, interfaz, comportamiento y estado únicos, al igual que en el diseño orientado a objetos clásico. La implementación de estas propiedades, sin embargo, no está limitada a una ubicación específica, sino que puede distribuirse arbitrariamente en varios fragmentos. Cualquier <br>cliente</br> que desee acceder al objeto fragmentado necesita un fragmento local, que proporciona una interfaz idéntica a la de un stub tradicional. Sin embargo, la distribución interna y la interacción no solo son transparentes en la interfaz externa del objeto distribuido, sino que incluso pueden cambiar dinámicamente en tiempo de ejecución. Esto permite que el modelo de objeto fragmentado se adapte a las condiciones cambiantes del entorno o a los requisitos de calidad del servicio. Ofrece cambiar el modelo de servicio a pedido, desde el tradicional <br>cliente</br>-servidor a un enfoque basado en pares, y todo tipo de etapas intermedias mediante la migración e intercambio de fragmentos. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "long-term service": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, <br>long-term service</br>s as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
                "Instead an infrastructure for <br>long-term service</br>s has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the resource management has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, <br>long-term service</br>s that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the resource management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The resource management focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of node crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment.",
                "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
                "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
                "Every node provides a set of resources.",
                "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for <br>long-term service</br>s has other requirements than resource management in common grid computing environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
                "For <br>long-term service</br>s this is even harder, and it is likely that the resource demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
                "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
                "Every service has so called local limits that restrict the resource usage in context of the current node.",
                "If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a node.",
                "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
                "Furthermore each node has node limits that restrict the overall usage of certain resources.",
                "A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a node must never exceed the node limit of a resource.",
                "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum resource usage of a project in scope of a home environment.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a home environment supports usually numerous projects.",
                "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
                "As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
                "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node.",
                "If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
                "When all resources of the node are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its global limit.",
                "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a global limit is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
                "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
                "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
                "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no resource aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for resource aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the resource management can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the resource management and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, <br>long-term service</br>s as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "Instead an infrastructure for <br>long-term service</br>s has to place services based on their current demand and their estimated future requirements.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, <br>long-term service</br>s that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for <br>long-term service</br>s has other requirements than resource management in common grid computing environments.",
                "For <br>long-term service</br>s this is even harder, and it is likely that the resource demand frequently changes."
            ],
            "translated_annotated_samples": [
                "Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros.",
                "En lugar de establecer una infraestructura para <br>servicios a largo plazo</br>, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros.",
                "EDAS [2] tiene como objetivo proporcionar una infraestructura tipo rejilla para <br>servicios de largo plazo</br> accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una infraestructura de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos.",
                "La gestión de recursos descentralizada. La gestión de recursos para <br>servicios a largo plazo</br> tiene otros requisitos que la gestión de recursos en entornos comunes de computación en red.",
                "Para <br>servicios a largo plazo</br> esto es aún más difícil, y es probable que la demanda de recursos cambie con frecuencia."
            ],
            "translated_text": "EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept. de la computadora. A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la computación en malla evoluciona y se aplica a un número creciente de aplicaciones. El entorno para servicios adaptativos descentralizados (EDAS) proporciona una infraestructura tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los recursos. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer. La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Las infraestructuras para la computación en malla tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande. La gestión de recursos es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red. Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también. Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros. El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo. En lugar de establecer una infraestructura para <br>servicios a largo plazo</br>, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros. Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un nodo más potente y menos cargado). La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido. Además, un servicio no replicado no es accesible durante la migración. Por lo tanto, la gestión de recursos debe evitar la migración si es posible. Además, se debe proporcionar un concepto de servicio que evite la sobrecarga en primer lugar y, en segundo lugar, evite la indisponibilidad del servicio si la migración no se puede evitar. EDAS [2] tiene como objetivo proporcionar una infraestructura tipo rejilla para <br>servicios de largo plazo</br> accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una infraestructura de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos. Los nodos pueden unirse y abandonar dinámicamente la infraestructura, y todas las tareas de gestión, especialmente la gestión de recursos, son descentralizadas. El entorno se construye sobre nuestra infraestructura middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS). La gestión de recursos se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo, potencialmente infinito. Estos servicios están organizados en proyectos. Cada proyecto tiene un alcance de ejecución distribuido llamado entorno de servicio. Un ambiente así posiblemente abarca múltiples instituciones. Cada institución representa un dominio administrativo que puede respaldar un proyecto con un conjunto fijo de recursos. Nuestro enfoque respalda la gestión adaptativa de recursos de todos los proyectos en el alcance de una institución basada en un algoritmo inspirado en los algoritmos difusivos para el equilibrio de carga descentralizado [4]. No se sabe cómo subdividir óptimamente estos recursos para los servicios, ya que la demanda de recursos de los servicios puede cambiar con el tiempo o incluso fluctuar con frecuencia. Para proporcionar recursos según sea necesario, nuestro enfoque redirige automáticamente de manera equitativa los recursos libres o no necesarios entre las instancias de servicio en todos los proyectos y nodos. El proceso completo del artículo 5 de rededicación es escalable ya que es descentralizado y respeta ciertos límites como los recursos físicamente disponibles de un nodo y la cantidad de recursos dedicados a un proyecto. En los casos en los que no sea posible la rededicación, se inicia la migración del servicio exigente. EDAS apoya además modelos de servicio flexibles, incluyendo una estructura cliente/servidor completamente centralizada, sistemas basados completamente en pares, y varias configuraciones intermedias que permiten un uso controlado de los recursos de los pares basado en el modelo de objetos fragmentados [5]. El objetivo general es proporcionar una arquitectura de servicio genérica que permita implementar la funcionalidad del servicio una vez, y luego, idealmente, ejecutar este servicio con diferentes modelos de servicio y adaptarlo en tiempo de ejecución, escalando así desde una instancia local de un solo usuario hasta un servicio escalable que abarque múltiples dominios. Para reducir el esfuerzo de implementación de dichos servicios, se ha desarrollado un marco que respalda la evolución en tiempo de ejecución desde un escenario tradicional de cliente/servidor a un servidor replicado activo con clientes interactuando en una arquitectura híbrida de pares a pares como la conocida en Napster. En una infraestructura de red de servicio a largo plazo, la replicación activa tiene varios beneficios: las réplicas pueden unirse y abandonar el grupo de objetos y, por lo tanto, las réplicas pueden ser migradas sin que el servicio esté no disponible. La carga de solicitudes no modificadoras se puede distribuir de manera uniforme entre las réplicas, lo que hace que las situaciones de sobrecarga sean menos probables. Finalmente se puede tolerar cierta cantidad de caídas de nodos. La siguiente sección describe las características utilizadas de AspectIX seguida de una breve descripción de los componentes principales y conceptos de EDAS. La sección 4 explica los conceptos de autoadministración y rededicación en la gestión de recursos adaptativos distribuidos. La sección 5 describe el marco para servicios adaptativos descentralizados. La sección 6 describe el trabajo relacionado y finalmente la Sección 7 concluye el artículo. MIDDLEWARE BÁSICO El entorno de EDAS se basa en el middleware AspectIX. En su núcleo, proporciona un ORB compatible con CORBA y, como tal, soporta sistemas distribuidos heterogéneos. Además, AspectIX soporta el modelo de objetos fragmentado [5] que se utiliza para implementar y proporcionar servicios adaptativos descentralizados. En el modelo de objeto fragmentado, la distinción entre los stubs del cliente y el objeto del servidor ya no está presente (Fig. 1). Desde un punto de vista abstracto, un objeto fragmentado es una unidad con identidad, interfaz, comportamiento y estado únicos, al igual que en el diseño orientado a objetos clásico. La implementación de estas propiedades, sin embargo, no está limitada a una ubicación específica, sino que puede distribuirse arbitrariamente en varios fragmentos. Cualquier cliente que desee acceder al objeto fragmentado necesita un fragmento local, que proporciona una interfaz idéntica a la de un stub tradicional. Sin embargo, la distribución interna y la interacción no solo son transparentes en la interfaz externa del objeto distribuido, sino que incluso pueden cambiar dinámicamente en tiempo de ejecución. Esto permite que el modelo de objeto fragmentado se adapte a las condiciones cambiantes del entorno o a los requisitos de calidad del servicio. Ofrece cambiar el modelo de servicio a pedido, desde el tradicional cliente-servidor a un enfoque basado en pares, y todo tipo de etapas intermedias mediante la migración e intercambio de fragmentos. Componentes principales de EDAS Figura 1: Objeto fragmentado en tres nodos EDAS tiene tres componentes principales: Cada nodo que apoya activamente los servicios adaptativos descentralizados proporciona un entorno local. El entorno del hogar básicamente gestiona los recursos de uno o más nodos pertenecientes al mismo dominio administrativo o institución. El entorno de servicio se extiende sobre un conjunto de dominios que respaldan un proyecto específico y depende de servicios básicos de los entornos domésticos correspondientes. El entorno de servicio apoya la ejecución de servicios pertenecientes al mismo proyecto. Finalmente, el servicio adaptativo descentralizado se distribuye dinámicamente dentro del alcance de un entorno de servicio asociado. El entorno del hogar tiene el papel de mediador entre los nodos de una institución y uno o más entornos de servicio, cada uno ejecutando un conjunto de servicios. La Fig. 2 muestra tres dominios, cada uno ejecutando un entorno doméstico que abarca todos los nodos de los respectivos dominios. Cada nodo proporciona un conjunto de recursos. Cada dominio tiene un administrador que puede utilizar ese entorno doméstico para asignar recursos a los entornos de servicio y revocarlos. Además de proporcionar la carga del sistema y todo tipo de información sobre el uso de recursos al entorno de servicio, el entorno doméstico también notifica sobre todos los eventos importantes del sistema, como un apagado o fallo de un nodo. Un entorno de servicio representa un alcance de distribución para uno o más servicios. Por lo general, un entorno de servicio es propiedad de una organización o comunidad y está dedicado a un proyecto. Un gerente de servicios puede iniciar, detener y configurar servicios a través de la interfaz del entorno de servicios y decide qué recursos proporcionados por los entornos domésticos son aceptados. En la mayoría de los casos, un entorno de servicio se extiende sobre más de un dominio administrativo, como se muestra en la Figura 2. Una de las principales tareas del entorno de servicio es apoyar la migración de servicios o componentes de servicio, especialmente entre diferentes entornos de origen. El entorno de servicio toma en cuenta los recursos disponibles, los requisitos de los servicios y las políticas proporcionadas por el gerente de servicio. La migración de componentes de servicio puede ser necesaria por diversas razones, como el apagado de nodos, limitaciones de recursos y el crecimiento o reducción del entorno de servicio. 4. La gestión de recursos descentralizada. La gestión de recursos para <br>servicios a largo plazo</br> tiene otros requisitos que la gestión de recursos en entornos comunes de computación en red. Por ejemplo, incluso en el contexto de los sistemas de red tradicionales, es muy difícil determinar o siquiera estimar los requisitos de recursos de una tarea [6]. Para <br>servicios a largo plazo</br> esto es aún más difícil, y es probable que la demanda de recursos cambie con frecuencia. ",
            "candidates": [],
            "error": [
                [
                    "servicios a largo plazo",
                    "servicios de largo plazo",
                    "servicios a largo plazo",
                    "servicios a largo plazo"
                ]
            ]
        },
        "eda": {
            "translated_key": "I'm sorry, but \"eda\" is not a sentence in English. Could you please provide a sentence for me to translate into Spanish?",
            "is_in_text": false,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
                "Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the resource management has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the resource management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The resource management focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of node crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment.",
                "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
                "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
                "Every node provides a set of resources.",
                "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common grid computing environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
                "For long-term services this is even harder, and it is likely that the resource demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
                "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
                "Every service has so called local limits that restrict the resource usage in context of the current node.",
                "If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a node.",
                "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
                "Furthermore each node has node limits that restrict the overall usage of certain resources.",
                "A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a node must never exceed the node limit of a resource.",
                "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum resource usage of a project in scope of a home environment.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a home environment supports usually numerous projects.",
                "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
                "As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
                "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node.",
                "If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
                "When all resources of the node are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its global limit.",
                "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a global limit is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
                "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
                "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
                "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no resource aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for resource aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the resource management can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the resource management and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "local limit": {
            "translated_key": "límite local",
            "is_in_text": true,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
                "Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the resource management has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the resource management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The resource management focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of node crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment.",
                "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
                "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
                "Every node provides a set of resources.",
                "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common grid computing environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
                "For long-term services this is even harder, and it is likely that the resource demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
                "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
                "Every service has so called local limits that restrict the resource usage in context of the current node.",
                "If a service runs the risk of exceeding such a <br>local limit</br> the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a <br>local limit</br> can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a node.",
                "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
                "Furthermore each node has node limits that restrict the overall usage of certain resources.",
                "A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a node must never exceed the node limit of a resource.",
                "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum resource usage of a project in scope of a home environment.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a home environment supports usually numerous projects.",
                "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
                "As the resource demand of a service changes it might be possible that a service reaches its <br>local limit</br> if the service is under high demand.",
                "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node.",
                "If the service environment has not reached its global limit and the node is not overloaded the dependent <br>local limit</br> of the service should be extended simply by reducing a <br>local limit</br> at another node of the same service environment.",
                "When all resources of the node are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its global limit.",
                "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a global limit is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
                "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
                "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
                "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no resource aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for resource aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the resource management can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the resource management and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [
                "If a service runs the risk of exceeding such a <br>local limit</br> the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a <br>local limit</br> can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "As the resource demand of a service changes it might be possible that a service reaches its <br>local limit</br> if the service is under high demand.",
                "If the service environment has not reached its global limit and the node is not overloaded the dependent <br>local limit</br> of the service should be extended simply by reducing a <br>local limit</br> at another node of the same service environment."
            ],
            "translated_annotated_samples": [
                "Si un servicio corre el riesgo de exceder dicho <br>límite local</br>, el entorno doméstico intenta ampliar los límites o notifica al entorno de servicio responsable si la reasignación no es posible.",
                "Alcanzar un <br>límite local</br> puede ser causado por dos razones: un nodo sobrecargado o un entorno de servicio sobrecargado.",
                "A medida que la demanda de recursos de un servicio cambia, podría ser posible que un servicio alcance su <br>límite local</br> si está bajo una alta demanda.",
                "Si el entorno de servicio no ha alcanzado su límite global y el nodo no está sobrecargado, el <br>límite local</br> dependiente del servicio debería extenderse simplemente reduciendo un <br>límite local</br> en otro nodo del mismo entorno de servicio."
            ],
            "translated_text": "EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept. de la computadora. A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la computación en malla evoluciona y se aplica a un número creciente de aplicaciones. El entorno para servicios adaptativos descentralizados (EDAS) proporciona una infraestructura tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los recursos. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer. La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Las infraestructuras para la computación en malla tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande. La gestión de recursos es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red. Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también. Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros. El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo. En lugar de establecer una infraestructura para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros. Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un nodo más potente y menos cargado). La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido. Además, un servicio no replicado no es accesible durante la migración. Por lo tanto, la gestión de recursos debe evitar la migración si es posible. Además, se debe proporcionar un concepto de servicio que evite la sobrecarga en primer lugar y, en segundo lugar, evite la indisponibilidad del servicio si la migración no se puede evitar. EDAS [2] tiene como objetivo proporcionar una infraestructura tipo rejilla para servicios de largo plazo accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una infraestructura de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos. Los nodos pueden unirse y abandonar dinámicamente la infraestructura, y todas las tareas de gestión, especialmente la gestión de recursos, son descentralizadas. El entorno se construye sobre nuestra infraestructura middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS). La gestión de recursos se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo, potencialmente infinito. Estos servicios están organizados en proyectos. Cada proyecto tiene un alcance de ejecución distribuido llamado entorno de servicio. Un ambiente así posiblemente abarca múltiples instituciones. Cada institución representa un dominio administrativo que puede respaldar un proyecto con un conjunto fijo de recursos. Nuestro enfoque respalda la gestión adaptativa de recursos de todos los proyectos en el alcance de una institución basada en un algoritmo inspirado en los algoritmos difusivos para el equilibrio de carga descentralizado [4]. No se sabe cómo subdividir óptimamente estos recursos para los servicios, ya que la demanda de recursos de los servicios puede cambiar con el tiempo o incluso fluctuar con frecuencia. Para proporcionar recursos según sea necesario, nuestro enfoque redirige automáticamente de manera equitativa los recursos libres o no necesarios entre las instancias de servicio en todos los proyectos y nodos. El proceso completo del artículo 5 de rededicación es escalable ya que es descentralizado y respeta ciertos límites como los recursos físicamente disponibles de un nodo y la cantidad de recursos dedicados a un proyecto. En los casos en los que no sea posible la rededicación, se inicia la migración del servicio exigente. EDAS apoya además modelos de servicio flexibles, incluyendo una estructura cliente/servidor completamente centralizada, sistemas basados completamente en pares, y varias configuraciones intermedias que permiten un uso controlado de los recursos de los pares basado en el modelo de objetos fragmentados [5]. El objetivo general es proporcionar una arquitectura de servicio genérica que permita implementar la funcionalidad del servicio una vez, y luego, idealmente, ejecutar este servicio con diferentes modelos de servicio y adaptarlo en tiempo de ejecución, escalando así desde una instancia local de un solo usuario hasta un servicio escalable que abarque múltiples dominios. Para reducir el esfuerzo de implementación de dichos servicios, se ha desarrollado un marco que respalda la evolución en tiempo de ejecución desde un escenario tradicional de cliente/servidor a un servidor replicado activo con clientes interactuando en una arquitectura híbrida de pares a pares como la conocida en Napster. En una infraestructura de red de servicio a largo plazo, la replicación activa tiene varios beneficios: las réplicas pueden unirse y abandonar el grupo de objetos y, por lo tanto, las réplicas pueden ser migradas sin que el servicio esté no disponible. La carga de solicitudes no modificadoras se puede distribuir de manera uniforme entre las réplicas, lo que hace que las situaciones de sobrecarga sean menos probables. Finalmente se puede tolerar cierta cantidad de caídas de nodos. La siguiente sección describe las características utilizadas de AspectIX seguida de una breve descripción de los componentes principales y conceptos de EDAS. La sección 4 explica los conceptos de autoadministración y rededicación en la gestión de recursos adaptativos distribuidos. La sección 5 describe el marco para servicios adaptativos descentralizados. La sección 6 describe el trabajo relacionado y finalmente la Sección 7 concluye el artículo. MIDDLEWARE BÁSICO El entorno de EDAS se basa en el middleware AspectIX. En su núcleo, proporciona un ORB compatible con CORBA y, como tal, soporta sistemas distribuidos heterogéneos. Además, AspectIX soporta el modelo de objetos fragmentado [5] que se utiliza para implementar y proporcionar servicios adaptativos descentralizados. En el modelo de objeto fragmentado, la distinción entre los stubs del cliente y el objeto del servidor ya no está presente (Fig. 1). Desde un punto de vista abstracto, un objeto fragmentado es una unidad con identidad, interfaz, comportamiento y estado únicos, al igual que en el diseño orientado a objetos clásico. La implementación de estas propiedades, sin embargo, no está limitada a una ubicación específica, sino que puede distribuirse arbitrariamente en varios fragmentos. Cualquier cliente que desee acceder al objeto fragmentado necesita un fragmento local, que proporciona una interfaz idéntica a la de un stub tradicional. Sin embargo, la distribución interna y la interacción no solo son transparentes en la interfaz externa del objeto distribuido, sino que incluso pueden cambiar dinámicamente en tiempo de ejecución. Esto permite que el modelo de objeto fragmentado se adapte a las condiciones cambiantes del entorno o a los requisitos de calidad del servicio. Ofrece cambiar el modelo de servicio a pedido, desde el tradicional cliente-servidor a un enfoque basado en pares, y todo tipo de etapas intermedias mediante la migración e intercambio de fragmentos. Componentes principales de EDAS Figura 1: Objeto fragmentado en tres nodos EDAS tiene tres componentes principales: Cada nodo que apoya activamente los servicios adaptativos descentralizados proporciona un entorno local. El entorno del hogar básicamente gestiona los recursos de uno o más nodos pertenecientes al mismo dominio administrativo o institución. El entorno de servicio se extiende sobre un conjunto de dominios que respaldan un proyecto específico y depende de servicios básicos de los entornos domésticos correspondientes. El entorno de servicio apoya la ejecución de servicios pertenecientes al mismo proyecto. Finalmente, el servicio adaptativo descentralizado se distribuye dinámicamente dentro del alcance de un entorno de servicio asociado. El entorno del hogar tiene el papel de mediador entre los nodos de una institución y uno o más entornos de servicio, cada uno ejecutando un conjunto de servicios. La Fig. 2 muestra tres dominios, cada uno ejecutando un entorno doméstico que abarca todos los nodos de los respectivos dominios. Cada nodo proporciona un conjunto de recursos. Cada dominio tiene un administrador que puede utilizar ese entorno doméstico para asignar recursos a los entornos de servicio y revocarlos. Además de proporcionar la carga del sistema y todo tipo de información sobre el uso de recursos al entorno de servicio, el entorno doméstico también notifica sobre todos los eventos importantes del sistema, como un apagado o fallo de un nodo. Un entorno de servicio representa un alcance de distribución para uno o más servicios. Por lo general, un entorno de servicio es propiedad de una organización o comunidad y está dedicado a un proyecto. Un gerente de servicios puede iniciar, detener y configurar servicios a través de la interfaz del entorno de servicios y decide qué recursos proporcionados por los entornos domésticos son aceptados. En la mayoría de los casos, un entorno de servicio se extiende sobre más de un dominio administrativo, como se muestra en la Figura 2. Una de las principales tareas del entorno de servicio es apoyar la migración de servicios o componentes de servicio, especialmente entre diferentes entornos de origen. El entorno de servicio toma en cuenta los recursos disponibles, los requisitos de los servicios y las políticas proporcionadas por el gerente de servicio. La migración de componentes de servicio puede ser necesaria por diversas razones, como el apagado de nodos, limitaciones de recursos y el crecimiento o reducción del entorno de servicio. 4. La gestión de recursos descentralizada. La gestión de recursos para servicios a largo plazo tiene otros requisitos que la gestión de recursos en entornos comunes de computación en red. Por ejemplo, incluso en el contexto de los sistemas de red tradicionales, es muy difícil determinar o siquiera estimar los requisitos de recursos de una tarea [6]. Para servicios a largo plazo esto es aún más difícil, y es probable que la demanda de recursos cambie con frecuencia. Esto convierte el Artículo 5 Anfitrión F Anfitrión D Anfitrión E Anfitrión A Anfitrión C Servicio Entorno Servicio B Servicio A Entorno Hogar. Entorno del hogar Límite del objeto fragmentado Gerente de servicio Gerente de dominio Gerente de dominio Figura 2: Escenario de EDAS la distribución óptima de servicios sobre un conjunto de nodos en un problema difícil. En general, la migración de servicios es un requisito previo de EDAS, ya que ofrece una solución si la decisión de distribución inicial fue incorrecta (por ejemplo, inicio inicial de un servicio previamente desconocido) o si la demanda de servicios ha cambiado sustancialmente. Pero la migración es costosa, ya que se debe transferir todo el estado de un servicio, posiblemente incluyendo el código del programa. Si el servicio no se replica, estará no disponible durante la migración. Teniendo esto en cuenta, un sistema de gestión de recursos debería ubicar servicios y redistribuir recursos de manera adaptativa entre servicios y nodos según sea necesario para evitar migraciones. Dado que EDAS tiene como objetivo proporcionar una infraestructura tipo rejilla para un gran conjunto de nodos que pueden unirse y abandonar el sistema, todas las tareas de gestión de recursos deben descentralizarse para ser escalables y no deben requerir conocimiento global. La gestión de recursos se puede estructurar en las siguientes tareas diferentes: • Agregar y cambiar los recursos asignados de un entorno de servicio • Colocación automática de servicios al inicio y durante la migración debido a sobrecarga • Mantener todo tipo de límites de recursos, especialmente los límites de entornos de servicio • Compensar la salida y los nodos que se han bloqueado En las siguientes secciones describiremos qué tipo de límites de recursos existen y cómo gestionar los recursos basándonos en estas condiciones básicas. 4.1 Límites de Recursos Nuestro enfoque gestiona los recursos en dos etapas, a nivel de nodo y a nivel de entorno de servicio. A nivel de nodo monitoreamos el uso de todo tipo de recursos físicos como espacio en disco, memoria, CPU y ancho de banda de red, pero también recursos lógicos como archivos abiertos, sockets y hilos. La entidad de monitoreo es un servicio o un componente de servicio en caso de un servicio adaptativo descentralizado. Cada servicio tiene límites locales llamados así que restringen el uso de recursos en el contexto del nodo actual. Si un servicio corre el riesgo de exceder dicho <br>límite local</br>, el entorno doméstico intenta ampliar los límites o notifica al entorno de servicio responsable si la reasignación no es posible. Alcanzar un <br>límite local</br> puede ser causado por dos razones: un nodo sobrecargado o un entorno de servicio sobrecargado. En el primer caso, la migración del servicio podría ser útil, en el segundo caso, la migración a otro dominio administrativo podría ser una opción, o simplemente reducir la demanda de recursos deteniendo el servicio. Por supuesto, podría haber más de un servicio del mismo entorno de servicio en un nodo. Por lo tanto, los recursos asignados de un entorno de servicio en un nodo pueden ser fácilmente calculados sumando todos los límites locales de sus servicios. Además, cada nodo tiene límites que restringen el uso general de ciertos recursos. Un límite de nodo nunca debe exceder los recursos físicos (por ejemplo, espacio en disco) de un nodo y podría ser mucho más pequeño, por ejemplo, para soportar usuarios locales. La suma de todos los límites locales en un nodo nunca debe exceder el límite del nodo de un recurso. Por lo tanto, observar y controlar los límites locales mantendrá los límites del nodo y evitará la sobrecarga. En el nivel institucional, el uso de recursos de un entorno de servicio y sus servicios asociados también está restringido por los llamados límites globales. Estos límites determinan el uso máximo de recursos de un proyecto en el ámbito de un entorno doméstico. La suma de todos los límites locales en todos los nodos de la institución para un proyecto determinado nunca excede su límite global. GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Reasignación de Recursos Adaptativa Comenzamos con una implementación directa para describir el flujo de trabajo principal. Luego proponemos un enfoque para una solución más eficiente y discutimos sus problemas. Si un nuevo proyecto debe ser respaldado por un entorno doméstico, primero es necesario identificar los nodos que ofrecen recursos suficientes no asignados para iniciar un servicio. Esto se puede lograr en una implementación ingenua utilizando un enfoque de inundación como se hace en el protocolo Gnutella, asumiendo que los nodos están conectados en un grafo aleatorio. Estos recursos pueden ser asignados al entorno de servicio del nuevo proyecto, el cual posteriormente puede comenzar a ofrecer servicios en estos nodos. Por supuesto, un entorno hogareño suele apoyar numerosos proyectos. Cada uno de estos proyectos tiene asignaciones de recursos en varios nodos, algunos de ellos ocupados por servicios, otros libres y sin usar. A medida que la demanda de recursos de un servicio cambia, podría ser posible que un servicio alcance su <br>límite local</br> si está bajo una alta demanda. Lo que sucede a continuación depende del uso general de recursos del entorno de servicio y del consumo de recursos en el nodo local. Si el entorno de servicio no ha alcanzado su límite global y el nodo no está sobrecargado, el <br>límite local</br> dependiente del servicio debería extenderse simplemente reduciendo un <br>límite local</br> en otro nodo del mismo entorno de servicio. Cuando todos los recursos del nodo se asignan a otros entornos de servicio, existen dos posibilidades. Todos los recursos son utilizados por los servicios, por lo que debemos migrar un servicio, o los recursos están asignados pero no utilizados. En el último caso reasignaremos recursos y los destinaremos al exigente entorno de servicio. Finalmente, es posible que el entorno de servicio haya alcanzado su límite global. En este caso, el consumo de recursos debe reducirse ya sea migrando el servicio a otro dominio y su entorno de origen dependiente o simplemente limitando el uso de recursos y, si esto no es posible, deteniendo el servicio. A diferencia de la configuración de un nuevo entorno de servicio que no es crítico en cuanto al tiempo y es una tarea menos frecuente, la adaptación de los límites locales ocurre con frecuencia y debe realizarse en el Artículo 5 casi de inmediato. Por lo tanto, no es una opción utilizar búsquedas de difusión para la reafirmación. En cambio, se necesita un enfoque más eficiente con una complejidad limitada. Lo mismo se aplica para detectar si se alcanza un límite global en un entorno de servicio. Actualmente investigamos si esto se puede lograr utilizando un algoritmo difusivo[4] como se utiliza para el equilibrio de carga descentralizado. De esta manera, todos los nodos de un sistema se dividen en grupos que se superponen parcialmente. La unión de todos los grupos logra una cobertura completa. Los miembros del grupo intercambian frecuentemente información de carga y equilibran la carga mediante migración. En nuestro caso, nuestro objetivo no es equilibrar la carga, sino la cantidad de recursos libres disponibles en un entorno de servicio. Cada nodo que respalda un determinado entorno de servicio está conectado al menos a otro nodo que respalda el mismo proyecto. De esta manera siempre se debería saber si un entorno de servicio todavía tiene suficientes recursos y, por lo tanto, si un servicio puede crecer. Todavía quedan cuestiones abiertas, como si los recursos libres equilibrados difusivamente deben estar estrechamente conectados a los recursos reales, comparables a las reservas. En este caso podría haber problemas si un nodo admite varios entornos de servicio que tienen servicios en ejecución en el nodo y se excede un límite de nodo que requeriría la migración del servicio. De hecho, puede ser innecesario ya que los servicios podrían no utilizar todos los recursos asignados, pero el algoritmo difusivo causó la sobrecarga del límite al equilibrar de manera equitativa los recursos libres de todos los entornos de servicio admitidos. Si eliminamos el mapeo entre los recursos gratuitos y los recursos reales de un nodo, podemos evitar estas situaciones. Sin embargo, se vuelve más complicado determinar los recursos libres y no asignados de un entorno doméstico. 4.3 Colocación de Servicios Independientemente del mapeo de recursos libres, la colocación de un servicio es, como ya se ha mencionado, un problema difícil. Distribuir los servicios de manera equitativa en todos los nodos seguramente evitaría la migración en el caso promedio incluso si la demanda de recursos de los servicios cambia. Sin embargo, si la demanda de recursos de los servicios varía considerablemente y la red está congestionada por muchos proyectos, podría suceder que un servicio no pueda ser ubicado porque los recursos disponibles están muy dispersos. Un enfoque diferente sería considerarlo como una variante del problema de empaquetamiento de contenedores que tiene como objetivo empacar elementos en contenedores optimizando el número de contenedores utilizados. En nuestro caso, necesitamos un enfoque en línea ya que los elementos no son conocidos de antemano y tenemos un problema multidimensional debido a que un servicio tiene varios requisitos de recursos. El número de contenedores está limitado ya que tenemos un número finito de nodos en nuestra cuadrícula. Un algoritmo para este problema ha sido propuesto recientemente por Epstein y van Stee en [7]. En el lado negativo, este algoritmo necesita conocer todos los nodos y su uso actual. Dado que la ubicación de un servicio no es un problema crítico en términos de tiempo, nuevamente un enfoque basado en inundaciones podría ofrecer una solución. Para reducir el número de respuestas, solo los nodos que proporcionen recursos suficientes deben responder. También se debe considerar transformar el algoritmo en uno distribuido. Otro problema podría ser que el algoritmo optimiza la ocupación de manera demasiado intensa. Por lo tanto, los cambios en la demanda de servicio pueden provocar nodos sobrecargados y causar migraciones. Creemos que esto se puede prevenir no solo considerando el consumo real de recursos para determinar la demanda de recursos de un servicio, sino teniendo en cuenta la demanda previa. 5. En EDAS, un modelo de servicio descentralizado y adaptable normalmente se corresponde con un servicio tradicional al que acceden los usuarios, como un servidor web, un servidor de mensajería instantánea o un repositorio de código fuente. Un servicio así está representado por un objeto fragmentado. Este objeto se expande o contrae en el alcance abarcado por el entorno de servicio asociado dependiendo de las demandas del servicio y por razones de tolerancia a fallos. Por lo general, cada parte del objeto es móvil y puede ser trasladada si es necesario. Cada servicio tiene al menos dos interfaces: una para tareas de gestión y otro servicio específico para el usuario final. La interfaz de gestión ofrece métodos para iniciar, detener y configurar instancias de servicio. Dado que este conjunto de características requiere un enorme esfuerzo de implementación para hacerlo de nuevo para cada implementación de servicio que apoyamos, respaldamos el desarrollo de servicios adaptativos descentralizados a través de un marco y una versión extendida de IDL en combinación con un compilador especial de IDL [8]. La idea principal es desarrollar un servicio de la manera tradicional cliente/servidor, tal como se hace en CORBA básico. Este servicio puede ser iniciado y ejecutado en la red como un servidor común. Además, debería ser posible migrar el servicio. Esto se puede lograr utilizando un enfoque basado en tipos de valor para describir el estado del servicio como se hace en [9] o utilizando los mecanismos de serialización suministrados por el lenguaje. Como nos gustaría tolerar fallos de nodos y el servicio debería estar disponible durante la migración, apoyamos la replicación activa del servicio. Esto se logra generando stubs especiales del lado del cliente que se comunican con una de las réplicas. Para mantener la conexión entre los clientes y el objeto replicado, utilizamos referencias limitadas en el tiempo [10] que restringen la migración pero hacen que el uso de servicios de ubicación (para hacer frente a referencias obsoletas) sea innecesario. Las réplicas están sincronizadas a través de un marco de comunicación de grupo. La extensión IDL consiste en modificadores adicionales que afectan la generación de código para el lado del cliente y del servidor. Estos se retienen para marcar operaciones no modificativas que permiten respuestas más rápidas y equilibrio de carga de esas solicitudes. Además, se puede marcar los métodos como locales, lo que indica que pueden ser procesados localmente. En este caso, el compilador IDL crea un marcador de posición para la ejecución local. Además de los métodos habituales estáticos, es útil implementar la contribución e interacción del lado del cliente. Por ejemplo, si un cliente falso ofrece un método que resulta en una transferencia de archivos, es posible integrar un protocolo personalizado que reenvíe una solicitud modificada al objeto replicado, el cual no devuelve el archivo como en el caso común, sino URLs que apuntan a clientes que solicitaron previamente el archivo. Ahora el cliente ficticio obtiene los datos de la ubicación ofrecida y responde como si hubieran sido suministrados por el objeto del servidor. Este comportamiento basado en pares, como se conoce en Napster, es transparente para el cliente y puede activarse y desactivarse según las condiciones del entorno, como la carga y la comunidad, según sea necesario. Finalmente proporcionamos otro modificador para marcar operaciones administrativas. Si un método está marcado como administrador, se requiere autenticación. El método de autenticación es adaptable y puede ser mediante una frase de paso, una dirección de internet o cualquier otro esquema de autenticación. Este modificador facilita la creación de métodos de gestión de servicios. Artículo 5 6. Las infraestructuras de cuadrícula como el Globus-Toolkit [11] proporcionan servicios y mecanismos para entornos heterogéneos distribuidos que combinan recursos bajo demanda para resolver tareas que consumen recursos y computacionalmente intensivas. Debido a esta orientación, se centran en diferentes modelos de servicio, no proporcionan soporte para la movilidad de objetos, ni siquiera si apoyan un enfoque de objetos distribuidos en absoluto. Pero lo más importante es que siguen un enfoque diferente de gestión de recursos, ya que se centran en la ejecución paralela de una gran cantidad de tareas cortas y a medio plazo. JavaSymphony [12] y Ibis [13] proporcionan movilidad de objetos pero están limitados al lenguaje de programación Java y se centran en la computación de alto rendimiento orientada a objetos. Los objetos replicados activamente son proporcionados por Jgroup [14] basados en RMI. Encima de este middleware básico se ha implementado una capa de gestión de replicación llamada ARM [15]. JGroup se enfoca en la replicación activa de objetos pero carece de soporte para servicios más flexibles como lo hace EDAS. ARM se puede comparar con EDAS pero no admite la distribución consciente de recursos. Fog [16] y Globe [17] son entornos middleware básicos que admiten el enfoque de objetos fragmentados. Globe considera la replicación y el almacenamiento en caché. Ambos sistemas carecen de soporte para la distribución consciente de los recursos. 7. CONCLUSIÓN Y TRABAJO EN CURSO Basándose en el modelo de objeto fragmentado y la arquitectura del entorno de EDAS, los servicios adaptativos descentralizados pueden ser fácilmente diseñados, implementados y ejecutados. Como se describe, la gestión de recursos se puede descomponer en dos problemas principales que deben resolverse. Controlar y gestionar los límites de recursos, incluido garantizar que los recursos asignados estén disponibles (incluso en el contexto de fallas de nodos) y la colocación autónoma de servicios. Para ambos problemas ofrecemos una solución, un entorno de simulación actualmente implementado verificará su viabilidad. En un próximo paso, la gestión de recursos se integrará en un prototipo de la arquitectura EDAS que ya ha sido implementado. Como se describe, ya tenemos una implementación inicial del marco de trabajo para los servicios adaptativos descentralizados. Este marco debe ser ampliado para interactuar de manera fluida con la gestión de recursos y la arquitectura de EDAS. En un paso final, necesitamos implementar algunos servicios que verifiquen la usabilidad de todo el proyecto EDAS. 8. REFERENCIAS [1] D. Werthimer, S. Bowyer, J. Cobb, D. Gedye, D. Anderson, W. T. Sullivan, III. Un nuevo proyecto SETI importante basado en los datos del proyecto Serendip y 100,000 computadoras personales. En Actas del Quinto Congreso Internacional. Conferencia sobre Bioastronomía, 1997. [2] Hans Reiser, Rüdiger Kapitza, Franz J. Hauck. Servicios Descentralizados y Adaptativos: El Enfoque AspectIX para un Entorno de Red Flexible y Seguro. En Grid Services Engineering and Management (GSEM 2004), Erfurt, Alemania, 2004. Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, y Andreas I. Schmied. Integrando objetos fragmentados en un entorno CORBA. En Proc. de los Net.ObjectDays, 2003. [4] Tiberiu Rotaru y Hans-Heinrich N¨ageli. Equilibrado dinámico de carga mediante difusión en sistemas heterogéneos. I'm sorry, but the sentence \"J.\" does not provide enough context for an accurate translation. Could you please provide more information or a complete sentence for me to translate? Distribución Paralela. Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, y M. Shapiro. Objetos fragmentados para abstracciones distribuidas. [6] Jennifer M. Schopf. Diez acciones cuando se programa en una cuadrícula: el usuario como programador de cuadrícula. páginas 15-23, 2004. [7] Leah Epstein y Rob van Stee. Empaquetado multidimensional en línea óptimo con espacio limitado. En SODA 04: Actas del decimoquinto simposio anual de algoritmos discretos de ACM-SIAM, páginas 214-223, Filadelfia, PA, EE. UU., 2004. Sociedad de Matemáticas Industriales y Aplicadas. [8] Hans P. Reiser, Martin Steckermeier y Franz J. Hauck. IDLflex: un compilador flexible y genérico para IDL de CORBA. En Proc. de los Net.ObjectDays (Erfurt, Alemania, 10-13 de septiembre de 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt y Franz J. Hauck. Migración de objetos independiente de la plataforma en CORBA. En Actas de las Conferencias OTM05 (DOA, Agia Napa, Chipre, 31 de octubre - 04 de noviembre de 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser y Franz J. Hauck. Referencias estables y limitadas en el tiempo en el contexto de entornos que cambian dinámicamente. En MDC05: Actas de la 25ª Conferencia Internacional de IEEE. Conferencia sobre Sistemas de Computación Distribuida - Talleres (Talleres ICDCS 2005), 2005. [11] Ian Foster, Carl Kesselman y Steven Tuecke. La anatomía de la red: Permitiendo organizaciones virtuales escalables. Notas de conferencia en Ciencias de la Computación, 2150, 2001. [12] Thomas Fahringer y Alexandru Jugravu. Javasymphony: nuevas directivas para controlar y sincronizar la localidad, el paralelismo y el equilibrio de carga para la computación en clúster y en grid. En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 8-17, Nueva York, NY, EE. UU., 2002. ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann y Henri E. Bal. Ibis: un entorno de programación en malla eficiente basado en Java. En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 18-27, Nueva York, NY, EE. UU., 2002. ACM Press. [14] Alberto Montresor, Renzo Davoli y Ozalp Babaoglu. Middleware para servicios de red confiables en sistemas distribuidos particionables. SIGOPS Oper. would be translated to \"Operaciones de SIGOPS\" in Spanish. This is not a complete sentence. Please provide more context or the full sentence you would like me to translate. Rev., 35(1):73-96, 2001. [15] H. Meling y B. Helvik. Arm: Gestión autónoma de replicación en jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul y Marc Shapiro. Objetos fragmentados para abstracciones distribuidas. En Lecturas en Sistemas de Computación Distribuida. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum y Wiebren de Jonge. Un modelo de objetos para sistemas distribuidos flexibles. En Actas de la 1ra Conferencia Anual de ASCI, páginas 69-78, 1995. Artículo 5 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "global limit": {
            "translated_key": "límite global",
            "is_in_text": true,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
                "Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the resource management has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the resource management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The resource management focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of node crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment.",
                "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
                "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
                "Every node provides a set of resources.",
                "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common grid computing environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
                "For long-term services this is even harder, and it is likely that the resource demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
                "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
                "Every service has so called local limits that restrict the resource usage in context of the current node.",
                "If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a node.",
                "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
                "Furthermore each node has node limits that restrict the overall usage of certain resources.",
                "A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a node must never exceed the node limit of a resource.",
                "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum resource usage of a project in scope of a home environment.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its <br>global limit</br>.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a home environment supports usually numerous projects.",
                "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
                "As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
                "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node.",
                "If the service environment has not reached its <br>global limit</br> and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
                "When all resources of the node are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its <br>global limit</br>.",
                "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a <br>global limit</br> is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
                "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
                "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
                "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no resource aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for resource aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the resource management can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the resource management and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its <br>global limit</br>.",
                "If the service environment has not reached its <br>global limit</br> and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
                "Finally the service environment might have reached its <br>global limit</br>.",
                "The same applies for detecting if a <br>global limit</br> is reached by a service environment."
            ],
            "translated_annotated_samples": [
                "La suma de todos los límites locales en todos los nodos de la institución para un proyecto determinado nunca excede su <br>límite global</br>.",
                "Si el entorno de servicio no ha alcanzado su <br>límite global</br> y el nodo no está sobrecargado, el límite local dependiente del servicio debería extenderse simplemente reduciendo un límite local en otro nodo del mismo entorno de servicio.",
                "Finalmente, es posible que el entorno de servicio haya alcanzado su <br>límite global</br>.",
                "Lo mismo se aplica para detectar si se alcanza un <br>límite global</br> en un entorno de servicio."
            ],
            "translated_text": "EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept. de la computadora. A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la computación en malla evoluciona y se aplica a un número creciente de aplicaciones. El entorno para servicios adaptativos descentralizados (EDAS) proporciona una infraestructura tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los recursos. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer. La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Las infraestructuras para la computación en malla tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande. La gestión de recursos es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red. Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también. Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros. El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo. En lugar de establecer una infraestructura para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros. Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un nodo más potente y menos cargado). La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido. Además, un servicio no replicado no es accesible durante la migración. Por lo tanto, la gestión de recursos debe evitar la migración si es posible. Además, se debe proporcionar un concepto de servicio que evite la sobrecarga en primer lugar y, en segundo lugar, evite la indisponibilidad del servicio si la migración no se puede evitar. EDAS [2] tiene como objetivo proporcionar una infraestructura tipo rejilla para servicios de largo plazo accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una infraestructura de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos. Los nodos pueden unirse y abandonar dinámicamente la infraestructura, y todas las tareas de gestión, especialmente la gestión de recursos, son descentralizadas. El entorno se construye sobre nuestra infraestructura middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS). La gestión de recursos se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo, potencialmente infinito. Estos servicios están organizados en proyectos. Cada proyecto tiene un alcance de ejecución distribuido llamado entorno de servicio. Un ambiente así posiblemente abarca múltiples instituciones. Cada institución representa un dominio administrativo que puede respaldar un proyecto con un conjunto fijo de recursos. Nuestro enfoque respalda la gestión adaptativa de recursos de todos los proyectos en el alcance de una institución basada en un algoritmo inspirado en los algoritmos difusivos para el equilibrio de carga descentralizado [4]. No se sabe cómo subdividir óptimamente estos recursos para los servicios, ya que la demanda de recursos de los servicios puede cambiar con el tiempo o incluso fluctuar con frecuencia. Para proporcionar recursos según sea necesario, nuestro enfoque redirige automáticamente de manera equitativa los recursos libres o no necesarios entre las instancias de servicio en todos los proyectos y nodos. El proceso completo del artículo 5 de rededicación es escalable ya que es descentralizado y respeta ciertos límites como los recursos físicamente disponibles de un nodo y la cantidad de recursos dedicados a un proyecto. En los casos en los que no sea posible la rededicación, se inicia la migración del servicio exigente. EDAS apoya además modelos de servicio flexibles, incluyendo una estructura cliente/servidor completamente centralizada, sistemas basados completamente en pares, y varias configuraciones intermedias que permiten un uso controlado de los recursos de los pares basado en el modelo de objetos fragmentados [5]. El objetivo general es proporcionar una arquitectura de servicio genérica que permita implementar la funcionalidad del servicio una vez, y luego, idealmente, ejecutar este servicio con diferentes modelos de servicio y adaptarlo en tiempo de ejecución, escalando así desde una instancia local de un solo usuario hasta un servicio escalable que abarque múltiples dominios. Para reducir el esfuerzo de implementación de dichos servicios, se ha desarrollado un marco que respalda la evolución en tiempo de ejecución desde un escenario tradicional de cliente/servidor a un servidor replicado activo con clientes interactuando en una arquitectura híbrida de pares a pares como la conocida en Napster. En una infraestructura de red de servicio a largo plazo, la replicación activa tiene varios beneficios: las réplicas pueden unirse y abandonar el grupo de objetos y, por lo tanto, las réplicas pueden ser migradas sin que el servicio esté no disponible. La carga de solicitudes no modificadoras se puede distribuir de manera uniforme entre las réplicas, lo que hace que las situaciones de sobrecarga sean menos probables. Finalmente se puede tolerar cierta cantidad de caídas de nodos. La siguiente sección describe las características utilizadas de AspectIX seguida de una breve descripción de los componentes principales y conceptos de EDAS. La sección 4 explica los conceptos de autoadministración y rededicación en la gestión de recursos adaptativos distribuidos. La sección 5 describe el marco para servicios adaptativos descentralizados. La sección 6 describe el trabajo relacionado y finalmente la Sección 7 concluye el artículo. MIDDLEWARE BÁSICO El entorno de EDAS se basa en el middleware AspectIX. En su núcleo, proporciona un ORB compatible con CORBA y, como tal, soporta sistemas distribuidos heterogéneos. Además, AspectIX soporta el modelo de objetos fragmentado [5] que se utiliza para implementar y proporcionar servicios adaptativos descentralizados. En el modelo de objeto fragmentado, la distinción entre los stubs del cliente y el objeto del servidor ya no está presente (Fig. 1). Desde un punto de vista abstracto, un objeto fragmentado es una unidad con identidad, interfaz, comportamiento y estado únicos, al igual que en el diseño orientado a objetos clásico. La implementación de estas propiedades, sin embargo, no está limitada a una ubicación específica, sino que puede distribuirse arbitrariamente en varios fragmentos. Cualquier cliente que desee acceder al objeto fragmentado necesita un fragmento local, que proporciona una interfaz idéntica a la de un stub tradicional. Sin embargo, la distribución interna y la interacción no solo son transparentes en la interfaz externa del objeto distribuido, sino que incluso pueden cambiar dinámicamente en tiempo de ejecución. Esto permite que el modelo de objeto fragmentado se adapte a las condiciones cambiantes del entorno o a los requisitos de calidad del servicio. Ofrece cambiar el modelo de servicio a pedido, desde el tradicional cliente-servidor a un enfoque basado en pares, y todo tipo de etapas intermedias mediante la migración e intercambio de fragmentos. Componentes principales de EDAS Figura 1: Objeto fragmentado en tres nodos EDAS tiene tres componentes principales: Cada nodo que apoya activamente los servicios adaptativos descentralizados proporciona un entorno local. El entorno del hogar básicamente gestiona los recursos de uno o más nodos pertenecientes al mismo dominio administrativo o institución. El entorno de servicio se extiende sobre un conjunto de dominios que respaldan un proyecto específico y depende de servicios básicos de los entornos domésticos correspondientes. El entorno de servicio apoya la ejecución de servicios pertenecientes al mismo proyecto. Finalmente, el servicio adaptativo descentralizado se distribuye dinámicamente dentro del alcance de un entorno de servicio asociado. El entorno del hogar tiene el papel de mediador entre los nodos de una institución y uno o más entornos de servicio, cada uno ejecutando un conjunto de servicios. La Fig. 2 muestra tres dominios, cada uno ejecutando un entorno doméstico que abarca todos los nodos de los respectivos dominios. Cada nodo proporciona un conjunto de recursos. Cada dominio tiene un administrador que puede utilizar ese entorno doméstico para asignar recursos a los entornos de servicio y revocarlos. Además de proporcionar la carga del sistema y todo tipo de información sobre el uso de recursos al entorno de servicio, el entorno doméstico también notifica sobre todos los eventos importantes del sistema, como un apagado o fallo de un nodo. Un entorno de servicio representa un alcance de distribución para uno o más servicios. Por lo general, un entorno de servicio es propiedad de una organización o comunidad y está dedicado a un proyecto. Un gerente de servicios puede iniciar, detener y configurar servicios a través de la interfaz del entorno de servicios y decide qué recursos proporcionados por los entornos domésticos son aceptados. En la mayoría de los casos, un entorno de servicio se extiende sobre más de un dominio administrativo, como se muestra en la Figura 2. Una de las principales tareas del entorno de servicio es apoyar la migración de servicios o componentes de servicio, especialmente entre diferentes entornos de origen. El entorno de servicio toma en cuenta los recursos disponibles, los requisitos de los servicios y las políticas proporcionadas por el gerente de servicio. La migración de componentes de servicio puede ser necesaria por diversas razones, como el apagado de nodos, limitaciones de recursos y el crecimiento o reducción del entorno de servicio. 4. La gestión de recursos descentralizada. La gestión de recursos para servicios a largo plazo tiene otros requisitos que la gestión de recursos en entornos comunes de computación en red. Por ejemplo, incluso en el contexto de los sistemas de red tradicionales, es muy difícil determinar o siquiera estimar los requisitos de recursos de una tarea [6]. Para servicios a largo plazo esto es aún más difícil, y es probable que la demanda de recursos cambie con frecuencia. Esto convierte el Artículo 5 Anfitrión F Anfitrión D Anfitrión E Anfitrión A Anfitrión C Servicio Entorno Servicio B Servicio A Entorno Hogar. Entorno del hogar Límite del objeto fragmentado Gerente de servicio Gerente de dominio Gerente de dominio Figura 2: Escenario de EDAS la distribución óptima de servicios sobre un conjunto de nodos en un problema difícil. En general, la migración de servicios es un requisito previo de EDAS, ya que ofrece una solución si la decisión de distribución inicial fue incorrecta (por ejemplo, inicio inicial de un servicio previamente desconocido) o si la demanda de servicios ha cambiado sustancialmente. Pero la migración es costosa, ya que se debe transferir todo el estado de un servicio, posiblemente incluyendo el código del programa. Si el servicio no se replica, estará no disponible durante la migración. Teniendo esto en cuenta, un sistema de gestión de recursos debería ubicar servicios y redistribuir recursos de manera adaptativa entre servicios y nodos según sea necesario para evitar migraciones. Dado que EDAS tiene como objetivo proporcionar una infraestructura tipo rejilla para un gran conjunto de nodos que pueden unirse y abandonar el sistema, todas las tareas de gestión de recursos deben descentralizarse para ser escalables y no deben requerir conocimiento global. La gestión de recursos se puede estructurar en las siguientes tareas diferentes: • Agregar y cambiar los recursos asignados de un entorno de servicio • Colocación automática de servicios al inicio y durante la migración debido a sobrecarga • Mantener todo tipo de límites de recursos, especialmente los límites de entornos de servicio • Compensar la salida y los nodos que se han bloqueado En las siguientes secciones describiremos qué tipo de límites de recursos existen y cómo gestionar los recursos basándonos en estas condiciones básicas. 4.1 Límites de Recursos Nuestro enfoque gestiona los recursos en dos etapas, a nivel de nodo y a nivel de entorno de servicio. A nivel de nodo monitoreamos el uso de todo tipo de recursos físicos como espacio en disco, memoria, CPU y ancho de banda de red, pero también recursos lógicos como archivos abiertos, sockets y hilos. La entidad de monitoreo es un servicio o un componente de servicio en caso de un servicio adaptativo descentralizado. Cada servicio tiene límites locales llamados así que restringen el uso de recursos en el contexto del nodo actual. Si un servicio corre el riesgo de exceder dicho límite local, el entorno doméstico intenta ampliar los límites o notifica al entorno de servicio responsable si la reasignación no es posible. Alcanzar un límite local puede ser causado por dos razones: un nodo sobrecargado o un entorno de servicio sobrecargado. En el primer caso, la migración del servicio podría ser útil, en el segundo caso, la migración a otro dominio administrativo podría ser una opción, o simplemente reducir la demanda de recursos deteniendo el servicio. Por supuesto, podría haber más de un servicio del mismo entorno de servicio en un nodo. Por lo tanto, los recursos asignados de un entorno de servicio en un nodo pueden ser fácilmente calculados sumando todos los límites locales de sus servicios. Además, cada nodo tiene límites que restringen el uso general de ciertos recursos. Un límite de nodo nunca debe exceder los recursos físicos (por ejemplo, espacio en disco) de un nodo y podría ser mucho más pequeño, por ejemplo, para soportar usuarios locales. La suma de todos los límites locales en un nodo nunca debe exceder el límite del nodo de un recurso. Por lo tanto, observar y controlar los límites locales mantendrá los límites del nodo y evitará la sobrecarga. En el nivel institucional, el uso de recursos de un entorno de servicio y sus servicios asociados también está restringido por los llamados límites globales. Estos límites determinan el uso máximo de recursos de un proyecto en el ámbito de un entorno doméstico. La suma de todos los límites locales en todos los nodos de la institución para un proyecto determinado nunca excede su <br>límite global</br>. GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Reasignación de Recursos Adaptativa Comenzamos con una implementación directa para describir el flujo de trabajo principal. Luego proponemos un enfoque para una solución más eficiente y discutimos sus problemas. Si un nuevo proyecto debe ser respaldado por un entorno doméstico, primero es necesario identificar los nodos que ofrecen recursos suficientes no asignados para iniciar un servicio. Esto se puede lograr en una implementación ingenua utilizando un enfoque de inundación como se hace en el protocolo Gnutella, asumiendo que los nodos están conectados en un grafo aleatorio. Estos recursos pueden ser asignados al entorno de servicio del nuevo proyecto, el cual posteriormente puede comenzar a ofrecer servicios en estos nodos. Por supuesto, un entorno hogareño suele apoyar numerosos proyectos. Cada uno de estos proyectos tiene asignaciones de recursos en varios nodos, algunos de ellos ocupados por servicios, otros libres y sin usar. A medida que la demanda de recursos de un servicio cambia, podría ser posible que un servicio alcance su límite local si está bajo una alta demanda. Lo que sucede a continuación depende del uso general de recursos del entorno de servicio y del consumo de recursos en el nodo local. Si el entorno de servicio no ha alcanzado su <br>límite global</br> y el nodo no está sobrecargado, el límite local dependiente del servicio debería extenderse simplemente reduciendo un límite local en otro nodo del mismo entorno de servicio. Cuando todos los recursos del nodo se asignan a otros entornos de servicio, existen dos posibilidades. Todos los recursos son utilizados por los servicios, por lo que debemos migrar un servicio, o los recursos están asignados pero no utilizados. En el último caso reasignaremos recursos y los destinaremos al exigente entorno de servicio. Finalmente, es posible que el entorno de servicio haya alcanzado su <br>límite global</br>. En este caso, el consumo de recursos debe reducirse ya sea migrando el servicio a otro dominio y su entorno de origen dependiente o simplemente limitando el uso de recursos y, si esto no es posible, deteniendo el servicio. A diferencia de la configuración de un nuevo entorno de servicio que no es crítico en cuanto al tiempo y es una tarea menos frecuente, la adaptación de los límites locales ocurre con frecuencia y debe realizarse en el Artículo 5 casi de inmediato. Por lo tanto, no es una opción utilizar búsquedas de difusión para la reafirmación. En cambio, se necesita un enfoque más eficiente con una complejidad limitada. Lo mismo se aplica para detectar si se alcanza un <br>límite global</br> en un entorno de servicio. Actualmente investigamos si esto se puede lograr utilizando un algoritmo difusivo[4] como se utiliza para el equilibrio de carga descentralizado. De esta manera, todos los nodos de un sistema se dividen en grupos que se superponen parcialmente. La unión de todos los grupos logra una cobertura completa. Los miembros del grupo intercambian frecuentemente información de carga y equilibran la carga mediante migración. En nuestro caso, nuestro objetivo no es equilibrar la carga, sino la cantidad de recursos libres disponibles en un entorno de servicio. Cada nodo que respalda un determinado entorno de servicio está conectado al menos a otro nodo que respalda el mismo proyecto. De esta manera siempre se debería saber si un entorno de servicio todavía tiene suficientes recursos y, por lo tanto, si un servicio puede crecer. Todavía quedan cuestiones abiertas, como si los recursos libres equilibrados difusivamente deben estar estrechamente conectados a los recursos reales, comparables a las reservas. En este caso podría haber problemas si un nodo admite varios entornos de servicio que tienen servicios en ejecución en el nodo y se excede un límite de nodo que requeriría la migración del servicio. De hecho, puede ser innecesario ya que los servicios podrían no utilizar todos los recursos asignados, pero el algoritmo difusivo causó la sobrecarga del límite al equilibrar de manera equitativa los recursos libres de todos los entornos de servicio admitidos. Si eliminamos el mapeo entre los recursos gratuitos y los recursos reales de un nodo, podemos evitar estas situaciones. Sin embargo, se vuelve más complicado determinar los recursos libres y no asignados de un entorno doméstico. 4.3 Colocación de Servicios Independientemente del mapeo de recursos libres, la colocación de un servicio es, como ya se ha mencionado, un problema difícil. Distribuir los servicios de manera equitativa en todos los nodos seguramente evitaría la migración en el caso promedio incluso si la demanda de recursos de los servicios cambia. Sin embargo, si la demanda de recursos de los servicios varía considerablemente y la red está congestionada por muchos proyectos, podría suceder que un servicio no pueda ser ubicado porque los recursos disponibles están muy dispersos. Un enfoque diferente sería considerarlo como una variante del problema de empaquetamiento de contenedores que tiene como objetivo empacar elementos en contenedores optimizando el número de contenedores utilizados. En nuestro caso, necesitamos un enfoque en línea ya que los elementos no son conocidos de antemano y tenemos un problema multidimensional debido a que un servicio tiene varios requisitos de recursos. El número de contenedores está limitado ya que tenemos un número finito de nodos en nuestra cuadrícula. Un algoritmo para este problema ha sido propuesto recientemente por Epstein y van Stee en [7]. En el lado negativo, este algoritmo necesita conocer todos los nodos y su uso actual. Dado que la ubicación de un servicio no es un problema crítico en términos de tiempo, nuevamente un enfoque basado en inundaciones podría ofrecer una solución. Para reducir el número de respuestas, solo los nodos que proporcionen recursos suficientes deben responder. También se debe considerar transformar el algoritmo en uno distribuido. Otro problema podría ser que el algoritmo optimiza la ocupación de manera demasiado intensa. Por lo tanto, los cambios en la demanda de servicio pueden provocar nodos sobrecargados y causar migraciones. Creemos que esto se puede prevenir no solo considerando el consumo real de recursos para determinar la demanda de recursos de un servicio, sino teniendo en cuenta la demanda previa. 5. En EDAS, un modelo de servicio descentralizado y adaptable normalmente se corresponde con un servicio tradicional al que acceden los usuarios, como un servidor web, un servidor de mensajería instantánea o un repositorio de código fuente. Un servicio así está representado por un objeto fragmentado. Este objeto se expande o contrae en el alcance abarcado por el entorno de servicio asociado dependiendo de las demandas del servicio y por razones de tolerancia a fallos. Por lo general, cada parte del objeto es móvil y puede ser trasladada si es necesario. Cada servicio tiene al menos dos interfaces: una para tareas de gestión y otro servicio específico para el usuario final. La interfaz de gestión ofrece métodos para iniciar, detener y configurar instancias de servicio. Dado que este conjunto de características requiere un enorme esfuerzo de implementación para hacerlo de nuevo para cada implementación de servicio que apoyamos, respaldamos el desarrollo de servicios adaptativos descentralizados a través de un marco y una versión extendida de IDL en combinación con un compilador especial de IDL [8]. La idea principal es desarrollar un servicio de la manera tradicional cliente/servidor, tal como se hace en CORBA básico. Este servicio puede ser iniciado y ejecutado en la red como un servidor común. Además, debería ser posible migrar el servicio. Esto se puede lograr utilizando un enfoque basado en tipos de valor para describir el estado del servicio como se hace en [9] o utilizando los mecanismos de serialización suministrados por el lenguaje. Como nos gustaría tolerar fallos de nodos y el servicio debería estar disponible durante la migración, apoyamos la replicación activa del servicio. Esto se logra generando stubs especiales del lado del cliente que se comunican con una de las réplicas. Para mantener la conexión entre los clientes y el objeto replicado, utilizamos referencias limitadas en el tiempo [10] que restringen la migración pero hacen que el uso de servicios de ubicación (para hacer frente a referencias obsoletas) sea innecesario. Las réplicas están sincronizadas a través de un marco de comunicación de grupo. La extensión IDL consiste en modificadores adicionales que afectan la generación de código para el lado del cliente y del servidor. Estos se retienen para marcar operaciones no modificativas que permiten respuestas más rápidas y equilibrio de carga de esas solicitudes. Además, se puede marcar los métodos como locales, lo que indica que pueden ser procesados localmente. En este caso, el compilador IDL crea un marcador de posición para la ejecución local. Además de los métodos habituales estáticos, es útil implementar la contribución e interacción del lado del cliente. Por ejemplo, si un cliente falso ofrece un método que resulta en una transferencia de archivos, es posible integrar un protocolo personalizado que reenvíe una solicitud modificada al objeto replicado, el cual no devuelve el archivo como en el caso común, sino URLs que apuntan a clientes que solicitaron previamente el archivo. Ahora el cliente ficticio obtiene los datos de la ubicación ofrecida y responde como si hubieran sido suministrados por el objeto del servidor. Este comportamiento basado en pares, como se conoce en Napster, es transparente para el cliente y puede activarse y desactivarse según las condiciones del entorno, como la carga y la comunidad, según sea necesario. Finalmente proporcionamos otro modificador para marcar operaciones administrativas. Si un método está marcado como administrador, se requiere autenticación. El método de autenticación es adaptable y puede ser mediante una frase de paso, una dirección de internet o cualquier otro esquema de autenticación. Este modificador facilita la creación de métodos de gestión de servicios. Artículo 5 6. Las infraestructuras de cuadrícula como el Globus-Toolkit [11] proporcionan servicios y mecanismos para entornos heterogéneos distribuidos que combinan recursos bajo demanda para resolver tareas que consumen recursos y computacionalmente intensivas. Debido a esta orientación, se centran en diferentes modelos de servicio, no proporcionan soporte para la movilidad de objetos, ni siquiera si apoyan un enfoque de objetos distribuidos en absoluto. Pero lo más importante es que siguen un enfoque diferente de gestión de recursos, ya que se centran en la ejecución paralela de una gran cantidad de tareas cortas y a medio plazo. JavaSymphony [12] y Ibis [13] proporcionan movilidad de objetos pero están limitados al lenguaje de programación Java y se centran en la computación de alto rendimiento orientada a objetos. Los objetos replicados activamente son proporcionados por Jgroup [14] basados en RMI. Encima de este middleware básico se ha implementado una capa de gestión de replicación llamada ARM [15]. JGroup se enfoca en la replicación activa de objetos pero carece de soporte para servicios más flexibles como lo hace EDAS. ARM se puede comparar con EDAS pero no admite la distribución consciente de recursos. Fog [16] y Globe [17] son entornos middleware básicos que admiten el enfoque de objetos fragmentados. Globe considera la replicación y el almacenamiento en caché. Ambos sistemas carecen de soporte para la distribución consciente de los recursos. 7. CONCLUSIÓN Y TRABAJO EN CURSO Basándose en el modelo de objeto fragmentado y la arquitectura del entorno de EDAS, los servicios adaptativos descentralizados pueden ser fácilmente diseñados, implementados y ejecutados. Como se describe, la gestión de recursos se puede descomponer en dos problemas principales que deben resolverse. Controlar y gestionar los límites de recursos, incluido garantizar que los recursos asignados estén disponibles (incluso en el contexto de fallas de nodos) y la colocación autónoma de servicios. Para ambos problemas ofrecemos una solución, un entorno de simulación actualmente implementado verificará su viabilidad. En un próximo paso, la gestión de recursos se integrará en un prototipo de la arquitectura EDAS que ya ha sido implementado. Como se describe, ya tenemos una implementación inicial del marco de trabajo para los servicios adaptativos descentralizados. Este marco debe ser ampliado para interactuar de manera fluida con la gestión de recursos y la arquitectura de EDAS. En un paso final, necesitamos implementar algunos servicios que verifiquen la usabilidad de todo el proyecto EDAS. 8. REFERENCIAS [1] D. Werthimer, S. Bowyer, J. Cobb, D. Gedye, D. Anderson, W. T. Sullivan, III. Un nuevo proyecto SETI importante basado en los datos del proyecto Serendip y 100,000 computadoras personales. En Actas del Quinto Congreso Internacional. Conferencia sobre Bioastronomía, 1997. [2] Hans Reiser, Rüdiger Kapitza, Franz J. Hauck. Servicios Descentralizados y Adaptativos: El Enfoque AspectIX para un Entorno de Red Flexible y Seguro. En Grid Services Engineering and Management (GSEM 2004), Erfurt, Alemania, 2004. Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, y Andreas I. Schmied. Integrando objetos fragmentados en un entorno CORBA. En Proc. de los Net.ObjectDays, 2003. [4] Tiberiu Rotaru y Hans-Heinrich N¨ageli. Equilibrado dinámico de carga mediante difusión en sistemas heterogéneos. I'm sorry, but the sentence \"J.\" does not provide enough context for an accurate translation. Could you please provide more information or a complete sentence for me to translate? Distribución Paralela. Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, y M. Shapiro. Objetos fragmentados para abstracciones distribuidas. [6] Jennifer M. Schopf. Diez acciones cuando se programa en una cuadrícula: el usuario como programador de cuadrícula. páginas 15-23, 2004. [7] Leah Epstein y Rob van Stee. Empaquetado multidimensional en línea óptimo con espacio limitado. En SODA 04: Actas del decimoquinto simposio anual de algoritmos discretos de ACM-SIAM, páginas 214-223, Filadelfia, PA, EE. UU., 2004. Sociedad de Matemáticas Industriales y Aplicadas. [8] Hans P. Reiser, Martin Steckermeier y Franz J. Hauck. IDLflex: un compilador flexible y genérico para IDL de CORBA. En Proc. de los Net.ObjectDays (Erfurt, Alemania, 10-13 de septiembre de 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt y Franz J. Hauck. Migración de objetos independiente de la plataforma en CORBA. En Actas de las Conferencias OTM05 (DOA, Agia Napa, Chipre, 31 de octubre - 04 de noviembre de 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser y Franz J. Hauck. Referencias estables y limitadas en el tiempo en el contexto de entornos que cambian dinámicamente. En MDC05: Actas de la 25ª Conferencia Internacional de IEEE. Conferencia sobre Sistemas de Computación Distribuida - Talleres (Talleres ICDCS 2005), 2005. [11] Ian Foster, Carl Kesselman y Steven Tuecke. La anatomía de la red: Permitiendo organizaciones virtuales escalables. Notas de conferencia en Ciencias de la Computación, 2150, 2001. [12] Thomas Fahringer y Alexandru Jugravu. Javasymphony: nuevas directivas para controlar y sincronizar la localidad, el paralelismo y el equilibrio de carga para la computación en clúster y en grid. En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 8-17, Nueva York, NY, EE. UU., 2002. ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann y Henri E. Bal. Ibis: un entorno de programación en malla eficiente basado en Java. En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 18-27, Nueva York, NY, EE. UU., 2002. ACM Press. [14] Alberto Montresor, Renzo Davoli y Ozalp Babaoglu. Middleware para servicios de red confiables en sistemas distribuidos particionables. SIGOPS Oper. would be translated to \"Operaciones de SIGOPS\" in Spanish. This is not a complete sentence. Please provide more context or the full sentence you would like me to translate. Rev., 35(1):73-96, 2001. [15] H. Meling y B. Helvik. Arm: Gestión autónoma de replicación en jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul y Marc Shapiro. Objetos fragmentados para abstracciones distribuidas. En Lecturas en Sistemas de Computación Distribuida. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum y Wiebren de Jonge. Un modelo de objetos para sistemas distribuidos flexibles. En Actas de la 1ra Conferencia Anual de ASCI, páginas 69-78, 1995. Artículo 5 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "resource": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and <br>resource</br>-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic <br>resource</br> management allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "<br>resource</br> management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of <br>resource</br> discovery, system selection and job execution fails for services that change their <br>resource</br> demand over time due to interactive user access and run for a long period of time.",
                "Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the <br>resource</br> management has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the <br>resource</br> management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The <br>resource</br> management focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive <br>resource</br> management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the <br>resource</br> demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of node crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive <br>resource</br> management.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment.",
                "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
                "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
                "Every node provides a set of resources.",
                "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of <br>resource</br>-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like node shutdown, <br>resource</br> constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT <br>resource</br> management for long-term services has other requirements than <br>resource</br> management in common grid computing environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the <br>resource</br> requirements of a task [6].",
                "For long-term services this is even harder, and it is likely that the <br>resource</br> demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a <br>resource</br> management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all <br>resource</br> management tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The <br>resource</br> management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of <br>resource</br> limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
                "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
                "Every service has so called local limits that restrict the <br>resource</br> usage in context of the current node.",
                "If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing <br>resource</br> demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a node.",
                "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
                "Furthermore each node has node limits that restrict the overall usage of certain resources.",
                "A node limit must never exceed the physical <br>resource</br> (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a node must never exceed the node limit of a <br>resource</br>.",
                "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the <br>resource</br> usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum <br>resource</br> usage of a project in scope of a home environment.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive <br>resource</br> Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a home environment supports usually numerous projects.",
                "Each of these projects has <br>resource</br> shares on various nodes, some of them occupied by services, other free and unused.",
                "As the <br>resource</br> demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
                "What happens next depends on the overall <br>resource</br> usage of the service environment and the <br>resource</br> consumption at the local node.",
                "If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
                "When all resources of the node are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its global limit.",
                "In this case the <br>resource</br> consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding <br>resource</br> usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a global limit is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if <br>resource</br> demand of services changes.",
                "However if the <br>resource</br> demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various <br>resource</br> requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual <br>resource</br> consumption to determine the <br>resource</br> demand of a service but taking the previous demand into account. 5.",
                "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
                "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve <br>resource</br> consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different <br>resource</br> management approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no <br>resource</br> aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for <br>resource</br> aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the <br>resource</br> management can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of <br>resource</br> limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the <br>resource</br> management will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the <br>resource</br> management and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and <br>resource</br>-aware distribution.",
                "Automatic, dynamic <br>resource</br> management allows optimized use of available resources while minimizing the administrative complexity.",
                "<br>resource</br> management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "The common three-phase approach of <br>resource</br> discovery, system selection and job execution fails for services that change their <br>resource</br> demand over time due to interactive user access and run for a long period of time.",
                "Therefore the <br>resource</br> management has to avoid migration if possible."
            ],
            "translated_annotated_samples": [
                "Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los <br>recursos</br>.",
                "La gestión automática y dinámica de <br>recursos</br> permite el uso optimizado de los <br>recursos</br> disponibles al tiempo que se minimiza la complejidad administrativa.",
                "La <br>gestión de recursos</br> es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red.",
                "El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su <br>demanda de recursos</br> con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo.",
                "Por lo tanto, la gestión de <br>recurso</br>s debe evitar la migración si es posible."
            ],
            "translated_text": "EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept. de la computadora. A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la computación en malla evoluciona y se aplica a un número creciente de aplicaciones. El entorno para servicios adaptativos descentralizados (EDAS) proporciona una infraestructura tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los <br>recursos</br>. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer. La gestión automática y dinámica de <br>recursos</br> permite el uso optimizado de los <br>recursos</br> disponibles al tiempo que se minimiza la complejidad administrativa. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Las infraestructuras para la computación en malla tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande. La <br>gestión de recursos</br> es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red. Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también. Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros. El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su <br>demanda de recursos</br> con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo. En lugar de establecer una infraestructura para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros. Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un nodo más potente y menos cargado). La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido. Además, un servicio no replicado no es accesible durante la migración. Por lo tanto, la gestión de <br>recurso</br>s debe evitar la migración si es posible. ",
            "candidates": [],
            "error": [
                [
                    "recursos",
                    "recursos",
                    "recursos",
                    "gestión de recursos",
                    "demanda de recursos",
                    "recurso"
                ]
            ]
        },
        "node": {
            "translated_key": "nodo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
                "Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a <br>node</br> gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded <br>node</br>).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the resource management has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the resource management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The resource management focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a <br>node</br> and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of <br>node</br> crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every <br>node</br> that actively supports decentralized adaptive services provides a home environment.",
                "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
                "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
                "Every <br>node</br> provides a set of resources.",
                "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a <br>node</br> shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like <br>node</br> shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common grid computing environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
                "For long-term services this is even harder, and it is likely that the resource demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the <br>node</br> level and the service-environment level.",
                "At the <br>node</br> level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
                "Every service has so called local limits that restrict the resource usage in context of the current <br>node</br>.",
                "If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a local limit can be caused by two reasons: an overloaded <br>node</br> or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a <br>node</br>.",
                "Therefore the assigned resources of a service environment at a <br>node</br> can be easily computed by summing up all local limits of its services.",
                "Furthermore each <br>node</br> has <br>node</br> limits that restrict the overall usage of certain resources.",
                "A <br>node</br> limit must never exceed the physical resource (e.g. disk space) of a <br>node</br> and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a <br>node</br> must never exceed the <br>node</br> limit of a resource.",
                "Therefore observing and controlling the local limits will keep the <br>node</br> limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum resource usage of a project in scope of a home environment.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a home environment supports usually numerous projects.",
                "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
                "As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
                "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local <br>node</br>.",
                "If the service environment has not reached its global limit and the <br>node</br> is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another <br>node</br> of the same service environment.",
                "When all resources of the <br>node</br> are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its global limit.",
                "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a global limit is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each <br>node</br> that supports a certain service environment is at least connected to another <br>node</br> that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a <br>node</br> supports several service environments which all have services running at the <br>node</br> and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a <br>node</br> we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
                "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
                "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate <br>node</br> crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
                "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no resource aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for resource aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the resource management can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of <br>node</br> crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the resource management and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [
                "If the distribution turns out to be wrong (e.g. a <br>node</br> gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded <br>node</br>).",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a <br>node</br> and the amount of resources dedicated to a project.",
                "Finally a certain amount of <br>node</br> crashes can be tolerated.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every <br>node</br> that actively supports decentralized adaptive services provides a home environment.",
                "Every <br>node</br> provides a set of resources."
            ],
            "translated_annotated_samples": [
                "Si la distribución resulta ser incorrecta (por ejemplo, un <br>nodo</br> se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un <br>nodo</br> más potente y menos cargado).",
                "El proceso completo del artículo 5 de rededicación es escalable ya que es descentralizado y respeta ciertos límites como los recursos físicamente disponibles de un <br>nodo</br> y la cantidad de recursos dedicados a un proyecto.",
                "Finalmente se puede tolerar cierta cantidad de caídas de <br>nodo</br>s.",
                "Componentes principales de EDAS Figura 1: Objeto fragmentado en tres <br>nodo</br>s EDAS tiene tres componentes principales: Cada <br>nodo</br> que apoya activamente los servicios adaptativos descentralizados proporciona un entorno local.",
                "Cada <br>nodo</br> proporciona un conjunto de recursos."
            ],
            "translated_text": "EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept. de la computadora. A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la computación en malla evoluciona y se aplica a un número creciente de aplicaciones. El entorno para servicios adaptativos descentralizados (EDAS) proporciona una infraestructura tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los recursos. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer. La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Las infraestructuras para la computación en malla tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande. La gestión de recursos es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red. Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también. Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros. El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo. En lugar de establecer una infraestructura para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros. Si la distribución resulta ser incorrecta (por ejemplo, un <br>nodo</br> se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un <br>nodo</br> más potente y menos cargado). La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido. Además, un servicio no replicado no es accesible durante la migración. Por lo tanto, la gestión de recursos debe evitar la migración si es posible. Además, se debe proporcionar un concepto de servicio que evite la sobrecarga en primer lugar y, en segundo lugar, evite la indisponibilidad del servicio si la migración no se puede evitar. EDAS [2] tiene como objetivo proporcionar una infraestructura tipo rejilla para servicios de largo plazo accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una infraestructura de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos. Los nodos pueden unirse y abandonar dinámicamente la infraestructura, y todas las tareas de gestión, especialmente la gestión de recursos, son descentralizadas. El entorno se construye sobre nuestra infraestructura middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS). La gestión de recursos se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo, potencialmente infinito. Estos servicios están organizados en proyectos. Cada proyecto tiene un alcance de ejecución distribuido llamado entorno de servicio. Un ambiente así posiblemente abarca múltiples instituciones. Cada institución representa un dominio administrativo que puede respaldar un proyecto con un conjunto fijo de recursos. Nuestro enfoque respalda la gestión adaptativa de recursos de todos los proyectos en el alcance de una institución basada en un algoritmo inspirado en los algoritmos difusivos para el equilibrio de carga descentralizado [4]. No se sabe cómo subdividir óptimamente estos recursos para los servicios, ya que la demanda de recursos de los servicios puede cambiar con el tiempo o incluso fluctuar con frecuencia. Para proporcionar recursos según sea necesario, nuestro enfoque redirige automáticamente de manera equitativa los recursos libres o no necesarios entre las instancias de servicio en todos los proyectos y nodos. El proceso completo del artículo 5 de rededicación es escalable ya que es descentralizado y respeta ciertos límites como los recursos físicamente disponibles de un <br>nodo</br> y la cantidad de recursos dedicados a un proyecto. En los casos en los que no sea posible la rededicación, se inicia la migración del servicio exigente. EDAS apoya además modelos de servicio flexibles, incluyendo una estructura cliente/servidor completamente centralizada, sistemas basados completamente en pares, y varias configuraciones intermedias que permiten un uso controlado de los recursos de los pares basado en el modelo de objetos fragmentados [5]. El objetivo general es proporcionar una arquitectura de servicio genérica que permita implementar la funcionalidad del servicio una vez, y luego, idealmente, ejecutar este servicio con diferentes modelos de servicio y adaptarlo en tiempo de ejecución, escalando así desde una instancia local de un solo usuario hasta un servicio escalable que abarque múltiples dominios. Para reducir el esfuerzo de implementación de dichos servicios, se ha desarrollado un marco que respalda la evolución en tiempo de ejecución desde un escenario tradicional de cliente/servidor a un servidor replicado activo con clientes interactuando en una arquitectura híbrida de pares a pares como la conocida en Napster. En una infraestructura de red de servicio a largo plazo, la replicación activa tiene varios beneficios: las réplicas pueden unirse y abandonar el grupo de objetos y, por lo tanto, las réplicas pueden ser migradas sin que el servicio esté no disponible. La carga de solicitudes no modificadoras se puede distribuir de manera uniforme entre las réplicas, lo que hace que las situaciones de sobrecarga sean menos probables. Finalmente se puede tolerar cierta cantidad de caídas de <br>nodo</br>s. La siguiente sección describe las características utilizadas de AspectIX seguida de una breve descripción de los componentes principales y conceptos de EDAS. La sección 4 explica los conceptos de autoadministración y rededicación en la gestión de recursos adaptativos distribuidos. La sección 5 describe el marco para servicios adaptativos descentralizados. La sección 6 describe el trabajo relacionado y finalmente la Sección 7 concluye el artículo. MIDDLEWARE BÁSICO El entorno de EDAS se basa en el middleware AspectIX. En su núcleo, proporciona un ORB compatible con CORBA y, como tal, soporta sistemas distribuidos heterogéneos. Además, AspectIX soporta el modelo de objetos fragmentado [5] que se utiliza para implementar y proporcionar servicios adaptativos descentralizados. En el modelo de objeto fragmentado, la distinción entre los stubs del cliente y el objeto del servidor ya no está presente (Fig. 1). Desde un punto de vista abstracto, un objeto fragmentado es una unidad con identidad, interfaz, comportamiento y estado únicos, al igual que en el diseño orientado a objetos clásico. La implementación de estas propiedades, sin embargo, no está limitada a una ubicación específica, sino que puede distribuirse arbitrariamente en varios fragmentos. Cualquier cliente que desee acceder al objeto fragmentado necesita un fragmento local, que proporciona una interfaz idéntica a la de un stub tradicional. Sin embargo, la distribución interna y la interacción no solo son transparentes en la interfaz externa del objeto distribuido, sino que incluso pueden cambiar dinámicamente en tiempo de ejecución. Esto permite que el modelo de objeto fragmentado se adapte a las condiciones cambiantes del entorno o a los requisitos de calidad del servicio. Ofrece cambiar el modelo de servicio a pedido, desde el tradicional cliente-servidor a un enfoque basado en pares, y todo tipo de etapas intermedias mediante la migración e intercambio de fragmentos. Componentes principales de EDAS Figura 1: Objeto fragmentado en tres <br>nodo</br>s EDAS tiene tres componentes principales: Cada <br>nodo</br> que apoya activamente los servicios adaptativos descentralizados proporciona un entorno local. El entorno del hogar básicamente gestiona los recursos de uno o más nodos pertenecientes al mismo dominio administrativo o institución. El entorno de servicio se extiende sobre un conjunto de dominios que respaldan un proyecto específico y depende de servicios básicos de los entornos domésticos correspondientes. El entorno de servicio apoya la ejecución de servicios pertenecientes al mismo proyecto. Finalmente, el servicio adaptativo descentralizado se distribuye dinámicamente dentro del alcance de un entorno de servicio asociado. El entorno del hogar tiene el papel de mediador entre los nodos de una institución y uno o más entornos de servicio, cada uno ejecutando un conjunto de servicios. La Fig. 2 muestra tres dominios, cada uno ejecutando un entorno doméstico que abarca todos los nodos de los respectivos dominios. Cada <br>nodo</br> proporciona un conjunto de recursos. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "grid computing": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, <br>grid computing</br> evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for <br>grid computing</br> aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current <br>grid computing</br> infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
                "Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the resource management has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the resource management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The resource management focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of node crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment.",
                "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
                "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
                "Every node provides a set of resources.",
                "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common <br>grid computing</br> environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
                "For long-term services this is even harder, and it is likely that the resource demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
                "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
                "Every service has so called local limits that restrict the resource usage in context of the current node.",
                "If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a node.",
                "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
                "Furthermore each node has node limits that restrict the overall usage of certain resources.",
                "A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a node must never exceed the node limit of a resource.",
                "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum resource usage of a project in scope of a home environment.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a home environment supports usually numerous projects.",
                "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
                "As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
                "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node.",
                "If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
                "When all resources of the node are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its global limit.",
                "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a global limit is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
                "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
                "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
                "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no resource aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for resource aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the resource management can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the resource management and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, <br>grid computing</br> evolves and is applied to a rising number of applications.",
                "INTRODUCTION Infrastructures for <br>grid computing</br> aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "Current <br>grid computing</br> infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common <br>grid computing</br> environments."
            ],
            "translated_annotated_samples": [
                "A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la <br>computación en malla</br> evoluciona y se aplica a un número creciente de aplicaciones.",
                "INTRODUCCIÓN Las infraestructuras para la <br>computación en malla</br> tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande.",
                "Las infraestructuras actuales de <br>computación en red</br> no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros.",
                "La gestión de recursos descentralizada. La gestión de recursos para servicios a largo plazo tiene otros requisitos que la gestión de recursos en entornos comunes de <br>computación en red</br>."
            ],
            "translated_text": "EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept. de la computadora. A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la <br>computación en malla</br> evoluciona y se aplica a un número creciente de aplicaciones. El entorno para servicios adaptativos descentralizados (EDAS) proporciona una infraestructura tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los recursos. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer. La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Las infraestructuras para la <br>computación en malla</br> tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande. La gestión de recursos es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red. Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también. Las infraestructuras actuales de <br>computación en red</br> no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros. El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo. En lugar de establecer una infraestructura para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros. Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un nodo más potente y menos cargado). La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido. Además, un servicio no replicado no es accesible durante la migración. Por lo tanto, la gestión de recursos debe evitar la migración si es posible. Además, se debe proporcionar un concepto de servicio que evite la sobrecarga en primer lugar y, en segundo lugar, evite la indisponibilidad del servicio si la migración no se puede evitar. EDAS [2] tiene como objetivo proporcionar una infraestructura tipo rejilla para servicios de largo plazo accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una infraestructura de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos. Los nodos pueden unirse y abandonar dinámicamente la infraestructura, y todas las tareas de gestión, especialmente la gestión de recursos, son descentralizadas. El entorno se construye sobre nuestra infraestructura middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS). La gestión de recursos se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo, potencialmente infinito. Estos servicios están organizados en proyectos. Cada proyecto tiene un alcance de ejecución distribuido llamado entorno de servicio. Un ambiente así posiblemente abarca múltiples instituciones. Cada institución representa un dominio administrativo que puede respaldar un proyecto con un conjunto fijo de recursos. Nuestro enfoque respalda la gestión adaptativa de recursos de todos los proyectos en el alcance de una institución basada en un algoritmo inspirado en los algoritmos difusivos para el equilibrio de carga descentralizado [4]. No se sabe cómo subdividir óptimamente estos recursos para los servicios, ya que la demanda de recursos de los servicios puede cambiar con el tiempo o incluso fluctuar con frecuencia. Para proporcionar recursos según sea necesario, nuestro enfoque redirige automáticamente de manera equitativa los recursos libres o no necesarios entre las instancias de servicio en todos los proyectos y nodos. El proceso completo del artículo 5 de rededicación es escalable ya que es descentralizado y respeta ciertos límites como los recursos físicamente disponibles de un nodo y la cantidad de recursos dedicados a un proyecto. En los casos en los que no sea posible la rededicación, se inicia la migración del servicio exigente. EDAS apoya además modelos de servicio flexibles, incluyendo una estructura cliente/servidor completamente centralizada, sistemas basados completamente en pares, y varias configuraciones intermedias que permiten un uso controlado de los recursos de los pares basado en el modelo de objetos fragmentados [5]. El objetivo general es proporcionar una arquitectura de servicio genérica que permita implementar la funcionalidad del servicio una vez, y luego, idealmente, ejecutar este servicio con diferentes modelos de servicio y adaptarlo en tiempo de ejecución, escalando así desde una instancia local de un solo usuario hasta un servicio escalable que abarque múltiples dominios. Para reducir el esfuerzo de implementación de dichos servicios, se ha desarrollado un marco que respalda la evolución en tiempo de ejecución desde un escenario tradicional de cliente/servidor a un servidor replicado activo con clientes interactuando en una arquitectura híbrida de pares a pares como la conocida en Napster. En una infraestructura de red de servicio a largo plazo, la replicación activa tiene varios beneficios: las réplicas pueden unirse y abandonar el grupo de objetos y, por lo tanto, las réplicas pueden ser migradas sin que el servicio esté no disponible. La carga de solicitudes no modificadoras se puede distribuir de manera uniforme entre las réplicas, lo que hace que las situaciones de sobrecarga sean menos probables. Finalmente se puede tolerar cierta cantidad de caídas de nodos. La siguiente sección describe las características utilizadas de AspectIX seguida de una breve descripción de los componentes principales y conceptos de EDAS. La sección 4 explica los conceptos de autoadministración y rededicación en la gestión de recursos adaptativos distribuidos. La sección 5 describe el marco para servicios adaptativos descentralizados. La sección 6 describe el trabajo relacionado y finalmente la Sección 7 concluye el artículo. MIDDLEWARE BÁSICO El entorno de EDAS se basa en el middleware AspectIX. En su núcleo, proporciona un ORB compatible con CORBA y, como tal, soporta sistemas distribuidos heterogéneos. Además, AspectIX soporta el modelo de objetos fragmentado [5] que se utiliza para implementar y proporcionar servicios adaptativos descentralizados. En el modelo de objeto fragmentado, la distinción entre los stubs del cliente y el objeto del servidor ya no está presente (Fig. 1). Desde un punto de vista abstracto, un objeto fragmentado es una unidad con identidad, interfaz, comportamiento y estado únicos, al igual que en el diseño orientado a objetos clásico. La implementación de estas propiedades, sin embargo, no está limitada a una ubicación específica, sino que puede distribuirse arbitrariamente en varios fragmentos. Cualquier cliente que desee acceder al objeto fragmentado necesita un fragmento local, que proporciona una interfaz idéntica a la de un stub tradicional. Sin embargo, la distribución interna y la interacción no solo son transparentes en la interfaz externa del objeto distribuido, sino que incluso pueden cambiar dinámicamente en tiempo de ejecución. Esto permite que el modelo de objeto fragmentado se adapte a las condiciones cambiantes del entorno o a los requisitos de calidad del servicio. Ofrece cambiar el modelo de servicio a pedido, desde el tradicional cliente-servidor a un enfoque basado en pares, y todo tipo de etapas intermedias mediante la migración e intercambio de fragmentos. Componentes principales de EDAS Figura 1: Objeto fragmentado en tres nodos EDAS tiene tres componentes principales: Cada nodo que apoya activamente los servicios adaptativos descentralizados proporciona un entorno local. El entorno del hogar básicamente gestiona los recursos de uno o más nodos pertenecientes al mismo dominio administrativo o institución. El entorno de servicio se extiende sobre un conjunto de dominios que respaldan un proyecto específico y depende de servicios básicos de los entornos domésticos correspondientes. El entorno de servicio apoya la ejecución de servicios pertenecientes al mismo proyecto. Finalmente, el servicio adaptativo descentralizado se distribuye dinámicamente dentro del alcance de un entorno de servicio asociado. El entorno del hogar tiene el papel de mediador entre los nodos de una institución y uno o más entornos de servicio, cada uno ejecutando un conjunto de servicios. La Fig. 2 muestra tres dominios, cada uno ejecutando un entorno doméstico que abarca todos los nodos de los respectivos dominios. Cada nodo proporciona un conjunto de recursos. Cada dominio tiene un administrador que puede utilizar ese entorno doméstico para asignar recursos a los entornos de servicio y revocarlos. Además de proporcionar la carga del sistema y todo tipo de información sobre el uso de recursos al entorno de servicio, el entorno doméstico también notifica sobre todos los eventos importantes del sistema, como un apagado o fallo de un nodo. Un entorno de servicio representa un alcance de distribución para uno o más servicios. Por lo general, un entorno de servicio es propiedad de una organización o comunidad y está dedicado a un proyecto. Un gerente de servicios puede iniciar, detener y configurar servicios a través de la interfaz del entorno de servicios y decide qué recursos proporcionados por los entornos domésticos son aceptados. En la mayoría de los casos, un entorno de servicio se extiende sobre más de un dominio administrativo, como se muestra en la Figura 2. Una de las principales tareas del entorno de servicio es apoyar la migración de servicios o componentes de servicio, especialmente entre diferentes entornos de origen. El entorno de servicio toma en cuenta los recursos disponibles, los requisitos de los servicios y las políticas proporcionadas por el gerente de servicio. La migración de componentes de servicio puede ser necesaria por diversas razones, como el apagado de nodos, limitaciones de recursos y el crecimiento o reducción del entorno de servicio. 4. La gestión de recursos descentralizada. La gestión de recursos para servicios a largo plazo tiene otros requisitos que la gestión de recursos en entornos comunes de <br>computación en red</br>. Por ejemplo, incluso en el contexto de los sistemas de red tradicionales, es muy difícil determinar o siquiera estimar los requisitos de recursos de una tarea [6]. Para servicios a largo plazo esto es aún más difícil, y es probable que la demanda de recursos cambie con frecuencia. Esto convierte el Artículo 5 Anfitrión F Anfitrión D Anfitrión E Anfitrión A Anfitrión C Servicio Entorno Servicio B Servicio A Entorno Hogar. Entorno del hogar Límite del objeto fragmentado Gerente de servicio Gerente de dominio Gerente de dominio Figura 2: Escenario de EDAS la distribución óptima de servicios sobre un conjunto de nodos en un problema difícil. En general, la migración de servicios es un requisito previo de EDAS, ya que ofrece una solución si la decisión de distribución inicial fue incorrecta (por ejemplo, inicio inicial de un servicio previamente desconocido) o si la demanda de servicios ha cambiado sustancialmente. Pero la migración es costosa, ya que se debe transferir todo el estado de un servicio, posiblemente incluyendo el código del programa. Si el servicio no se replica, estará no disponible durante la migración. Teniendo esto en cuenta, un sistema de gestión de recursos debería ubicar servicios y redistribuir recursos de manera adaptativa entre servicios y nodos según sea necesario para evitar migraciones. Dado que EDAS tiene como objetivo proporcionar una infraestructura tipo rejilla para un gran conjunto de nodos que pueden unirse y abandonar el sistema, todas las tareas de gestión de recursos deben descentralizarse para ser escalables y no deben requerir conocimiento global. La gestión de recursos se puede estructurar en las siguientes tareas diferentes: • Agregar y cambiar los recursos asignados de un entorno de servicio • Colocación automática de servicios al inicio y durante la migración debido a sobrecarga • Mantener todo tipo de límites de recursos, especialmente los límites de entornos de servicio • Compensar la salida y los nodos que se han bloqueado En las siguientes secciones describiremos qué tipo de límites de recursos existen y cómo gestionar los recursos basándonos en estas condiciones básicas. 4.1 Límites de Recursos Nuestro enfoque gestiona los recursos en dos etapas, a nivel de nodo y a nivel de entorno de servicio. A nivel de nodo monitoreamos el uso de todo tipo de recursos físicos como espacio en disco, memoria, CPU y ancho de banda de red, pero también recursos lógicos como archivos abiertos, sockets y hilos. La entidad de monitoreo es un servicio o un componente de servicio en caso de un servicio adaptativo descentralizado. Cada servicio tiene límites locales llamados así que restringen el uso de recursos en el contexto del nodo actual. Si un servicio corre el riesgo de exceder dicho límite local, el entorno doméstico intenta ampliar los límites o notifica al entorno de servicio responsable si la reasignación no es posible. Alcanzar un límite local puede ser causado por dos razones: un nodo sobrecargado o un entorno de servicio sobrecargado. En el primer caso, la migración del servicio podría ser útil, en el segundo caso, la migración a otro dominio administrativo podría ser una opción, o simplemente reducir la demanda de recursos deteniendo el servicio. Por supuesto, podría haber más de un servicio del mismo entorno de servicio en un nodo. Por lo tanto, los recursos asignados de un entorno de servicio en un nodo pueden ser fácilmente calculados sumando todos los límites locales de sus servicios. Además, cada nodo tiene límites que restringen el uso general de ciertos recursos. Un límite de nodo nunca debe exceder los recursos físicos (por ejemplo, espacio en disco) de un nodo y podría ser mucho más pequeño, por ejemplo, para soportar usuarios locales. La suma de todos los límites locales en un nodo nunca debe exceder el límite del nodo de un recurso. Por lo tanto, observar y controlar los límites locales mantendrá los límites del nodo y evitará la sobrecarga. En el nivel institucional, el uso de recursos de un entorno de servicio y sus servicios asociados también está restringido por los llamados límites globales. Estos límites determinan el uso máximo de recursos de un proyecto en el ámbito de un entorno doméstico. La suma de todos los límites locales en todos los nodos de la institución para un proyecto determinado nunca excede su límite global. GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Reasignación de Recursos Adaptativa Comenzamos con una implementación directa para describir el flujo de trabajo principal. Luego proponemos un enfoque para una solución más eficiente y discutimos sus problemas. Si un nuevo proyecto debe ser respaldado por un entorno doméstico, primero es necesario identificar los nodos que ofrecen recursos suficientes no asignados para iniciar un servicio. Esto se puede lograr en una implementación ingenua utilizando un enfoque de inundación como se hace en el protocolo Gnutella, asumiendo que los nodos están conectados en un grafo aleatorio. Estos recursos pueden ser asignados al entorno de servicio del nuevo proyecto, el cual posteriormente puede comenzar a ofrecer servicios en estos nodos. Por supuesto, un entorno hogareño suele apoyar numerosos proyectos. Cada uno de estos proyectos tiene asignaciones de recursos en varios nodos, algunos de ellos ocupados por servicios, otros libres y sin usar. A medida que la demanda de recursos de un servicio cambia, podría ser posible que un servicio alcance su límite local si está bajo una alta demanda. Lo que sucede a continuación depende del uso general de recursos del entorno de servicio y del consumo de recursos en el nodo local. Si el entorno de servicio no ha alcanzado su límite global y el nodo no está sobrecargado, el límite local dependiente del servicio debería extenderse simplemente reduciendo un límite local en otro nodo del mismo entorno de servicio. Cuando todos los recursos del nodo se asignan a otros entornos de servicio, existen dos posibilidades. Todos los recursos son utilizados por los servicios, por lo que debemos migrar un servicio, o los recursos están asignados pero no utilizados. En el último caso reasignaremos recursos y los destinaremos al exigente entorno de servicio. Finalmente, es posible que el entorno de servicio haya alcanzado su límite global. En este caso, el consumo de recursos debe reducirse ya sea migrando el servicio a otro dominio y su entorno de origen dependiente o simplemente limitando el uso de recursos y, si esto no es posible, deteniendo el servicio. A diferencia de la configuración de un nuevo entorno de servicio que no es crítico en cuanto al tiempo y es una tarea menos frecuente, la adaptación de los límites locales ocurre con frecuencia y debe realizarse en el Artículo 5 casi de inmediato. Por lo tanto, no es una opción utilizar búsquedas de difusión para la reafirmación. En cambio, se necesita un enfoque más eficiente con una complejidad limitada. Lo mismo se aplica para detectar si se alcanza un límite global en un entorno de servicio. Actualmente investigamos si esto se puede lograr utilizando un algoritmo difusivo[4] como se utiliza para el equilibrio de carga descentralizado. De esta manera, todos los nodos de un sistema se dividen en grupos que se superponen parcialmente. La unión de todos los grupos logra una cobertura completa. Los miembros del grupo intercambian frecuentemente información de carga y equilibran la carga mediante migración. En nuestro caso, nuestro objetivo no es equilibrar la carga, sino la cantidad de recursos libres disponibles en un entorno de servicio. Cada nodo que respalda un determinado entorno de servicio está conectado al menos a otro nodo que respalda el mismo proyecto. De esta manera siempre se debería saber si un entorno de servicio todavía tiene suficientes recursos y, por lo tanto, si un servicio puede crecer. Todavía quedan cuestiones abiertas, como si los recursos libres equilibrados difusivamente deben estar estrechamente conectados a los recursos reales, comparables a las reservas. En este caso podría haber problemas si un nodo admite varios entornos de servicio que tienen servicios en ejecución en el nodo y se excede un límite de nodo que requeriría la migración del servicio. De hecho, puede ser innecesario ya que los servicios podrían no utilizar todos los recursos asignados, pero el algoritmo difusivo causó la sobrecarga del límite al equilibrar de manera equitativa los recursos libres de todos los entornos de servicio admitidos. Si eliminamos el mapeo entre los recursos gratuitos y los recursos reales de un nodo, podemos evitar estas situaciones. Sin embargo, se vuelve más complicado determinar los recursos libres y no asignados de un entorno doméstico. 4.3 Colocación de Servicios Independientemente del mapeo de recursos libres, la colocación de un servicio es, como ya se ha mencionado, un problema difícil. Distribuir los servicios de manera equitativa en todos los nodos seguramente evitaría la migración en el caso promedio incluso si la demanda de recursos de los servicios cambia. Sin embargo, si la demanda de recursos de los servicios varía considerablemente y la red está congestionada por muchos proyectos, podría suceder que un servicio no pueda ser ubicado porque los recursos disponibles están muy dispersos. Un enfoque diferente sería considerarlo como una variante del problema de empaquetamiento de contenedores que tiene como objetivo empacar elementos en contenedores optimizando el número de contenedores utilizados. En nuestro caso, necesitamos un enfoque en línea ya que los elementos no son conocidos de antemano y tenemos un problema multidimensional debido a que un servicio tiene varios requisitos de recursos. El número de contenedores está limitado ya que tenemos un número finito de nodos en nuestra cuadrícula. Un algoritmo para este problema ha sido propuesto recientemente por Epstein y van Stee en [7]. En el lado negativo, este algoritmo necesita conocer todos los nodos y su uso actual. Dado que la ubicación de un servicio no es un problema crítico en términos de tiempo, nuevamente un enfoque basado en inundaciones podría ofrecer una solución. Para reducir el número de respuestas, solo los nodos que proporcionen recursos suficientes deben responder. También se debe considerar transformar el algoritmo en uno distribuido. Otro problema podría ser que el algoritmo optimiza la ocupación de manera demasiado intensa. Por lo tanto, los cambios en la demanda de servicio pueden provocar nodos sobrecargados y causar migraciones. Creemos que esto se puede prevenir no solo considerando el consumo real de recursos para determinar la demanda de recursos de un servicio, sino teniendo en cuenta la demanda previa. 5. En EDAS, un modelo de servicio descentralizado y adaptable normalmente se corresponde con un servicio tradicional al que acceden los usuarios, como un servidor web, un servidor de mensajería instantánea o un repositorio de código fuente. Un servicio así está representado por un objeto fragmentado. Este objeto se expande o contrae en el alcance abarcado por el entorno de servicio asociado dependiendo de las demandas del servicio y por razones de tolerancia a fallos. Por lo general, cada parte del objeto es móvil y puede ser trasladada si es necesario. Cada servicio tiene al menos dos interfaces: una para tareas de gestión y otro servicio específico para el usuario final. La interfaz de gestión ofrece métodos para iniciar, detener y configurar instancias de servicio. Dado que este conjunto de características requiere un enorme esfuerzo de implementación para hacerlo de nuevo para cada implementación de servicio que apoyamos, respaldamos el desarrollo de servicios adaptativos descentralizados a través de un marco y una versión extendida de IDL en combinación con un compilador especial de IDL [8]. La idea principal es desarrollar un servicio de la manera tradicional cliente/servidor, tal como se hace en CORBA básico. Este servicio puede ser iniciado y ejecutado en la red como un servidor común. Además, debería ser posible migrar el servicio. Esto se puede lograr utilizando un enfoque basado en tipos de valor para describir el estado del servicio como se hace en [9] o utilizando los mecanismos de serialización suministrados por el lenguaje. Como nos gustaría tolerar fallos de nodos y el servicio debería estar disponible durante la migración, apoyamos la replicación activa del servicio. Esto se logra generando stubs especiales del lado del cliente que se comunican con una de las réplicas. Para mantener la conexión entre los clientes y el objeto replicado, utilizamos referencias limitadas en el tiempo [10] que restringen la migración pero hacen que el uso de servicios de ubicación (para hacer frente a referencias obsoletas) sea innecesario. Las réplicas están sincronizadas a través de un marco de comunicación de grupo. La extensión IDL consiste en modificadores adicionales que afectan la generación de código para el lado del cliente y del servidor. Estos se retienen para marcar operaciones no modificativas que permiten respuestas más rápidas y equilibrio de carga de esas solicitudes. Además, se puede marcar los métodos como locales, lo que indica que pueden ser procesados localmente. En este caso, el compilador IDL crea un marcador de posición para la ejecución local. Además de los métodos habituales estáticos, es útil implementar la contribución e interacción del lado del cliente. Por ejemplo, si un cliente falso ofrece un método que resulta en una transferencia de archivos, es posible integrar un protocolo personalizado que reenvíe una solicitud modificada al objeto replicado, el cual no devuelve el archivo como en el caso común, sino URLs que apuntan a clientes que solicitaron previamente el archivo. Ahora el cliente ficticio obtiene los datos de la ubicación ofrecida y responde como si hubieran sido suministrados por el objeto del servidor. Este comportamiento basado en pares, como se conoce en Napster, es transparente para el cliente y puede activarse y desactivarse según las condiciones del entorno, como la carga y la comunidad, según sea necesario. Finalmente proporcionamos otro modificador para marcar operaciones administrativas. Si un método está marcado como administrador, se requiere autenticación. El método de autenticación es adaptable y puede ser mediante una frase de paso, una dirección de internet o cualquier otro esquema de autenticación. Este modificador facilita la creación de métodos de gestión de servicios. Artículo 5 6. Las infraestructuras de cuadrícula como el Globus-Toolkit [11] proporcionan servicios y mecanismos para entornos heterogéneos distribuidos que combinan recursos bajo demanda para resolver tareas que consumen recursos y computacionalmente intensivas. Debido a esta orientación, se centran en diferentes modelos de servicio, no proporcionan soporte para la movilidad de objetos, ni siquiera si apoyan un enfoque de objetos distribuidos en absoluto. Pero lo más importante es que siguen un enfoque diferente de gestión de recursos, ya que se centran en la ejecución paralela de una gran cantidad de tareas cortas y a medio plazo. JavaSymphony [12] y Ibis [13] proporcionan movilidad de objetos pero están limitados al lenguaje de programación Java y se centran en la computación de alto rendimiento orientada a objetos. Los objetos replicados activamente son proporcionados por Jgroup [14] basados en RMI. Encima de este middleware básico se ha implementado una capa de gestión de replicación llamada ARM [15]. JGroup se enfoca en la replicación activa de objetos pero carece de soporte para servicios más flexibles como lo hace EDAS. ARM se puede comparar con EDAS pero no admite la distribución consciente de recursos. Fog [16] y Globe [17] son entornos middleware básicos que admiten el enfoque de objetos fragmentados. Globe considera la replicación y el almacenamiento en caché. Ambos sistemas carecen de soporte para la distribución consciente de los recursos. 7. CONCLUSIÓN Y TRABAJO EN CURSO Basándose en el modelo de objeto fragmentado y la arquitectura del entorno de EDAS, los servicios adaptativos descentralizados pueden ser fácilmente diseñados, implementados y ejecutados. Como se describe, la gestión de recursos se puede descomponer en dos problemas principales que deben resolverse. Controlar y gestionar los límites de recursos, incluido garantizar que los recursos asignados estén disponibles (incluso en el contexto de fallas de nodos) y la colocación autónoma de servicios. Para ambos problemas ofrecemos una solución, un entorno de simulación actualmente implementado verificará su viabilidad. En un próximo paso, la gestión de recursos se integrará en un prototipo de la arquitectura EDAS que ya ha sido implementado. Como se describe, ya tenemos una implementación inicial del marco de trabajo para los servicios adaptativos descentralizados. Este marco debe ser ampliado para interactuar de manera fluida con la gestión de recursos y la arquitectura de EDAS. En un paso final, necesitamos implementar algunos servicios que verifiquen la usabilidad de todo el proyecto EDAS. 8. REFERENCIAS [1] D. Werthimer, S. Bowyer, J. Cobb, D. Gedye, D. Anderson, W. T. Sullivan, III. Un nuevo proyecto SETI importante basado en los datos del proyecto Serendip y 100,000 computadoras personales. En Actas del Quinto Congreso Internacional. Conferencia sobre Bioastronomía, 1997. [2] Hans Reiser, Rüdiger Kapitza, Franz J. Hauck. Servicios Descentralizados y Adaptativos: El Enfoque AspectIX para un Entorno de Red Flexible y Seguro. En Grid Services Engineering and Management (GSEM 2004), Erfurt, Alemania, 2004. Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, y Andreas I. Schmied. Integrando objetos fragmentados en un entorno CORBA. En Proc. de los Net.ObjectDays, 2003. [4] Tiberiu Rotaru y Hans-Heinrich N¨ageli. Equilibrado dinámico de carga mediante difusión en sistemas heterogéneos. I'm sorry, but the sentence \"J.\" does not provide enough context for an accurate translation. Could you please provide more information or a complete sentence for me to translate? Distribución Paralela. Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, y M. Shapiro. Objetos fragmentados para abstracciones distribuidas. [6] Jennifer M. Schopf. Diez acciones cuando se programa en una cuadrícula: el usuario como programador de cuadrícula. páginas 15-23, 2004. [7] Leah Epstein y Rob van Stee. Empaquetado multidimensional en línea óptimo con espacio limitado. En SODA 04: Actas del decimoquinto simposio anual de algoritmos discretos de ACM-SIAM, páginas 214-223, Filadelfia, PA, EE. UU., 2004. Sociedad de Matemáticas Industriales y Aplicadas. [8] Hans P. Reiser, Martin Steckermeier y Franz J. Hauck. IDLflex: un compilador flexible y genérico para IDL de CORBA. En Proc. de los Net.ObjectDays (Erfurt, Alemania, 10-13 de septiembre de 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt y Franz J. Hauck. Migración de objetos independiente de la plataforma en CORBA. En Actas de las Conferencias OTM05 (DOA, Agia Napa, Chipre, 31 de octubre - 04 de noviembre de 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser y Franz J. Hauck. Referencias estables y limitadas en el tiempo en el contexto de entornos que cambian dinámicamente. En MDC05: Actas de la 25ª Conferencia Internacional de IEEE. Conferencia sobre Sistemas de Computación Distribuida - Talleres (Talleres ICDCS 2005), 2005. [11] Ian Foster, Carl Kesselman y Steven Tuecke. La anatomía de la red: Permitiendo organizaciones virtuales escalables. Notas de conferencia en Ciencias de la Computación, 2150, 2001. [12] Thomas Fahringer y Alexandru Jugravu. Javasymphony: nuevas directivas para controlar y sincronizar la localidad, el paralelismo y el equilibrio de carga para la computación en clúster y en grid. En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 8-17, Nueva York, NY, EE. UU., 2002. ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann y Henri E. Bal. Ibis: un entorno de programación en malla eficiente basado en Java. En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 18-27, Nueva York, NY, EE. UU., 2002. ACM Press. [14] Alberto Montresor, Renzo Davoli y Ozalp Babaoglu. Middleware para servicios de red confiables en sistemas distribuidos particionables. SIGOPS Oper. would be translated to \"Operaciones de SIGOPS\" in Spanish. This is not a complete sentence. Please provide more context or the full sentence you would like me to translate. Rev., 35(1):73-96, 2001. [15] H. Meling y B. Helvik. Arm: Gestión autónoma de replicación en jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul y Marc Shapiro. Objetos fragmentados para abstracciones distribuidas. En Lecturas en Sistemas de Computación Distribuida. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum y Wiebren de Jonge. Un modelo de objetos para sistemas distribuidos flexibles. En Actas de la 1ra Conferencia Anual de ASCI, páginas 69-78, 1995. Artículo 5 ",
            "candidates": [],
            "error": [
                [
                    "computación en malla",
                    "computación en malla",
                    "computación en red",
                    "computación en red"
                ]
            ]
        },
        "fragment object": {
            "translated_key": "objeto fragmentado",
            "is_in_text": false,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
                "Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the resource management has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the resource management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The resource management focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of node crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment.",
                "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
                "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
                "Every node provides a set of resources.",
                "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common grid computing environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
                "For long-term services this is even harder, and it is likely that the resource demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
                "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
                "Every service has so called local limits that restrict the resource usage in context of the current node.",
                "If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a node.",
                "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
                "Furthermore each node has node limits that restrict the overall usage of certain resources.",
                "A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a node must never exceed the node limit of a resource.",
                "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum resource usage of a project in scope of a home environment.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a home environment supports usually numerous projects.",
                "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
                "As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
                "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node.",
                "If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
                "When all resources of the node are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its global limit.",
                "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a global limit is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
                "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
                "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
                "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no resource aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for resource aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the resource management can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the resource management and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "adaptability": {
            "translated_key": "adaptabilidad",
            "is_in_text": false,
            "original_annotated_sentences": [
                "EDAS: Providing an Environment for Decentralized Adaptive Services Rüdiger Kapitza Dept.",
                "of Comp.",
                "Sciences, Informatik 4 University of Erlangen-Nürnberg rrkapitz@cs.fau.de Franz J. Hauck Distributed Systems Laboratory University of Ulm franz.hauck@uni-ulm.de ABSTRACT As the idea of virtualisation of compute power, storage and bandwidth becomes more and more important, grid computing evolves and is applied to a rising number of applications.",
                "The environment for decentralized adaptive services (EDAS) provides a grid-like infrastructure for user-accessed, longterm services (e.g. webserver, source-code repository etc.).",
                "It aims at supporting the autonomous execution and evolution of services in terms of scalability and resource-aware distribution.",
                "EDAS offers flexible service models based on distributed mobile objects ranging from a traditional clientserver scenario to a fully peer-to-peer based approach.",
                "Automatic, dynamic resource management allows optimized use of available resources while minimizing the administrative complexity.",
                "Categories and Subject Descriptors C.2.4 [Computer Communication Networks]: Distributed Systems-Distributed applications; D.2.12b [Software]: Software Engineering Interoperability[Distributed objects] General Terms Design, Management 1.",
                "INTRODUCTION Infrastructures for grid computing aim at virtualizing a group of computers, servers, and storage as one large computing system.",
                "Resource management is a key issue in such systems, needed for an efficient and automated distribution of tasks on the grid.",
                "Such grid infrastructures are often deployed at enterprise level, but projects like SETI@home [1] have demonstrated the feasibility of more decentralized grids as well.",
                "Current grid computing infrastructures dont provide sufficient support for the execution of distributed, useraccessed, long-term services as they are designed to solve compute- or data-intensive tasks with a more or less fixed set of parameters.",
                "The common three-phase approach of resource discovery, system selection and job execution fails for services that change their resource demand over time due to interactive user access and run for a long period of time.",
                "Instead an infrastructure for long-term services has to place services based on their current demand and their estimated future requirements.",
                "If the distribution turns out to be wrong (e.g. a node gets overloaded) the service has to be migrated within the grid (e.g. to a more powerful and less loaded node).",
                "Migration however is expensive as the whole state of a service has to be transfered.",
                "Additionally a non-replicated service is not accessible during migration.",
                "Therefore the resource management has to avoid migration if possible.",
                "Furthermore a service concept has to be provided that evades overload in the first place, and secondly inhibits service unavailability if migration cant be avoided.",
                "EDAS [2] aims at providing a grid-like infrastructure for user-accessed, long-term services that allows the dynamic adaptation at run-time, provides a management infrastructure, and offers system-level support for scalability and fault tolerance.",
                "Nodes can dynamically join and leave the infrastructure, and all management tasks, especially the resource management, are decentralized.",
                "The environment is built upon our AspectIX [3] middleware infrastructure, which directly supports QoS-based, dynamic reconfiguration of services.",
                "The resource management focuses on the execution of services that have a long, potentially infinite, operating time.",
                "Theses services are organized in projects.",
                "Each project has a distributed execution scope called a service environment.",
                "Such an environment possibly spans multiple institutions.",
                "Each institution represents an administrative domain that can support a project with a fixed set of resources.",
                "Our approach supports the adaptive resource management of all projects in scope of an institution based on an algorithm inspired by the diffusive algorithms for decentralized loadbalancing [4].",
                "It is not known how to optimally subdivide these resources for the services as the resource demand of services can change over time or even frequently fluctuate.",
                "To provide resources as needed, our approach automatically rededicates evenly free or not needed resources between service instances across projects and nodes.",
                "The whole process Article 5 of rededication is scalable as it is decentralized and respects certain limits like the physically available resources of a node and the amount of resources dedicated to a project.",
                "In cases where rededication is not possible, the migration of the demanding service is initiated.",
                "EDAS further supports flexible service models, including a fully centralized client/server structure, completely peer-topeer based systems, and various configurations in between that allow a controlled use of peer resources based on the fragmented object model [5].",
                "The overall goal is to provide a generic service architecture that allows to implement the service functionality once, and then, ideally, run this service with different service models and adapt it at run-time, thereby scaling from a single user local instance to a multidomain-spanning scalable service.",
                "To reduce the implementation effort of such services a framework has been developed that supports the run-time evolution from a traditional client/server scenario to an active replicated server with clients interacting in a hybrid peer-to-peer architecture as known from Napster.",
                "In a longterm-service grid infrastructure, active replication has various benefits: Replicas can join and leave the object group and therefore replicas can be migrated without service unavailability.",
                "Load of non-modifying requests can be evenly distributed across the replicas making overload situations less likely.",
                "Finally a certain amount of node crashes can be tolerated.",
                "The following section describes the used features of AspectIX followed by a brief overview of the core components and concepts of EDAS.",
                "Section 4 explains the self-managing and rededication concepts of distributed adaptive resource management.",
                "Section 5 describes the framework for decentralized adaptive services.",
                "Section 6 describes related work and finally Section 7 concludes the paper. 2.",
                "BASIC MIDDLEWARE The EDAS environment is based on the AspectIX middleware.",
                "At its core, it provides a CORBA-compliant ORB and, as such, supports heterogeneous distributed systems.",
                "Furthermore AspectIX supports the fragmented object model [5] that is used to implement and provide decentralized adaptive services.",
                "In the fragmented object model, the distinction between client stubs and the server object is no longer present (Fig. 1).",
                "From an abstract point of view, a fragmented object is a unit with unique identity, interface, behavior, and state, like in classic object-oriented design.",
                "The implementation of these properties however is not bound to a specific location, but may be distributed arbitrarily on various fragments.",
                "Any client that wants to access the fragmented object needs a local fragment, which provides an interface identical to that of a traditional stub.",
                "However internal distribution and interaction is not only transparent on the outer interface of the distributed object, but may even change dynamically at runtime.",
                "This allows the fragmented object model to adapt to changing environment conditions or quality of service requirements.",
                "It offers to change the service model on demand from traditional client-server to a peer-to-peer based approach and all kind of intermediate stages by migration and exchanging of fragments. 3.",
                "EDAS CORE COMPONENTS Figure 1: Fragmented object on three nodes EDAS has three major components: Every node that actively supports decentralized adaptive services provides a home environment.",
                "The home environment basically manages resources of one or more nodes belonging to the same administrative domain or institution.",
                "The service environment is spread over a set of domains that support a certain project and relies on basic services from the corresponding home environments.",
                "The service environment supports the execution of services belonging to the same project.",
                "Finally, the decentralized adaptive service is dynamically distributed within the scope of an associated service environment.",
                "The home environment has the role of a mediator between the nodes of an institution and one or more service environments, each running a set of services.",
                "Fig. 2 shows three domains each running a home environment that spans all nodes of the respective domains.",
                "Every node provides a set of resources.",
                "Each domain has a manager who can use that home environment to assign resources to service environments and to revoke them.",
                "Apart from providing system load and all kinds of resource-usage information to the service environment, the home environment also notifies about all important system events like a node shutdown or crash.",
                "A service environment represents a scope of distribution for one or more services.",
                "Usually, a service environment is owned by one organization or community and dedicated to one project.",
                "A service manager can start, stop, and configure services through the interface of the service environment and decides which resources provided by home environments are accepted.",
                "In most cases a service environment is spread over more than one administrative domain as shown in Fig. 2.",
                "One of the main tasks of the service environment is to support the migration of services or service components especially between different home environments.",
                "The service environment thereby takes available resources, the requirements of the services, and the policies provided by the service manager into account.",
                "The migration of service components can be necessary for various reasons, like node shutdown, resource constraints, and the growth or shrinkage of a service environment. 4.",
                "DECENTRALIZED RESOURCEMANAGEMENT Resource management for long-term services has other requirements than resource management in common grid computing environments.",
                "For instance even in the context of traditional grid systems it is very difficult to determine or even only estimate the resource requirements of a task [6].",
                "For long-term services this is even harder, and it is likely that the resource demand frequently changes.",
                "This turns Article 5 Host FHost D Host E Host A Host C Service Environment Service B Service A Home Env.",
                "Home Environment Home Environment Boundary of the fragmented object Service Manager Domain Manager Domain Manager Figure 2: EDAS Scenario the optimal distribution of services over a set of nodes into a difficult problem.",
                "In general the migration of services is a prerequisite of EDAS as it offers a solution if the initial distribution decision was wrong (e.g. initial start of previously unknown service) or the demand of services has changed substantially.",
                "But migration is costly, since the whole state of a service possibly including program code has to be transfered.",
                "If the service is not replicated it will be unavailable during migration.",
                "Taking this into account a resource management should place services and adaptively rededicate resources between services and nodes as needed to prevent migration.",
                "As EDAS aims at providing a grid-like infrastructure for a large set of nodes that can join and leave the system all resource management tasks have to be decentralized to be scalable and should not require global knowledge.",
                "The resource management can be structured into the following different tasks: • Adding and changing the assigned resources of a service environment • Automatic placement of service at startup time and during migration due to overload • Keeping all kind of resource limits, especially the limits of service environments • Compensate leaving and crashed nodes In the next sections we will describe what kind of resource limits there are and how to do resource management based on these basic conditions. 4.1 Resource Limits Our approach manages resources on two stages, the node level and the service-environment level.",
                "At the node level we monitor usage of all kind of physical resources like disk space, memory, CPU and network bandwidth but also logical ones like open files, sockets and threads.",
                "The entity of monitoring is a service or a service component in case of a decentralized adaptive service.",
                "Every service has so called local limits that restrict the resource usage in context of the current node.",
                "If a service runs the risk of exceeding such a local limit the home environment tries to extend the limits or notifies the responsible service environment if rededication is not possible.",
                "Reaching a local limit can be caused by two reasons: an overloaded node or an overloaded service environment.",
                "In the first case service migration might help, in the second case migration to another administrative domain might be an option, or simply reducing resource demand by stopping the service.",
                "Of course there could be more than one service of the same service environment at a node.",
                "Therefore the assigned resources of a service environment at a node can be easily computed by summing up all local limits of its services.",
                "Furthermore each node has node limits that restrict the overall usage of certain resources.",
                "A node limit must never exceed the physical resource (e.g. disk space) of a node and might be much smaller, e.g., for supporting local users.",
                "The sum of all local limits at a node must never exceed the node limit of a resource.",
                "Therefore observing and controlling the local limits will keep the node limits and preventing overload.",
                "NodeLimitNode ≥ numberOfLocalLimitsNodeX i=1 LocalLimiti At the institution level the resource usage of a service environment and its associated services is also restricted by so-called global limits.",
                "These limits determine the maximum resource usage of a project in scope of a home environment.",
                "The sum of all local limits on all nodes of the institution for a certain project therefore never exceeds its global limit.",
                "GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Adaptive Resource Rededication We start with a straight-forward implementation to describe the principal workflow.",
                "Then we propose an approach for a more efficient solution and discuss its problems.",
                "If a new project should be supported by a home environment it is first necessary to identify the nodes that offer sufficient unassigned resources to start a service.",
                "This can be achieved in a naive implementation by using a flooding approach like it is done by the Gnutella protocol assuming the nodes are connected in a random graph.",
                "These resources then can be assigned to the service environment of the new project which further on can start services on these nodes.",
                "Of course a home environment supports usually numerous projects.",
                "Each of these projects has resource shares on various nodes, some of them occupied by services, other free and unused.",
                "As the resource demand of a service changes it might be possible that a service reaches its local limit if the service is under high demand.",
                "What happens next depends on the overall resource usage of the service environment and the resource consumption at the local node.",
                "If the service environment has not reached its global limit and the node is not overloaded the dependent local limit of the service should be extended simply by reducing a local limit at another node of the same service environment.",
                "When all resources of the node are assigned to other service environments there are two possibilities.",
                "All resources are used by services, so we have to migrate a service, or the resources are assigned but not used.",
                "In the later case we shall rededicate resources and assign them to the demanding service environment.",
                "Finally the service environment might have reached its global limit.",
                "In this case the resource consumption has to be reduced either by migrating the service to another domain and its depended home environment or simply by bounding resource usage and if this is not possible, stopping the service.",
                "In contrary to the setup of a new service environment which is not time critical and a less frequent task the adaptation of local limits occurs frequently and needs to be done Article 5 almost immediately.",
                "Thus it is not an option to use broadcast searches for rededication.",
                "Instead a more efficient approach with a bounded complexity is necessary.",
                "The same applies for detecting if a global limit is reached by a service environment.",
                "Currently we investigate if this can be achieved by using a diffusive algorithm[4] like it is used for decentralized load balancing.",
                "Thereby all nodes of a system are partitioned in groups that overlap partially.",
                "The union of all groups achieves a full coverage.",
                "Group members frequently exchange load information and balance the load by migration.",
                "In our case we aim not at balancing the load but the amount of available free resources of a service environment.",
                "Each node that supports a certain service environment is at least connected to another node that supports the same project.",
                "This way it always should be known if a service environment has still enough resources and therefore if a service can grow.",
                "There still remain open issues like if the diffusively balanced free resources should be tightly connected to the real resources, comparable to reservations.",
                "In this case there might be problems if a node supports several service environments which all have services running at the node and a node limit is exceeded which would require service migration.",
                "In fact it can be needless as the services might not use all the assigned resources but the diffusive algorithm caused the limit overrun by equally balancing the free resources of all supported service environments.",
                "If we remove the mapping between free resources and real resources of a node we can evade these situations.",
                "However it gets more complicated to determine the free and unassigned resources of a home environment. 4.3 Placement of Services Independent of the mapping of free resources the placement of a service is, as already stated, a difficult problem.",
                "Distributing the services equally over all nodes would surely prevent migration in the average case even if resource demand of services changes.",
                "However if the resource demand of services varies highly and the grid is clogged by many projects it might be that a service cant be placed because the free resources are too scattered.",
                "A different approach would be to consider it as an variant of the bin-packing problem that aims at packing items in bins by optimizing the number of used bins.",
                "In our case we need an online approach as the items are not known in advance and we have a multi-dimensional problem since a service has various resource requirements.",
                "The number of bins is bounded as we have a finite number of nodes in our grid.",
                "An algorithm for this problem has recently been proposed by Epstein and van Stee in [7].",
                "On the downside this algorithm needs to know all nodes and their actual usage.",
                "As the placement of a service is not a time critical problem again a flooding based approach might offer a solution.",
                "To reduce the number of answers only nodes that provide sufficient resources need to reply.",
                "It has also to be considered to transform the algorithm to a distributed one.",
                "Another problem might be that the algorithm optimizes the occupancy too strong.",
                "Therefore demand changes of service can lead to overloaded nodes and causing migration.",
                "We believe this can be prevented by not only considering the actual resource consumption to determine the resource demand of a service but taking the previous demand into account. 5.",
                "DECENTRALIZED ADAPTIVE SERVICE MODEL In EDAS a decentralized, adaptive service normally matches a traditional service accessed by users like a web server, an instant messaging server or a source code repository.",
                "Such a service is represented by a fragmented object.",
                "This object expands or shrinks in the scope spanned by the associated service environment depending on the service demands and for fault-tolerance reasons.",
                "Usually every part of the object is mobile and can be migrated if necessary.",
                "Each service has at least two interfaces: one for management tasks and another service specific for the end user.",
                "The management interface offers methods to start, stop, and configure service instances.",
                "As this set of features requires an enormous implementation effort to do it anew for each service implementation we support the development of decentralized adaptive services through a framework and an extended version of IDL in combination with a special IDL-compiler [8].",
                "The core idea is to develop a service in usual client/server fashion as it is done in plain CORBA.",
                "This service then can be started and executed on the grid as a common servant.",
                "Additionally it should be possible to migrate the service.",
                "This can be achieved by using value type based approach to describe the service state as done in [9] or using the language supplied serialization mechanisms.",
                "As we would like to tolerate node crashes and the service should be available during migration we support the active replication of the service.",
                "This is achieved by generating special client-side stubs that communicate with one of the replicas.",
                "To keep the connection between clients and the replicated object we use time-bounded references [10] that restrict the migration but make the usage of location services (to cope with outdate references) obsolete.",
                "The replicas are synchronized via a group communication framework.",
                "The IDL extension consists of additional modifiers that affect code generation for client and server side.",
                "These are retain to mark non-modifying operations which allows faster responses and load balancing of those requests.",
                "Furthermore one can mark methods as local which indicates that they can be locally processed.",
                "In this case the IDLcompiler creates placeholder for local execution.",
                "Apart form methods that are usual static this is useful to implement client-side contribution and interaction.",
                "For example if a client-stub offers a method which results in a file transfer it is possible to integrate a custom protocol that forwards a modified request to the replicated object which returns not the file as in the common case but URLs that point to clients that previously requested the file.",
                "Now the clientstub fetches the data from the offered location and responds as if it was supplied by the server object.",
                "This peer-to-peer based behavior as known from Napster is transparent to the client and can be switched on and off depending on environment conditions like load and community as needed.",
                "Finally we provide another modifier to mark administrative operations.",
                "If a method is marked with admin an authentication is necessary.",
                "The method to authenticate is pluggable and might be by pass-phrase, internet address or any other authentication scheme.",
                "This modifier facilitates the creation of service management methods.",
                "Article 5 6.",
                "RELATED WORK Grid infrastructures like the Globus-Toolkit [11] provide services and mechanisms for distributed heterogeneous environments to combine resources on demand to solve resource consuming and compute intensive tasks.",
                "Due to this orientation they focus on different service models, provide no support for object mobility if even supporting a distributed object approach at all.",
                "But most important they follow a different resource management approach as they target the parallel execution of a large number of short and midterm tasks.",
                "JavaSymphony [12] and Ibis [13] provide object mobility but are limited to the Java programming language and focus on object oriented high performance computing.",
                "Actively replicated objects are provided by Jgroup [14] based on RMI.",
                "On top of this basic middleware a replication management layer has been implemented called ARM [15].",
                "JGroup focus on the active replication of objects but lacks support for more flexible services like EDAS does.",
                "ARM can be compared to EDAS but supports no resource aware distribution.",
                "Fog [16] and Globe [17] are basic middleware environments that support the fragmented object approach.",
                "Globe considers replication and caching.",
                "Both systems lack support for resource aware distribution. 7.",
                "CONCLUSION AND ONGOING WORK Based on the fragmented object model and the architecture of the EDAS environment, decentralized adaptive services can be easily designed, implemented and executed.",
                "As described the resource management can be decomposed in two main problems that have to be solved.",
                "Controlling and managing of resource limits including ensuring that the assigned resources are available (even in the context of node crashes) and the autonomous placement of services.",
                "For both problems we offer a solution, a currently implemented simulation environment will verify their feasibility.",
                "In a next step the resource management will be integrate in an already implemented prototype of the EDAS architecture.",
                "As described we have already an early implementation of the framework for the decentralized adaptive services.",
                "This framework has to be extended to smoothly interact with the resource management and the EDAS architecture.",
                "In a final step we need to implement some services that verify the usability of the whole EDAS project. 8.",
                "REFERENCES [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III.",
                "A new major seti project based on project serendip data and 100,000 personal computers.",
                "In Proc. of the Fifth Intl.",
                "Conf. on Bioastronomy, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck.",
                "Decentralized, Adaptive Services: The AspectIX Approach for a Flexible and Secure Grid Environment.",
                "In Grid Services Engineering and Management (GSEM 2004), Erfurt, Germany, 2004.",
                "Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, and Andreas I. Schmied.",
                "Integrating fragmented objects into a CORBA environment.",
                "In Proc. of the Net.ObjectDays, 2003. [4] Tiberiu Rotaru and Hans-Heinrich N¨ageli.",
                "Dynamic load balancing by diffusion in heterogeneous systems.",
                "J.",
                "Parallel Distrib.",
                "Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, and M. Shapiro.",
                "Fragmented objects for distributed abstractions. [6] Jennifer M. Schopf.",
                "Ten actions when grid scheduling: the user as a grid scheduler. pages 15-23, 2004. [7] Leah Epstein and Rob van Stee.",
                "Optimal online bounded space multidimensional packing.",
                "In SODA 04: Proceedings of the fifteenth annual ACM-SIAM symposium on Discrete algorithms, pages 214-223, Philadelphia, PA, USA, 2004.",
                "Society for Industrial and Applied Mathematics. [8] Hans P. Reiser, Martin Steckermeier, and Franz J. Hauck.",
                "IDLflex: a flexible and generic compiler for CORBA IDL.",
                "In Proc. of the Net.ObjectDays (Erfurt, Germany, Sep. 10-13, 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt, and Franz J. Hauck.",
                "Platform-independent object migration in CORBA.",
                "In Proc. of the OTM05 Conferences (DOA, Agia Napa, Cyprus, Oct 31-Nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser, and Franz J. Hauck.",
                "Stable, time-bound references in context of dynamically changing environments.",
                "In MDC05: Proc. of the 25th IEEE Int.",
                "Conf. on Distributed Computing Systems - Workshops (ICDCS 2005 Workshops), 2005. [11] Ian Foster, Carl Kesselman, and Steven Tuecke.",
                "The anatomy of the Grid: Enabling scalable virtual organizations.",
                "Lecture Notes in Computer Science, 2150, 2001. [12] Thomas Fahringer and Alexandru Jugravu.",
                "Javasymphony: new directives to control and synchronize locality, parallelism, and load balancing for cluster and grid-computing.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 8-17, New York, NY, USA, 2002.",
                "ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann, and Henri E. Bal.",
                "Ibis: an efficient java-based grid programming environment.",
                "In JGI 02: Proceedings of the 2002 joint ACM-ISCOPE conference on Java Grande, pages 18-27, New York, NY, USA, 2002.",
                "ACM Press. [14] Alberto Montresor, Renzo Davoli, and Ozalp Babaoglu.",
                "Middleware for dependable network services in partitionable distributed systems.",
                "SIGOPS Oper.",
                "Syst.",
                "Rev., 35(1):73-96, 2001. [15] H. Meling and B. Helvik.",
                "Arm: Autonomous replication management in jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro.",
                "Fragmented objects for distributed abstractions.",
                "In Readings in Distributed Computing Systems. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum, and Wiebren de Jonge.",
                "An object model for flexible distributed systems.",
                "In Proceedings of the 1st Annual ASCI Conference, pages 69-78, 1995.",
                "Article 5"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        }
    }
}