{
    "id": "J-20",
    "original_text": "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities. These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle. We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors. With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease. The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed. Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously. Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle. We prove that the clearing problem with this cycle-length constraint is NP-hard. Solving it exactly is one of the main challenges in establishing a national kidney exchange. We present the first algorithm capable of clearing these markets on a nationwide scale. The key is incremental problem formulation. We adapt two paradigms for the task: constraint generation and column generation. For each, we develop techniques that dramatically improve both runtime and memory usage. We conclude that column generation scales drastically better than constraint generation. Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges. Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges. The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted. Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1. INTRODUCTION The role of kidneys is to filter waste from blood. Kidney failure results in accumulation of this waste, which leads to death in months. One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine. Several visits are required per week, and each takes several hours. The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death. Only 12% of dialysis patients survive 10 years [23]. Instead, the preferred treatment is a kidney transplant. Kidney transplants are by far the most common transplant. Unfortunately, the demand for kidneys far outstrips supply. In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant. During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney. The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys. Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US. However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation. In 2005, there were 6,563 live donations in the US. The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible. In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney. However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor. These markets are examples of barter exchanges. In a barter-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other. These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle. Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9]. For many years, there has even been a large shoe exchange in the United States [10]. People with different-sized feet use this to avoid having to buy two pairs of shoes. Leg amputees have a separate exchange to share the cost of buying a single pair of shoes. We can encode a barter exchange market as a directed graph G = (V, E) in the following way. Construct one vertex for each agent. Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj. The weight we of e represents the utility to vi of obtaining vjs item. A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent. The weight wc of a cycle c is the sum of its edge weights. An exchange is a collection of disjoint cycles. The weight of an exchange is the sum of its cycle weights. A social welfare maximizing exchange is one with maximum weight. Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1. The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}. Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market. The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons. For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.) This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms. Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3. Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected. For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed). More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness. In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3. One approach then might be to look for a good heuristic or approximation algorithm. However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem. For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle. Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles. Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all. In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale. Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them. The key then is incremental problem formulation. We adapt two paradigms for the task: constraint generation and column generation. For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17]. For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years. Those results are conservative in two ways. Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months. It has been reported to us that the market could be almost double this size. Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm). Allowing length-3 cycles leads to additional significant gains. This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15]. In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors). Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].) Whilst this does not hold for general barter exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm. At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions. In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation. Both problems are NP-hard. Both are best solved using tree search techniques. Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].) However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways. The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice. In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.) Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows. Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms. Section 3 contains a proof that the market clearing decision problem is NP-complete. Sections 4 and 5 each contain an ILP formulation of the clearing problem. We also detail in those sections our techniques used to solve those programs on large instances. Section 6 presents experiments on the various techniques. Section 7 discusses recent fielding of our algorithm. Finally, we present our conclusions in Section 8, and suggest future research directions. 2. MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17]. This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution. Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17]. Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor. These probabilities are based on actual real-world population data. Each patient is assigned a potential donor with a random blood type and relation to the patient. If the patient and potential donor are incompatible, the two are entered into the market. Blood type and tissue type information is then used to decide on which patients and donors are compatible. One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.) Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3]. This means that the maximum-weight exchange has maximum cardinality. Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market. The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length. For each market size, the bounds were computed over 10 randomly generated markets. Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange. Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size. Table 2 gives additional characteristics of the kidney-exchange market. Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3. Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3. PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete. Theorem 1. Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete. Proof. It is clear that this problem is in NP. For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q. One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple. Instead then, we use the following reduction. Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z. For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69]. Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z. It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching. We will show the construction admits a perfect cycle cover by short cycles. If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively. Also add the cycle ª xi a, yi b, zi c « . Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively. It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles. Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets. It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4. SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge. This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints. Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item. Add an edge ev with weight 0 between each agent v and its own item. At this point, the encoding is a perfect matching. Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj. Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item. It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching. Figure 3 contains the bipartite graph encoding of the example market from Figure 1. The weight-0 edges are encoded by dashed lines, while the market edges are in bold. Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1. Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints. Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied. If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP. For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution. Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory. Therefore, we use a tree search with an incremental formulation approach. Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process. We begin with only a small subset of the constraints in the ILP. Since this ILP is small, CPLEX can solve its LP relaxation. We then check whether any of the missing constraints are violated by the fractional solution. If so, we generate a set of these constraints, add them to the ILP, and repeat. Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it. In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children. At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated. Clearly, this approach yields an optimal solution once the tree search finishes. We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include). We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail. While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution. We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators. In each, given a fractional solution, we construct the subgraph of edges with positive value. This graph is much smaller than the original graph, so we can perform the following computations efficiently. In our first constraint generator, we simply search for length-L paths with value sum more than L − 1. For any such path, we restrict its sum to be at most L − 1. Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths. In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L . This generator made the algorithm slower, so we went in the other direction in developing our final generator. It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices. In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches. Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5. SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle. This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2. Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2. It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph. Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1. We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation. The edge formulation can be solved in polynomial time when there are no constraints on the cycle size. The cycle formulation can be solved in polynomial time when the cycle size is at most 2. We now consider the case of short cycles of length at most L, where L ≥ 3. Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution. These bounds help prune subtrees and guide the search in the usual ways. Theorem 2. The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation. Proof. Consider an optimal solution to the LP relaxation of the cycle formulation. We show how to construct an equivalent solution in the edge formulation. For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member. Also, define the value of a vertex in the same manner. Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied. It remains to show that none of the path constraints are violated. Let p be any length-L path in the graph. Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1. Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p). Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true. Consider a graph which is simply a cycle with n edges. Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2. Hence, the cycle formulation is tighter than the edge formulation. Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market. With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6). To address this problem, we used an incremental formulation approach. The first step in LP-guided tree search is to solve the LP relaxation. Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach. However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation. The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP. We explain this further by way of an example. Consider the market in Figure 1 with L = 2. Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation. Let P be the restriction of P containing columns c1 and c3 only. Let D be the dual of P , that is, D is just D without the constraint c2. Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 . While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D). We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2. It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 . Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve. Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat. The problem of finding a violated constraint is called the pricing problem. Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices. If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality. In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles. This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price. We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1]. This approach does not scale however. A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2). This is too many cycles to keep in memory. Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price. We do this using a depth-first search algorithm on the market graph (see Figure 1). In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight. We also use several pruning rules to determine if the current search path can lead to a positive weight cycle. For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex. Even with these pruning rules, column generation is a bottleneck. Hence, we also implemented the following optimizations. Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases. In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration. Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found. However, we avoid this for the following reason. If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles. In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP. Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP. Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP. Of course, we cannot include so many columns that we run out of memory. We experimented with several column seeders. In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP. We implemented two heuristics. The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices. The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles. These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns. For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size. However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound. Our best column seeder constructs a random collection of feasible cycles. Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection. Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle. If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex. In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles. This last approach outperforms the heuristic seeders described above. However, in our algorithm, we use a combination that takes the union of all columns from all three seeders. In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder. We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation. Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices. Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns). There is no good general solution to the tailing-off effect. However, to mitigate this effect, we take advantage of the following problem-specific observation. Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.) Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4). Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns! In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles. Even though the first problem is polynomial-time solvable, this is not trivial for large instances. For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4. To make this idea work then, we used column generation to solve the edge formulation. This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain. We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3. We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound. The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed. This leads to memory problems on markets with as few as 4,000 patients. Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP. To address these issues, we implemented a column management scheme to limit the size of the restricted LP. Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns. If this is the case, we selectively remove columns until it is again below the threshold2 . As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution. It is unlikely that we delete such a cycle, and even if we do, it can always be generated again. Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time. There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value. Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied. This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above. However, the solutions we find are usually fractional. Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution. Briefly, this is the idea of branch-and-price. Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained). By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.) For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions. This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP. Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem). Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order. We also experimented with the A* node selection order [7, 2]. However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2). The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution. These solutions are lower bounds on the final optimal integral solutions. Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree. A primal heuristic is effective if it is efficient and constructs tight lower bounds. We experimented with two primal heuristics. The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles. Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning. We also tried using CPLEX as a primal heuristic. At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints. CPLEX has several built-in primal heuristics, which we can apply to this ILP. Moreover, we can use CPLEXs own tree search to find an optimal integral solution. In general, this tree search is much faster than our own. If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done. Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP. For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4). Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution. Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree. Hence, we make the following optimizations. Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target. If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search. Secondly, we limit the number of nodes in CPLEXs search tree. This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that. Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent. Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node. The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1. The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5. In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1. Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value. For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6. EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM. Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010. Figure 6 shows the runtime performance of four clearing algorithms. For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms. The first algorithm is CPLEX on the full cycle formulation. This algorithm fails to clear any markets with 1000 patients or more. Also, its running time on markets smaller than this is significantly worse than the other algorithms. The other algorithms are variations of the incremental column generation approach described in Section 5. We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles). Column Generation One column at a time. Column Management On, with 400,000 column limit. Optimality Prover On. Primal Heuristic Rounding & CPLEX tree search. Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients. In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness. First, we restrict the seeder so that it only begins with 10,000 cycles. This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve. However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed. For larger instance, this restricted seeder is clearly worse. Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3. As in many column generation problems, the tailing-off effect is substantial. By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7. FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006. We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted. While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives. We are in discussions with additional kidney exchanges that are interested in adopting our technology. This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges. At least computational scalability is no longer an obstacle. 8. CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors. With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease. Our work presents the first algorithm capable of clearing these markets on a nationwide scale. It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs. Thus there is no need to resort to approximate solutions. The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory. The key to our improvement is incremental problem formulation. We adapted two paradigms for the task: constraint generation and column generation. For each, we developed a host of techniques that substantially improve both runtime and memory usage. Some of the techniques use domain-specific observations while others are domain independent. We conclude that column generation scales dramatically better than constraint generation. For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques. For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies. Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster. Our algorithm also supports several generalizations, as desired by real-world kidney exchanges. These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts). Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19]. We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible. Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often). Two important directions for future work are to explicitly address both online and limited-information aspects of the problem. The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches. In fact, some work has been done on this in certain restricted settings [22, 24]. The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed. Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure. We are currently exploring a number of questions along these lines but there is certainly much more to be done. Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process. We also thank Don Sheehy for bringing to our attention the idea of shoe exchange. This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9. REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars. Branch-and-price: Column generation for solving huge integer programs. Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl. Generalized best-first search strategies and the optimality of A*. Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico. Exchanging kidneys - advances in living-donor transplantation. New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds. Path, trees, and flowers. Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson. Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery. A comparison of populations served by kidney paired donation and list paired donation. American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael. A formal basis for the heuristic determination of minimum cost paths. IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg. Solving airline crew-scheduling problems by branch-and-cut. Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver. Kidney exchange. Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver. A kidney exchange clearinghouse in New England. American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver. Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences. American Economic Review, forthcoming. [16] E. Rothberg. Gabows n3 maximum-weight matching algorithm: an implementation. The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico. Increasing the opportunity of live kidney donation by matching for two and three way exchanges. Transplantation, 81(5):773-782, 2006. [18] T. Sandholm. Optimal winner determination algorithms. In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds. MIT Press, 2006. [19] T. Sandholm and S. Suri. Side constraints and non-price attributes in markets. In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001. To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery. Kidney paired donation and optimizing the use of live donor organs. Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver. Dynamic kidney exchange. Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios. Optimal control of a paired-kidney exchange program. Management Science, 48(3):328-342, March 2002. 304",
    "original_translation": "Algoritmos de compensación para mercados de intercambio de trueque: Facilitando los intercambios de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales. El problema de compensación implica encontrar un intercambio que maximice el bienestar social cuando la longitud máxima de un ciclo está fija. Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente. Además, en los intercambios de trueque en general, más agentes se ven afectados si uno abandona un ciclo más largo. Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro. Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones. Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. La clave es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. Concluimos que la generación de columnas escala considerablemente mejor que la generación de restricciones. Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de riñón. Nuestro algoritmo reemplazó a CPLEX como el algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones. Las carreras de fósforos se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas]: [General] Términos Generales Algoritmos, Economía 1. INTRODUCCIÓN El papel de los riñones es filtrar los desechos de la sangre. La insuficiencia renal resulta en la acumulación de estos desechos, lo cual conduce a la muerte en meses. Una opción de tratamiento es la diálisis, en la que el paciente va a un hospital para que su sangre sea filtrada por una máquina externa. Se requieren varias visitas por semana, y cada una lleva varias horas. La calidad de vida en diálisis puede ser extremadamente baja, de hecho, muchos pacientes optan por retirarse de la diálisis, lo que conduce a una muerte natural. Solo el 12% de los pacientes en diálisis sobreviven 10 años [23]. En cambio, el tratamiento preferido es un trasplante de riñón. Los trasplantes de riñón son, con mucho, los trasplantes más comunes. Desafortunadamente, la demanda de riñones supera con creces la oferta. En los Estados Unidos en 2005, 4,052 personas murieron esperando un trasplante de riñón que les salvara la vida. Durante este tiempo, casi 30,000 personas fueron añadidas a la lista nacional de espera, mientras que solo 9,913 personas salieron de la lista después de recibir un riñón de donante fallecido. La lista de espera actualmente tiene más de 70,000 personas, y el tiempo de espera mediano varía de 2 a 5 años, dependiendo del tipo de sangre. Para muchos pacientes con enfermedad renal, la mejor opción es encontrar un donante vivo, es decir, una persona sana dispuesta a donar uno de sus dos riñones. Aunque existen mercados para comprar y vender riñones de donantes vivos, la comercialización de órganos humanos es casi universalmente considerada como antiética, y la práctica suele ser explícitamente ilegal, como en los Estados Unidos. Sin embargo, en la mayoría de los países, la donación en vida es legal, siempre y cuando se realice como un regalo sin compensación financiera. En 2005, hubo 6,563 donaciones en vida en los Estados Unidos. El número de donaciones en vida habría sido mucho mayor si no fuera por el hecho de que, con frecuencia, un posible donante y su receptor previsto son incompatibles en tipo de sangre o tipo de tejido. En el pasado, el donante incompatible fue enviado a casa, dejando al paciente a la espera de un riñón de un donante fallecido. Sin embargo, ahora hay algunos intercambios renales regionales en los Estados Unidos, en los que los pacientes pueden intercambiar sus donantes incompatibles entre sí, para así obtener cada uno un donante compatible. Estos mercados son ejemplos de intercambios de trueque. En un mercado de intercambio por trueque, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Los intercambios de trueque son ubicuos: ejemplos incluyen Peerflix (DVDs) [11], Read It Swap It (libros) [12], e Intervac (casas de vacaciones) [9]. Durante muchos años, incluso ha habido un gran intercambio de zapatos en los Estados Unidos [10]. Las personas con pies de diferentes tamaños usan esto para evitar tener que comprar dos pares de zapatos. Los amputados de pierna tienen un intercambio separado para compartir el costo de comprar un par de zapatos. Podemos codificar un mercado de intercambio de trueque como un grafo dirigido G = (V, E) de la siguiente manera. Construye un vértice para cada agente. Agregar un borde ponderado e desde un agente vi hacia otro vj, si vi desea el artículo de vj. El peso que representamos de e es la utilidad para vi de obtener el artículo vjs. Un ciclo c en este grafo representa un intercambio posible, donde cada agente en el ciclo obtiene el artículo del siguiente agente. El peso wc de un ciclo c es la suma de los pesos de sus aristas. Un intercambio es una colección de ciclos disjuntos. El peso de un intercambio es la suma de los pesos de sus ciclos. Un intercambio que maximiza el bienestar social es aquel con un peso máximo. La Figura 1 ilustra un mercado de ejemplo con 5 agentes, {v1, v2, . . . , v5}, en el que todos los bordes tienen peso 1. El mercado tiene 4 ciclos, c1 = v1, v2, c2 = v2, v3, c3 = v3, v4 y c4 = v1, v2, v3, v4, v5, y dos intercambios maximales (de inclusión), a saber, M1 = {c4} y M2 = {c1, c3}. El intercambio M1 tiene tanto el peso máximo como la cardinalidad máxima (es decir, incluye la mayor cantidad de aristas/vértices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figura 1: Mercado de intercambio de trueque de ejemplo. El problema de compensación consiste en encontrar un intercambio de peso máximo que consista en ciclos con una longitud de a lo sumo una pequeña constante L. Esta restricción de longitud de ciclo surge naturalmente por varias razones. Por ejemplo, en un intercambio de riñón, todas las operaciones en un ciclo deben realizarse simultáneamente; de lo contrario, un donante podría retractarse después de que su pareja incompatible haya recibido un riñón. (No se puede redactar un contrato vinculante para donar un órgano). Esto da lugar a una restricción logística en el tamaño del ciclo: incluso si todos los donantes son operados primero y se utiliza el mismo personal e instalaciones para luego operar a los receptores, un ciclo k requiere entre 3k y 6k médicos, alrededor de 4k enfermeras y casi 2k salas de operaciones. Debido a tales limitaciones de recursos, es probable que el próximo mercado nacional de intercambio de riñones solo permita ciclos de longitud 2 y 3. Otra motivación para ciclos cortos es que si el ciclo falla en intercambiarse, menos agentes se ven afectados. Por ejemplo, las pruebas de último minuto en un intercambio de riñones a menudo revelan nuevas incompatibilidades que no fueron detectadas en las pruebas iniciales (en base a las cuales se construyó el grafo de compatibilidad). Más generalmente, un agente puede abandonar un ciclo si sus preferencias han cambiado, o simplemente no cumple con sus obligaciones (como enviar un libro a otro agente en el ciclo) debido a olvidos. En la Sección 3, demostramos que (la versión de decisión del) problema de despeje es NP-completo para L ≥ 3. Una posible estrategia sería buscar un buen heurístico o algoritmo de aproximación. Sin embargo, por dos razones, buscamos un algoritmo exacto basado en un programa lineal entero (PLE), que resolvemos utilizando una búsqueda especializada en árboles. • Primero, cualquier pérdida de optimalidad podría llevar a muertes de pacientes innecesarias. • Segundo, una característica atractiva de utilizar una formulación de PLE es que permite modelar fácilmente una serie de variaciones en el objetivo y agregar restricciones adicionales al problema. Por ejemplo, si se cree que los ciclos de 3 elementos tienen más probabilidades de fallar que los ciclos de 2 elementos, entonces simplemente se les puede asignar un peso que sea apropiadamente menor que 3/2 del peso de un ciclo de 2 elementos. O, si por diversas razones (por ejemplo, éticas) se requiere un intercambio de cardinalidad máxima, al menos se puede encontrar en una segunda pasada la solución (de entre todas las soluciones de cardinalidad máxima) que tenga el menor número de 3-ciclos. Otras variaciones que se pueden resolver incluyen encontrar diversas formas de colecciones de ciclos tolerantes a fallos (no disjuntas) en caso de que ciertos pares que se creían compatibles resulten ser incompatibles después de todo. En este documento, presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Las codificaciones de ILP directas son demasiado grandes para siquiera construirse en el hardware actual, sin mencionar resolverlas. La clave entonces es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas (principalmente específicas del problema) que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. 1.1 Trabajos Previos Varios artículos recientes han utilizado simulaciones y algoritmos de compensación de mercado para explorar el impacto de un intercambio nacional de riñones [13, 20, 6, 14, 15, 17]. Por ejemplo, utilizando el algoritmo de coincidencia máxima de Edmonds [4], [20] se muestra que un mercado nacional de intercambio por pares (utilizando solo ciclos de longitud 2) resultaría en más trasplantes, tiempos de espera reducidos y ahorros de $750 millones en costos de atención médica durante 5 años. Esos resultados son conservadores de dos maneras. En primer lugar, el mercado simulado contenía solo 4,000 pacientes iniciales, con 250 pacientes añadidos cada 3 meses. Se nos ha informado que el mercado podría ser casi el doble de este tamaño. En segundo lugar, los intercambios se restringieron a ciclos de longitud 2 (porque eso es todo lo que se puede modelar como coincidencia máxima y resolver utilizando el algoritmo de Edmonds). Permitir ciclos de longitud 3 conlleva a ganancias adicionales significativas. Esto se ha demostrado en mercados de intercambio de riñones con 100 pacientes utilizando CPLEX para resolver una codificación de programa entero del problema de compensación [15]. En este documento, presentamos un algoritmo alternativo para este programa entero que puede despejar mercados con más de 10,000 pacientes (y el mismo número de donantes dispuestos). Permitir ciclos de longitud mayor a 3 a menudo no conduce a ninguna mejora en el tamaño del intercambio [15]. (Además, en un modelo teórico simplificado, cualquier intercambio de riñón se puede convertir en uno con ciclos de longitud de a lo sumo 4 [15].) Si bien esto no se aplica a intercambios de trueque generales, ni siquiera a todos los mercados de intercambio de riñones, en la Sección 5.2.3 hacemos uso de la observación de que los ciclos cortos son suficientes para aumentar drásticamente la velocidad de nuestro algoritmo. A un nivel alto, el problema de compensación para intercambios de trueque es similar al problema de compensación (también conocido como problema de determinación de ganadores) en subastas combinatorias. En ambos contextos, la idea es recopilar toda la información pertinente sobre los agentes en un punto central de compensación y ejecutar un algoritmo centralizado de compensación para determinar la asignación. Ambos problemas son NP-duros. Ambos se resuelven mejor utilizando técnicas de búsqueda en árboles. Desde 1999, se ha realizado un trabajo significativo en informática y investigación de operaciones sobre algoritmos de búsqueda de árboles óptimos más rápidos para despejar subastas combinatorias. (Para una revisión reciente, consulte [18].) Sin embargo, el problema de compensación del intercambio de riñones (con un límite de 3 o más en el tamaño del ciclo) es diferente del problema de compensación de la subasta combinatoria de formas significativas. La diferencia más importante es que las formulaciones naturales del problema de subasta combinatoria tienden a ajustarse fácilmente en la memoria, por lo que el tiempo es el cuello de botella en la práctica. Por el contrario, las formulaciones naturales del problema de intercambio de riñones (con L = 3) ocupan al menos espacio cúbico en el número de pacientes para incluso modelar, y por lo tanto la memoria se convierte en un cuello de botella mucho antes que el tiempo al utilizar la búsqueda de árbol estándar, como branch-and-cut en CPLEX, para abordar el problema. (En una computadora de 1GB y un generador de instancias estándar realista, discutido más adelante, CPLEX 10.010 se queda sin memoria en cinco de las diez instancias de 900 pacientes y en las diez de las diez instancias de 1,000 pacientes que generamos). Por lo tanto, los enfoques que se han desarrollado para subastas combinatorias no pueden manejar el problema del intercambio de riñones. 1.2 Esquema del documento El resto del documento está organizado de la siguiente manera. La sección 2 discute el proceso mediante el cual generamos datos realistas del mercado de intercambio de riñones, con el fin de comparar los algoritmos de compensación. La sección 3 contiene una demostración de que el problema de decisión de compensación del mercado es NP-completo. Las secciones 4 y 5 contienen cada una una formulación ILP del problema de compensación. También detallamos en esas secciones nuestras técnicas utilizadas para resolver esos programas en instancias grandes. La sección 6 presenta experimentos sobre las diversas técnicas. La sección 7 discute la implementación reciente de nuestro algoritmo. Finalmente, presentamos nuestras conclusiones en la Sección 8 y sugerimos direcciones para investigaciones futuras. CARACTERÍSTICAS DEL MERCADO Y GENERADOR DE INSTANCIAS Probamos los algoritmos en mercados simulados de intercambio de riñones, los cuales son generados por un proceso descrito en Saidman et al. [17]. Este proceso se basa en los extensos datos a nivel nacional mantenidos por la Red Unida para el Comparto de Órganos (UNOS), por lo que genera una distribución realista de instancias. Varios artículos han utilizado variaciones de este proceso para demostrar la efectividad de un intercambio nacional de riñones (extrapolando de pequeñas instancias o restringiendo la compensación a ciclos de 2) [6, 20, 14, 13, 15, 17]. En resumen, el proceso implica generar pacientes con un tipo de sangre, sexo y probabilidad de ser incompatible en el tipo de tejido con un donante elegido al azar. Estas probabilidades se basan en datos reales de la población del mundo real. A cada paciente se le asigna un posible donante con un tipo de sangre aleatorio y una relación con el paciente. Si el paciente y el posible donante son incompatibles, ambos son ingresados en el mercado. La información del tipo de sangre y del tipo de tejido se utiliza luego para decidir qué pacientes y donantes son compatibles. Una complicación, manejada por el generador, es que si la paciente es mujer y ha tenido un hijo con su potencial donante, entonces la probabilidad de que los dos sean incompatibles aumenta. (Esto se debe a que la madre desarrolla anticuerpos contra su pareja durante el embarazo). Finalmente, aunque nuestros algoritmos pueden manejar funciones de peso más generales, los pacientes tienen una utilidad de 1 para donantes compatibles, ya que su probabilidad de supervivencia no se ve afectada por la elección del donante [3]. Esto significa que el intercambio de peso máximo tiene la máxima cardinalidad. La Tabla 1 proporciona límites inferiores y superiores sobre el tamaño de un intercambio de máxima cardinalidad en el mercado de intercambio de riñones. Los límites inferiores se encontraron al despejar el mercado solo con ciclos de longitud 2, mientras que los límites superiores no tenían restricción en la longitud del ciclo. Para cada tamaño de mercado, los límites fueron calculados sobre 10 mercados generados aleatoriamente. Ten en cuenta que puede haber una gran cantidad de variabilidad en los mercados: en un mercado de 5000 pacientes, menos de 1000 pacientes estaban en el intercambio de cardinalidad máxima. Tamaño máximo de intercambio Longitud-2 ciclos solamente Ciclos arbitrarios Pacientes Media Máximo Media Máximo 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Tabla 1: Límites superiores e inferiores en el tamaño del intercambio. La Tabla 2 proporciona características adicionales del mercado de intercambio de riñones. Ten en cuenta que un mercado con 5000 pacientes puede tener más de 450 millones de ciclos de longitud 2 y 3. Longitud de los bordes 2 y 3 ciclos Pacientes Media Máx. Media Máx. 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Tabla 2: Características del mercado. 297 COMPLEJIDAD DEL PROBLEMA En esta sección, demostramos que (la versión de decisión del) problema de compensación de mercado con ciclos cortos es NP-completo. Teorema 1. Dado un grafo G = (V, E) y un entero L ≥ 3, el problema de decidir si G admite una cubierta de ciclos perfecta que contenga ciclos de longitud como máximo L es NP-completo. Prueba. Es claro que este problema está en NP. Para la NP-dificultad, reducimos desde 3D-Matching, que es el problema de, dado conjuntos disjuntos X, Y y Z de tamaño q, y un conjunto de triples T ⊆ X × Y × Z, decidir si existe un subconjunto disjunto M de T con tamaño q. Una idea directa es construir un grafo tripartito con conjuntos de vértices X ∪ Y ∪ Z y aristas dirigidas (xa, yb), (yb, zc) y (zc, xa) para cada triple ti = {xa, yb, zc} ∈ T. Sin embargo, no es demasiado difícil ver que esta codificación falla porque una cobertura de ciclo perfecta puede incluir un ciclo sin un triple correspondiente. En cambio, utilizamos la siguiente reducción. Dado una instancia de 3D-Matching, construye un vértice para cada elemento en X, Y y Z. Para cada tripleta, ti = {xa, yb, zc}, construya el dispositivo en la Figura 2, que es similar a uno en Garey y Johnson [5, pp 68-69]. Ten en cuenta que los dispositivos se intersecan solo en los vértices de X ∪ Y ∪ Z. Es claro que esta construcción puede realizarse en tiempo polinómico. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figura 2: Dispositivo de NP-completitud para la tripleta ti y la longitud máxima del ciclo L. Sea M un emparejamiento 3D perfecto. Mostraremos que la construcción admite una cobertura perfecta de ciclos mediante ciclos cortos. Si ti = {xa, yb, zc} ∈ M, añade desde el gadget de ti los tres ciclos de longitud L que contienen a xa, yb y zc respectivamente. También añade el ciclo ª xi a, yi b, zi c «. De lo contrario, si ti ∉ M, añade los tres ciclos de longitud L que contienen xi a, yi b y zi c respectivamente. Es claro que todos los vértices están cubiertos, ya que M particiona X × Y × Z. Por el contrario, supongamos que tenemos una cobertura perfecta mediante ciclos cortos. Ten en cuenta que la construcción solo tiene ciclos cortos de longitudes 3 y L, y ningún ciclo corto involucra vértices distintos de dos gadgets diferentes. Es fácil ver entonces que en una cubierta perfecta, cada gadget ti contribuye ciclos de acuerdo a los casos anteriores: ti ∈ M, o ti /∈ M. Por lo tanto, existe un Emparejamiento 3D perfecto en la instancia original. 4. ENFOQUES DE SOLUCIÓN BASADOS EN UNA FORMULACIÓN DE ARISTAS En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada arista. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos sin restricciones de longitud de ciclo. Dado un mercado G = (V, E), construya un grafo bipartito con un vértice para cada agente y un vértice para cada artículo. Agregar un borde ev con peso 0 entre cada agente v y su propio artículo. En este punto, la codificación es una coincidencia perfecta. Ahora, para cada arista e = (vi, vj) en el mercado original, añade una arista e con peso we entre el agente vi y el artículo de vj. Los emparejamientos perfectos en esta codificación corresponden exactamente con las cubiertas de ciclos, ya que cada vez que se toma un artículo de un agente, debe recibir el artículo de otro agente. Se deduce que el problema de despeje sin restricciones puede resolverse en tiempo polinómico encontrando un emparejamiento perfecto de peso máximo. La Figura 3 contiene la representación en forma de grafo bipartito del mercado de ejemplo de la Figura 1. Las aristas de peso 0 están codificadas con líneas discontinuas, mientras que las aristas de mercado están en negrita. Elementos Agentes v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figura 3: Codificación de emparejamiento perfecto del mercado en la Figura 1. Alternativamente, podemos resolver el problema codificándolo como un ILP con una variable para cada arista en el grafo de mercado original G. Este ILP, que se muestra a continuación, tiene la ventaja de que puede ser extendido de manera natural para tratar con restricciones de longitud de ciclo. Por lo tanto, para el resto de esta sección, este será el enfoque que seguiremos. Se busca un max e∈E tal que para todo vi ∈ V, se cumplan las restricciones de conservación eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 y la restricción de capacidad eout=(vi,vj ) eout ≤ 1. Si se permite que los ciclos tengan una longitud de como máximo L, es fácil ver que solo necesitamos hacer los siguientes cambios en el ILP. Para cada camino de longitud L (a lo largo del documento, no incluimos ciclos en la definición de camino) p = ep1, ep2, ..., epL, agregar una restricción ep1 + ep2 + ... + epL ≤ L − 1, que excluye al camino p de cualquier solución factible. Desafortunadamente, en un mercado con solo 1000 pacientes, el número de caminos de longitud 3 supera los 400 millones, por lo que ni siquiera podemos construir este ILP sin quedarnos sin memoria. Por lo tanto, utilizamos una búsqueda en árbol con un enfoque de formulación incremental. Específicamente, utilizamos CPLEX, aunque añadimos restricciones como planos de corte durante el proceso de búsqueda en el árbol. Comenzamos con solo un pequeño subconjunto de las restricciones en el ILP. Dado que este ILP es pequeño, CPLEX puede resolver su relajación LP. Luego verificamos si alguna de las restricciones faltantes es violada por la solución fraccional. Si es así, generamos un conjunto de estas restricciones, las añadimos al ILP y repetimos. Incluso una vez que se satisfacen todas las restricciones, puede que no haya una solución entera que coincida con el límite superior fraccional, y aunque la hubiera, el solucionador de PL podría no encontrarla. En estos casos, CPLEX ramifica en una variable (utilizamos la estrategia de ramificación predeterminada de CPLEX) y genera un nuevo nodo de búsqueda correspondiente a cada uno de los hijos. En cada nodo del árbol de búsqueda que se visita, se repite este proceso de resolver el LP y agregar restricciones. Claramente, este enfoque produce una solución óptima una vez que la búsqueda en el árbol finaliza. Todavía necesitamos explicar los detalles del generador de restricciones (es decir, seleccionar qué restricciones comenzar) y la generación de restricciones (es decir, seleccionar qué restricciones violadas incluir). Describimos brevemente estos en las dos subsecciones siguientes, respectivamente. 4.1 Sembrador de Restricciones El principal sembrador de restricciones que desarrollamos prohíbe cualquier camino de longitud L − 1 que no tenga un borde cerrando el ciclo desde su inicio hasta su final. Si bien es costoso computacionalmente encontrar estas restricciones, su adición enfoca la búsqueda lejos de los caminos que no pueden estar en la solución final. También intentamos sembrar el LP con una colección aleatoria de restricciones del ILP. 4.2 Generación de Restricciones Experimentamos con varios generadores de restricciones. En cada caso, dada una solución fraccional, construimos el subgrafo de aristas con valor positivo. Este gráfico es mucho más pequeño que el gráfico original, por lo que podemos realizar los cálculos siguientes de manera eficiente. En nuestro primer generador de restricciones, simplemente buscamos caminos de longitud L con una suma de valores mayor que L − 1. Para cualquier camino de este tipo, restringimos su suma para que sea como máximo L − 1. Ten en cuenta que si hay un ciclo c con longitud |c| > L, podría contener hasta |c| caminos que violan. En nuestro segundo generador de restricciones, solo agregamos una restricción para tales ciclos: la suma de aristas en el ciclo puede ser a lo sumo |c|(L − 1)/L. Este generador hizo que el algoritmo fuera más lento, por lo que optamos por ir en la dirección opuesta en el desarrollo de nuestro generador final. Agrega una restricción por cada camino p que viola, y además, agrega una restricción para cada camino con los mismos vértices interiores (sin contar los extremos) que p. Esto mejoró la velocidad general. 4.3 Rendimiento experimental Resultó que incluso con estas mejoras, el enfoque de formulación de aristas no puede despejar un intercambio de riñón con 100 vértices en el tiempo en que la formulación de ciclos (descrita más adelante en la Sección 5) puede despejar uno con 10,000 vértices. En otras palabras, los enfoques basados en generación de columnas resultaron ser drásticamente mejores que los enfoques basados en generación de restricciones. Por lo tanto, en el resto del documento nos enfocaremos en la formulación del ciclo y en los enfoques basados en la generación de columnas. 5. Enfoques de solución basados en una formulación cíclica. En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada ciclo. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos cuando los ciclos tienen longitud 2. Dado un mercado G = (V, E), construya un nuevo grafo en V con un peso wc en cada arista de ciclo c de longitud 2. Es fácil ver que los emparejamientos en este nuevo grafo corresponden a coberturas de ciclos por ciclos de longitud 2 en el grafo original del mercado. Por lo tanto, el problema de equilibrio de mercado con L = 2 se puede resolver en tiempo polinómico encontrando un emparejamiento de peso máximo. Figura 4: Codificación del emparejamiento de peso máximo del mercado en la Figura 1. Podemos generalizar este codificado para L arbitrario. Sea C(L) el conjunto de todos los ciclos de G con longitud a lo sumo L. Entonces el siguiente ILP encuentra la cobertura de ciclos de máximo peso por ciclos de C(L): max c∈C(L) wcc sujeto a c:vi∈c c ≤ 1 ∀vi ∈ V con c ∈ {0, 1} ∀c ∈ C(L) 5.1 Formulación de Arista vs Ciclo En esta sección, consideramos los méritos de la formulación de arista y la formulación de ciclo. La formulación del problema del borde se puede resolver en tiempo polinómico cuando no hay restricciones en el tamaño del ciclo. La formulación del ciclo se puede resolver en tiempo polinómico cuando el tamaño del ciclo es a lo sumo 2. Ahora consideramos el caso de ciclos cortos de longitud como máximo L, donde L ≥ 3. Nuestros algoritmos de búsqueda de árboles utilizan la relajación LP de estas formulaciones para proporcionar cotas superiores de la solución óptima. Estos límites ayudan a podar subárboles y guiar la búsqueda de las formas habituales. Teorema 2. La relajación LP de la formulación del ciclo domina débilmente la relajación LP de la formulación del borde. Prueba. Considera una solución óptima para la relajación LP de la formulación del ciclo. Mostramos cómo construir una solución equivalente en la formulación de bordes. Para cada arista en el grafo, establezca su valor como la suma de los valores de todos los ciclos de los cuales es miembro. También, define el valor de un vértice de la misma manera. Debido a las restricciones del ciclo, las restricciones de conservación y capacidad de la codificación de los bordes se cumplen claramente. Queda por demostrar que ninguna de las restricciones de ruta se viola. Sea p cualquier camino de longitud L en el grafo. Dado que p tiene L−1 vértices interiores (sin contar los extremos), la suma de estos vértices interiores es como máximo L−1. Ahora, para cualquier ciclo c de longitud como máximo L, el número de aristas que tiene en p, que denotamos como ec(p), es como máximo el número de vértices interiores que tiene en p, que denotamos como vc(p). Por lo tanto, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 La afirmación contraria de este teorema no es verdadera. Considera un grafo que es simplemente un ciclo con n aristas. Claramente, la relajación LP de la formulación del ciclo tiene un valor óptimo de 0, ya que no hay ciclos de tamaño menor o igual a L. Sin embargo, la formulación de aristas tiene una solución de tamaño n/2, con cada arista teniendo un valor de 1/2. Por lo tanto, la formulación del ciclo es más ajustada que la formulación del borde. Además, para un grafo con m aristas, la formulación de aristas requiere O(m3) restricciones, mientras que la formulación de ciclos solo requiere O(m2). 5.2 Generación de columnas para la tabla de PL. La Tabla 2 muestra cómo el número de ciclos de longitud a lo sumo 3 crece con el tamaño del mercado. Con una variable por ciclo en la formulación del ciclo, CPLEX ni siquiera puede liquidar mercados con 1,000 pacientes sin quedarse sin memoria (ver Figura 6). Para abordar este problema, utilizamos un enfoque de formulación incremental. El primer paso en la búsqueda de árbol guiada por LP es resolver la relajación LP. Dado que la formulación del ciclo no cabe en la memoria, esta etapa de LP fallaría inmediatamente sin un enfoque de formulación incremental. Sin embargo, motivados por la observación de que una solución de intercambio puede incluir solo una pequeña fracción de los ciclos, exploramos el enfoque de utilizar la generación de columnas (es decir, ciclos). La idea de la generación de columnas es comenzar con un LP restringido que contenga solo un pequeño número de columnas (variables, es decir, ciclos), y luego agregar columnas repetidamente hasta que una solución óptima para este LP parcialmente formulado sea una solución óptima para el LP original (también conocido como maestro). Explicamos esto más a fondo mediante un ejemplo. Considera el mercado en la Figura 1 con L = 2. La Figura 5 muestra el LP maestro correspondiente, P, y su dual, D. El primal P maximiza 2c1 + 2c2 + 2c3 sujeto a c1 ≤ 1 (v1), c1 + c2 ≤ 1 (v2), c2 + c3 ≤ 1 (v3), c3 ≤ 1 (v4) con c1, c2, c3 ≥ 0. El dual D minimiza v1 + v2 + v3 + v4 sujeto a v1 + v2 ≥ 2 (c1), v2 + v3 ≥ 2 (c2), v3 + v4 ≥ 2 (c3) con v1, v2, v3, v4 ≥ 0. Figura 5: Formulación del ciclo. Sea P la restricción de P que contiene solo las columnas c1 y c3. Sea D el dual de P, es decir, D es simplemente D sin la restricción c2. Dado que P y D son pequeños, podemos resolverlos para obtener OPT(P) = OPT(D) = 4, con cOPT(P) = c1 = c3 = 1 y vOPT(D) = v1 = v2 = v3 = v4 = 1. Si cOP T (P ) debe ser una solución factible de P, resulta (afortunadamente) que vOP T (D ) es factible para D, de modo que OPT(D ) ≥ OPT(D). Podemos verificar esto comprobando que vOP T (D) cumple con las restricciones de D que aún no están en Di, es decir, la restricción c2. Se deduce que OPT(P) = OPT(D) ≥ OPT(D) = OPT(P), por lo que vOPT(P) es demostrablemente una solución óptima para P, a pesar de que P contiene solo un subconjunto estricto de las columnas de P. Por supuesto, puede resultar (desafortunadamente) que vOPT(D) no sea factible para D. Esto puede ocurrir como se muestra arriba si vOPT(D) = v1 = 2, v2 = 0, v3 = 0, v4 = 2. Aunque todavía podemos ver que OPT(D) = OPT(D), en general no podemos demostrarlo porque D y P son demasiado grandes para resolver. En cambio, dado que se viola la restricción c2, agregamos la columna c2 a P, actualizamos D y repetimos. El problema de encontrar una restricción violada se llama problema de fijación de precios. Aquí, el precio de una columna (ciclo en nuestra configuración) es la diferencia entre su peso y la suma de los valores duales de los vértices del ciclo. Si alguna columna de P tiene un precio positivo, su restricción correspondiente está violada y aún no hemos demostrado la optimalidad. En este caso, debemos seguir generando columnas para agregar a P. Problema de fijación de precios 5.2.1 Para instancias más pequeñas, podemos mantener una colección explícita de todos los ciclos factibles. Esto hace que el problema de fijación de precios sea fácil y eficiente de resolver: simplemente recorremos la colección de ciclos y buscamos ciclos con precio positivo. Incluso podemos encontrar ciclos con el precio más positivo, que son los más propensos a mejorar el valor objetivo de LP restringido [1]. Sin embargo, este enfoque no es escalable. Un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos de longitud de máximo 3 (ver Tabla 2). Esto es demasiados ciclos para mantener en la memoria. Por lo tanto, para instancias más grandes, debemos generar ciclos factibles mientras buscamos uno con un precio positivo. Realizamos esto utilizando un algoritmo de búsqueda en profundidad en el grafo del mercado (ver Figura 1). Para hacer esta búsqueda más rápida, exploramos los vértices en orden de valores no decrecientes, ya que es más probable que estos vértices pertenezcan a ciclos con peso positivo. También utilizamos varias reglas de poda para determinar si la ruta de búsqueda actual puede llevar a un ciclo de peso positivo. Por ejemplo, en un vértice dado en la búsqueda, podemos podar basándonos en el hecho de que cada vértice que visitemos a partir de este punto tendrá un valor al menos tan grande como el vértice actual. Incluso con estas reglas de poda, la generación de columnas es un cuello de botella. Por lo tanto, también implementamos las siguientes optimizaciones. Cuando la búsqueda exhaustiva demuestra que un vértice no pertenece a ningún ciclo de precios positivos, marcamos el vértice y no lo utilizamos como raíz de una búsqueda en profundidad hasta que su valor dual disminuya. De esta manera, evitamos repetir innecesariamente nuestros esfuerzos computacionales de una iteración previa de generación de columnas. Finalmente, a veces puede ser beneficioso para la generación de columnas incluir varias columnas de precio positivo en una iteración, ya que puede ser más rápido generar una segunda columna una vez que se encuentra la primera. Sin embargo, evitamos esto por la siguiente razón. Si intentamos encontrar más columnas de precio positivo de las que se pueden encontrar, o si las columnas están muy separadas en el espacio de búsqueda, terminamos teniendo que generar y verificar una gran parte de la colección de ciclos factibles. En nuestros experimentos, hemos observado que esto ocurre en mercados con cientos de millones de ciclos, lo que resulta en costos de computación prohibitivamente caros. 5.2.2 Sembrado de Columnas Incluso si hay solo una pequeña brecha con la relajación principal del LP, la generación de columnas requiere muchas iteraciones para mejorar el valor objetivo del LP restringido. Cada una de estas 300 iteraciones es costosa, ya que debemos resolver el problema de fijación de precios y volver a resolver el LP restringido. Por lo tanto, aunque podríamos empezar sin columnas en el LP restringido, es mucho más rápido sembrar el LP con suficientes columnas para que el valor objetivo óptimo no esté muy lejos del LP principal. Por supuesto, no podemos incluir tantas columnas que nos quedemos sin memoria. Experimentamos con varios sembradores de columnas. En una clase de sembrador, utilizamos una heurística para encontrar un intercambio, y luego agregamos los ciclos de ese intercambio al LP restringido inicial. Implementamos dos heurísticas. El primero es un algoritmo voraz: para cada vértice en un orden aleatorio, si está sin cubrir, intentamos incluir un ciclo que lo contenga a él y a otros vértices sin cubrir. El otro heurístico utiliza un código especializado de emparejamiento de peso máximo [16] para encontrar una cobertura óptima mediante ciclos de longitud 2. Estas heurísticas funcionan extremadamente bien, especialmente teniendo en cuenta el hecho de que solo agregan un pequeño número de columnas. Por ejemplo, la Tabla 1 muestra que una cobertura óptima por ciclos de longitud 2 tiene casi el mismo peso que el intercambio con tamaño de ciclo no restringido. Sin embargo, tenemos suficiente memoria para incluir cientos de miles de columnas adicionales y así acercarnos aún más al límite superior. Nuestro mejor sembrador de columnas construye una colección aleatoria de ciclos factibles. Dado que un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos factibles, lleva demasiado tiempo generar y recorrer todos los ciclos factibles, por lo que no incluimos una colección aleatoria uniforme. En cambio, realizamos un recorrido aleatorio en el grafo del mercado (ver, por ejemplo, Figura 1), en el cual, después de cada paso del recorrido, probamos si hay un borde de regreso a nuestro camino que forme un ciclo factible. Si encontramos un ciclo, este se incluye en el LP restringido y comenzamos una nueva caminata desde un vértice aleatorio. En nuestros experimentos (ver Sección 6), utilizamos este algoritmo para sembrar el LP con 400,000 ciclos. Este último enfoque supera a los sembradores heurísticos descritos anteriormente. Sin embargo, en nuestro algoritmo, utilizamos una combinación que toma la unión de todas las columnas de los tres sembradores. En la Figura 6, comparamos el rendimiento del sembrador combinado con el sembrador combinado sin el sembrador de recolección aleatoria. No trazamos el rendimiento del algoritmo sin ningún sembrador en absoluto, porque puede llevar horas despejar mercados que de otra manera podríamos despejar en unos pocos minutos. 5.2.3 Demostrando la optimalidad. Recordemos que nuestro objetivo es encontrar una solución óptima para la relajación principal del LP. Usando la generación de columnas, podemos demostrar que una solución primal restringida es óptima una vez que todas las columnas tienen precios no positivos. Desafortunadamente, nuestro problema de compensación tiene el llamado efecto de disminución gradual [1, Sección 6.3], en el cual, aunque el primal restringido es óptimo a posteriori, se requiere un gran número de iteraciones adicionales para demostrar la optimalidad (es decir, eliminar todas las columnas de precio positivo). No hay una buena solución general para el efecto de disminución. Sin embargo, para mitigar este efecto, aprovechamos la siguiente observación específica del problema. Recuerde de la Sección 1.1 que, casi siempre, un intercambio de peso máximo con ciclos de longitud a lo sumo 3 tiene el mismo peso que un intercambio de peso máximo sin restricciones. (Sin embargo, esto no significa que el solucionador para el caso sin restricciones encontrará una solución con ciclos cortos). Además, el problema de despeje no restringido se puede resolver en tiempo polinómico (ver Sección 4). Por lo tanto, podemos calcular eficientemente un límite superior en la relajación principal del LP, y, cada vez que el primal restringido alcanza este límite superior, ¡hemos demostrado la optimalidad sin necesidad de eliminar todas las columnas de precio positivo! Para que esto mejore el tiempo de ejecución del algoritmo en general, necesitamos poder despejar el mercado sin restricciones en menos tiempo del que le lleva a la generación de columnas eliminar todos los ciclos de precios positivos. Aunque el primer problema es soluble en tiempo polinómico, esto no es trivial para instancias grandes. Por ejemplo, para un mercado con 10,000 pacientes y 25 millones de conexiones, el código especializado de emparejamiento de peso máximo [16] era demasiado lento, y CPLEX se quedó sin memoria en la codificación de formulación de bordes de la Sección 4. Para hacer funcionar esta idea, utilizamos generación de columnas para resolver la formulación de bordes. Esto implica comenzar con un pequeño subconjunto aleatorio de los bordes, y luego agregar bordes con precio positivo uno por uno hasta que no quede ninguno. Realizamos esta generación de columnas secundarias no en el grafo de mercado original G, sino en el grafo bipartito de emparejamiento perfecto de la Figura 3. Hacemos esto para que solo necesitemos resolver el LP, no el ILP, ya que la brecha de integralidad en el grafo bipartito de emparejamiento perfecto es 1, es decir, siempre existe una solución integral que alcanza el límite superior fraccional. El aumento de velocidad resultante en el algoritmo general es dramático, como se puede ver en la Figura 6. 5.2.4 Gestión de Columnas Si el valor óptimo del LP restringido inicial P está lejos del LP maestro P, entonces se generan un gran número de columnas antes de que se cierre la brecha. Esto conduce a problemas de memoria en mercados con tan solo 4,000 pacientes. Además, incluso antes de que la memoria se convierta en un problema, las iteraciones de generación de columnas se vuelven lentas debido a la sobrecarga adicional de resolver un LP más grande. Para abordar estos problemas, implementamos un esquema de gestión de columnas para limitar el tamaño del LP restringido. Siempre que agregamos columnas al LP, verificamos si contiene más de un número umbral de columnas. Si este es el caso, eliminamos selectivamente columnas hasta que esté nuevamente por debajo del umbral2. Como discutimos anteriormente, solo una pequeña fracción de todos los ciclos terminará en la solución final. Es poco probable que eliminemos dicho ciclo, y aun si lo hacemos, siempre se puede generar de nuevo. Por supuesto, no debemos ser demasiado agresivos con el umbral, ya que hacerlo podría contrarrestar las ganancias de rendimiento por iteración al aumentar significativamente el número de iteraciones necesarias para obtener un conjunto de columnas adecuado en el LP al mismo tiempo. Hay algunas columnas que nunca eliminamos, por ejemplo aquellas en las que hemos realizado ramificaciones (ver Sección 5.3.2), o aquellas con un valor de LP distinto de cero. Entre el resto, eliminamos aquellos con el precio más bajo, ya que corresponden a las restricciones duales que están más satisfechas. Este esquema de gestión de columnas funciona bien y nos ha permitido despejar mercados con 10,000 pacientes, como se ve en la Figura 6. 5.3 Búsqueda de Ramificación y Precio para el ILP Dado un problema grande de despeje de mercado, podemos resolver con éxito su relajación LP hasta la optimalidad utilizando las mejoras de generación de columnas descritas anteriormente. Sin embargo, las soluciones que encontramos suelen ser fraccionarias. Por lo tanto, en el paso 2 siguiente, basándonos en el tamaño de la memoria, establecemos el umbral en 400,000. El paso 301 implica realizar una búsqueda de árbol de ramificación y precio [1] para encontrar una solución integral óptima. Breve, esta es la idea de ramificar y fijar precios. Siempre que establecemos una variable fraccional en 0 o 1 (rama), tanto el LP maestro como la restricción con la que estamos trabajando se modifican (se restringen). Por defecto, entonces, necesitamos realizar la generación de columnas (es decir, el esfuerzo de fijar precios) en cada nodo del árbol de búsqueda para demostrar que la restricción restringida es óptima para el LP maestro restringido. (Sin embargo, como se discute en la Sección 5.2.3, calculamos el límite superior integral para el nodo raíz basado en relajar completamente la restricción de longitud del ciclo, y cada vez que algún LP de los nodos en el árbol alcance ese valor, no necesitamos seguir fijando precios de columnas en ese nodo). Para el problema de despeje con ciclos de longitud a lo sumo 3, hemos encontrado que rara vez hay una brecha entre las soluciones integrales y fraccionarias óptimas. Esto significa que podemos evitar en gran medida el costoso paso de fijar precios por nodo: cuando el LP restringido restringido tiene el mismo valor óptimo que su padre en la búsqueda del árbol, podemos demostrar la optimalidad del LP, como se muestra en la Sección 5.2.3, sin tener que incluir columnas adicionales en el LP restringido. Aunque CPLEX puede resolver ILPs, no admite la técnica de branch-and-price (por ejemplo, debido a posibles complicaciones específicas del problema que involucran la interacción entre la regla de ramificación y el problema de fijación de precios). Por lo tanto, implementamos nuestro propio algoritmo de ramificación y precio, el cual explora el árbol de búsqueda en orden de profundidad primero. También experimentamos con el orden de selección de nodos A* [7, 2]. Sin embargo, esta estrategia de búsqueda requiere significativamente más memoria, la cual encontramos que se empleaba mejor para acelerar la fase de generación de columnas (ver Sección 5.2.2). Los componentes principales restantes del algoritmo se describen en las dos siguientes subsecciones. 5.3.1 Heurísticas Primal Antes de ramificar en una variable fraccional, utilizamos heurísticas primales para construir una solución integral factible. Estas soluciones son límites inferiores de las soluciones integrales óptimas finales. Por lo tanto, cuando una solución fraccional restringida no es mejor que la mejor solución integral encontrada hasta el momento, podamos el subárbol actual. Una heurística primal es efectiva si es eficiente y construye límites inferiores ajustados. Experimentamos con dos heurísticas primarias. El primero es un algoritmo de redondeo simple [8]: incluir todos los ciclos con un valor fraccional de al menos 0.5, y luego, asegurando la viabilidad, agregar de forma codiciosa los ciclos restantes. Si bien esta heurística es eficiente, encontramos que los límites inferiores que construye rara vez permiten realizar un gran número de podas. También intentamos usar CPLEX como una heurística primal. En cualquier nodo dado del árbol de búsqueda, podemos convertir la relajación LP restringida de nuevo a un ILP reintroduciendo las restricciones de integralidad. CPLEX tiene varias heurísticas primales integradas, las cuales podemos aplicar a este ILP. Además, podemos utilizar la búsqueda de árbol propia de CPLEX para encontrar una solución integral óptima. En general, esta búsqueda de árbol es mucho más rápida que la nuestra. Si CPLEX encuentra una solución integral que coincida con el límite superior fraccional en el nodo raíz, hemos terminado. De lo contrario, no existe tal solución integral, o aún no tenemos la combinación correcta de ciclos en el LP restringido. Para los mercados de intercambio de riñones, generalmente es la segunda razón la que se aplica (ver Secciones 5.2.2 y 5.2.4). Por lo tanto, en algún momento de la búsqueda en el árbol, una vez que se han generado más columnas como resultado de la ramificación, la heurística de CPLEX encontrará una solución integral óptima. Aunque la búsqueda de árbol de CPLEX es más rápida que la nuestra, no es tan rápida como para poder aplicarla a cada nodo en nuestro árbol de búsqueda. Por lo tanto, realizamos las siguientes optimizaciones. En primer lugar, agregamos una restricción que requiere que el valor objetivo del ILP sea tan grande como el objetivo fraccional. Si este no es el caso, queremos abortar y proceder a generar más columnas con nuestra búsqueda de ramificación y precio. En segundo lugar, limitamos el número de nodos en el árbol de búsqueda de CPLEX. Esto se debe a que hemos observado que no existe una solución integral, CPLEX puede tardar mucho tiempo en demostrarlo. Finalmente, solo aplicamos la heurística CPLEX en un nodo si tiene un conjunto de ciclos suficientemente diferente al de su padre. Utilizar CPLEX como heurística primal tiene un gran impacto porque reduce el tamaño del árbol de búsqueda, evitando así todo el trabajo de fijación computacionalmente costoso en los nodos que no se generan en este árbol más pequeño. 5.3.2 Ramificador de Ciclo. Experimentamos con dos estrategias de ramificación, ambas seleccionan una variable por nodo. La primera estrategia, ramificación por certeza, selecciona aleatoriamente una variable de aquellas cuyo valor LP está más cercano a 1. La segunda estrategia, ramificación por incertidumbre, selecciona aleatoriamente una variable cuyo valor LP esté más cercano a 0.5. En ambos casos, se generan dos hijos del nodo correspondientes a dos subárboles, uno en el que la variable se establece en 0 y otro en el que se establece en 1. Nuestro recorrido en profundidad siempre elige explorar primero el subárbol en el que el valor de la variable está más cerca de su valor fraccionario. Para nuestro problema de despeje con ciclos de longitud como máximo 3, encontramos que el ramificado por incertidumbre es superior, rara vez requiriendo retroceso alguno. 6. RESULTADOS EXPERIMENTALES Todos nuestros experimentos se realizaron en Linux (Red Hat 9.0), utilizando una PC Dell con un procesador Intel Pentium 4 de 3GHz y 1GB de RAM. Dondequiera que usamos CPLEX (por ejemplo, al resolver el LP y como heurística primal, como se discutió en las secciones anteriores), usamos CPLEX 10.010. La Figura 6 muestra el rendimiento en tiempo de ejecución de cuatro algoritmos de limpieza. Para cada tamaño de mercado listado, generamos aleatoriamente 10 mercados e intentamos liquidarlos utilizando cada uno de los algoritmos. El primer algoritmo es CPLEX en la formulación del ciclo completo. Este algoritmo no logra despejar ningún mercado con 1000 pacientes o más. Además, su tiempo de ejecución en mercados más pequeños que este es significativamente peor que el de los otros algoritmos. Los otros algoritmos son variaciones del enfoque de generación de columnas incremental descrito en la Sección 5. Comenzamos con la siguiente configuración (todas las optimizaciones están activadas): Categoría Configuración Columna Sembrador Combinación de heurísticas de intercambio voraz y emparejamiento de peso máximo, y sembrador de caminata aleatoria (400,000 ciclos). Generación de columnas una columna a la vez. Gestión de columnas activada, con límite de 400,000 columnas. Comprobador de Optimalidad Encendido. Redondeo heurístico primal y búsqueda en el árbol de CPLEX. Regla de ramificación de incertidumbre. La combinación de estas optimizaciones nos permite liquidar fácilmente mercados con más de 10,000 pacientes. En cada uno de los dos próximos algoritmos, desactivamos una de estas optimizaciones para resaltar su efectividad. Primero, restringimos el sembrador para que solo comience con 10,000 ciclos. Esta configuración es más rápida para instancias más pequeñas, ya que las relajaciones de LP son más pequeñas y se resuelven más rápido. Sin embargo, al llegar a 5000 vértices, este efecto comienza a ser contrarrestado por la generación adicional de columnas que se debe realizar. Para una instancia más grande, este sembrador restringido es claramente peor. Finalmente, restauramos el sembrador a su configuración optimizada, pero esta vez, eliminamos el verificador de optimalidad descrito en la Sección 5.2.3. Como en muchos problemas de generación de columnas, el efecto de disminución es significativo. Aprovechando las propiedades de nuestro problema, logramos despejar un mercado con 10,000 pacientes en aproximadamente el mismo tiempo que habría tomado despejar un mercado de 6000 pacientes. 7. IMPLEMENTANDO LA TECNOLOGÍA Nuestro algoritmo e implementación reemplazaron a CPLEX como algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones, en diciembre de 2006. Realizamos una ejecución de prueba cada dos semanas, y los primeros trasplantes basados en nuestras soluciones ya han sido realizados. Aunque actualmente existen al menos cuatro intercambios de riñones en los Estados Unidos por razones políticas o interpersonales, todos comprenden que un intercambio nacional unificado y sin fragmentar salvaría más vidas. Estamos en conversaciones con intercambios de riñón adicionales que están interesados en adoptar nuestra tecnología. De esta manera, nuestra tecnología (y los procesos que la rodean) esperamos que sirvan como un sustrato que eventualmente ayudará a unificar los intercambios. Al menos la escalabilidad computacional ya no es un obstáculo. CONCLUSIÓN E INVESTIGACIONES FUTURAS En este trabajo hemos desarrollado los algoritmos exactos más escalables para intercambios de trueque hasta la fecha, con un enfoque especial en el próximo mercado nacional de intercambio de riñones en el que los pacientes con enfermedad renal serán emparejados con donantes compatibles intercambiando a sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a la enfermedad renal. Nuestro trabajo presenta el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Resuelve de manera óptima el problema de compensación de intercambio de riñones con 10,000 pares donante-receptor. Por lo tanto, no es necesario recurrir a soluciones aproximadas. La mejor tecnología previa (CPLEX básico) no puede manejar instancias de más de aproximadamente 900 pares de donantes-receptores porque se queda sin memoria. La clave de nuestra mejora es la formulación incremental de problemas. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas que mejoran sustancialmente tanto el tiempo de ejecución como el uso de memoria. Algunas de las técnicas utilizan observaciones específicas del dominio, mientras que otras son independientes del dominio. Concluimos que la generación de columnas escala de manera significativamente mejor que la generación de restricciones. Para la generación de columnas en el LP, nuestras mejoras incluyen técnicas de fijación de precios, técnicas de siembra de columnas, técnicas para demostrar la optimalidad sin tener que traer todas las columnas con precio positivo (y utilizando otro proceso de generación de columnas en una formulación diferente para hacerlo), y técnicas de eliminación de columnas. Para la búsqueda de ramificación y precio en el programa entero que rodea al LP, nuestras mejoras incluyen heurísticas primales y también comparamos estrategias de ramificación. Sin duda, se podrían utilizar ajustes adicionales de parámetros y quizás técnicas adicionales de mejora de velocidad para hacer que el algoritmo sea aún más rápido. Nuestro algoritmo también admite varias generalizaciones, según lo deseado por los intercambios reales de riñones. Estos incluyen múltiples donantes alternativos por paciente, bordes ponderados en el grafo del mercado (para codificar diferencias en años de vida esperados añadidos basados en grados de compatibilidad, edad y peso del paciente, etc., así como la probabilidad de incompatibilidad de último minuto), cadenas desencadenadas por ángeles (cadenas de trasplantes desencadenadas por donantes altruistas que no tienen pacientes asociados con ellos, cada cadena termina con un riñón sobrante), y problemas adicionales (como diferentes puntajes para salvar a diferentes donantes altruistas o riñones sobrantes para futuras ejecuciones de emparejamiento basadas en tipo de sangre, tipo de tejido y probabilidad de que el órgano no desaparezca del mercado porque el donante tenga dudas). Debido a que utilizamos una metodología de PLI, también podemos soportar una variedad de restricciones laterales, las cuales a menudo desempeñan un papel importante en los mercados en la práctica [19]. También podemos respaldar la asignación forzosa de una parte, por ejemplo, este adolescente gravemente enfermo debe recibir un riñón si es posible. Nuestro trabajo ha tratado el intercambio de riñones como un problema por lotes con información completa (al menos a corto plazo, es probable que los intercambios de riñones sigan funcionando en modo por lotes de vez en cuando). Dos direcciones importantes para trabajos futuros son abordar explícitamente tanto los aspectos en línea como los de información limitada del problema. El aspecto en línea es que los beneficiarios y donantes irán llegando al sistema con el tiempo, y puede ser mejor no llevar a cabo el intercambio óptimo de forma miope ahora, sino reservar parte del mercado actual para futuras coincidencias. De hecho, se ha realizado cierto trabajo al respecto en ciertos entornos restringidos [22, 24]. El aspecto de información limitada es que incluso en modo por lotes, el grafo proporcionado como entrada no es completamente correcto: varios pares donante-receptor que se creían compatibles resultan ser incompatibles cuando se realizan pruebas de último minuto más costosas. Por lo tanto, sería deseable realizar una optimización teniendo esto en cuenta, como producir un subgrafo robusto de bajo grado para ser probado antes de que se genere la coincidencia final, o producir un plan de contingencia en caso de fallo. Actualmente estamos explorando varias preguntas en esta línea, pero ciertamente hay mucho más por hacer. Agradecimientos Agradecemos a los economistas Al Roth y Utku Unver, así como al cirujano de trasplantes de riñón Michael Rees, por alertarnos sobre el hecho de que la tecnología previa era insuficiente para el problema de compensación a escala nacional, proporcionar conjuntos de datos iniciales y discutir los detalles del proceso de intercambio de riñones. También agradecemos a Don Sheehy por habernos hecho notar la idea del intercambio de zapatos. Este trabajo fue apoyado en parte por la Fundación Nacional de Ciencias bajo los subsidios IIS-0427858 y CCF-0514922. REFERENCIAS [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh y P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Tiempo de limpieza (segundos) Número de pacientes Nuestro algoritmo Nuestro algoritmo con sembrador de columnas restringido Nuestro algoritmo sin demostrador de optimalidad Formulación de ciclo CPLEX Figura 6: Resultados experimentales: tiempo de ejecución promedio con barras de desviación estándar. Rama y precio: Generación de columnas para resolver programas enteros enormes. Investigación de Operaciones, 46:316-329, mayo-junio de 1998. [2] R. Dechter y J. Pearl. Estrategias generalizadas de búsqueda de mejor primero y la optimalidad de A*. Revista de la ACM, 32(3):505-536, 1985. [3] F. L. Delmonico. Intercambio de riñones - avances en el trasplante de donante vivo. Revista de Medicina de Nueva Inglaterra, 350:1812-1814, 2004. [4] J. Edmonds. Camino, árboles y flores. Revista Canadiense de Matemáticas, 17:449-467, 1965. [5] M. R. Garey y D. S. Johnson. Computadoras e Intractabilidad; Una Guía de la Teoría de NP-Completitud. 1990. [6] S. E. Gentry, D. L. Segev y R. A. Montgomery. Una comparación de las poblaciones atendidas por donación emparejada de riñón y donación emparejada de lista. Revista Americana de Trasplantes, 5(8):1914-1921, agosto de 2005. [7] P. Hart, N. Nilsson y B. Raphael. Una base formal para la determinación heurística de caminos de costo mínimo. IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman y M. Padberg. Resolviendo problemas de programación de tripulaciones aéreas mediante ramificación y corte. Ciencia de la Gestión, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] Intercambio Nacional de Zapatos Impares. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Léelo, cámbialo. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez y M. U. Unver. Intercambio de riñones. Revista Trimestral de Economía, 119(2):457-488, mayo de 2004. [14] A. E. Roth, T. Sonmez y M. U. Unver. Un centro de intercambio de riñones en Nueva Inglaterra. Revista Económica Americana, 95(2):376-380, mayo de 2005. [15] A. E. Roth, T. Sonmez y M. U. Unver. Intercambio eficiente de riñones: Coincidencia de deseos en un mercado con preferencias basadas en la compatibilidad. American Economic Review, próximo. [16] E. Rothberg. Algoritmo de emparejamiento de peso máximo de Gabow n3: una implementación. El Primer Desafío de Implementación DIMACS, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver y F. L. Delmonico. Aumentando la oportunidad de donación de riñón en vida mediante el emparejamiento para intercambios de dos y tres vías. Trasplante, 81(5):773-782, 2006. [18] T. Sandholm. Algoritmos óptimos de determinación de ganadores. En Subastas Combinatorias, Cramton, Shoham y Steinberg, eds. MIT Press, 2006. [19] T. Sandholm y S. Suri. Restricciones laterales y atributos no relacionados con el precio en los mercados. En el taller IJCAI-2001 sobre Razonamiento de Restricciones Distribuidas, páginas 55-61, Seattle, WA, 2001. Para aparecer en Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb y R. A. Montgomery. Donación emparejada de riñón y optimización del uso de órganos de donantes vivos. Revista de la Asociación Médica Estadounidense, 293(15):1883-1890, abril de 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver. Intercambio dinámico de riñones. Documento de trabajo. [23] Sistema de Datos Renales de los Estados Unidos (USRDS). http://www.usrds.org/. [24] S. A. Zenios. Control óptimo de un programa de intercambio de riñones emparejados. Ciencias de la Gestión, 48(3):328-342, marzo de 2002. 304",
    "original_sentences": [
        "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
        "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
        "We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
        "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
        "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
        "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
        "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
        "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
        "Solving it exactly is one of the main challenges in establishing a national kidney exchange.",
        "We present the first algorithm capable of clearing these markets on a nationwide scale.",
        "The key is incremental problem formulation.",
        "We adapt two paradigms for the task: constraint generation and column generation.",
        "For each, we develop techniques that dramatically improve both runtime and memory usage.",
        "We conclude that column generation scales drastically better than constraint generation.",
        "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
        "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
        "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
        "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
        "INTRODUCTION The role of kidneys is to filter waste from blood.",
        "Kidney failure results in accumulation of this waste, which leads to death in months.",
        "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
        "Several visits are required per week, and each takes several hours.",
        "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
        "Only 12% of dialysis patients survive 10 years [23].",
        "Instead, the preferred treatment is a kidney transplant.",
        "Kidney transplants are by far the most common transplant.",
        "Unfortunately, the demand for kidneys far outstrips supply.",
        "In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant.",
        "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
        "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
        "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
        "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
        "In 2005, there were 6,563 live donations in the US.",
        "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
        "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
        "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
        "These markets are examples of barter exchanges.",
        "In a barter-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
        "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
        "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
        "For many years, there has even been a large shoe exchange in the United States [10].",
        "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
        "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
        "We can encode a barter exchange market as a directed graph G = (V, E) in the following way.",
        "Construct one vertex for each agent.",
        "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
        "The weight we of e represents the utility to vi of obtaining vjs item.",
        "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
        "The weight wc of a cycle c is the sum of its edge weights.",
        "An exchange is a collection of disjoint cycles.",
        "The weight of an exchange is the sum of its cycle weights.",
        "A social welfare maximizing exchange is one with maximum weight.",
        "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
        "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
        "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market.",
        "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
        "For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
        "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
        "Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3.",
        "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
        "For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
        "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
        "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
        "One approach then might be to look for a good heuristic or approximation algorithm.",
        "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
        "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
        "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
        "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
        "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
        "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
        "The key then is incremental problem formulation.",
        "We adapt two paradigms for the task: constraint generation and column generation.",
        "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17].",
        "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
        "Those results are conservative in two ways.",
        "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
        "It has been reported to us that the market could be almost double this size.",
        "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
        "Allowing length-3 cycles leads to additional significant gains.",
        "This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
        "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
        "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].)",
        "Whilst this does not hold for general barter exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
        "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
        "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
        "Both problems are NP-hard.",
        "Both are best solved using tree search techniques.",
        "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
        "However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
        "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
        "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
        "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
        "Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms.",
        "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
        "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
        "We also detail in those sections our techniques used to solve those programs on large instances.",
        "Section 6 presents experiments on the various techniques.",
        "Section 7 discusses recent fielding of our algorithm.",
        "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
        "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17].",
        "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
        "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
        "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
        "These probabilities are based on actual real-world population data.",
        "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
        "If the patient and potential donor are incompatible, the two are entered into the market.",
        "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
        "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
        "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
        "This means that the maximum-weight exchange has maximum cardinality.",
        "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market.",
        "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
        "For each market size, the bounds were computed over 10 randomly generated markets.",
        "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
        "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
        "Table 2 gives additional characteristics of the kidney-exchange market.",
        "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
        "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
        "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
        "Theorem 1.",
        "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
        "Proof.",
        "It is clear that this problem is in NP.",
        "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
        "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
        "Instead then, we use the following reduction.",
        "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
        "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
        "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
        "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
        "We will show the construction admits a perfect cycle cover by short cycles.",
        "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
        "Also add the cycle ª xi a, yi b, zi c « .",
        "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
        "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
        "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
        "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
        "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
        "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
        "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
        "Add an edge ev with weight 0 between each agent v and its own item.",
        "At this point, the encoding is a perfect matching.",
        "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
        "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
        "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
        "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
        "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
        "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
        "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
        "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
        "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
        "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
        "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
        "Therefore, we use a tree search with an incremental formulation approach.",
        "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
        "We begin with only a small subset of the constraints in the ILP.",
        "Since this ILP is small, CPLEX can solve its LP relaxation.",
        "We then check whether any of the missing constraints are violated by the fractional solution.",
        "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
        "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
        "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
        "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
        "Clearly, this approach yields an optimal solution once the tree search finishes.",
        "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
        "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
        "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
        "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
        "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
        "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
        "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
        "For any such path, we restrict its sum to be at most L − 1.",
        "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
        "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
        "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
        "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
        "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
        "Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5.",
        "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
        "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
        "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
        "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
        "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
        "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation.",
        "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
        "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
        "We now consider the case of short cycles of length at most L, where L ≥ 3.",
        "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
        "These bounds help prune subtrees and guide the search in the usual ways.",
        "Theorem 2.",
        "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation.",
        "Proof.",
        "Consider an optimal solution to the LP relaxation of the cycle formulation.",
        "We show how to construct an equivalent solution in the edge formulation.",
        "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
        "Also, define the value of a vertex in the same manner.",
        "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
        "It remains to show that none of the path constraints are violated.",
        "Let p be any length-L path in the graph.",
        "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
        "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
        "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
        "Consider a graph which is simply a cycle with n edges.",
        "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
        "Hence, the cycle formulation is tighter than the edge formulation.",
        "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
        "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
        "To address this problem, we used an incremental formulation approach.",
        "The first step in LP-guided tree search is to solve the LP relaxation.",
        "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
        "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
        "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
        "We explain this further by way of an example.",
        "Consider the market in Figure 1 with L = 2.",
        "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
        "Let P be the restriction of P containing columns c1 and c3 only.",
        "Let D be the dual of P , that is, D is just D without the constraint c2.",
        "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
        "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
        "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
        "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
        "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
        "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
        "The problem of finding a violated constraint is called the pricing problem.",
        "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
        "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
        "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
        "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
        "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
        "This approach does not scale however.",
        "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
        "This is too many cycles to keep in memory.",
        "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
        "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
        "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
        "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
        "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
        "Even with these pruning rules, column generation is a bottleneck.",
        "Hence, we also implemented the following optimizations.",
        "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
        "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
        "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
        "However, we avoid this for the following reason.",
        "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
        "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
        "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
        "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
        "Of course, we cannot include so many columns that we run out of memory.",
        "We experimented with several column seeders.",
        "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
        "We implemented two heuristics.",
        "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
        "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
        "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
        "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
        "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
        "Our best column seeder constructs a random collection of feasible cycles.",
        "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
        "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
        "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
        "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
        "This last approach outperforms the heuristic seeders described above.",
        "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
        "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
        "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
        "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
        "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
        "There is no good general solution to the tailing-off effect.",
        "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
        "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
        "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
        "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
        "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
        "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
        "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
        "To make this idea work then, we used column generation to solve the edge formulation.",
        "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
        "We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
        "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
        "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
        "This leads to memory problems on markets with as few as 4,000 patients.",
        "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
        "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
        "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
        "If this is the case, we selectively remove columns until it is again below the threshold2 .",
        "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
        "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
        "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
        "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
        "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
        "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
        "However, the solutions we find are usually fractional.",
        "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
        "Briefly, this is the idea of branch-and-price.",
        "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
        "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
        "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
        "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
        "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
        "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
        "We also experimented with the A* node selection order [7, 2].",
        "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
        "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
        "These solutions are lower bounds on the final optimal integral solutions.",
        "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
        "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
        "We experimented with two primal heuristics.",
        "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
        "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
        "We also tried using CPLEX as a primal heuristic.",
        "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
        "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
        "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
        "In general, this tree search is much faster than our own.",
        "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
        "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
        "For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
        "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
        "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
        "Hence, we make the following optimizations.",
        "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
        "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
        "Secondly, we limit the number of nodes in CPLEXs search tree.",
        "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
        "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
        "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
        "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
        "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
        "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
        "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
        "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
        "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
        "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
        "Figure 6 shows the runtime performance of four clearing algorithms.",
        "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
        "The first algorithm is CPLEX on the full cycle formulation.",
        "This algorithm fails to clear any markets with 1000 patients or more.",
        "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
        "The other algorithms are variations of the incremental column generation approach described in Section 5.",
        "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
        "Column Generation One column at a time.",
        "Column Management On, with 400,000 column limit.",
        "Optimality Prover On.",
        "Primal Heuristic Rounding & CPLEX tree search.",
        "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
        "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
        "First, we restrict the seeder so that it only begins with 10,000 cycles.",
        "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
        "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
        "For larger instance, this restricted seeder is clearly worse.",
        "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
        "As in many column generation problems, the tailing-off effect is substantial.",
        "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
        "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
        "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
        "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
        "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
        "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
        "At least computational scalability is no longer an obstacle. 8.",
        "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
        "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
        "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
        "It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs.",
        "Thus there is no need to resort to approximate solutions.",
        "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
        "The key to our improvement is incremental problem formulation.",
        "We adapted two paradigms for the task: constraint generation and column generation.",
        "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
        "Some of the techniques use domain-specific observations while others are domain independent.",
        "We conclude that column generation scales dramatically better than constraint generation.",
        "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
        "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
        "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
        "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
        "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
        "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
        "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
        "Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
        "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
        "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
        "In fact, some work has been done on this in certain restricted settings [22, 24].",
        "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
        "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
        "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
        "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process.",
        "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
        "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
        "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
        "Branch-and-price: Column generation for solving huge integer programs.",
        "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
        "Generalized best-first search strategies and the optimality of A*.",
        "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
        "Exchanging kidneys - advances in living-donor transplantation.",
        "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
        "Path, trees, and flowers.",
        "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
        "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
        "A comparison of populations served by kidney paired donation and list paired donation.",
        "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
        "A formal basis for the heuristic determination of minimum cost paths.",
        "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
        "Solving airline crew-scheduling problems by branch-and-cut.",
        "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
        "Kidney exchange.",
        "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
        "A kidney exchange clearinghouse in New England.",
        "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
        "Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences.",
        "American Economic Review, forthcoming. [16] E. Rothberg.",
        "Gabows n3 maximum-weight matching algorithm: an implementation.",
        "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
        "Increasing the opportunity of live kidney donation by matching for two and three way exchanges.",
        "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
        "Optimal winner determination algorithms.",
        "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
        "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
        "Side constraints and non-price attributes in markets.",
        "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
        "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
        "Kidney paired donation and optimizing the use of live donor organs.",
        "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
        "Dynamic kidney exchange.",
        "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
        "Optimal control of a paired-kidney exchange program.",
        "Management Science, 48(3):328-342, March 2002. 304"
    ],
    "translated_text_sentences": [
        "Algoritmos de compensación para mercados de intercambio de trueque: Facilitando los intercambios de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades.",
        "Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo.",
        "Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles.",
        "Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales.",
        "El problema de compensación implica encontrar un intercambio que maximice el bienestar social cuando la longitud máxima de un ciclo está fija.",
        "Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente.",
        "Además, en los intercambios de trueque en general, más agentes se ven afectados si uno abandona un ciclo más largo.",
        "Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro.",
        "Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones.",
        "Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional.",
        "La clave es la formulación incremental del problema.",
        "Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas.",
        "Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria.",
        "Concluimos que la generación de columnas escala considerablemente mejor que la generación de restricciones.",
        "Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de riñón.",
        "Nuestro algoritmo reemplazó a CPLEX como el algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones.",
        "Las carreras de fósforos se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados.",
        "Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas]: [General] Términos Generales Algoritmos, Economía 1.",
        "INTRODUCCIÓN El papel de los riñones es filtrar los desechos de la sangre.",
        "La insuficiencia renal resulta en la acumulación de estos desechos, lo cual conduce a la muerte en meses.",
        "Una opción de tratamiento es la diálisis, en la que el paciente va a un hospital para que su sangre sea filtrada por una máquina externa.",
        "Se requieren varias visitas por semana, y cada una lleva varias horas.",
        "La calidad de vida en diálisis puede ser extremadamente baja, de hecho, muchos pacientes optan por retirarse de la diálisis, lo que conduce a una muerte natural.",
        "Solo el 12% de los pacientes en diálisis sobreviven 10 años [23].",
        "En cambio, el tratamiento preferido es un trasplante de riñón.",
        "Los trasplantes de riñón son, con mucho, los trasplantes más comunes.",
        "Desafortunadamente, la demanda de riñones supera con creces la oferta.",
        "En los Estados Unidos en 2005, 4,052 personas murieron esperando un trasplante de riñón que les salvara la vida.",
        "Durante este tiempo, casi 30,000 personas fueron añadidas a la lista nacional de espera, mientras que solo 9,913 personas salieron de la lista después de recibir un riñón de donante fallecido.",
        "La lista de espera actualmente tiene más de 70,000 personas, y el tiempo de espera mediano varía de 2 a 5 años, dependiendo del tipo de sangre. Para muchos pacientes con enfermedad renal, la mejor opción es encontrar un donante vivo, es decir, una persona sana dispuesta a donar uno de sus dos riñones.",
        "Aunque existen mercados para comprar y vender riñones de donantes vivos, la comercialización de órganos humanos es casi universalmente considerada como antiética, y la práctica suele ser explícitamente ilegal, como en los Estados Unidos.",
        "Sin embargo, en la mayoría de los países, la donación en vida es legal, siempre y cuando se realice como un regalo sin compensación financiera.",
        "En 2005, hubo 6,563 donaciones en vida en los Estados Unidos.",
        "El número de donaciones en vida habría sido mucho mayor si no fuera por el hecho de que, con frecuencia, un posible donante y su receptor previsto son incompatibles en tipo de sangre o tipo de tejido.",
        "En el pasado, el donante incompatible fue enviado a casa, dejando al paciente a la espera de un riñón de un donante fallecido.",
        "Sin embargo, ahora hay algunos intercambios renales regionales en los Estados Unidos, en los que los pacientes pueden intercambiar sus donantes incompatibles entre sí, para así obtener cada uno un donante compatible.",
        "Estos mercados son ejemplos de intercambios de trueque.",
        "En un mercado de intercambio por trueque, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí.",
        "Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo.",
        "Los intercambios de trueque son ubicuos: ejemplos incluyen Peerflix (DVDs) [11], Read It Swap It (libros) [12], e Intervac (casas de vacaciones) [9].",
        "Durante muchos años, incluso ha habido un gran intercambio de zapatos en los Estados Unidos [10].",
        "Las personas con pies de diferentes tamaños usan esto para evitar tener que comprar dos pares de zapatos.",
        "Los amputados de pierna tienen un intercambio separado para compartir el costo de comprar un par de zapatos.",
        "Podemos codificar un mercado de intercambio de trueque como un grafo dirigido G = (V, E) de la siguiente manera.",
        "Construye un vértice para cada agente.",
        "Agregar un borde ponderado e desde un agente vi hacia otro vj, si vi desea el artículo de vj.",
        "El peso que representamos de e es la utilidad para vi de obtener el artículo vjs.",
        "Un ciclo c en este grafo representa un intercambio posible, donde cada agente en el ciclo obtiene el artículo del siguiente agente.",
        "El peso wc de un ciclo c es la suma de los pesos de sus aristas.",
        "Un intercambio es una colección de ciclos disjuntos.",
        "El peso de un intercambio es la suma de los pesos de sus ciclos.",
        "Un intercambio que maximiza el bienestar social es aquel con un peso máximo.",
        "La Figura 1 ilustra un mercado de ejemplo con 5 agentes, {v1, v2, . . . , v5}, en el que todos los bordes tienen peso 1.",
        "El mercado tiene 4 ciclos, c1 = v1, v2, c2 = v2, v3, c3 = v3, v4 y c4 = v1, v2, v3, v4, v5, y dos intercambios maximales (de inclusión), a saber, M1 = {c4} y M2 = {c1, c3}.",
        "El intercambio M1 tiene tanto el peso máximo como la cardinalidad máxima (es decir, incluye la mayor cantidad de aristas/vértices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figura 1: Mercado de intercambio de trueque de ejemplo.",
        "El problema de compensación consiste en encontrar un intercambio de peso máximo que consista en ciclos con una longitud de a lo sumo una pequeña constante L. Esta restricción de longitud de ciclo surge naturalmente por varias razones.",
        "Por ejemplo, en un intercambio de riñón, todas las operaciones en un ciclo deben realizarse simultáneamente; de lo contrario, un donante podría retractarse después de que su pareja incompatible haya recibido un riñón. (No se puede redactar un contrato vinculante para donar un órgano).",
        "Esto da lugar a una restricción logística en el tamaño del ciclo: incluso si todos los donantes son operados primero y se utiliza el mismo personal e instalaciones para luego operar a los receptores, un ciclo k requiere entre 3k y 6k médicos, alrededor de 4k enfermeras y casi 2k salas de operaciones.",
        "Debido a tales limitaciones de recursos, es probable que el próximo mercado nacional de intercambio de riñones solo permita ciclos de longitud 2 y 3.",
        "Otra motivación para ciclos cortos es que si el ciclo falla en intercambiarse, menos agentes se ven afectados.",
        "Por ejemplo, las pruebas de último minuto en un intercambio de riñones a menudo revelan nuevas incompatibilidades que no fueron detectadas en las pruebas iniciales (en base a las cuales se construyó el grafo de compatibilidad).",
        "Más generalmente, un agente puede abandonar un ciclo si sus preferencias han cambiado, o simplemente no cumple con sus obligaciones (como enviar un libro a otro agente en el ciclo) debido a olvidos.",
        "En la Sección 3, demostramos que (la versión de decisión del) problema de despeje es NP-completo para L ≥ 3.",
        "Una posible estrategia sería buscar un buen heurístico o algoritmo de aproximación.",
        "Sin embargo, por dos razones, buscamos un algoritmo exacto basado en un programa lineal entero (PLE), que resolvemos utilizando una búsqueda especializada en árboles. • Primero, cualquier pérdida de optimalidad podría llevar a muertes de pacientes innecesarias. • Segundo, una característica atractiva de utilizar una formulación de PLE es que permite modelar fácilmente una serie de variaciones en el objetivo y agregar restricciones adicionales al problema.",
        "Por ejemplo, si se cree que los ciclos de 3 elementos tienen más probabilidades de fallar que los ciclos de 2 elementos, entonces simplemente se les puede asignar un peso que sea apropiadamente menor que 3/2 del peso de un ciclo de 2 elementos.",
        "O, si por diversas razones (por ejemplo, éticas) se requiere un intercambio de cardinalidad máxima, al menos se puede encontrar en una segunda pasada la solución (de entre todas las soluciones de cardinalidad máxima) que tenga el menor número de 3-ciclos.",
        "Otras variaciones que se pueden resolver incluyen encontrar diversas formas de colecciones de ciclos tolerantes a fallos (no disjuntas) en caso de que ciertos pares que se creían compatibles resulten ser incompatibles después de todo.",
        "En este documento, presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional.",
        "Las codificaciones de ILP directas son demasiado grandes para siquiera construirse en el hardware actual, sin mencionar resolverlas.",
        "La clave entonces es la formulación incremental del problema.",
        "Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas.",
        "Para cada uno, desarrollamos una serie de técnicas (principalmente específicas del problema) que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. 1.1 Trabajos Previos Varios artículos recientes han utilizado simulaciones y algoritmos de compensación de mercado para explorar el impacto de un intercambio nacional de riñones [13, 20, 6, 14, 15, 17].",
        "Por ejemplo, utilizando el algoritmo de coincidencia máxima de Edmonds [4], [20] se muestra que un mercado nacional de intercambio por pares (utilizando solo ciclos de longitud 2) resultaría en más trasplantes, tiempos de espera reducidos y ahorros de $750 millones en costos de atención médica durante 5 años.",
        "Esos resultados son conservadores de dos maneras.",
        "En primer lugar, el mercado simulado contenía solo 4,000 pacientes iniciales, con 250 pacientes añadidos cada 3 meses.",
        "Se nos ha informado que el mercado podría ser casi el doble de este tamaño.",
        "En segundo lugar, los intercambios se restringieron a ciclos de longitud 2 (porque eso es todo lo que se puede modelar como coincidencia máxima y resolver utilizando el algoritmo de Edmonds).",
        "Permitir ciclos de longitud 3 conlleva a ganancias adicionales significativas.",
        "Esto se ha demostrado en mercados de intercambio de riñones con 100 pacientes utilizando CPLEX para resolver una codificación de programa entero del problema de compensación [15].",
        "En este documento, presentamos un algoritmo alternativo para este programa entero que puede despejar mercados con más de 10,000 pacientes (y el mismo número de donantes dispuestos).",
        "Permitir ciclos de longitud mayor a 3 a menudo no conduce a ninguna mejora en el tamaño del intercambio [15]. (Además, en un modelo teórico simplificado, cualquier intercambio de riñón se puede convertir en uno con ciclos de longitud de a lo sumo 4 [15].)",
        "Si bien esto no se aplica a intercambios de trueque generales, ni siquiera a todos los mercados de intercambio de riñones, en la Sección 5.2.3 hacemos uso de la observación de que los ciclos cortos son suficientes para aumentar drásticamente la velocidad de nuestro algoritmo.",
        "A un nivel alto, el problema de compensación para intercambios de trueque es similar al problema de compensación (también conocido como problema de determinación de ganadores) en subastas combinatorias.",
        "En ambos contextos, la idea es recopilar toda la información pertinente sobre los agentes en un punto central de compensación y ejecutar un algoritmo centralizado de compensación para determinar la asignación.",
        "Ambos problemas son NP-duros.",
        "Ambos se resuelven mejor utilizando técnicas de búsqueda en árboles.",
        "Desde 1999, se ha realizado un trabajo significativo en informática y investigación de operaciones sobre algoritmos de búsqueda de árboles óptimos más rápidos para despejar subastas combinatorias. (Para una revisión reciente, consulte [18].)",
        "Sin embargo, el problema de compensación del intercambio de riñones (con un límite de 3 o más en el tamaño del ciclo) es diferente del problema de compensación de la subasta combinatoria de formas significativas.",
        "La diferencia más importante es que las formulaciones naturales del problema de subasta combinatoria tienden a ajustarse fácilmente en la memoria, por lo que el tiempo es el cuello de botella en la práctica.",
        "Por el contrario, las formulaciones naturales del problema de intercambio de riñones (con L = 3) ocupan al menos espacio cúbico en el número de pacientes para incluso modelar, y por lo tanto la memoria se convierte en un cuello de botella mucho antes que el tiempo al utilizar la búsqueda de árbol estándar, como branch-and-cut en CPLEX, para abordar el problema. (En una computadora de 1GB y un generador de instancias estándar realista, discutido más adelante, CPLEX 10.010 se queda sin memoria en cinco de las diez instancias de 900 pacientes y en las diez de las diez instancias de 1,000 pacientes que generamos).",
        "Por lo tanto, los enfoques que se han desarrollado para subastas combinatorias no pueden manejar el problema del intercambio de riñones. 1.2 Esquema del documento El resto del documento está organizado de la siguiente manera.",
        "La sección 2 discute el proceso mediante el cual generamos datos realistas del mercado de intercambio de riñones, con el fin de comparar los algoritmos de compensación.",
        "La sección 3 contiene una demostración de que el problema de decisión de compensación del mercado es NP-completo.",
        "Las secciones 4 y 5 contienen cada una una formulación ILP del problema de compensación.",
        "También detallamos en esas secciones nuestras técnicas utilizadas para resolver esos programas en instancias grandes.",
        "La sección 6 presenta experimentos sobre las diversas técnicas.",
        "La sección 7 discute la implementación reciente de nuestro algoritmo.",
        "Finalmente, presentamos nuestras conclusiones en la Sección 8 y sugerimos direcciones para investigaciones futuras.",
        "CARACTERÍSTICAS DEL MERCADO Y GENERADOR DE INSTANCIAS Probamos los algoritmos en mercados simulados de intercambio de riñones, los cuales son generados por un proceso descrito en Saidman et al. [17].",
        "Este proceso se basa en los extensos datos a nivel nacional mantenidos por la Red Unida para el Comparto de Órganos (UNOS), por lo que genera una distribución realista de instancias.",
        "Varios artículos han utilizado variaciones de este proceso para demostrar la efectividad de un intercambio nacional de riñones (extrapolando de pequeñas instancias o restringiendo la compensación a ciclos de 2) [6, 20, 14, 13, 15, 17].",
        "En resumen, el proceso implica generar pacientes con un tipo de sangre, sexo y probabilidad de ser incompatible en el tipo de tejido con un donante elegido al azar.",
        "Estas probabilidades se basan en datos reales de la población del mundo real.",
        "A cada paciente se le asigna un posible donante con un tipo de sangre aleatorio y una relación con el paciente.",
        "Si el paciente y el posible donante son incompatibles, ambos son ingresados en el mercado.",
        "La información del tipo de sangre y del tipo de tejido se utiliza luego para decidir qué pacientes y donantes son compatibles.",
        "Una complicación, manejada por el generador, es que si la paciente es mujer y ha tenido un hijo con su potencial donante, entonces la probabilidad de que los dos sean incompatibles aumenta. (Esto se debe a que la madre desarrolla anticuerpos contra su pareja durante el embarazo).",
        "Finalmente, aunque nuestros algoritmos pueden manejar funciones de peso más generales, los pacientes tienen una utilidad de 1 para donantes compatibles, ya que su probabilidad de supervivencia no se ve afectada por la elección del donante [3].",
        "Esto significa que el intercambio de peso máximo tiene la máxima cardinalidad.",
        "La Tabla 1 proporciona límites inferiores y superiores sobre el tamaño de un intercambio de máxima cardinalidad en el mercado de intercambio de riñones.",
        "Los límites inferiores se encontraron al despejar el mercado solo con ciclos de longitud 2, mientras que los límites superiores no tenían restricción en la longitud del ciclo.",
        "Para cada tamaño de mercado, los límites fueron calculados sobre 10 mercados generados aleatoriamente.",
        "Ten en cuenta que puede haber una gran cantidad de variabilidad en los mercados: en un mercado de 5000 pacientes, menos de 1000 pacientes estaban en el intercambio de cardinalidad máxima.",
        "Tamaño máximo de intercambio Longitud-2 ciclos solamente Ciclos arbitrarios Pacientes Media Máximo Media Máximo 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Tabla 1: Límites superiores e inferiores en el tamaño del intercambio.",
        "La Tabla 2 proporciona características adicionales del mercado de intercambio de riñones.",
        "Ten en cuenta que un mercado con 5000 pacientes puede tener más de 450 millones de ciclos de longitud 2 y 3.",
        "Longitud de los bordes 2 y 3 ciclos Pacientes Media Máx. Media Máx. 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Tabla 2: Características del mercado. 297",
        "COMPLEJIDAD DEL PROBLEMA En esta sección, demostramos que (la versión de decisión del) problema de compensación de mercado con ciclos cortos es NP-completo.",
        "Teorema 1.",
        "Dado un grafo G = (V, E) y un entero L ≥ 3, el problema de decidir si G admite una cubierta de ciclos perfecta que contenga ciclos de longitud como máximo L es NP-completo.",
        "Prueba.",
        "Es claro que este problema está en NP.",
        "Para la NP-dificultad, reducimos desde 3D-Matching, que es el problema de, dado conjuntos disjuntos X, Y y Z de tamaño q, y un conjunto de triples T ⊆ X × Y × Z, decidir si existe un subconjunto disjunto M de T con tamaño q.",
        "Una idea directa es construir un grafo tripartito con conjuntos de vértices X ∪ Y ∪ Z y aristas dirigidas (xa, yb), (yb, zc) y (zc, xa) para cada triple ti = {xa, yb, zc} ∈ T. Sin embargo, no es demasiado difícil ver que esta codificación falla porque una cobertura de ciclo perfecta puede incluir un ciclo sin un triple correspondiente.",
        "En cambio, utilizamos la siguiente reducción.",
        "Dado una instancia de 3D-Matching, construye un vértice para cada elemento en X, Y y Z.",
        "Para cada tripleta, ti = {xa, yb, zc}, construya el dispositivo en la Figura 2, que es similar a uno en Garey y Johnson [5, pp 68-69].",
        "Ten en cuenta que los dispositivos se intersecan solo en los vértices de X ∪ Y ∪ Z.",
        "Es claro que esta construcción puede realizarse en tiempo polinómico. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figura 2: Dispositivo de NP-completitud para la tripleta ti y la longitud máxima del ciclo L. Sea M un emparejamiento 3D perfecto.",
        "Mostraremos que la construcción admite una cobertura perfecta de ciclos mediante ciclos cortos.",
        "Si ti = {xa, yb, zc} ∈ M, añade desde el gadget de ti los tres ciclos de longitud L que contienen a xa, yb y zc respectivamente.",
        "También añade el ciclo ª xi a, yi b, zi c «.",
        "De lo contrario, si ti ∉ M, añade los tres ciclos de longitud L que contienen xi a, yi b y zi c respectivamente.",
        "Es claro que todos los vértices están cubiertos, ya que M particiona X × Y × Z. Por el contrario, supongamos que tenemos una cobertura perfecta mediante ciclos cortos.",
        "Ten en cuenta que la construcción solo tiene ciclos cortos de longitudes 3 y L, y ningún ciclo corto involucra vértices distintos de dos gadgets diferentes.",
        "Es fácil ver entonces que en una cubierta perfecta, cada gadget ti contribuye ciclos de acuerdo a los casos anteriores: ti ∈ M, o ti /∈ M. Por lo tanto, existe un Emparejamiento 3D perfecto en la instancia original. 4.",
        "ENFOQUES DE SOLUCIÓN BASADOS EN UNA FORMULACIÓN DE ARISTAS En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada arista.",
        "Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos sin restricciones de longitud de ciclo.",
        "Dado un mercado G = (V, E), construya un grafo bipartito con un vértice para cada agente y un vértice para cada artículo.",
        "Agregar un borde ev con peso 0 entre cada agente v y su propio artículo.",
        "En este punto, la codificación es una coincidencia perfecta.",
        "Ahora, para cada arista e = (vi, vj) en el mercado original, añade una arista e con peso we entre el agente vi y el artículo de vj.",
        "Los emparejamientos perfectos en esta codificación corresponden exactamente con las cubiertas de ciclos, ya que cada vez que se toma un artículo de un agente, debe recibir el artículo de otro agente.",
        "Se deduce que el problema de despeje sin restricciones puede resolverse en tiempo polinómico encontrando un emparejamiento perfecto de peso máximo.",
        "La Figura 3 contiene la representación en forma de grafo bipartito del mercado de ejemplo de la Figura 1.",
        "Las aristas de peso 0 están codificadas con líneas discontinuas, mientras que las aristas de mercado están en negrita.",
        "Elementos Agentes v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figura 3: Codificación de emparejamiento perfecto del mercado en la Figura 1.",
        "Alternativamente, podemos resolver el problema codificándolo como un ILP con una variable para cada arista en el grafo de mercado original G. Este ILP, que se muestra a continuación, tiene la ventaja de que puede ser extendido de manera natural para tratar con restricciones de longitud de ciclo.",
        "Por lo tanto, para el resto de esta sección, este será el enfoque que seguiremos. Se busca un max e∈E tal que para todo vi ∈ V, se cumplan las restricciones de conservación eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 y la restricción de capacidad eout=(vi,vj ) eout ≤ 1.",
        "Si se permite que los ciclos tengan una longitud de como máximo L, es fácil ver que solo necesitamos hacer los siguientes cambios en el ILP.",
        "Para cada camino de longitud L (a lo largo del documento, no incluimos ciclos en la definición de camino) p = ep1, ep2, ..., epL, agregar una restricción ep1 + ep2 + ... + epL ≤ L − 1, que excluye al camino p de cualquier solución factible.",
        "Desafortunadamente, en un mercado con solo 1000 pacientes, el número de caminos de longitud 3 supera los 400 millones, por lo que ni siquiera podemos construir este ILP sin quedarnos sin memoria.",
        "Por lo tanto, utilizamos una búsqueda en árbol con un enfoque de formulación incremental.",
        "Específicamente, utilizamos CPLEX, aunque añadimos restricciones como planos de corte durante el proceso de búsqueda en el árbol.",
        "Comenzamos con solo un pequeño subconjunto de las restricciones en el ILP.",
        "Dado que este ILP es pequeño, CPLEX puede resolver su relajación LP.",
        "Luego verificamos si alguna de las restricciones faltantes es violada por la solución fraccional.",
        "Si es así, generamos un conjunto de estas restricciones, las añadimos al ILP y repetimos.",
        "Incluso una vez que se satisfacen todas las restricciones, puede que no haya una solución entera que coincida con el límite superior fraccional, y aunque la hubiera, el solucionador de PL podría no encontrarla.",
        "En estos casos, CPLEX ramifica en una variable (utilizamos la estrategia de ramificación predeterminada de CPLEX) y genera un nuevo nodo de búsqueda correspondiente a cada uno de los hijos.",
        "En cada nodo del árbol de búsqueda que se visita, se repite este proceso de resolver el LP y agregar restricciones.",
        "Claramente, este enfoque produce una solución óptima una vez que la búsqueda en el árbol finaliza.",
        "Todavía necesitamos explicar los detalles del generador de restricciones (es decir, seleccionar qué restricciones comenzar) y la generación de restricciones (es decir, seleccionar qué restricciones violadas incluir).",
        "Describimos brevemente estos en las dos subsecciones siguientes, respectivamente. 4.1 Sembrador de Restricciones El principal sembrador de restricciones que desarrollamos prohíbe cualquier camino de longitud L − 1 que no tenga un borde cerrando el ciclo desde su inicio hasta su final.",
        "Si bien es costoso computacionalmente encontrar estas restricciones, su adición enfoca la búsqueda lejos de los caminos que no pueden estar en la solución final.",
        "También intentamos sembrar el LP con una colección aleatoria de restricciones del ILP. 4.2 Generación de Restricciones Experimentamos con varios generadores de restricciones.",
        "En cada caso, dada una solución fraccional, construimos el subgrafo de aristas con valor positivo.",
        "Este gráfico es mucho más pequeño que el gráfico original, por lo que podemos realizar los cálculos siguientes de manera eficiente.",
        "En nuestro primer generador de restricciones, simplemente buscamos caminos de longitud L con una suma de valores mayor que L − 1.",
        "Para cualquier camino de este tipo, restringimos su suma para que sea como máximo L − 1.",
        "Ten en cuenta que si hay un ciclo c con longitud |c| > L, podría contener hasta |c| caminos que violan.",
        "En nuestro segundo generador de restricciones, solo agregamos una restricción para tales ciclos: la suma de aristas en el ciclo puede ser a lo sumo |c|(L − 1)/L.",
        "Este generador hizo que el algoritmo fuera más lento, por lo que optamos por ir en la dirección opuesta en el desarrollo de nuestro generador final.",
        "Agrega una restricción por cada camino p que viola, y además, agrega una restricción para cada camino con los mismos vértices interiores (sin contar los extremos) que p. Esto mejoró la velocidad general. 4.3 Rendimiento experimental Resultó que incluso con estas mejoras, el enfoque de formulación de aristas no puede despejar un intercambio de riñón con 100 vértices en el tiempo en que la formulación de ciclos (descrita más adelante en la Sección 5) puede despejar uno con 10,000 vértices.",
        "En otras palabras, los enfoques basados en generación de columnas resultaron ser drásticamente mejores que los enfoques basados en generación de restricciones.",
        "Por lo tanto, en el resto del documento nos enfocaremos en la formulación del ciclo y en los enfoques basados en la generación de columnas. 5.",
        "Enfoques de solución basados en una formulación cíclica. En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada ciclo.",
        "Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos cuando los ciclos tienen longitud 2.",
        "Dado un mercado G = (V, E), construya un nuevo grafo en V con un peso wc en cada arista de ciclo c de longitud 2.",
        "Es fácil ver que los emparejamientos en este nuevo grafo corresponden a coberturas de ciclos por ciclos de longitud 2 en el grafo original del mercado.",
        "Por lo tanto, el problema de equilibrio de mercado con L = 2 se puede resolver en tiempo polinómico encontrando un emparejamiento de peso máximo. Figura 4: Codificación del emparejamiento de peso máximo del mercado en la Figura 1.",
        "Podemos generalizar este codificado para L arbitrario. Sea C(L) el conjunto de todos los ciclos de G con longitud a lo sumo L. Entonces el siguiente ILP encuentra la cobertura de ciclos de máximo peso por ciclos de C(L): max c∈C(L) wcc sujeto a c:vi∈c c ≤ 1 ∀vi ∈ V con c ∈ {0, 1} ∀c ∈ C(L) 5.1 Formulación de Arista vs Ciclo En esta sección, consideramos los méritos de la formulación de arista y la formulación de ciclo.",
        "La formulación del problema del borde se puede resolver en tiempo polinómico cuando no hay restricciones en el tamaño del ciclo.",
        "La formulación del ciclo se puede resolver en tiempo polinómico cuando el tamaño del ciclo es a lo sumo 2.",
        "Ahora consideramos el caso de ciclos cortos de longitud como máximo L, donde L ≥ 3.",
        "Nuestros algoritmos de búsqueda de árboles utilizan la relajación LP de estas formulaciones para proporcionar cotas superiores de la solución óptima.",
        "Estos límites ayudan a podar subárboles y guiar la búsqueda de las formas habituales.",
        "Teorema 2.",
        "La relajación LP de la formulación del ciclo domina débilmente la relajación LP de la formulación del borde.",
        "Prueba.",
        "Considera una solución óptima para la relajación LP de la formulación del ciclo.",
        "Mostramos cómo construir una solución equivalente en la formulación de bordes.",
        "Para cada arista en el grafo, establezca su valor como la suma de los valores de todos los ciclos de los cuales es miembro.",
        "También, define el valor de un vértice de la misma manera.",
        "Debido a las restricciones del ciclo, las restricciones de conservación y capacidad de la codificación de los bordes se cumplen claramente.",
        "Queda por demostrar que ninguna de las restricciones de ruta se viola.",
        "Sea p cualquier camino de longitud L en el grafo.",
        "Dado que p tiene L−1 vértices interiores (sin contar los extremos), la suma de estos vértices interiores es como máximo L−1.",
        "Ahora, para cualquier ciclo c de longitud como máximo L, el número de aristas que tiene en p, que denotamos como ec(p), es como máximo el número de vértices interiores que tiene en p, que denotamos como vc(p).",
        "Por lo tanto, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 La afirmación contraria de este teorema no es verdadera.",
        "Considera un grafo que es simplemente un ciclo con n aristas.",
        "Claramente, la relajación LP de la formulación del ciclo tiene un valor óptimo de 0, ya que no hay ciclos de tamaño menor o igual a L. Sin embargo, la formulación de aristas tiene una solución de tamaño n/2, con cada arista teniendo un valor de 1/2.",
        "Por lo tanto, la formulación del ciclo es más ajustada que la formulación del borde.",
        "Además, para un grafo con m aristas, la formulación de aristas requiere O(m3) restricciones, mientras que la formulación de ciclos solo requiere O(m2). 5.2 Generación de columnas para la tabla de PL. La Tabla 2 muestra cómo el número de ciclos de longitud a lo sumo 3 crece con el tamaño del mercado.",
        "Con una variable por ciclo en la formulación del ciclo, CPLEX ni siquiera puede liquidar mercados con 1,000 pacientes sin quedarse sin memoria (ver Figura 6).",
        "Para abordar este problema, utilizamos un enfoque de formulación incremental.",
        "El primer paso en la búsqueda de árbol guiada por LP es resolver la relajación LP.",
        "Dado que la formulación del ciclo no cabe en la memoria, esta etapa de LP fallaría inmediatamente sin un enfoque de formulación incremental.",
        "Sin embargo, motivados por la observación de que una solución de intercambio puede incluir solo una pequeña fracción de los ciclos, exploramos el enfoque de utilizar la generación de columnas (es decir, ciclos).",
        "La idea de la generación de columnas es comenzar con un LP restringido que contenga solo un pequeño número de columnas (variables, es decir, ciclos), y luego agregar columnas repetidamente hasta que una solución óptima para este LP parcialmente formulado sea una solución óptima para el LP original (también conocido como maestro).",
        "Explicamos esto más a fondo mediante un ejemplo.",
        "Considera el mercado en la Figura 1 con L = 2.",
        "La Figura 5 muestra el LP maestro correspondiente, P, y su dual, D. El primal P maximiza 2c1 + 2c2 + 2c3 sujeto a c1 ≤ 1 (v1), c1 + c2 ≤ 1 (v2), c2 + c3 ≤ 1 (v3), c3 ≤ 1 (v4) con c1, c2, c3 ≥ 0. El dual D minimiza v1 + v2 + v3 + v4 sujeto a v1 + v2 ≥ 2 (c1), v2 + v3 ≥ 2 (c2), v3 + v4 ≥ 2 (c3) con v1, v2, v3, v4 ≥ 0. Figura 5: Formulación del ciclo.",
        "Sea P la restricción de P que contiene solo las columnas c1 y c3.",
        "Sea D el dual de P, es decir, D es simplemente D sin la restricción c2.",
        "Dado que P y D son pequeños, podemos resolverlos para obtener OPT(P) = OPT(D) = 4, con cOPT(P) = c1 = c3 = 1 y vOPT(D) = v1 = v2 = v3 = v4 = 1.",
        "Si cOP T (P ) debe ser una solución factible de P, resulta (afortunadamente) que vOP T (D ) es factible para D, de modo que OPT(D ) ≥ OPT(D).",
        "Podemos verificar esto comprobando que vOP T (D) cumple con las restricciones de D que aún no están en Di, es decir, la restricción c2.",
        "Se deduce que OPT(P) = OPT(D) ≥ OPT(D) = OPT(P), por lo que vOPT(P) es demostrablemente una solución óptima para P, a pesar de que P contiene solo un subconjunto estricto de las columnas de P. Por supuesto, puede resultar (desafortunadamente) que vOPT(D) no sea factible para D. Esto puede ocurrir como se muestra arriba si vOPT(D) = v1 = 2, v2 = 0, v3 = 0, v4 = 2.",
        "Aunque todavía podemos ver que OPT(D) = OPT(D), en general no podemos demostrarlo porque D y P son demasiado grandes para resolver.",
        "En cambio, dado que se viola la restricción c2, agregamos la columna c2 a P, actualizamos D y repetimos.",
        "El problema de encontrar una restricción violada se llama problema de fijación de precios.",
        "Aquí, el precio de una columna (ciclo en nuestra configuración) es la diferencia entre su peso y la suma de los valores duales de los vértices del ciclo.",
        "Si alguna columna de P tiene un precio positivo, su restricción correspondiente está violada y aún no hemos demostrado la optimalidad.",
        "En este caso, debemos seguir generando columnas para agregar a P. Problema de fijación de precios 5.2.1 Para instancias más pequeñas, podemos mantener una colección explícita de todos los ciclos factibles.",
        "Esto hace que el problema de fijación de precios sea fácil y eficiente de resolver: simplemente recorremos la colección de ciclos y buscamos ciclos con precio positivo.",
        "Incluso podemos encontrar ciclos con el precio más positivo, que son los más propensos a mejorar el valor objetivo de LP restringido [1].",
        "Sin embargo, este enfoque no es escalable.",
        "Un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos de longitud de máximo 3 (ver Tabla 2).",
        "Esto es demasiados ciclos para mantener en la memoria.",
        "Por lo tanto, para instancias más grandes, debemos generar ciclos factibles mientras buscamos uno con un precio positivo.",
        "Realizamos esto utilizando un algoritmo de búsqueda en profundidad en el grafo del mercado (ver Figura 1).",
        "Para hacer esta búsqueda más rápida, exploramos los vértices en orden de valores no decrecientes, ya que es más probable que estos vértices pertenezcan a ciclos con peso positivo.",
        "También utilizamos varias reglas de poda para determinar si la ruta de búsqueda actual puede llevar a un ciclo de peso positivo.",
        "Por ejemplo, en un vértice dado en la búsqueda, podemos podar basándonos en el hecho de que cada vértice que visitemos a partir de este punto tendrá un valor al menos tan grande como el vértice actual.",
        "Incluso con estas reglas de poda, la generación de columnas es un cuello de botella.",
        "Por lo tanto, también implementamos las siguientes optimizaciones.",
        "Cuando la búsqueda exhaustiva demuestra que un vértice no pertenece a ningún ciclo de precios positivos, marcamos el vértice y no lo utilizamos como raíz de una búsqueda en profundidad hasta que su valor dual disminuya.",
        "De esta manera, evitamos repetir innecesariamente nuestros esfuerzos computacionales de una iteración previa de generación de columnas.",
        "Finalmente, a veces puede ser beneficioso para la generación de columnas incluir varias columnas de precio positivo en una iteración, ya que puede ser más rápido generar una segunda columna una vez que se encuentra la primera.",
        "Sin embargo, evitamos esto por la siguiente razón.",
        "Si intentamos encontrar más columnas de precio positivo de las que se pueden encontrar, o si las columnas están muy separadas en el espacio de búsqueda, terminamos teniendo que generar y verificar una gran parte de la colección de ciclos factibles.",
        "En nuestros experimentos, hemos observado que esto ocurre en mercados con cientos de millones de ciclos, lo que resulta en costos de computación prohibitivamente caros. 5.2.2 Sembrado de Columnas Incluso si hay solo una pequeña brecha con la relajación principal del LP, la generación de columnas requiere muchas iteraciones para mejorar el valor objetivo del LP restringido.",
        "Cada una de estas 300 iteraciones es costosa, ya que debemos resolver el problema de fijación de precios y volver a resolver el LP restringido.",
        "Por lo tanto, aunque podríamos empezar sin columnas en el LP restringido, es mucho más rápido sembrar el LP con suficientes columnas para que el valor objetivo óptimo no esté muy lejos del LP principal.",
        "Por supuesto, no podemos incluir tantas columnas que nos quedemos sin memoria.",
        "Experimentamos con varios sembradores de columnas.",
        "En una clase de sembrador, utilizamos una heurística para encontrar un intercambio, y luego agregamos los ciclos de ese intercambio al LP restringido inicial.",
        "Implementamos dos heurísticas.",
        "El primero es un algoritmo voraz: para cada vértice en un orden aleatorio, si está sin cubrir, intentamos incluir un ciclo que lo contenga a él y a otros vértices sin cubrir.",
        "El otro heurístico utiliza un código especializado de emparejamiento de peso máximo [16] para encontrar una cobertura óptima mediante ciclos de longitud 2.",
        "Estas heurísticas funcionan extremadamente bien, especialmente teniendo en cuenta el hecho de que solo agregan un pequeño número de columnas.",
        "Por ejemplo, la Tabla 1 muestra que una cobertura óptima por ciclos de longitud 2 tiene casi el mismo peso que el intercambio con tamaño de ciclo no restringido.",
        "Sin embargo, tenemos suficiente memoria para incluir cientos de miles de columnas adicionales y así acercarnos aún más al límite superior.",
        "Nuestro mejor sembrador de columnas construye una colección aleatoria de ciclos factibles.",
        "Dado que un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos factibles, lleva demasiado tiempo generar y recorrer todos los ciclos factibles, por lo que no incluimos una colección aleatoria uniforme.",
        "En cambio, realizamos un recorrido aleatorio en el grafo del mercado (ver, por ejemplo, Figura 1), en el cual, después de cada paso del recorrido, probamos si hay un borde de regreso a nuestro camino que forme un ciclo factible.",
        "Si encontramos un ciclo, este se incluye en el LP restringido y comenzamos una nueva caminata desde un vértice aleatorio.",
        "En nuestros experimentos (ver Sección 6), utilizamos este algoritmo para sembrar el LP con 400,000 ciclos.",
        "Este último enfoque supera a los sembradores heurísticos descritos anteriormente.",
        "Sin embargo, en nuestro algoritmo, utilizamos una combinación que toma la unión de todas las columnas de los tres sembradores.",
        "En la Figura 6, comparamos el rendimiento del sembrador combinado con el sembrador combinado sin el sembrador de recolección aleatoria.",
        "No trazamos el rendimiento del algoritmo sin ningún sembrador en absoluto, porque puede llevar horas despejar mercados que de otra manera podríamos despejar en unos pocos minutos. 5.2.3 Demostrando la optimalidad. Recordemos que nuestro objetivo es encontrar una solución óptima para la relajación principal del LP.",
        "Usando la generación de columnas, podemos demostrar que una solución primal restringida es óptima una vez que todas las columnas tienen precios no positivos.",
        "Desafortunadamente, nuestro problema de compensación tiene el llamado efecto de disminución gradual [1, Sección 6.3], en el cual, aunque el primal restringido es óptimo a posteriori, se requiere un gran número de iteraciones adicionales para demostrar la optimalidad (es decir, eliminar todas las columnas de precio positivo).",
        "No hay una buena solución general para el efecto de disminución.",
        "Sin embargo, para mitigar este efecto, aprovechamos la siguiente observación específica del problema.",
        "Recuerde de la Sección 1.1 que, casi siempre, un intercambio de peso máximo con ciclos de longitud a lo sumo 3 tiene el mismo peso que un intercambio de peso máximo sin restricciones. (Sin embargo, esto no significa que el solucionador para el caso sin restricciones encontrará una solución con ciclos cortos).",
        "Además, el problema de despeje no restringido se puede resolver en tiempo polinómico (ver Sección 4).",
        "Por lo tanto, podemos calcular eficientemente un límite superior en la relajación principal del LP, y, cada vez que el primal restringido alcanza este límite superior, ¡hemos demostrado la optimalidad sin necesidad de eliminar todas las columnas de precio positivo!",
        "Para que esto mejore el tiempo de ejecución del algoritmo en general, necesitamos poder despejar el mercado sin restricciones en menos tiempo del que le lleva a la generación de columnas eliminar todos los ciclos de precios positivos.",
        "Aunque el primer problema es soluble en tiempo polinómico, esto no es trivial para instancias grandes.",
        "Por ejemplo, para un mercado con 10,000 pacientes y 25 millones de conexiones, el código especializado de emparejamiento de peso máximo [16] era demasiado lento, y CPLEX se quedó sin memoria en la codificación de formulación de bordes de la Sección 4.",
        "Para hacer funcionar esta idea, utilizamos generación de columnas para resolver la formulación de bordes.",
        "Esto implica comenzar con un pequeño subconjunto aleatorio de los bordes, y luego agregar bordes con precio positivo uno por uno hasta que no quede ninguno.",
        "Realizamos esta generación de columnas secundarias no en el grafo de mercado original G, sino en el grafo bipartito de emparejamiento perfecto de la Figura 3.",
        "Hacemos esto para que solo necesitemos resolver el LP, no el ILP, ya que la brecha de integralidad en el grafo bipartito de emparejamiento perfecto es 1, es decir, siempre existe una solución integral que alcanza el límite superior fraccional.",
        "El aumento de velocidad resultante en el algoritmo general es dramático, como se puede ver en la Figura 6. 5.2.4 Gestión de Columnas Si el valor óptimo del LP restringido inicial P está lejos del LP maestro P, entonces se generan un gran número de columnas antes de que se cierre la brecha.",
        "Esto conduce a problemas de memoria en mercados con tan solo 4,000 pacientes.",
        "Además, incluso antes de que la memoria se convierta en un problema, las iteraciones de generación de columnas se vuelven lentas debido a la sobrecarga adicional de resolver un LP más grande.",
        "Para abordar estos problemas, implementamos un esquema de gestión de columnas para limitar el tamaño del LP restringido.",
        "Siempre que agregamos columnas al LP, verificamos si contiene más de un número umbral de columnas.",
        "Si este es el caso, eliminamos selectivamente columnas hasta que esté nuevamente por debajo del umbral2.",
        "Como discutimos anteriormente, solo una pequeña fracción de todos los ciclos terminará en la solución final.",
        "Es poco probable que eliminemos dicho ciclo, y aun si lo hacemos, siempre se puede generar de nuevo.",
        "Por supuesto, no debemos ser demasiado agresivos con el umbral, ya que hacerlo podría contrarrestar las ganancias de rendimiento por iteración al aumentar significativamente el número de iteraciones necesarias para obtener un conjunto de columnas adecuado en el LP al mismo tiempo.",
        "Hay algunas columnas que nunca eliminamos, por ejemplo aquellas en las que hemos realizado ramificaciones (ver Sección 5.3.2), o aquellas con un valor de LP distinto de cero.",
        "Entre el resto, eliminamos aquellos con el precio más bajo, ya que corresponden a las restricciones duales que están más satisfechas.",
        "Este esquema de gestión de columnas funciona bien y nos ha permitido despejar mercados con 10,000 pacientes, como se ve en la Figura 6. 5.3 Búsqueda de Ramificación y Precio para el ILP Dado un problema grande de despeje de mercado, podemos resolver con éxito su relajación LP hasta la optimalidad utilizando las mejoras de generación de columnas descritas anteriormente.",
        "Sin embargo, las soluciones que encontramos suelen ser fraccionarias.",
        "Por lo tanto, en el paso 2 siguiente, basándonos en el tamaño de la memoria, establecemos el umbral en 400,000. El paso 301 implica realizar una búsqueda de árbol de ramificación y precio [1] para encontrar una solución integral óptima.",
        "Breve, esta es la idea de ramificar y fijar precios.",
        "Siempre que establecemos una variable fraccional en 0 o 1 (rama), tanto el LP maestro como la restricción con la que estamos trabajando se modifican (se restringen).",
        "Por defecto, entonces, necesitamos realizar la generación de columnas (es decir, el esfuerzo de fijar precios) en cada nodo del árbol de búsqueda para demostrar que la restricción restringida es óptima para el LP maestro restringido. (Sin embargo, como se discute en la Sección 5.2.3, calculamos el límite superior integral para el nodo raíz basado en relajar completamente la restricción de longitud del ciclo, y cada vez que algún LP de los nodos en el árbol alcance ese valor, no necesitamos seguir fijando precios de columnas en ese nodo).",
        "Para el problema de despeje con ciclos de longitud a lo sumo 3, hemos encontrado que rara vez hay una brecha entre las soluciones integrales y fraccionarias óptimas.",
        "Esto significa que podemos evitar en gran medida el costoso paso de fijar precios por nodo: cuando el LP restringido restringido tiene el mismo valor óptimo que su padre en la búsqueda del árbol, podemos demostrar la optimalidad del LP, como se muestra en la Sección 5.2.3, sin tener que incluir columnas adicionales en el LP restringido.",
        "Aunque CPLEX puede resolver ILPs, no admite la técnica de branch-and-price (por ejemplo, debido a posibles complicaciones específicas del problema que involucran la interacción entre la regla de ramificación y el problema de fijación de precios).",
        "Por lo tanto, implementamos nuestro propio algoritmo de ramificación y precio, el cual explora el árbol de búsqueda en orden de profundidad primero.",
        "También experimentamos con el orden de selección de nodos A* [7, 2].",
        "Sin embargo, esta estrategia de búsqueda requiere significativamente más memoria, la cual encontramos que se empleaba mejor para acelerar la fase de generación de columnas (ver Sección 5.2.2).",
        "Los componentes principales restantes del algoritmo se describen en las dos siguientes subsecciones. 5.3.1 Heurísticas Primal Antes de ramificar en una variable fraccional, utilizamos heurísticas primales para construir una solución integral factible.",
        "Estas soluciones son límites inferiores de las soluciones integrales óptimas finales.",
        "Por lo tanto, cuando una solución fraccional restringida no es mejor que la mejor solución integral encontrada hasta el momento, podamos el subárbol actual.",
        "Una heurística primal es efectiva si es eficiente y construye límites inferiores ajustados.",
        "Experimentamos con dos heurísticas primarias.",
        "El primero es un algoritmo de redondeo simple [8]: incluir todos los ciclos con un valor fraccional de al menos 0.5, y luego, asegurando la viabilidad, agregar de forma codiciosa los ciclos restantes.",
        "Si bien esta heurística es eficiente, encontramos que los límites inferiores que construye rara vez permiten realizar un gran número de podas.",
        "También intentamos usar CPLEX como una heurística primal.",
        "En cualquier nodo dado del árbol de búsqueda, podemos convertir la relajación LP restringida de nuevo a un ILP reintroduciendo las restricciones de integralidad.",
        "CPLEX tiene varias heurísticas primales integradas, las cuales podemos aplicar a este ILP.",
        "Además, podemos utilizar la búsqueda de árbol propia de CPLEX para encontrar una solución integral óptima.",
        "En general, esta búsqueda de árbol es mucho más rápida que la nuestra.",
        "Si CPLEX encuentra una solución integral que coincida con el límite superior fraccional en el nodo raíz, hemos terminado.",
        "De lo contrario, no existe tal solución integral, o aún no tenemos la combinación correcta de ciclos en el LP restringido.",
        "Para los mercados de intercambio de riñones, generalmente es la segunda razón la que se aplica (ver Secciones 5.2.2 y 5.2.4).",
        "Por lo tanto, en algún momento de la búsqueda en el árbol, una vez que se han generado más columnas como resultado de la ramificación, la heurística de CPLEX encontrará una solución integral óptima.",
        "Aunque la búsqueda de árbol de CPLEX es más rápida que la nuestra, no es tan rápida como para poder aplicarla a cada nodo en nuestro árbol de búsqueda.",
        "Por lo tanto, realizamos las siguientes optimizaciones.",
        "En primer lugar, agregamos una restricción que requiere que el valor objetivo del ILP sea tan grande como el objetivo fraccional.",
        "Si este no es el caso, queremos abortar y proceder a generar más columnas con nuestra búsqueda de ramificación y precio.",
        "En segundo lugar, limitamos el número de nodos en el árbol de búsqueda de CPLEX.",
        "Esto se debe a que hemos observado que no existe una solución integral, CPLEX puede tardar mucho tiempo en demostrarlo.",
        "Finalmente, solo aplicamos la heurística CPLEX en un nodo si tiene un conjunto de ciclos suficientemente diferente al de su padre.",
        "Utilizar CPLEX como heurística primal tiene un gran impacto porque reduce el tamaño del árbol de búsqueda, evitando así todo el trabajo de fijación computacionalmente costoso en los nodos que no se generan en este árbol más pequeño. 5.3.2 Ramificador de Ciclo. Experimentamos con dos estrategias de ramificación, ambas seleccionan una variable por nodo.",
        "La primera estrategia, ramificación por certeza, selecciona aleatoriamente una variable de aquellas cuyo valor LP está más cercano a 1.",
        "La segunda estrategia, ramificación por incertidumbre, selecciona aleatoriamente una variable cuyo valor LP esté más cercano a 0.5.",
        "En ambos casos, se generan dos hijos del nodo correspondientes a dos subárboles, uno en el que la variable se establece en 0 y otro en el que se establece en 1.",
        "Nuestro recorrido en profundidad siempre elige explorar primero el subárbol en el que el valor de la variable está más cerca de su valor fraccionario.",
        "Para nuestro problema de despeje con ciclos de longitud como máximo 3, encontramos que el ramificado por incertidumbre es superior, rara vez requiriendo retroceso alguno. 6.",
        "RESULTADOS EXPERIMENTALES Todos nuestros experimentos se realizaron en Linux (Red Hat 9.0), utilizando una PC Dell con un procesador Intel Pentium 4 de 3GHz y 1GB de RAM.",
        "Dondequiera que usamos CPLEX (por ejemplo, al resolver el LP y como heurística primal, como se discutió en las secciones anteriores), usamos CPLEX 10.010.",
        "La Figura 6 muestra el rendimiento en tiempo de ejecución de cuatro algoritmos de limpieza.",
        "Para cada tamaño de mercado listado, generamos aleatoriamente 10 mercados e intentamos liquidarlos utilizando cada uno de los algoritmos.",
        "El primer algoritmo es CPLEX en la formulación del ciclo completo.",
        "Este algoritmo no logra despejar ningún mercado con 1000 pacientes o más.",
        "Además, su tiempo de ejecución en mercados más pequeños que este es significativamente peor que el de los otros algoritmos.",
        "Los otros algoritmos son variaciones del enfoque de generación de columnas incremental descrito en la Sección 5.",
        "Comenzamos con la siguiente configuración (todas las optimizaciones están activadas): Categoría Configuración Columna Sembrador Combinación de heurísticas de intercambio voraz y emparejamiento de peso máximo, y sembrador de caminata aleatoria (400,000 ciclos).",
        "Generación de columnas una columna a la vez.",
        "Gestión de columnas activada, con límite de 400,000 columnas.",
        "Comprobador de Optimalidad Encendido.",
        "Redondeo heurístico primal y búsqueda en el árbol de CPLEX.",
        "Regla de ramificación de incertidumbre. La combinación de estas optimizaciones nos permite liquidar fácilmente mercados con más de 10,000 pacientes.",
        "En cada uno de los dos próximos algoritmos, desactivamos una de estas optimizaciones para resaltar su efectividad.",
        "Primero, restringimos el sembrador para que solo comience con 10,000 ciclos.",
        "Esta configuración es más rápida para instancias más pequeñas, ya que las relajaciones de LP son más pequeñas y se resuelven más rápido.",
        "Sin embargo, al llegar a 5000 vértices, este efecto comienza a ser contrarrestado por la generación adicional de columnas que se debe realizar.",
        "Para una instancia más grande, este sembrador restringido es claramente peor.",
        "Finalmente, restauramos el sembrador a su configuración optimizada, pero esta vez, eliminamos el verificador de optimalidad descrito en la Sección 5.2.3.",
        "Como en muchos problemas de generación de columnas, el efecto de disminución es significativo.",
        "Aprovechando las propiedades de nuestro problema, logramos despejar un mercado con 10,000 pacientes en aproximadamente el mismo tiempo que habría tomado despejar un mercado de 6000 pacientes. 7.",
        "IMPLEMENTANDO LA TECNOLOGÍA Nuestro algoritmo e implementación reemplazaron a CPLEX como algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones, en diciembre de 2006.",
        "Realizamos una ejecución de prueba cada dos semanas, y los primeros trasplantes basados en nuestras soluciones ya han sido realizados.",
        "Aunque actualmente existen al menos cuatro intercambios de riñones en los Estados Unidos por razones políticas o interpersonales, todos comprenden que un intercambio nacional unificado y sin fragmentar salvaría más vidas.",
        "Estamos en conversaciones con intercambios de riñón adicionales que están interesados en adoptar nuestra tecnología.",
        "De esta manera, nuestra tecnología (y los procesos que la rodean) esperamos que sirvan como un sustrato que eventualmente ayudará a unificar los intercambios.",
        "Al menos la escalabilidad computacional ya no es un obstáculo.",
        "CONCLUSIÓN E INVESTIGACIONES FUTURAS En este trabajo hemos desarrollado los algoritmos exactos más escalables para intercambios de trueque hasta la fecha, con un enfoque especial en el próximo mercado nacional de intercambio de riñones en el que los pacientes con enfermedad renal serán emparejados con donantes compatibles intercambiando a sus propios donantes dispuestos pero incompatibles.",
        "Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a la enfermedad renal.",
        "Nuestro trabajo presenta el primer algoritmo capaz de liquidar estos mercados a nivel nacional.",
        "Resuelve de manera óptima el problema de compensación de intercambio de riñones con 10,000 pares donante-receptor.",
        "Por lo tanto, no es necesario recurrir a soluciones aproximadas.",
        "La mejor tecnología previa (CPLEX básico) no puede manejar instancias de más de aproximadamente 900 pares de donantes-receptores porque se queda sin memoria.",
        "La clave de nuestra mejora es la formulación incremental de problemas.",
        "Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas.",
        "Para cada uno, desarrollamos una serie de técnicas que mejoran sustancialmente tanto el tiempo de ejecución como el uso de memoria.",
        "Algunas de las técnicas utilizan observaciones específicas del dominio, mientras que otras son independientes del dominio.",
        "Concluimos que la generación de columnas escala de manera significativamente mejor que la generación de restricciones.",
        "Para la generación de columnas en el LP, nuestras mejoras incluyen técnicas de fijación de precios, técnicas de siembra de columnas, técnicas para demostrar la optimalidad sin tener que traer todas las columnas con precio positivo (y utilizando otro proceso de generación de columnas en una formulación diferente para hacerlo), y técnicas de eliminación de columnas.",
        "Para la búsqueda de ramificación y precio en el programa entero que rodea al LP, nuestras mejoras incluyen heurísticas primales y también comparamos estrategias de ramificación.",
        "Sin duda, se podrían utilizar ajustes adicionales de parámetros y quizás técnicas adicionales de mejora de velocidad para hacer que el algoritmo sea aún más rápido.",
        "Nuestro algoritmo también admite varias generalizaciones, según lo deseado por los intercambios reales de riñones.",
        "Estos incluyen múltiples donantes alternativos por paciente, bordes ponderados en el grafo del mercado (para codificar diferencias en años de vida esperados añadidos basados en grados de compatibilidad, edad y peso del paciente, etc., así como la probabilidad de incompatibilidad de último minuto), cadenas desencadenadas por ángeles (cadenas de trasplantes desencadenadas por donantes altruistas que no tienen pacientes asociados con ellos, cada cadena termina con un riñón sobrante), y problemas adicionales (como diferentes puntajes para salvar a diferentes donantes altruistas o riñones sobrantes para futuras ejecuciones de emparejamiento basadas en tipo de sangre, tipo de tejido y probabilidad de que el órgano no desaparezca del mercado porque el donante tenga dudas).",
        "Debido a que utilizamos una metodología de PLI, también podemos soportar una variedad de restricciones laterales, las cuales a menudo desempeñan un papel importante en los mercados en la práctica [19].",
        "También podemos respaldar la asignación forzosa de una parte, por ejemplo, este adolescente gravemente enfermo debe recibir un riñón si es posible.",
        "Nuestro trabajo ha tratado el intercambio de riñones como un problema por lotes con información completa (al menos a corto plazo, es probable que los intercambios de riñones sigan funcionando en modo por lotes de vez en cuando).",
        "Dos direcciones importantes para trabajos futuros son abordar explícitamente tanto los aspectos en línea como los de información limitada del problema.",
        "El aspecto en línea es que los beneficiarios y donantes irán llegando al sistema con el tiempo, y puede ser mejor no llevar a cabo el intercambio óptimo de forma miope ahora, sino reservar parte del mercado actual para futuras coincidencias.",
        "De hecho, se ha realizado cierto trabajo al respecto en ciertos entornos restringidos [22, 24].",
        "El aspecto de información limitada es que incluso en modo por lotes, el grafo proporcionado como entrada no es completamente correcto: varios pares donante-receptor que se creían compatibles resultan ser incompatibles cuando se realizan pruebas de último minuto más costosas.",
        "Por lo tanto, sería deseable realizar una optimización teniendo esto en cuenta, como producir un subgrafo robusto de bajo grado para ser probado antes de que se genere la coincidencia final, o producir un plan de contingencia en caso de fallo.",
        "Actualmente estamos explorando varias preguntas en esta línea, pero ciertamente hay mucho más por hacer.",
        "Agradecimientos Agradecemos a los economistas Al Roth y Utku Unver, así como al cirujano de trasplantes de riñón Michael Rees, por alertarnos sobre el hecho de que la tecnología previa era insuficiente para el problema de compensación a escala nacional, proporcionar conjuntos de datos iniciales y discutir los detalles del proceso de intercambio de riñones.",
        "También agradecemos a Don Sheehy por habernos hecho notar la idea del intercambio de zapatos.",
        "Este trabajo fue apoyado en parte por la Fundación Nacional de Ciencias bajo los subsidios IIS-0427858 y CCF-0514922.",
        "REFERENCIAS [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh y P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Tiempo de limpieza (segundos) Número de pacientes Nuestro algoritmo Nuestro algoritmo con sembrador de columnas restringido Nuestro algoritmo sin demostrador de optimalidad Formulación de ciclo CPLEX Figura 6: Resultados experimentales: tiempo de ejecución promedio con barras de desviación estándar.",
        "Rama y precio: Generación de columnas para resolver programas enteros enormes.",
        "Investigación de Operaciones, 46:316-329, mayo-junio de 1998. [2] R. Dechter y J. Pearl.",
        "Estrategias generalizadas de búsqueda de mejor primero y la optimalidad de A*.",
        "Revista de la ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
        "Intercambio de riñones - avances en el trasplante de donante vivo.",
        "Revista de Medicina de Nueva Inglaterra, 350:1812-1814, 2004. [4] J. Edmonds.",
        "Camino, árboles y flores.",
        "Revista Canadiense de Matemáticas, 17:449-467, 1965. [5] M. R. Garey y D. S. Johnson.",
        "Computadoras e Intractabilidad; Una Guía de la Teoría de NP-Completitud. 1990. [6] S. E. Gentry, D. L. Segev y R. A. Montgomery.",
        "Una comparación de las poblaciones atendidas por donación emparejada de riñón y donación emparejada de lista.",
        "Revista Americana de Trasplantes, 5(8):1914-1921, agosto de 2005. [7] P. Hart, N. Nilsson y B. Raphael.",
        "Una base formal para la determinación heurística de caminos de costo mínimo.",
        "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman y M. Padberg.",
        "Resolviendo problemas de programación de tripulaciones aéreas mediante ramificación y corte.",
        "Ciencia de la Gestión, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] Intercambio Nacional de Zapatos Impares. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Léelo, cámbialo. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez y M. U. Unver.",
        "Intercambio de riñones.",
        "Revista Trimestral de Economía, 119(2):457-488, mayo de 2004. [14] A. E. Roth, T. Sonmez y M. U. Unver.",
        "Un centro de intercambio de riñones en Nueva Inglaterra.",
        "Revista Económica Americana, 95(2):376-380, mayo de 2005. [15] A. E. Roth, T. Sonmez y M. U. Unver.",
        "Intercambio eficiente de riñones: Coincidencia de deseos en un mercado con preferencias basadas en la compatibilidad.",
        "American Economic Review, próximo. [16] E. Rothberg.",
        "Algoritmo de emparejamiento de peso máximo de Gabow n3: una implementación.",
        "El Primer Desafío de Implementación DIMACS, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver y F. L. Delmonico.",
        "Aumentando la oportunidad de donación de riñón en vida mediante el emparejamiento para intercambios de dos y tres vías.",
        "Trasplante, 81(5):773-782, 2006. [18] T. Sandholm.",
        "Algoritmos óptimos de determinación de ganadores.",
        "En Subastas Combinatorias, Cramton, Shoham y Steinberg, eds.",
        "MIT Press, 2006. [19] T. Sandholm y S. Suri.",
        "Restricciones laterales y atributos no relacionados con el precio en los mercados.",
        "En el taller IJCAI-2001 sobre Razonamiento de Restricciones Distribuidas, páginas 55-61, Seattle, WA, 2001.",
        "Para aparecer en Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb y R. A. Montgomery.",
        "Donación emparejada de riñón y optimización del uso de órganos de donantes vivos.",
        "Revista de la Asociación Médica Estadounidense, 293(15):1883-1890, abril de 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
        "Intercambio dinámico de riñones.",
        "Documento de trabajo. [23] Sistema de Datos Renales de los Estados Unidos (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
        "Control óptimo de un programa de intercambio de riñones emparejados.",
        "Ciencias de la Gestión, 48(3):328-342, marzo de 2002. 304"
    ],
    "error_count": 10,
    "keys": {
        "barter-exchange market": {
            "translated_key": "mercado de intercambio por trueque",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national kidney exchange.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that column generation scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
                "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "Kidney failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a kidney transplant.",
                "Kidney transplants are by far the most common transplant.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
                "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of barter exchanges.",
                "In a <br>barter-exchange market</br>, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe exchange in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
                "We can encode a barter exchange market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An exchange is a collection of disjoint cycles.",
                "The weight of an exchange is the sum of its cycle weights.",
                "A social welfare maximizing exchange is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market.",
                "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
                "For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general barter exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight exchange has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
                "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
                "Table 2 gives additional characteristics of the kidney-exchange market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect matching.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation.",
                "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
                "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the cycle formulation.",
                "We show how to construct an equivalent solution in the edge formulation.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the cycle formulation is tighter than the edge formulation.",
                "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, column generation is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
                "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
                "To make this idea work then, we used column generation to solve the edge formulation.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of branch-and-price.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full cycle formulation.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental column generation approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
                "Column Generation One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many column generation problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
                "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
                "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and column generation.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that column generation scales dramatically better than constraint generation.",
                "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
                "Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
                "Branch-and-price: Column generation for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by kidney paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Kidney exchange.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A kidney exchange clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight matching algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live kidney donation by matching for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "Kidney paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic kidney exchange.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-kidney exchange program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [
                "In a <br>barter-exchange market</br>, agents (patients) seek to swap their items (incompatible donors) with each other."
            ],
            "translated_annotated_samples": [
                "En un <br>mercado de intercambio por trueque</br>, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí."
            ],
            "translated_text": "Algoritmos de compensación para mercados de intercambio de trueque: Facilitando los intercambios de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales. El problema de compensación implica encontrar un intercambio que maximice el bienestar social cuando la longitud máxima de un ciclo está fija. Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente. Además, en los intercambios de trueque en general, más agentes se ven afectados si uno abandona un ciclo más largo. Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro. Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones. Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. La clave es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. Concluimos que la generación de columnas escala considerablemente mejor que la generación de restricciones. Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de riñón. Nuestro algoritmo reemplazó a CPLEX como el algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones. Las carreras de fósforos se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas]: [General] Términos Generales Algoritmos, Economía 1. INTRODUCCIÓN El papel de los riñones es filtrar los desechos de la sangre. La insuficiencia renal resulta en la acumulación de estos desechos, lo cual conduce a la muerte en meses. Una opción de tratamiento es la diálisis, en la que el paciente va a un hospital para que su sangre sea filtrada por una máquina externa. Se requieren varias visitas por semana, y cada una lleva varias horas. La calidad de vida en diálisis puede ser extremadamente baja, de hecho, muchos pacientes optan por retirarse de la diálisis, lo que conduce a una muerte natural. Solo el 12% de los pacientes en diálisis sobreviven 10 años [23]. En cambio, el tratamiento preferido es un trasplante de riñón. Los trasplantes de riñón son, con mucho, los trasplantes más comunes. Desafortunadamente, la demanda de riñones supera con creces la oferta. En los Estados Unidos en 2005, 4,052 personas murieron esperando un trasplante de riñón que les salvara la vida. Durante este tiempo, casi 30,000 personas fueron añadidas a la lista nacional de espera, mientras que solo 9,913 personas salieron de la lista después de recibir un riñón de donante fallecido. La lista de espera actualmente tiene más de 70,000 personas, y el tiempo de espera mediano varía de 2 a 5 años, dependiendo del tipo de sangre. Para muchos pacientes con enfermedad renal, la mejor opción es encontrar un donante vivo, es decir, una persona sana dispuesta a donar uno de sus dos riñones. Aunque existen mercados para comprar y vender riñones de donantes vivos, la comercialización de órganos humanos es casi universalmente considerada como antiética, y la práctica suele ser explícitamente ilegal, como en los Estados Unidos. Sin embargo, en la mayoría de los países, la donación en vida es legal, siempre y cuando se realice como un regalo sin compensación financiera. En 2005, hubo 6,563 donaciones en vida en los Estados Unidos. El número de donaciones en vida habría sido mucho mayor si no fuera por el hecho de que, con frecuencia, un posible donante y su receptor previsto son incompatibles en tipo de sangre o tipo de tejido. En el pasado, el donante incompatible fue enviado a casa, dejando al paciente a la espera de un riñón de un donante fallecido. Sin embargo, ahora hay algunos intercambios renales regionales en los Estados Unidos, en los que los pacientes pueden intercambiar sus donantes incompatibles entre sí, para así obtener cada uno un donante compatible. Estos mercados son ejemplos de intercambios de trueque. En un <br>mercado de intercambio por trueque</br>, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Los intercambios de trueque son ubicuos: ejemplos incluyen Peerflix (DVDs) [11], Read It Swap It (libros) [12], e Intervac (casas de vacaciones) [9]. Durante muchos años, incluso ha habido un gran intercambio de zapatos en los Estados Unidos [10]. Las personas con pies de diferentes tamaños usan esto para evitar tener que comprar dos pares de zapatos. Los amputados de pierna tienen un intercambio separado para compartir el costo de comprar un par de zapatos. Podemos codificar un mercado de intercambio de trueque como un grafo dirigido G = (V, E) de la siguiente manera. Construye un vértice para cada agente. Agregar un borde ponderado e desde un agente vi hacia otro vj, si vi desea el artículo de vj. El peso que representamos de e es la utilidad para vi de obtener el artículo vjs. Un ciclo c en este grafo representa un intercambio posible, donde cada agente en el ciclo obtiene el artículo del siguiente agente. El peso wc de un ciclo c es la suma de los pesos de sus aristas. Un intercambio es una colección de ciclos disjuntos. El peso de un intercambio es la suma de los pesos de sus ciclos. Un intercambio que maximiza el bienestar social es aquel con un peso máximo. La Figura 1 ilustra un mercado de ejemplo con 5 agentes, {v1, v2, . . . , v5}, en el que todos los bordes tienen peso 1. El mercado tiene 4 ciclos, c1 = v1, v2, c2 = v2, v3, c3 = v3, v4 y c4 = v1, v2, v3, v4, v5, y dos intercambios maximales (de inclusión), a saber, M1 = {c4} y M2 = {c1, c3}. El intercambio M1 tiene tanto el peso máximo como la cardinalidad máxima (es decir, incluye la mayor cantidad de aristas/vértices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figura 1: Mercado de intercambio de trueque de ejemplo. El problema de compensación consiste en encontrar un intercambio de peso máximo que consista en ciclos con una longitud de a lo sumo una pequeña constante L. Esta restricción de longitud de ciclo surge naturalmente por varias razones. Por ejemplo, en un intercambio de riñón, todas las operaciones en un ciclo deben realizarse simultáneamente; de lo contrario, un donante podría retractarse después de que su pareja incompatible haya recibido un riñón. (No se puede redactar un contrato vinculante para donar un órgano). Esto da lugar a una restricción logística en el tamaño del ciclo: incluso si todos los donantes son operados primero y se utiliza el mismo personal e instalaciones para luego operar a los receptores, un ciclo k requiere entre 3k y 6k médicos, alrededor de 4k enfermeras y casi 2k salas de operaciones. Debido a tales limitaciones de recursos, es probable que el próximo mercado nacional de intercambio de riñones solo permita ciclos de longitud 2 y 3. Otra motivación para ciclos cortos es que si el ciclo falla en intercambiarse, menos agentes se ven afectados. Por ejemplo, las pruebas de último minuto en un intercambio de riñones a menudo revelan nuevas incompatibilidades que no fueron detectadas en las pruebas iniciales (en base a las cuales se construyó el grafo de compatibilidad). Más generalmente, un agente puede abandonar un ciclo si sus preferencias han cambiado, o simplemente no cumple con sus obligaciones (como enviar un libro a otro agente en el ciclo) debido a olvidos. En la Sección 3, demostramos que (la versión de decisión del) problema de despeje es NP-completo para L ≥ 3. Una posible estrategia sería buscar un buen heurístico o algoritmo de aproximación. Sin embargo, por dos razones, buscamos un algoritmo exacto basado en un programa lineal entero (PLE), que resolvemos utilizando una búsqueda especializada en árboles. • Primero, cualquier pérdida de optimalidad podría llevar a muertes de pacientes innecesarias. • Segundo, una característica atractiva de utilizar una formulación de PLE es que permite modelar fácilmente una serie de variaciones en el objetivo y agregar restricciones adicionales al problema. Por ejemplo, si se cree que los ciclos de 3 elementos tienen más probabilidades de fallar que los ciclos de 2 elementos, entonces simplemente se les puede asignar un peso que sea apropiadamente menor que 3/2 del peso de un ciclo de 2 elementos. O, si por diversas razones (por ejemplo, éticas) se requiere un intercambio de cardinalidad máxima, al menos se puede encontrar en una segunda pasada la solución (de entre todas las soluciones de cardinalidad máxima) que tenga el menor número de 3-ciclos. Otras variaciones que se pueden resolver incluyen encontrar diversas formas de colecciones de ciclos tolerantes a fallos (no disjuntas) en caso de que ciertos pares que se creían compatibles resulten ser incompatibles después de todo. En este documento, presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Las codificaciones de ILP directas son demasiado grandes para siquiera construirse en el hardware actual, sin mencionar resolverlas. La clave entonces es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas (principalmente específicas del problema) que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. 1.1 Trabajos Previos Varios artículos recientes han utilizado simulaciones y algoritmos de compensación de mercado para explorar el impacto de un intercambio nacional de riñones [13, 20, 6, 14, 15, 17]. Por ejemplo, utilizando el algoritmo de coincidencia máxima de Edmonds [4], [20] se muestra que un mercado nacional de intercambio por pares (utilizando solo ciclos de longitud 2) resultaría en más trasplantes, tiempos de espera reducidos y ahorros de $750 millones en costos de atención médica durante 5 años. Esos resultados son conservadores de dos maneras. En primer lugar, el mercado simulado contenía solo 4,000 pacientes iniciales, con 250 pacientes añadidos cada 3 meses. Se nos ha informado que el mercado podría ser casi el doble de este tamaño. En segundo lugar, los intercambios se restringieron a ciclos de longitud 2 (porque eso es todo lo que se puede modelar como coincidencia máxima y resolver utilizando el algoritmo de Edmonds). Permitir ciclos de longitud 3 conlleva a ganancias adicionales significativas. Esto se ha demostrado en mercados de intercambio de riñones con 100 pacientes utilizando CPLEX para resolver una codificación de programa entero del problema de compensación [15]. En este documento, presentamos un algoritmo alternativo para este programa entero que puede despejar mercados con más de 10,000 pacientes (y el mismo número de donantes dispuestos). Permitir ciclos de longitud mayor a 3 a menudo no conduce a ninguna mejora en el tamaño del intercambio [15]. (Además, en un modelo teórico simplificado, cualquier intercambio de riñón se puede convertir en uno con ciclos de longitud de a lo sumo 4 [15].) Si bien esto no se aplica a intercambios de trueque generales, ni siquiera a todos los mercados de intercambio de riñones, en la Sección 5.2.3 hacemos uso de la observación de que los ciclos cortos son suficientes para aumentar drásticamente la velocidad de nuestro algoritmo. A un nivel alto, el problema de compensación para intercambios de trueque es similar al problema de compensación (también conocido como problema de determinación de ganadores) en subastas combinatorias. En ambos contextos, la idea es recopilar toda la información pertinente sobre los agentes en un punto central de compensación y ejecutar un algoritmo centralizado de compensación para determinar la asignación. Ambos problemas son NP-duros. Ambos se resuelven mejor utilizando técnicas de búsqueda en árboles. Desde 1999, se ha realizado un trabajo significativo en informática y investigación de operaciones sobre algoritmos de búsqueda de árboles óptimos más rápidos para despejar subastas combinatorias. (Para una revisión reciente, consulte [18].) Sin embargo, el problema de compensación del intercambio de riñones (con un límite de 3 o más en el tamaño del ciclo) es diferente del problema de compensación de la subasta combinatoria de formas significativas. La diferencia más importante es que las formulaciones naturales del problema de subasta combinatoria tienden a ajustarse fácilmente en la memoria, por lo que el tiempo es el cuello de botella en la práctica. Por el contrario, las formulaciones naturales del problema de intercambio de riñones (con L = 3) ocupan al menos espacio cúbico en el número de pacientes para incluso modelar, y por lo tanto la memoria se convierte en un cuello de botella mucho antes que el tiempo al utilizar la búsqueda de árbol estándar, como branch-and-cut en CPLEX, para abordar el problema. (En una computadora de 1GB y un generador de instancias estándar realista, discutido más adelante, CPLEX 10.010 se queda sin memoria en cinco de las diez instancias de 900 pacientes y en las diez de las diez instancias de 1,000 pacientes que generamos). Por lo tanto, los enfoques que se han desarrollado para subastas combinatorias no pueden manejar el problema del intercambio de riñones. 1.2 Esquema del documento El resto del documento está organizado de la siguiente manera. La sección 2 discute el proceso mediante el cual generamos datos realistas del mercado de intercambio de riñones, con el fin de comparar los algoritmos de compensación. La sección 3 contiene una demostración de que el problema de decisión de compensación del mercado es NP-completo. Las secciones 4 y 5 contienen cada una una formulación ILP del problema de compensación. También detallamos en esas secciones nuestras técnicas utilizadas para resolver esos programas en instancias grandes. La sección 6 presenta experimentos sobre las diversas técnicas. La sección 7 discute la implementación reciente de nuestro algoritmo. Finalmente, presentamos nuestras conclusiones en la Sección 8 y sugerimos direcciones para investigaciones futuras. CARACTERÍSTICAS DEL MERCADO Y GENERADOR DE INSTANCIAS Probamos los algoritmos en mercados simulados de intercambio de riñones, los cuales son generados por un proceso descrito en Saidman et al. [17]. Este proceso se basa en los extensos datos a nivel nacional mantenidos por la Red Unida para el Comparto de Órganos (UNOS), por lo que genera una distribución realista de instancias. Varios artículos han utilizado variaciones de este proceso para demostrar la efectividad de un intercambio nacional de riñones (extrapolando de pequeñas instancias o restringiendo la compensación a ciclos de 2) [6, 20, 14, 13, 15, 17]. En resumen, el proceso implica generar pacientes con un tipo de sangre, sexo y probabilidad de ser incompatible en el tipo de tejido con un donante elegido al azar. Estas probabilidades se basan en datos reales de la población del mundo real. A cada paciente se le asigna un posible donante con un tipo de sangre aleatorio y una relación con el paciente. Si el paciente y el posible donante son incompatibles, ambos son ingresados en el mercado. La información del tipo de sangre y del tipo de tejido se utiliza luego para decidir qué pacientes y donantes son compatibles. Una complicación, manejada por el generador, es que si la paciente es mujer y ha tenido un hijo con su potencial donante, entonces la probabilidad de que los dos sean incompatibles aumenta. (Esto se debe a que la madre desarrolla anticuerpos contra su pareja durante el embarazo). Finalmente, aunque nuestros algoritmos pueden manejar funciones de peso más generales, los pacientes tienen una utilidad de 1 para donantes compatibles, ya que su probabilidad de supervivencia no se ve afectada por la elección del donante [3]. Esto significa que el intercambio de peso máximo tiene la máxima cardinalidad. La Tabla 1 proporciona límites inferiores y superiores sobre el tamaño de un intercambio de máxima cardinalidad en el mercado de intercambio de riñones. Los límites inferiores se encontraron al despejar el mercado solo con ciclos de longitud 2, mientras que los límites superiores no tenían restricción en la longitud del ciclo. Para cada tamaño de mercado, los límites fueron calculados sobre 10 mercados generados aleatoriamente. Ten en cuenta que puede haber una gran cantidad de variabilidad en los mercados: en un mercado de 5000 pacientes, menos de 1000 pacientes estaban en el intercambio de cardinalidad máxima. Tamaño máximo de intercambio Longitud-2 ciclos solamente Ciclos arbitrarios Pacientes Media Máximo Media Máximo 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Tabla 1: Límites superiores e inferiores en el tamaño del intercambio. La Tabla 2 proporciona características adicionales del mercado de intercambio de riñones. Ten en cuenta que un mercado con 5000 pacientes puede tener más de 450 millones de ciclos de longitud 2 y 3. Longitud de los bordes 2 y 3 ciclos Pacientes Media Máx. Media Máx. 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Tabla 2: Características del mercado. 297 COMPLEJIDAD DEL PROBLEMA En esta sección, demostramos que (la versión de decisión del) problema de compensación de mercado con ciclos cortos es NP-completo. Teorema 1. Dado un grafo G = (V, E) y un entero L ≥ 3, el problema de decidir si G admite una cubierta de ciclos perfecta que contenga ciclos de longitud como máximo L es NP-completo. Prueba. Es claro que este problema está en NP. Para la NP-dificultad, reducimos desde 3D-Matching, que es el problema de, dado conjuntos disjuntos X, Y y Z de tamaño q, y un conjunto de triples T ⊆ X × Y × Z, decidir si existe un subconjunto disjunto M de T con tamaño q. Una idea directa es construir un grafo tripartito con conjuntos de vértices X ∪ Y ∪ Z y aristas dirigidas (xa, yb), (yb, zc) y (zc, xa) para cada triple ti = {xa, yb, zc} ∈ T. Sin embargo, no es demasiado difícil ver que esta codificación falla porque una cobertura de ciclo perfecta puede incluir un ciclo sin un triple correspondiente. En cambio, utilizamos la siguiente reducción. Dado una instancia de 3D-Matching, construye un vértice para cada elemento en X, Y y Z. Para cada tripleta, ti = {xa, yb, zc}, construya el dispositivo en la Figura 2, que es similar a uno en Garey y Johnson [5, pp 68-69]. Ten en cuenta que los dispositivos se intersecan solo en los vértices de X ∪ Y ∪ Z. Es claro que esta construcción puede realizarse en tiempo polinómico. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figura 2: Dispositivo de NP-completitud para la tripleta ti y la longitud máxima del ciclo L. Sea M un emparejamiento 3D perfecto. Mostraremos que la construcción admite una cobertura perfecta de ciclos mediante ciclos cortos. Si ti = {xa, yb, zc} ∈ M, añade desde el gadget de ti los tres ciclos de longitud L que contienen a xa, yb y zc respectivamente. También añade el ciclo ª xi a, yi b, zi c «. De lo contrario, si ti ∉ M, añade los tres ciclos de longitud L que contienen xi a, yi b y zi c respectivamente. Es claro que todos los vértices están cubiertos, ya que M particiona X × Y × Z. Por el contrario, supongamos que tenemos una cobertura perfecta mediante ciclos cortos. Ten en cuenta que la construcción solo tiene ciclos cortos de longitudes 3 y L, y ningún ciclo corto involucra vértices distintos de dos gadgets diferentes. Es fácil ver entonces que en una cubierta perfecta, cada gadget ti contribuye ciclos de acuerdo a los casos anteriores: ti ∈ M, o ti /∈ M. Por lo tanto, existe un Emparejamiento 3D perfecto en la instancia original. 4. ENFOQUES DE SOLUCIÓN BASADOS EN UNA FORMULACIÓN DE ARISTAS En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada arista. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos sin restricciones de longitud de ciclo. Dado un mercado G = (V, E), construya un grafo bipartito con un vértice para cada agente y un vértice para cada artículo. Agregar un borde ev con peso 0 entre cada agente v y su propio artículo. En este punto, la codificación es una coincidencia perfecta. Ahora, para cada arista e = (vi, vj) en el mercado original, añade una arista e con peso we entre el agente vi y el artículo de vj. Los emparejamientos perfectos en esta codificación corresponden exactamente con las cubiertas de ciclos, ya que cada vez que se toma un artículo de un agente, debe recibir el artículo de otro agente. Se deduce que el problema de despeje sin restricciones puede resolverse en tiempo polinómico encontrando un emparejamiento perfecto de peso máximo. La Figura 3 contiene la representación en forma de grafo bipartito del mercado de ejemplo de la Figura 1. Las aristas de peso 0 están codificadas con líneas discontinuas, mientras que las aristas de mercado están en negrita. Elementos Agentes v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figura 3: Codificación de emparejamiento perfecto del mercado en la Figura 1. Alternativamente, podemos resolver el problema codificándolo como un ILP con una variable para cada arista en el grafo de mercado original G. Este ILP, que se muestra a continuación, tiene la ventaja de que puede ser extendido de manera natural para tratar con restricciones de longitud de ciclo. Por lo tanto, para el resto de esta sección, este será el enfoque que seguiremos. Se busca un max e∈E tal que para todo vi ∈ V, se cumplan las restricciones de conservación eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 y la restricción de capacidad eout=(vi,vj ) eout ≤ 1. Si se permite que los ciclos tengan una longitud de como máximo L, es fácil ver que solo necesitamos hacer los siguientes cambios en el ILP. Para cada camino de longitud L (a lo largo del documento, no incluimos ciclos en la definición de camino) p = ep1, ep2, ..., epL, agregar una restricción ep1 + ep2 + ... + epL ≤ L − 1, que excluye al camino p de cualquier solución factible. Desafortunadamente, en un mercado con solo 1000 pacientes, el número de caminos de longitud 3 supera los 400 millones, por lo que ni siquiera podemos construir este ILP sin quedarnos sin memoria. Por lo tanto, utilizamos una búsqueda en árbol con un enfoque de formulación incremental. Específicamente, utilizamos CPLEX, aunque añadimos restricciones como planos de corte durante el proceso de búsqueda en el árbol. Comenzamos con solo un pequeño subconjunto de las restricciones en el ILP. Dado que este ILP es pequeño, CPLEX puede resolver su relajación LP. Luego verificamos si alguna de las restricciones faltantes es violada por la solución fraccional. Si es así, generamos un conjunto de estas restricciones, las añadimos al ILP y repetimos. Incluso una vez que se satisfacen todas las restricciones, puede que no haya una solución entera que coincida con el límite superior fraccional, y aunque la hubiera, el solucionador de PL podría no encontrarla. En estos casos, CPLEX ramifica en una variable (utilizamos la estrategia de ramificación predeterminada de CPLEX) y genera un nuevo nodo de búsqueda correspondiente a cada uno de los hijos. En cada nodo del árbol de búsqueda que se visita, se repite este proceso de resolver el LP y agregar restricciones. Claramente, este enfoque produce una solución óptima una vez que la búsqueda en el árbol finaliza. Todavía necesitamos explicar los detalles del generador de restricciones (es decir, seleccionar qué restricciones comenzar) y la generación de restricciones (es decir, seleccionar qué restricciones violadas incluir). Describimos brevemente estos en las dos subsecciones siguientes, respectivamente. 4.1 Sembrador de Restricciones El principal sembrador de restricciones que desarrollamos prohíbe cualquier camino de longitud L − 1 que no tenga un borde cerrando el ciclo desde su inicio hasta su final. Si bien es costoso computacionalmente encontrar estas restricciones, su adición enfoca la búsqueda lejos de los caminos que no pueden estar en la solución final. También intentamos sembrar el LP con una colección aleatoria de restricciones del ILP. 4.2 Generación de Restricciones Experimentamos con varios generadores de restricciones. En cada caso, dada una solución fraccional, construimos el subgrafo de aristas con valor positivo. Este gráfico es mucho más pequeño que el gráfico original, por lo que podemos realizar los cálculos siguientes de manera eficiente. En nuestro primer generador de restricciones, simplemente buscamos caminos de longitud L con una suma de valores mayor que L − 1. Para cualquier camino de este tipo, restringimos su suma para que sea como máximo L − 1. Ten en cuenta que si hay un ciclo c con longitud |c| > L, podría contener hasta |c| caminos que violan. En nuestro segundo generador de restricciones, solo agregamos una restricción para tales ciclos: la suma de aristas en el ciclo puede ser a lo sumo |c|(L − 1)/L. Este generador hizo que el algoritmo fuera más lento, por lo que optamos por ir en la dirección opuesta en el desarrollo de nuestro generador final. Agrega una restricción por cada camino p que viola, y además, agrega una restricción para cada camino con los mismos vértices interiores (sin contar los extremos) que p. Esto mejoró la velocidad general. 4.3 Rendimiento experimental Resultó que incluso con estas mejoras, el enfoque de formulación de aristas no puede despejar un intercambio de riñón con 100 vértices en el tiempo en que la formulación de ciclos (descrita más adelante en la Sección 5) puede despejar uno con 10,000 vértices. En otras palabras, los enfoques basados en generación de columnas resultaron ser drásticamente mejores que los enfoques basados en generación de restricciones. Por lo tanto, en el resto del documento nos enfocaremos en la formulación del ciclo y en los enfoques basados en la generación de columnas. 5. Enfoques de solución basados en una formulación cíclica. En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada ciclo. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos cuando los ciclos tienen longitud 2. Dado un mercado G = (V, E), construya un nuevo grafo en V con un peso wc en cada arista de ciclo c de longitud 2. Es fácil ver que los emparejamientos en este nuevo grafo corresponden a coberturas de ciclos por ciclos de longitud 2 en el grafo original del mercado. Por lo tanto, el problema de equilibrio de mercado con L = 2 se puede resolver en tiempo polinómico encontrando un emparejamiento de peso máximo. Figura 4: Codificación del emparejamiento de peso máximo del mercado en la Figura 1. Podemos generalizar este codificado para L arbitrario. Sea C(L) el conjunto de todos los ciclos de G con longitud a lo sumo L. Entonces el siguiente ILP encuentra la cobertura de ciclos de máximo peso por ciclos de C(L): max c∈C(L) wcc sujeto a c:vi∈c c ≤ 1 ∀vi ∈ V con c ∈ {0, 1} ∀c ∈ C(L) 5.1 Formulación de Arista vs Ciclo En esta sección, consideramos los méritos de la formulación de arista y la formulación de ciclo. La formulación del problema del borde se puede resolver en tiempo polinómico cuando no hay restricciones en el tamaño del ciclo. La formulación del ciclo se puede resolver en tiempo polinómico cuando el tamaño del ciclo es a lo sumo 2. Ahora consideramos el caso de ciclos cortos de longitud como máximo L, donde L ≥ 3. Nuestros algoritmos de búsqueda de árboles utilizan la relajación LP de estas formulaciones para proporcionar cotas superiores de la solución óptima. Estos límites ayudan a podar subárboles y guiar la búsqueda de las formas habituales. Teorema 2. La relajación LP de la formulación del ciclo domina débilmente la relajación LP de la formulación del borde. Prueba. Considera una solución óptima para la relajación LP de la formulación del ciclo. Mostramos cómo construir una solución equivalente en la formulación de bordes. Para cada arista en el grafo, establezca su valor como la suma de los valores de todos los ciclos de los cuales es miembro. También, define el valor de un vértice de la misma manera. Debido a las restricciones del ciclo, las restricciones de conservación y capacidad de la codificación de los bordes se cumplen claramente. Queda por demostrar que ninguna de las restricciones de ruta se viola. Sea p cualquier camino de longitud L en el grafo. Dado que p tiene L−1 vértices interiores (sin contar los extremos), la suma de estos vértices interiores es como máximo L−1. Ahora, para cualquier ciclo c de longitud como máximo L, el número de aristas que tiene en p, que denotamos como ec(p), es como máximo el número de vértices interiores que tiene en p, que denotamos como vc(p). Por lo tanto, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 La afirmación contraria de este teorema no es verdadera. Considera un grafo que es simplemente un ciclo con n aristas. Claramente, la relajación LP de la formulación del ciclo tiene un valor óptimo de 0, ya que no hay ciclos de tamaño menor o igual a L. Sin embargo, la formulación de aristas tiene una solución de tamaño n/2, con cada arista teniendo un valor de 1/2. Por lo tanto, la formulación del ciclo es más ajustada que la formulación del borde. Además, para un grafo con m aristas, la formulación de aristas requiere O(m3) restricciones, mientras que la formulación de ciclos solo requiere O(m2). 5.2 Generación de columnas para la tabla de PL. La Tabla 2 muestra cómo el número de ciclos de longitud a lo sumo 3 crece con el tamaño del mercado. Con una variable por ciclo en la formulación del ciclo, CPLEX ni siquiera puede liquidar mercados con 1,000 pacientes sin quedarse sin memoria (ver Figura 6). Para abordar este problema, utilizamos un enfoque de formulación incremental. El primer paso en la búsqueda de árbol guiada por LP es resolver la relajación LP. Dado que la formulación del ciclo no cabe en la memoria, esta etapa de LP fallaría inmediatamente sin un enfoque de formulación incremental. Sin embargo, motivados por la observación de que una solución de intercambio puede incluir solo una pequeña fracción de los ciclos, exploramos el enfoque de utilizar la generación de columnas (es decir, ciclos). La idea de la generación de columnas es comenzar con un LP restringido que contenga solo un pequeño número de columnas (variables, es decir, ciclos), y luego agregar columnas repetidamente hasta que una solución óptima para este LP parcialmente formulado sea una solución óptima para el LP original (también conocido como maestro). Explicamos esto más a fondo mediante un ejemplo. Considera el mercado en la Figura 1 con L = 2. La Figura 5 muestra el LP maestro correspondiente, P, y su dual, D. El primal P maximiza 2c1 + 2c2 + 2c3 sujeto a c1 ≤ 1 (v1), c1 + c2 ≤ 1 (v2), c2 + c3 ≤ 1 (v3), c3 ≤ 1 (v4) con c1, c2, c3 ≥ 0. El dual D minimiza v1 + v2 + v3 + v4 sujeto a v1 + v2 ≥ 2 (c1), v2 + v3 ≥ 2 (c2), v3 + v4 ≥ 2 (c3) con v1, v2, v3, v4 ≥ 0. Figura 5: Formulación del ciclo. Sea P la restricción de P que contiene solo las columnas c1 y c3. Sea D el dual de P, es decir, D es simplemente D sin la restricción c2. Dado que P y D son pequeños, podemos resolverlos para obtener OPT(P) = OPT(D) = 4, con cOPT(P) = c1 = c3 = 1 y vOPT(D) = v1 = v2 = v3 = v4 = 1. Si cOP T (P ) debe ser una solución factible de P, resulta (afortunadamente) que vOP T (D ) es factible para D, de modo que OPT(D ) ≥ OPT(D). Podemos verificar esto comprobando que vOP T (D) cumple con las restricciones de D que aún no están en Di, es decir, la restricción c2. Se deduce que OPT(P) = OPT(D) ≥ OPT(D) = OPT(P), por lo que vOPT(P) es demostrablemente una solución óptima para P, a pesar de que P contiene solo un subconjunto estricto de las columnas de P. Por supuesto, puede resultar (desafortunadamente) que vOPT(D) no sea factible para D. Esto puede ocurrir como se muestra arriba si vOPT(D) = v1 = 2, v2 = 0, v3 = 0, v4 = 2. Aunque todavía podemos ver que OPT(D) = OPT(D), en general no podemos demostrarlo porque D y P son demasiado grandes para resolver. En cambio, dado que se viola la restricción c2, agregamos la columna c2 a P, actualizamos D y repetimos. El problema de encontrar una restricción violada se llama problema de fijación de precios. Aquí, el precio de una columna (ciclo en nuestra configuración) es la diferencia entre su peso y la suma de los valores duales de los vértices del ciclo. Si alguna columna de P tiene un precio positivo, su restricción correspondiente está violada y aún no hemos demostrado la optimalidad. En este caso, debemos seguir generando columnas para agregar a P. Problema de fijación de precios 5.2.1 Para instancias más pequeñas, podemos mantener una colección explícita de todos los ciclos factibles. Esto hace que el problema de fijación de precios sea fácil y eficiente de resolver: simplemente recorremos la colección de ciclos y buscamos ciclos con precio positivo. Incluso podemos encontrar ciclos con el precio más positivo, que son los más propensos a mejorar el valor objetivo de LP restringido [1]. Sin embargo, este enfoque no es escalable. Un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos de longitud de máximo 3 (ver Tabla 2). Esto es demasiados ciclos para mantener en la memoria. Por lo tanto, para instancias más grandes, debemos generar ciclos factibles mientras buscamos uno con un precio positivo. Realizamos esto utilizando un algoritmo de búsqueda en profundidad en el grafo del mercado (ver Figura 1). Para hacer esta búsqueda más rápida, exploramos los vértices en orden de valores no decrecientes, ya que es más probable que estos vértices pertenezcan a ciclos con peso positivo. También utilizamos varias reglas de poda para determinar si la ruta de búsqueda actual puede llevar a un ciclo de peso positivo. Por ejemplo, en un vértice dado en la búsqueda, podemos podar basándonos en el hecho de que cada vértice que visitemos a partir de este punto tendrá un valor al menos tan grande como el vértice actual. Incluso con estas reglas de poda, la generación de columnas es un cuello de botella. Por lo tanto, también implementamos las siguientes optimizaciones. Cuando la búsqueda exhaustiva demuestra que un vértice no pertenece a ningún ciclo de precios positivos, marcamos el vértice y no lo utilizamos como raíz de una búsqueda en profundidad hasta que su valor dual disminuya. De esta manera, evitamos repetir innecesariamente nuestros esfuerzos computacionales de una iteración previa de generación de columnas. Finalmente, a veces puede ser beneficioso para la generación de columnas incluir varias columnas de precio positivo en una iteración, ya que puede ser más rápido generar una segunda columna una vez que se encuentra la primera. Sin embargo, evitamos esto por la siguiente razón. Si intentamos encontrar más columnas de precio positivo de las que se pueden encontrar, o si las columnas están muy separadas en el espacio de búsqueda, terminamos teniendo que generar y verificar una gran parte de la colección de ciclos factibles. En nuestros experimentos, hemos observado que esto ocurre en mercados con cientos de millones de ciclos, lo que resulta en costos de computación prohibitivamente caros. 5.2.2 Sembrado de Columnas Incluso si hay solo una pequeña brecha con la relajación principal del LP, la generación de columnas requiere muchas iteraciones para mejorar el valor objetivo del LP restringido. Cada una de estas 300 iteraciones es costosa, ya que debemos resolver el problema de fijación de precios y volver a resolver el LP restringido. Por lo tanto, aunque podríamos empezar sin columnas en el LP restringido, es mucho más rápido sembrar el LP con suficientes columnas para que el valor objetivo óptimo no esté muy lejos del LP principal. Por supuesto, no podemos incluir tantas columnas que nos quedemos sin memoria. Experimentamos con varios sembradores de columnas. En una clase de sembrador, utilizamos una heurística para encontrar un intercambio, y luego agregamos los ciclos de ese intercambio al LP restringido inicial. Implementamos dos heurísticas. El primero es un algoritmo voraz: para cada vértice en un orden aleatorio, si está sin cubrir, intentamos incluir un ciclo que lo contenga a él y a otros vértices sin cubrir. El otro heurístico utiliza un código especializado de emparejamiento de peso máximo [16] para encontrar una cobertura óptima mediante ciclos de longitud 2. Estas heurísticas funcionan extremadamente bien, especialmente teniendo en cuenta el hecho de que solo agregan un pequeño número de columnas. Por ejemplo, la Tabla 1 muestra que una cobertura óptima por ciclos de longitud 2 tiene casi el mismo peso que el intercambio con tamaño de ciclo no restringido. Sin embargo, tenemos suficiente memoria para incluir cientos de miles de columnas adicionales y así acercarnos aún más al límite superior. Nuestro mejor sembrador de columnas construye una colección aleatoria de ciclos factibles. Dado que un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos factibles, lleva demasiado tiempo generar y recorrer todos los ciclos factibles, por lo que no incluimos una colección aleatoria uniforme. En cambio, realizamos un recorrido aleatorio en el grafo del mercado (ver, por ejemplo, Figura 1), en el cual, después de cada paso del recorrido, probamos si hay un borde de regreso a nuestro camino que forme un ciclo factible. Si encontramos un ciclo, este se incluye en el LP restringido y comenzamos una nueva caminata desde un vértice aleatorio. En nuestros experimentos (ver Sección 6), utilizamos este algoritmo para sembrar el LP con 400,000 ciclos. Este último enfoque supera a los sembradores heurísticos descritos anteriormente. Sin embargo, en nuestro algoritmo, utilizamos una combinación que toma la unión de todas las columnas de los tres sembradores. En la Figura 6, comparamos el rendimiento del sembrador combinado con el sembrador combinado sin el sembrador de recolección aleatoria. No trazamos el rendimiento del algoritmo sin ningún sembrador en absoluto, porque puede llevar horas despejar mercados que de otra manera podríamos despejar en unos pocos minutos. 5.2.3 Demostrando la optimalidad. Recordemos que nuestro objetivo es encontrar una solución óptima para la relajación principal del LP. Usando la generación de columnas, podemos demostrar que una solución primal restringida es óptima una vez que todas las columnas tienen precios no positivos. Desafortunadamente, nuestro problema de compensación tiene el llamado efecto de disminución gradual [1, Sección 6.3], en el cual, aunque el primal restringido es óptimo a posteriori, se requiere un gran número de iteraciones adicionales para demostrar la optimalidad (es decir, eliminar todas las columnas de precio positivo). No hay una buena solución general para el efecto de disminución. Sin embargo, para mitigar este efecto, aprovechamos la siguiente observación específica del problema. Recuerde de la Sección 1.1 que, casi siempre, un intercambio de peso máximo con ciclos de longitud a lo sumo 3 tiene el mismo peso que un intercambio de peso máximo sin restricciones. (Sin embargo, esto no significa que el solucionador para el caso sin restricciones encontrará una solución con ciclos cortos). Además, el problema de despeje no restringido se puede resolver en tiempo polinómico (ver Sección 4). Por lo tanto, podemos calcular eficientemente un límite superior en la relajación principal del LP, y, cada vez que el primal restringido alcanza este límite superior, ¡hemos demostrado la optimalidad sin necesidad de eliminar todas las columnas de precio positivo! Para que esto mejore el tiempo de ejecución del algoritmo en general, necesitamos poder despejar el mercado sin restricciones en menos tiempo del que le lleva a la generación de columnas eliminar todos los ciclos de precios positivos. Aunque el primer problema es soluble en tiempo polinómico, esto no es trivial para instancias grandes. Por ejemplo, para un mercado con 10,000 pacientes y 25 millones de conexiones, el código especializado de emparejamiento de peso máximo [16] era demasiado lento, y CPLEX se quedó sin memoria en la codificación de formulación de bordes de la Sección 4. Para hacer funcionar esta idea, utilizamos generación de columnas para resolver la formulación de bordes. Esto implica comenzar con un pequeño subconjunto aleatorio de los bordes, y luego agregar bordes con precio positivo uno por uno hasta que no quede ninguno. Realizamos esta generación de columnas secundarias no en el grafo de mercado original G, sino en el grafo bipartito de emparejamiento perfecto de la Figura 3. Hacemos esto para que solo necesitemos resolver el LP, no el ILP, ya que la brecha de integralidad en el grafo bipartito de emparejamiento perfecto es 1, es decir, siempre existe una solución integral que alcanza el límite superior fraccional. El aumento de velocidad resultante en el algoritmo general es dramático, como se puede ver en la Figura 6. 5.2.4 Gestión de Columnas Si el valor óptimo del LP restringido inicial P está lejos del LP maestro P, entonces se generan un gran número de columnas antes de que se cierre la brecha. Esto conduce a problemas de memoria en mercados con tan solo 4,000 pacientes. Además, incluso antes de que la memoria se convierta en un problema, las iteraciones de generación de columnas se vuelven lentas debido a la sobrecarga adicional de resolver un LP más grande. Para abordar estos problemas, implementamos un esquema de gestión de columnas para limitar el tamaño del LP restringido. Siempre que agregamos columnas al LP, verificamos si contiene más de un número umbral de columnas. Si este es el caso, eliminamos selectivamente columnas hasta que esté nuevamente por debajo del umbral2. Como discutimos anteriormente, solo una pequeña fracción de todos los ciclos terminará en la solución final. Es poco probable que eliminemos dicho ciclo, y aun si lo hacemos, siempre se puede generar de nuevo. Por supuesto, no debemos ser demasiado agresivos con el umbral, ya que hacerlo podría contrarrestar las ganancias de rendimiento por iteración al aumentar significativamente el número de iteraciones necesarias para obtener un conjunto de columnas adecuado en el LP al mismo tiempo. Hay algunas columnas que nunca eliminamos, por ejemplo aquellas en las que hemos realizado ramificaciones (ver Sección 5.3.2), o aquellas con un valor de LP distinto de cero. Entre el resto, eliminamos aquellos con el precio más bajo, ya que corresponden a las restricciones duales que están más satisfechas. Este esquema de gestión de columnas funciona bien y nos ha permitido despejar mercados con 10,000 pacientes, como se ve en la Figura 6. 5.3 Búsqueda de Ramificación y Precio para el ILP Dado un problema grande de despeje de mercado, podemos resolver con éxito su relajación LP hasta la optimalidad utilizando las mejoras de generación de columnas descritas anteriormente. Sin embargo, las soluciones que encontramos suelen ser fraccionarias. Por lo tanto, en el paso 2 siguiente, basándonos en el tamaño de la memoria, establecemos el umbral en 400,000. El paso 301 implica realizar una búsqueda de árbol de ramificación y precio [1] para encontrar una solución integral óptima. Breve, esta es la idea de ramificar y fijar precios. Siempre que establecemos una variable fraccional en 0 o 1 (rama), tanto el LP maestro como la restricción con la que estamos trabajando se modifican (se restringen). Por defecto, entonces, necesitamos realizar la generación de columnas (es decir, el esfuerzo de fijar precios) en cada nodo del árbol de búsqueda para demostrar que la restricción restringida es óptima para el LP maestro restringido. (Sin embargo, como se discute en la Sección 5.2.3, calculamos el límite superior integral para el nodo raíz basado en relajar completamente la restricción de longitud del ciclo, y cada vez que algún LP de los nodos en el árbol alcance ese valor, no necesitamos seguir fijando precios de columnas en ese nodo). Para el problema de despeje con ciclos de longitud a lo sumo 3, hemos encontrado que rara vez hay una brecha entre las soluciones integrales y fraccionarias óptimas. Esto significa que podemos evitar en gran medida el costoso paso de fijar precios por nodo: cuando el LP restringido restringido tiene el mismo valor óptimo que su padre en la búsqueda del árbol, podemos demostrar la optimalidad del LP, como se muestra en la Sección 5.2.3, sin tener que incluir columnas adicionales en el LP restringido. Aunque CPLEX puede resolver ILPs, no admite la técnica de branch-and-price (por ejemplo, debido a posibles complicaciones específicas del problema que involucran la interacción entre la regla de ramificación y el problema de fijación de precios). Por lo tanto, implementamos nuestro propio algoritmo de ramificación y precio, el cual explora el árbol de búsqueda en orden de profundidad primero. También experimentamos con el orden de selección de nodos A* [7, 2]. Sin embargo, esta estrategia de búsqueda requiere significativamente más memoria, la cual encontramos que se empleaba mejor para acelerar la fase de generación de columnas (ver Sección 5.2.2). Los componentes principales restantes del algoritmo se describen en las dos siguientes subsecciones. 5.3.1 Heurísticas Primal Antes de ramificar en una variable fraccional, utilizamos heurísticas primales para construir una solución integral factible. Estas soluciones son límites inferiores de las soluciones integrales óptimas finales. Por lo tanto, cuando una solución fraccional restringida no es mejor que la mejor solución integral encontrada hasta el momento, podamos el subárbol actual. Una heurística primal es efectiva si es eficiente y construye límites inferiores ajustados. Experimentamos con dos heurísticas primarias. El primero es un algoritmo de redondeo simple [8]: incluir todos los ciclos con un valor fraccional de al menos 0.5, y luego, asegurando la viabilidad, agregar de forma codiciosa los ciclos restantes. Si bien esta heurística es eficiente, encontramos que los límites inferiores que construye rara vez permiten realizar un gran número de podas. También intentamos usar CPLEX como una heurística primal. En cualquier nodo dado del árbol de búsqueda, podemos convertir la relajación LP restringida de nuevo a un ILP reintroduciendo las restricciones de integralidad. CPLEX tiene varias heurísticas primales integradas, las cuales podemos aplicar a este ILP. Además, podemos utilizar la búsqueda de árbol propia de CPLEX para encontrar una solución integral óptima. En general, esta búsqueda de árbol es mucho más rápida que la nuestra. Si CPLEX encuentra una solución integral que coincida con el límite superior fraccional en el nodo raíz, hemos terminado. De lo contrario, no existe tal solución integral, o aún no tenemos la combinación correcta de ciclos en el LP restringido. Para los mercados de intercambio de riñones, generalmente es la segunda razón la que se aplica (ver Secciones 5.2.2 y 5.2.4). Por lo tanto, en algún momento de la búsqueda en el árbol, una vez que se han generado más columnas como resultado de la ramificación, la heurística de CPLEX encontrará una solución integral óptima. Aunque la búsqueda de árbol de CPLEX es más rápida que la nuestra, no es tan rápida como para poder aplicarla a cada nodo en nuestro árbol de búsqueda. Por lo tanto, realizamos las siguientes optimizaciones. En primer lugar, agregamos una restricción que requiere que el valor objetivo del ILP sea tan grande como el objetivo fraccional. Si este no es el caso, queremos abortar y proceder a generar más columnas con nuestra búsqueda de ramificación y precio. En segundo lugar, limitamos el número de nodos en el árbol de búsqueda de CPLEX. Esto se debe a que hemos observado que no existe una solución integral, CPLEX puede tardar mucho tiempo en demostrarlo. Finalmente, solo aplicamos la heurística CPLEX en un nodo si tiene un conjunto de ciclos suficientemente diferente al de su padre. Utilizar CPLEX como heurística primal tiene un gran impacto porque reduce el tamaño del árbol de búsqueda, evitando así todo el trabajo de fijación computacionalmente costoso en los nodos que no se generan en este árbol más pequeño. 5.3.2 Ramificador de Ciclo. Experimentamos con dos estrategias de ramificación, ambas seleccionan una variable por nodo. La primera estrategia, ramificación por certeza, selecciona aleatoriamente una variable de aquellas cuyo valor LP está más cercano a 1. La segunda estrategia, ramificación por incertidumbre, selecciona aleatoriamente una variable cuyo valor LP esté más cercano a 0.5. En ambos casos, se generan dos hijos del nodo correspondientes a dos subárboles, uno en el que la variable se establece en 0 y otro en el que se establece en 1. Nuestro recorrido en profundidad siempre elige explorar primero el subárbol en el que el valor de la variable está más cerca de su valor fraccionario. Para nuestro problema de despeje con ciclos de longitud como máximo 3, encontramos que el ramificado por incertidumbre es superior, rara vez requiriendo retroceso alguno. 6. RESULTADOS EXPERIMENTALES Todos nuestros experimentos se realizaron en Linux (Red Hat 9.0), utilizando una PC Dell con un procesador Intel Pentium 4 de 3GHz y 1GB de RAM. Dondequiera que usamos CPLEX (por ejemplo, al resolver el LP y como heurística primal, como se discutió en las secciones anteriores), usamos CPLEX 10.010. La Figura 6 muestra el rendimiento en tiempo de ejecución de cuatro algoritmos de limpieza. Para cada tamaño de mercado listado, generamos aleatoriamente 10 mercados e intentamos liquidarlos utilizando cada uno de los algoritmos. El primer algoritmo es CPLEX en la formulación del ciclo completo. Este algoritmo no logra despejar ningún mercado con 1000 pacientes o más. Además, su tiempo de ejecución en mercados más pequeños que este es significativamente peor que el de los otros algoritmos. Los otros algoritmos son variaciones del enfoque de generación de columnas incremental descrito en la Sección 5. Comenzamos con la siguiente configuración (todas las optimizaciones están activadas): Categoría Configuración Columna Sembrador Combinación de heurísticas de intercambio voraz y emparejamiento de peso máximo, y sembrador de caminata aleatoria (400,000 ciclos). Generación de columnas una columna a la vez. Gestión de columnas activada, con límite de 400,000 columnas. Comprobador de Optimalidad Encendido. Redondeo heurístico primal y búsqueda en el árbol de CPLEX. Regla de ramificación de incertidumbre. La combinación de estas optimizaciones nos permite liquidar fácilmente mercados con más de 10,000 pacientes. En cada uno de los dos próximos algoritmos, desactivamos una de estas optimizaciones para resaltar su efectividad. Primero, restringimos el sembrador para que solo comience con 10,000 ciclos. Esta configuración es más rápida para instancias más pequeñas, ya que las relajaciones de LP son más pequeñas y se resuelven más rápido. Sin embargo, al llegar a 5000 vértices, este efecto comienza a ser contrarrestado por la generación adicional de columnas que se debe realizar. Para una instancia más grande, este sembrador restringido es claramente peor. Finalmente, restauramos el sembrador a su configuración optimizada, pero esta vez, eliminamos el verificador de optimalidad descrito en la Sección 5.2.3. Como en muchos problemas de generación de columnas, el efecto de disminución es significativo. Aprovechando las propiedades de nuestro problema, logramos despejar un mercado con 10,000 pacientes en aproximadamente el mismo tiempo que habría tomado despejar un mercado de 6000 pacientes. 7. IMPLEMENTANDO LA TECNOLOGÍA Nuestro algoritmo e implementación reemplazaron a CPLEX como algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones, en diciembre de 2006. Realizamos una ejecución de prueba cada dos semanas, y los primeros trasplantes basados en nuestras soluciones ya han sido realizados. Aunque actualmente existen al menos cuatro intercambios de riñones en los Estados Unidos por razones políticas o interpersonales, todos comprenden que un intercambio nacional unificado y sin fragmentar salvaría más vidas. Estamos en conversaciones con intercambios de riñón adicionales que están interesados en adoptar nuestra tecnología. De esta manera, nuestra tecnología (y los procesos que la rodean) esperamos que sirvan como un sustrato que eventualmente ayudará a unificar los intercambios. Al menos la escalabilidad computacional ya no es un obstáculo. CONCLUSIÓN E INVESTIGACIONES FUTURAS En este trabajo hemos desarrollado los algoritmos exactos más escalables para intercambios de trueque hasta la fecha, con un enfoque especial en el próximo mercado nacional de intercambio de riñones en el que los pacientes con enfermedad renal serán emparejados con donantes compatibles intercambiando a sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a la enfermedad renal. Nuestro trabajo presenta el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Resuelve de manera óptima el problema de compensación de intercambio de riñones con 10,000 pares donante-receptor. Por lo tanto, no es necesario recurrir a soluciones aproximadas. La mejor tecnología previa (CPLEX básico) no puede manejar instancias de más de aproximadamente 900 pares de donantes-receptores porque se queda sin memoria. La clave de nuestra mejora es la formulación incremental de problemas. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas que mejoran sustancialmente tanto el tiempo de ejecución como el uso de memoria. Algunas de las técnicas utilizan observaciones específicas del dominio, mientras que otras son independientes del dominio. Concluimos que la generación de columnas escala de manera significativamente mejor que la generación de restricciones. Para la generación de columnas en el LP, nuestras mejoras incluyen técnicas de fijación de precios, técnicas de siembra de columnas, técnicas para demostrar la optimalidad sin tener que traer todas las columnas con precio positivo (y utilizando otro proceso de generación de columnas en una formulación diferente para hacerlo), y técnicas de eliminación de columnas. Para la búsqueda de ramificación y precio en el programa entero que rodea al LP, nuestras mejoras incluyen heurísticas primales y también comparamos estrategias de ramificación. Sin duda, se podrían utilizar ajustes adicionales de parámetros y quizás técnicas adicionales de mejora de velocidad para hacer que el algoritmo sea aún más rápido. Nuestro algoritmo también admite varias generalizaciones, según lo deseado por los intercambios reales de riñones. Estos incluyen múltiples donantes alternativos por paciente, bordes ponderados en el grafo del mercado (para codificar diferencias en años de vida esperados añadidos basados en grados de compatibilidad, edad y peso del paciente, etc., así como la probabilidad de incompatibilidad de último minuto), cadenas desencadenadas por ángeles (cadenas de trasplantes desencadenadas por donantes altruistas que no tienen pacientes asociados con ellos, cada cadena termina con un riñón sobrante), y problemas adicionales (como diferentes puntajes para salvar a diferentes donantes altruistas o riñones sobrantes para futuras ejecuciones de emparejamiento basadas en tipo de sangre, tipo de tejido y probabilidad de que el órgano no desaparezca del mercado porque el donante tenga dudas). Debido a que utilizamos una metodología de PLI, también podemos soportar una variedad de restricciones laterales, las cuales a menudo desempeñan un papel importante en los mercados en la práctica [19]. También podemos respaldar la asignación forzosa de una parte, por ejemplo, este adolescente gravemente enfermo debe recibir un riñón si es posible. Nuestro trabajo ha tratado el intercambio de riñones como un problema por lotes con información completa (al menos a corto plazo, es probable que los intercambios de riñones sigan funcionando en modo por lotes de vez en cuando). Dos direcciones importantes para trabajos futuros son abordar explícitamente tanto los aspectos en línea como los de información limitada del problema. El aspecto en línea es que los beneficiarios y donantes irán llegando al sistema con el tiempo, y puede ser mejor no llevar a cabo el intercambio óptimo de forma miope ahora, sino reservar parte del mercado actual para futuras coincidencias. De hecho, se ha realizado cierto trabajo al respecto en ciertos entornos restringidos [22, 24]. El aspecto de información limitada es que incluso en modo por lotes, el grafo proporcionado como entrada no es completamente correcto: varios pares donante-receptor que se creían compatibles resultan ser incompatibles cuando se realizan pruebas de último minuto más costosas. Por lo tanto, sería deseable realizar una optimización teniendo esto en cuenta, como producir un subgrafo robusto de bajo grado para ser probado antes de que se genere la coincidencia final, o producir un plan de contingencia en caso de fallo. Actualmente estamos explorando varias preguntas en esta línea, pero ciertamente hay mucho más por hacer. Agradecimientos Agradecemos a los economistas Al Roth y Utku Unver, así como al cirujano de trasplantes de riñón Michael Rees, por alertarnos sobre el hecho de que la tecnología previa era insuficiente para el problema de compensación a escala nacional, proporcionar conjuntos de datos iniciales y discutir los detalles del proceso de intercambio de riñones. También agradecemos a Don Sheehy por habernos hecho notar la idea del intercambio de zapatos. Este trabajo fue apoyado en parte por la Fundación Nacional de Ciencias bajo los subsidios IIS-0427858 y CCF-0514922. REFERENCIAS [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh y P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Tiempo de limpieza (segundos) Número de pacientes Nuestro algoritmo Nuestro algoritmo con sembrador de columnas restringido Nuestro algoritmo sin demostrador de optimalidad Formulación de ciclo CPLEX Figura 6: Resultados experimentales: tiempo de ejecución promedio con barras de desviación estándar. Rama y precio: Generación de columnas para resolver programas enteros enormes. Investigación de Operaciones, 46:316-329, mayo-junio de 1998. [2] R. Dechter y J. Pearl. Estrategias generalizadas de búsqueda de mejor primero y la optimalidad de A*. Revista de la ACM, 32(3):505-536, 1985. [3] F. L. Delmonico. Intercambio de riñones - avances en el trasplante de donante vivo. Revista de Medicina de Nueva Inglaterra, 350:1812-1814, 2004. [4] J. Edmonds. Camino, árboles y flores. Revista Canadiense de Matemáticas, 17:449-467, 1965. [5] M. R. Garey y D. S. Johnson. Computadoras e Intractabilidad; Una Guía de la Teoría de NP-Completitud. 1990. [6] S. E. Gentry, D. L. Segev y R. A. Montgomery. Una comparación de las poblaciones atendidas por donación emparejada de riñón y donación emparejada de lista. Revista Americana de Trasplantes, 5(8):1914-1921, agosto de 2005. [7] P. Hart, N. Nilsson y B. Raphael. Una base formal para la determinación heurística de caminos de costo mínimo. IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman y M. Padberg. Resolviendo problemas de programación de tripulaciones aéreas mediante ramificación y corte. Ciencia de la Gestión, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] Intercambio Nacional de Zapatos Impares. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Léelo, cámbialo. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez y M. U. Unver. Intercambio de riñones. Revista Trimestral de Economía, 119(2):457-488, mayo de 2004. [14] A. E. Roth, T. Sonmez y M. U. Unver. Un centro de intercambio de riñones en Nueva Inglaterra. Revista Económica Americana, 95(2):376-380, mayo de 2005. [15] A. E. Roth, T. Sonmez y M. U. Unver. Intercambio eficiente de riñones: Coincidencia de deseos en un mercado con preferencias basadas en la compatibilidad. American Economic Review, próximo. [16] E. Rothberg. Algoritmo de emparejamiento de peso máximo de Gabow n3: una implementación. El Primer Desafío de Implementación DIMACS, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver y F. L. Delmonico. Aumentando la oportunidad de donación de riñón en vida mediante el emparejamiento para intercambios de dos y tres vías. Trasplante, 81(5):773-782, 2006. [18] T. Sandholm. Algoritmos óptimos de determinación de ganadores. En Subastas Combinatorias, Cramton, Shoham y Steinberg, eds. MIT Press, 2006. [19] T. Sandholm y S. Suri. Restricciones laterales y atributos no relacionados con el precio en los mercados. En el taller IJCAI-2001 sobre Razonamiento de Restricciones Distribuidas, páginas 55-61, Seattle, WA, 2001. Para aparecer en Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb y R. A. Montgomery. Donación emparejada de riñón y optimización del uso de órganos de donantes vivos. Revista de la Asociación Médica Estadounidense, 293(15):1883-1890, abril de 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver. Intercambio dinámico de riñones. Documento de trabajo. [23] Sistema de Datos Renales de los Estados Unidos (USRDS). http://www.usrds.org/. [24] S. A. Zenios. Control óptimo de un programa de intercambio de riñones emparejados. Ciencias de la Gestión, 48(3):328-342, marzo de 2002. 304 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "matching": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national kidney exchange.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that column generation scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
                "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "Kidney failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a kidney transplant.",
                "Kidney transplants are by far the most common transplant.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
                "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of barter exchanges.",
                "In a barter-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe exchange in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
                "We can encode a barter exchange market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An exchange is a collection of disjoint cycles.",
                "The weight of an exchange is the sum of its cycle weights.",
                "A social welfare maximizing exchange is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market.",
                "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
                "For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-<br>matching</br> algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum <br>matching</br>, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general barter exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight exchange has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
                "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
                "Table 2 gives additional characteristics of the kidney-exchange market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-<br>matching</br>, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-<br>matching</br>, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-<br>matching</br>.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-<br>matching</br> in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect <br>matching</br>.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect <br>matching</br>.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect <br>matching</br> encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution <br>matching</br> the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight <br>matching</br>. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight <br>matching</br> encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation.",
                "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
                "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the cycle formulation.",
                "We show how to construct an equivalent solution in the edge formulation.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the cycle formulation is tighter than the edge formulation.",
                "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, column generation is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
                "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight <br>matching</br> code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight <br>matching</br> code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
                "To make this idea work then, we used column generation to solve the edge formulation.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary column generation not in the original market graph G, but in the perfect <br>matching</br> bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect <br>matching</br> bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of branch-and-price.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full cycle formulation.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental column generation approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight <br>matching</br> heuristics, and random walk seeder (400,000 cycles).",
                "Column Generation One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many column generation problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
                "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
                "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and column generation.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that column generation scales dramatically better than constraint generation.",
                "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
                "Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
                "Branch-and-price: Column generation for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by kidney paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Kidney exchange.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A kidney exchange clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight <br>matching</br> algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live kidney donation by <br>matching</br> for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "Kidney paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic kidney exchange.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-kidney exchange program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [
                "For example, using Edmonds maximum-<br>matching</br> algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum <br>matching</br>, and solved using Edmondss algorithm).",
                "For NPhardness, we reduce from 3D-<br>matching</br>, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "Given an instance of 3D-<br>matching</br>, construct one vertex for each element in X, Y and Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-<br>matching</br>."
            ],
            "translated_annotated_samples": [
                "Por ejemplo, utilizando el algoritmo de <br>coincidencia</br> máxima de Edmonds [4], [20] se muestra que un mercado nacional de intercambio por pares (utilizando solo ciclos de longitud 2) resultaría en más trasplantes, tiempos de espera reducidos y ahorros de $750 millones en costos de atención médica durante 5 años.",
                "En segundo lugar, los intercambios se restringieron a ciclos de longitud 2 (porque eso es todo lo que se puede modelar como <br>coincidencia máxima</br> y resolver utilizando el algoritmo de Edmonds).",
                "Para la NP-dificultad, reducimos desde <br>3D-Matching</br>, que es el problema de, dado conjuntos disjuntos X, Y y Z de tamaño q, y un conjunto de triples T ⊆ X × Y × Z, decidir si existe un subconjunto disjunto M de T con tamaño q.",
                "Dado una instancia de 3D-Matching, construye un vértice para cada elemento en X, Y y Z.",
                "Es claro que esta construcción puede realizarse en tiempo polinómico. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figura 2: Dispositivo de NP-completitud para la tripleta ti y la longitud máxima del ciclo L. Sea M un <br>emparejamiento</br> 3D perfecto."
            ],
            "translated_text": "Algoritmos de compensación para mercados de intercambio de trueque: Facilitando los intercambios de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales. El problema de compensación implica encontrar un intercambio que maximice el bienestar social cuando la longitud máxima de un ciclo está fija. Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente. Además, en los intercambios de trueque en general, más agentes se ven afectados si uno abandona un ciclo más largo. Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro. Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones. Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. La clave es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. Concluimos que la generación de columnas escala considerablemente mejor que la generación de restricciones. Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de riñón. Nuestro algoritmo reemplazó a CPLEX como el algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones. Las carreras de fósforos se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas]: [General] Términos Generales Algoritmos, Economía 1. INTRODUCCIÓN El papel de los riñones es filtrar los desechos de la sangre. La insuficiencia renal resulta en la acumulación de estos desechos, lo cual conduce a la muerte en meses. Una opción de tratamiento es la diálisis, en la que el paciente va a un hospital para que su sangre sea filtrada por una máquina externa. Se requieren varias visitas por semana, y cada una lleva varias horas. La calidad de vida en diálisis puede ser extremadamente baja, de hecho, muchos pacientes optan por retirarse de la diálisis, lo que conduce a una muerte natural. Solo el 12% de los pacientes en diálisis sobreviven 10 años [23]. En cambio, el tratamiento preferido es un trasplante de riñón. Los trasplantes de riñón son, con mucho, los trasplantes más comunes. Desafortunadamente, la demanda de riñones supera con creces la oferta. En los Estados Unidos en 2005, 4,052 personas murieron esperando un trasplante de riñón que les salvara la vida. Durante este tiempo, casi 30,000 personas fueron añadidas a la lista nacional de espera, mientras que solo 9,913 personas salieron de la lista después de recibir un riñón de donante fallecido. La lista de espera actualmente tiene más de 70,000 personas, y el tiempo de espera mediano varía de 2 a 5 años, dependiendo del tipo de sangre. Para muchos pacientes con enfermedad renal, la mejor opción es encontrar un donante vivo, es decir, una persona sana dispuesta a donar uno de sus dos riñones. Aunque existen mercados para comprar y vender riñones de donantes vivos, la comercialización de órganos humanos es casi universalmente considerada como antiética, y la práctica suele ser explícitamente ilegal, como en los Estados Unidos. Sin embargo, en la mayoría de los países, la donación en vida es legal, siempre y cuando se realice como un regalo sin compensación financiera. En 2005, hubo 6,563 donaciones en vida en los Estados Unidos. El número de donaciones en vida habría sido mucho mayor si no fuera por el hecho de que, con frecuencia, un posible donante y su receptor previsto son incompatibles en tipo de sangre o tipo de tejido. En el pasado, el donante incompatible fue enviado a casa, dejando al paciente a la espera de un riñón de un donante fallecido. Sin embargo, ahora hay algunos intercambios renales regionales en los Estados Unidos, en los que los pacientes pueden intercambiar sus donantes incompatibles entre sí, para así obtener cada uno un donante compatible. Estos mercados son ejemplos de intercambios de trueque. En un mercado de intercambio por trueque, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Los intercambios de trueque son ubicuos: ejemplos incluyen Peerflix (DVDs) [11], Read It Swap It (libros) [12], e Intervac (casas de vacaciones) [9]. Durante muchos años, incluso ha habido un gran intercambio de zapatos en los Estados Unidos [10]. Las personas con pies de diferentes tamaños usan esto para evitar tener que comprar dos pares de zapatos. Los amputados de pierna tienen un intercambio separado para compartir el costo de comprar un par de zapatos. Podemos codificar un mercado de intercambio de trueque como un grafo dirigido G = (V, E) de la siguiente manera. Construye un vértice para cada agente. Agregar un borde ponderado e desde un agente vi hacia otro vj, si vi desea el artículo de vj. El peso que representamos de e es la utilidad para vi de obtener el artículo vjs. Un ciclo c en este grafo representa un intercambio posible, donde cada agente en el ciclo obtiene el artículo del siguiente agente. El peso wc de un ciclo c es la suma de los pesos de sus aristas. Un intercambio es una colección de ciclos disjuntos. El peso de un intercambio es la suma de los pesos de sus ciclos. Un intercambio que maximiza el bienestar social es aquel con un peso máximo. La Figura 1 ilustra un mercado de ejemplo con 5 agentes, {v1, v2, . . . , v5}, en el que todos los bordes tienen peso 1. El mercado tiene 4 ciclos, c1 = v1, v2, c2 = v2, v3, c3 = v3, v4 y c4 = v1, v2, v3, v4, v5, y dos intercambios maximales (de inclusión), a saber, M1 = {c4} y M2 = {c1, c3}. El intercambio M1 tiene tanto el peso máximo como la cardinalidad máxima (es decir, incluye la mayor cantidad de aristas/vértices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figura 1: Mercado de intercambio de trueque de ejemplo. El problema de compensación consiste en encontrar un intercambio de peso máximo que consista en ciclos con una longitud de a lo sumo una pequeña constante L. Esta restricción de longitud de ciclo surge naturalmente por varias razones. Por ejemplo, en un intercambio de riñón, todas las operaciones en un ciclo deben realizarse simultáneamente; de lo contrario, un donante podría retractarse después de que su pareja incompatible haya recibido un riñón. (No se puede redactar un contrato vinculante para donar un órgano). Esto da lugar a una restricción logística en el tamaño del ciclo: incluso si todos los donantes son operados primero y se utiliza el mismo personal e instalaciones para luego operar a los receptores, un ciclo k requiere entre 3k y 6k médicos, alrededor de 4k enfermeras y casi 2k salas de operaciones. Debido a tales limitaciones de recursos, es probable que el próximo mercado nacional de intercambio de riñones solo permita ciclos de longitud 2 y 3. Otra motivación para ciclos cortos es que si el ciclo falla en intercambiarse, menos agentes se ven afectados. Por ejemplo, las pruebas de último minuto en un intercambio de riñones a menudo revelan nuevas incompatibilidades que no fueron detectadas en las pruebas iniciales (en base a las cuales se construyó el grafo de compatibilidad). Más generalmente, un agente puede abandonar un ciclo si sus preferencias han cambiado, o simplemente no cumple con sus obligaciones (como enviar un libro a otro agente en el ciclo) debido a olvidos. En la Sección 3, demostramos que (la versión de decisión del) problema de despeje es NP-completo para L ≥ 3. Una posible estrategia sería buscar un buen heurístico o algoritmo de aproximación. Sin embargo, por dos razones, buscamos un algoritmo exacto basado en un programa lineal entero (PLE), que resolvemos utilizando una búsqueda especializada en árboles. • Primero, cualquier pérdida de optimalidad podría llevar a muertes de pacientes innecesarias. • Segundo, una característica atractiva de utilizar una formulación de PLE es que permite modelar fácilmente una serie de variaciones en el objetivo y agregar restricciones adicionales al problema. Por ejemplo, si se cree que los ciclos de 3 elementos tienen más probabilidades de fallar que los ciclos de 2 elementos, entonces simplemente se les puede asignar un peso que sea apropiadamente menor que 3/2 del peso de un ciclo de 2 elementos. O, si por diversas razones (por ejemplo, éticas) se requiere un intercambio de cardinalidad máxima, al menos se puede encontrar en una segunda pasada la solución (de entre todas las soluciones de cardinalidad máxima) que tenga el menor número de 3-ciclos. Otras variaciones que se pueden resolver incluyen encontrar diversas formas de colecciones de ciclos tolerantes a fallos (no disjuntas) en caso de que ciertos pares que se creían compatibles resulten ser incompatibles después de todo. En este documento, presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Las codificaciones de ILP directas son demasiado grandes para siquiera construirse en el hardware actual, sin mencionar resolverlas. La clave entonces es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas (principalmente específicas del problema) que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. 1.1 Trabajos Previos Varios artículos recientes han utilizado simulaciones y algoritmos de compensación de mercado para explorar el impacto de un intercambio nacional de riñones [13, 20, 6, 14, 15, 17]. Por ejemplo, utilizando el algoritmo de <br>coincidencia</br> máxima de Edmonds [4], [20] se muestra que un mercado nacional de intercambio por pares (utilizando solo ciclos de longitud 2) resultaría en más trasplantes, tiempos de espera reducidos y ahorros de $750 millones en costos de atención médica durante 5 años. Esos resultados son conservadores de dos maneras. En primer lugar, el mercado simulado contenía solo 4,000 pacientes iniciales, con 250 pacientes añadidos cada 3 meses. Se nos ha informado que el mercado podría ser casi el doble de este tamaño. En segundo lugar, los intercambios se restringieron a ciclos de longitud 2 (porque eso es todo lo que se puede modelar como <br>coincidencia máxima</br> y resolver utilizando el algoritmo de Edmonds). Permitir ciclos de longitud 3 conlleva a ganancias adicionales significativas. Esto se ha demostrado en mercados de intercambio de riñones con 100 pacientes utilizando CPLEX para resolver una codificación de programa entero del problema de compensación [15]. En este documento, presentamos un algoritmo alternativo para este programa entero que puede despejar mercados con más de 10,000 pacientes (y el mismo número de donantes dispuestos). Permitir ciclos de longitud mayor a 3 a menudo no conduce a ninguna mejora en el tamaño del intercambio [15]. (Además, en un modelo teórico simplificado, cualquier intercambio de riñón se puede convertir en uno con ciclos de longitud de a lo sumo 4 [15].) Si bien esto no se aplica a intercambios de trueque generales, ni siquiera a todos los mercados de intercambio de riñones, en la Sección 5.2.3 hacemos uso de la observación de que los ciclos cortos son suficientes para aumentar drásticamente la velocidad de nuestro algoritmo. A un nivel alto, el problema de compensación para intercambios de trueque es similar al problema de compensación (también conocido como problema de determinación de ganadores) en subastas combinatorias. En ambos contextos, la idea es recopilar toda la información pertinente sobre los agentes en un punto central de compensación y ejecutar un algoritmo centralizado de compensación para determinar la asignación. Ambos problemas son NP-duros. Ambos se resuelven mejor utilizando técnicas de búsqueda en árboles. Desde 1999, se ha realizado un trabajo significativo en informática y investigación de operaciones sobre algoritmos de búsqueda de árboles óptimos más rápidos para despejar subastas combinatorias. (Para una revisión reciente, consulte [18].) Sin embargo, el problema de compensación del intercambio de riñones (con un límite de 3 o más en el tamaño del ciclo) es diferente del problema de compensación de la subasta combinatoria de formas significativas. La diferencia más importante es que las formulaciones naturales del problema de subasta combinatoria tienden a ajustarse fácilmente en la memoria, por lo que el tiempo es el cuello de botella en la práctica. Por el contrario, las formulaciones naturales del problema de intercambio de riñones (con L = 3) ocupan al menos espacio cúbico en el número de pacientes para incluso modelar, y por lo tanto la memoria se convierte en un cuello de botella mucho antes que el tiempo al utilizar la búsqueda de árbol estándar, como branch-and-cut en CPLEX, para abordar el problema. (En una computadora de 1GB y un generador de instancias estándar realista, discutido más adelante, CPLEX 10.010 se queda sin memoria en cinco de las diez instancias de 900 pacientes y en las diez de las diez instancias de 1,000 pacientes que generamos). Por lo tanto, los enfoques que se han desarrollado para subastas combinatorias no pueden manejar el problema del intercambio de riñones. 1.2 Esquema del documento El resto del documento está organizado de la siguiente manera. La sección 2 discute el proceso mediante el cual generamos datos realistas del mercado de intercambio de riñones, con el fin de comparar los algoritmos de compensación. La sección 3 contiene una demostración de que el problema de decisión de compensación del mercado es NP-completo. Las secciones 4 y 5 contienen cada una una formulación ILP del problema de compensación. También detallamos en esas secciones nuestras técnicas utilizadas para resolver esos programas en instancias grandes. La sección 6 presenta experimentos sobre las diversas técnicas. La sección 7 discute la implementación reciente de nuestro algoritmo. Finalmente, presentamos nuestras conclusiones en la Sección 8 y sugerimos direcciones para investigaciones futuras. CARACTERÍSTICAS DEL MERCADO Y GENERADOR DE INSTANCIAS Probamos los algoritmos en mercados simulados de intercambio de riñones, los cuales son generados por un proceso descrito en Saidman et al. [17]. Este proceso se basa en los extensos datos a nivel nacional mantenidos por la Red Unida para el Comparto de Órganos (UNOS), por lo que genera una distribución realista de instancias. Varios artículos han utilizado variaciones de este proceso para demostrar la efectividad de un intercambio nacional de riñones (extrapolando de pequeñas instancias o restringiendo la compensación a ciclos de 2) [6, 20, 14, 13, 15, 17]. En resumen, el proceso implica generar pacientes con un tipo de sangre, sexo y probabilidad de ser incompatible en el tipo de tejido con un donante elegido al azar. Estas probabilidades se basan en datos reales de la población del mundo real. A cada paciente se le asigna un posible donante con un tipo de sangre aleatorio y una relación con el paciente. Si el paciente y el posible donante son incompatibles, ambos son ingresados en el mercado. La información del tipo de sangre y del tipo de tejido se utiliza luego para decidir qué pacientes y donantes son compatibles. Una complicación, manejada por el generador, es que si la paciente es mujer y ha tenido un hijo con su potencial donante, entonces la probabilidad de que los dos sean incompatibles aumenta. (Esto se debe a que la madre desarrolla anticuerpos contra su pareja durante el embarazo). Finalmente, aunque nuestros algoritmos pueden manejar funciones de peso más generales, los pacientes tienen una utilidad de 1 para donantes compatibles, ya que su probabilidad de supervivencia no se ve afectada por la elección del donante [3]. Esto significa que el intercambio de peso máximo tiene la máxima cardinalidad. La Tabla 1 proporciona límites inferiores y superiores sobre el tamaño de un intercambio de máxima cardinalidad en el mercado de intercambio de riñones. Los límites inferiores se encontraron al despejar el mercado solo con ciclos de longitud 2, mientras que los límites superiores no tenían restricción en la longitud del ciclo. Para cada tamaño de mercado, los límites fueron calculados sobre 10 mercados generados aleatoriamente. Ten en cuenta que puede haber una gran cantidad de variabilidad en los mercados: en un mercado de 5000 pacientes, menos de 1000 pacientes estaban en el intercambio de cardinalidad máxima. Tamaño máximo de intercambio Longitud-2 ciclos solamente Ciclos arbitrarios Pacientes Media Máximo Media Máximo 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Tabla 1: Límites superiores e inferiores en el tamaño del intercambio. La Tabla 2 proporciona características adicionales del mercado de intercambio de riñones. Ten en cuenta que un mercado con 5000 pacientes puede tener más de 450 millones de ciclos de longitud 2 y 3. Longitud de los bordes 2 y 3 ciclos Pacientes Media Máx. Media Máx. 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Tabla 2: Características del mercado. 297 COMPLEJIDAD DEL PROBLEMA En esta sección, demostramos que (la versión de decisión del) problema de compensación de mercado con ciclos cortos es NP-completo. Teorema 1. Dado un grafo G = (V, E) y un entero L ≥ 3, el problema de decidir si G admite una cubierta de ciclos perfecta que contenga ciclos de longitud como máximo L es NP-completo. Prueba. Es claro que este problema está en NP. Para la NP-dificultad, reducimos desde <br>3D-Matching</br>, que es el problema de, dado conjuntos disjuntos X, Y y Z de tamaño q, y un conjunto de triples T ⊆ X × Y × Z, decidir si existe un subconjunto disjunto M de T con tamaño q. Una idea directa es construir un grafo tripartito con conjuntos de vértices X ∪ Y ∪ Z y aristas dirigidas (xa, yb), (yb, zc) y (zc, xa) para cada triple ti = {xa, yb, zc} ∈ T. Sin embargo, no es demasiado difícil ver que esta codificación falla porque una cobertura de ciclo perfecta puede incluir un ciclo sin un triple correspondiente. En cambio, utilizamos la siguiente reducción. Dado una instancia de 3D-Matching, construye un vértice para cada elemento en X, Y y Z. Para cada tripleta, ti = {xa, yb, zc}, construya el dispositivo en la Figura 2, que es similar a uno en Garey y Johnson [5, pp 68-69]. Ten en cuenta que los dispositivos se intersecan solo en los vértices de X ∪ Y ∪ Z. Es claro que esta construcción puede realizarse en tiempo polinómico. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figura 2: Dispositivo de NP-completitud para la tripleta ti y la longitud máxima del ciclo L. Sea M un <br>emparejamiento</br> 3D perfecto. ",
            "candidates": [],
            "error": [
                [
                    "coincidencia",
                    "coincidencia máxima",
                    "3D-Matching",
                    "emparejamiento"
                ]
            ]
        },
        "column generation": {
            "translated_key": "generación de columnas",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national kidney exchange.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and <br>column generation</br>.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that <br>column generation</br> scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
                "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "Kidney failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a kidney transplant.",
                "Kidney transplants are by far the most common transplant.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
                "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of barter exchanges.",
                "In a barter-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe exchange in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
                "We can encode a barter exchange market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An exchange is a collection of disjoint cycles.",
                "The weight of an exchange is the sum of its cycle weights.",
                "A social welfare maximizing exchange is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market.",
                "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
                "For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and <br>column generation</br>.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general barter exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight exchange has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
                "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
                "Table 2 gives additional characteristics of the kidney-exchange market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect matching.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, <br>column generation</br> based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the <br>column generation</br> based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation.",
                "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
                "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the cycle formulation.",
                "We show how to construct an equivalent solution in the edge formulation.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the cycle formulation is tighter than the edge formulation.",
                "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 <br>column generation</br> for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of <br>column generation</br> is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, <br>column generation</br> is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous <br>column generation</br> iteration.",
                "Finally, it can sometimes be beneficial for <br>column generation</br> to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, <br>column generation</br> requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using <br>column generation</br>, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes <br>column generation</br> to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
                "To make this idea work then, we used <br>column generation</br> to solve the edge formulation.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary <br>column generation</br> not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the <br>column generation</br> iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the <br>column generation</br> enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of branch-and-price.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform <br>column generation</br> (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the <br>column generation</br> phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full cycle formulation.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental <br>column generation</br> approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
                "<br>column generation</br> One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional <br>column generation</br> that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many <br>column generation</br> problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
                "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
                "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and <br>column generation</br>.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that <br>column generation</br> scales dramatically better than constraint generation.",
                "For <br>column generation</br> in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
                "Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
                "Branch-and-price: <br>column generation</br> for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by kidney paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Kidney exchange.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A kidney exchange clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight matching algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live kidney donation by matching for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "Kidney paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic kidney exchange.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-kidney exchange program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [
                "We adapt two paradigms for the task: constraint generation and <br>column generation</br>.",
                "We conclude that <br>column generation</br> scales drastically better than constraint generation.",
                "We adapt two paradigms for the task: constraint generation and <br>column generation</br>.",
                "In other words, <br>column generation</br> based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the <br>column generation</br> based approaches. 5."
            ],
            "translated_annotated_samples": [
                "Adaptamos dos paradigmas para la tarea: generación de restricciones y <br>generación de columnas</br>.",
                "Concluimos que la <br>generación de columnas</br> escala considerablemente mejor que la generación de restricciones.",
                "Adaptamos dos paradigmas para la tarea: generación de restricciones y <br>generación de columnas</br>.",
                "En otras palabras, los enfoques basados en <br>generación de columnas</br> resultaron ser drásticamente mejores que los enfoques basados en generación de restricciones.",
                "Por lo tanto, en el resto del documento nos enfocaremos en la formulación del ciclo y en los enfoques basados en la <br>generación de columnas</br>. 5."
            ],
            "translated_text": "Algoritmos de compensación para mercados de intercambio de trueque: Facilitando los intercambios de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales. El problema de compensación implica encontrar un intercambio que maximice el bienestar social cuando la longitud máxima de un ciclo está fija. Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente. Además, en los intercambios de trueque en general, más agentes se ven afectados si uno abandona un ciclo más largo. Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro. Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones. Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. La clave es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y <br>generación de columnas</br>. Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. Concluimos que la <br>generación de columnas</br> escala considerablemente mejor que la generación de restricciones. Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de riñón. Nuestro algoritmo reemplazó a CPLEX como el algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones. Las carreras de fósforos se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas]: [General] Términos Generales Algoritmos, Economía 1. INTRODUCCIÓN El papel de los riñones es filtrar los desechos de la sangre. La insuficiencia renal resulta en la acumulación de estos desechos, lo cual conduce a la muerte en meses. Una opción de tratamiento es la diálisis, en la que el paciente va a un hospital para que su sangre sea filtrada por una máquina externa. Se requieren varias visitas por semana, y cada una lleva varias horas. La calidad de vida en diálisis puede ser extremadamente baja, de hecho, muchos pacientes optan por retirarse de la diálisis, lo que conduce a una muerte natural. Solo el 12% de los pacientes en diálisis sobreviven 10 años [23]. En cambio, el tratamiento preferido es un trasplante de riñón. Los trasplantes de riñón son, con mucho, los trasplantes más comunes. Desafortunadamente, la demanda de riñones supera con creces la oferta. En los Estados Unidos en 2005, 4,052 personas murieron esperando un trasplante de riñón que les salvara la vida. Durante este tiempo, casi 30,000 personas fueron añadidas a la lista nacional de espera, mientras que solo 9,913 personas salieron de la lista después de recibir un riñón de donante fallecido. La lista de espera actualmente tiene más de 70,000 personas, y el tiempo de espera mediano varía de 2 a 5 años, dependiendo del tipo de sangre. Para muchos pacientes con enfermedad renal, la mejor opción es encontrar un donante vivo, es decir, una persona sana dispuesta a donar uno de sus dos riñones. Aunque existen mercados para comprar y vender riñones de donantes vivos, la comercialización de órganos humanos es casi universalmente considerada como antiética, y la práctica suele ser explícitamente ilegal, como en los Estados Unidos. Sin embargo, en la mayoría de los países, la donación en vida es legal, siempre y cuando se realice como un regalo sin compensación financiera. En 2005, hubo 6,563 donaciones en vida en los Estados Unidos. El número de donaciones en vida habría sido mucho mayor si no fuera por el hecho de que, con frecuencia, un posible donante y su receptor previsto son incompatibles en tipo de sangre o tipo de tejido. En el pasado, el donante incompatible fue enviado a casa, dejando al paciente a la espera de un riñón de un donante fallecido. Sin embargo, ahora hay algunos intercambios renales regionales en los Estados Unidos, en los que los pacientes pueden intercambiar sus donantes incompatibles entre sí, para así obtener cada uno un donante compatible. Estos mercados son ejemplos de intercambios de trueque. En un mercado de intercambio por trueque, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Los intercambios de trueque son ubicuos: ejemplos incluyen Peerflix (DVDs) [11], Read It Swap It (libros) [12], e Intervac (casas de vacaciones) [9]. Durante muchos años, incluso ha habido un gran intercambio de zapatos en los Estados Unidos [10]. Las personas con pies de diferentes tamaños usan esto para evitar tener que comprar dos pares de zapatos. Los amputados de pierna tienen un intercambio separado para compartir el costo de comprar un par de zapatos. Podemos codificar un mercado de intercambio de trueque como un grafo dirigido G = (V, E) de la siguiente manera. Construye un vértice para cada agente. Agregar un borde ponderado e desde un agente vi hacia otro vj, si vi desea el artículo de vj. El peso que representamos de e es la utilidad para vi de obtener el artículo vjs. Un ciclo c en este grafo representa un intercambio posible, donde cada agente en el ciclo obtiene el artículo del siguiente agente. El peso wc de un ciclo c es la suma de los pesos de sus aristas. Un intercambio es una colección de ciclos disjuntos. El peso de un intercambio es la suma de los pesos de sus ciclos. Un intercambio que maximiza el bienestar social es aquel con un peso máximo. La Figura 1 ilustra un mercado de ejemplo con 5 agentes, {v1, v2, . . . , v5}, en el que todos los bordes tienen peso 1. El mercado tiene 4 ciclos, c1 = v1, v2, c2 = v2, v3, c3 = v3, v4 y c4 = v1, v2, v3, v4, v5, y dos intercambios maximales (de inclusión), a saber, M1 = {c4} y M2 = {c1, c3}. El intercambio M1 tiene tanto el peso máximo como la cardinalidad máxima (es decir, incluye la mayor cantidad de aristas/vértices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figura 1: Mercado de intercambio de trueque de ejemplo. El problema de compensación consiste en encontrar un intercambio de peso máximo que consista en ciclos con una longitud de a lo sumo una pequeña constante L. Esta restricción de longitud de ciclo surge naturalmente por varias razones. Por ejemplo, en un intercambio de riñón, todas las operaciones en un ciclo deben realizarse simultáneamente; de lo contrario, un donante podría retractarse después de que su pareja incompatible haya recibido un riñón. (No se puede redactar un contrato vinculante para donar un órgano). Esto da lugar a una restricción logística en el tamaño del ciclo: incluso si todos los donantes son operados primero y se utiliza el mismo personal e instalaciones para luego operar a los receptores, un ciclo k requiere entre 3k y 6k médicos, alrededor de 4k enfermeras y casi 2k salas de operaciones. Debido a tales limitaciones de recursos, es probable que el próximo mercado nacional de intercambio de riñones solo permita ciclos de longitud 2 y 3. Otra motivación para ciclos cortos es que si el ciclo falla en intercambiarse, menos agentes se ven afectados. Por ejemplo, las pruebas de último minuto en un intercambio de riñones a menudo revelan nuevas incompatibilidades que no fueron detectadas en las pruebas iniciales (en base a las cuales se construyó el grafo de compatibilidad). Más generalmente, un agente puede abandonar un ciclo si sus preferencias han cambiado, o simplemente no cumple con sus obligaciones (como enviar un libro a otro agente en el ciclo) debido a olvidos. En la Sección 3, demostramos que (la versión de decisión del) problema de despeje es NP-completo para L ≥ 3. Una posible estrategia sería buscar un buen heurístico o algoritmo de aproximación. Sin embargo, por dos razones, buscamos un algoritmo exacto basado en un programa lineal entero (PLE), que resolvemos utilizando una búsqueda especializada en árboles. • Primero, cualquier pérdida de optimalidad podría llevar a muertes de pacientes innecesarias. • Segundo, una característica atractiva de utilizar una formulación de PLE es que permite modelar fácilmente una serie de variaciones en el objetivo y agregar restricciones adicionales al problema. Por ejemplo, si se cree que los ciclos de 3 elementos tienen más probabilidades de fallar que los ciclos de 2 elementos, entonces simplemente se les puede asignar un peso que sea apropiadamente menor que 3/2 del peso de un ciclo de 2 elementos. O, si por diversas razones (por ejemplo, éticas) se requiere un intercambio de cardinalidad máxima, al menos se puede encontrar en una segunda pasada la solución (de entre todas las soluciones de cardinalidad máxima) que tenga el menor número de 3-ciclos. Otras variaciones que se pueden resolver incluyen encontrar diversas formas de colecciones de ciclos tolerantes a fallos (no disjuntas) en caso de que ciertos pares que se creían compatibles resulten ser incompatibles después de todo. En este documento, presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Las codificaciones de ILP directas son demasiado grandes para siquiera construirse en el hardware actual, sin mencionar resolverlas. La clave entonces es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y <br>generación de columnas</br>. Para cada uno, desarrollamos una serie de técnicas (principalmente específicas del problema) que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. 1.1 Trabajos Previos Varios artículos recientes han utilizado simulaciones y algoritmos de compensación de mercado para explorar el impacto de un intercambio nacional de riñones [13, 20, 6, 14, 15, 17]. Por ejemplo, utilizando el algoritmo de coincidencia máxima de Edmonds [4], [20] se muestra que un mercado nacional de intercambio por pares (utilizando solo ciclos de longitud 2) resultaría en más trasplantes, tiempos de espera reducidos y ahorros de $750 millones en costos de atención médica durante 5 años. Esos resultados son conservadores de dos maneras. En primer lugar, el mercado simulado contenía solo 4,000 pacientes iniciales, con 250 pacientes añadidos cada 3 meses. Se nos ha informado que el mercado podría ser casi el doble de este tamaño. En segundo lugar, los intercambios se restringieron a ciclos de longitud 2 (porque eso es todo lo que se puede modelar como coincidencia máxima y resolver utilizando el algoritmo de Edmonds). Permitir ciclos de longitud 3 conlleva a ganancias adicionales significativas. Esto se ha demostrado en mercados de intercambio de riñones con 100 pacientes utilizando CPLEX para resolver una codificación de programa entero del problema de compensación [15]. En este documento, presentamos un algoritmo alternativo para este programa entero que puede despejar mercados con más de 10,000 pacientes (y el mismo número de donantes dispuestos). Permitir ciclos de longitud mayor a 3 a menudo no conduce a ninguna mejora en el tamaño del intercambio [15]. (Además, en un modelo teórico simplificado, cualquier intercambio de riñón se puede convertir en uno con ciclos de longitud de a lo sumo 4 [15].) Si bien esto no se aplica a intercambios de trueque generales, ni siquiera a todos los mercados de intercambio de riñones, en la Sección 5.2.3 hacemos uso de la observación de que los ciclos cortos son suficientes para aumentar drásticamente la velocidad de nuestro algoritmo. A un nivel alto, el problema de compensación para intercambios de trueque es similar al problema de compensación (también conocido como problema de determinación de ganadores) en subastas combinatorias. En ambos contextos, la idea es recopilar toda la información pertinente sobre los agentes en un punto central de compensación y ejecutar un algoritmo centralizado de compensación para determinar la asignación. Ambos problemas son NP-duros. Ambos se resuelven mejor utilizando técnicas de búsqueda en árboles. Desde 1999, se ha realizado un trabajo significativo en informática y investigación de operaciones sobre algoritmos de búsqueda de árboles óptimos más rápidos para despejar subastas combinatorias. (Para una revisión reciente, consulte [18].) Sin embargo, el problema de compensación del intercambio de riñones (con un límite de 3 o más en el tamaño del ciclo) es diferente del problema de compensación de la subasta combinatoria de formas significativas. La diferencia más importante es que las formulaciones naturales del problema de subasta combinatoria tienden a ajustarse fácilmente en la memoria, por lo que el tiempo es el cuello de botella en la práctica. Por el contrario, las formulaciones naturales del problema de intercambio de riñones (con L = 3) ocupan al menos espacio cúbico en el número de pacientes para incluso modelar, y por lo tanto la memoria se convierte en un cuello de botella mucho antes que el tiempo al utilizar la búsqueda de árbol estándar, como branch-and-cut en CPLEX, para abordar el problema. (En una computadora de 1GB y un generador de instancias estándar realista, discutido más adelante, CPLEX 10.010 se queda sin memoria en cinco de las diez instancias de 900 pacientes y en las diez de las diez instancias de 1,000 pacientes que generamos). Por lo tanto, los enfoques que se han desarrollado para subastas combinatorias no pueden manejar el problema del intercambio de riñones. 1.2 Esquema del documento El resto del documento está organizado de la siguiente manera. La sección 2 discute el proceso mediante el cual generamos datos realistas del mercado de intercambio de riñones, con el fin de comparar los algoritmos de compensación. La sección 3 contiene una demostración de que el problema de decisión de compensación del mercado es NP-completo. Las secciones 4 y 5 contienen cada una una formulación ILP del problema de compensación. También detallamos en esas secciones nuestras técnicas utilizadas para resolver esos programas en instancias grandes. La sección 6 presenta experimentos sobre las diversas técnicas. La sección 7 discute la implementación reciente de nuestro algoritmo. Finalmente, presentamos nuestras conclusiones en la Sección 8 y sugerimos direcciones para investigaciones futuras. CARACTERÍSTICAS DEL MERCADO Y GENERADOR DE INSTANCIAS Probamos los algoritmos en mercados simulados de intercambio de riñones, los cuales son generados por un proceso descrito en Saidman et al. [17]. Este proceso se basa en los extensos datos a nivel nacional mantenidos por la Red Unida para el Comparto de Órganos (UNOS), por lo que genera una distribución realista de instancias. Varios artículos han utilizado variaciones de este proceso para demostrar la efectividad de un intercambio nacional de riñones (extrapolando de pequeñas instancias o restringiendo la compensación a ciclos de 2) [6, 20, 14, 13, 15, 17]. En resumen, el proceso implica generar pacientes con un tipo de sangre, sexo y probabilidad de ser incompatible en el tipo de tejido con un donante elegido al azar. Estas probabilidades se basan en datos reales de la población del mundo real. A cada paciente se le asigna un posible donante con un tipo de sangre aleatorio y una relación con el paciente. Si el paciente y el posible donante son incompatibles, ambos son ingresados en el mercado. La información del tipo de sangre y del tipo de tejido se utiliza luego para decidir qué pacientes y donantes son compatibles. Una complicación, manejada por el generador, es que si la paciente es mujer y ha tenido un hijo con su potencial donante, entonces la probabilidad de que los dos sean incompatibles aumenta. (Esto se debe a que la madre desarrolla anticuerpos contra su pareja durante el embarazo). Finalmente, aunque nuestros algoritmos pueden manejar funciones de peso más generales, los pacientes tienen una utilidad de 1 para donantes compatibles, ya que su probabilidad de supervivencia no se ve afectada por la elección del donante [3]. Esto significa que el intercambio de peso máximo tiene la máxima cardinalidad. La Tabla 1 proporciona límites inferiores y superiores sobre el tamaño de un intercambio de máxima cardinalidad en el mercado de intercambio de riñones. Los límites inferiores se encontraron al despejar el mercado solo con ciclos de longitud 2, mientras que los límites superiores no tenían restricción en la longitud del ciclo. Para cada tamaño de mercado, los límites fueron calculados sobre 10 mercados generados aleatoriamente. Ten en cuenta que puede haber una gran cantidad de variabilidad en los mercados: en un mercado de 5000 pacientes, menos de 1000 pacientes estaban en el intercambio de cardinalidad máxima. Tamaño máximo de intercambio Longitud-2 ciclos solamente Ciclos arbitrarios Pacientes Media Máximo Media Máximo 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Tabla 1: Límites superiores e inferiores en el tamaño del intercambio. La Tabla 2 proporciona características adicionales del mercado de intercambio de riñones. Ten en cuenta que un mercado con 5000 pacientes puede tener más de 450 millones de ciclos de longitud 2 y 3. Longitud de los bordes 2 y 3 ciclos Pacientes Media Máx. Media Máx. 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Tabla 2: Características del mercado. 297 COMPLEJIDAD DEL PROBLEMA En esta sección, demostramos que (la versión de decisión del) problema de compensación de mercado con ciclos cortos es NP-completo. Teorema 1. Dado un grafo G = (V, E) y un entero L ≥ 3, el problema de decidir si G admite una cubierta de ciclos perfecta que contenga ciclos de longitud como máximo L es NP-completo. Prueba. Es claro que este problema está en NP. Para la NP-dificultad, reducimos desde 3D-Matching, que es el problema de, dado conjuntos disjuntos X, Y y Z de tamaño q, y un conjunto de triples T ⊆ X × Y × Z, decidir si existe un subconjunto disjunto M de T con tamaño q. Una idea directa es construir un grafo tripartito con conjuntos de vértices X ∪ Y ∪ Z y aristas dirigidas (xa, yb), (yb, zc) y (zc, xa) para cada triple ti = {xa, yb, zc} ∈ T. Sin embargo, no es demasiado difícil ver que esta codificación falla porque una cobertura de ciclo perfecta puede incluir un ciclo sin un triple correspondiente. En cambio, utilizamos la siguiente reducción. Dado una instancia de 3D-Matching, construye un vértice para cada elemento en X, Y y Z. Para cada tripleta, ti = {xa, yb, zc}, construya el dispositivo en la Figura 2, que es similar a uno en Garey y Johnson [5, pp 68-69]. Ten en cuenta que los dispositivos se intersecan solo en los vértices de X ∪ Y ∪ Z. Es claro que esta construcción puede realizarse en tiempo polinómico. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figura 2: Dispositivo de NP-completitud para la tripleta ti y la longitud máxima del ciclo L. Sea M un emparejamiento 3D perfecto. Mostraremos que la construcción admite una cobertura perfecta de ciclos mediante ciclos cortos. Si ti = {xa, yb, zc} ∈ M, añade desde el gadget de ti los tres ciclos de longitud L que contienen a xa, yb y zc respectivamente. También añade el ciclo ª xi a, yi b, zi c «. De lo contrario, si ti ∉ M, añade los tres ciclos de longitud L que contienen xi a, yi b y zi c respectivamente. Es claro que todos los vértices están cubiertos, ya que M particiona X × Y × Z. Por el contrario, supongamos que tenemos una cobertura perfecta mediante ciclos cortos. Ten en cuenta que la construcción solo tiene ciclos cortos de longitudes 3 y L, y ningún ciclo corto involucra vértices distintos de dos gadgets diferentes. Es fácil ver entonces que en una cubierta perfecta, cada gadget ti contribuye ciclos de acuerdo a los casos anteriores: ti ∈ M, o ti /∈ M. Por lo tanto, existe un Emparejamiento 3D perfecto en la instancia original. 4. ENFOQUES DE SOLUCIÓN BASADOS EN UNA FORMULACIÓN DE ARISTAS En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada arista. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos sin restricciones de longitud de ciclo. Dado un mercado G = (V, E), construya un grafo bipartito con un vértice para cada agente y un vértice para cada artículo. Agregar un borde ev con peso 0 entre cada agente v y su propio artículo. En este punto, la codificación es una coincidencia perfecta. Ahora, para cada arista e = (vi, vj) en el mercado original, añade una arista e con peso we entre el agente vi y el artículo de vj. Los emparejamientos perfectos en esta codificación corresponden exactamente con las cubiertas de ciclos, ya que cada vez que se toma un artículo de un agente, debe recibir el artículo de otro agente. Se deduce que el problema de despeje sin restricciones puede resolverse en tiempo polinómico encontrando un emparejamiento perfecto de peso máximo. La Figura 3 contiene la representación en forma de grafo bipartito del mercado de ejemplo de la Figura 1. Las aristas de peso 0 están codificadas con líneas discontinuas, mientras que las aristas de mercado están en negrita. Elementos Agentes v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figura 3: Codificación de emparejamiento perfecto del mercado en la Figura 1. Alternativamente, podemos resolver el problema codificándolo como un ILP con una variable para cada arista en el grafo de mercado original G. Este ILP, que se muestra a continuación, tiene la ventaja de que puede ser extendido de manera natural para tratar con restricciones de longitud de ciclo. Por lo tanto, para el resto de esta sección, este será el enfoque que seguiremos. Se busca un max e∈E tal que para todo vi ∈ V, se cumplan las restricciones de conservación eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 y la restricción de capacidad eout=(vi,vj ) eout ≤ 1. Si se permite que los ciclos tengan una longitud de como máximo L, es fácil ver que solo necesitamos hacer los siguientes cambios en el ILP. Para cada camino de longitud L (a lo largo del documento, no incluimos ciclos en la definición de camino) p = ep1, ep2, ..., epL, agregar una restricción ep1 + ep2 + ... + epL ≤ L − 1, que excluye al camino p de cualquier solución factible. Desafortunadamente, en un mercado con solo 1000 pacientes, el número de caminos de longitud 3 supera los 400 millones, por lo que ni siquiera podemos construir este ILP sin quedarnos sin memoria. Por lo tanto, utilizamos una búsqueda en árbol con un enfoque de formulación incremental. Específicamente, utilizamos CPLEX, aunque añadimos restricciones como planos de corte durante el proceso de búsqueda en el árbol. Comenzamos con solo un pequeño subconjunto de las restricciones en el ILP. Dado que este ILP es pequeño, CPLEX puede resolver su relajación LP. Luego verificamos si alguna de las restricciones faltantes es violada por la solución fraccional. Si es así, generamos un conjunto de estas restricciones, las añadimos al ILP y repetimos. Incluso una vez que se satisfacen todas las restricciones, puede que no haya una solución entera que coincida con el límite superior fraccional, y aunque la hubiera, el solucionador de PL podría no encontrarla. En estos casos, CPLEX ramifica en una variable (utilizamos la estrategia de ramificación predeterminada de CPLEX) y genera un nuevo nodo de búsqueda correspondiente a cada uno de los hijos. En cada nodo del árbol de búsqueda que se visita, se repite este proceso de resolver el LP y agregar restricciones. Claramente, este enfoque produce una solución óptima una vez que la búsqueda en el árbol finaliza. Todavía necesitamos explicar los detalles del generador de restricciones (es decir, seleccionar qué restricciones comenzar) y la generación de restricciones (es decir, seleccionar qué restricciones violadas incluir). Describimos brevemente estos en las dos subsecciones siguientes, respectivamente. 4.1 Sembrador de Restricciones El principal sembrador de restricciones que desarrollamos prohíbe cualquier camino de longitud L − 1 que no tenga un borde cerrando el ciclo desde su inicio hasta su final. Si bien es costoso computacionalmente encontrar estas restricciones, su adición enfoca la búsqueda lejos de los caminos que no pueden estar en la solución final. También intentamos sembrar el LP con una colección aleatoria de restricciones del ILP. 4.2 Generación de Restricciones Experimentamos con varios generadores de restricciones. En cada caso, dada una solución fraccional, construimos el subgrafo de aristas con valor positivo. Este gráfico es mucho más pequeño que el gráfico original, por lo que podemos realizar los cálculos siguientes de manera eficiente. En nuestro primer generador de restricciones, simplemente buscamos caminos de longitud L con una suma de valores mayor que L − 1. Para cualquier camino de este tipo, restringimos su suma para que sea como máximo L − 1. Ten en cuenta que si hay un ciclo c con longitud |c| > L, podría contener hasta |c| caminos que violan. En nuestro segundo generador de restricciones, solo agregamos una restricción para tales ciclos: la suma de aristas en el ciclo puede ser a lo sumo |c|(L − 1)/L. Este generador hizo que el algoritmo fuera más lento, por lo que optamos por ir en la dirección opuesta en el desarrollo de nuestro generador final. Agrega una restricción por cada camino p que viola, y además, agrega una restricción para cada camino con los mismos vértices interiores (sin contar los extremos) que p. Esto mejoró la velocidad general. 4.3 Rendimiento experimental Resultó que incluso con estas mejoras, el enfoque de formulación de aristas no puede despejar un intercambio de riñón con 100 vértices en el tiempo en que la formulación de ciclos (descrita más adelante en la Sección 5) puede despejar uno con 10,000 vértices. En otras palabras, los enfoques basados en <br>generación de columnas</br> resultaron ser drásticamente mejores que los enfoques basados en generación de restricciones. Por lo tanto, en el resto del documento nos enfocaremos en la formulación del ciclo y en los enfoques basados en la <br>generación de columnas</br>. 5. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "kidney": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide <br>kidney</br> Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national <br>kidney</br>-exchange market, where patients with <br>kidney</br> disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver <br>kidney</br> in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to <br>kidney</br> disease.",
                "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national <br>kidney</br> exchange.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that column generation scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world <br>kidney</br> exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading <br>kidney</br> exchanges.",
                "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "<br>kidney</br> failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a <br>kidney</br> transplant.",
                "<br>kidney</br> transplants are by far the most common transplant.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving <br>kidney</br> transplant.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor <br>kidney</br>.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with <br>kidney</br> disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor <br>kidney</br>.",
                "However, there are now a few regional <br>kidney</br> exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of barter exchanges.",
                "In a barter-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe exchange in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
                "We can encode a barter exchange market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An exchange is a collection of disjoint cycles.",
                "The weight of an exchange is the sum of its cycle weights.",
                "A social welfare maximizing exchange is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market.",
                "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a <br>kidney</br> exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a <br>kidney</br>. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national <br>kidney</br> exchange market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
                "For example, last-minute testing in a <br>kidney</br> exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national <br>kidney</br> exchange [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on <br>kidney</br> exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any <br>kidney</br> exchange can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general barter exchanges, or even for all <br>kidney</br> exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the <br>kidney</br> exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the <br>kidney</br> exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the <br>kidney</br> exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic <br>kidney</br> exchange market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated <br>kidney</br> exchange markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national <br>kidney</br> exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight exchange has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the <br>kidney</br>-exchange market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
                "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
                "Table 2 gives additional characteristics of the <br>kidney</br>-exchange market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect matching.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a <br>kidney</br> exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation.",
                "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
                "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the cycle formulation.",
                "We show how to construct an equivalent solution in the edge formulation.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the cycle formulation is tighter than the edge formulation.",
                "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, column generation is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
                "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
                "To make this idea work then, we used column generation to solve the edge formulation.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of branch-and-price.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For <br>kidney</br>-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full cycle formulation.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental column generation approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
                "Column Generation One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many column generation problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading <br>kidney</br> exchanges, in December 2006.",
                "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four <br>kidney</br> exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
                "We are in discussions with additional <br>kidney</br> exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national <br>kidney</br>-exchange market in which patients with <br>kidney</br> disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver <br>kidney</br> in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to <br>kidney</br> disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the <br>kidney</br> exchange clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and column generation.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that column generation scales dramatically better than constraint generation.",
                "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world <br>kidney</br> exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over <br>kidney</br>), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a <br>kidney</br> if possible.",
                "Our work has treated the <br>kidney</br> exchange as a batch problem with full information (at least in the short run, <br>kidney</br> exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as <br>kidney</br> transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the <br>kidney</br> exchange process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
                "Branch-and-price: Column generation for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by <br>kidney</br> paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "<br>kidney</br> exchange.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A <br>kidney</br> exchange clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient <br>kidney</br> exchange: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight matching algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live <br>kidney</br> donation by matching for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "<br>kidney</br> paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic <br>kidney</br> exchange.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-<br>kidney</br> exchange program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [
                "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide <br>kidney</br> Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "We focus mainly on the upcoming national <br>kidney</br>-exchange market, where patients with <br>kidney</br> disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver <br>kidney</br> in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to <br>kidney</br> disease.",
                "Solving it exactly is one of the main challenges in establishing a national <br>kidney</br> exchange.",
                "Our algorithm also supports several generalizations, as demanded by real-world <br>kidney</br> exchanges."
            ],
            "translated_annotated_samples": [
                "Algoritmos de compensación para mercados de intercambio de trueque: Facilitando los intercambios de <br>riñones</br> a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades.",
                "Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles.",
                "Con más de 70,000 pacientes ya en espera de un <br>riñón</br> de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales.",
                "Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones.",
                "Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de <br>riñón</br>."
            ],
            "translated_text": "Algoritmos de compensación para mercados de intercambio de trueque: Facilitando los intercambios de <br>riñones</br> a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un <br>riñón</br> de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales. El problema de compensación implica encontrar un intercambio que maximice el bienestar social cuando la longitud máxima de un ciclo está fija. Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente. Además, en los intercambios de trueque en general, más agentes se ven afectados si uno abandona un ciclo más largo. Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro. Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones. Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. La clave es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. Concluimos que la generación de columnas escala considerablemente mejor que la generación de restricciones. Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de <br>riñón</br>. ",
            "candidates": [],
            "error": [
                [
                    "riñones",
                    "riñón",
                    "riñón"
                ]
            ]
        },
        "transplant": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national kidney exchange.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that column generation scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
                "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "Kidney failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a kidney <br>transplant</br>.",
                "Kidney transplants are by far the most common <br>transplant</br>.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney <br>transplant</br>.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
                "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of barter exchanges.",
                "In a barter-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe exchange in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
                "We can encode a barter exchange market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An exchange is a collection of disjoint cycles.",
                "The weight of an exchange is the sum of its cycle weights.",
                "A social welfare maximizing exchange is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market.",
                "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
                "For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general barter exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight exchange has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
                "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
                "Table 2 gives additional characteristics of the kidney-exchange market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect matching.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation.",
                "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
                "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the cycle formulation.",
                "We show how to construct an equivalent solution in the edge formulation.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the cycle formulation is tighter than the edge formulation.",
                "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, column generation is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
                "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
                "To make this idea work then, we used column generation to solve the edge formulation.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of branch-and-price.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full cycle formulation.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental column generation approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
                "Column Generation One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many column generation problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
                "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
                "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and column generation.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that column generation scales dramatically better than constraint generation.",
                "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
                "Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney <br>transplant</br> surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
                "Branch-and-price: Column generation for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by kidney paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Kidney exchange.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A kidney exchange clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight matching algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live kidney donation by matching for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "Kidney paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic kidney exchange.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-kidney exchange program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [
                "Instead, the preferred treatment is a kidney <br>transplant</br>.",
                "Kidney transplants are by far the most common <br>transplant</br>.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney <br>transplant</br>.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney <br>transplant</br> surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process."
            ],
            "translated_annotated_samples": [
                "En cambio, el tratamiento preferido es un <br>trasplante</br> de riñón.",
                "Los <br>trasplantes</br> de riñón son, con mucho, los <br>trasplantes</br> más comunes.",
                "En los Estados Unidos en 2005, 4,052 personas murieron esperando un <br>trasplante</br> de riñón que les salvara la vida.",
                "Agradecimientos Agradecemos a los economistas Al Roth y Utku Unver, así como al cirujano de <br>trasplante</br>s de riñón Michael Rees, por alertarnos sobre el hecho de que la tecnología previa era insuficiente para el problema de compensación a escala nacional, proporcionar conjuntos de datos iniciales y discutir los detalles del proceso de intercambio de riñones."
            ],
            "translated_text": "Algoritmos de compensación para mercados de intercambio de trueque: Facilitando los intercambios de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales. El problema de compensación implica encontrar un intercambio que maximice el bienestar social cuando la longitud máxima de un ciclo está fija. Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente. Además, en los intercambios de trueque en general, más agentes se ven afectados si uno abandona un ciclo más largo. Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro. Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones. Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. La clave es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. Concluimos que la generación de columnas escala considerablemente mejor que la generación de restricciones. Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de riñón. Nuestro algoritmo reemplazó a CPLEX como el algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones. Las carreras de fósforos se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas]: [General] Términos Generales Algoritmos, Economía 1. INTRODUCCIÓN El papel de los riñones es filtrar los desechos de la sangre. La insuficiencia renal resulta en la acumulación de estos desechos, lo cual conduce a la muerte en meses. Una opción de tratamiento es la diálisis, en la que el paciente va a un hospital para que su sangre sea filtrada por una máquina externa. Se requieren varias visitas por semana, y cada una lleva varias horas. La calidad de vida en diálisis puede ser extremadamente baja, de hecho, muchos pacientes optan por retirarse de la diálisis, lo que conduce a una muerte natural. Solo el 12% de los pacientes en diálisis sobreviven 10 años [23]. En cambio, el tratamiento preferido es un <br>trasplante</br> de riñón. Los <br>trasplantes</br> de riñón son, con mucho, los <br>trasplantes</br> más comunes. Desafortunadamente, la demanda de riñones supera con creces la oferta. En los Estados Unidos en 2005, 4,052 personas murieron esperando un <br>trasplante</br> de riñón que les salvara la vida. Durante este tiempo, casi 30,000 personas fueron añadidas a la lista nacional de espera, mientras que solo 9,913 personas salieron de la lista después de recibir un riñón de donante fallecido. La lista de espera actualmente tiene más de 70,000 personas, y el tiempo de espera mediano varía de 2 a 5 años, dependiendo del tipo de sangre. Para muchos pacientes con enfermedad renal, la mejor opción es encontrar un donante vivo, es decir, una persona sana dispuesta a donar uno de sus dos riñones. Aunque existen mercados para comprar y vender riñones de donantes vivos, la comercialización de órganos humanos es casi universalmente considerada como antiética, y la práctica suele ser explícitamente ilegal, como en los Estados Unidos. Sin embargo, en la mayoría de los países, la donación en vida es legal, siempre y cuando se realice como un regalo sin compensación financiera. En 2005, hubo 6,563 donaciones en vida en los Estados Unidos. El número de donaciones en vida habría sido mucho mayor si no fuera por el hecho de que, con frecuencia, un posible donante y su receptor previsto son incompatibles en tipo de sangre o tipo de tejido. En el pasado, el donante incompatible fue enviado a casa, dejando al paciente a la espera de un riñón de un donante fallecido. Sin embargo, ahora hay algunos intercambios renales regionales en los Estados Unidos, en los que los pacientes pueden intercambiar sus donantes incompatibles entre sí, para así obtener cada uno un donante compatible. Estos mercados son ejemplos de intercambios de trueque. En un mercado de intercambio por trueque, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Los intercambios de trueque son ubicuos: ejemplos incluyen Peerflix (DVDs) [11], Read It Swap It (libros) [12], e Intervac (casas de vacaciones) [9]. Durante muchos años, incluso ha habido un gran intercambio de zapatos en los Estados Unidos [10]. Las personas con pies de diferentes tamaños usan esto para evitar tener que comprar dos pares de zapatos. Los amputados de pierna tienen un intercambio separado para compartir el costo de comprar un par de zapatos. Podemos codificar un mercado de intercambio de trueque como un grafo dirigido G = (V, E) de la siguiente manera. Construye un vértice para cada agente. Agregar un borde ponderado e desde un agente vi hacia otro vj, si vi desea el artículo de vj. El peso que representamos de e es la utilidad para vi de obtener el artículo vjs. Un ciclo c en este grafo representa un intercambio posible, donde cada agente en el ciclo obtiene el artículo del siguiente agente. El peso wc de un ciclo c es la suma de los pesos de sus aristas. Un intercambio es una colección de ciclos disjuntos. El peso de un intercambio es la suma de los pesos de sus ciclos. Un intercambio que maximiza el bienestar social es aquel con un peso máximo. La Figura 1 ilustra un mercado de ejemplo con 5 agentes, {v1, v2, . . . , v5}, en el que todos los bordes tienen peso 1. El mercado tiene 4 ciclos, c1 = v1, v2, c2 = v2, v3, c3 = v3, v4 y c4 = v1, v2, v3, v4, v5, y dos intercambios maximales (de inclusión), a saber, M1 = {c4} y M2 = {c1, c3}. El intercambio M1 tiene tanto el peso máximo como la cardinalidad máxima (es decir, incluye la mayor cantidad de aristas/vértices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figura 1: Mercado de intercambio de trueque de ejemplo. El problema de compensación consiste en encontrar un intercambio de peso máximo que consista en ciclos con una longitud de a lo sumo una pequeña constante L. Esta restricción de longitud de ciclo surge naturalmente por varias razones. Por ejemplo, en un intercambio de riñón, todas las operaciones en un ciclo deben realizarse simultáneamente; de lo contrario, un donante podría retractarse después de que su pareja incompatible haya recibido un riñón. (No se puede redactar un contrato vinculante para donar un órgano). Esto da lugar a una restricción logística en el tamaño del ciclo: incluso si todos los donantes son operados primero y se utiliza el mismo personal e instalaciones para luego operar a los receptores, un ciclo k requiere entre 3k y 6k médicos, alrededor de 4k enfermeras y casi 2k salas de operaciones. Debido a tales limitaciones de recursos, es probable que el próximo mercado nacional de intercambio de riñones solo permita ciclos de longitud 2 y 3. Otra motivación para ciclos cortos es que si el ciclo falla en intercambiarse, menos agentes se ven afectados. Por ejemplo, las pruebas de último minuto en un intercambio de riñones a menudo revelan nuevas incompatibilidades que no fueron detectadas en las pruebas iniciales (en base a las cuales se construyó el grafo de compatibilidad). Más generalmente, un agente puede abandonar un ciclo si sus preferencias han cambiado, o simplemente no cumple con sus obligaciones (como enviar un libro a otro agente en el ciclo) debido a olvidos. En la Sección 3, demostramos que (la versión de decisión del) problema de despeje es NP-completo para L ≥ 3. Una posible estrategia sería buscar un buen heurístico o algoritmo de aproximación. Sin embargo, por dos razones, buscamos un algoritmo exacto basado en un programa lineal entero (PLE), que resolvemos utilizando una búsqueda especializada en árboles. • Primero, cualquier pérdida de optimalidad podría llevar a muertes de pacientes innecesarias. • Segundo, una característica atractiva de utilizar una formulación de PLE es que permite modelar fácilmente una serie de variaciones en el objetivo y agregar restricciones adicionales al problema. Por ejemplo, si se cree que los ciclos de 3 elementos tienen más probabilidades de fallar que los ciclos de 2 elementos, entonces simplemente se les puede asignar un peso que sea apropiadamente menor que 3/2 del peso de un ciclo de 2 elementos. O, si por diversas razones (por ejemplo, éticas) se requiere un intercambio de cardinalidad máxima, al menos se puede encontrar en una segunda pasada la solución (de entre todas las soluciones de cardinalidad máxima) que tenga el menor número de 3-ciclos. Otras variaciones que se pueden resolver incluyen encontrar diversas formas de colecciones de ciclos tolerantes a fallos (no disjuntas) en caso de que ciertos pares que se creían compatibles resulten ser incompatibles después de todo. En este documento, presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Las codificaciones de ILP directas son demasiado grandes para siquiera construirse en el hardware actual, sin mencionar resolverlas. La clave entonces es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas (principalmente específicas del problema) que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. 1.1 Trabajos Previos Varios artículos recientes han utilizado simulaciones y algoritmos de compensación de mercado para explorar el impacto de un intercambio nacional de riñones [13, 20, 6, 14, 15, 17]. Por ejemplo, utilizando el algoritmo de coincidencia máxima de Edmonds [4], [20] se muestra que un mercado nacional de intercambio por pares (utilizando solo ciclos de longitud 2) resultaría en más trasplantes, tiempos de espera reducidos y ahorros de $750 millones en costos de atención médica durante 5 años. Esos resultados son conservadores de dos maneras. En primer lugar, el mercado simulado contenía solo 4,000 pacientes iniciales, con 250 pacientes añadidos cada 3 meses. Se nos ha informado que el mercado podría ser casi el doble de este tamaño. En segundo lugar, los intercambios se restringieron a ciclos de longitud 2 (porque eso es todo lo que se puede modelar como coincidencia máxima y resolver utilizando el algoritmo de Edmonds). Permitir ciclos de longitud 3 conlleva a ganancias adicionales significativas. Esto se ha demostrado en mercados de intercambio de riñones con 100 pacientes utilizando CPLEX para resolver una codificación de programa entero del problema de compensación [15]. En este documento, presentamos un algoritmo alternativo para este programa entero que puede despejar mercados con más de 10,000 pacientes (y el mismo número de donantes dispuestos). Permitir ciclos de longitud mayor a 3 a menudo no conduce a ninguna mejora en el tamaño del intercambio [15]. (Además, en un modelo teórico simplificado, cualquier intercambio de riñón se puede convertir en uno con ciclos de longitud de a lo sumo 4 [15].) Si bien esto no se aplica a intercambios de trueque generales, ni siquiera a todos los mercados de intercambio de riñones, en la Sección 5.2.3 hacemos uso de la observación de que los ciclos cortos son suficientes para aumentar drásticamente la velocidad de nuestro algoritmo. A un nivel alto, el problema de compensación para intercambios de trueque es similar al problema de compensación (también conocido como problema de determinación de ganadores) en subastas combinatorias. En ambos contextos, la idea es recopilar toda la información pertinente sobre los agentes en un punto central de compensación y ejecutar un algoritmo centralizado de compensación para determinar la asignación. Ambos problemas son NP-duros. Ambos se resuelven mejor utilizando técnicas de búsqueda en árboles. Desde 1999, se ha realizado un trabajo significativo en informática y investigación de operaciones sobre algoritmos de búsqueda de árboles óptimos más rápidos para despejar subastas combinatorias. (Para una revisión reciente, consulte [18].) Sin embargo, el problema de compensación del intercambio de riñones (con un límite de 3 o más en el tamaño del ciclo) es diferente del problema de compensación de la subasta combinatoria de formas significativas. La diferencia más importante es que las formulaciones naturales del problema de subasta combinatoria tienden a ajustarse fácilmente en la memoria, por lo que el tiempo es el cuello de botella en la práctica. Por el contrario, las formulaciones naturales del problema de intercambio de riñones (con L = 3) ocupan al menos espacio cúbico en el número de pacientes para incluso modelar, y por lo tanto la memoria se convierte en un cuello de botella mucho antes que el tiempo al utilizar la búsqueda de árbol estándar, como branch-and-cut en CPLEX, para abordar el problema. (En una computadora de 1GB y un generador de instancias estándar realista, discutido más adelante, CPLEX 10.010 se queda sin memoria en cinco de las diez instancias de 900 pacientes y en las diez de las diez instancias de 1,000 pacientes que generamos). Por lo tanto, los enfoques que se han desarrollado para subastas combinatorias no pueden manejar el problema del intercambio de riñones. 1.2 Esquema del documento El resto del documento está organizado de la siguiente manera. La sección 2 discute el proceso mediante el cual generamos datos realistas del mercado de intercambio de riñones, con el fin de comparar los algoritmos de compensación. La sección 3 contiene una demostración de que el problema de decisión de compensación del mercado es NP-completo. Las secciones 4 y 5 contienen cada una una formulación ILP del problema de compensación. También detallamos en esas secciones nuestras técnicas utilizadas para resolver esos programas en instancias grandes. La sección 6 presenta experimentos sobre las diversas técnicas. La sección 7 discute la implementación reciente de nuestro algoritmo. Finalmente, presentamos nuestras conclusiones en la Sección 8 y sugerimos direcciones para investigaciones futuras. CARACTERÍSTICAS DEL MERCADO Y GENERADOR DE INSTANCIAS Probamos los algoritmos en mercados simulados de intercambio de riñones, los cuales son generados por un proceso descrito en Saidman et al. [17]. Este proceso se basa en los extensos datos a nivel nacional mantenidos por la Red Unida para el Comparto de Órganos (UNOS), por lo que genera una distribución realista de instancias. Varios artículos han utilizado variaciones de este proceso para demostrar la efectividad de un intercambio nacional de riñones (extrapolando de pequeñas instancias o restringiendo la compensación a ciclos de 2) [6, 20, 14, 13, 15, 17]. En resumen, el proceso implica generar pacientes con un tipo de sangre, sexo y probabilidad de ser incompatible en el tipo de tejido con un donante elegido al azar. Estas probabilidades se basan en datos reales de la población del mundo real. A cada paciente se le asigna un posible donante con un tipo de sangre aleatorio y una relación con el paciente. Si el paciente y el posible donante son incompatibles, ambos son ingresados en el mercado. La información del tipo de sangre y del tipo de tejido se utiliza luego para decidir qué pacientes y donantes son compatibles. Una complicación, manejada por el generador, es que si la paciente es mujer y ha tenido un hijo con su potencial donante, entonces la probabilidad de que los dos sean incompatibles aumenta. (Esto se debe a que la madre desarrolla anticuerpos contra su pareja durante el embarazo). Finalmente, aunque nuestros algoritmos pueden manejar funciones de peso más generales, los pacientes tienen una utilidad de 1 para donantes compatibles, ya que su probabilidad de supervivencia no se ve afectada por la elección del donante [3]. Esto significa que el intercambio de peso máximo tiene la máxima cardinalidad. La Tabla 1 proporciona límites inferiores y superiores sobre el tamaño de un intercambio de máxima cardinalidad en el mercado de intercambio de riñones. Los límites inferiores se encontraron al despejar el mercado solo con ciclos de longitud 2, mientras que los límites superiores no tenían restricción en la longitud del ciclo. Para cada tamaño de mercado, los límites fueron calculados sobre 10 mercados generados aleatoriamente. Ten en cuenta que puede haber una gran cantidad de variabilidad en los mercados: en un mercado de 5000 pacientes, menos de 1000 pacientes estaban en el intercambio de cardinalidad máxima. Tamaño máximo de intercambio Longitud-2 ciclos solamente Ciclos arbitrarios Pacientes Media Máximo Media Máximo 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Tabla 1: Límites superiores e inferiores en el tamaño del intercambio. La Tabla 2 proporciona características adicionales del mercado de intercambio de riñones. Ten en cuenta que un mercado con 5000 pacientes puede tener más de 450 millones de ciclos de longitud 2 y 3. Longitud de los bordes 2 y 3 ciclos Pacientes Media Máx. Media Máx. 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Tabla 2: Características del mercado. 297 COMPLEJIDAD DEL PROBLEMA En esta sección, demostramos que (la versión de decisión del) problema de compensación de mercado con ciclos cortos es NP-completo. Teorema 1. Dado un grafo G = (V, E) y un entero L ≥ 3, el problema de decidir si G admite una cubierta de ciclos perfecta que contenga ciclos de longitud como máximo L es NP-completo. Prueba. Es claro que este problema está en NP. Para la NP-dificultad, reducimos desde 3D-Matching, que es el problema de, dado conjuntos disjuntos X, Y y Z de tamaño q, y un conjunto de triples T ⊆ X × Y × Z, decidir si existe un subconjunto disjunto M de T con tamaño q. Una idea directa es construir un grafo tripartito con conjuntos de vértices X ∪ Y ∪ Z y aristas dirigidas (xa, yb), (yb, zc) y (zc, xa) para cada triple ti = {xa, yb, zc} ∈ T. Sin embargo, no es demasiado difícil ver que esta codificación falla porque una cobertura de ciclo perfecta puede incluir un ciclo sin un triple correspondiente. En cambio, utilizamos la siguiente reducción. Dado una instancia de 3D-Matching, construye un vértice para cada elemento en X, Y y Z. Para cada tripleta, ti = {xa, yb, zc}, construya el dispositivo en la Figura 2, que es similar a uno en Garey y Johnson [5, pp 68-69]. Ten en cuenta que los dispositivos se intersecan solo en los vértices de X ∪ Y ∪ Z. Es claro que esta construcción puede realizarse en tiempo polinómico. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figura 2: Dispositivo de NP-completitud para la tripleta ti y la longitud máxima del ciclo L. Sea M un emparejamiento 3D perfecto. Mostraremos que la construcción admite una cobertura perfecta de ciclos mediante ciclos cortos. Si ti = {xa, yb, zc} ∈ M, añade desde el gadget de ti los tres ciclos de longitud L que contienen a xa, yb y zc respectivamente. También añade el ciclo ª xi a, yi b, zi c «. De lo contrario, si ti ∉ M, añade los tres ciclos de longitud L que contienen xi a, yi b y zi c respectivamente. Es claro que todos los vértices están cubiertos, ya que M particiona X × Y × Z. Por el contrario, supongamos que tenemos una cobertura perfecta mediante ciclos cortos. Ten en cuenta que la construcción solo tiene ciclos cortos de longitudes 3 y L, y ningún ciclo corto involucra vértices distintos de dos gadgets diferentes. Es fácil ver entonces que en una cubierta perfecta, cada gadget ti contribuye ciclos de acuerdo a los casos anteriores: ti ∈ M, o ti /∈ M. Por lo tanto, existe un Emparejamiento 3D perfecto en la instancia original. 4. ENFOQUES DE SOLUCIÓN BASADOS EN UNA FORMULACIÓN DE ARISTAS En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada arista. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos sin restricciones de longitud de ciclo. Dado un mercado G = (V, E), construya un grafo bipartito con un vértice para cada agente y un vértice para cada artículo. Agregar un borde ev con peso 0 entre cada agente v y su propio artículo. En este punto, la codificación es una coincidencia perfecta. Ahora, para cada arista e = (vi, vj) en el mercado original, añade una arista e con peso we entre el agente vi y el artículo de vj. Los emparejamientos perfectos en esta codificación corresponden exactamente con las cubiertas de ciclos, ya que cada vez que se toma un artículo de un agente, debe recibir el artículo de otro agente. Se deduce que el problema de despeje sin restricciones puede resolverse en tiempo polinómico encontrando un emparejamiento perfecto de peso máximo. La Figura 3 contiene la representación en forma de grafo bipartito del mercado de ejemplo de la Figura 1. Las aristas de peso 0 están codificadas con líneas discontinuas, mientras que las aristas de mercado están en negrita. Elementos Agentes v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figura 3: Codificación de emparejamiento perfecto del mercado en la Figura 1. Alternativamente, podemos resolver el problema codificándolo como un ILP con una variable para cada arista en el grafo de mercado original G. Este ILP, que se muestra a continuación, tiene la ventaja de que puede ser extendido de manera natural para tratar con restricciones de longitud de ciclo. Por lo tanto, para el resto de esta sección, este será el enfoque que seguiremos. Se busca un max e∈E tal que para todo vi ∈ V, se cumplan las restricciones de conservación eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 y la restricción de capacidad eout=(vi,vj ) eout ≤ 1. Si se permite que los ciclos tengan una longitud de como máximo L, es fácil ver que solo necesitamos hacer los siguientes cambios en el ILP. Para cada camino de longitud L (a lo largo del documento, no incluimos ciclos en la definición de camino) p = ep1, ep2, ..., epL, agregar una restricción ep1 + ep2 + ... + epL ≤ L − 1, que excluye al camino p de cualquier solución factible. Desafortunadamente, en un mercado con solo 1000 pacientes, el número de caminos de longitud 3 supera los 400 millones, por lo que ni siquiera podemos construir este ILP sin quedarnos sin memoria. Por lo tanto, utilizamos una búsqueda en árbol con un enfoque de formulación incremental. Específicamente, utilizamos CPLEX, aunque añadimos restricciones como planos de corte durante el proceso de búsqueda en el árbol. Comenzamos con solo un pequeño subconjunto de las restricciones en el ILP. Dado que este ILP es pequeño, CPLEX puede resolver su relajación LP. Luego verificamos si alguna de las restricciones faltantes es violada por la solución fraccional. Si es así, generamos un conjunto de estas restricciones, las añadimos al ILP y repetimos. Incluso una vez que se satisfacen todas las restricciones, puede que no haya una solución entera que coincida con el límite superior fraccional, y aunque la hubiera, el solucionador de PL podría no encontrarla. En estos casos, CPLEX ramifica en una variable (utilizamos la estrategia de ramificación predeterminada de CPLEX) y genera un nuevo nodo de búsqueda correspondiente a cada uno de los hijos. En cada nodo del árbol de búsqueda que se visita, se repite este proceso de resolver el LP y agregar restricciones. Claramente, este enfoque produce una solución óptima una vez que la búsqueda en el árbol finaliza. Todavía necesitamos explicar los detalles del generador de restricciones (es decir, seleccionar qué restricciones comenzar) y la generación de restricciones (es decir, seleccionar qué restricciones violadas incluir). Describimos brevemente estos en las dos subsecciones siguientes, respectivamente. 4.1 Sembrador de Restricciones El principal sembrador de restricciones que desarrollamos prohíbe cualquier camino de longitud L − 1 que no tenga un borde cerrando el ciclo desde su inicio hasta su final. Si bien es costoso computacionalmente encontrar estas restricciones, su adición enfoca la búsqueda lejos de los caminos que no pueden estar en la solución final. También intentamos sembrar el LP con una colección aleatoria de restricciones del ILP. 4.2 Generación de Restricciones Experimentamos con varios generadores de restricciones. En cada caso, dada una solución fraccional, construimos el subgrafo de aristas con valor positivo. Este gráfico es mucho más pequeño que el gráfico original, por lo que podemos realizar los cálculos siguientes de manera eficiente. En nuestro primer generador de restricciones, simplemente buscamos caminos de longitud L con una suma de valores mayor que L − 1. Para cualquier camino de este tipo, restringimos su suma para que sea como máximo L − 1. Ten en cuenta que si hay un ciclo c con longitud |c| > L, podría contener hasta |c| caminos que violan. En nuestro segundo generador de restricciones, solo agregamos una restricción para tales ciclos: la suma de aristas en el ciclo puede ser a lo sumo |c|(L − 1)/L. Este generador hizo que el algoritmo fuera más lento, por lo que optamos por ir en la dirección opuesta en el desarrollo de nuestro generador final. Agrega una restricción por cada camino p que viola, y además, agrega una restricción para cada camino con los mismos vértices interiores (sin contar los extremos) que p. Esto mejoró la velocidad general. 4.3 Rendimiento experimental Resultó que incluso con estas mejoras, el enfoque de formulación de aristas no puede despejar un intercambio de riñón con 100 vértices en el tiempo en que la formulación de ciclos (descrita más adelante en la Sección 5) puede despejar uno con 10,000 vértices. En otras palabras, los enfoques basados en generación de columnas resultaron ser drásticamente mejores que los enfoques basados en generación de restricciones. Por lo tanto, en el resto del documento nos enfocaremos en la formulación del ciclo y en los enfoques basados en la generación de columnas. 5. Enfoques de solución basados en una formulación cíclica. En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada ciclo. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos cuando los ciclos tienen longitud 2. Dado un mercado G = (V, E), construya un nuevo grafo en V con un peso wc en cada arista de ciclo c de longitud 2. Es fácil ver que los emparejamientos en este nuevo grafo corresponden a coberturas de ciclos por ciclos de longitud 2 en el grafo original del mercado. Por lo tanto, el problema de equilibrio de mercado con L = 2 se puede resolver en tiempo polinómico encontrando un emparejamiento de peso máximo. Figura 4: Codificación del emparejamiento de peso máximo del mercado en la Figura 1. Podemos generalizar este codificado para L arbitrario. Sea C(L) el conjunto de todos los ciclos de G con longitud a lo sumo L. Entonces el siguiente ILP encuentra la cobertura de ciclos de máximo peso por ciclos de C(L): max c∈C(L) wcc sujeto a c:vi∈c c ≤ 1 ∀vi ∈ V con c ∈ {0, 1} ∀c ∈ C(L) 5.1 Formulación de Arista vs Ciclo En esta sección, consideramos los méritos de la formulación de arista y la formulación de ciclo. La formulación del problema del borde se puede resolver en tiempo polinómico cuando no hay restricciones en el tamaño del ciclo. La formulación del ciclo se puede resolver en tiempo polinómico cuando el tamaño del ciclo es a lo sumo 2. Ahora consideramos el caso de ciclos cortos de longitud como máximo L, donde L ≥ 3. Nuestros algoritmos de búsqueda de árboles utilizan la relajación LP de estas formulaciones para proporcionar cotas superiores de la solución óptima. Estos límites ayudan a podar subárboles y guiar la búsqueda de las formas habituales. Teorema 2. La relajación LP de la formulación del ciclo domina débilmente la relajación LP de la formulación del borde. Prueba. Considera una solución óptima para la relajación LP de la formulación del ciclo. Mostramos cómo construir una solución equivalente en la formulación de bordes. Para cada arista en el grafo, establezca su valor como la suma de los valores de todos los ciclos de los cuales es miembro. También, define el valor de un vértice de la misma manera. Debido a las restricciones del ciclo, las restricciones de conservación y capacidad de la codificación de los bordes se cumplen claramente. Queda por demostrar que ninguna de las restricciones de ruta se viola. Sea p cualquier camino de longitud L en el grafo. Dado que p tiene L−1 vértices interiores (sin contar los extremos), la suma de estos vértices interiores es como máximo L−1. Ahora, para cualquier ciclo c de longitud como máximo L, el número de aristas que tiene en p, que denotamos como ec(p), es como máximo el número de vértices interiores que tiene en p, que denotamos como vc(p). Por lo tanto, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 La afirmación contraria de este teorema no es verdadera. Considera un grafo que es simplemente un ciclo con n aristas. Claramente, la relajación LP de la formulación del ciclo tiene un valor óptimo de 0, ya que no hay ciclos de tamaño menor o igual a L. Sin embargo, la formulación de aristas tiene una solución de tamaño n/2, con cada arista teniendo un valor de 1/2. Por lo tanto, la formulación del ciclo es más ajustada que la formulación del borde. Además, para un grafo con m aristas, la formulación de aristas requiere O(m3) restricciones, mientras que la formulación de ciclos solo requiere O(m2). 5.2 Generación de columnas para la tabla de PL. La Tabla 2 muestra cómo el número de ciclos de longitud a lo sumo 3 crece con el tamaño del mercado. Con una variable por ciclo en la formulación del ciclo, CPLEX ni siquiera puede liquidar mercados con 1,000 pacientes sin quedarse sin memoria (ver Figura 6). Para abordar este problema, utilizamos un enfoque de formulación incremental. El primer paso en la búsqueda de árbol guiada por LP es resolver la relajación LP. Dado que la formulación del ciclo no cabe en la memoria, esta etapa de LP fallaría inmediatamente sin un enfoque de formulación incremental. Sin embargo, motivados por la observación de que una solución de intercambio puede incluir solo una pequeña fracción de los ciclos, exploramos el enfoque de utilizar la generación de columnas (es decir, ciclos). La idea de la generación de columnas es comenzar con un LP restringido que contenga solo un pequeño número de columnas (variables, es decir, ciclos), y luego agregar columnas repetidamente hasta que una solución óptima para este LP parcialmente formulado sea una solución óptima para el LP original (también conocido como maestro). Explicamos esto más a fondo mediante un ejemplo. Considera el mercado en la Figura 1 con L = 2. La Figura 5 muestra el LP maestro correspondiente, P, y su dual, D. El primal P maximiza 2c1 + 2c2 + 2c3 sujeto a c1 ≤ 1 (v1), c1 + c2 ≤ 1 (v2), c2 + c3 ≤ 1 (v3), c3 ≤ 1 (v4) con c1, c2, c3 ≥ 0. El dual D minimiza v1 + v2 + v3 + v4 sujeto a v1 + v2 ≥ 2 (c1), v2 + v3 ≥ 2 (c2), v3 + v4 ≥ 2 (c3) con v1, v2, v3, v4 ≥ 0. Figura 5: Formulación del ciclo. Sea P la restricción de P que contiene solo las columnas c1 y c3. Sea D el dual de P, es decir, D es simplemente D sin la restricción c2. Dado que P y D son pequeños, podemos resolverlos para obtener OPT(P) = OPT(D) = 4, con cOPT(P) = c1 = c3 = 1 y vOPT(D) = v1 = v2 = v3 = v4 = 1. Si cOP T (P ) debe ser una solución factible de P, resulta (afortunadamente) que vOP T (D ) es factible para D, de modo que OPT(D ) ≥ OPT(D). Podemos verificar esto comprobando que vOP T (D) cumple con las restricciones de D que aún no están en Di, es decir, la restricción c2. Se deduce que OPT(P) = OPT(D) ≥ OPT(D) = OPT(P), por lo que vOPT(P) es demostrablemente una solución óptima para P, a pesar de que P contiene solo un subconjunto estricto de las columnas de P. Por supuesto, puede resultar (desafortunadamente) que vOPT(D) no sea factible para D. Esto puede ocurrir como se muestra arriba si vOPT(D) = v1 = 2, v2 = 0, v3 = 0, v4 = 2. Aunque todavía podemos ver que OPT(D) = OPT(D), en general no podemos demostrarlo porque D y P son demasiado grandes para resolver. En cambio, dado que se viola la restricción c2, agregamos la columna c2 a P, actualizamos D y repetimos. El problema de encontrar una restricción violada se llama problema de fijación de precios. Aquí, el precio de una columna (ciclo en nuestra configuración) es la diferencia entre su peso y la suma de los valores duales de los vértices del ciclo. Si alguna columna de P tiene un precio positivo, su restricción correspondiente está violada y aún no hemos demostrado la optimalidad. En este caso, debemos seguir generando columnas para agregar a P. Problema de fijación de precios 5.2.1 Para instancias más pequeñas, podemos mantener una colección explícita de todos los ciclos factibles. Esto hace que el problema de fijación de precios sea fácil y eficiente de resolver: simplemente recorremos la colección de ciclos y buscamos ciclos con precio positivo. Incluso podemos encontrar ciclos con el precio más positivo, que son los más propensos a mejorar el valor objetivo de LP restringido [1]. Sin embargo, este enfoque no es escalable. Un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos de longitud de máximo 3 (ver Tabla 2). Esto es demasiados ciclos para mantener en la memoria. Por lo tanto, para instancias más grandes, debemos generar ciclos factibles mientras buscamos uno con un precio positivo. Realizamos esto utilizando un algoritmo de búsqueda en profundidad en el grafo del mercado (ver Figura 1). Para hacer esta búsqueda más rápida, exploramos los vértices en orden de valores no decrecientes, ya que es más probable que estos vértices pertenezcan a ciclos con peso positivo. También utilizamos varias reglas de poda para determinar si la ruta de búsqueda actual puede llevar a un ciclo de peso positivo. Por ejemplo, en un vértice dado en la búsqueda, podemos podar basándonos en el hecho de que cada vértice que visitemos a partir de este punto tendrá un valor al menos tan grande como el vértice actual. Incluso con estas reglas de poda, la generación de columnas es un cuello de botella. Por lo tanto, también implementamos las siguientes optimizaciones. Cuando la búsqueda exhaustiva demuestra que un vértice no pertenece a ningún ciclo de precios positivos, marcamos el vértice y no lo utilizamos como raíz de una búsqueda en profundidad hasta que su valor dual disminuya. De esta manera, evitamos repetir innecesariamente nuestros esfuerzos computacionales de una iteración previa de generación de columnas. Finalmente, a veces puede ser beneficioso para la generación de columnas incluir varias columnas de precio positivo en una iteración, ya que puede ser más rápido generar una segunda columna una vez que se encuentra la primera. Sin embargo, evitamos esto por la siguiente razón. Si intentamos encontrar más columnas de precio positivo de las que se pueden encontrar, o si las columnas están muy separadas en el espacio de búsqueda, terminamos teniendo que generar y verificar una gran parte de la colección de ciclos factibles. En nuestros experimentos, hemos observado que esto ocurre en mercados con cientos de millones de ciclos, lo que resulta en costos de computación prohibitivamente caros. 5.2.2 Sembrado de Columnas Incluso si hay solo una pequeña brecha con la relajación principal del LP, la generación de columnas requiere muchas iteraciones para mejorar el valor objetivo del LP restringido. Cada una de estas 300 iteraciones es costosa, ya que debemos resolver el problema de fijación de precios y volver a resolver el LP restringido. Por lo tanto, aunque podríamos empezar sin columnas en el LP restringido, es mucho más rápido sembrar el LP con suficientes columnas para que el valor objetivo óptimo no esté muy lejos del LP principal. Por supuesto, no podemos incluir tantas columnas que nos quedemos sin memoria. Experimentamos con varios sembradores de columnas. En una clase de sembrador, utilizamos una heurística para encontrar un intercambio, y luego agregamos los ciclos de ese intercambio al LP restringido inicial. Implementamos dos heurísticas. El primero es un algoritmo voraz: para cada vértice en un orden aleatorio, si está sin cubrir, intentamos incluir un ciclo que lo contenga a él y a otros vértices sin cubrir. El otro heurístico utiliza un código especializado de emparejamiento de peso máximo [16] para encontrar una cobertura óptima mediante ciclos de longitud 2. Estas heurísticas funcionan extremadamente bien, especialmente teniendo en cuenta el hecho de que solo agregan un pequeño número de columnas. Por ejemplo, la Tabla 1 muestra que una cobertura óptima por ciclos de longitud 2 tiene casi el mismo peso que el intercambio con tamaño de ciclo no restringido. Sin embargo, tenemos suficiente memoria para incluir cientos de miles de columnas adicionales y así acercarnos aún más al límite superior. Nuestro mejor sembrador de columnas construye una colección aleatoria de ciclos factibles. Dado que un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos factibles, lleva demasiado tiempo generar y recorrer todos los ciclos factibles, por lo que no incluimos una colección aleatoria uniforme. En cambio, realizamos un recorrido aleatorio en el grafo del mercado (ver, por ejemplo, Figura 1), en el cual, después de cada paso del recorrido, probamos si hay un borde de regreso a nuestro camino que forme un ciclo factible. Si encontramos un ciclo, este se incluye en el LP restringido y comenzamos una nueva caminata desde un vértice aleatorio. En nuestros experimentos (ver Sección 6), utilizamos este algoritmo para sembrar el LP con 400,000 ciclos. Este último enfoque supera a los sembradores heurísticos descritos anteriormente. Sin embargo, en nuestro algoritmo, utilizamos una combinación que toma la unión de todas las columnas de los tres sembradores. En la Figura 6, comparamos el rendimiento del sembrador combinado con el sembrador combinado sin el sembrador de recolección aleatoria. No trazamos el rendimiento del algoritmo sin ningún sembrador en absoluto, porque puede llevar horas despejar mercados que de otra manera podríamos despejar en unos pocos minutos. 5.2.3 Demostrando la optimalidad. Recordemos que nuestro objetivo es encontrar una solución óptima para la relajación principal del LP. Usando la generación de columnas, podemos demostrar que una solución primal restringida es óptima una vez que todas las columnas tienen precios no positivos. Desafortunadamente, nuestro problema de compensación tiene el llamado efecto de disminución gradual [1, Sección 6.3], en el cual, aunque el primal restringido es óptimo a posteriori, se requiere un gran número de iteraciones adicionales para demostrar la optimalidad (es decir, eliminar todas las columnas de precio positivo). No hay una buena solución general para el efecto de disminución. Sin embargo, para mitigar este efecto, aprovechamos la siguiente observación específica del problema. Recuerde de la Sección 1.1 que, casi siempre, un intercambio de peso máximo con ciclos de longitud a lo sumo 3 tiene el mismo peso que un intercambio de peso máximo sin restricciones. (Sin embargo, esto no significa que el solucionador para el caso sin restricciones encontrará una solución con ciclos cortos). Además, el problema de despeje no restringido se puede resolver en tiempo polinómico (ver Sección 4). Por lo tanto, podemos calcular eficientemente un límite superior en la relajación principal del LP, y, cada vez que el primal restringido alcanza este límite superior, ¡hemos demostrado la optimalidad sin necesidad de eliminar todas las columnas de precio positivo! Para que esto mejore el tiempo de ejecución del algoritmo en general, necesitamos poder despejar el mercado sin restricciones en menos tiempo del que le lleva a la generación de columnas eliminar todos los ciclos de precios positivos. Aunque el primer problema es soluble en tiempo polinómico, esto no es trivial para instancias grandes. Por ejemplo, para un mercado con 10,000 pacientes y 25 millones de conexiones, el código especializado de emparejamiento de peso máximo [16] era demasiado lento, y CPLEX se quedó sin memoria en la codificación de formulación de bordes de la Sección 4. Para hacer funcionar esta idea, utilizamos generación de columnas para resolver la formulación de bordes. Esto implica comenzar con un pequeño subconjunto aleatorio de los bordes, y luego agregar bordes con precio positivo uno por uno hasta que no quede ninguno. Realizamos esta generación de columnas secundarias no en el grafo de mercado original G, sino en el grafo bipartito de emparejamiento perfecto de la Figura 3. Hacemos esto para que solo necesitemos resolver el LP, no el ILP, ya que la brecha de integralidad en el grafo bipartito de emparejamiento perfecto es 1, es decir, siempre existe una solución integral que alcanza el límite superior fraccional. El aumento de velocidad resultante en el algoritmo general es dramático, como se puede ver en la Figura 6. 5.2.4 Gestión de Columnas Si el valor óptimo del LP restringido inicial P está lejos del LP maestro P, entonces se generan un gran número de columnas antes de que se cierre la brecha. Esto conduce a problemas de memoria en mercados con tan solo 4,000 pacientes. Además, incluso antes de que la memoria se convierta en un problema, las iteraciones de generación de columnas se vuelven lentas debido a la sobrecarga adicional de resolver un LP más grande. Para abordar estos problemas, implementamos un esquema de gestión de columnas para limitar el tamaño del LP restringido. Siempre que agregamos columnas al LP, verificamos si contiene más de un número umbral de columnas. Si este es el caso, eliminamos selectivamente columnas hasta que esté nuevamente por debajo del umbral2. Como discutimos anteriormente, solo una pequeña fracción de todos los ciclos terminará en la solución final. Es poco probable que eliminemos dicho ciclo, y aun si lo hacemos, siempre se puede generar de nuevo. Por supuesto, no debemos ser demasiado agresivos con el umbral, ya que hacerlo podría contrarrestar las ganancias de rendimiento por iteración al aumentar significativamente el número de iteraciones necesarias para obtener un conjunto de columnas adecuado en el LP al mismo tiempo. Hay algunas columnas que nunca eliminamos, por ejemplo aquellas en las que hemos realizado ramificaciones (ver Sección 5.3.2), o aquellas con un valor de LP distinto de cero. Entre el resto, eliminamos aquellos con el precio más bajo, ya que corresponden a las restricciones duales que están más satisfechas. Este esquema de gestión de columnas funciona bien y nos ha permitido despejar mercados con 10,000 pacientes, como se ve en la Figura 6. 5.3 Búsqueda de Ramificación y Precio para el ILP Dado un problema grande de despeje de mercado, podemos resolver con éxito su relajación LP hasta la optimalidad utilizando las mejoras de generación de columnas descritas anteriormente. Sin embargo, las soluciones que encontramos suelen ser fraccionarias. Por lo tanto, en el paso 2 siguiente, basándonos en el tamaño de la memoria, establecemos el umbral en 400,000. El paso 301 implica realizar una búsqueda de árbol de ramificación y precio [1] para encontrar una solución integral óptima. Breve, esta es la idea de ramificar y fijar precios. Siempre que establecemos una variable fraccional en 0 o 1 (rama), tanto el LP maestro como la restricción con la que estamos trabajando se modifican (se restringen). Por defecto, entonces, necesitamos realizar la generación de columnas (es decir, el esfuerzo de fijar precios) en cada nodo del árbol de búsqueda para demostrar que la restricción restringida es óptima para el LP maestro restringido. (Sin embargo, como se discute en la Sección 5.2.3, calculamos el límite superior integral para el nodo raíz basado en relajar completamente la restricción de longitud del ciclo, y cada vez que algún LP de los nodos en el árbol alcance ese valor, no necesitamos seguir fijando precios de columnas en ese nodo). Para el problema de despeje con ciclos de longitud a lo sumo 3, hemos encontrado que rara vez hay una brecha entre las soluciones integrales y fraccionarias óptimas. Esto significa que podemos evitar en gran medida el costoso paso de fijar precios por nodo: cuando el LP restringido restringido tiene el mismo valor óptimo que su padre en la búsqueda del árbol, podemos demostrar la optimalidad del LP, como se muestra en la Sección 5.2.3, sin tener que incluir columnas adicionales en el LP restringido. Aunque CPLEX puede resolver ILPs, no admite la técnica de branch-and-price (por ejemplo, debido a posibles complicaciones específicas del problema que involucran la interacción entre la regla de ramificación y el problema de fijación de precios). Por lo tanto, implementamos nuestro propio algoritmo de ramificación y precio, el cual explora el árbol de búsqueda en orden de profundidad primero. También experimentamos con el orden de selección de nodos A* [7, 2]. Sin embargo, esta estrategia de búsqueda requiere significativamente más memoria, la cual encontramos que se empleaba mejor para acelerar la fase de generación de columnas (ver Sección 5.2.2). Los componentes principales restantes del algoritmo se describen en las dos siguientes subsecciones. 5.3.1 Heurísticas Primal Antes de ramificar en una variable fraccional, utilizamos heurísticas primales para construir una solución integral factible. Estas soluciones son límites inferiores de las soluciones integrales óptimas finales. Por lo tanto, cuando una solución fraccional restringida no es mejor que la mejor solución integral encontrada hasta el momento, podamos el subárbol actual. Una heurística primal es efectiva si es eficiente y construye límites inferiores ajustados. Experimentamos con dos heurísticas primarias. El primero es un algoritmo de redondeo simple [8]: incluir todos los ciclos con un valor fraccional de al menos 0.5, y luego, asegurando la viabilidad, agregar de forma codiciosa los ciclos restantes. Si bien esta heurística es eficiente, encontramos que los límites inferiores que construye rara vez permiten realizar un gran número de podas. También intentamos usar CPLEX como una heurística primal. En cualquier nodo dado del árbol de búsqueda, podemos convertir la relajación LP restringida de nuevo a un ILP reintroduciendo las restricciones de integralidad. CPLEX tiene varias heurísticas primales integradas, las cuales podemos aplicar a este ILP. Además, podemos utilizar la búsqueda de árbol propia de CPLEX para encontrar una solución integral óptima. En general, esta búsqueda de árbol es mucho más rápida que la nuestra. Si CPLEX encuentra una solución integral que coincida con el límite superior fraccional en el nodo raíz, hemos terminado. De lo contrario, no existe tal solución integral, o aún no tenemos la combinación correcta de ciclos en el LP restringido. Para los mercados de intercambio de riñones, generalmente es la segunda razón la que se aplica (ver Secciones 5.2.2 y 5.2.4). Por lo tanto, en algún momento de la búsqueda en el árbol, una vez que se han generado más columnas como resultado de la ramificación, la heurística de CPLEX encontrará una solución integral óptima. Aunque la búsqueda de árbol de CPLEX es más rápida que la nuestra, no es tan rápida como para poder aplicarla a cada nodo en nuestro árbol de búsqueda. Por lo tanto, realizamos las siguientes optimizaciones. En primer lugar, agregamos una restricción que requiere que el valor objetivo del ILP sea tan grande como el objetivo fraccional. Si este no es el caso, queremos abortar y proceder a generar más columnas con nuestra búsqueda de ramificación y precio. En segundo lugar, limitamos el número de nodos en el árbol de búsqueda de CPLEX. Esto se debe a que hemos observado que no existe una solución integral, CPLEX puede tardar mucho tiempo en demostrarlo. Finalmente, solo aplicamos la heurística CPLEX en un nodo si tiene un conjunto de ciclos suficientemente diferente al de su padre. Utilizar CPLEX como heurística primal tiene un gran impacto porque reduce el tamaño del árbol de búsqueda, evitando así todo el trabajo de fijación computacionalmente costoso en los nodos que no se generan en este árbol más pequeño. 5.3.2 Ramificador de Ciclo. Experimentamos con dos estrategias de ramificación, ambas seleccionan una variable por nodo. La primera estrategia, ramificación por certeza, selecciona aleatoriamente una variable de aquellas cuyo valor LP está más cercano a 1. La segunda estrategia, ramificación por incertidumbre, selecciona aleatoriamente una variable cuyo valor LP esté más cercano a 0.5. En ambos casos, se generan dos hijos del nodo correspondientes a dos subárboles, uno en el que la variable se establece en 0 y otro en el que se establece en 1. Nuestro recorrido en profundidad siempre elige explorar primero el subárbol en el que el valor de la variable está más cerca de su valor fraccionario. Para nuestro problema de despeje con ciclos de longitud como máximo 3, encontramos que el ramificado por incertidumbre es superior, rara vez requiriendo retroceso alguno. 6. RESULTADOS EXPERIMENTALES Todos nuestros experimentos se realizaron en Linux (Red Hat 9.0), utilizando una PC Dell con un procesador Intel Pentium 4 de 3GHz y 1GB de RAM. Dondequiera que usamos CPLEX (por ejemplo, al resolver el LP y como heurística primal, como se discutió en las secciones anteriores), usamos CPLEX 10.010. La Figura 6 muestra el rendimiento en tiempo de ejecución de cuatro algoritmos de limpieza. Para cada tamaño de mercado listado, generamos aleatoriamente 10 mercados e intentamos liquidarlos utilizando cada uno de los algoritmos. El primer algoritmo es CPLEX en la formulación del ciclo completo. Este algoritmo no logra despejar ningún mercado con 1000 pacientes o más. Además, su tiempo de ejecución en mercados más pequeños que este es significativamente peor que el de los otros algoritmos. Los otros algoritmos son variaciones del enfoque de generación de columnas incremental descrito en la Sección 5. Comenzamos con la siguiente configuración (todas las optimizaciones están activadas): Categoría Configuración Columna Sembrador Combinación de heurísticas de intercambio voraz y emparejamiento de peso máximo, y sembrador de caminata aleatoria (400,000 ciclos). Generación de columnas una columna a la vez. Gestión de columnas activada, con límite de 400,000 columnas. Comprobador de Optimalidad Encendido. Redondeo heurístico primal y búsqueda en el árbol de CPLEX. Regla de ramificación de incertidumbre. La combinación de estas optimizaciones nos permite liquidar fácilmente mercados con más de 10,000 pacientes. En cada uno de los dos próximos algoritmos, desactivamos una de estas optimizaciones para resaltar su efectividad. Primero, restringimos el sembrador para que solo comience con 10,000 ciclos. Esta configuración es más rápida para instancias más pequeñas, ya que las relajaciones de LP son más pequeñas y se resuelven más rápido. Sin embargo, al llegar a 5000 vértices, este efecto comienza a ser contrarrestado por la generación adicional de columnas que se debe realizar. Para una instancia más grande, este sembrador restringido es claramente peor. Finalmente, restauramos el sembrador a su configuración optimizada, pero esta vez, eliminamos el verificador de optimalidad descrito en la Sección 5.2.3. Como en muchos problemas de generación de columnas, el efecto de disminución es significativo. Aprovechando las propiedades de nuestro problema, logramos despejar un mercado con 10,000 pacientes en aproximadamente el mismo tiempo que habría tomado despejar un mercado de 6000 pacientes. 7. IMPLEMENTANDO LA TECNOLOGÍA Nuestro algoritmo e implementación reemplazaron a CPLEX como algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones, en diciembre de 2006. Realizamos una ejecución de prueba cada dos semanas, y los primeros trasplantes basados en nuestras soluciones ya han sido realizados. Aunque actualmente existen al menos cuatro intercambios de riñones en los Estados Unidos por razones políticas o interpersonales, todos comprenden que un intercambio nacional unificado y sin fragmentar salvaría más vidas. Estamos en conversaciones con intercambios de riñón adicionales que están interesados en adoptar nuestra tecnología. De esta manera, nuestra tecnología (y los procesos que la rodean) esperamos que sirvan como un sustrato que eventualmente ayudará a unificar los intercambios. Al menos la escalabilidad computacional ya no es un obstáculo. CONCLUSIÓN E INVESTIGACIONES FUTURAS En este trabajo hemos desarrollado los algoritmos exactos más escalables para intercambios de trueque hasta la fecha, con un enfoque especial en el próximo mercado nacional de intercambio de riñones en el que los pacientes con enfermedad renal serán emparejados con donantes compatibles intercambiando a sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a la enfermedad renal. Nuestro trabajo presenta el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Resuelve de manera óptima el problema de compensación de intercambio de riñones con 10,000 pares donante-receptor. Por lo tanto, no es necesario recurrir a soluciones aproximadas. La mejor tecnología previa (CPLEX básico) no puede manejar instancias de más de aproximadamente 900 pares de donantes-receptores porque se queda sin memoria. La clave de nuestra mejora es la formulación incremental de problemas. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas que mejoran sustancialmente tanto el tiempo de ejecución como el uso de memoria. Algunas de las técnicas utilizan observaciones específicas del dominio, mientras que otras son independientes del dominio. Concluimos que la generación de columnas escala de manera significativamente mejor que la generación de restricciones. Para la generación de columnas en el LP, nuestras mejoras incluyen técnicas de fijación de precios, técnicas de siembra de columnas, técnicas para demostrar la optimalidad sin tener que traer todas las columnas con precio positivo (y utilizando otro proceso de generación de columnas en una formulación diferente para hacerlo), y técnicas de eliminación de columnas. Para la búsqueda de ramificación y precio en el programa entero que rodea al LP, nuestras mejoras incluyen heurísticas primales y también comparamos estrategias de ramificación. Sin duda, se podrían utilizar ajustes adicionales de parámetros y quizás técnicas adicionales de mejora de velocidad para hacer que el algoritmo sea aún más rápido. Nuestro algoritmo también admite varias generalizaciones, según lo deseado por los intercambios reales de riñones. Estos incluyen múltiples donantes alternativos por paciente, bordes ponderados en el grafo del mercado (para codificar diferencias en años de vida esperados añadidos basados en grados de compatibilidad, edad y peso del paciente, etc., así como la probabilidad de incompatibilidad de último minuto), cadenas desencadenadas por ángeles (cadenas de trasplantes desencadenadas por donantes altruistas que no tienen pacientes asociados con ellos, cada cadena termina con un riñón sobrante), y problemas adicionales (como diferentes puntajes para salvar a diferentes donantes altruistas o riñones sobrantes para futuras ejecuciones de emparejamiento basadas en tipo de sangre, tipo de tejido y probabilidad de que el órgano no desaparezca del mercado porque el donante tenga dudas). Debido a que utilizamos una metodología de PLI, también podemos soportar una variedad de restricciones laterales, las cuales a menudo desempeñan un papel importante en los mercados en la práctica [19]. También podemos respaldar la asignación forzosa de una parte, por ejemplo, este adolescente gravemente enfermo debe recibir un riñón si es posible. Nuestro trabajo ha tratado el intercambio de riñones como un problema por lotes con información completa (al menos a corto plazo, es probable que los intercambios de riñones sigan funcionando en modo por lotes de vez en cuando). Dos direcciones importantes para trabajos futuros son abordar explícitamente tanto los aspectos en línea como los de información limitada del problema. El aspecto en línea es que los beneficiarios y donantes irán llegando al sistema con el tiempo, y puede ser mejor no llevar a cabo el intercambio óptimo de forma miope ahora, sino reservar parte del mercado actual para futuras coincidencias. De hecho, se ha realizado cierto trabajo al respecto en ciertos entornos restringidos [22, 24]. El aspecto de información limitada es que incluso en modo por lotes, el grafo proporcionado como entrada no es completamente correcto: varios pares donante-receptor que se creían compatibles resultan ser incompatibles cuando se realizan pruebas de último minuto más costosas. Por lo tanto, sería deseable realizar una optimización teniendo esto en cuenta, como producir un subgrafo robusto de bajo grado para ser probado antes de que se genere la coincidencia final, o producir un plan de contingencia en caso de fallo. Actualmente estamos explorando varias preguntas en esta línea, pero ciertamente hay mucho más por hacer. Agradecimientos Agradecemos a los economistas Al Roth y Utku Unver, así como al cirujano de <br>trasplante</br>s de riñón Michael Rees, por alertarnos sobre el hecho de que la tecnología previa era insuficiente para el problema de compensación a escala nacional, proporcionar conjuntos de datos iniciales y discutir los detalles del proceso de intercambio de riñones. También agradecemos a Don Sheehy por habernos hecho notar la idea del intercambio de zapatos. Este trabajo fue apoyado en parte por la Fundación Nacional de Ciencias bajo los subsidios IIS-0427858 y CCF-0514922. REFERENCIAS [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh y P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Tiempo de limpieza (segundos) Número de pacientes Nuestro algoritmo Nuestro algoritmo con sembrador de columnas restringido Nuestro algoritmo sin demostrador de optimalidad Formulación de ciclo CPLEX Figura 6: Resultados experimentales: tiempo de ejecución promedio con barras de desviación estándar. Rama y precio: Generación de columnas para resolver programas enteros enormes. Investigación de Operaciones, 46:316-329, mayo-junio de 1998. [2] R. Dechter y J. Pearl. Estrategias generalizadas de búsqueda de mejor primero y la optimalidad de A*. Revista de la ACM, 32(3):505-536, 1985. [3] F. L. Delmonico. Intercambio de riñones - avances en el trasplante de donante vivo. Revista de Medicina de Nueva Inglaterra, 350:1812-1814, 2004. [4] J. Edmonds. Camino, árboles y flores. Revista Canadiense de Matemáticas, 17:449-467, 1965. [5] M. R. Garey y D. S. Johnson. Computadoras e Intractabilidad; Una Guía de la Teoría de NP-Completitud. 1990. [6] S. E. Gentry, D. L. Segev y R. A. Montgomery. Una comparación de las poblaciones atendidas por donación emparejada de riñón y donación emparejada de lista. Revista Americana de Trasplantes, 5(8):1914-1921, agosto de 2005. [7] P. Hart, N. Nilsson y B. Raphael. Una base formal para la determinación heurística de caminos de costo mínimo. IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman y M. Padberg. Resolviendo problemas de programación de tripulaciones aéreas mediante ramificación y corte. Ciencia de la Gestión, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] Intercambio Nacional de Zapatos Impares. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Léelo, cámbialo. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez y M. U. Unver. Intercambio de riñones. Revista Trimestral de Economía, 119(2):457-488, mayo de 2004. [14] A. E. Roth, T. Sonmez y M. U. Unver. Un centro de intercambio de riñones en Nueva Inglaterra. Revista Económica Americana, 95(2):376-380, mayo de 2005. [15] A. E. Roth, T. Sonmez y M. U. Unver. Intercambio eficiente de riñones: Coincidencia de deseos en un mercado con preferencias basadas en la compatibilidad. American Economic Review, próximo. [16] E. Rothberg. Algoritmo de emparejamiento de peso máximo de Gabow n3: una implementación. El Primer Desafío de Implementación DIMACS, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver y F. L. Delmonico. Aumentando la oportunidad de donación de riñón en vida mediante el emparejamiento para intercambios de dos y tres vías. Trasplante, 81(5):773-782, 2006. [18] T. Sandholm. Algoritmos óptimos de determinación de ganadores. En Subastas Combinatorias, Cramton, Shoham y Steinberg, eds. MIT Press, 2006. [19] T. Sandholm y S. Suri. Restricciones laterales y atributos no relacionados con el precio en los mercados. En el taller IJCAI-2001 sobre Razonamiento de Restricciones Distribuidas, páginas 55-61, Seattle, WA, 2001. Para aparecer en Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb y R. A. Montgomery. Donación emparejada de riñón y optimización del uso de órganos de donantes vivos. Revista de la Asociación Médica Estadounidense, 293(15):1883-1890, abril de 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver. Intercambio dinámico de riñones. Documento de trabajo. [23] Sistema de Datos Renales de los Estados Unidos (USRDS). http://www.usrds.org/. [24] S. A. Zenios. Control óptimo de un programa de intercambio de riñones emparejados. Ciencias de la Gestión, 48(3):328-342, marzo de 2002. 304 ",
            "candidates": [],
            "error": [
                [
                    "trasplante",
                    "trasplantes",
                    "trasplantes",
                    "trasplante",
                    "trasplante"
                ]
            ]
        },
        "market characteristic": {
            "translated_key": "característica del mercado",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national kidney exchange.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that column generation scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
                "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "Kidney failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a kidney transplant.",
                "Kidney transplants are by far the most common transplant.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
                "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of barter exchanges.",
                "In a barter-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe exchange in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
                "We can encode a barter exchange market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An exchange is a collection of disjoint cycles.",
                "The weight of an exchange is the sum of its cycle weights.",
                "A social welfare maximizing exchange is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market.",
                "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
                "For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general barter exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight exchange has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
                "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
                "Table 2 gives additional characteristics of the kidney-exchange market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect matching.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation.",
                "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
                "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the cycle formulation.",
                "We show how to construct an equivalent solution in the edge formulation.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the cycle formulation is tighter than the edge formulation.",
                "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, column generation is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
                "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
                "To make this idea work then, we used column generation to solve the edge formulation.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of branch-and-price.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full cycle formulation.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental column generation approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
                "Column Generation One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many column generation problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
                "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
                "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and column generation.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that column generation scales dramatically better than constraint generation.",
                "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
                "Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
                "Branch-and-price: Column generation for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by kidney paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Kidney exchange.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A kidney exchange clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight matching algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live kidney donation by matching for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "Kidney paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic kidney exchange.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-kidney exchange program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "instance generator": {
            "translated_key": "generador de instancias",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national kidney exchange.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that column generation scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
                "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "Kidney failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a kidney transplant.",
                "Kidney transplants are by far the most common transplant.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
                "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of barter exchanges.",
                "In a barter-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe exchange in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
                "We can encode a barter exchange market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An exchange is a collection of disjoint cycles.",
                "The weight of an exchange is the sum of its cycle weights.",
                "A social welfare maximizing exchange is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market.",
                "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
                "For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general barter exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard <br>instance generator</br>, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND <br>instance generator</br> We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight exchange has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
                "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
                "Table 2 gives additional characteristics of the kidney-exchange market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect matching.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation.",
                "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
                "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the cycle formulation.",
                "We show how to construct an equivalent solution in the edge formulation.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the cycle formulation is tighter than the edge formulation.",
                "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, column generation is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
                "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
                "To make this idea work then, we used column generation to solve the edge formulation.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of branch-and-price.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full cycle formulation.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental column generation approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
                "Column Generation One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many column generation problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
                "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
                "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and column generation.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that column generation scales dramatically better than constraint generation.",
                "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
                "Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
                "Branch-and-price: Column generation for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by kidney paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Kidney exchange.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A kidney exchange clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight matching algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live kidney donation by matching for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "Kidney paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic kidney exchange.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-kidney exchange program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [
                "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard <br>instance generator</br>, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "MARKET CHARACTERISTICS AND <br>instance generator</br> We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17]."
            ],
            "translated_annotated_samples": [
                "Por el contrario, las formulaciones naturales del problema de intercambio de riñones (con L = 3) ocupan al menos espacio cúbico en el número de pacientes para incluso modelar, y por lo tanto la memoria se convierte en un cuello de botella mucho antes que el tiempo al utilizar la búsqueda de árbol estándar, como branch-and-cut en CPLEX, para abordar el problema. (En una computadora de 1GB y un <br>generador de instancias</br> estándar realista, discutido más adelante, CPLEX 10.010 se queda sin memoria en cinco de las diez instancias de 900 pacientes y en las diez de las diez instancias de 1,000 pacientes que generamos).",
                "CARACTERÍSTICAS DEL MERCADO Y GENERADOR DE INSTANCIAS Probamos los algoritmos en mercados simulados de intercambio de riñones, los cuales son generados por un proceso descrito en Saidman et al. [17]."
            ],
            "translated_text": "Algoritmos de compensación para mercados de intercambio de trueque: Facilitando los intercambios de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales. El problema de compensación implica encontrar un intercambio que maximice el bienestar social cuando la longitud máxima de un ciclo está fija. Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente. Además, en los intercambios de trueque en general, más agentes se ven afectados si uno abandona un ciclo más largo. Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro. Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones. Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. La clave es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. Concluimos que la generación de columnas escala considerablemente mejor que la generación de restricciones. Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de riñón. Nuestro algoritmo reemplazó a CPLEX como el algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones. Las carreras de fósforos se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas]: [General] Términos Generales Algoritmos, Economía 1. INTRODUCCIÓN El papel de los riñones es filtrar los desechos de la sangre. La insuficiencia renal resulta en la acumulación de estos desechos, lo cual conduce a la muerte en meses. Una opción de tratamiento es la diálisis, en la que el paciente va a un hospital para que su sangre sea filtrada por una máquina externa. Se requieren varias visitas por semana, y cada una lleva varias horas. La calidad de vida en diálisis puede ser extremadamente baja, de hecho, muchos pacientes optan por retirarse de la diálisis, lo que conduce a una muerte natural. Solo el 12% de los pacientes en diálisis sobreviven 10 años [23]. En cambio, el tratamiento preferido es un trasplante de riñón. Los trasplantes de riñón son, con mucho, los trasplantes más comunes. Desafortunadamente, la demanda de riñones supera con creces la oferta. En los Estados Unidos en 2005, 4,052 personas murieron esperando un trasplante de riñón que les salvara la vida. Durante este tiempo, casi 30,000 personas fueron añadidas a la lista nacional de espera, mientras que solo 9,913 personas salieron de la lista después de recibir un riñón de donante fallecido. La lista de espera actualmente tiene más de 70,000 personas, y el tiempo de espera mediano varía de 2 a 5 años, dependiendo del tipo de sangre. Para muchos pacientes con enfermedad renal, la mejor opción es encontrar un donante vivo, es decir, una persona sana dispuesta a donar uno de sus dos riñones. Aunque existen mercados para comprar y vender riñones de donantes vivos, la comercialización de órganos humanos es casi universalmente considerada como antiética, y la práctica suele ser explícitamente ilegal, como en los Estados Unidos. Sin embargo, en la mayoría de los países, la donación en vida es legal, siempre y cuando se realice como un regalo sin compensación financiera. En 2005, hubo 6,563 donaciones en vida en los Estados Unidos. El número de donaciones en vida habría sido mucho mayor si no fuera por el hecho de que, con frecuencia, un posible donante y su receptor previsto son incompatibles en tipo de sangre o tipo de tejido. En el pasado, el donante incompatible fue enviado a casa, dejando al paciente a la espera de un riñón de un donante fallecido. Sin embargo, ahora hay algunos intercambios renales regionales en los Estados Unidos, en los que los pacientes pueden intercambiar sus donantes incompatibles entre sí, para así obtener cada uno un donante compatible. Estos mercados son ejemplos de intercambios de trueque. En un mercado de intercambio por trueque, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Los intercambios de trueque son ubicuos: ejemplos incluyen Peerflix (DVDs) [11], Read It Swap It (libros) [12], e Intervac (casas de vacaciones) [9]. Durante muchos años, incluso ha habido un gran intercambio de zapatos en los Estados Unidos [10]. Las personas con pies de diferentes tamaños usan esto para evitar tener que comprar dos pares de zapatos. Los amputados de pierna tienen un intercambio separado para compartir el costo de comprar un par de zapatos. Podemos codificar un mercado de intercambio de trueque como un grafo dirigido G = (V, E) de la siguiente manera. Construye un vértice para cada agente. Agregar un borde ponderado e desde un agente vi hacia otro vj, si vi desea el artículo de vj. El peso que representamos de e es la utilidad para vi de obtener el artículo vjs. Un ciclo c en este grafo representa un intercambio posible, donde cada agente en el ciclo obtiene el artículo del siguiente agente. El peso wc de un ciclo c es la suma de los pesos de sus aristas. Un intercambio es una colección de ciclos disjuntos. El peso de un intercambio es la suma de los pesos de sus ciclos. Un intercambio que maximiza el bienestar social es aquel con un peso máximo. La Figura 1 ilustra un mercado de ejemplo con 5 agentes, {v1, v2, . . . , v5}, en el que todos los bordes tienen peso 1. El mercado tiene 4 ciclos, c1 = v1, v2, c2 = v2, v3, c3 = v3, v4 y c4 = v1, v2, v3, v4, v5, y dos intercambios maximales (de inclusión), a saber, M1 = {c4} y M2 = {c1, c3}. El intercambio M1 tiene tanto el peso máximo como la cardinalidad máxima (es decir, incluye la mayor cantidad de aristas/vértices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figura 1: Mercado de intercambio de trueque de ejemplo. El problema de compensación consiste en encontrar un intercambio de peso máximo que consista en ciclos con una longitud de a lo sumo una pequeña constante L. Esta restricción de longitud de ciclo surge naturalmente por varias razones. Por ejemplo, en un intercambio de riñón, todas las operaciones en un ciclo deben realizarse simultáneamente; de lo contrario, un donante podría retractarse después de que su pareja incompatible haya recibido un riñón. (No se puede redactar un contrato vinculante para donar un órgano). Esto da lugar a una restricción logística en el tamaño del ciclo: incluso si todos los donantes son operados primero y se utiliza el mismo personal e instalaciones para luego operar a los receptores, un ciclo k requiere entre 3k y 6k médicos, alrededor de 4k enfermeras y casi 2k salas de operaciones. Debido a tales limitaciones de recursos, es probable que el próximo mercado nacional de intercambio de riñones solo permita ciclos de longitud 2 y 3. Otra motivación para ciclos cortos es que si el ciclo falla en intercambiarse, menos agentes se ven afectados. Por ejemplo, las pruebas de último minuto en un intercambio de riñones a menudo revelan nuevas incompatibilidades que no fueron detectadas en las pruebas iniciales (en base a las cuales se construyó el grafo de compatibilidad). Más generalmente, un agente puede abandonar un ciclo si sus preferencias han cambiado, o simplemente no cumple con sus obligaciones (como enviar un libro a otro agente en el ciclo) debido a olvidos. En la Sección 3, demostramos que (la versión de decisión del) problema de despeje es NP-completo para L ≥ 3. Una posible estrategia sería buscar un buen heurístico o algoritmo de aproximación. Sin embargo, por dos razones, buscamos un algoritmo exacto basado en un programa lineal entero (PLE), que resolvemos utilizando una búsqueda especializada en árboles. • Primero, cualquier pérdida de optimalidad podría llevar a muertes de pacientes innecesarias. • Segundo, una característica atractiva de utilizar una formulación de PLE es que permite modelar fácilmente una serie de variaciones en el objetivo y agregar restricciones adicionales al problema. Por ejemplo, si se cree que los ciclos de 3 elementos tienen más probabilidades de fallar que los ciclos de 2 elementos, entonces simplemente se les puede asignar un peso que sea apropiadamente menor que 3/2 del peso de un ciclo de 2 elementos. O, si por diversas razones (por ejemplo, éticas) se requiere un intercambio de cardinalidad máxima, al menos se puede encontrar en una segunda pasada la solución (de entre todas las soluciones de cardinalidad máxima) que tenga el menor número de 3-ciclos. Otras variaciones que se pueden resolver incluyen encontrar diversas formas de colecciones de ciclos tolerantes a fallos (no disjuntas) en caso de que ciertos pares que se creían compatibles resulten ser incompatibles después de todo. En este documento, presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Las codificaciones de ILP directas son demasiado grandes para siquiera construirse en el hardware actual, sin mencionar resolverlas. La clave entonces es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas (principalmente específicas del problema) que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. 1.1 Trabajos Previos Varios artículos recientes han utilizado simulaciones y algoritmos de compensación de mercado para explorar el impacto de un intercambio nacional de riñones [13, 20, 6, 14, 15, 17]. Por ejemplo, utilizando el algoritmo de coincidencia máxima de Edmonds [4], [20] se muestra que un mercado nacional de intercambio por pares (utilizando solo ciclos de longitud 2) resultaría en más trasplantes, tiempos de espera reducidos y ahorros de $750 millones en costos de atención médica durante 5 años. Esos resultados son conservadores de dos maneras. En primer lugar, el mercado simulado contenía solo 4,000 pacientes iniciales, con 250 pacientes añadidos cada 3 meses. Se nos ha informado que el mercado podría ser casi el doble de este tamaño. En segundo lugar, los intercambios se restringieron a ciclos de longitud 2 (porque eso es todo lo que se puede modelar como coincidencia máxima y resolver utilizando el algoritmo de Edmonds). Permitir ciclos de longitud 3 conlleva a ganancias adicionales significativas. Esto se ha demostrado en mercados de intercambio de riñones con 100 pacientes utilizando CPLEX para resolver una codificación de programa entero del problema de compensación [15]. En este documento, presentamos un algoritmo alternativo para este programa entero que puede despejar mercados con más de 10,000 pacientes (y el mismo número de donantes dispuestos). Permitir ciclos de longitud mayor a 3 a menudo no conduce a ninguna mejora en el tamaño del intercambio [15]. (Además, en un modelo teórico simplificado, cualquier intercambio de riñón se puede convertir en uno con ciclos de longitud de a lo sumo 4 [15].) Si bien esto no se aplica a intercambios de trueque generales, ni siquiera a todos los mercados de intercambio de riñones, en la Sección 5.2.3 hacemos uso de la observación de que los ciclos cortos son suficientes para aumentar drásticamente la velocidad de nuestro algoritmo. A un nivel alto, el problema de compensación para intercambios de trueque es similar al problema de compensación (también conocido como problema de determinación de ganadores) en subastas combinatorias. En ambos contextos, la idea es recopilar toda la información pertinente sobre los agentes en un punto central de compensación y ejecutar un algoritmo centralizado de compensación para determinar la asignación. Ambos problemas son NP-duros. Ambos se resuelven mejor utilizando técnicas de búsqueda en árboles. Desde 1999, se ha realizado un trabajo significativo en informática y investigación de operaciones sobre algoritmos de búsqueda de árboles óptimos más rápidos para despejar subastas combinatorias. (Para una revisión reciente, consulte [18].) Sin embargo, el problema de compensación del intercambio de riñones (con un límite de 3 o más en el tamaño del ciclo) es diferente del problema de compensación de la subasta combinatoria de formas significativas. La diferencia más importante es que las formulaciones naturales del problema de subasta combinatoria tienden a ajustarse fácilmente en la memoria, por lo que el tiempo es el cuello de botella en la práctica. Por el contrario, las formulaciones naturales del problema de intercambio de riñones (con L = 3) ocupan al menos espacio cúbico en el número de pacientes para incluso modelar, y por lo tanto la memoria se convierte en un cuello de botella mucho antes que el tiempo al utilizar la búsqueda de árbol estándar, como branch-and-cut en CPLEX, para abordar el problema. (En una computadora de 1GB y un <br>generador de instancias</br> estándar realista, discutido más adelante, CPLEX 10.010 se queda sin memoria en cinco de las diez instancias de 900 pacientes y en las diez de las diez instancias de 1,000 pacientes que generamos). Por lo tanto, los enfoques que se han desarrollado para subastas combinatorias no pueden manejar el problema del intercambio de riñones. 1.2 Esquema del documento El resto del documento está organizado de la siguiente manera. La sección 2 discute el proceso mediante el cual generamos datos realistas del mercado de intercambio de riñones, con el fin de comparar los algoritmos de compensación. La sección 3 contiene una demostración de que el problema de decisión de compensación del mercado es NP-completo. Las secciones 4 y 5 contienen cada una una formulación ILP del problema de compensación. También detallamos en esas secciones nuestras técnicas utilizadas para resolver esos programas en instancias grandes. La sección 6 presenta experimentos sobre las diversas técnicas. La sección 7 discute la implementación reciente de nuestro algoritmo. Finalmente, presentamos nuestras conclusiones en la Sección 8 y sugerimos direcciones para investigaciones futuras. CARACTERÍSTICAS DEL MERCADO Y GENERADOR DE INSTANCIAS Probamos los algoritmos en mercados simulados de intercambio de riñones, los cuales son generados por un proceso descrito en Saidman et al. [17]. Este proceso se basa en los extensos datos a nivel nacional mantenidos por la Red Unida para el Comparto de Órganos (UNOS), por lo que genera una distribución realista de instancias. Varios artículos han utilizado variaciones de este proceso para demostrar la efectividad de un intercambio nacional de riñones (extrapolando de pequeñas instancias o restringiendo la compensación a ciclos de 2) [6, 20, 14, 13, 15, 17]. En resumen, el proceso implica generar pacientes con un tipo de sangre, sexo y probabilidad de ser incompatible en el tipo de tejido con un donante elegido al azar. Estas probabilidades se basan en datos reales de la población del mundo real. A cada paciente se le asigna un posible donante con un tipo de sangre aleatorio y una relación con el paciente. Si el paciente y el posible donante son incompatibles, ambos son ingresados en el mercado. La información del tipo de sangre y del tipo de tejido se utiliza luego para decidir qué pacientes y donantes son compatibles. Una complicación, manejada por el generador, es que si la paciente es mujer y ha tenido un hijo con su potencial donante, entonces la probabilidad de que los dos sean incompatibles aumenta. (Esto se debe a que la madre desarrolla anticuerpos contra su pareja durante el embarazo). Finalmente, aunque nuestros algoritmos pueden manejar funciones de peso más generales, los pacientes tienen una utilidad de 1 para donantes compatibles, ya que su probabilidad de supervivencia no se ve afectada por la elección del donante [3]. Esto significa que el intercambio de peso máximo tiene la máxima cardinalidad. La Tabla 1 proporciona límites inferiores y superiores sobre el tamaño de un intercambio de máxima cardinalidad en el mercado de intercambio de riñones. Los límites inferiores se encontraron al despejar el mercado solo con ciclos de longitud 2, mientras que los límites superiores no tenían restricción en la longitud del ciclo. Para cada tamaño de mercado, los límites fueron calculados sobre 10 mercados generados aleatoriamente. Ten en cuenta que puede haber una gran cantidad de variabilidad en los mercados: en un mercado de 5000 pacientes, menos de 1000 pacientes estaban en el intercambio de cardinalidad máxima. Tamaño máximo de intercambio Longitud-2 ciclos solamente Ciclos arbitrarios Pacientes Media Máximo Media Máximo 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Tabla 1: Límites superiores e inferiores en el tamaño del intercambio. La Tabla 2 proporciona características adicionales del mercado de intercambio de riñones. Ten en cuenta que un mercado con 5000 pacientes puede tener más de 450 millones de ciclos de longitud 2 y 3. Longitud de los bordes 2 y 3 ciclos Pacientes Media Máx. Media Máx. 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Tabla 2: Características del mercado. 297 COMPLEJIDAD DEL PROBLEMA En esta sección, demostramos que (la versión de decisión del) problema de compensación de mercado con ciclos cortos es NP-completo. Teorema 1. Dado un grafo G = (V, E) y un entero L ≥ 3, el problema de decidir si G admite una cubierta de ciclos perfecta que contenga ciclos de longitud como máximo L es NP-completo. Prueba. Es claro que este problema está en NP. Para la NP-dificultad, reducimos desde 3D-Matching, que es el problema de, dado conjuntos disjuntos X, Y y Z de tamaño q, y un conjunto de triples T ⊆ X × Y × Z, decidir si existe un subconjunto disjunto M de T con tamaño q. Una idea directa es construir un grafo tripartito con conjuntos de vértices X ∪ Y ∪ Z y aristas dirigidas (xa, yb), (yb, zc) y (zc, xa) para cada triple ti = {xa, yb, zc} ∈ T. Sin embargo, no es demasiado difícil ver que esta codificación falla porque una cobertura de ciclo perfecta puede incluir un ciclo sin un triple correspondiente. En cambio, utilizamos la siguiente reducción. Dado una instancia de 3D-Matching, construye un vértice para cada elemento en X, Y y Z. Para cada tripleta, ti = {xa, yb, zc}, construya el dispositivo en la Figura 2, que es similar a uno en Garey y Johnson [5, pp 68-69]. Ten en cuenta que los dispositivos se intersecan solo en los vértices de X ∪ Y ∪ Z. Es claro que esta construcción puede realizarse en tiempo polinómico. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figura 2: Dispositivo de NP-completitud para la tripleta ti y la longitud máxima del ciclo L. Sea M un emparejamiento 3D perfecto. Mostraremos que la construcción admite una cobertura perfecta de ciclos mediante ciclos cortos. Si ti = {xa, yb, zc} ∈ M, añade desde el gadget de ti los tres ciclos de longitud L que contienen a xa, yb y zc respectivamente. También añade el ciclo ª xi a, yi b, zi c «. De lo contrario, si ti ∉ M, añade los tres ciclos de longitud L que contienen xi a, yi b y zi c respectivamente. Es claro que todos los vértices están cubiertos, ya que M particiona X × Y × Z. Por el contrario, supongamos que tenemos una cobertura perfecta mediante ciclos cortos. Ten en cuenta que la construcción solo tiene ciclos cortos de longitudes 3 y L, y ningún ciclo corto involucra vértices distintos de dos gadgets diferentes. Es fácil ver entonces que en una cubierta perfecta, cada gadget ti contribuye ciclos de acuerdo a los casos anteriores: ti ∈ M, o ti /∈ M. Por lo tanto, existe un Emparejamiento 3D perfecto en la instancia original. 4. ENFOQUES DE SOLUCIÓN BASADOS EN UNA FORMULACIÓN DE ARISTAS En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada arista. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos sin restricciones de longitud de ciclo. Dado un mercado G = (V, E), construya un grafo bipartito con un vértice para cada agente y un vértice para cada artículo. Agregar un borde ev con peso 0 entre cada agente v y su propio artículo. En este punto, la codificación es una coincidencia perfecta. Ahora, para cada arista e = (vi, vj) en el mercado original, añade una arista e con peso we entre el agente vi y el artículo de vj. Los emparejamientos perfectos en esta codificación corresponden exactamente con las cubiertas de ciclos, ya que cada vez que se toma un artículo de un agente, debe recibir el artículo de otro agente. Se deduce que el problema de despeje sin restricciones puede resolverse en tiempo polinómico encontrando un emparejamiento perfecto de peso máximo. La Figura 3 contiene la representación en forma de grafo bipartito del mercado de ejemplo de la Figura 1. Las aristas de peso 0 están codificadas con líneas discontinuas, mientras que las aristas de mercado están en negrita. Elementos Agentes v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figura 3: Codificación de emparejamiento perfecto del mercado en la Figura 1. Alternativamente, podemos resolver el problema codificándolo como un ILP con una variable para cada arista en el grafo de mercado original G. Este ILP, que se muestra a continuación, tiene la ventaja de que puede ser extendido de manera natural para tratar con restricciones de longitud de ciclo. Por lo tanto, para el resto de esta sección, este será el enfoque que seguiremos. Se busca un max e∈E tal que para todo vi ∈ V, se cumplan las restricciones de conservación eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 y la restricción de capacidad eout=(vi,vj ) eout ≤ 1. Si se permite que los ciclos tengan una longitud de como máximo L, es fácil ver que solo necesitamos hacer los siguientes cambios en el ILP. Para cada camino de longitud L (a lo largo del documento, no incluimos ciclos en la definición de camino) p = ep1, ep2, ..., epL, agregar una restricción ep1 + ep2 + ... + epL ≤ L − 1, que excluye al camino p de cualquier solución factible. Desafortunadamente, en un mercado con solo 1000 pacientes, el número de caminos de longitud 3 supera los 400 millones, por lo que ni siquiera podemos construir este ILP sin quedarnos sin memoria. Por lo tanto, utilizamos una búsqueda en árbol con un enfoque de formulación incremental. Específicamente, utilizamos CPLEX, aunque añadimos restricciones como planos de corte durante el proceso de búsqueda en el árbol. Comenzamos con solo un pequeño subconjunto de las restricciones en el ILP. Dado que este ILP es pequeño, CPLEX puede resolver su relajación LP. Luego verificamos si alguna de las restricciones faltantes es violada por la solución fraccional. Si es así, generamos un conjunto de estas restricciones, las añadimos al ILP y repetimos. Incluso una vez que se satisfacen todas las restricciones, puede que no haya una solución entera que coincida con el límite superior fraccional, y aunque la hubiera, el solucionador de PL podría no encontrarla. En estos casos, CPLEX ramifica en una variable (utilizamos la estrategia de ramificación predeterminada de CPLEX) y genera un nuevo nodo de búsqueda correspondiente a cada uno de los hijos. En cada nodo del árbol de búsqueda que se visita, se repite este proceso de resolver el LP y agregar restricciones. Claramente, este enfoque produce una solución óptima una vez que la búsqueda en el árbol finaliza. Todavía necesitamos explicar los detalles del generador de restricciones (es decir, seleccionar qué restricciones comenzar) y la generación de restricciones (es decir, seleccionar qué restricciones violadas incluir). Describimos brevemente estos en las dos subsecciones siguientes, respectivamente. 4.1 Sembrador de Restricciones El principal sembrador de restricciones que desarrollamos prohíbe cualquier camino de longitud L − 1 que no tenga un borde cerrando el ciclo desde su inicio hasta su final. Si bien es costoso computacionalmente encontrar estas restricciones, su adición enfoca la búsqueda lejos de los caminos que no pueden estar en la solución final. También intentamos sembrar el LP con una colección aleatoria de restricciones del ILP. 4.2 Generación de Restricciones Experimentamos con varios generadores de restricciones. En cada caso, dada una solución fraccional, construimos el subgrafo de aristas con valor positivo. Este gráfico es mucho más pequeño que el gráfico original, por lo que podemos realizar los cálculos siguientes de manera eficiente. En nuestro primer generador de restricciones, simplemente buscamos caminos de longitud L con una suma de valores mayor que L − 1. Para cualquier camino de este tipo, restringimos su suma para que sea como máximo L − 1. Ten en cuenta que si hay un ciclo c con longitud |c| > L, podría contener hasta |c| caminos que violan. En nuestro segundo generador de restricciones, solo agregamos una restricción para tales ciclos: la suma de aristas en el ciclo puede ser a lo sumo |c|(L − 1)/L. Este generador hizo que el algoritmo fuera más lento, por lo que optamos por ir en la dirección opuesta en el desarrollo de nuestro generador final. Agrega una restricción por cada camino p que viola, y además, agrega una restricción para cada camino con los mismos vértices interiores (sin contar los extremos) que p. Esto mejoró la velocidad general. 4.3 Rendimiento experimental Resultó que incluso con estas mejoras, el enfoque de formulación de aristas no puede despejar un intercambio de riñón con 100 vértices en el tiempo en que la formulación de ciclos (descrita más adelante en la Sección 5) puede despejar uno con 10,000 vértices. En otras palabras, los enfoques basados en generación de columnas resultaron ser drásticamente mejores que los enfoques basados en generación de restricciones. Por lo tanto, en el resto del documento nos enfocaremos en la formulación del ciclo y en los enfoques basados en la generación de columnas. 5. Enfoques de solución basados en una formulación cíclica. En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada ciclo. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos cuando los ciclos tienen longitud 2. Dado un mercado G = (V, E), construya un nuevo grafo en V con un peso wc en cada arista de ciclo c de longitud 2. Es fácil ver que los emparejamientos en este nuevo grafo corresponden a coberturas de ciclos por ciclos de longitud 2 en el grafo original del mercado. Por lo tanto, el problema de equilibrio de mercado con L = 2 se puede resolver en tiempo polinómico encontrando un emparejamiento de peso máximo. Figura 4: Codificación del emparejamiento de peso máximo del mercado en la Figura 1. Podemos generalizar este codificado para L arbitrario. Sea C(L) el conjunto de todos los ciclos de G con longitud a lo sumo L. Entonces el siguiente ILP encuentra la cobertura de ciclos de máximo peso por ciclos de C(L): max c∈C(L) wcc sujeto a c:vi∈c c ≤ 1 ∀vi ∈ V con c ∈ {0, 1} ∀c ∈ C(L) 5.1 Formulación de Arista vs Ciclo En esta sección, consideramos los méritos de la formulación de arista y la formulación de ciclo. La formulación del problema del borde se puede resolver en tiempo polinómico cuando no hay restricciones en el tamaño del ciclo. La formulación del ciclo se puede resolver en tiempo polinómico cuando el tamaño del ciclo es a lo sumo 2. Ahora consideramos el caso de ciclos cortos de longitud como máximo L, donde L ≥ 3. Nuestros algoritmos de búsqueda de árboles utilizan la relajación LP de estas formulaciones para proporcionar cotas superiores de la solución óptima. Estos límites ayudan a podar subárboles y guiar la búsqueda de las formas habituales. Teorema 2. La relajación LP de la formulación del ciclo domina débilmente la relajación LP de la formulación del borde. Prueba. Considera una solución óptima para la relajación LP de la formulación del ciclo. Mostramos cómo construir una solución equivalente en la formulación de bordes. Para cada arista en el grafo, establezca su valor como la suma de los valores de todos los ciclos de los cuales es miembro. También, define el valor de un vértice de la misma manera. Debido a las restricciones del ciclo, las restricciones de conservación y capacidad de la codificación de los bordes se cumplen claramente. Queda por demostrar que ninguna de las restricciones de ruta se viola. Sea p cualquier camino de longitud L en el grafo. Dado que p tiene L−1 vértices interiores (sin contar los extremos), la suma de estos vértices interiores es como máximo L−1. Ahora, para cualquier ciclo c de longitud como máximo L, el número de aristas que tiene en p, que denotamos como ec(p), es como máximo el número de vértices interiores que tiene en p, que denotamos como vc(p). Por lo tanto, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 La afirmación contraria de este teorema no es verdadera. Considera un grafo que es simplemente un ciclo con n aristas. Claramente, la relajación LP de la formulación del ciclo tiene un valor óptimo de 0, ya que no hay ciclos de tamaño menor o igual a L. Sin embargo, la formulación de aristas tiene una solución de tamaño n/2, con cada arista teniendo un valor de 1/2. Por lo tanto, la formulación del ciclo es más ajustada que la formulación del borde. Además, para un grafo con m aristas, la formulación de aristas requiere O(m3) restricciones, mientras que la formulación de ciclos solo requiere O(m2). 5.2 Generación de columnas para la tabla de PL. La Tabla 2 muestra cómo el número de ciclos de longitud a lo sumo 3 crece con el tamaño del mercado. Con una variable por ciclo en la formulación del ciclo, CPLEX ni siquiera puede liquidar mercados con 1,000 pacientes sin quedarse sin memoria (ver Figura 6). Para abordar este problema, utilizamos un enfoque de formulación incremental. El primer paso en la búsqueda de árbol guiada por LP es resolver la relajación LP. Dado que la formulación del ciclo no cabe en la memoria, esta etapa de LP fallaría inmediatamente sin un enfoque de formulación incremental. Sin embargo, motivados por la observación de que una solución de intercambio puede incluir solo una pequeña fracción de los ciclos, exploramos el enfoque de utilizar la generación de columnas (es decir, ciclos). La idea de la generación de columnas es comenzar con un LP restringido que contenga solo un pequeño número de columnas (variables, es decir, ciclos), y luego agregar columnas repetidamente hasta que una solución óptima para este LP parcialmente formulado sea una solución óptima para el LP original (también conocido como maestro). Explicamos esto más a fondo mediante un ejemplo. Considera el mercado en la Figura 1 con L = 2. La Figura 5 muestra el LP maestro correspondiente, P, y su dual, D. El primal P maximiza 2c1 + 2c2 + 2c3 sujeto a c1 ≤ 1 (v1), c1 + c2 ≤ 1 (v2), c2 + c3 ≤ 1 (v3), c3 ≤ 1 (v4) con c1, c2, c3 ≥ 0. El dual D minimiza v1 + v2 + v3 + v4 sujeto a v1 + v2 ≥ 2 (c1), v2 + v3 ≥ 2 (c2), v3 + v4 ≥ 2 (c3) con v1, v2, v3, v4 ≥ 0. Figura 5: Formulación del ciclo. Sea P la restricción de P que contiene solo las columnas c1 y c3. Sea D el dual de P, es decir, D es simplemente D sin la restricción c2. Dado que P y D son pequeños, podemos resolverlos para obtener OPT(P) = OPT(D) = 4, con cOPT(P) = c1 = c3 = 1 y vOPT(D) = v1 = v2 = v3 = v4 = 1. Si cOP T (P ) debe ser una solución factible de P, resulta (afortunadamente) que vOP T (D ) es factible para D, de modo que OPT(D ) ≥ OPT(D). Podemos verificar esto comprobando que vOP T (D) cumple con las restricciones de D que aún no están en Di, es decir, la restricción c2. Se deduce que OPT(P) = OPT(D) ≥ OPT(D) = OPT(P), por lo que vOPT(P) es demostrablemente una solución óptima para P, a pesar de que P contiene solo un subconjunto estricto de las columnas de P. Por supuesto, puede resultar (desafortunadamente) que vOPT(D) no sea factible para D. Esto puede ocurrir como se muestra arriba si vOPT(D) = v1 = 2, v2 = 0, v3 = 0, v4 = 2. Aunque todavía podemos ver que OPT(D) = OPT(D), en general no podemos demostrarlo porque D y P son demasiado grandes para resolver. En cambio, dado que se viola la restricción c2, agregamos la columna c2 a P, actualizamos D y repetimos. El problema de encontrar una restricción violada se llama problema de fijación de precios. Aquí, el precio de una columna (ciclo en nuestra configuración) es la diferencia entre su peso y la suma de los valores duales de los vértices del ciclo. Si alguna columna de P tiene un precio positivo, su restricción correspondiente está violada y aún no hemos demostrado la optimalidad. En este caso, debemos seguir generando columnas para agregar a P. Problema de fijación de precios 5.2.1 Para instancias más pequeñas, podemos mantener una colección explícita de todos los ciclos factibles. Esto hace que el problema de fijación de precios sea fácil y eficiente de resolver: simplemente recorremos la colección de ciclos y buscamos ciclos con precio positivo. Incluso podemos encontrar ciclos con el precio más positivo, que son los más propensos a mejorar el valor objetivo de LP restringido [1]. Sin embargo, este enfoque no es escalable. Un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos de longitud de máximo 3 (ver Tabla 2). Esto es demasiados ciclos para mantener en la memoria. Por lo tanto, para instancias más grandes, debemos generar ciclos factibles mientras buscamos uno con un precio positivo. Realizamos esto utilizando un algoritmo de búsqueda en profundidad en el grafo del mercado (ver Figura 1). Para hacer esta búsqueda más rápida, exploramos los vértices en orden de valores no decrecientes, ya que es más probable que estos vértices pertenezcan a ciclos con peso positivo. También utilizamos varias reglas de poda para determinar si la ruta de búsqueda actual puede llevar a un ciclo de peso positivo. Por ejemplo, en un vértice dado en la búsqueda, podemos podar basándonos en el hecho de que cada vértice que visitemos a partir de este punto tendrá un valor al menos tan grande como el vértice actual. Incluso con estas reglas de poda, la generación de columnas es un cuello de botella. Por lo tanto, también implementamos las siguientes optimizaciones. Cuando la búsqueda exhaustiva demuestra que un vértice no pertenece a ningún ciclo de precios positivos, marcamos el vértice y no lo utilizamos como raíz de una búsqueda en profundidad hasta que su valor dual disminuya. De esta manera, evitamos repetir innecesariamente nuestros esfuerzos computacionales de una iteración previa de generación de columnas. Finalmente, a veces puede ser beneficioso para la generación de columnas incluir varias columnas de precio positivo en una iteración, ya que puede ser más rápido generar una segunda columna una vez que se encuentra la primera. Sin embargo, evitamos esto por la siguiente razón. Si intentamos encontrar más columnas de precio positivo de las que se pueden encontrar, o si las columnas están muy separadas en el espacio de búsqueda, terminamos teniendo que generar y verificar una gran parte de la colección de ciclos factibles. En nuestros experimentos, hemos observado que esto ocurre en mercados con cientos de millones de ciclos, lo que resulta en costos de computación prohibitivamente caros. 5.2.2 Sembrado de Columnas Incluso si hay solo una pequeña brecha con la relajación principal del LP, la generación de columnas requiere muchas iteraciones para mejorar el valor objetivo del LP restringido. Cada una de estas 300 iteraciones es costosa, ya que debemos resolver el problema de fijación de precios y volver a resolver el LP restringido. Por lo tanto, aunque podríamos empezar sin columnas en el LP restringido, es mucho más rápido sembrar el LP con suficientes columnas para que el valor objetivo óptimo no esté muy lejos del LP principal. Por supuesto, no podemos incluir tantas columnas que nos quedemos sin memoria. Experimentamos con varios sembradores de columnas. En una clase de sembrador, utilizamos una heurística para encontrar un intercambio, y luego agregamos los ciclos de ese intercambio al LP restringido inicial. Implementamos dos heurísticas. El primero es un algoritmo voraz: para cada vértice en un orden aleatorio, si está sin cubrir, intentamos incluir un ciclo que lo contenga a él y a otros vértices sin cubrir. El otro heurístico utiliza un código especializado de emparejamiento de peso máximo [16] para encontrar una cobertura óptima mediante ciclos de longitud 2. Estas heurísticas funcionan extremadamente bien, especialmente teniendo en cuenta el hecho de que solo agregan un pequeño número de columnas. Por ejemplo, la Tabla 1 muestra que una cobertura óptima por ciclos de longitud 2 tiene casi el mismo peso que el intercambio con tamaño de ciclo no restringido. Sin embargo, tenemos suficiente memoria para incluir cientos de miles de columnas adicionales y así acercarnos aún más al límite superior. Nuestro mejor sembrador de columnas construye una colección aleatoria de ciclos factibles. Dado que un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos factibles, lleva demasiado tiempo generar y recorrer todos los ciclos factibles, por lo que no incluimos una colección aleatoria uniforme. En cambio, realizamos un recorrido aleatorio en el grafo del mercado (ver, por ejemplo, Figura 1), en el cual, después de cada paso del recorrido, probamos si hay un borde de regreso a nuestro camino que forme un ciclo factible. Si encontramos un ciclo, este se incluye en el LP restringido y comenzamos una nueva caminata desde un vértice aleatorio. En nuestros experimentos (ver Sección 6), utilizamos este algoritmo para sembrar el LP con 400,000 ciclos. Este último enfoque supera a los sembradores heurísticos descritos anteriormente. Sin embargo, en nuestro algoritmo, utilizamos una combinación que toma la unión de todas las columnas de los tres sembradores. En la Figura 6, comparamos el rendimiento del sembrador combinado con el sembrador combinado sin el sembrador de recolección aleatoria. No trazamos el rendimiento del algoritmo sin ningún sembrador en absoluto, porque puede llevar horas despejar mercados que de otra manera podríamos despejar en unos pocos minutos. 5.2.3 Demostrando la optimalidad. Recordemos que nuestro objetivo es encontrar una solución óptima para la relajación principal del LP. Usando la generación de columnas, podemos demostrar que una solución primal restringida es óptima una vez que todas las columnas tienen precios no positivos. Desafortunadamente, nuestro problema de compensación tiene el llamado efecto de disminución gradual [1, Sección 6.3], en el cual, aunque el primal restringido es óptimo a posteriori, se requiere un gran número de iteraciones adicionales para demostrar la optimalidad (es decir, eliminar todas las columnas de precio positivo). No hay una buena solución general para el efecto de disminución. Sin embargo, para mitigar este efecto, aprovechamos la siguiente observación específica del problema. Recuerde de la Sección 1.1 que, casi siempre, un intercambio de peso máximo con ciclos de longitud a lo sumo 3 tiene el mismo peso que un intercambio de peso máximo sin restricciones. (Sin embargo, esto no significa que el solucionador para el caso sin restricciones encontrará una solución con ciclos cortos). Además, el problema de despeje no restringido se puede resolver en tiempo polinómico (ver Sección 4). Por lo tanto, podemos calcular eficientemente un límite superior en la relajación principal del LP, y, cada vez que el primal restringido alcanza este límite superior, ¡hemos demostrado la optimalidad sin necesidad de eliminar todas las columnas de precio positivo! Para que esto mejore el tiempo de ejecución del algoritmo en general, necesitamos poder despejar el mercado sin restricciones en menos tiempo del que le lleva a la generación de columnas eliminar todos los ciclos de precios positivos. Aunque el primer problema es soluble en tiempo polinómico, esto no es trivial para instancias grandes. Por ejemplo, para un mercado con 10,000 pacientes y 25 millones de conexiones, el código especializado de emparejamiento de peso máximo [16] era demasiado lento, y CPLEX se quedó sin memoria en la codificación de formulación de bordes de la Sección 4. Para hacer funcionar esta idea, utilizamos generación de columnas para resolver la formulación de bordes. Esto implica comenzar con un pequeño subconjunto aleatorio de los bordes, y luego agregar bordes con precio positivo uno por uno hasta que no quede ninguno. Realizamos esta generación de columnas secundarias no en el grafo de mercado original G, sino en el grafo bipartito de emparejamiento perfecto de la Figura 3. Hacemos esto para que solo necesitemos resolver el LP, no el ILP, ya que la brecha de integralidad en el grafo bipartito de emparejamiento perfecto es 1, es decir, siempre existe una solución integral que alcanza el límite superior fraccional. El aumento de velocidad resultante en el algoritmo general es dramático, como se puede ver en la Figura 6. 5.2.4 Gestión de Columnas Si el valor óptimo del LP restringido inicial P está lejos del LP maestro P, entonces se generan un gran número de columnas antes de que se cierre la brecha. Esto conduce a problemas de memoria en mercados con tan solo 4,000 pacientes. Además, incluso antes de que la memoria se convierta en un problema, las iteraciones de generación de columnas se vuelven lentas debido a la sobrecarga adicional de resolver un LP más grande. Para abordar estos problemas, implementamos un esquema de gestión de columnas para limitar el tamaño del LP restringido. Siempre que agregamos columnas al LP, verificamos si contiene más de un número umbral de columnas. Si este es el caso, eliminamos selectivamente columnas hasta que esté nuevamente por debajo del umbral2. Como discutimos anteriormente, solo una pequeña fracción de todos los ciclos terminará en la solución final. Es poco probable que eliminemos dicho ciclo, y aun si lo hacemos, siempre se puede generar de nuevo. Por supuesto, no debemos ser demasiado agresivos con el umbral, ya que hacerlo podría contrarrestar las ganancias de rendimiento por iteración al aumentar significativamente el número de iteraciones necesarias para obtener un conjunto de columnas adecuado en el LP al mismo tiempo. Hay algunas columnas que nunca eliminamos, por ejemplo aquellas en las que hemos realizado ramificaciones (ver Sección 5.3.2), o aquellas con un valor de LP distinto de cero. Entre el resto, eliminamos aquellos con el precio más bajo, ya que corresponden a las restricciones duales que están más satisfechas. Este esquema de gestión de columnas funciona bien y nos ha permitido despejar mercados con 10,000 pacientes, como se ve en la Figura 6. 5.3 Búsqueda de Ramificación y Precio para el ILP Dado un problema grande de despeje de mercado, podemos resolver con éxito su relajación LP hasta la optimalidad utilizando las mejoras de generación de columnas descritas anteriormente. Sin embargo, las soluciones que encontramos suelen ser fraccionarias. Por lo tanto, en el paso 2 siguiente, basándonos en el tamaño de la memoria, establecemos el umbral en 400,000. El paso 301 implica realizar una búsqueda de árbol de ramificación y precio [1] para encontrar una solución integral óptima. Breve, esta es la idea de ramificar y fijar precios. Siempre que establecemos una variable fraccional en 0 o 1 (rama), tanto el LP maestro como la restricción con la que estamos trabajando se modifican (se restringen). Por defecto, entonces, necesitamos realizar la generación de columnas (es decir, el esfuerzo de fijar precios) en cada nodo del árbol de búsqueda para demostrar que la restricción restringida es óptima para el LP maestro restringido. (Sin embargo, como se discute en la Sección 5.2.3, calculamos el límite superior integral para el nodo raíz basado en relajar completamente la restricción de longitud del ciclo, y cada vez que algún LP de los nodos en el árbol alcance ese valor, no necesitamos seguir fijando precios de columnas en ese nodo). Para el problema de despeje con ciclos de longitud a lo sumo 3, hemos encontrado que rara vez hay una brecha entre las soluciones integrales y fraccionarias óptimas. Esto significa que podemos evitar en gran medida el costoso paso de fijar precios por nodo: cuando el LP restringido restringido tiene el mismo valor óptimo que su padre en la búsqueda del árbol, podemos demostrar la optimalidad del LP, como se muestra en la Sección 5.2.3, sin tener que incluir columnas adicionales en el LP restringido. Aunque CPLEX puede resolver ILPs, no admite la técnica de branch-and-price (por ejemplo, debido a posibles complicaciones específicas del problema que involucran la interacción entre la regla de ramificación y el problema de fijación de precios). Por lo tanto, implementamos nuestro propio algoritmo de ramificación y precio, el cual explora el árbol de búsqueda en orden de profundidad primero. También experimentamos con el orden de selección de nodos A* [7, 2]. Sin embargo, esta estrategia de búsqueda requiere significativamente más memoria, la cual encontramos que se empleaba mejor para acelerar la fase de generación de columnas (ver Sección 5.2.2). Los componentes principales restantes del algoritmo se describen en las dos siguientes subsecciones. 5.3.1 Heurísticas Primal Antes de ramificar en una variable fraccional, utilizamos heurísticas primales para construir una solución integral factible. Estas soluciones son límites inferiores de las soluciones integrales óptimas finales. Por lo tanto, cuando una solución fraccional restringida no es mejor que la mejor solución integral encontrada hasta el momento, podamos el subárbol actual. Una heurística primal es efectiva si es eficiente y construye límites inferiores ajustados. Experimentamos con dos heurísticas primarias. El primero es un algoritmo de redondeo simple [8]: incluir todos los ciclos con un valor fraccional de al menos 0.5, y luego, asegurando la viabilidad, agregar de forma codiciosa los ciclos restantes. Si bien esta heurística es eficiente, encontramos que los límites inferiores que construye rara vez permiten realizar un gran número de podas. También intentamos usar CPLEX como una heurística primal. En cualquier nodo dado del árbol de búsqueda, podemos convertir la relajación LP restringida de nuevo a un ILP reintroduciendo las restricciones de integralidad. CPLEX tiene varias heurísticas primales integradas, las cuales podemos aplicar a este ILP. Además, podemos utilizar la búsqueda de árbol propia de CPLEX para encontrar una solución integral óptima. En general, esta búsqueda de árbol es mucho más rápida que la nuestra. Si CPLEX encuentra una solución integral que coincida con el límite superior fraccional en el nodo raíz, hemos terminado. De lo contrario, no existe tal solución integral, o aún no tenemos la combinación correcta de ciclos en el LP restringido. Para los mercados de intercambio de riñones, generalmente es la segunda razón la que se aplica (ver Secciones 5.2.2 y 5.2.4). Por lo tanto, en algún momento de la búsqueda en el árbol, una vez que se han generado más columnas como resultado de la ramificación, la heurística de CPLEX encontrará una solución integral óptima. Aunque la búsqueda de árbol de CPLEX es más rápida que la nuestra, no es tan rápida como para poder aplicarla a cada nodo en nuestro árbol de búsqueda. Por lo tanto, realizamos las siguientes optimizaciones. En primer lugar, agregamos una restricción que requiere que el valor objetivo del ILP sea tan grande como el objetivo fraccional. Si este no es el caso, queremos abortar y proceder a generar más columnas con nuestra búsqueda de ramificación y precio. En segundo lugar, limitamos el número de nodos en el árbol de búsqueda de CPLEX. Esto se debe a que hemos observado que no existe una solución integral, CPLEX puede tardar mucho tiempo en demostrarlo. Finalmente, solo aplicamos la heurística CPLEX en un nodo si tiene un conjunto de ciclos suficientemente diferente al de su padre. Utilizar CPLEX como heurística primal tiene un gran impacto porque reduce el tamaño del árbol de búsqueda, evitando así todo el trabajo de fijación computacionalmente costoso en los nodos que no se generan en este árbol más pequeño. 5.3.2 Ramificador de Ciclo. Experimentamos con dos estrategias de ramificación, ambas seleccionan una variable por nodo. La primera estrategia, ramificación por certeza, selecciona aleatoriamente una variable de aquellas cuyo valor LP está más cercano a 1. La segunda estrategia, ramificación por incertidumbre, selecciona aleatoriamente una variable cuyo valor LP esté más cercano a 0.5. En ambos casos, se generan dos hijos del nodo correspondientes a dos subárboles, uno en el que la variable se establece en 0 y otro en el que se establece en 1. Nuestro recorrido en profundidad siempre elige explorar primero el subárbol en el que el valor de la variable está más cerca de su valor fraccionario. Para nuestro problema de despeje con ciclos de longitud como máximo 3, encontramos que el ramificado por incertidumbre es superior, rara vez requiriendo retroceso alguno. 6. RESULTADOS EXPERIMENTALES Todos nuestros experimentos se realizaron en Linux (Red Hat 9.0), utilizando una PC Dell con un procesador Intel Pentium 4 de 3GHz y 1GB de RAM. Dondequiera que usamos CPLEX (por ejemplo, al resolver el LP y como heurística primal, como se discutió en las secciones anteriores), usamos CPLEX 10.010. La Figura 6 muestra el rendimiento en tiempo de ejecución de cuatro algoritmos de limpieza. Para cada tamaño de mercado listado, generamos aleatoriamente 10 mercados e intentamos liquidarlos utilizando cada uno de los algoritmos. El primer algoritmo es CPLEX en la formulación del ciclo completo. Este algoritmo no logra despejar ningún mercado con 1000 pacientes o más. Además, su tiempo de ejecución en mercados más pequeños que este es significativamente peor que el de los otros algoritmos. Los otros algoritmos son variaciones del enfoque de generación de columnas incremental descrito en la Sección 5. Comenzamos con la siguiente configuración (todas las optimizaciones están activadas): Categoría Configuración Columna Sembrador Combinación de heurísticas de intercambio voraz y emparejamiento de peso máximo, y sembrador de caminata aleatoria (400,000 ciclos). Generación de columnas una columna a la vez. Gestión de columnas activada, con límite de 400,000 columnas. Comprobador de Optimalidad Encendido. Redondeo heurístico primal y búsqueda en el árbol de CPLEX. Regla de ramificación de incertidumbre. La combinación de estas optimizaciones nos permite liquidar fácilmente mercados con más de 10,000 pacientes. En cada uno de los dos próximos algoritmos, desactivamos una de estas optimizaciones para resaltar su efectividad. Primero, restringimos el sembrador para que solo comience con 10,000 ciclos. Esta configuración es más rápida para instancias más pequeñas, ya que las relajaciones de LP son más pequeñas y se resuelven más rápido. Sin embargo, al llegar a 5000 vértices, este efecto comienza a ser contrarrestado por la generación adicional de columnas que se debe realizar. Para una instancia más grande, este sembrador restringido es claramente peor. Finalmente, restauramos el sembrador a su configuración optimizada, pero esta vez, eliminamos el verificador de optimalidad descrito en la Sección 5.2.3. Como en muchos problemas de generación de columnas, el efecto de disminución es significativo. Aprovechando las propiedades de nuestro problema, logramos despejar un mercado con 10,000 pacientes en aproximadamente el mismo tiempo que habría tomado despejar un mercado de 6000 pacientes. 7. IMPLEMENTANDO LA TECNOLOGÍA Nuestro algoritmo e implementación reemplazaron a CPLEX como algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones, en diciembre de 2006. Realizamos una ejecución de prueba cada dos semanas, y los primeros trasplantes basados en nuestras soluciones ya han sido realizados. Aunque actualmente existen al menos cuatro intercambios de riñones en los Estados Unidos por razones políticas o interpersonales, todos comprenden que un intercambio nacional unificado y sin fragmentar salvaría más vidas. Estamos en conversaciones con intercambios de riñón adicionales que están interesados en adoptar nuestra tecnología. De esta manera, nuestra tecnología (y los procesos que la rodean) esperamos que sirvan como un sustrato que eventualmente ayudará a unificar los intercambios. Al menos la escalabilidad computacional ya no es un obstáculo. CONCLUSIÓN E INVESTIGACIONES FUTURAS En este trabajo hemos desarrollado los algoritmos exactos más escalables para intercambios de trueque hasta la fecha, con un enfoque especial en el próximo mercado nacional de intercambio de riñones en el que los pacientes con enfermedad renal serán emparejados con donantes compatibles intercambiando a sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a la enfermedad renal. Nuestro trabajo presenta el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Resuelve de manera óptima el problema de compensación de intercambio de riñones con 10,000 pares donante-receptor. Por lo tanto, no es necesario recurrir a soluciones aproximadas. La mejor tecnología previa (CPLEX básico) no puede manejar instancias de más de aproximadamente 900 pares de donantes-receptores porque se queda sin memoria. La clave de nuestra mejora es la formulación incremental de problemas. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas que mejoran sustancialmente tanto el tiempo de ejecución como el uso de memoria. Algunas de las técnicas utilizan observaciones específicas del dominio, mientras que otras son independientes del dominio. Concluimos que la generación de columnas escala de manera significativamente mejor que la generación de restricciones. Para la generación de columnas en el LP, nuestras mejoras incluyen técnicas de fijación de precios, técnicas de siembra de columnas, técnicas para demostrar la optimalidad sin tener que traer todas las columnas con precio positivo (y utilizando otro proceso de generación de columnas en una formulación diferente para hacerlo), y técnicas de eliminación de columnas. Para la búsqueda de ramificación y precio en el programa entero que rodea al LP, nuestras mejoras incluyen heurísticas primales y también comparamos estrategias de ramificación. Sin duda, se podrían utilizar ajustes adicionales de parámetros y quizás técnicas adicionales de mejora de velocidad para hacer que el algoritmo sea aún más rápido. Nuestro algoritmo también admite varias generalizaciones, según lo deseado por los intercambios reales de riñones. Estos incluyen múltiples donantes alternativos por paciente, bordes ponderados en el grafo del mercado (para codificar diferencias en años de vida esperados añadidos basados en grados de compatibilidad, edad y peso del paciente, etc., así como la probabilidad de incompatibilidad de último minuto), cadenas desencadenadas por ángeles (cadenas de trasplantes desencadenadas por donantes altruistas que no tienen pacientes asociados con ellos, cada cadena termina con un riñón sobrante), y problemas adicionales (como diferentes puntajes para salvar a diferentes donantes altruistas o riñones sobrantes para futuras ejecuciones de emparejamiento basadas en tipo de sangre, tipo de tejido y probabilidad de que el órgano no desaparezca del mercado porque el donante tenga dudas). Debido a que utilizamos una metodología de PLI, también podemos soportar una variedad de restricciones laterales, las cuales a menudo desempeñan un papel importante en los mercados en la práctica [19]. También podemos respaldar la asignación forzosa de una parte, por ejemplo, este adolescente gravemente enfermo debe recibir un riñón si es posible. Nuestro trabajo ha tratado el intercambio de riñones como un problema por lotes con información completa (al menos a corto plazo, es probable que los intercambios de riñones sigan funcionando en modo por lotes de vez en cuando). Dos direcciones importantes para trabajos futuros son abordar explícitamente tanto los aspectos en línea como los de información limitada del problema. El aspecto en línea es que los beneficiarios y donantes irán llegando al sistema con el tiempo, y puede ser mejor no llevar a cabo el intercambio óptimo de forma miope ahora, sino reservar parte del mercado actual para futuras coincidencias. De hecho, se ha realizado cierto trabajo al respecto en ciertos entornos restringidos [22, 24]. El aspecto de información limitada es que incluso en modo por lotes, el grafo proporcionado como entrada no es completamente correcto: varios pares donante-receptor que se creían compatibles resultan ser incompatibles cuando se realizan pruebas de último minuto más costosas. Por lo tanto, sería deseable realizar una optimización teniendo esto en cuenta, como producir un subgrafo robusto de bajo grado para ser probado antes de que se genere la coincidencia final, o producir un plan de contingencia en caso de fallo. Actualmente estamos explorando varias preguntas en esta línea, pero ciertamente hay mucho más por hacer. Agradecimientos Agradecemos a los economistas Al Roth y Utku Unver, así como al cirujano de trasplantes de riñón Michael Rees, por alertarnos sobre el hecho de que la tecnología previa era insuficiente para el problema de compensación a escala nacional, proporcionar conjuntos de datos iniciales y discutir los detalles del proceso de intercambio de riñones. También agradecemos a Don Sheehy por habernos hecho notar la idea del intercambio de zapatos. Este trabajo fue apoyado en parte por la Fundación Nacional de Ciencias bajo los subsidios IIS-0427858 y CCF-0514922. REFERENCIAS [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh y P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Tiempo de limpieza (segundos) Número de pacientes Nuestro algoritmo Nuestro algoritmo con sembrador de columnas restringido Nuestro algoritmo sin demostrador de optimalidad Formulación de ciclo CPLEX Figura 6: Resultados experimentales: tiempo de ejecución promedio con barras de desviación estándar. Rama y precio: Generación de columnas para resolver programas enteros enormes. Investigación de Operaciones, 46:316-329, mayo-junio de 1998. [2] R. Dechter y J. Pearl. Estrategias generalizadas de búsqueda de mejor primero y la optimalidad de A*. Revista de la ACM, 32(3):505-536, 1985. [3] F. L. Delmonico. Intercambio de riñones - avances en el trasplante de donante vivo. Revista de Medicina de Nueva Inglaterra, 350:1812-1814, 2004. [4] J. Edmonds. Camino, árboles y flores. Revista Canadiense de Matemáticas, 17:449-467, 1965. [5] M. R. Garey y D. S. Johnson. Computadoras e Intractabilidad; Una Guía de la Teoría de NP-Completitud. 1990. [6] S. E. Gentry, D. L. Segev y R. A. Montgomery. Una comparación de las poblaciones atendidas por donación emparejada de riñón y donación emparejada de lista. Revista Americana de Trasplantes, 5(8):1914-1921, agosto de 2005. [7] P. Hart, N. Nilsson y B. Raphael. Una base formal para la determinación heurística de caminos de costo mínimo. IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman y M. Padberg. Resolviendo problemas de programación de tripulaciones aéreas mediante ramificación y corte. Ciencia de la Gestión, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] Intercambio Nacional de Zapatos Impares. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Léelo, cámbialo. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez y M. U. Unver. Intercambio de riñones. Revista Trimestral de Economía, 119(2):457-488, mayo de 2004. [14] A. E. Roth, T. Sonmez y M. U. Unver. Un centro de intercambio de riñones en Nueva Inglaterra. Revista Económica Americana, 95(2):376-380, mayo de 2005. [15] A. E. Roth, T. Sonmez y M. U. Unver. Intercambio eficiente de riñones: Coincidencia de deseos en un mercado con preferencias basadas en la compatibilidad. American Economic Review, próximo. [16] E. Rothberg. Algoritmo de emparejamiento de peso máximo de Gabow n3: una implementación. El Primer Desafío de Implementación DIMACS, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver y F. L. Delmonico. Aumentando la oportunidad de donación de riñón en vida mediante el emparejamiento para intercambios de dos y tres vías. Trasplante, 81(5):773-782, 2006. [18] T. Sandholm. Algoritmos óptimos de determinación de ganadores. En Subastas Combinatorias, Cramton, Shoham y Steinberg, eds. MIT Press, 2006. [19] T. Sandholm y S. Suri. Restricciones laterales y atributos no relacionados con el precio en los mercados. En el taller IJCAI-2001 sobre Razonamiento de Restricciones Distribuidas, páginas 55-61, Seattle, WA, 2001. Para aparecer en Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb y R. A. Montgomery. Donación emparejada de riñón y optimización del uso de órganos de donantes vivos. Revista de la Asociación Médica Estadounidense, 293(15):1883-1890, abril de 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver. Intercambio dinámico de riñones. Documento de trabajo. [23] Sistema de Datos Renales de los Estados Unidos (USRDS). http://www.usrds.org/. [24] S. A. Zenios. Control óptimo de un programa de intercambio de riñones emparejados. Ciencias de la Gestión, 48(3):328-342, marzo de 2002. 304 ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "solution approach": {
            "translated_key": "enfoque de solución",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national kidney exchange.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that column generation scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
                "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "Kidney failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a kidney transplant.",
                "Kidney transplants are by far the most common transplant.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
                "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of barter exchanges.",
                "In a barter-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe exchange in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
                "We can encode a barter exchange market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An exchange is a collection of disjoint cycles.",
                "The weight of an exchange is the sum of its cycle weights.",
                "A social welfare maximizing exchange is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market.",
                "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
                "For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general barter exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight exchange has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
                "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
                "Table 2 gives additional characteristics of the kidney-exchange market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect matching.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation.",
                "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
                "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the cycle formulation.",
                "We show how to construct an equivalent solution in the edge formulation.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the cycle formulation is tighter than the edge formulation.",
                "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, column generation is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
                "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
                "To make this idea work then, we used column generation to solve the edge formulation.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of branch-and-price.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full cycle formulation.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental column generation approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
                "Column Generation One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many column generation problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
                "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
                "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and column generation.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that column generation scales dramatically better than constraint generation.",
                "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
                "Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
                "Branch-and-price: Column generation for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by kidney paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Kidney exchange.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A kidney exchange clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight matching algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live kidney donation by matching for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "Kidney paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic kidney exchange.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-kidney exchange program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "edge formulation": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national kidney exchange.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that column generation scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
                "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "Kidney failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a kidney transplant.",
                "Kidney transplants are by far the most common transplant.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
                "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of barter exchanges.",
                "In a barter-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe exchange in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
                "We can encode a barter exchange market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An exchange is a collection of disjoint cycles.",
                "The weight of an exchange is the sum of its cycle weights.",
                "A social welfare maximizing exchange is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market.",
                "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
                "For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general barter exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight exchange has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
                "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
                "Table 2 gives additional characteristics of the kidney-exchange market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN <br>edge formulation</br> In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect matching.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the <br>edge formulation</br> approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the <br>edge formulation</br> and cycle formulation.",
                "The <br>edge formulation</br> can be solved in polynomial time when there are no constraints on the cycle size.",
                "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the <br>edge formulation</br>.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the cycle formulation.",
                "We show how to construct an equivalent solution in the <br>edge formulation</br>.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the <br>edge formulation</br> has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the cycle formulation is tighter than the <br>edge formulation</br>.",
                "Additionally, for a graph with m edges, the <br>edge formulation</br> requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, column generation is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
                "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the <br>edge formulation</br> encoding from Section 4.",
                "To make this idea work then, we used column generation to solve the <br>edge formulation</br>.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of branch-and-price.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full cycle formulation.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental column generation approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
                "Column Generation One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many column generation problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
                "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
                "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and column generation.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that column generation scales dramatically better than constraint generation.",
                "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
                "Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
                "Branch-and-price: Column generation for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by kidney paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Kidney exchange.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A kidney exchange clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight matching algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live kidney donation by matching for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "Kidney paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic kidney exchange.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-kidney exchange program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [
                "SOLUTION APPROACHES BASED ON AN <br>edge formulation</br> In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the <br>edge formulation</br> approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the <br>edge formulation</br> and cycle formulation.",
                "The <br>edge formulation</br> can be solved in polynomial time when there are no constraints on the cycle size.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the <br>edge formulation</br>."
            ],
            "translated_annotated_samples": [
                "ENFOQUES DE SOLUCIÓN BASADOS EN UNA FORMULACIÓN DE ARISTAS En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada arista.",
                "Agrega una restricción por cada camino p que viola, y además, agrega una restricción para cada camino con los mismos vértices interiores (sin contar los extremos) que p. Esto mejoró la velocidad general. 4.3 Rendimiento experimental Resultó que incluso con estas mejoras, el enfoque de <br>formulación de aristas</br> no puede despejar un intercambio de riñón con 100 vértices en el tiempo en que la formulación de ciclos (descrita más adelante en la Sección 5) puede despejar uno con 10,000 vértices.",
                "Podemos generalizar este codificado para L arbitrario. Sea C(L) el conjunto de todos los ciclos de G con longitud a lo sumo L. Entonces el siguiente ILP encuentra la cobertura de ciclos de máximo peso por ciclos de C(L): max c∈C(L) wcc sujeto a c:vi∈c c ≤ 1 ∀vi ∈ V con c ∈ {0, 1} ∀c ∈ C(L) 5.1 Formulación de Arista vs Ciclo En esta sección, consideramos los méritos de la <br>formulación de arista</br> y la formulación de ciclo.",
                "La <br>formulación del problema del borde</br> se puede resolver en tiempo polinómico cuando no hay restricciones en el tamaño del ciclo.",
                "La relajación LP de la formulación del ciclo domina débilmente la relajación LP de la <br>formulación del borde</br>."
            ],
            "translated_text": "Algoritmos de compensación para mercados de intercambio de trueque: Facilitando los intercambios de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales. El problema de compensación implica encontrar un intercambio que maximice el bienestar social cuando la longitud máxima de un ciclo está fija. Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente. Además, en los intercambios de trueque en general, más agentes se ven afectados si uno abandona un ciclo más largo. Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro. Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones. Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. La clave es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. Concluimos que la generación de columnas escala considerablemente mejor que la generación de restricciones. Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de riñón. Nuestro algoritmo reemplazó a CPLEX como el algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones. Las carreras de fósforos se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas]: [General] Términos Generales Algoritmos, Economía 1. INTRODUCCIÓN El papel de los riñones es filtrar los desechos de la sangre. La insuficiencia renal resulta en la acumulación de estos desechos, lo cual conduce a la muerte en meses. Una opción de tratamiento es la diálisis, en la que el paciente va a un hospital para que su sangre sea filtrada por una máquina externa. Se requieren varias visitas por semana, y cada una lleva varias horas. La calidad de vida en diálisis puede ser extremadamente baja, de hecho, muchos pacientes optan por retirarse de la diálisis, lo que conduce a una muerte natural. Solo el 12% de los pacientes en diálisis sobreviven 10 años [23]. En cambio, el tratamiento preferido es un trasplante de riñón. Los trasplantes de riñón son, con mucho, los trasplantes más comunes. Desafortunadamente, la demanda de riñones supera con creces la oferta. En los Estados Unidos en 2005, 4,052 personas murieron esperando un trasplante de riñón que les salvara la vida. Durante este tiempo, casi 30,000 personas fueron añadidas a la lista nacional de espera, mientras que solo 9,913 personas salieron de la lista después de recibir un riñón de donante fallecido. La lista de espera actualmente tiene más de 70,000 personas, y el tiempo de espera mediano varía de 2 a 5 años, dependiendo del tipo de sangre. Para muchos pacientes con enfermedad renal, la mejor opción es encontrar un donante vivo, es decir, una persona sana dispuesta a donar uno de sus dos riñones. Aunque existen mercados para comprar y vender riñones de donantes vivos, la comercialización de órganos humanos es casi universalmente considerada como antiética, y la práctica suele ser explícitamente ilegal, como en los Estados Unidos. Sin embargo, en la mayoría de los países, la donación en vida es legal, siempre y cuando se realice como un regalo sin compensación financiera. En 2005, hubo 6,563 donaciones en vida en los Estados Unidos. El número de donaciones en vida habría sido mucho mayor si no fuera por el hecho de que, con frecuencia, un posible donante y su receptor previsto son incompatibles en tipo de sangre o tipo de tejido. En el pasado, el donante incompatible fue enviado a casa, dejando al paciente a la espera de un riñón de un donante fallecido. Sin embargo, ahora hay algunos intercambios renales regionales en los Estados Unidos, en los que los pacientes pueden intercambiar sus donantes incompatibles entre sí, para así obtener cada uno un donante compatible. Estos mercados son ejemplos de intercambios de trueque. En un mercado de intercambio por trueque, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Los intercambios de trueque son ubicuos: ejemplos incluyen Peerflix (DVDs) [11], Read It Swap It (libros) [12], e Intervac (casas de vacaciones) [9]. Durante muchos años, incluso ha habido un gran intercambio de zapatos en los Estados Unidos [10]. Las personas con pies de diferentes tamaños usan esto para evitar tener que comprar dos pares de zapatos. Los amputados de pierna tienen un intercambio separado para compartir el costo de comprar un par de zapatos. Podemos codificar un mercado de intercambio de trueque como un grafo dirigido G = (V, E) de la siguiente manera. Construye un vértice para cada agente. Agregar un borde ponderado e desde un agente vi hacia otro vj, si vi desea el artículo de vj. El peso que representamos de e es la utilidad para vi de obtener el artículo vjs. Un ciclo c en este grafo representa un intercambio posible, donde cada agente en el ciclo obtiene el artículo del siguiente agente. El peso wc de un ciclo c es la suma de los pesos de sus aristas. Un intercambio es una colección de ciclos disjuntos. El peso de un intercambio es la suma de los pesos de sus ciclos. Un intercambio que maximiza el bienestar social es aquel con un peso máximo. La Figura 1 ilustra un mercado de ejemplo con 5 agentes, {v1, v2, . . . , v5}, en el que todos los bordes tienen peso 1. El mercado tiene 4 ciclos, c1 = v1, v2, c2 = v2, v3, c3 = v3, v4 y c4 = v1, v2, v3, v4, v5, y dos intercambios maximales (de inclusión), a saber, M1 = {c4} y M2 = {c1, c3}. El intercambio M1 tiene tanto el peso máximo como la cardinalidad máxima (es decir, incluye la mayor cantidad de aristas/vértices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figura 1: Mercado de intercambio de trueque de ejemplo. El problema de compensación consiste en encontrar un intercambio de peso máximo que consista en ciclos con una longitud de a lo sumo una pequeña constante L. Esta restricción de longitud de ciclo surge naturalmente por varias razones. Por ejemplo, en un intercambio de riñón, todas las operaciones en un ciclo deben realizarse simultáneamente; de lo contrario, un donante podría retractarse después de que su pareja incompatible haya recibido un riñón. (No se puede redactar un contrato vinculante para donar un órgano). Esto da lugar a una restricción logística en el tamaño del ciclo: incluso si todos los donantes son operados primero y se utiliza el mismo personal e instalaciones para luego operar a los receptores, un ciclo k requiere entre 3k y 6k médicos, alrededor de 4k enfermeras y casi 2k salas de operaciones. Debido a tales limitaciones de recursos, es probable que el próximo mercado nacional de intercambio de riñones solo permita ciclos de longitud 2 y 3. Otra motivación para ciclos cortos es que si el ciclo falla en intercambiarse, menos agentes se ven afectados. Por ejemplo, las pruebas de último minuto en un intercambio de riñones a menudo revelan nuevas incompatibilidades que no fueron detectadas en las pruebas iniciales (en base a las cuales se construyó el grafo de compatibilidad). Más generalmente, un agente puede abandonar un ciclo si sus preferencias han cambiado, o simplemente no cumple con sus obligaciones (como enviar un libro a otro agente en el ciclo) debido a olvidos. En la Sección 3, demostramos que (la versión de decisión del) problema de despeje es NP-completo para L ≥ 3. Una posible estrategia sería buscar un buen heurístico o algoritmo de aproximación. Sin embargo, por dos razones, buscamos un algoritmo exacto basado en un programa lineal entero (PLE), que resolvemos utilizando una búsqueda especializada en árboles. • Primero, cualquier pérdida de optimalidad podría llevar a muertes de pacientes innecesarias. • Segundo, una característica atractiva de utilizar una formulación de PLE es que permite modelar fácilmente una serie de variaciones en el objetivo y agregar restricciones adicionales al problema. Por ejemplo, si se cree que los ciclos de 3 elementos tienen más probabilidades de fallar que los ciclos de 2 elementos, entonces simplemente se les puede asignar un peso que sea apropiadamente menor que 3/2 del peso de un ciclo de 2 elementos. O, si por diversas razones (por ejemplo, éticas) se requiere un intercambio de cardinalidad máxima, al menos se puede encontrar en una segunda pasada la solución (de entre todas las soluciones de cardinalidad máxima) que tenga el menor número de 3-ciclos. Otras variaciones que se pueden resolver incluyen encontrar diversas formas de colecciones de ciclos tolerantes a fallos (no disjuntas) en caso de que ciertos pares que se creían compatibles resulten ser incompatibles después de todo. En este documento, presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Las codificaciones de ILP directas son demasiado grandes para siquiera construirse en el hardware actual, sin mencionar resolverlas. La clave entonces es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas (principalmente específicas del problema) que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. 1.1 Trabajos Previos Varios artículos recientes han utilizado simulaciones y algoritmos de compensación de mercado para explorar el impacto de un intercambio nacional de riñones [13, 20, 6, 14, 15, 17]. Por ejemplo, utilizando el algoritmo de coincidencia máxima de Edmonds [4], [20] se muestra que un mercado nacional de intercambio por pares (utilizando solo ciclos de longitud 2) resultaría en más trasplantes, tiempos de espera reducidos y ahorros de $750 millones en costos de atención médica durante 5 años. Esos resultados son conservadores de dos maneras. En primer lugar, el mercado simulado contenía solo 4,000 pacientes iniciales, con 250 pacientes añadidos cada 3 meses. Se nos ha informado que el mercado podría ser casi el doble de este tamaño. En segundo lugar, los intercambios se restringieron a ciclos de longitud 2 (porque eso es todo lo que se puede modelar como coincidencia máxima y resolver utilizando el algoritmo de Edmonds). Permitir ciclos de longitud 3 conlleva a ganancias adicionales significativas. Esto se ha demostrado en mercados de intercambio de riñones con 100 pacientes utilizando CPLEX para resolver una codificación de programa entero del problema de compensación [15]. En este documento, presentamos un algoritmo alternativo para este programa entero que puede despejar mercados con más de 10,000 pacientes (y el mismo número de donantes dispuestos). Permitir ciclos de longitud mayor a 3 a menudo no conduce a ninguna mejora en el tamaño del intercambio [15]. (Además, en un modelo teórico simplificado, cualquier intercambio de riñón se puede convertir en uno con ciclos de longitud de a lo sumo 4 [15].) Si bien esto no se aplica a intercambios de trueque generales, ni siquiera a todos los mercados de intercambio de riñones, en la Sección 5.2.3 hacemos uso de la observación de que los ciclos cortos son suficientes para aumentar drásticamente la velocidad de nuestro algoritmo. A un nivel alto, el problema de compensación para intercambios de trueque es similar al problema de compensación (también conocido como problema de determinación de ganadores) en subastas combinatorias. En ambos contextos, la idea es recopilar toda la información pertinente sobre los agentes en un punto central de compensación y ejecutar un algoritmo centralizado de compensación para determinar la asignación. Ambos problemas son NP-duros. Ambos se resuelven mejor utilizando técnicas de búsqueda en árboles. Desde 1999, se ha realizado un trabajo significativo en informática y investigación de operaciones sobre algoritmos de búsqueda de árboles óptimos más rápidos para despejar subastas combinatorias. (Para una revisión reciente, consulte [18].) Sin embargo, el problema de compensación del intercambio de riñones (con un límite de 3 o más en el tamaño del ciclo) es diferente del problema de compensación de la subasta combinatoria de formas significativas. La diferencia más importante es que las formulaciones naturales del problema de subasta combinatoria tienden a ajustarse fácilmente en la memoria, por lo que el tiempo es el cuello de botella en la práctica. Por el contrario, las formulaciones naturales del problema de intercambio de riñones (con L = 3) ocupan al menos espacio cúbico en el número de pacientes para incluso modelar, y por lo tanto la memoria se convierte en un cuello de botella mucho antes que el tiempo al utilizar la búsqueda de árbol estándar, como branch-and-cut en CPLEX, para abordar el problema. (En una computadora de 1GB y un generador de instancias estándar realista, discutido más adelante, CPLEX 10.010 se queda sin memoria en cinco de las diez instancias de 900 pacientes y en las diez de las diez instancias de 1,000 pacientes que generamos). Por lo tanto, los enfoques que se han desarrollado para subastas combinatorias no pueden manejar el problema del intercambio de riñones. 1.2 Esquema del documento El resto del documento está organizado de la siguiente manera. La sección 2 discute el proceso mediante el cual generamos datos realistas del mercado de intercambio de riñones, con el fin de comparar los algoritmos de compensación. La sección 3 contiene una demostración de que el problema de decisión de compensación del mercado es NP-completo. Las secciones 4 y 5 contienen cada una una formulación ILP del problema de compensación. También detallamos en esas secciones nuestras técnicas utilizadas para resolver esos programas en instancias grandes. La sección 6 presenta experimentos sobre las diversas técnicas. La sección 7 discute la implementación reciente de nuestro algoritmo. Finalmente, presentamos nuestras conclusiones en la Sección 8 y sugerimos direcciones para investigaciones futuras. CARACTERÍSTICAS DEL MERCADO Y GENERADOR DE INSTANCIAS Probamos los algoritmos en mercados simulados de intercambio de riñones, los cuales son generados por un proceso descrito en Saidman et al. [17]. Este proceso se basa en los extensos datos a nivel nacional mantenidos por la Red Unida para el Comparto de Órganos (UNOS), por lo que genera una distribución realista de instancias. Varios artículos han utilizado variaciones de este proceso para demostrar la efectividad de un intercambio nacional de riñones (extrapolando de pequeñas instancias o restringiendo la compensación a ciclos de 2) [6, 20, 14, 13, 15, 17]. En resumen, el proceso implica generar pacientes con un tipo de sangre, sexo y probabilidad de ser incompatible en el tipo de tejido con un donante elegido al azar. Estas probabilidades se basan en datos reales de la población del mundo real. A cada paciente se le asigna un posible donante con un tipo de sangre aleatorio y una relación con el paciente. Si el paciente y el posible donante son incompatibles, ambos son ingresados en el mercado. La información del tipo de sangre y del tipo de tejido se utiliza luego para decidir qué pacientes y donantes son compatibles. Una complicación, manejada por el generador, es que si la paciente es mujer y ha tenido un hijo con su potencial donante, entonces la probabilidad de que los dos sean incompatibles aumenta. (Esto se debe a que la madre desarrolla anticuerpos contra su pareja durante el embarazo). Finalmente, aunque nuestros algoritmos pueden manejar funciones de peso más generales, los pacientes tienen una utilidad de 1 para donantes compatibles, ya que su probabilidad de supervivencia no se ve afectada por la elección del donante [3]. Esto significa que el intercambio de peso máximo tiene la máxima cardinalidad. La Tabla 1 proporciona límites inferiores y superiores sobre el tamaño de un intercambio de máxima cardinalidad en el mercado de intercambio de riñones. Los límites inferiores se encontraron al despejar el mercado solo con ciclos de longitud 2, mientras que los límites superiores no tenían restricción en la longitud del ciclo. Para cada tamaño de mercado, los límites fueron calculados sobre 10 mercados generados aleatoriamente. Ten en cuenta que puede haber una gran cantidad de variabilidad en los mercados: en un mercado de 5000 pacientes, menos de 1000 pacientes estaban en el intercambio de cardinalidad máxima. Tamaño máximo de intercambio Longitud-2 ciclos solamente Ciclos arbitrarios Pacientes Media Máximo Media Máximo 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Tabla 1: Límites superiores e inferiores en el tamaño del intercambio. La Tabla 2 proporciona características adicionales del mercado de intercambio de riñones. Ten en cuenta que un mercado con 5000 pacientes puede tener más de 450 millones de ciclos de longitud 2 y 3. Longitud de los bordes 2 y 3 ciclos Pacientes Media Máx. Media Máx. 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Tabla 2: Características del mercado. 297 COMPLEJIDAD DEL PROBLEMA En esta sección, demostramos que (la versión de decisión del) problema de compensación de mercado con ciclos cortos es NP-completo. Teorema 1. Dado un grafo G = (V, E) y un entero L ≥ 3, el problema de decidir si G admite una cubierta de ciclos perfecta que contenga ciclos de longitud como máximo L es NP-completo. Prueba. Es claro que este problema está en NP. Para la NP-dificultad, reducimos desde 3D-Matching, que es el problema de, dado conjuntos disjuntos X, Y y Z de tamaño q, y un conjunto de triples T ⊆ X × Y × Z, decidir si existe un subconjunto disjunto M de T con tamaño q. Una idea directa es construir un grafo tripartito con conjuntos de vértices X ∪ Y ∪ Z y aristas dirigidas (xa, yb), (yb, zc) y (zc, xa) para cada triple ti = {xa, yb, zc} ∈ T. Sin embargo, no es demasiado difícil ver que esta codificación falla porque una cobertura de ciclo perfecta puede incluir un ciclo sin un triple correspondiente. En cambio, utilizamos la siguiente reducción. Dado una instancia de 3D-Matching, construye un vértice para cada elemento en X, Y y Z. Para cada tripleta, ti = {xa, yb, zc}, construya el dispositivo en la Figura 2, que es similar a uno en Garey y Johnson [5, pp 68-69]. Ten en cuenta que los dispositivos se intersecan solo en los vértices de X ∪ Y ∪ Z. Es claro que esta construcción puede realizarse en tiempo polinómico. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figura 2: Dispositivo de NP-completitud para la tripleta ti y la longitud máxima del ciclo L. Sea M un emparejamiento 3D perfecto. Mostraremos que la construcción admite una cobertura perfecta de ciclos mediante ciclos cortos. Si ti = {xa, yb, zc} ∈ M, añade desde el gadget de ti los tres ciclos de longitud L que contienen a xa, yb y zc respectivamente. También añade el ciclo ª xi a, yi b, zi c «. De lo contrario, si ti ∉ M, añade los tres ciclos de longitud L que contienen xi a, yi b y zi c respectivamente. Es claro que todos los vértices están cubiertos, ya que M particiona X × Y × Z. Por el contrario, supongamos que tenemos una cobertura perfecta mediante ciclos cortos. Ten en cuenta que la construcción solo tiene ciclos cortos de longitudes 3 y L, y ningún ciclo corto involucra vértices distintos de dos gadgets diferentes. Es fácil ver entonces que en una cubierta perfecta, cada gadget ti contribuye ciclos de acuerdo a los casos anteriores: ti ∈ M, o ti /∈ M. Por lo tanto, existe un Emparejamiento 3D perfecto en la instancia original. 4. ENFOQUES DE SOLUCIÓN BASADOS EN UNA FORMULACIÓN DE ARISTAS En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada arista. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos sin restricciones de longitud de ciclo. Dado un mercado G = (V, E), construya un grafo bipartito con un vértice para cada agente y un vértice para cada artículo. Agregar un borde ev con peso 0 entre cada agente v y su propio artículo. En este punto, la codificación es una coincidencia perfecta. Ahora, para cada arista e = (vi, vj) en el mercado original, añade una arista e con peso we entre el agente vi y el artículo de vj. Los emparejamientos perfectos en esta codificación corresponden exactamente con las cubiertas de ciclos, ya que cada vez que se toma un artículo de un agente, debe recibir el artículo de otro agente. Se deduce que el problema de despeje sin restricciones puede resolverse en tiempo polinómico encontrando un emparejamiento perfecto de peso máximo. La Figura 3 contiene la representación en forma de grafo bipartito del mercado de ejemplo de la Figura 1. Las aristas de peso 0 están codificadas con líneas discontinuas, mientras que las aristas de mercado están en negrita. Elementos Agentes v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figura 3: Codificación de emparejamiento perfecto del mercado en la Figura 1. Alternativamente, podemos resolver el problema codificándolo como un ILP con una variable para cada arista en el grafo de mercado original G. Este ILP, que se muestra a continuación, tiene la ventaja de que puede ser extendido de manera natural para tratar con restricciones de longitud de ciclo. Por lo tanto, para el resto de esta sección, este será el enfoque que seguiremos. Se busca un max e∈E tal que para todo vi ∈ V, se cumplan las restricciones de conservación eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 y la restricción de capacidad eout=(vi,vj ) eout ≤ 1. Si se permite que los ciclos tengan una longitud de como máximo L, es fácil ver que solo necesitamos hacer los siguientes cambios en el ILP. Para cada camino de longitud L (a lo largo del documento, no incluimos ciclos en la definición de camino) p = ep1, ep2, ..., epL, agregar una restricción ep1 + ep2 + ... + epL ≤ L − 1, que excluye al camino p de cualquier solución factible. Desafortunadamente, en un mercado con solo 1000 pacientes, el número de caminos de longitud 3 supera los 400 millones, por lo que ni siquiera podemos construir este ILP sin quedarnos sin memoria. Por lo tanto, utilizamos una búsqueda en árbol con un enfoque de formulación incremental. Específicamente, utilizamos CPLEX, aunque añadimos restricciones como planos de corte durante el proceso de búsqueda en el árbol. Comenzamos con solo un pequeño subconjunto de las restricciones en el ILP. Dado que este ILP es pequeño, CPLEX puede resolver su relajación LP. Luego verificamos si alguna de las restricciones faltantes es violada por la solución fraccional. Si es así, generamos un conjunto de estas restricciones, las añadimos al ILP y repetimos. Incluso una vez que se satisfacen todas las restricciones, puede que no haya una solución entera que coincida con el límite superior fraccional, y aunque la hubiera, el solucionador de PL podría no encontrarla. En estos casos, CPLEX ramifica en una variable (utilizamos la estrategia de ramificación predeterminada de CPLEX) y genera un nuevo nodo de búsqueda correspondiente a cada uno de los hijos. En cada nodo del árbol de búsqueda que se visita, se repite este proceso de resolver el LP y agregar restricciones. Claramente, este enfoque produce una solución óptima una vez que la búsqueda en el árbol finaliza. Todavía necesitamos explicar los detalles del generador de restricciones (es decir, seleccionar qué restricciones comenzar) y la generación de restricciones (es decir, seleccionar qué restricciones violadas incluir). Describimos brevemente estos en las dos subsecciones siguientes, respectivamente. 4.1 Sembrador de Restricciones El principal sembrador de restricciones que desarrollamos prohíbe cualquier camino de longitud L − 1 que no tenga un borde cerrando el ciclo desde su inicio hasta su final. Si bien es costoso computacionalmente encontrar estas restricciones, su adición enfoca la búsqueda lejos de los caminos que no pueden estar en la solución final. También intentamos sembrar el LP con una colección aleatoria de restricciones del ILP. 4.2 Generación de Restricciones Experimentamos con varios generadores de restricciones. En cada caso, dada una solución fraccional, construimos el subgrafo de aristas con valor positivo. Este gráfico es mucho más pequeño que el gráfico original, por lo que podemos realizar los cálculos siguientes de manera eficiente. En nuestro primer generador de restricciones, simplemente buscamos caminos de longitud L con una suma de valores mayor que L − 1. Para cualquier camino de este tipo, restringimos su suma para que sea como máximo L − 1. Ten en cuenta que si hay un ciclo c con longitud |c| > L, podría contener hasta |c| caminos que violan. En nuestro segundo generador de restricciones, solo agregamos una restricción para tales ciclos: la suma de aristas en el ciclo puede ser a lo sumo |c|(L − 1)/L. Este generador hizo que el algoritmo fuera más lento, por lo que optamos por ir en la dirección opuesta en el desarrollo de nuestro generador final. Agrega una restricción por cada camino p que viola, y además, agrega una restricción para cada camino con los mismos vértices interiores (sin contar los extremos) que p. Esto mejoró la velocidad general. 4.3 Rendimiento experimental Resultó que incluso con estas mejoras, el enfoque de <br>formulación de aristas</br> no puede despejar un intercambio de riñón con 100 vértices en el tiempo en que la formulación de ciclos (descrita más adelante en la Sección 5) puede despejar uno con 10,000 vértices. En otras palabras, los enfoques basados en generación de columnas resultaron ser drásticamente mejores que los enfoques basados en generación de restricciones. Por lo tanto, en el resto del documento nos enfocaremos en la formulación del ciclo y en los enfoques basados en la generación de columnas. 5. Enfoques de solución basados en una formulación cíclica. En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada ciclo. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos cuando los ciclos tienen longitud 2. Dado un mercado G = (V, E), construya un nuevo grafo en V con un peso wc en cada arista de ciclo c de longitud 2. Es fácil ver que los emparejamientos en este nuevo grafo corresponden a coberturas de ciclos por ciclos de longitud 2 en el grafo original del mercado. Por lo tanto, el problema de equilibrio de mercado con L = 2 se puede resolver en tiempo polinómico encontrando un emparejamiento de peso máximo. Figura 4: Codificación del emparejamiento de peso máximo del mercado en la Figura 1. Podemos generalizar este codificado para L arbitrario. Sea C(L) el conjunto de todos los ciclos de G con longitud a lo sumo L. Entonces el siguiente ILP encuentra la cobertura de ciclos de máximo peso por ciclos de C(L): max c∈C(L) wcc sujeto a c:vi∈c c ≤ 1 ∀vi ∈ V con c ∈ {0, 1} ∀c ∈ C(L) 5.1 Formulación de Arista vs Ciclo En esta sección, consideramos los méritos de la <br>formulación de arista</br> y la formulación de ciclo. La <br>formulación del problema del borde</br> se puede resolver en tiempo polinómico cuando no hay restricciones en el tamaño del ciclo. La formulación del ciclo se puede resolver en tiempo polinómico cuando el tamaño del ciclo es a lo sumo 2. Ahora consideramos el caso de ciclos cortos de longitud como máximo L, donde L ≥ 3. Nuestros algoritmos de búsqueda de árboles utilizan la relajación LP de estas formulaciones para proporcionar cotas superiores de la solución óptima. Estos límites ayudan a podar subárboles y guiar la búsqueda de las formas habituales. Teorema 2. La relajación LP de la formulación del ciclo domina débilmente la relajación LP de la <br>formulación del borde</br>. ",
            "candidates": [],
            "error": [
                [
                    "formulación de aristas",
                    "formulación de arista",
                    "formulación del problema del borde",
                    "formulación del borde"
                ]
            ]
        },
        "cycle formulation": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national kidney exchange.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that column generation scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
                "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "Kidney failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a kidney transplant.",
                "Kidney transplants are by far the most common transplant.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
                "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of barter exchanges.",
                "In a barter-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe exchange in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
                "We can encode a barter exchange market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An exchange is a collection of disjoint cycles.",
                "The weight of an exchange is the sum of its cycle weights.",
                "A social welfare maximizing exchange is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market.",
                "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
                "For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general barter exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight exchange has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
                "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
                "Table 2 gives additional characteristics of the kidney-exchange market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect matching.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the <br>cycle formulation</br> (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the <br>cycle formulation</br> and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A <br>cycle formulation</br> In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs <br>cycle formulation</br> In this section, we consider the merits of the edge formulation and <br>cycle formulation</br>.",
                "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
                "The <br>cycle formulation</br> can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the <br>cycle formulation</br> weakly dominates the LP relaxation of the edge formulation.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the <br>cycle formulation</br>.",
                "We show how to construct an equivalent solution in the edge formulation.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the <br>cycle formulation</br> has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the <br>cycle formulation</br> is tighter than the edge formulation.",
                "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the <br>cycle formulation</br> requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the <br>cycle formulation</br>, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the <br>cycle formulation</br> does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: <br>cycle formulation</br>.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, column generation is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
                "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
                "To make this idea work then, we used column generation to solve the edge formulation.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of branch-and-price.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full <br>cycle formulation</br>.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental column generation approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
                "Column Generation One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many column generation problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
                "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
                "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and column generation.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that column generation scales dramatically better than constraint generation.",
                "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
                "Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX <br>cycle formulation</br> Figure 6: Experimental results: average runtime with standard deviation bars.",
                "Branch-and-price: Column generation for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by kidney paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Kidney exchange.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A kidney exchange clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight matching algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live kidney donation by matching for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "Kidney paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic kidney exchange.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-kidney exchange program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the <br>cycle formulation</br> (described later in Section 5) can clear one with 10,000 vertices.",
                "Therefore, in the rest of the paper, we will focus on the <br>cycle formulation</br> and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A <br>cycle formulation</br> In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs <br>cycle formulation</br> In this section, we consider the merits of the edge formulation and <br>cycle formulation</br>.",
                "The <br>cycle formulation</br> can be solved in polynomial time when the cycle size is at most 2."
            ],
            "translated_annotated_samples": [
                "Agrega una restricción por cada camino p que viola, y además, agrega una restricción para cada camino con los mismos vértices interiores (sin contar los extremos) que p. Esto mejoró la velocidad general. 4.3 Rendimiento experimental Resultó que incluso con estas mejoras, el enfoque de formulación de aristas no puede despejar un intercambio de riñón con 100 vértices en el tiempo en que la <br>formulación de ciclos</br> (descrita más adelante en la Sección 5) puede despejar uno con 10,000 vértices.",
                "Por lo tanto, en el resto del documento nos enfocaremos en la <br>formulación del ciclo</br> y en los enfoques basados en la generación de columnas. 5.",
                "Enfoques de solución basados en una <br>formulación cíclica</br>. En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada ciclo.",
                "Podemos generalizar este codificado para L arbitrario. Sea C(L) el conjunto de todos los ciclos de G con longitud a lo sumo L. Entonces el siguiente ILP encuentra la cobertura de ciclos de máximo peso por ciclos de C(L): max c∈C(L) wcc sujeto a c:vi∈c c ≤ 1 ∀vi ∈ V con c ∈ {0, 1} ∀c ∈ C(L) 5.1 Formulación de Arista vs Ciclo En esta sección, consideramos los méritos de la formulación de arista y la <br>formulación de ciclo</br>.",
                "La <br>formulación del ciclo</br> se puede resolver en tiempo polinómico cuando el tamaño del ciclo es a lo sumo 2."
            ],
            "translated_text": "Algoritmos de compensación para mercados de intercambio de trueque: Facilitando los intercambios de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales. El problema de compensación implica encontrar un intercambio que maximice el bienestar social cuando la longitud máxima de un ciclo está fija. Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente. Además, en los intercambios de trueque en general, más agentes se ven afectados si uno abandona un ciclo más largo. Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro. Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones. Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. La clave es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. Concluimos que la generación de columnas escala considerablemente mejor que la generación de restricciones. Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de riñón. Nuestro algoritmo reemplazó a CPLEX como el algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones. Las carreras de fósforos se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas]: [General] Términos Generales Algoritmos, Economía 1. INTRODUCCIÓN El papel de los riñones es filtrar los desechos de la sangre. La insuficiencia renal resulta en la acumulación de estos desechos, lo cual conduce a la muerte en meses. Una opción de tratamiento es la diálisis, en la que el paciente va a un hospital para que su sangre sea filtrada por una máquina externa. Se requieren varias visitas por semana, y cada una lleva varias horas. La calidad de vida en diálisis puede ser extremadamente baja, de hecho, muchos pacientes optan por retirarse de la diálisis, lo que conduce a una muerte natural. Solo el 12% de los pacientes en diálisis sobreviven 10 años [23]. En cambio, el tratamiento preferido es un trasplante de riñón. Los trasplantes de riñón son, con mucho, los trasplantes más comunes. Desafortunadamente, la demanda de riñones supera con creces la oferta. En los Estados Unidos en 2005, 4,052 personas murieron esperando un trasplante de riñón que les salvara la vida. Durante este tiempo, casi 30,000 personas fueron añadidas a la lista nacional de espera, mientras que solo 9,913 personas salieron de la lista después de recibir un riñón de donante fallecido. La lista de espera actualmente tiene más de 70,000 personas, y el tiempo de espera mediano varía de 2 a 5 años, dependiendo del tipo de sangre. Para muchos pacientes con enfermedad renal, la mejor opción es encontrar un donante vivo, es decir, una persona sana dispuesta a donar uno de sus dos riñones. Aunque existen mercados para comprar y vender riñones de donantes vivos, la comercialización de órganos humanos es casi universalmente considerada como antiética, y la práctica suele ser explícitamente ilegal, como en los Estados Unidos. Sin embargo, en la mayoría de los países, la donación en vida es legal, siempre y cuando se realice como un regalo sin compensación financiera. En 2005, hubo 6,563 donaciones en vida en los Estados Unidos. El número de donaciones en vida habría sido mucho mayor si no fuera por el hecho de que, con frecuencia, un posible donante y su receptor previsto son incompatibles en tipo de sangre o tipo de tejido. En el pasado, el donante incompatible fue enviado a casa, dejando al paciente a la espera de un riñón de un donante fallecido. Sin embargo, ahora hay algunos intercambios renales regionales en los Estados Unidos, en los que los pacientes pueden intercambiar sus donantes incompatibles entre sí, para así obtener cada uno un donante compatible. Estos mercados son ejemplos de intercambios de trueque. En un mercado de intercambio por trueque, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Los intercambios de trueque son ubicuos: ejemplos incluyen Peerflix (DVDs) [11], Read It Swap It (libros) [12], e Intervac (casas de vacaciones) [9]. Durante muchos años, incluso ha habido un gran intercambio de zapatos en los Estados Unidos [10]. Las personas con pies de diferentes tamaños usan esto para evitar tener que comprar dos pares de zapatos. Los amputados de pierna tienen un intercambio separado para compartir el costo de comprar un par de zapatos. Podemos codificar un mercado de intercambio de trueque como un grafo dirigido G = (V, E) de la siguiente manera. Construye un vértice para cada agente. Agregar un borde ponderado e desde un agente vi hacia otro vj, si vi desea el artículo de vj. El peso que representamos de e es la utilidad para vi de obtener el artículo vjs. Un ciclo c en este grafo representa un intercambio posible, donde cada agente en el ciclo obtiene el artículo del siguiente agente. El peso wc de un ciclo c es la suma de los pesos de sus aristas. Un intercambio es una colección de ciclos disjuntos. El peso de un intercambio es la suma de los pesos de sus ciclos. Un intercambio que maximiza el bienestar social es aquel con un peso máximo. La Figura 1 ilustra un mercado de ejemplo con 5 agentes, {v1, v2, . . . , v5}, en el que todos los bordes tienen peso 1. El mercado tiene 4 ciclos, c1 = v1, v2, c2 = v2, v3, c3 = v3, v4 y c4 = v1, v2, v3, v4, v5, y dos intercambios maximales (de inclusión), a saber, M1 = {c4} y M2 = {c1, c3}. El intercambio M1 tiene tanto el peso máximo como la cardinalidad máxima (es decir, incluye la mayor cantidad de aristas/vértices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figura 1: Mercado de intercambio de trueque de ejemplo. El problema de compensación consiste en encontrar un intercambio de peso máximo que consista en ciclos con una longitud de a lo sumo una pequeña constante L. Esta restricción de longitud de ciclo surge naturalmente por varias razones. Por ejemplo, en un intercambio de riñón, todas las operaciones en un ciclo deben realizarse simultáneamente; de lo contrario, un donante podría retractarse después de que su pareja incompatible haya recibido un riñón. (No se puede redactar un contrato vinculante para donar un órgano). Esto da lugar a una restricción logística en el tamaño del ciclo: incluso si todos los donantes son operados primero y se utiliza el mismo personal e instalaciones para luego operar a los receptores, un ciclo k requiere entre 3k y 6k médicos, alrededor de 4k enfermeras y casi 2k salas de operaciones. Debido a tales limitaciones de recursos, es probable que el próximo mercado nacional de intercambio de riñones solo permita ciclos de longitud 2 y 3. Otra motivación para ciclos cortos es que si el ciclo falla en intercambiarse, menos agentes se ven afectados. Por ejemplo, las pruebas de último minuto en un intercambio de riñones a menudo revelan nuevas incompatibilidades que no fueron detectadas en las pruebas iniciales (en base a las cuales se construyó el grafo de compatibilidad). Más generalmente, un agente puede abandonar un ciclo si sus preferencias han cambiado, o simplemente no cumple con sus obligaciones (como enviar un libro a otro agente en el ciclo) debido a olvidos. En la Sección 3, demostramos que (la versión de decisión del) problema de despeje es NP-completo para L ≥ 3. Una posible estrategia sería buscar un buen heurístico o algoritmo de aproximación. Sin embargo, por dos razones, buscamos un algoritmo exacto basado en un programa lineal entero (PLE), que resolvemos utilizando una búsqueda especializada en árboles. • Primero, cualquier pérdida de optimalidad podría llevar a muertes de pacientes innecesarias. • Segundo, una característica atractiva de utilizar una formulación de PLE es que permite modelar fácilmente una serie de variaciones en el objetivo y agregar restricciones adicionales al problema. Por ejemplo, si se cree que los ciclos de 3 elementos tienen más probabilidades de fallar que los ciclos de 2 elementos, entonces simplemente se les puede asignar un peso que sea apropiadamente menor que 3/2 del peso de un ciclo de 2 elementos. O, si por diversas razones (por ejemplo, éticas) se requiere un intercambio de cardinalidad máxima, al menos se puede encontrar en una segunda pasada la solución (de entre todas las soluciones de cardinalidad máxima) que tenga el menor número de 3-ciclos. Otras variaciones que se pueden resolver incluyen encontrar diversas formas de colecciones de ciclos tolerantes a fallos (no disjuntas) en caso de que ciertos pares que se creían compatibles resulten ser incompatibles después de todo. En este documento, presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Las codificaciones de ILP directas son demasiado grandes para siquiera construirse en el hardware actual, sin mencionar resolverlas. La clave entonces es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas (principalmente específicas del problema) que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. 1.1 Trabajos Previos Varios artículos recientes han utilizado simulaciones y algoritmos de compensación de mercado para explorar el impacto de un intercambio nacional de riñones [13, 20, 6, 14, 15, 17]. Por ejemplo, utilizando el algoritmo de coincidencia máxima de Edmonds [4], [20] se muestra que un mercado nacional de intercambio por pares (utilizando solo ciclos de longitud 2) resultaría en más trasplantes, tiempos de espera reducidos y ahorros de $750 millones en costos de atención médica durante 5 años. Esos resultados son conservadores de dos maneras. En primer lugar, el mercado simulado contenía solo 4,000 pacientes iniciales, con 250 pacientes añadidos cada 3 meses. Se nos ha informado que el mercado podría ser casi el doble de este tamaño. En segundo lugar, los intercambios se restringieron a ciclos de longitud 2 (porque eso es todo lo que se puede modelar como coincidencia máxima y resolver utilizando el algoritmo de Edmonds). Permitir ciclos de longitud 3 conlleva a ganancias adicionales significativas. Esto se ha demostrado en mercados de intercambio de riñones con 100 pacientes utilizando CPLEX para resolver una codificación de programa entero del problema de compensación [15]. En este documento, presentamos un algoritmo alternativo para este programa entero que puede despejar mercados con más de 10,000 pacientes (y el mismo número de donantes dispuestos). Permitir ciclos de longitud mayor a 3 a menudo no conduce a ninguna mejora en el tamaño del intercambio [15]. (Además, en un modelo teórico simplificado, cualquier intercambio de riñón se puede convertir en uno con ciclos de longitud de a lo sumo 4 [15].) Si bien esto no se aplica a intercambios de trueque generales, ni siquiera a todos los mercados de intercambio de riñones, en la Sección 5.2.3 hacemos uso de la observación de que los ciclos cortos son suficientes para aumentar drásticamente la velocidad de nuestro algoritmo. A un nivel alto, el problema de compensación para intercambios de trueque es similar al problema de compensación (también conocido como problema de determinación de ganadores) en subastas combinatorias. En ambos contextos, la idea es recopilar toda la información pertinente sobre los agentes en un punto central de compensación y ejecutar un algoritmo centralizado de compensación para determinar la asignación. Ambos problemas son NP-duros. Ambos se resuelven mejor utilizando técnicas de búsqueda en árboles. Desde 1999, se ha realizado un trabajo significativo en informática y investigación de operaciones sobre algoritmos de búsqueda de árboles óptimos más rápidos para despejar subastas combinatorias. (Para una revisión reciente, consulte [18].) Sin embargo, el problema de compensación del intercambio de riñones (con un límite de 3 o más en el tamaño del ciclo) es diferente del problema de compensación de la subasta combinatoria de formas significativas. La diferencia más importante es que las formulaciones naturales del problema de subasta combinatoria tienden a ajustarse fácilmente en la memoria, por lo que el tiempo es el cuello de botella en la práctica. Por el contrario, las formulaciones naturales del problema de intercambio de riñones (con L = 3) ocupan al menos espacio cúbico en el número de pacientes para incluso modelar, y por lo tanto la memoria se convierte en un cuello de botella mucho antes que el tiempo al utilizar la búsqueda de árbol estándar, como branch-and-cut en CPLEX, para abordar el problema. (En una computadora de 1GB y un generador de instancias estándar realista, discutido más adelante, CPLEX 10.010 se queda sin memoria en cinco de las diez instancias de 900 pacientes y en las diez de las diez instancias de 1,000 pacientes que generamos). Por lo tanto, los enfoques que se han desarrollado para subastas combinatorias no pueden manejar el problema del intercambio de riñones. 1.2 Esquema del documento El resto del documento está organizado de la siguiente manera. La sección 2 discute el proceso mediante el cual generamos datos realistas del mercado de intercambio de riñones, con el fin de comparar los algoritmos de compensación. La sección 3 contiene una demostración de que el problema de decisión de compensación del mercado es NP-completo. Las secciones 4 y 5 contienen cada una una formulación ILP del problema de compensación. También detallamos en esas secciones nuestras técnicas utilizadas para resolver esos programas en instancias grandes. La sección 6 presenta experimentos sobre las diversas técnicas. La sección 7 discute la implementación reciente de nuestro algoritmo. Finalmente, presentamos nuestras conclusiones en la Sección 8 y sugerimos direcciones para investigaciones futuras. CARACTERÍSTICAS DEL MERCADO Y GENERADOR DE INSTANCIAS Probamos los algoritmos en mercados simulados de intercambio de riñones, los cuales son generados por un proceso descrito en Saidman et al. [17]. Este proceso se basa en los extensos datos a nivel nacional mantenidos por la Red Unida para el Comparto de Órganos (UNOS), por lo que genera una distribución realista de instancias. Varios artículos han utilizado variaciones de este proceso para demostrar la efectividad de un intercambio nacional de riñones (extrapolando de pequeñas instancias o restringiendo la compensación a ciclos de 2) [6, 20, 14, 13, 15, 17]. En resumen, el proceso implica generar pacientes con un tipo de sangre, sexo y probabilidad de ser incompatible en el tipo de tejido con un donante elegido al azar. Estas probabilidades se basan en datos reales de la población del mundo real. A cada paciente se le asigna un posible donante con un tipo de sangre aleatorio y una relación con el paciente. Si el paciente y el posible donante son incompatibles, ambos son ingresados en el mercado. La información del tipo de sangre y del tipo de tejido se utiliza luego para decidir qué pacientes y donantes son compatibles. Una complicación, manejada por el generador, es que si la paciente es mujer y ha tenido un hijo con su potencial donante, entonces la probabilidad de que los dos sean incompatibles aumenta. (Esto se debe a que la madre desarrolla anticuerpos contra su pareja durante el embarazo). Finalmente, aunque nuestros algoritmos pueden manejar funciones de peso más generales, los pacientes tienen una utilidad de 1 para donantes compatibles, ya que su probabilidad de supervivencia no se ve afectada por la elección del donante [3]. Esto significa que el intercambio de peso máximo tiene la máxima cardinalidad. La Tabla 1 proporciona límites inferiores y superiores sobre el tamaño de un intercambio de máxima cardinalidad en el mercado de intercambio de riñones. Los límites inferiores se encontraron al despejar el mercado solo con ciclos de longitud 2, mientras que los límites superiores no tenían restricción en la longitud del ciclo. Para cada tamaño de mercado, los límites fueron calculados sobre 10 mercados generados aleatoriamente. Ten en cuenta que puede haber una gran cantidad de variabilidad en los mercados: en un mercado de 5000 pacientes, menos de 1000 pacientes estaban en el intercambio de cardinalidad máxima. Tamaño máximo de intercambio Longitud-2 ciclos solamente Ciclos arbitrarios Pacientes Media Máximo Media Máximo 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Tabla 1: Límites superiores e inferiores en el tamaño del intercambio. La Tabla 2 proporciona características adicionales del mercado de intercambio de riñones. Ten en cuenta que un mercado con 5000 pacientes puede tener más de 450 millones de ciclos de longitud 2 y 3. Longitud de los bordes 2 y 3 ciclos Pacientes Media Máx. Media Máx. 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Tabla 2: Características del mercado. 297 COMPLEJIDAD DEL PROBLEMA En esta sección, demostramos que (la versión de decisión del) problema de compensación de mercado con ciclos cortos es NP-completo. Teorema 1. Dado un grafo G = (V, E) y un entero L ≥ 3, el problema de decidir si G admite una cubierta de ciclos perfecta que contenga ciclos de longitud como máximo L es NP-completo. Prueba. Es claro que este problema está en NP. Para la NP-dificultad, reducimos desde 3D-Matching, que es el problema de, dado conjuntos disjuntos X, Y y Z de tamaño q, y un conjunto de triples T ⊆ X × Y × Z, decidir si existe un subconjunto disjunto M de T con tamaño q. Una idea directa es construir un grafo tripartito con conjuntos de vértices X ∪ Y ∪ Z y aristas dirigidas (xa, yb), (yb, zc) y (zc, xa) para cada triple ti = {xa, yb, zc} ∈ T. Sin embargo, no es demasiado difícil ver que esta codificación falla porque una cobertura de ciclo perfecta puede incluir un ciclo sin un triple correspondiente. En cambio, utilizamos la siguiente reducción. Dado una instancia de 3D-Matching, construye un vértice para cada elemento en X, Y y Z. Para cada tripleta, ti = {xa, yb, zc}, construya el dispositivo en la Figura 2, que es similar a uno en Garey y Johnson [5, pp 68-69]. Ten en cuenta que los dispositivos se intersecan solo en los vértices de X ∪ Y ∪ Z. Es claro que esta construcción puede realizarse en tiempo polinómico. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figura 2: Dispositivo de NP-completitud para la tripleta ti y la longitud máxima del ciclo L. Sea M un emparejamiento 3D perfecto. Mostraremos que la construcción admite una cobertura perfecta de ciclos mediante ciclos cortos. Si ti = {xa, yb, zc} ∈ M, añade desde el gadget de ti los tres ciclos de longitud L que contienen a xa, yb y zc respectivamente. También añade el ciclo ª xi a, yi b, zi c «. De lo contrario, si ti ∉ M, añade los tres ciclos de longitud L que contienen xi a, yi b y zi c respectivamente. Es claro que todos los vértices están cubiertos, ya que M particiona X × Y × Z. Por el contrario, supongamos que tenemos una cobertura perfecta mediante ciclos cortos. Ten en cuenta que la construcción solo tiene ciclos cortos de longitudes 3 y L, y ningún ciclo corto involucra vértices distintos de dos gadgets diferentes. Es fácil ver entonces que en una cubierta perfecta, cada gadget ti contribuye ciclos de acuerdo a los casos anteriores: ti ∈ M, o ti /∈ M. Por lo tanto, existe un Emparejamiento 3D perfecto en la instancia original. 4. ENFOQUES DE SOLUCIÓN BASADOS EN UNA FORMULACIÓN DE ARISTAS En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada arista. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos sin restricciones de longitud de ciclo. Dado un mercado G = (V, E), construya un grafo bipartito con un vértice para cada agente y un vértice para cada artículo. Agregar un borde ev con peso 0 entre cada agente v y su propio artículo. En este punto, la codificación es una coincidencia perfecta. Ahora, para cada arista e = (vi, vj) en el mercado original, añade una arista e con peso we entre el agente vi y el artículo de vj. Los emparejamientos perfectos en esta codificación corresponden exactamente con las cubiertas de ciclos, ya que cada vez que se toma un artículo de un agente, debe recibir el artículo de otro agente. Se deduce que el problema de despeje sin restricciones puede resolverse en tiempo polinómico encontrando un emparejamiento perfecto de peso máximo. La Figura 3 contiene la representación en forma de grafo bipartito del mercado de ejemplo de la Figura 1. Las aristas de peso 0 están codificadas con líneas discontinuas, mientras que las aristas de mercado están en negrita. Elementos Agentes v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figura 3: Codificación de emparejamiento perfecto del mercado en la Figura 1. Alternativamente, podemos resolver el problema codificándolo como un ILP con una variable para cada arista en el grafo de mercado original G. Este ILP, que se muestra a continuación, tiene la ventaja de que puede ser extendido de manera natural para tratar con restricciones de longitud de ciclo. Por lo tanto, para el resto de esta sección, este será el enfoque que seguiremos. Se busca un max e∈E tal que para todo vi ∈ V, se cumplan las restricciones de conservación eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 y la restricción de capacidad eout=(vi,vj ) eout ≤ 1. Si se permite que los ciclos tengan una longitud de como máximo L, es fácil ver que solo necesitamos hacer los siguientes cambios en el ILP. Para cada camino de longitud L (a lo largo del documento, no incluimos ciclos en la definición de camino) p = ep1, ep2, ..., epL, agregar una restricción ep1 + ep2 + ... + epL ≤ L − 1, que excluye al camino p de cualquier solución factible. Desafortunadamente, en un mercado con solo 1000 pacientes, el número de caminos de longitud 3 supera los 400 millones, por lo que ni siquiera podemos construir este ILP sin quedarnos sin memoria. Por lo tanto, utilizamos una búsqueda en árbol con un enfoque de formulación incremental. Específicamente, utilizamos CPLEX, aunque añadimos restricciones como planos de corte durante el proceso de búsqueda en el árbol. Comenzamos con solo un pequeño subconjunto de las restricciones en el ILP. Dado que este ILP es pequeño, CPLEX puede resolver su relajación LP. Luego verificamos si alguna de las restricciones faltantes es violada por la solución fraccional. Si es así, generamos un conjunto de estas restricciones, las añadimos al ILP y repetimos. Incluso una vez que se satisfacen todas las restricciones, puede que no haya una solución entera que coincida con el límite superior fraccional, y aunque la hubiera, el solucionador de PL podría no encontrarla. En estos casos, CPLEX ramifica en una variable (utilizamos la estrategia de ramificación predeterminada de CPLEX) y genera un nuevo nodo de búsqueda correspondiente a cada uno de los hijos. En cada nodo del árbol de búsqueda que se visita, se repite este proceso de resolver el LP y agregar restricciones. Claramente, este enfoque produce una solución óptima una vez que la búsqueda en el árbol finaliza. Todavía necesitamos explicar los detalles del generador de restricciones (es decir, seleccionar qué restricciones comenzar) y la generación de restricciones (es decir, seleccionar qué restricciones violadas incluir). Describimos brevemente estos en las dos subsecciones siguientes, respectivamente. 4.1 Sembrador de Restricciones El principal sembrador de restricciones que desarrollamos prohíbe cualquier camino de longitud L − 1 que no tenga un borde cerrando el ciclo desde su inicio hasta su final. Si bien es costoso computacionalmente encontrar estas restricciones, su adición enfoca la búsqueda lejos de los caminos que no pueden estar en la solución final. También intentamos sembrar el LP con una colección aleatoria de restricciones del ILP. 4.2 Generación de Restricciones Experimentamos con varios generadores de restricciones. En cada caso, dada una solución fraccional, construimos el subgrafo de aristas con valor positivo. Este gráfico es mucho más pequeño que el gráfico original, por lo que podemos realizar los cálculos siguientes de manera eficiente. En nuestro primer generador de restricciones, simplemente buscamos caminos de longitud L con una suma de valores mayor que L − 1. Para cualquier camino de este tipo, restringimos su suma para que sea como máximo L − 1. Ten en cuenta que si hay un ciclo c con longitud |c| > L, podría contener hasta |c| caminos que violan. En nuestro segundo generador de restricciones, solo agregamos una restricción para tales ciclos: la suma de aristas en el ciclo puede ser a lo sumo |c|(L − 1)/L. Este generador hizo que el algoritmo fuera más lento, por lo que optamos por ir en la dirección opuesta en el desarrollo de nuestro generador final. Agrega una restricción por cada camino p que viola, y además, agrega una restricción para cada camino con los mismos vértices interiores (sin contar los extremos) que p. Esto mejoró la velocidad general. 4.3 Rendimiento experimental Resultó que incluso con estas mejoras, el enfoque de formulación de aristas no puede despejar un intercambio de riñón con 100 vértices en el tiempo en que la <br>formulación de ciclos</br> (descrita más adelante en la Sección 5) puede despejar uno con 10,000 vértices. En otras palabras, los enfoques basados en generación de columnas resultaron ser drásticamente mejores que los enfoques basados en generación de restricciones. Por lo tanto, en el resto del documento nos enfocaremos en la <br>formulación del ciclo</br> y en los enfoques basados en la generación de columnas. 5. Enfoques de solución basados en una <br>formulación cíclica</br>. En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada ciclo. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos cuando los ciclos tienen longitud 2. Dado un mercado G = (V, E), construya un nuevo grafo en V con un peso wc en cada arista de ciclo c de longitud 2. Es fácil ver que los emparejamientos en este nuevo grafo corresponden a coberturas de ciclos por ciclos de longitud 2 en el grafo original del mercado. Por lo tanto, el problema de equilibrio de mercado con L = 2 se puede resolver en tiempo polinómico encontrando un emparejamiento de peso máximo. Figura 4: Codificación del emparejamiento de peso máximo del mercado en la Figura 1. Podemos generalizar este codificado para L arbitrario. Sea C(L) el conjunto de todos los ciclos de G con longitud a lo sumo L. Entonces el siguiente ILP encuentra la cobertura de ciclos de máximo peso por ciclos de C(L): max c∈C(L) wcc sujeto a c:vi∈c c ≤ 1 ∀vi ∈ V con c ∈ {0, 1} ∀c ∈ C(L) 5.1 Formulación de Arista vs Ciclo En esta sección, consideramos los méritos de la formulación de arista y la <br>formulación de ciclo</br>. La formulación del problema del borde se puede resolver en tiempo polinómico cuando no hay restricciones en el tamaño del ciclo. La <br>formulación del ciclo</br> se puede resolver en tiempo polinómico cuando el tamaño del ciclo es a lo sumo 2. ",
            "candidates": [],
            "error": [
                [
                    "formulación de ciclos",
                    "formulación del ciclo",
                    "formulación cíclica",
                    "formulación de ciclo",
                    "formulación del ciclo"
                ]
            ]
        },
        "barter": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Clearing Algorithms for <br>barter</br> Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In <br>barter</br>-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in <br>barter</br>-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national kidney exchange.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that column generation scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
                "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "Kidney failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a kidney transplant.",
                "Kidney transplants are by far the most common transplant.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
                "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of <br>barter</br> exchanges.",
                "In a <br>barter</br>-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "<br>barter</br> exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe exchange in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
                "We can encode a <br>barter</br> exchange market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An exchange is a collection of disjoint cycles.",
                "The weight of an exchange is the sum of its cycle weights.",
                "A social welfare maximizing exchange is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example <br>barter</br> exchange market.",
                "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
                "For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general <br>barter</br> exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for <br>barter</br> exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight exchange has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
                "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
                "Table 2 gives additional characteristics of the kidney-exchange market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect matching.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation.",
                "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
                "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the cycle formulation.",
                "We show how to construct an equivalent solution in the edge formulation.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the cycle formulation is tighter than the edge formulation.",
                "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, column generation is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
                "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
                "To make this idea work then, we used column generation to solve the edge formulation.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of branch-and-price.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full cycle formulation.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental column generation approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
                "Column Generation One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many column generation problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
                "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
                "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for <br>barter</br> exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and column generation.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that column generation scales dramatically better than constraint generation.",
                "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
                "Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
                "Branch-and-price: Column generation for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by kidney paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Kidney exchange.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A kidney exchange clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight matching algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live kidney donation by matching for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "Kidney paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic kidney exchange.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-kidney exchange program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [
                "Clearing Algorithms for <br>barter</br> Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In <br>barter</br>-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "Also, in <br>barter</br>-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "These markets are examples of <br>barter</br> exchanges.",
                "In a <br>barter</br>-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "<br>barter</br> exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9]."
            ],
            "translated_annotated_samples": [
                "Algoritmos de compensación para mercados de intercambio de <br>trueque</br>: Facilitando los intercambios de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de <br>trueque</br>, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades.",
                "Además, en los intercambios de <br>trueque</br> en general, más agentes se ven afectados si uno abandona un ciclo más largo.",
                "Estos mercados son ejemplos de intercambios de <br>trueque</br>.",
                "En un mercado de <br>intercambio por trueque</br>, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí.",
                "Los intercambios de <br>trueque</br> son ubicuos: ejemplos incluyen Peerflix (DVDs) [11], Read It Swap It (libros) [12], e Intervac (casas de vacaciones) [9]."
            ],
            "translated_text": "Algoritmos de compensación para mercados de intercambio de <br>trueque</br>: Facilitando los intercambios de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de <br>trueque</br>, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales. El problema de compensación implica encontrar un intercambio que maximice el bienestar social cuando la longitud máxima de un ciclo está fija. Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente. Además, en los intercambios de <br>trueque</br> en general, más agentes se ven afectados si uno abandona un ciclo más largo. Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro. Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones. Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. La clave es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. Concluimos que la generación de columnas escala considerablemente mejor que la generación de restricciones. Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de riñón. Nuestro algoritmo reemplazó a CPLEX como el algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones. Las carreras de fósforos se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas]: [General] Términos Generales Algoritmos, Economía 1. INTRODUCCIÓN El papel de los riñones es filtrar los desechos de la sangre. La insuficiencia renal resulta en la acumulación de estos desechos, lo cual conduce a la muerte en meses. Una opción de tratamiento es la diálisis, en la que el paciente va a un hospital para que su sangre sea filtrada por una máquina externa. Se requieren varias visitas por semana, y cada una lleva varias horas. La calidad de vida en diálisis puede ser extremadamente baja, de hecho, muchos pacientes optan por retirarse de la diálisis, lo que conduce a una muerte natural. Solo el 12% de los pacientes en diálisis sobreviven 10 años [23]. En cambio, el tratamiento preferido es un trasplante de riñón. Los trasplantes de riñón son, con mucho, los trasplantes más comunes. Desafortunadamente, la demanda de riñones supera con creces la oferta. En los Estados Unidos en 2005, 4,052 personas murieron esperando un trasplante de riñón que les salvara la vida. Durante este tiempo, casi 30,000 personas fueron añadidas a la lista nacional de espera, mientras que solo 9,913 personas salieron de la lista después de recibir un riñón de donante fallecido. La lista de espera actualmente tiene más de 70,000 personas, y el tiempo de espera mediano varía de 2 a 5 años, dependiendo del tipo de sangre. Para muchos pacientes con enfermedad renal, la mejor opción es encontrar un donante vivo, es decir, una persona sana dispuesta a donar uno de sus dos riñones. Aunque existen mercados para comprar y vender riñones de donantes vivos, la comercialización de órganos humanos es casi universalmente considerada como antiética, y la práctica suele ser explícitamente ilegal, como en los Estados Unidos. Sin embargo, en la mayoría de los países, la donación en vida es legal, siempre y cuando se realice como un regalo sin compensación financiera. En 2005, hubo 6,563 donaciones en vida en los Estados Unidos. El número de donaciones en vida habría sido mucho mayor si no fuera por el hecho de que, con frecuencia, un posible donante y su receptor previsto son incompatibles en tipo de sangre o tipo de tejido. En el pasado, el donante incompatible fue enviado a casa, dejando al paciente a la espera de un riñón de un donante fallecido. Sin embargo, ahora hay algunos intercambios renales regionales en los Estados Unidos, en los que los pacientes pueden intercambiar sus donantes incompatibles entre sí, para así obtener cada uno un donante compatible. Estos mercados son ejemplos de intercambios de <br>trueque</br>. En un mercado de <br>intercambio por trueque</br>, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Los intercambios de <br>trueque</br> son ubicuos: ejemplos incluyen Peerflix (DVDs) [11], Read It Swap It (libros) [12], e Intervac (casas de vacaciones) [9]. ",
            "candidates": [],
            "error": [
                [
                    "trueque",
                    "trueque",
                    "trueque",
                    "trueque",
                    "intercambio por trueque",
                    "trueque"
                ]
            ]
        },
        "exchange": {
            "translated_key": "intercambio",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Clearing Algorithms for Barter <br>exchange</br> Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-<br>exchange</br> markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national kidney-<br>exchange</br> market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "The clearing problem involves finding a social welfare maximizing <br>exchange</br> when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national kidney <br>exchange</br>.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that column generation scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
                "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "Kidney failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a kidney transplant.",
                "Kidney transplants are by far the most common transplant.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
                "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of barter exchanges.",
                "In a barter-<br>exchange</br> market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe <br>exchange</br> in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate <br>exchange</br> to share the cost of buying a single pair of shoes.",
                "We can encode a barter <br>exchange</br> market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An <br>exchange</br> is a collection of disjoint cycles.",
                "The weight of an <br>exchange</br> is the sum of its cycle weights.",
                "A social welfare maximizing <br>exchange</br> is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "<br>exchange</br> M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter <br>exchange</br> market.",
                "The clearing problem is to find a maximum-weight <br>exchange</br> consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a kidney <br>exchange</br>, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national kidney <br>exchange</br> market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to <br>exchange</br>, fewer agents are affected.",
                "For example, last-minute testing in a kidney <br>exchange</br> often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality <br>exchange</br>, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney <br>exchange</br> [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-<br>exchange</br> market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on kidney <br>exchange</br> markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the <br>exchange</br> [15]. (Furthermore, in a simplified theoretical model, any kidney <br>exchange</br> can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general barter exchanges, or even for all kidney <br>exchange</br> markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the kidney <br>exchange</br> clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the kidney <br>exchange</br> problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney <br>exchange</br> problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic kidney <br>exchange</br> market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney <br>exchange</br> markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney <br>exchange</br> (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight <br>exchange</br> has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality <br>exchange</br> in the kidney-<br>exchange</br> market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality <br>exchange</br>.",
                "Maximum <br>exchange</br> size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on <br>exchange</br> size.",
                "Table 2 gives additional characteristics of the kidney-<br>exchange</br> market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect matching.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney <br>exchange</br> with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation.",
                "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
                "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the cycle formulation.",
                "We show how to construct an equivalent solution in the edge formulation.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the cycle formulation is tighter than the edge formulation.",
                "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an <br>exchange</br> solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, column generation is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
                "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an <br>exchange</br>, and then add the cycles of that <br>exchange</br> to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the <br>exchange</br> with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight <br>exchange</br> with cycles of length at most 3 has the same weight as an unrestricted maximum-weight <br>exchange</br>. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
                "To make this idea work then, we used column generation to solve the edge formulation.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of branch-and-price.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For kidney-<br>exchange</br> markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full cycle formulation.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental column generation approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy <br>exchange</br> and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
                "Column Generation One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many column generation problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
                "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national <br>exchange</br> would save more lives.",
                "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-<br>exchange</br> market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the kidney <br>exchange</br> clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and column generation.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that column generation scales dramatically better than constraint generation.",
                "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
                "Our work has treated the kidney <br>exchange</br> as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal <br>exchange</br> now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney <br>exchange</br> process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe <br>exchange</br>.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
                "Branch-and-price: Column generation for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by kidney paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe <br>exchange</br>. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Kidney <br>exchange</br>.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A kidney <br>exchange</br> clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient kidney <br>exchange</br>: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight matching algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live kidney donation by matching for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "Kidney paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic kidney <br>exchange</br>.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-kidney <br>exchange</br> program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [
                "Clearing Algorithms for Barter <br>exchange</br> Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-<br>exchange</br> markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "We focus mainly on the upcoming national kidney-<br>exchange</br> market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "The clearing problem involves finding a social welfare maximizing <br>exchange</br> when the maximum length of a cycle is fixed.",
                "Solving it exactly is one of the main challenges in establishing a national kidney <br>exchange</br>.",
                "In a barter-<br>exchange</br> market, agents (patients) seek to swap their items (incompatible donors) with each other."
            ],
            "translated_annotated_samples": [
                "Algoritmos de compensación para mercados de <br>intercambio</br> de trueque: Facilitando los <br>intercambio</br>s de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades.",
                "Nos enfocamos principalmente en el próximo mercado nacional de <br>intercambio</br> de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles.",
                "El problema de compensación implica encontrar un <br>intercambio</br> que maximice el bienestar social cuando la longitud máxima de un ciclo está fija.",
                "Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un <br>intercambio</br> nacional de riñones.",
                "En un mercado de <br>intercambio</br> por trueque, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí."
            ],
            "translated_text": "Algoritmos de compensación para mercados de <br>intercambio</br> de trueque: Facilitando los <br>intercambio</br>s de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Nos enfocamos principalmente en el próximo mercado nacional de <br>intercambio</br> de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales. El problema de compensación implica encontrar un <br>intercambio</br> que maximice el bienestar social cuando la longitud máxima de un ciclo está fija. Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente. Además, en los intercambios de trueque en general, más agentes se ven afectados si uno abandona un ciclo más largo. Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro. Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un <br>intercambio</br> nacional de riñones. Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. La clave es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. Concluimos que la generación de columnas escala considerablemente mejor que la generación de restricciones. Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de riñón. Nuestro algoritmo reemplazó a CPLEX como el algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones. Las carreras de fósforos se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas]: [General] Términos Generales Algoritmos, Economía 1. INTRODUCCIÓN El papel de los riñones es filtrar los desechos de la sangre. La insuficiencia renal resulta en la acumulación de estos desechos, lo cual conduce a la muerte en meses. Una opción de tratamiento es la diálisis, en la que el paciente va a un hospital para que su sangre sea filtrada por una máquina externa. Se requieren varias visitas por semana, y cada una lleva varias horas. La calidad de vida en diálisis puede ser extremadamente baja, de hecho, muchos pacientes optan por retirarse de la diálisis, lo que conduce a una muerte natural. Solo el 12% de los pacientes en diálisis sobreviven 10 años [23]. En cambio, el tratamiento preferido es un trasplante de riñón. Los trasplantes de riñón son, con mucho, los trasplantes más comunes. Desafortunadamente, la demanda de riñones supera con creces la oferta. En los Estados Unidos en 2005, 4,052 personas murieron esperando un trasplante de riñón que les salvara la vida. Durante este tiempo, casi 30,000 personas fueron añadidas a la lista nacional de espera, mientras que solo 9,913 personas salieron de la lista después de recibir un riñón de donante fallecido. La lista de espera actualmente tiene más de 70,000 personas, y el tiempo de espera mediano varía de 2 a 5 años, dependiendo del tipo de sangre. Para muchos pacientes con enfermedad renal, la mejor opción es encontrar un donante vivo, es decir, una persona sana dispuesta a donar uno de sus dos riñones. Aunque existen mercados para comprar y vender riñones de donantes vivos, la comercialización de órganos humanos es casi universalmente considerada como antiética, y la práctica suele ser explícitamente ilegal, como en los Estados Unidos. Sin embargo, en la mayoría de los países, la donación en vida es legal, siempre y cuando se realice como un regalo sin compensación financiera. En 2005, hubo 6,563 donaciones en vida en los Estados Unidos. El número de donaciones en vida habría sido mucho mayor si no fuera por el hecho de que, con frecuencia, un posible donante y su receptor previsto son incompatibles en tipo de sangre o tipo de tejido. En el pasado, el donante incompatible fue enviado a casa, dejando al paciente a la espera de un riñón de un donante fallecido. Sin embargo, ahora hay algunos intercambios renales regionales en los Estados Unidos, en los que los pacientes pueden intercambiar sus donantes incompatibles entre sí, para así obtener cada uno un donante compatible. Estos mercados son ejemplos de intercambios de trueque. En un mercado de <br>intercambio</br> por trueque, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "match": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national kidney exchange.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that column generation scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
                "The <br>match</br> runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "Kidney failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a kidney transplant.",
                "Kidney transplants are by far the most common transplant.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
                "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of barter exchanges.",
                "In a barter-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe exchange in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
                "We can encode a barter exchange market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An exchange is a collection of disjoint cycles.",
                "The weight of an exchange is the sum of its cycle weights.",
                "A social welfare maximizing exchange is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market.",
                "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
                "For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general barter exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight exchange has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
                "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
                "Table 2 gives additional characteristics of the kidney-exchange market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect matching.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation.",
                "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
                "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the cycle formulation.",
                "We show how to construct an equivalent solution in the edge formulation.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the cycle formulation is tighter than the edge formulation.",
                "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, column generation is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
                "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
                "To make this idea work then, we used column generation to solve the edge formulation.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 Branch-and-Price Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a branch-and-price tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of branch-and-price.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support branch-and-price (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own branch-and-price algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our branch-and-price search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full cycle formulation.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental column generation approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
                "Column Generation One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many column generation problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
                "We conduct a <br>match</br> run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
                "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and column generation.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that column generation scales dramatically better than constraint generation.",
                "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future <br>match</br> runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
                "Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final <br>match</br> is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
                "Branch-and-price: Column generation for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by kidney paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Kidney exchange.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A kidney exchange clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight matching algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live kidney donation by matching for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "Kidney paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic kidney exchange.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-kidney exchange program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [
                "The <br>match</br> runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "We conduct a <br>match</br> run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future <br>match</br> runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final <br>match</br> is produced, or to output a contingency plan in case of failure."
            ],
            "translated_annotated_samples": [
                "Las <br>carreras de fósforos</br> se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados.",
                "Realizamos una ejecución de prueba cada dos semanas, y los primeros trasplantes basados en nuestras soluciones ya han sido realizados.",
                "Estos incluyen múltiples donantes alternativos por paciente, bordes ponderados en el grafo del mercado (para codificar diferencias en años de vida esperados añadidos basados en grados de compatibilidad, edad y peso del paciente, etc., así como la probabilidad de incompatibilidad de último minuto), cadenas desencadenadas por ángeles (cadenas de trasplantes desencadenadas por donantes altruistas que no tienen pacientes asociados con ellos, cada cadena termina con un riñón sobrante), y problemas adicionales (como diferentes puntajes para salvar a diferentes donantes altruistas o riñones sobrantes para futuras ejecuciones de <br>emparejamiento</br> basadas en tipo de sangre, tipo de tejido y probabilidad de que el órgano no desaparezca del mercado porque el donante tenga dudas).",
                "Por lo tanto, sería deseable realizar una optimización teniendo esto en cuenta, como producir un subgrafo robusto de bajo grado para ser probado antes de que se genere la <br>coincidencia</br> final, o producir un plan de contingencia en caso de fallo."
            ],
            "translated_text": "Algoritmos de compensación para mercados de intercambio de trueque: Facilitando los intercambios de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales. El problema de compensación implica encontrar un intercambio que maximice el bienestar social cuando la longitud máxima de un ciclo está fija. Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente. Además, en los intercambios de trueque en general, más agentes se ven afectados si uno abandona un ciclo más largo. Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro. Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones. Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. La clave es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. Concluimos que la generación de columnas escala considerablemente mejor que la generación de restricciones. Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de riñón. Nuestro algoritmo reemplazó a CPLEX como el algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones. Las <br>carreras de fósforos</br> se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas]: [General] Términos Generales Algoritmos, Economía 1. INTRODUCCIÓN El papel de los riñones es filtrar los desechos de la sangre. La insuficiencia renal resulta en la acumulación de estos desechos, lo cual conduce a la muerte en meses. Una opción de tratamiento es la diálisis, en la que el paciente va a un hospital para que su sangre sea filtrada por una máquina externa. Se requieren varias visitas por semana, y cada una lleva varias horas. La calidad de vida en diálisis puede ser extremadamente baja, de hecho, muchos pacientes optan por retirarse de la diálisis, lo que conduce a una muerte natural. Solo el 12% de los pacientes en diálisis sobreviven 10 años [23]. En cambio, el tratamiento preferido es un trasplante de riñón. Los trasplantes de riñón son, con mucho, los trasplantes más comunes. Desafortunadamente, la demanda de riñones supera con creces la oferta. En los Estados Unidos en 2005, 4,052 personas murieron esperando un trasplante de riñón que les salvara la vida. Durante este tiempo, casi 30,000 personas fueron añadidas a la lista nacional de espera, mientras que solo 9,913 personas salieron de la lista después de recibir un riñón de donante fallecido. La lista de espera actualmente tiene más de 70,000 personas, y el tiempo de espera mediano varía de 2 a 5 años, dependiendo del tipo de sangre. Para muchos pacientes con enfermedad renal, la mejor opción es encontrar un donante vivo, es decir, una persona sana dispuesta a donar uno de sus dos riñones. Aunque existen mercados para comprar y vender riñones de donantes vivos, la comercialización de órganos humanos es casi universalmente considerada como antiética, y la práctica suele ser explícitamente ilegal, como en los Estados Unidos. Sin embargo, en la mayoría de los países, la donación en vida es legal, siempre y cuando se realice como un regalo sin compensación financiera. En 2005, hubo 6,563 donaciones en vida en los Estados Unidos. El número de donaciones en vida habría sido mucho mayor si no fuera por el hecho de que, con frecuencia, un posible donante y su receptor previsto son incompatibles en tipo de sangre o tipo de tejido. En el pasado, el donante incompatible fue enviado a casa, dejando al paciente a la espera de un riñón de un donante fallecido. Sin embargo, ahora hay algunos intercambios renales regionales en los Estados Unidos, en los que los pacientes pueden intercambiar sus donantes incompatibles entre sí, para así obtener cada uno un donante compatible. Estos mercados son ejemplos de intercambios de trueque. En un mercado de intercambio por trueque, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Los intercambios de trueque son ubicuos: ejemplos incluyen Peerflix (DVDs) [11], Read It Swap It (libros) [12], e Intervac (casas de vacaciones) [9]. Durante muchos años, incluso ha habido un gran intercambio de zapatos en los Estados Unidos [10]. Las personas con pies de diferentes tamaños usan esto para evitar tener que comprar dos pares de zapatos. Los amputados de pierna tienen un intercambio separado para compartir el costo de comprar un par de zapatos. Podemos codificar un mercado de intercambio de trueque como un grafo dirigido G = (V, E) de la siguiente manera. Construye un vértice para cada agente. Agregar un borde ponderado e desde un agente vi hacia otro vj, si vi desea el artículo de vj. El peso que representamos de e es la utilidad para vi de obtener el artículo vjs. Un ciclo c en este grafo representa un intercambio posible, donde cada agente en el ciclo obtiene el artículo del siguiente agente. El peso wc de un ciclo c es la suma de los pesos de sus aristas. Un intercambio es una colección de ciclos disjuntos. El peso de un intercambio es la suma de los pesos de sus ciclos. Un intercambio que maximiza el bienestar social es aquel con un peso máximo. La Figura 1 ilustra un mercado de ejemplo con 5 agentes, {v1, v2, . . . , v5}, en el que todos los bordes tienen peso 1. El mercado tiene 4 ciclos, c1 = v1, v2, c2 = v2, v3, c3 = v3, v4 y c4 = v1, v2, v3, v4, v5, y dos intercambios maximales (de inclusión), a saber, M1 = {c4} y M2 = {c1, c3}. El intercambio M1 tiene tanto el peso máximo como la cardinalidad máxima (es decir, incluye la mayor cantidad de aristas/vértices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figura 1: Mercado de intercambio de trueque de ejemplo. El problema de compensación consiste en encontrar un intercambio de peso máximo que consista en ciclos con una longitud de a lo sumo una pequeña constante L. Esta restricción de longitud de ciclo surge naturalmente por varias razones. Por ejemplo, en un intercambio de riñón, todas las operaciones en un ciclo deben realizarse simultáneamente; de lo contrario, un donante podría retractarse después de que su pareja incompatible haya recibido un riñón. (No se puede redactar un contrato vinculante para donar un órgano). Esto da lugar a una restricción logística en el tamaño del ciclo: incluso si todos los donantes son operados primero y se utiliza el mismo personal e instalaciones para luego operar a los receptores, un ciclo k requiere entre 3k y 6k médicos, alrededor de 4k enfermeras y casi 2k salas de operaciones. Debido a tales limitaciones de recursos, es probable que el próximo mercado nacional de intercambio de riñones solo permita ciclos de longitud 2 y 3. Otra motivación para ciclos cortos es que si el ciclo falla en intercambiarse, menos agentes se ven afectados. Por ejemplo, las pruebas de último minuto en un intercambio de riñones a menudo revelan nuevas incompatibilidades que no fueron detectadas en las pruebas iniciales (en base a las cuales se construyó el grafo de compatibilidad). Más generalmente, un agente puede abandonar un ciclo si sus preferencias han cambiado, o simplemente no cumple con sus obligaciones (como enviar un libro a otro agente en el ciclo) debido a olvidos. En la Sección 3, demostramos que (la versión de decisión del) problema de despeje es NP-completo para L ≥ 3. Una posible estrategia sería buscar un buen heurístico o algoritmo de aproximación. Sin embargo, por dos razones, buscamos un algoritmo exacto basado en un programa lineal entero (PLE), que resolvemos utilizando una búsqueda especializada en árboles. • Primero, cualquier pérdida de optimalidad podría llevar a muertes de pacientes innecesarias. • Segundo, una característica atractiva de utilizar una formulación de PLE es que permite modelar fácilmente una serie de variaciones en el objetivo y agregar restricciones adicionales al problema. Por ejemplo, si se cree que los ciclos de 3 elementos tienen más probabilidades de fallar que los ciclos de 2 elementos, entonces simplemente se les puede asignar un peso que sea apropiadamente menor que 3/2 del peso de un ciclo de 2 elementos. O, si por diversas razones (por ejemplo, éticas) se requiere un intercambio de cardinalidad máxima, al menos se puede encontrar en una segunda pasada la solución (de entre todas las soluciones de cardinalidad máxima) que tenga el menor número de 3-ciclos. Otras variaciones que se pueden resolver incluyen encontrar diversas formas de colecciones de ciclos tolerantes a fallos (no disjuntas) en caso de que ciertos pares que se creían compatibles resulten ser incompatibles después de todo. En este documento, presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Las codificaciones de ILP directas son demasiado grandes para siquiera construirse en el hardware actual, sin mencionar resolverlas. La clave entonces es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas (principalmente específicas del problema) que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. 1.1 Trabajos Previos Varios artículos recientes han utilizado simulaciones y algoritmos de compensación de mercado para explorar el impacto de un intercambio nacional de riñones [13, 20, 6, 14, 15, 17]. Por ejemplo, utilizando el algoritmo de coincidencia máxima de Edmonds [4], [20] se muestra que un mercado nacional de intercambio por pares (utilizando solo ciclos de longitud 2) resultaría en más trasplantes, tiempos de espera reducidos y ahorros de $750 millones en costos de atención médica durante 5 años. Esos resultados son conservadores de dos maneras. En primer lugar, el mercado simulado contenía solo 4,000 pacientes iniciales, con 250 pacientes añadidos cada 3 meses. Se nos ha informado que el mercado podría ser casi el doble de este tamaño. En segundo lugar, los intercambios se restringieron a ciclos de longitud 2 (porque eso es todo lo que se puede modelar como coincidencia máxima y resolver utilizando el algoritmo de Edmonds). Permitir ciclos de longitud 3 conlleva a ganancias adicionales significativas. Esto se ha demostrado en mercados de intercambio de riñones con 100 pacientes utilizando CPLEX para resolver una codificación de programa entero del problema de compensación [15]. En este documento, presentamos un algoritmo alternativo para este programa entero que puede despejar mercados con más de 10,000 pacientes (y el mismo número de donantes dispuestos). Permitir ciclos de longitud mayor a 3 a menudo no conduce a ninguna mejora en el tamaño del intercambio [15]. (Además, en un modelo teórico simplificado, cualquier intercambio de riñón se puede convertir en uno con ciclos de longitud de a lo sumo 4 [15].) Si bien esto no se aplica a intercambios de trueque generales, ni siquiera a todos los mercados de intercambio de riñones, en la Sección 5.2.3 hacemos uso de la observación de que los ciclos cortos son suficientes para aumentar drásticamente la velocidad de nuestro algoritmo. A un nivel alto, el problema de compensación para intercambios de trueque es similar al problema de compensación (también conocido como problema de determinación de ganadores) en subastas combinatorias. En ambos contextos, la idea es recopilar toda la información pertinente sobre los agentes en un punto central de compensación y ejecutar un algoritmo centralizado de compensación para determinar la asignación. Ambos problemas son NP-duros. Ambos se resuelven mejor utilizando técnicas de búsqueda en árboles. Desde 1999, se ha realizado un trabajo significativo en informática y investigación de operaciones sobre algoritmos de búsqueda de árboles óptimos más rápidos para despejar subastas combinatorias. (Para una revisión reciente, consulte [18].) Sin embargo, el problema de compensación del intercambio de riñones (con un límite de 3 o más en el tamaño del ciclo) es diferente del problema de compensación de la subasta combinatoria de formas significativas. La diferencia más importante es que las formulaciones naturales del problema de subasta combinatoria tienden a ajustarse fácilmente en la memoria, por lo que el tiempo es el cuello de botella en la práctica. Por el contrario, las formulaciones naturales del problema de intercambio de riñones (con L = 3) ocupan al menos espacio cúbico en el número de pacientes para incluso modelar, y por lo tanto la memoria se convierte en un cuello de botella mucho antes que el tiempo al utilizar la búsqueda de árbol estándar, como branch-and-cut en CPLEX, para abordar el problema. (En una computadora de 1GB y un generador de instancias estándar realista, discutido más adelante, CPLEX 10.010 se queda sin memoria en cinco de las diez instancias de 900 pacientes y en las diez de las diez instancias de 1,000 pacientes que generamos). Por lo tanto, los enfoques que se han desarrollado para subastas combinatorias no pueden manejar el problema del intercambio de riñones. 1.2 Esquema del documento El resto del documento está organizado de la siguiente manera. La sección 2 discute el proceso mediante el cual generamos datos realistas del mercado de intercambio de riñones, con el fin de comparar los algoritmos de compensación. La sección 3 contiene una demostración de que el problema de decisión de compensación del mercado es NP-completo. Las secciones 4 y 5 contienen cada una una formulación ILP del problema de compensación. También detallamos en esas secciones nuestras técnicas utilizadas para resolver esos programas en instancias grandes. La sección 6 presenta experimentos sobre las diversas técnicas. La sección 7 discute la implementación reciente de nuestro algoritmo. Finalmente, presentamos nuestras conclusiones en la Sección 8 y sugerimos direcciones para investigaciones futuras. CARACTERÍSTICAS DEL MERCADO Y GENERADOR DE INSTANCIAS Probamos los algoritmos en mercados simulados de intercambio de riñones, los cuales son generados por un proceso descrito en Saidman et al. [17]. Este proceso se basa en los extensos datos a nivel nacional mantenidos por la Red Unida para el Comparto de Órganos (UNOS), por lo que genera una distribución realista de instancias. Varios artículos han utilizado variaciones de este proceso para demostrar la efectividad de un intercambio nacional de riñones (extrapolando de pequeñas instancias o restringiendo la compensación a ciclos de 2) [6, 20, 14, 13, 15, 17]. En resumen, el proceso implica generar pacientes con un tipo de sangre, sexo y probabilidad de ser incompatible en el tipo de tejido con un donante elegido al azar. Estas probabilidades se basan en datos reales de la población del mundo real. A cada paciente se le asigna un posible donante con un tipo de sangre aleatorio y una relación con el paciente. Si el paciente y el posible donante son incompatibles, ambos son ingresados en el mercado. La información del tipo de sangre y del tipo de tejido se utiliza luego para decidir qué pacientes y donantes son compatibles. Una complicación, manejada por el generador, es que si la paciente es mujer y ha tenido un hijo con su potencial donante, entonces la probabilidad de que los dos sean incompatibles aumenta. (Esto se debe a que la madre desarrolla anticuerpos contra su pareja durante el embarazo). Finalmente, aunque nuestros algoritmos pueden manejar funciones de peso más generales, los pacientes tienen una utilidad de 1 para donantes compatibles, ya que su probabilidad de supervivencia no se ve afectada por la elección del donante [3]. Esto significa que el intercambio de peso máximo tiene la máxima cardinalidad. La Tabla 1 proporciona límites inferiores y superiores sobre el tamaño de un intercambio de máxima cardinalidad en el mercado de intercambio de riñones. Los límites inferiores se encontraron al despejar el mercado solo con ciclos de longitud 2, mientras que los límites superiores no tenían restricción en la longitud del ciclo. Para cada tamaño de mercado, los límites fueron calculados sobre 10 mercados generados aleatoriamente. Ten en cuenta que puede haber una gran cantidad de variabilidad en los mercados: en un mercado de 5000 pacientes, menos de 1000 pacientes estaban en el intercambio de cardinalidad máxima. Tamaño máximo de intercambio Longitud-2 ciclos solamente Ciclos arbitrarios Pacientes Media Máximo Media Máximo 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Tabla 1: Límites superiores e inferiores en el tamaño del intercambio. La Tabla 2 proporciona características adicionales del mercado de intercambio de riñones. Ten en cuenta que un mercado con 5000 pacientes puede tener más de 450 millones de ciclos de longitud 2 y 3. Longitud de los bordes 2 y 3 ciclos Pacientes Media Máx. Media Máx. 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Tabla 2: Características del mercado. 297 COMPLEJIDAD DEL PROBLEMA En esta sección, demostramos que (la versión de decisión del) problema de compensación de mercado con ciclos cortos es NP-completo. Teorema 1. Dado un grafo G = (V, E) y un entero L ≥ 3, el problema de decidir si G admite una cubierta de ciclos perfecta que contenga ciclos de longitud como máximo L es NP-completo. Prueba. Es claro que este problema está en NP. Para la NP-dificultad, reducimos desde 3D-Matching, que es el problema de, dado conjuntos disjuntos X, Y y Z de tamaño q, y un conjunto de triples T ⊆ X × Y × Z, decidir si existe un subconjunto disjunto M de T con tamaño q. Una idea directa es construir un grafo tripartito con conjuntos de vértices X ∪ Y ∪ Z y aristas dirigidas (xa, yb), (yb, zc) y (zc, xa) para cada triple ti = {xa, yb, zc} ∈ T. Sin embargo, no es demasiado difícil ver que esta codificación falla porque una cobertura de ciclo perfecta puede incluir un ciclo sin un triple correspondiente. En cambio, utilizamos la siguiente reducción. Dado una instancia de 3D-Matching, construye un vértice para cada elemento en X, Y y Z. Para cada tripleta, ti = {xa, yb, zc}, construya el dispositivo en la Figura 2, que es similar a uno en Garey y Johnson [5, pp 68-69]. Ten en cuenta que los dispositivos se intersecan solo en los vértices de X ∪ Y ∪ Z. Es claro que esta construcción puede realizarse en tiempo polinómico. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figura 2: Dispositivo de NP-completitud para la tripleta ti y la longitud máxima del ciclo L. Sea M un emparejamiento 3D perfecto. Mostraremos que la construcción admite una cobertura perfecta de ciclos mediante ciclos cortos. Si ti = {xa, yb, zc} ∈ M, añade desde el gadget de ti los tres ciclos de longitud L que contienen a xa, yb y zc respectivamente. También añade el ciclo ª xi a, yi b, zi c «. De lo contrario, si ti ∉ M, añade los tres ciclos de longitud L que contienen xi a, yi b y zi c respectivamente. Es claro que todos los vértices están cubiertos, ya que M particiona X × Y × Z. Por el contrario, supongamos que tenemos una cobertura perfecta mediante ciclos cortos. Ten en cuenta que la construcción solo tiene ciclos cortos de longitudes 3 y L, y ningún ciclo corto involucra vértices distintos de dos gadgets diferentes. Es fácil ver entonces que en una cubierta perfecta, cada gadget ti contribuye ciclos de acuerdo a los casos anteriores: ti ∈ M, o ti /∈ M. Por lo tanto, existe un Emparejamiento 3D perfecto en la instancia original. 4. ENFOQUES DE SOLUCIÓN BASADOS EN UNA FORMULACIÓN DE ARISTAS En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada arista. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos sin restricciones de longitud de ciclo. Dado un mercado G = (V, E), construya un grafo bipartito con un vértice para cada agente y un vértice para cada artículo. Agregar un borde ev con peso 0 entre cada agente v y su propio artículo. En este punto, la codificación es una coincidencia perfecta. Ahora, para cada arista e = (vi, vj) en el mercado original, añade una arista e con peso we entre el agente vi y el artículo de vj. Los emparejamientos perfectos en esta codificación corresponden exactamente con las cubiertas de ciclos, ya que cada vez que se toma un artículo de un agente, debe recibir el artículo de otro agente. Se deduce que el problema de despeje sin restricciones puede resolverse en tiempo polinómico encontrando un emparejamiento perfecto de peso máximo. La Figura 3 contiene la representación en forma de grafo bipartito del mercado de ejemplo de la Figura 1. Las aristas de peso 0 están codificadas con líneas discontinuas, mientras que las aristas de mercado están en negrita. Elementos Agentes v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figura 3: Codificación de emparejamiento perfecto del mercado en la Figura 1. Alternativamente, podemos resolver el problema codificándolo como un ILP con una variable para cada arista en el grafo de mercado original G. Este ILP, que se muestra a continuación, tiene la ventaja de que puede ser extendido de manera natural para tratar con restricciones de longitud de ciclo. Por lo tanto, para el resto de esta sección, este será el enfoque que seguiremos. Se busca un max e∈E tal que para todo vi ∈ V, se cumplan las restricciones de conservación eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 y la restricción de capacidad eout=(vi,vj ) eout ≤ 1. Si se permite que los ciclos tengan una longitud de como máximo L, es fácil ver que solo necesitamos hacer los siguientes cambios en el ILP. Para cada camino de longitud L (a lo largo del documento, no incluimos ciclos en la definición de camino) p = ep1, ep2, ..., epL, agregar una restricción ep1 + ep2 + ... + epL ≤ L − 1, que excluye al camino p de cualquier solución factible. Desafortunadamente, en un mercado con solo 1000 pacientes, el número de caminos de longitud 3 supera los 400 millones, por lo que ni siquiera podemos construir este ILP sin quedarnos sin memoria. Por lo tanto, utilizamos una búsqueda en árbol con un enfoque de formulación incremental. Específicamente, utilizamos CPLEX, aunque añadimos restricciones como planos de corte durante el proceso de búsqueda en el árbol. Comenzamos con solo un pequeño subconjunto de las restricciones en el ILP. Dado que este ILP es pequeño, CPLEX puede resolver su relajación LP. Luego verificamos si alguna de las restricciones faltantes es violada por la solución fraccional. Si es así, generamos un conjunto de estas restricciones, las añadimos al ILP y repetimos. Incluso una vez que se satisfacen todas las restricciones, puede que no haya una solución entera que coincida con el límite superior fraccional, y aunque la hubiera, el solucionador de PL podría no encontrarla. En estos casos, CPLEX ramifica en una variable (utilizamos la estrategia de ramificación predeterminada de CPLEX) y genera un nuevo nodo de búsqueda correspondiente a cada uno de los hijos. En cada nodo del árbol de búsqueda que se visita, se repite este proceso de resolver el LP y agregar restricciones. Claramente, este enfoque produce una solución óptima una vez que la búsqueda en el árbol finaliza. Todavía necesitamos explicar los detalles del generador de restricciones (es decir, seleccionar qué restricciones comenzar) y la generación de restricciones (es decir, seleccionar qué restricciones violadas incluir). Describimos brevemente estos en las dos subsecciones siguientes, respectivamente. 4.1 Sembrador de Restricciones El principal sembrador de restricciones que desarrollamos prohíbe cualquier camino de longitud L − 1 que no tenga un borde cerrando el ciclo desde su inicio hasta su final. Si bien es costoso computacionalmente encontrar estas restricciones, su adición enfoca la búsqueda lejos de los caminos que no pueden estar en la solución final. También intentamos sembrar el LP con una colección aleatoria de restricciones del ILP. 4.2 Generación de Restricciones Experimentamos con varios generadores de restricciones. En cada caso, dada una solución fraccional, construimos el subgrafo de aristas con valor positivo. Este gráfico es mucho más pequeño que el gráfico original, por lo que podemos realizar los cálculos siguientes de manera eficiente. En nuestro primer generador de restricciones, simplemente buscamos caminos de longitud L con una suma de valores mayor que L − 1. Para cualquier camino de este tipo, restringimos su suma para que sea como máximo L − 1. Ten en cuenta que si hay un ciclo c con longitud |c| > L, podría contener hasta |c| caminos que violan. En nuestro segundo generador de restricciones, solo agregamos una restricción para tales ciclos: la suma de aristas en el ciclo puede ser a lo sumo |c|(L − 1)/L. Este generador hizo que el algoritmo fuera más lento, por lo que optamos por ir en la dirección opuesta en el desarrollo de nuestro generador final. Agrega una restricción por cada camino p que viola, y además, agrega una restricción para cada camino con los mismos vértices interiores (sin contar los extremos) que p. Esto mejoró la velocidad general. 4.3 Rendimiento experimental Resultó que incluso con estas mejoras, el enfoque de formulación de aristas no puede despejar un intercambio de riñón con 100 vértices en el tiempo en que la formulación de ciclos (descrita más adelante en la Sección 5) puede despejar uno con 10,000 vértices. En otras palabras, los enfoques basados en generación de columnas resultaron ser drásticamente mejores que los enfoques basados en generación de restricciones. Por lo tanto, en el resto del documento nos enfocaremos en la formulación del ciclo y en los enfoques basados en la generación de columnas. 5. Enfoques de solución basados en una formulación cíclica. En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada ciclo. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos cuando los ciclos tienen longitud 2. Dado un mercado G = (V, E), construya un nuevo grafo en V con un peso wc en cada arista de ciclo c de longitud 2. Es fácil ver que los emparejamientos en este nuevo grafo corresponden a coberturas de ciclos por ciclos de longitud 2 en el grafo original del mercado. Por lo tanto, el problema de equilibrio de mercado con L = 2 se puede resolver en tiempo polinómico encontrando un emparejamiento de peso máximo. Figura 4: Codificación del emparejamiento de peso máximo del mercado en la Figura 1. Podemos generalizar este codificado para L arbitrario. Sea C(L) el conjunto de todos los ciclos de G con longitud a lo sumo L. Entonces el siguiente ILP encuentra la cobertura de ciclos de máximo peso por ciclos de C(L): max c∈C(L) wcc sujeto a c:vi∈c c ≤ 1 ∀vi ∈ V con c ∈ {0, 1} ∀c ∈ C(L) 5.1 Formulación de Arista vs Ciclo En esta sección, consideramos los méritos de la formulación de arista y la formulación de ciclo. La formulación del problema del borde se puede resolver en tiempo polinómico cuando no hay restricciones en el tamaño del ciclo. La formulación del ciclo se puede resolver en tiempo polinómico cuando el tamaño del ciclo es a lo sumo 2. Ahora consideramos el caso de ciclos cortos de longitud como máximo L, donde L ≥ 3. Nuestros algoritmos de búsqueda de árboles utilizan la relajación LP de estas formulaciones para proporcionar cotas superiores de la solución óptima. Estos límites ayudan a podar subárboles y guiar la búsqueda de las formas habituales. Teorema 2. La relajación LP de la formulación del ciclo domina débilmente la relajación LP de la formulación del borde. Prueba. Considera una solución óptima para la relajación LP de la formulación del ciclo. Mostramos cómo construir una solución equivalente en la formulación de bordes. Para cada arista en el grafo, establezca su valor como la suma de los valores de todos los ciclos de los cuales es miembro. También, define el valor de un vértice de la misma manera. Debido a las restricciones del ciclo, las restricciones de conservación y capacidad de la codificación de los bordes se cumplen claramente. Queda por demostrar que ninguna de las restricciones de ruta se viola. Sea p cualquier camino de longitud L en el grafo. Dado que p tiene L−1 vértices interiores (sin contar los extremos), la suma de estos vértices interiores es como máximo L−1. Ahora, para cualquier ciclo c de longitud como máximo L, el número de aristas que tiene en p, que denotamos como ec(p), es como máximo el número de vértices interiores que tiene en p, que denotamos como vc(p). Por lo tanto, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 La afirmación contraria de este teorema no es verdadera. Considera un grafo que es simplemente un ciclo con n aristas. Claramente, la relajación LP de la formulación del ciclo tiene un valor óptimo de 0, ya que no hay ciclos de tamaño menor o igual a L. Sin embargo, la formulación de aristas tiene una solución de tamaño n/2, con cada arista teniendo un valor de 1/2. Por lo tanto, la formulación del ciclo es más ajustada que la formulación del borde. Además, para un grafo con m aristas, la formulación de aristas requiere O(m3) restricciones, mientras que la formulación de ciclos solo requiere O(m2). 5.2 Generación de columnas para la tabla de PL. La Tabla 2 muestra cómo el número de ciclos de longitud a lo sumo 3 crece con el tamaño del mercado. Con una variable por ciclo en la formulación del ciclo, CPLEX ni siquiera puede liquidar mercados con 1,000 pacientes sin quedarse sin memoria (ver Figura 6). Para abordar este problema, utilizamos un enfoque de formulación incremental. El primer paso en la búsqueda de árbol guiada por LP es resolver la relajación LP. Dado que la formulación del ciclo no cabe en la memoria, esta etapa de LP fallaría inmediatamente sin un enfoque de formulación incremental. Sin embargo, motivados por la observación de que una solución de intercambio puede incluir solo una pequeña fracción de los ciclos, exploramos el enfoque de utilizar la generación de columnas (es decir, ciclos). La idea de la generación de columnas es comenzar con un LP restringido que contenga solo un pequeño número de columnas (variables, es decir, ciclos), y luego agregar columnas repetidamente hasta que una solución óptima para este LP parcialmente formulado sea una solución óptima para el LP original (también conocido como maestro). Explicamos esto más a fondo mediante un ejemplo. Considera el mercado en la Figura 1 con L = 2. La Figura 5 muestra el LP maestro correspondiente, P, y su dual, D. El primal P maximiza 2c1 + 2c2 + 2c3 sujeto a c1 ≤ 1 (v1), c1 + c2 ≤ 1 (v2), c2 + c3 ≤ 1 (v3), c3 ≤ 1 (v4) con c1, c2, c3 ≥ 0. El dual D minimiza v1 + v2 + v3 + v4 sujeto a v1 + v2 ≥ 2 (c1), v2 + v3 ≥ 2 (c2), v3 + v4 ≥ 2 (c3) con v1, v2, v3, v4 ≥ 0. Figura 5: Formulación del ciclo. Sea P la restricción de P que contiene solo las columnas c1 y c3. Sea D el dual de P, es decir, D es simplemente D sin la restricción c2. Dado que P y D son pequeños, podemos resolverlos para obtener OPT(P) = OPT(D) = 4, con cOPT(P) = c1 = c3 = 1 y vOPT(D) = v1 = v2 = v3 = v4 = 1. Si cOP T (P ) debe ser una solución factible de P, resulta (afortunadamente) que vOP T (D ) es factible para D, de modo que OPT(D ) ≥ OPT(D). Podemos verificar esto comprobando que vOP T (D) cumple con las restricciones de D que aún no están en Di, es decir, la restricción c2. Se deduce que OPT(P) = OPT(D) ≥ OPT(D) = OPT(P), por lo que vOPT(P) es demostrablemente una solución óptima para P, a pesar de que P contiene solo un subconjunto estricto de las columnas de P. Por supuesto, puede resultar (desafortunadamente) que vOPT(D) no sea factible para D. Esto puede ocurrir como se muestra arriba si vOPT(D) = v1 = 2, v2 = 0, v3 = 0, v4 = 2. Aunque todavía podemos ver que OPT(D) = OPT(D), en general no podemos demostrarlo porque D y P son demasiado grandes para resolver. En cambio, dado que se viola la restricción c2, agregamos la columna c2 a P, actualizamos D y repetimos. El problema de encontrar una restricción violada se llama problema de fijación de precios. Aquí, el precio de una columna (ciclo en nuestra configuración) es la diferencia entre su peso y la suma de los valores duales de los vértices del ciclo. Si alguna columna de P tiene un precio positivo, su restricción correspondiente está violada y aún no hemos demostrado la optimalidad. En este caso, debemos seguir generando columnas para agregar a P. Problema de fijación de precios 5.2.1 Para instancias más pequeñas, podemos mantener una colección explícita de todos los ciclos factibles. Esto hace que el problema de fijación de precios sea fácil y eficiente de resolver: simplemente recorremos la colección de ciclos y buscamos ciclos con precio positivo. Incluso podemos encontrar ciclos con el precio más positivo, que son los más propensos a mejorar el valor objetivo de LP restringido [1]. Sin embargo, este enfoque no es escalable. Un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos de longitud de máximo 3 (ver Tabla 2). Esto es demasiados ciclos para mantener en la memoria. Por lo tanto, para instancias más grandes, debemos generar ciclos factibles mientras buscamos uno con un precio positivo. Realizamos esto utilizando un algoritmo de búsqueda en profundidad en el grafo del mercado (ver Figura 1). Para hacer esta búsqueda más rápida, exploramos los vértices en orden de valores no decrecientes, ya que es más probable que estos vértices pertenezcan a ciclos con peso positivo. También utilizamos varias reglas de poda para determinar si la ruta de búsqueda actual puede llevar a un ciclo de peso positivo. Por ejemplo, en un vértice dado en la búsqueda, podemos podar basándonos en el hecho de que cada vértice que visitemos a partir de este punto tendrá un valor al menos tan grande como el vértice actual. Incluso con estas reglas de poda, la generación de columnas es un cuello de botella. Por lo tanto, también implementamos las siguientes optimizaciones. Cuando la búsqueda exhaustiva demuestra que un vértice no pertenece a ningún ciclo de precios positivos, marcamos el vértice y no lo utilizamos como raíz de una búsqueda en profundidad hasta que su valor dual disminuya. De esta manera, evitamos repetir innecesariamente nuestros esfuerzos computacionales de una iteración previa de generación de columnas. Finalmente, a veces puede ser beneficioso para la generación de columnas incluir varias columnas de precio positivo en una iteración, ya que puede ser más rápido generar una segunda columna una vez que se encuentra la primera. Sin embargo, evitamos esto por la siguiente razón. Si intentamos encontrar más columnas de precio positivo de las que se pueden encontrar, o si las columnas están muy separadas en el espacio de búsqueda, terminamos teniendo que generar y verificar una gran parte de la colección de ciclos factibles. En nuestros experimentos, hemos observado que esto ocurre en mercados con cientos de millones de ciclos, lo que resulta en costos de computación prohibitivamente caros. 5.2.2 Sembrado de Columnas Incluso si hay solo una pequeña brecha con la relajación principal del LP, la generación de columnas requiere muchas iteraciones para mejorar el valor objetivo del LP restringido. Cada una de estas 300 iteraciones es costosa, ya que debemos resolver el problema de fijación de precios y volver a resolver el LP restringido. Por lo tanto, aunque podríamos empezar sin columnas en el LP restringido, es mucho más rápido sembrar el LP con suficientes columnas para que el valor objetivo óptimo no esté muy lejos del LP principal. Por supuesto, no podemos incluir tantas columnas que nos quedemos sin memoria. Experimentamos con varios sembradores de columnas. En una clase de sembrador, utilizamos una heurística para encontrar un intercambio, y luego agregamos los ciclos de ese intercambio al LP restringido inicial. Implementamos dos heurísticas. El primero es un algoritmo voraz: para cada vértice en un orden aleatorio, si está sin cubrir, intentamos incluir un ciclo que lo contenga a él y a otros vértices sin cubrir. El otro heurístico utiliza un código especializado de emparejamiento de peso máximo [16] para encontrar una cobertura óptima mediante ciclos de longitud 2. Estas heurísticas funcionan extremadamente bien, especialmente teniendo en cuenta el hecho de que solo agregan un pequeño número de columnas. Por ejemplo, la Tabla 1 muestra que una cobertura óptima por ciclos de longitud 2 tiene casi el mismo peso que el intercambio con tamaño de ciclo no restringido. Sin embargo, tenemos suficiente memoria para incluir cientos de miles de columnas adicionales y así acercarnos aún más al límite superior. Nuestro mejor sembrador de columnas construye una colección aleatoria de ciclos factibles. Dado que un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos factibles, lleva demasiado tiempo generar y recorrer todos los ciclos factibles, por lo que no incluimos una colección aleatoria uniforme. En cambio, realizamos un recorrido aleatorio en el grafo del mercado (ver, por ejemplo, Figura 1), en el cual, después de cada paso del recorrido, probamos si hay un borde de regreso a nuestro camino que forme un ciclo factible. Si encontramos un ciclo, este se incluye en el LP restringido y comenzamos una nueva caminata desde un vértice aleatorio. En nuestros experimentos (ver Sección 6), utilizamos este algoritmo para sembrar el LP con 400,000 ciclos. Este último enfoque supera a los sembradores heurísticos descritos anteriormente. Sin embargo, en nuestro algoritmo, utilizamos una combinación que toma la unión de todas las columnas de los tres sembradores. En la Figura 6, comparamos el rendimiento del sembrador combinado con el sembrador combinado sin el sembrador de recolección aleatoria. No trazamos el rendimiento del algoritmo sin ningún sembrador en absoluto, porque puede llevar horas despejar mercados que de otra manera podríamos despejar en unos pocos minutos. 5.2.3 Demostrando la optimalidad. Recordemos que nuestro objetivo es encontrar una solución óptima para la relajación principal del LP. Usando la generación de columnas, podemos demostrar que una solución primal restringida es óptima una vez que todas las columnas tienen precios no positivos. Desafortunadamente, nuestro problema de compensación tiene el llamado efecto de disminución gradual [1, Sección 6.3], en el cual, aunque el primal restringido es óptimo a posteriori, se requiere un gran número de iteraciones adicionales para demostrar la optimalidad (es decir, eliminar todas las columnas de precio positivo). No hay una buena solución general para el efecto de disminución. Sin embargo, para mitigar este efecto, aprovechamos la siguiente observación específica del problema. Recuerde de la Sección 1.1 que, casi siempre, un intercambio de peso máximo con ciclos de longitud a lo sumo 3 tiene el mismo peso que un intercambio de peso máximo sin restricciones. (Sin embargo, esto no significa que el solucionador para el caso sin restricciones encontrará una solución con ciclos cortos). Además, el problema de despeje no restringido se puede resolver en tiempo polinómico (ver Sección 4). Por lo tanto, podemos calcular eficientemente un límite superior en la relajación principal del LP, y, cada vez que el primal restringido alcanza este límite superior, ¡hemos demostrado la optimalidad sin necesidad de eliminar todas las columnas de precio positivo! Para que esto mejore el tiempo de ejecución del algoritmo en general, necesitamos poder despejar el mercado sin restricciones en menos tiempo del que le lleva a la generación de columnas eliminar todos los ciclos de precios positivos. Aunque el primer problema es soluble en tiempo polinómico, esto no es trivial para instancias grandes. Por ejemplo, para un mercado con 10,000 pacientes y 25 millones de conexiones, el código especializado de emparejamiento de peso máximo [16] era demasiado lento, y CPLEX se quedó sin memoria en la codificación de formulación de bordes de la Sección 4. Para hacer funcionar esta idea, utilizamos generación de columnas para resolver la formulación de bordes. Esto implica comenzar con un pequeño subconjunto aleatorio de los bordes, y luego agregar bordes con precio positivo uno por uno hasta que no quede ninguno. Realizamos esta generación de columnas secundarias no en el grafo de mercado original G, sino en el grafo bipartito de emparejamiento perfecto de la Figura 3. Hacemos esto para que solo necesitemos resolver el LP, no el ILP, ya que la brecha de integralidad en el grafo bipartito de emparejamiento perfecto es 1, es decir, siempre existe una solución integral que alcanza el límite superior fraccional. El aumento de velocidad resultante en el algoritmo general es dramático, como se puede ver en la Figura 6. 5.2.4 Gestión de Columnas Si el valor óptimo del LP restringido inicial P está lejos del LP maestro P, entonces se generan un gran número de columnas antes de que se cierre la brecha. Esto conduce a problemas de memoria en mercados con tan solo 4,000 pacientes. Además, incluso antes de que la memoria se convierta en un problema, las iteraciones de generación de columnas se vuelven lentas debido a la sobrecarga adicional de resolver un LP más grande. Para abordar estos problemas, implementamos un esquema de gestión de columnas para limitar el tamaño del LP restringido. Siempre que agregamos columnas al LP, verificamos si contiene más de un número umbral de columnas. Si este es el caso, eliminamos selectivamente columnas hasta que esté nuevamente por debajo del umbral2. Como discutimos anteriormente, solo una pequeña fracción de todos los ciclos terminará en la solución final. Es poco probable que eliminemos dicho ciclo, y aun si lo hacemos, siempre se puede generar de nuevo. Por supuesto, no debemos ser demasiado agresivos con el umbral, ya que hacerlo podría contrarrestar las ganancias de rendimiento por iteración al aumentar significativamente el número de iteraciones necesarias para obtener un conjunto de columnas adecuado en el LP al mismo tiempo. Hay algunas columnas que nunca eliminamos, por ejemplo aquellas en las que hemos realizado ramificaciones (ver Sección 5.3.2), o aquellas con un valor de LP distinto de cero. Entre el resto, eliminamos aquellos con el precio más bajo, ya que corresponden a las restricciones duales que están más satisfechas. Este esquema de gestión de columnas funciona bien y nos ha permitido despejar mercados con 10,000 pacientes, como se ve en la Figura 6. 5.3 Búsqueda de Ramificación y Precio para el ILP Dado un problema grande de despeje de mercado, podemos resolver con éxito su relajación LP hasta la optimalidad utilizando las mejoras de generación de columnas descritas anteriormente. Sin embargo, las soluciones que encontramos suelen ser fraccionarias. Por lo tanto, en el paso 2 siguiente, basándonos en el tamaño de la memoria, establecemos el umbral en 400,000. El paso 301 implica realizar una búsqueda de árbol de ramificación y precio [1] para encontrar una solución integral óptima. Breve, esta es la idea de ramificar y fijar precios. Siempre que establecemos una variable fraccional en 0 o 1 (rama), tanto el LP maestro como la restricción con la que estamos trabajando se modifican (se restringen). Por defecto, entonces, necesitamos realizar la generación de columnas (es decir, el esfuerzo de fijar precios) en cada nodo del árbol de búsqueda para demostrar que la restricción restringida es óptima para el LP maestro restringido. (Sin embargo, como se discute en la Sección 5.2.3, calculamos el límite superior integral para el nodo raíz basado en relajar completamente la restricción de longitud del ciclo, y cada vez que algún LP de los nodos en el árbol alcance ese valor, no necesitamos seguir fijando precios de columnas en ese nodo). Para el problema de despeje con ciclos de longitud a lo sumo 3, hemos encontrado que rara vez hay una brecha entre las soluciones integrales y fraccionarias óptimas. Esto significa que podemos evitar en gran medida el costoso paso de fijar precios por nodo: cuando el LP restringido restringido tiene el mismo valor óptimo que su padre en la búsqueda del árbol, podemos demostrar la optimalidad del LP, como se muestra en la Sección 5.2.3, sin tener que incluir columnas adicionales en el LP restringido. Aunque CPLEX puede resolver ILPs, no admite la técnica de branch-and-price (por ejemplo, debido a posibles complicaciones específicas del problema que involucran la interacción entre la regla de ramificación y el problema de fijación de precios). Por lo tanto, implementamos nuestro propio algoritmo de ramificación y precio, el cual explora el árbol de búsqueda en orden de profundidad primero. También experimentamos con el orden de selección de nodos A* [7, 2]. Sin embargo, esta estrategia de búsqueda requiere significativamente más memoria, la cual encontramos que se empleaba mejor para acelerar la fase de generación de columnas (ver Sección 5.2.2). Los componentes principales restantes del algoritmo se describen en las dos siguientes subsecciones. 5.3.1 Heurísticas Primal Antes de ramificar en una variable fraccional, utilizamos heurísticas primales para construir una solución integral factible. Estas soluciones son límites inferiores de las soluciones integrales óptimas finales. Por lo tanto, cuando una solución fraccional restringida no es mejor que la mejor solución integral encontrada hasta el momento, podamos el subárbol actual. Una heurística primal es efectiva si es eficiente y construye límites inferiores ajustados. Experimentamos con dos heurísticas primarias. El primero es un algoritmo de redondeo simple [8]: incluir todos los ciclos con un valor fraccional de al menos 0.5, y luego, asegurando la viabilidad, agregar de forma codiciosa los ciclos restantes. Si bien esta heurística es eficiente, encontramos que los límites inferiores que construye rara vez permiten realizar un gran número de podas. También intentamos usar CPLEX como una heurística primal. En cualquier nodo dado del árbol de búsqueda, podemos convertir la relajación LP restringida de nuevo a un ILP reintroduciendo las restricciones de integralidad. CPLEX tiene varias heurísticas primales integradas, las cuales podemos aplicar a este ILP. Además, podemos utilizar la búsqueda de árbol propia de CPLEX para encontrar una solución integral óptima. En general, esta búsqueda de árbol es mucho más rápida que la nuestra. Si CPLEX encuentra una solución integral que coincida con el límite superior fraccional en el nodo raíz, hemos terminado. De lo contrario, no existe tal solución integral, o aún no tenemos la combinación correcta de ciclos en el LP restringido. Para los mercados de intercambio de riñones, generalmente es la segunda razón la que se aplica (ver Secciones 5.2.2 y 5.2.4). Por lo tanto, en algún momento de la búsqueda en el árbol, una vez que se han generado más columnas como resultado de la ramificación, la heurística de CPLEX encontrará una solución integral óptima. Aunque la búsqueda de árbol de CPLEX es más rápida que la nuestra, no es tan rápida como para poder aplicarla a cada nodo en nuestro árbol de búsqueda. Por lo tanto, realizamos las siguientes optimizaciones. En primer lugar, agregamos una restricción que requiere que el valor objetivo del ILP sea tan grande como el objetivo fraccional. Si este no es el caso, queremos abortar y proceder a generar más columnas con nuestra búsqueda de ramificación y precio. En segundo lugar, limitamos el número de nodos en el árbol de búsqueda de CPLEX. Esto se debe a que hemos observado que no existe una solución integral, CPLEX puede tardar mucho tiempo en demostrarlo. Finalmente, solo aplicamos la heurística CPLEX en un nodo si tiene un conjunto de ciclos suficientemente diferente al de su padre. Utilizar CPLEX como heurística primal tiene un gran impacto porque reduce el tamaño del árbol de búsqueda, evitando así todo el trabajo de fijación computacionalmente costoso en los nodos que no se generan en este árbol más pequeño. 5.3.2 Ramificador de Ciclo. Experimentamos con dos estrategias de ramificación, ambas seleccionan una variable por nodo. La primera estrategia, ramificación por certeza, selecciona aleatoriamente una variable de aquellas cuyo valor LP está más cercano a 1. La segunda estrategia, ramificación por incertidumbre, selecciona aleatoriamente una variable cuyo valor LP esté más cercano a 0.5. En ambos casos, se generan dos hijos del nodo correspondientes a dos subárboles, uno en el que la variable se establece en 0 y otro en el que se establece en 1. Nuestro recorrido en profundidad siempre elige explorar primero el subárbol en el que el valor de la variable está más cerca de su valor fraccionario. Para nuestro problema de despeje con ciclos de longitud como máximo 3, encontramos que el ramificado por incertidumbre es superior, rara vez requiriendo retroceso alguno. 6. RESULTADOS EXPERIMENTALES Todos nuestros experimentos se realizaron en Linux (Red Hat 9.0), utilizando una PC Dell con un procesador Intel Pentium 4 de 3GHz y 1GB de RAM. Dondequiera que usamos CPLEX (por ejemplo, al resolver el LP y como heurística primal, como se discutió en las secciones anteriores), usamos CPLEX 10.010. La Figura 6 muestra el rendimiento en tiempo de ejecución de cuatro algoritmos de limpieza. Para cada tamaño de mercado listado, generamos aleatoriamente 10 mercados e intentamos liquidarlos utilizando cada uno de los algoritmos. El primer algoritmo es CPLEX en la formulación del ciclo completo. Este algoritmo no logra despejar ningún mercado con 1000 pacientes o más. Además, su tiempo de ejecución en mercados más pequeños que este es significativamente peor que el de los otros algoritmos. Los otros algoritmos son variaciones del enfoque de generación de columnas incremental descrito en la Sección 5. Comenzamos con la siguiente configuración (todas las optimizaciones están activadas): Categoría Configuración Columna Sembrador Combinación de heurísticas de intercambio voraz y emparejamiento de peso máximo, y sembrador de caminata aleatoria (400,000 ciclos). Generación de columnas una columna a la vez. Gestión de columnas activada, con límite de 400,000 columnas. Comprobador de Optimalidad Encendido. Redondeo heurístico primal y búsqueda en el árbol de CPLEX. Regla de ramificación de incertidumbre. La combinación de estas optimizaciones nos permite liquidar fácilmente mercados con más de 10,000 pacientes. En cada uno de los dos próximos algoritmos, desactivamos una de estas optimizaciones para resaltar su efectividad. Primero, restringimos el sembrador para que solo comience con 10,000 ciclos. Esta configuración es más rápida para instancias más pequeñas, ya que las relajaciones de LP son más pequeñas y se resuelven más rápido. Sin embargo, al llegar a 5000 vértices, este efecto comienza a ser contrarrestado por la generación adicional de columnas que se debe realizar. Para una instancia más grande, este sembrador restringido es claramente peor. Finalmente, restauramos el sembrador a su configuración optimizada, pero esta vez, eliminamos el verificador de optimalidad descrito en la Sección 5.2.3. Como en muchos problemas de generación de columnas, el efecto de disminución es significativo. Aprovechando las propiedades de nuestro problema, logramos despejar un mercado con 10,000 pacientes en aproximadamente el mismo tiempo que habría tomado despejar un mercado de 6000 pacientes. 7. IMPLEMENTANDO LA TECNOLOGÍA Nuestro algoritmo e implementación reemplazaron a CPLEX como algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones, en diciembre de 2006. Realizamos una ejecución de prueba cada dos semanas, y los primeros trasplantes basados en nuestras soluciones ya han sido realizados. Aunque actualmente existen al menos cuatro intercambios de riñones en los Estados Unidos por razones políticas o interpersonales, todos comprenden que un intercambio nacional unificado y sin fragmentar salvaría más vidas. Estamos en conversaciones con intercambios de riñón adicionales que están interesados en adoptar nuestra tecnología. De esta manera, nuestra tecnología (y los procesos que la rodean) esperamos que sirvan como un sustrato que eventualmente ayudará a unificar los intercambios. Al menos la escalabilidad computacional ya no es un obstáculo. CONCLUSIÓN E INVESTIGACIONES FUTURAS En este trabajo hemos desarrollado los algoritmos exactos más escalables para intercambios de trueque hasta la fecha, con un enfoque especial en el próximo mercado nacional de intercambio de riñones en el que los pacientes con enfermedad renal serán emparejados con donantes compatibles intercambiando a sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a la enfermedad renal. Nuestro trabajo presenta el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Resuelve de manera óptima el problema de compensación de intercambio de riñones con 10,000 pares donante-receptor. Por lo tanto, no es necesario recurrir a soluciones aproximadas. La mejor tecnología previa (CPLEX básico) no puede manejar instancias de más de aproximadamente 900 pares de donantes-receptores porque se queda sin memoria. La clave de nuestra mejora es la formulación incremental de problemas. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas que mejoran sustancialmente tanto el tiempo de ejecución como el uso de memoria. Algunas de las técnicas utilizan observaciones específicas del dominio, mientras que otras son independientes del dominio. Concluimos que la generación de columnas escala de manera significativamente mejor que la generación de restricciones. Para la generación de columnas en el LP, nuestras mejoras incluyen técnicas de fijación de precios, técnicas de siembra de columnas, técnicas para demostrar la optimalidad sin tener que traer todas las columnas con precio positivo (y utilizando otro proceso de generación de columnas en una formulación diferente para hacerlo), y técnicas de eliminación de columnas. Para la búsqueda de ramificación y precio en el programa entero que rodea al LP, nuestras mejoras incluyen heurísticas primales y también comparamos estrategias de ramificación. Sin duda, se podrían utilizar ajustes adicionales de parámetros y quizás técnicas adicionales de mejora de velocidad para hacer que el algoritmo sea aún más rápido. Nuestro algoritmo también admite varias generalizaciones, según lo deseado por los intercambios reales de riñones. Estos incluyen múltiples donantes alternativos por paciente, bordes ponderados en el grafo del mercado (para codificar diferencias en años de vida esperados añadidos basados en grados de compatibilidad, edad y peso del paciente, etc., así como la probabilidad de incompatibilidad de último minuto), cadenas desencadenadas por ángeles (cadenas de trasplantes desencadenadas por donantes altruistas que no tienen pacientes asociados con ellos, cada cadena termina con un riñón sobrante), y problemas adicionales (como diferentes puntajes para salvar a diferentes donantes altruistas o riñones sobrantes para futuras ejecuciones de <br>emparejamiento</br> basadas en tipo de sangre, tipo de tejido y probabilidad de que el órgano no desaparezca del mercado porque el donante tenga dudas). Debido a que utilizamos una metodología de PLI, también podemos soportar una variedad de restricciones laterales, las cuales a menudo desempeñan un papel importante en los mercados en la práctica [19]. También podemos respaldar la asignación forzosa de una parte, por ejemplo, este adolescente gravemente enfermo debe recibir un riñón si es posible. Nuestro trabajo ha tratado el intercambio de riñones como un problema por lotes con información completa (al menos a corto plazo, es probable que los intercambios de riñones sigan funcionando en modo por lotes de vez en cuando). Dos direcciones importantes para trabajos futuros son abordar explícitamente tanto los aspectos en línea como los de información limitada del problema. El aspecto en línea es que los beneficiarios y donantes irán llegando al sistema con el tiempo, y puede ser mejor no llevar a cabo el intercambio óptimo de forma miope ahora, sino reservar parte del mercado actual para futuras coincidencias. De hecho, se ha realizado cierto trabajo al respecto en ciertos entornos restringidos [22, 24]. El aspecto de información limitada es que incluso en modo por lotes, el grafo proporcionado como entrada no es completamente correcto: varios pares donante-receptor que se creían compatibles resultan ser incompatibles cuando se realizan pruebas de último minuto más costosas. Por lo tanto, sería deseable realizar una optimización teniendo esto en cuenta, como producir un subgrafo robusto de bajo grado para ser probado antes de que se genere la <br>coincidencia</br> final, o producir un plan de contingencia en caso de fallo. Actualmente estamos explorando varias preguntas en esta línea, pero ciertamente hay mucho más por hacer. Agradecimientos Agradecemos a los economistas Al Roth y Utku Unver, así como al cirujano de trasplantes de riñón Michael Rees, por alertarnos sobre el hecho de que la tecnología previa era insuficiente para el problema de compensación a escala nacional, proporcionar conjuntos de datos iniciales y discutir los detalles del proceso de intercambio de riñones. También agradecemos a Don Sheehy por habernos hecho notar la idea del intercambio de zapatos. Este trabajo fue apoyado en parte por la Fundación Nacional de Ciencias bajo los subsidios IIS-0427858 y CCF-0514922. REFERENCIAS [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh y P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Tiempo de limpieza (segundos) Número de pacientes Nuestro algoritmo Nuestro algoritmo con sembrador de columnas restringido Nuestro algoritmo sin demostrador de optimalidad Formulación de ciclo CPLEX Figura 6: Resultados experimentales: tiempo de ejecución promedio con barras de desviación estándar. Rama y precio: Generación de columnas para resolver programas enteros enormes. Investigación de Operaciones, 46:316-329, mayo-junio de 1998. [2] R. Dechter y J. Pearl. Estrategias generalizadas de búsqueda de mejor primero y la optimalidad de A*. Revista de la ACM, 32(3):505-536, 1985. [3] F. L. Delmonico. Intercambio de riñones - avances en el trasplante de donante vivo. Revista de Medicina de Nueva Inglaterra, 350:1812-1814, 2004. [4] J. Edmonds. Camino, árboles y flores. Revista Canadiense de Matemáticas, 17:449-467, 1965. [5] M. R. Garey y D. S. Johnson. Computadoras e Intractabilidad; Una Guía de la Teoría de NP-Completitud. 1990. [6] S. E. Gentry, D. L. Segev y R. A. Montgomery. Una comparación de las poblaciones atendidas por donación emparejada de riñón y donación emparejada de lista. Revista Americana de Trasplantes, 5(8):1914-1921, agosto de 2005. [7] P. Hart, N. Nilsson y B. Raphael. Una base formal para la determinación heurística de caminos de costo mínimo. IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman y M. Padberg. Resolviendo problemas de programación de tripulaciones aéreas mediante ramificación y corte. Ciencia de la Gestión, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] Intercambio Nacional de Zapatos Impares. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Léelo, cámbialo. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez y M. U. Unver. Intercambio de riñones. Revista Trimestral de Economía, 119(2):457-488, mayo de 2004. [14] A. E. Roth, T. Sonmez y M. U. Unver. Un centro de intercambio de riñones en Nueva Inglaterra. Revista Económica Americana, 95(2):376-380, mayo de 2005. [15] A. E. Roth, T. Sonmez y M. U. Unver. Intercambio eficiente de riñones: Coincidencia de deseos en un mercado con preferencias basadas en la compatibilidad. American Economic Review, próximo. [16] E. Rothberg. Algoritmo de emparejamiento de peso máximo de Gabow n3: una implementación. El Primer Desafío de Implementación DIMACS, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver y F. L. Delmonico. Aumentando la oportunidad de donación de riñón en vida mediante el emparejamiento para intercambios de dos y tres vías. Trasplante, 81(5):773-782, 2006. [18] T. Sandholm. Algoritmos óptimos de determinación de ganadores. En Subastas Combinatorias, Cramton, Shoham y Steinberg, eds. MIT Press, 2006. [19] T. Sandholm y S. Suri. Restricciones laterales y atributos no relacionados con el precio en los mercados. En el taller IJCAI-2001 sobre Razonamiento de Restricciones Distribuidas, páginas 55-61, Seattle, WA, 2001. Para aparecer en Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb y R. A. Montgomery. Donación emparejada de riñón y optimización del uso de órganos de donantes vivos. Revista de la Asociación Médica Estadounidense, 293(15):1883-1890, abril de 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver. Intercambio dinámico de riñones. Documento de trabajo. [23] Sistema de Datos Renales de los Estados Unidos (USRDS). http://www.usrds.org/. [24] S. A. Zenios. Control óptimo de un programa de intercambio de riñones emparejados. Ciencias de la Gestión, 48(3):328-342, marzo de 2002. 304 ",
            "candidates": [],
            "error": [
                [
                    "carreras de fósforos",
                    "emparejamiento",
                    "coincidencia"
                ]
            ]
        },
        "branch-and-price": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Clearing Algorithms for Barter Exchange Markets: Enabling Nationwide Kidney Exchanges David J. Abraham Computer Science Department Carnegie Mellon University dabraham@cs.cmu.edu Avrim Blum Computer Science Department Carnegie Mellon University avrim@cs.cmu.edu Tuomas Sandholm Computer Science Department Carnegie Mellon University sandholm@cs.cmu.edu ABSTRACT In barter-exchange markets, agents seek to swap their items with one another, in order to improve their own utilities.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "We focus mainly on the upcoming national kidney-exchange market, where patients with kidney disease can obtain compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "The clearing problem involves finding a social welfare maximizing exchange when the maximum length of a cycle is fixed.",
                "Long cycles are forbidden, since, for incentive reasons, all transplants in a cycle must be performed simultaneously.",
                "Also, in barter-exchanges generally, more agents are affected if one drops out of a longer cycle.",
                "We prove that the clearing problem with this cycle-length constraint is NP-hard.",
                "Solving it exactly is one of the main challenges in establishing a national kidney exchange.",
                "We present the first algorithm capable of clearing these markets on a nationwide scale.",
                "The key is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop techniques that dramatically improve both runtime and memory usage.",
                "We conclude that column generation scales drastically better than constraint generation.",
                "Our algorithm also supports several generalizations, as demanded by real-world kidney exchanges.",
                "Our algorithm replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges.",
                "The match runs are conducted every two weeks and transplants based on our optimizations have already been conducted.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Analysis of Algorithms and Problem Complexity]: [General] General Terms Algorithms, Economics 1.",
                "INTRODUCTION The role of kidneys is to filter waste from blood.",
                "Kidney failure results in accumulation of this waste, which leads to death in months.",
                "One treatment option is dialysis, in which the patient goes to a hospital to have his/her blood filtered by an external machine.",
                "Several visits are required per week, and each takes several hours.",
                "The quality of life on dialysis can be extremely low, and in fact many patients opt to withdraw from dialysis, leading to a natural death.",
                "Only 12% of dialysis patients survive 10 years [23].",
                "Instead, the preferred treatment is a kidney transplant.",
                "Kidney transplants are by far the most common transplant.",
                "Unfortunately, the demand for kidneys far outstrips supply.",
                "In the United States in 2005, 4,052 people died waiting for a life-saving kidney transplant.",
                "During this time, almost 30,000 people were added to the national waiting list, while only 9,913 people left the list after receiving a deceaseddonor kidney.",
                "The waiting list currently has over 70,000 people, and the median waiting time ranges from 2 to 5 years, depending on blood type.1 For many patients with kidney disease, the best option is to find a living donor, that is, a healthy person willing to donate one of his/her two kidneys.",
                "Although there are marketplaces for buying and selling living-donor kidneys, the commercialization of human organs is almost universally regarded as unethical, and the practice is often explicitly illegal, such as in the US.",
                "However, in most countries, live donation is legal, provided it occurs as a gift with no financial compensation.",
                "In 2005, there were 6,563 live donations in the US.",
                "The number of live donations would have been much higher if it were not for the fact that, frequently, a potential donor 1 Data from the United Network for Organ Sharing [21]. 295 and his intended recipient are blood-type or tissue-type incompatible.",
                "In the past, the incompatible donor was sent home, leaving the patient to wait for a deceased-donor kidney.",
                "However, there are now a few regional kidney exchanges in the United States, in which patients can swap their incompatible donors with each other, in order to each obtain a compatible donor.",
                "These markets are examples of barter exchanges.",
                "In a barter-exchange market, agents (patients) seek to swap their items (incompatible donors) with each other.",
                "These swaps consist of cycles of agents, with each agent receiving the item of the next agent in the cycle.",
                "Barter exchanges are ubiquitous: examples include Peerflix (DVDs) [11], Read It Swap It (books) [12], and Intervac (holiday houses) [9].",
                "For many years, there has even been a large shoe exchange in the United States [10].",
                "People with different-sized feet use this to avoid having to buy two pairs of shoes.",
                "Leg amputees have a separate exchange to share the cost of buying a single pair of shoes.",
                "We can encode a barter exchange market as a directed graph G = (V, E) in the following way.",
                "Construct one vertex for each agent.",
                "Add a weighted edge e from one agent vi to another vj, if vi wants the item of vj.",
                "The weight we of e represents the utility to vi of obtaining vjs item.",
                "A cycle c in this graph represents a possible swap, with each agent in the cycle obtaining the item of the next agent.",
                "The weight wc of a cycle c is the sum of its edge weights.",
                "An exchange is a collection of disjoint cycles.",
                "The weight of an exchange is the sum of its cycle weights.",
                "A social welfare maximizing exchange is one with maximum weight.",
                "Figure 1 illustrates an example market with 5 agents, {v1, v2, . . . , v5}, in which all edges have weight 1.",
                "The market has 4 cycles, c1 = v1, v2 , c2 = v2, v3 , c3 = v3, v4 and c4 = v1, v2, v3, v4, v5 , and two (inclusion) maximal exchanges, namely M1 = {c4} and M2 = {c1, c3}.",
                "Exchange M1 has both maximum weight and maximum cardinality (i.e., it includes the most edges/vertices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figure 1: Example barter exchange market.",
                "The clearing problem is to find a maximum-weight exchange consisting of cycles with length at most some small constant L. This cycle-length constraint arises naturally for several reasons.",
                "For example, in a kidney exchange, all operations in a cycle have to be performed simultaneously; otherwise a donor might back out after his incompatible partner has received a kidney. (One cannot write a binding contract to donate an organ.)",
                "This gives rise to a logistical constraint on cycle size: even if all the donors are operated on first and the same personnel and facilities are used to then operate on the donees, a k-cycle requires between 3k and 6k doctors, around 4k nurses, and almost 2k operating rooms.",
                "Due to such resource constraints, the upcoming national kidney exchange market will likely allow only cycles of length 2 and 3.",
                "Another motivation for short cycles is that if the cycle fails to exchange, fewer agents are affected.",
                "For example, last-minute testing in a kidney exchange often reveals new incompatibilities that were not detected in the initial testing (based on which the compatibility graph was constructed).",
                "More generally, an agent may drop out of a cycle if his preferences have changed, or he/she simply fails to fulfill his obligations (such as sending a book to another agent in the cycle) due to forgetfulness.",
                "In Section 3, we show that (the decision version of) the clearing problem is NP-complete for L ≥ 3.",
                "One approach then might be to look for a good heuristic or approximation algorithm.",
                "However, for two reasons, we aim for an exact algorithm based on an integer-linear program (ILP) formulation, which we solve using specialized tree search. • First, any loss of optimality could lead to unnecessary patient deaths. • Second, an attractive feature of using an ILP formulation is that it allows one to easily model a number of variations on the objective, and to add additional constraints to the problem.",
                "For example, if 3-cycles are believed to be more likely to fail than 2-cycles, then one can simply give them a weight that is appropriately lower than 3/2 the weight of a 2-cycle.",
                "Or, if for various (e.g., ethical) reasons one requires a maximum cardinality exchange, one can at least in a second pass find the solution (out of all maximum cardinality solutions) that has the fewest 3-cycles.",
                "Other variations one can solve for include finding various forms of fault tolerant (non-disjoint) collections of cycles in the event that certain pairs that were thought to be compatible turn out to be incompatible after all.",
                "In this paper, we present the first algorithm capable of clearing these markets on a nationwide scale.",
                "Straight-forward ILP encodings are too large to even construct on current hardware - not to talk about solving them.",
                "The key then is incremental problem formulation.",
                "We adapt two paradigms for the task: constraint generation and column generation.",
                "For each, we develop a host of (mainly problemspecific) techniques that dramatically improve both runtime and memory usage. 1.1 Prior Work Several recent papers have used simulations and marketclearing algorithms to explore the impact of a national kidney exchange [13, 20, 6, 14, 15, 17].",
                "For example, using Edmonds maximum-matching algorithm [4], [20] shows that a national pairwise-exchange market (using length-2 cycles only) would result in more transplants, reduced waiting time, and savings of $750 million in heath care costs over 5 years.",
                "Those results are conservative in two ways.",
                "Firstly, the simulated market contained only 4,000 initial patients, with 250 patients added every 3 months.",
                "It has been reported to us that the market could be almost double this size.",
                "Secondly, the exchanges were restricted to length-2 cycles (because that is all that can be modeled as maximum matching, and solved using Edmondss algorithm).",
                "Allowing length-3 cycles leads to additional significant gains.",
                "This has been demonstrated on kidney exchange markets with 100 patients by using CPLEX to solve an integer-program encoding of the clearing problem [15].",
                "In this paper, we 296 present an alternative algorithm for this integer program that can clear markets with over 10,000 patients (and that same number of willing donors).",
                "Allowing cycles of length more than 3 often leads to no improvement in the size of the exchange [15]. (Furthermore, in a simplified theoretical model, any kidney exchange can be converted into one with cycles of length at most 4 [15].)",
                "Whilst this does not hold for general barter exchanges, or even for all kidney exchange markets, in Section 5.2.3 we make use of the observation that short cycles suffice to dramatically increase the speed of our algorithm.",
                "At a high-level, the clearing problem for barter exchanges is similar to the clearing problem (aka winner determination problem) in combinatorial auctions.",
                "In both settings, the idea is to gather all the pertinent information about the agents into a central clearing point and to run a centralized clearing algorithm to determine the allocation.",
                "Both problems are NP-hard.",
                "Both are best solved using tree search techniques.",
                "Since 1999, significant work has been done in computer science and operations research on faster optimal tree search algorithms for clearing combinatorial auctions. (For a recent review, see [18].)",
                "However, the kidney exchange clearing problem (with a limit of 3 or more on cycle size) is different from the combinatorial auction clearing problem in significant ways.",
                "The most important difference is that the natural formulations of the combinatorial auction problem tend to easily fit in memory, so time is the bottleneck in practice.",
                "In contrast, the natural formulations of the kidney exchange problem (with L = 3) take at least cubic space in the number of patients to even model, and therefore memory becomes a bottleneck much before time does when using standard tree search, such as branch-andcut in CPLEX, to tackle the problem. (On a 1GB computer and a realistic standard instance generator, discussed later, CPLEX 10.010 runs out of memory on five of the ten 900patient instances and ten of the ten 1,000-patient instances that we generated.)",
                "Therefore, the approaches that have been developed for combinatorial auctions cannot handle the kidney exchange problem. 1.2 Paper Outline The rest of the paper is organized as follows.",
                "Section 2 discusses the process by which we generate realistic kidney exchange market data, in order to benchmark the clearing algorithms.",
                "Section 3 contains a proof that the market clearing decision problem is NP-complete.",
                "Sections 4 and 5 each contain an ILP formulation of the clearing problem.",
                "We also detail in those sections our techniques used to solve those programs on large instances.",
                "Section 6 presents experiments on the various techniques.",
                "Section 7 discusses recent fielding of our algorithm.",
                "Finally, we present our conclusions in Section 8, and suggest future research directions. 2.",
                "MARKET CHARACTERISTICS AND INSTANCE GENERATOR We test the algorithms on simulated kidney exchange markets, which are generated by a process described in Saidman et al. [17].",
                "This process is based on the extensive nationwide data maintained by the United Network for Organ Sharing (UNOS) [21], so it generates a realistic instance distribution.",
                "Several papers have used variations of this process to demonstrate the effectiveness of a national kidney exchange (extrapolating from small instances or restricting the clearing to 2-cycles) [6, 20, 14, 13, 15, 17].",
                "Briefly, the process involves generating patients with a random blood type, sex, and probability of being tissue-type incompatible with a randomly chosen donor.",
                "These probabilities are based on actual real-world population data.",
                "Each patient is assigned a potential donor with a random blood type and relation to the patient.",
                "If the patient and potential donor are incompatible, the two are entered into the market.",
                "Blood type and tissue type information is then used to decide on which patients and donors are compatible.",
                "One complication, handled by the generator, is that if the patient is female, and she has had a child with her potential donor, then the probability that the two are incompatible increases. (This is because the mother develops antibodies to her partner during pregnancy.)",
                "Finally, although our algorithms can handle more general weight functions, patients have a utility of 1 for compatible donors, since their survival probability is not affected by the choice of donor [3].",
                "This means that the maximum-weight exchange has maximum cardinality.",
                "Table 1 gives lower and upper bounds on the size of a maximum-cardinality exchange in the kidney-exchange market.",
                "The lower bounds were found by clearing the market with length-2 cycles only, while the upper bounds had no restriction on cycle length.",
                "For each market size, the bounds were computed over 10 randomly generated markets.",
                "Note that there can be a large amount of variability in the markets - in one 5000 patient market, less than 1000 patients were in the maximum-cardinality exchange.",
                "Maximum exchange size Length-2 cycles only Arbitrary cycles Patients Mean Max Mean Max 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Table 1: Upper and lower bounds on exchange size.",
                "Table 2 gives additional characteristics of the kidney-exchange market.",
                "Note that a market with 5000 patients can already have more than 450 million cycles of length 2 and 3.",
                "Edges Length 2 & 3 cycles Patients Mean Max Mean Max 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Table 2: Market characteristics. 297 3.",
                "PROBLEM COMPLEXITY In this section, we prove that (the decision version of) the market clearing problem with short cycles is NP-complete.",
                "Theorem 1.",
                "Given a graph G = (V, E) and an integer L ≥ 3, the problem of deciding if G admits a perfect cycle cover containing cycles of length at most L is NP-complete.",
                "Proof.",
                "It is clear that this problem is in NP.",
                "For NPhardness, we reduce from 3D-Matching, which is the problem of, given disjoint sets X, Y and Z of size q, and a set of triples T ⊆ X × Y × Z, deciding if there is a disjoint subset M of T with size q.",
                "One straightforward idea is to construct a tripartite graph with vertex sets X ∪ Y ∪ Z and directed edges (xa, yb), (yb, zc), and (zc, xa) for each triple ti = {xa, yb, zc} ∈ T. However, it is not too hard to see that this encoding fails because a perfect cycle cover may include a cycle with no corresponding triple.",
                "Instead then, we use the following reduction.",
                "Given an instance of 3D-Matching, construct one vertex for each element in X, Y and Z.",
                "For each triple, ti = {xa, yb, zc} construct the gadget in Figure 2, which is a similar to one in Garey and Johnson [5, pp 68-69].",
                "Note that the gadgets intersect only on vertices in X ∪ Y ∪ Z.",
                "It is clear that this construction can be done in polynomial time. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figure 2: NP-completeness gadget for triple ti and maximum cycle length L. Let M be a perfect 3D-Matching.",
                "We will show the construction admits a perfect cycle cover by short cycles.",
                "If ti = {xa, yb, zc} ∈ M, add from tis gadget the three lengthL cycles containing xa, yb and zc respectively.",
                "Also add the cycle ª xi a, yi b, zi c « .",
                "Otherwise, if ti /∈ M, add the three lengthL cycles containing xi a, yi b and zi c respectively.",
                "It is clear that all vertices are covered, since M partitions X × Y × Z. Conversely, suppose we have a perfect cover by short cycles.",
                "Note that the construction only has short cycles of lengths 3 and L, and no short cycle involves distinct vertices from two different gadgets.",
                "It is easy to see then that in a perfect cover, each gadget ti contributes cycles according to the cases above: ti ∈ M, or ti /∈ M. Hence, there exists a perfect 3D-Matching in the original instance. 4.",
                "SOLUTION APPROACHES BASED ON AN EDGE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each edge.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem with no cycle-length constraints.",
                "Given a market G = (V, E), construct a bipartite graph with one vertex for each agent, and one vertex for each item.",
                "Add an edge ev with weight 0 between each agent v and its own item.",
                "At this point, the encoding is a perfect matching.",
                "Now, for each edge e = (vi, vj) in the original market, add an edge e with weight we between agent vi and the item of vj.",
                "Perfect matchings in this encoding correspond exactly with cycle covers, since whenever an agents item is taken, it must receive some other agents item.",
                "It follows that the unrestricted clearing problem can be solved in polynomial time by finding a maximum-weight perfect matching.",
                "Figure 3 contains the bipartite graph encoding of the example market from Figure 1.",
                "The weight-0 edges are encoded by dashed lines, while the market edges are in bold.",
                "Items Agents v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figure 3: Perfect matching encoding of the market in Figure 1.",
                "Alternatively, we can solve the problem by encoding it as an ILP with one variable for each edge in the original market graph G. This ILP, given below, has the advantage that it can be extended naturally to deal with cycle length constraints.",
                "Therefore, for the rest of this section, this is the approach we will pursue. max e∈E wee such that for all vi ∈ V , the conservation constraint eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 and capacity constraint eout=(vi,vj ) eout ≤ 1 are satisfied.",
                "If cycles are allowed to have length at most L, it is easy to see that we only need to make the following changes to the ILP.",
                "For each length-L path (throughout the paper, we do not include cycles in the definition of path) p = ep1 , ep2 , . . . , epL , add a constraint ep1 + ep2 + . . . + epL ≤ L − 1, which precludes path p from being in any feasible solution.",
                "Unfortunately, in a market with only 1000 patients, the number of length-3 paths is in excess of 400 million, and so we cannot even construct this ILP without running out of memory.",
                "Therefore, we use a tree search with an incremental formulation approach.",
                "Specifically, we use CPLEX, though 298 we add constraints as cutting planes during the tree search process.",
                "We begin with only a small subset of the constraints in the ILP.",
                "Since this ILP is small, CPLEX can solve its LP relaxation.",
                "We then check whether any of the missing constraints are violated by the fractional solution.",
                "If so, we generate a set of these constraints, add them to the ILP, and repeat.",
                "Even once all constraints are satisfied, there may be no integral solution matching the fractional upper bound, and even if there were, the LP solver might not find it.",
                "In these cases, CPLEX branches on a variable (we used CPLEXs default branching strategy), and generates one new search node corresponding to each of the children.",
                "At each node of the search tree that is visited, this process of solving the LP and adding constraints is repeated.",
                "Clearly, this approach yields an optimal solution once the tree search finishes.",
                "We still need to explain the details of the constraint seeder (i.e., selecting which constraints to begin with) and the constraint generation (i.e., selecting which violated constraints to include).",
                "We describe these briefly in the next two subsections, respectively. 4.1 Constraint Seeder The main constraint seeder we developed forbids any path of length L − 1 that does not have an edge closing the cycle from its head to its tail.",
                "While it is computationally expensive to find these constraints, their addition focuses the search away from paths that cannot be in the final solution.",
                "We also tried seeding the LP with a random collection of constraints from the ILP. 4.2 Constraint Generation We experimented with several constraint generators.",
                "In each, given a fractional solution, we construct the subgraph of edges with positive value.",
                "This graph is much smaller than the original graph, so we can perform the following computations efficiently.",
                "In our first constraint generator, we simply search for length-L paths with value sum more than L − 1.",
                "For any such path, we restrict its sum to be at most L − 1.",
                "Note that if there is a cycle c with length |c| > L, it could contain as many as |c| violating paths.",
                "In our second constraint generator, we only add one constraint for such cycles: the sum of edges in the cycle can be at most |c|(L − 1)/L .",
                "This generator made the algorithm slower, so we went in the other direction in developing our final generator.",
                "It adds one constraint per violating path p, and furthermore, it adds a constraint for each path with the same interior vertices (not counting the endpoints) as p. This improved the overall speed. 4.3 Experimental performance It turned out that even with these improvements, the edge formulation approach cannot clear a kidney exchange with 100 vertices in the time the cycle formulation (described later in Section 5) can clear one with 10,000 vertices.",
                "In other words, column generation based approaches turned out to be drastically better than constraint generation based approaches.",
                "Therefore, in the rest of the paper, we will focus on the cycle formulation and the column generation based approaches. 5.",
                "SOLUTION APPROACHES BASED ON A CYCLE FORMULATION In this section, we consider a formulation of the clearing problem as an ILP with one variable for each cycle.",
                "This encoding is based on the following classical algorithm for solving the directed cycle cover problem when cycles have length 2.",
                "Given a market G = (V, E), construct a new graph on V with a weight wc edge for each cycle c of length 2.",
                "It is easy to see that matchings in this new graph correspond to cycle covers by length-2 cycles in the original market graph.",
                "Hence, the market clearing problem with L = 2 can be solved in polynomial time by finding a maximum-weight matching. c_1 v 1 v 2 v 3 v 4 c_3c_2 Figure 4: Maximum-weight matching encoding of the market in Figure 1.",
                "We can generalize this encoding for arbitrary L. Let C(L) be the set of all cycles of G with length at most L. Then the following ILP finds the maximum-weight cycle cover by C(L) cycles: max c∈C(L) wcc subject to c:vi∈c c ≤ 1 ∀vi ∈ V with c ∈ {0, 1} ∀c ∈ C(L) 5.1 Edge vs Cycle Formulation In this section, we consider the merits of the edge formulation and cycle formulation.",
                "The edge formulation can be solved in polynomial time when there are no constraints on the cycle size.",
                "The cycle formulation can be solved in polynomial time when the cycle size is at most 2.",
                "We now consider the case of short cycles of length at most L, where L ≥ 3.",
                "Our tree search algorithms use the LP relaxation of these formulations to provide upper bounds on the optimal solution.",
                "These bounds help prune subtrees and guide the search in the usual ways.",
                "Theorem 2.",
                "The LP relaxation of the cycle formulation weakly dominates the LP relaxation of the edge formulation.",
                "Proof.",
                "Consider an optimal solution to the LP relaxation of the cycle formulation.",
                "We show how to construct an equivalent solution in the edge formulation.",
                "For each edge in the graph, set its value as the sum of values of all the cycles of which it is a member.",
                "Also, define the value of a vertex in the same manner.",
                "Because of the cycle constraints, the conservation and capacity constraints of the edge encoding are clearly satisfied.",
                "It remains to show that none of the path constraints are violated.",
                "Let p be any length-L path in the graph.",
                "Since p has L−1 interior vertices (not counting the endpoints), the value sum of these interior vertices is at most L−1.",
                "Now, for any cycle c of length at most L, the number of edges it has in p, which we denote by ec(p), is at most the number of interior vertices it has in p, which we denote by vc(p).",
                "Hence, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 The converse of this theorem is not true.",
                "Consider a graph which is simply a cycle with n edges.",
                "Clearly, the LP relaxation of the cycle formulation has optimal value 0, since there are no cycles of size at most L. However, the edge formulation has a solution of size n/2, with each edge having value 1/2.",
                "Hence, the cycle formulation is tighter than the edge formulation.",
                "Additionally, for a graph with m edges, the edge formulation requires O(m3 ) constraints, while the cycle formulation requires only O(m2 ). 5.2 Column Generation for the LP Table 2 shows how the number of cycles of length at most 3 grows with the size of the market.",
                "With one variable per cycle in the cycle formulation, CPLEX cannot even clear markets with 1,000 patients without running out of memory (see Figure 6).",
                "To address this problem, we used an incremental formulation approach.",
                "The first step in LP-guided tree search is to solve the LP relaxation.",
                "Since the cycle formulation does not fit in memory, this LP stage would fail immediately without an incremental formulation approach.",
                "However, motivated by the observation that an exchange solution can include only a tiny fraction of the cycles, we explored the approach of using column (i.e., cycle) generation.",
                "The idea of column generation is to start with a restricted LP containing only a small number of columns (variables, i.e., cycles), and then to repeatedly add columns until an optimal solution to this partially formulated LP is an optimal solution to the original (aka master) LP.",
                "We explain this further by way of an example.",
                "Consider the market in Figure 1 with L = 2.",
                "Figure 5 gives the corresponding master LP, P, and its dual, D. Primal P max 2c1 +2c2 +2c3 s.t. c1 ≤ 1 (v1) c1 +c2 ≤ 1 (v2) +c2 +c3 ≤ 1 (v3) +c3 ≤ 1 (v4) with c1, c2, c3 ≥ 0 Dual D min v1 +v2 +v3 +v4 s.t v1 +v2 ≥ 2 (c1) +v2 +v3 ≥ 2 (c2) +v3 +v4 ≥ 2 (c3) with v1, v2, v3, v4 ≥ 0 Figure 5: Cycle formulation.",
                "Let P be the restriction of P containing columns c1 and c3 only.",
                "Let D be the dual of P , that is, D is just D without the constraint c2.",
                "Because P and D are small, we can solve them to obtain OPT(P ) = OPT(D ) = 4, with cOP T (P ) = c1 = c3 = 1 and vOP T (D ) = v1 = v2 = v3 = v4 = 1 .",
                "While cOP T (P ) must be a feasible solution of P, it turns out (fortunately) that vOP T (D ) is feasible for D, so that OPT(D ) ≥ OPT(D).",
                "We can verify this by checking that vOP T (D ) satisfies the constraints of D not already in Di.e. constraint c2.",
                "It follows that OPT(P ) = OPT(D ) ≥ OPT(D) = OPT(P), and so vOP T (P ) is provably an optimal solution for P, even though P is contains a only strict subset of the columns of P. Of course, it may turn out (unfortunately) that vOP T (D ) is not feasible for D. This can happen above if vOP T (D ) = v1 = 2, v2 = 0, v3 = 0, v4 = 2 .",
                "Although we can still see that OPT(D ) = OPT(D), in general we cannot prove this because D and P are too large to solve.",
                "Instead, because constraint c2 is violated, we add column c2 to P , update D , and repeat.",
                "The problem of finding a violated constraint is called the pricing problem.",
                "Here, the price of a column (cycle in our setting) is the difference between its weight, and the dual-value sum of the cycles vertices.",
                "If any column of P has a positive price, its corresponding constraint is violated and we have not yet proven optimality.",
                "In this case, we must continue generating columns to add to P . 5.2.1 Pricing Problem For smaller instances, we can maintain an explicit collection of all feasible cycles.",
                "This makes the pricing problem easy and efficient to solve: we simply traverse the collection of cycles, and look for cycles with positive price.",
                "We can even find cycles with the most positive price, which are the ones most likely to improve the objective value of restricted LP [1].",
                "This approach does not scale however.",
                "A market with 5000 patients can have as many as 400 million cycles of length at most 3 (see Table 2).",
                "This is too many cycles to keep in memory.",
                "Hence, for larger instances, we have to generate feasible cycles while looking for one with a positive price.",
                "We do this using a depth-first search algorithm on the market graph (see Figure 1).",
                "In order to make this search faster, we explore vertices in non-decreasing value order, as these vertices are more likely to belong to cycles with positive weight.",
                "We also use several pruning rules to determine if the current search path can lead to a positive weight cycle.",
                "For example, at a given vertex in the search, we can prune based on the fact that every vertex we visit from this point onwards will have value at least as great the current vertex.",
                "Even with these pruning rules, column generation is a bottleneck.",
                "Hence, we also implemented the following optimizations.",
                "Whenever the search exhaustively proves that a vertex belongs to no positive price cycle, we mark the vertex and do not use it as the root of a depth-first search until its dual value decreases.",
                "In this way, we avoid unnecessarily repeating our computational efforts from a previous column generation iteration.",
                "Finally, it can sometimes be beneficial for column generation to include several positive-price columns in one iteration, since it may be faster to generate a second column, once the first one is found.",
                "However, we avoid this for the following reason.",
                "If we attempt to find more positive-price columns than there are to be found, or if the columns are far apart in the search space, we end up having to generate and check a large part of the collection of feasible cycles.",
                "In our experiments, we have seen this occur in markets with hundreds of millions of cycles, resulting in prohibitively expensive computation costs. 5.2.2 Column Seeding Even if there is only a small gap to the master LP relaxation, column generation requires many iterations to improve the objective value of the restricted LP.",
                "Each of these 300 iterations is expensive, as we must solve the pricing problem, and re-solve the restricted LP.",
                "Hence, although we could begin with no columns in the restricted LP, it is much faster to seed the LP with enough columns that the optimal objective value is not too far from the master LP.",
                "Of course, we cannot include so many columns that we run out of memory.",
                "We experimented with several column seeders.",
                "In one class of seeder, we use a heuristic to find an exchange, and then add the cycles of that exchange to the initial restricted LP.",
                "We implemented two heuristics.",
                "The first is a greedy algorithm: for each vertex in a random order, if it is uncovered, we attempt to include a cycle containing it and other uncovered vertices.",
                "The other heuristic uses specialized maximum-weight matching code [16] to find an optimal cover by length-2 cycles.",
                "These heuristics perform extremely well, especially taking into account the fact that they only add a small number of columns.",
                "For example, Table 1 shows that an optimal cover by length-2 cycles has almost as much weight as the exchange with unrestricted cycle size.",
                "However, we have enough memory to include hundreds-of-thousands of additional columns and thereby get closer still to the upper bound.",
                "Our best column seeder constructs a random collection of feasible cycles.",
                "Since a market with 5000 patients can have as many as 400 million feasible cycles, it takes too long to generate and traverse all feasible cycles, and so we do not include a uniformly random collection.",
                "Instead, we perform a random walk on the market graph (see, for example, Figure 1), in which, after each step of the walk, we test whether there is an edge back onto our path that forms a feasible cycle.",
                "If we find a cycle, it is included in the restricted LP, and we start a new walk from a random vertex.",
                "In our experiments (see Section 6), we use this algorithm to seed the LP with 400,000 cycles.",
                "This last approach outperforms the heuristic seeders described above.",
                "However, in our algorithm, we use a combination that takes the union of all columns from all three seeders.",
                "In Figure 6, we compare the performance of the combination seeder against the combination without the random collection seeder.",
                "We do not plot the performance of the algorithm without any seeder at all, because it can take hours to clear markets we can otherwise clear in a few minutes. 5.2.3 Proving Optimality Recall that our aim is to find an optimal solution to the master LP relaxation.",
                "Using column generation, we can prove that a restricted-primal solution is optimal once all columns have non-positive prices.",
                "Unfortunately though, our clearing problem has the so-called tailing-off effect [1, Section 6.3], in which, even though the restricted primal is optimal in hindsight, a large number of additional iterations are required in order to prove optimality (i.e., eliminate all positive-price columns).",
                "There is no good general solution to the tailing-off effect.",
                "However, to mitigate this effect, we take advantage of the following problem-specific observation.",
                "Recall from Section 1.1 that, almost always, a maximum-weight exchange with cycles of length at most 3 has the same weight as an unrestricted maximum-weight exchange. (This does not mean that the solver for the unrestricted case will find a solution with short cycles, however.)",
                "Furthermore, the unrestricted clearing problem can be solved in polynomial time (recall Section 4).",
                "Hence, we can efficiently compute an upper bound on the master LP relaxation, and, whenever the restricted primal achieves this upper bound, we have proven optimality without necessarily having to eliminate all positive-price columns!",
                "In order for this to improve the running time of the overall algorithm, we need to be able to clear the unrestricted market in less time than it takes column generation to eliminate all the positive-price cycles.",
                "Even though the first problem is polynomial-time solvable, this is not trivial for large instances.",
                "For example, for a market with 10,000 patients and 25 million edges, specialized maximum-weight matching code [16] was too slow, and CPLEX ran out of memory on the edge formulation encoding from Section 4.",
                "To make this idea work then, we used column generation to solve the edge formulation.",
                "This involves starting with a small random subset of the edges, and then adding positive price edges one-by-one until none remain.",
                "We conduct this secondary column generation not in the original market graph G, but in the perfect matching bipartite graph of Figure 3.",
                "We do this so that we only need to solve the LP, not the ILP, since the integrality gap in the perfect matching bipartite graph is 1-i.e. there always exists an integral solution that achieves the fractional upper bound.",
                "The resulting speedup to the overall algorithm is dramatic, as can be seen in Figure 6. 5.2.4 Column Management If the optimal value of the initial restricted LP P is far from the the master LP P, then a large number of columns are generated before the gap is closed.",
                "This leads to memory problems on markets with as few as 4,000 patients.",
                "Also, even before memory becomes an issue, the column generation iterations become slow because of the additional overhead of solving a larger LP.",
                "To address these issues, we implemented a column management scheme to limit the size of the restricted LP.",
                "Whenever we add columns to the LP, we check to see if it contains more than a threshold number of columns.",
                "If this is the case, we selectively remove columns until it is again below the threshold2 .",
                "As we discussed earlier, only a tiny fraction of all the cycles will end up in the final solution.",
                "It is unlikely that we delete such a cycle, and even if we do, it can always be generated again.",
                "Of course, we must not be too aggressive with the threshold, because doing so may offset the per-iteration performance gains by significantly increasing the number of iterations required to get a suitable column set in the LP at the same time.",
                "There are some columns we never delete, for example those we have branched on (see Section 5.3.2), or those with a non-zero LP value.",
                "Amongst the rest, we delete those with the lowest price, since those correspond to the dual constraints that are most satisfied.",
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 <br>branch-and-price</br> Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "However, the solutions we find are usually fractional.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a <br>branch-and-price</br> tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of <br>branch-and-price</br>.",
                "Whenever we set a fractional variable to 0 or 1 (branch), both the master LP, and the restriction we are working with, are changed (constrained).",
                "By default then, we need to perform column generation (go through the effort of pricing) at each node of the search tree to prove that the constrained restriction is optimal for constrained master LP. (However, as discussed in Section 5.2.3, we compute the integral upper bound for the root node based on relaxing the cycle length constraint completely, and whenever any nodes LP in the tree achieves that value, we do not need to continue pricing columns at that node.)",
                "For the clearing problem with cycles of length at most 3, we have found that there is rarely a gap between the optimal integral and fractional solutions.",
                "This means we can largely avoid the expensive per node pricing step: whenever the constrained restricted LP has the same optimal value as its parent in the tree search, we can prove LP optimality, as in Section 5.2.3, without having to include any additional columns in the restricted LP.",
                "Although CPLEX can solve ILPs, it does not support <br>branch-and-price</br> (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own <br>branch-and-price</br> algorithm, which explores the search tree in depth-first order.",
                "We also experimented with the A* node selection order [7, 2].",
                "However, this search strategy requires significantly more memory, which we found was better employed in making the column generation phase faster (see Section 5.2.2).",
                "The remaining major components of the algorithm are described in the next two subsections. 5.3.1 Primal Heuristics Before branching on a fractional variable, we use primal heuristics to construct a feasible integral solution.",
                "These solutions are lower bounds on the final optimal integral solutions.",
                "Hence, whenever a restricted fractional solution is no better than the best integral solution found so far, we prune the current subtree.",
                "A primal heuristic is effective if it is efficient and constructs tight lower bounds.",
                "We experimented with two primal heuristics.",
                "The first is a simple rounding algorithm [8]: include all cycles with fractional value at least 0.5, and then, ensuring feasibility, greedily add the remaining cycles.",
                "Whilst this heuristic is efficient, we found that the lower bounds it constructs rarely enable much pruning.",
                "We also tried using CPLEX as a primal heuristic.",
                "At any given node of the search tree, we can convert the restricted LP relaxation back to an ILP by reintroducing the integrality constraints.",
                "CPLEX has several built-in primal heuristics, which we can apply to this ILP.",
                "Moreover, we can use CPLEXs own tree search to find an optimal integral solution.",
                "In general, this tree search is much faster than our own.",
                "If CPLEX finds an integral solution that matches the fractional upper bound at the root node, we are done.",
                "Otherwise, no such integral solution exists, or we dont yet have the right combination of cycles in the restricted LP.",
                "For kidney-exchange markets, it is usually the second reason that applies (see Sections 5.2.2 and 5.2.4).",
                "Hence, at some point in the tree search, once more columns have been generated as a result of branching, the CPLEX heuristic will find an optimal integral solution.",
                "Although CPLEX tree search is faster than our own, it is not so fast that we can apply it to every node in our search tree.",
                "Hence, we make the following optimizations.",
                "Firstly, we add a constraint that requires the objective value of the ILP to be as large as the fractional target.",
                "If this is not the case, we want to abort and proceed to generate more columns with our <br>branch-and-price</br> search.",
                "Secondly, we limit the number of nodes in CPLEXs search tree.",
                "This is because we have observed that no integral solution exists, CPLEX can take a very long time to prove that.",
                "Finally, we only apply the CPLEX heuristic at a node if it has a sufficiently different set of cycles from its parent.",
                "Using CPLEX as a primal heuristic has a large impact because it makes the search tree smaller, so all the computationally expensive pricing work is avoided at nodes that are not generated in this smaller tree. 5.3.2 Cycle Brancher We experimented with two branching strategies, both of which select one variable per node.",
                "The first strategy, branching by certainty, randomly selects a variable from those whose LP value is closest to 1.",
                "The second strategy, branching by uncertainty, randomly selects a variable whose LP value is closest to 0.5.",
                "In either case, two children of the node are generated corresponding to two subtrees, one in which the variable is set to 0, the other in which it is set to 1.",
                "Our depth-first search always chooses to explore first the subtree in which the value of the variable is closest to its fractional value.",
                "For our clearing problem with cycles of length at most 3, we found branching by uncertainty to be superior, rarely requiring any backtracking. 6.",
                "EXPERIMENTAL RESULTS All our experiments were performed in Linux (Red Hat 9.0), using a Dell PC with a 3GHz Intel Pentium 4 processor, and 1GB of RAM.",
                "Wherever we used CPLEX (e.g., in solving the LP and as a primal heuristic, as discussed in the previous sections), we used CPLEX 10.010.",
                "Figure 6 shows the runtime performance of four clearing algorithms.",
                "For each market size listed, we randomly generated 10 markets, and attempted to clear them using each of the algorithms.",
                "The first algorithm is CPLEX on the full cycle formulation.",
                "This algorithm fails to clear any markets with 1000 patients or more.",
                "Also, its running time on markets smaller than this is significantly worse than the other algorithms.",
                "The other algorithms are variations of the incremental column generation approach described in Section 5.",
                "We begin with the following settings (all optimizations are switched on): Category Setting Column Seeder Combination of greedy exchange and maximum-weight matching heuristics, and random walk seeder (400,000 cycles).",
                "Column Generation One column at a time.",
                "Column Management On, with 400,000 column limit.",
                "Optimality Prover On.",
                "Primal Heuristic Rounding & CPLEX tree search.",
                "Branching Rule Uncertainty. 302 The combination of these optimizations allows us to easily clear markets with over 10,000 patients.",
                "In each of the next two algorithms, we turn one of these optimizations off to highlight its effectiveness.",
                "First, we restrict the seeder so that it only begins with 10,000 cycles.",
                "This setting is faster for smaller instances, since the LP relaxations are smaller, and faster to solve.",
                "However, at 5000 vertices, this effect starts to be offset by the additional column generation that must be performed.",
                "For larger instance, this restricted seeder is clearly worse.",
                "Finally, we restore the seeder to its optimized setting, but this time, remove the optimality prover described in Section 5.2.3.",
                "As in many column generation problems, the tailing-off effect is substantial.",
                "By taking advantage of the properties of our problem, we manage to clear a market with 10,000 patients in about the same time it would otherwise have taken to clear a 6000 patient market. 7.",
                "FIELDING THE TECHNOLOGY Our algorithm and implementation replaced CPLEX as the clearing algorithm of the Alliance for Paired Donation, one of the leading kidney exchanges, in December 2006.",
                "We conduct a match run every two weeks, and the first transplants based on our solutions have already been conducted.",
                "While there are (for political/inter-personal reasons) at least four kidney exchanges in the US currently, everyone understands that a unified unfragmented national exchange would save more lives.",
                "We are in discussions with additional kidney exchanges that are interested in adopting our technology.",
                "This way our technology (and the processes around it) will hopefully serve as a substrate that will eventually help in unifying the exchanges.",
                "At least computational scalability is no longer an obstacle. 8.",
                "CONCLUSIONANDFUTURERESEARCH In this work we have developed the most scalable exact algorithms for barter exchanges to date, with special focus on the upcoming national kidney-exchange market in which patients with kidney disease will be matched with compatible donors by swapping their own willing but incompatible donors.",
                "With over 70,000 patients already waiting for a cadaver kidney in the US, this market is seen as the only ethical way to significantly reduce the 4,000 deaths per year attributed to kidney disease.",
                "Our work presents the first algorithm capable of clearing these markets on a nationwide scale.",
                "It optimally solves the kidney exchange clearing problem with 10,000 donordonee pairs.",
                "Thus there is no need to resort to approximate solutions.",
                "The best prior technology (vanilla CPLEX) cannot handle instances beyond about 900 donor-donee pairs because it runs out of memory.",
                "The key to our improvement is incremental problem formulation.",
                "We adapted two paradigms for the task: constraint generation and column generation.",
                "For each, we developed a host of techniques that substantially improve both runtime and memory usage.",
                "Some of the techniques use domain-specific observations while others are domain independent.",
                "We conclude that column generation scales dramatically better than constraint generation.",
                "For column generation in the LP, our enhancements include pricing techniques, column seeding techniques, techniques for proving optimality without having to bring in all positive-price columns (and using another column-generation process in a different formulation to do so), and column removal techniques.",
                "For the branch-andprice search in the integer program that surrounds the LP, our enhancements include primal heuristics and we also compared branching strategies.",
                "Undoubtedly, further parameter tuning and perhaps additional speed improvement techniques could be used to make the algorithm even faster.",
                "Our algorithm also supports several generalizations, as desired by real-world kidney exchanges.",
                "These include multiple alternative donors per patient, weighted edges in the market graph (to encode differences in expected life years added based on degrees of compatibility, patient age and weight, etc., as well as the probability of last-minute incompatibility), angel-triggered chains (chains of transplants triggered by altruistic donors who do not have patients associated with them, each chain ending with a left-over kidney), and additional issues (such as different scores for saving different altruistic donors or left-over kidneys for future match runs based on blood type, tissue type, and likelihood that the organ would not disappear from the market by the donor getting second thoughts).",
                "Because we use an ILP methodology, we can also support a variety of side constraints, which often play an important role in markets in practice [19].",
                "We can also support forcing part of the allocation, for example, This acutely sick teenager has to get a kidney if possible.",
                "Our work has treated the kidney exchange as a batch problem with full information (at least in the short run, kidney exchanges will most likely continue to run in batch mode every so often).",
                "Two important directions for future work are to explicitly address both online and limited-information aspects of the problem.",
                "The online aspect is that donees and donors will be arriving into the system over time, and it may be best to not execute the myopically optimal exchange now, but rather save part of the current market for later matches.",
                "In fact, some work has been done on this in certain restricted settings [22, 24].",
                "The limited-information aspect is that even in batch mode, the graph provided as input is not completely correct: a number of donor-donee pairs believed to be compatible turn out to be incompatible when more expensive last-minute tests are performed.",
                "Therefore, it would be desirable to perform an optimization with this in mind, such as outputting a low-degree robust subgraph to be tested before the final match is produced, or to output a contingency plan in case of failure.",
                "We are currently exploring a number of questions along these lines but there is certainly much more to be done.",
                "Acknowledgments We thank economists Al Roth and Utku Unver, as well as kidney transplant surgeon Michael Rees, for alerting us to the fact that prior technology was inadequate for the clearing problem on a national scale, supplying initial data sets, and discussions on details of the kidney exchange process.",
                "We also thank Don Sheehy for bringing to our attention the idea of shoe exchange.",
                "This work was supported in part by the National Science Foundation under grants IIS-0427858 and CCF-0514922. 9.",
                "REFERENCES [1] C. Barnhart, E. L. Johnson, G. L. Nemhauser, M. W. P. Savelsbergh, and P. H. Vance. 303 0 500 1000 1500 2000 2500 3000 3500 4000 0 2000 4000 6000 8000 10000 Clearingtime(seconds) Number of patients Our algorithm Our algorithm with restricted column seeder Our algorithm with no optimality prover CPLEX cycle formulation Figure 6: Experimental results: average runtime with standard deviation bars.",
                "<br>branch-and-price</br>: Column generation for solving huge integer programs.",
                "Operations Research, 46:316-329, May-June 1998. [2] R. Dechter and J. Pearl.",
                "Generalized best-first search strategies and the optimality of A*.",
                "Journal of the ACM, 32(3):505-536, 1985. [3] F. L. Delmonico.",
                "Exchanging kidneys - advances in living-donor transplantation.",
                "New England Journal of Medicine, 350:1812-1814, 2004. [4] J. Edmonds.",
                "Path, trees, and flowers.",
                "Canadian Journal of Mathematics, 17:449-467, 1965. [5] M. R. Garey and D. S. Johnson.",
                "Computers and Intractability; A Guide to the Theory of NP-Completeness. 1990. [6] S. E. Gentry, D. L. Segev, and R. A. Montgomery.",
                "A comparison of populations served by kidney paired donation and list paired donation.",
                "American Journal of Transplantation, 5(8):1914-1921, August 2005. [7] P. Hart, N. Nilsson, and B. Raphael.",
                "A formal basis for the heuristic determination of minimum cost paths.",
                "IEEE Transactions on Systems Science and Cybernetics, 4(2):100-107, 1968. [8] K. Hoffman and M. Padberg.",
                "Solving airline crew-scheduling problems by branch-and-cut.",
                "Management Science, 39:657-682, 1993. [9] Intervac. http://intervac-online.com/. [10] National odd shoe exchange. http://www.oddshoe.org/. [11] Peerflix. http://www.peerflix.com. [12] Read it swap it. http://www.readitswapit.co.uk/. [13] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Kidney exchange.",
                "Quarterly Journal of Economics, 119(2):457-488, May 2004. [14] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "A kidney exchange clearinghouse in New England.",
                "American Economic Review, 95(2):376-380, May 2005. [15] A. E. Roth, T. Sonmez, and M. U. Unver.",
                "Efficient kidney exchange: Coincidence of wants in a market with compatibility-based preferences.",
                "American Economic Review, forthcoming. [16] E. Rothberg.",
                "Gabows n3 maximum-weight matching algorithm: an implementation.",
                "The First DIMACS Implementation Challenge, 1990. [17] S. L. Saidman, A. E. Roth, T. Snmez, M. U. Unver, and F. L. Delmonico.",
                "Increasing the opportunity of live kidney donation by matching for two and three way exchanges.",
                "Transplantation, 81(5):773-782, 2006. [18] T. Sandholm.",
                "Optimal winner determination algorithms.",
                "In Combinatorial Auctions, Cramton, Shoham, and Steinberg, eds.",
                "MIT Press, 2006. [19] T. Sandholm and S. Suri.",
                "Side constraints and non-price attributes in markets.",
                "In IJCAI-2001 Workshop on Distributed Constraint Reasoning, pages 55-61, Seattle, WA, 2001.",
                "To appear in Games and Economic Behavior. [20] D. L. Segev, S. E. Gentry, D. S. Warren, B. Reeb, and R. A. Montgomery.",
                "Kidney paired donation and optimizing the use of live donor organs.",
                "Journal of the American Medical Association, 293(15):1883-1890, April 2005. [21] United Network for Organ Sharing (UNOS). http://www.unos.org/. [22] M. U. Unver.",
                "Dynamic kidney exchange.",
                "Working paper. [23] United States Renal Data System (USRDS). http://www.usrds.org/. [24] S. A. Zenios.",
                "Optimal control of a paired-kidney exchange program.",
                "Management Science, 48(3):328-342, March 2002. 304"
            ],
            "original_annotated_samples": [
                "This column management scheme works well and has enabled us to clear markets with 10,000 patients, as seen in Figure 6. 5.3 <br>branch-and-price</br> Search for the ILP Given a large market clearing problem, we can successfully solve its LP relaxation to optimality by using the column generation enhancements described above.",
                "Thus the next 2 Based on memory size, we set the threshold at 400,000. 301 step involves performing a <br>branch-and-price</br> tree search [1] to find an optimal integral solution.",
                "Briefly, this is the idea of <br>branch-and-price</br>.",
                "Although CPLEX can solve ILPs, it does not support <br>branch-and-price</br> (for example, because there can be problemspecific complications involving the interaction between the branching rule and the pricing problem).",
                "Hence, we implemented our own <br>branch-and-price</br> algorithm, which explores the search tree in depth-first order."
            ],
            "translated_annotated_samples": [
                "Este esquema de gestión de columnas funciona bien y nos ha permitido despejar mercados con 10,000 pacientes, como se ve en la Figura 6. 5.3 Búsqueda de Ramificación y Precio para el ILP Dado un problema grande de despeje de mercado, podemos resolver con éxito su relajación LP hasta la optimalidad utilizando las mejoras de generación de columnas descritas anteriormente.",
                "Por lo tanto, en el paso 2 siguiente, basándonos en el tamaño de la memoria, establecemos el umbral en 400,000. El paso 301 implica realizar una <br>búsqueda de árbol de ramificación y precio</br> [1] para encontrar una solución integral óptima.",
                "Breve, esta es la idea de <br>ramificar y fijar precios</br>.",
                "Aunque CPLEX puede resolver ILPs, no admite la técnica de <br>branch-and-price</br> (por ejemplo, debido a posibles complicaciones específicas del problema que involucran la interacción entre la regla de ramificación y el problema de fijación de precios).",
                "Por lo tanto, implementamos nuestro propio <br>algoritmo de ramificación y precio</br>, el cual explora el árbol de búsqueda en orden de profundidad primero."
            ],
            "translated_text": "Algoritmos de compensación para mercados de intercambio de trueque: Facilitando los intercambios de riñones a nivel nacional. David J. Abraham, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, dabraham@cs.cmu.edu. Avrim Blum, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, avrim@cs.cmu.edu. Tuomas Sandholm, Departamento de Ciencias de la Computación, Universidad Carnegie Mellon, sandholm@cs.cmu.edu. RESUMEN En los mercados de trueque, los agentes buscan intercambiar sus artículos entre sí, con el fin de mejorar sus propias utilidades. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Nos enfocamos principalmente en el próximo mercado nacional de intercambio de riñones, donde los pacientes con enfermedad renal pueden obtener donantes compatibles intercambiando sus propios donantes dispuestos pero incompatibles. Con más de 70,000 pacientes ya en espera de un riñón de cadáver en los Estados Unidos, este mercado es considerado como la única forma ética de reducir significativamente las 4,000 muertes al año atribuidas a enfermedades renales. El problema de compensación implica encontrar un intercambio que maximice el bienestar social cuando la longitud máxima de un ciclo está fija. Los ciclos largos están prohibidos, ya que, por razones de incentivo, todos los trasplantes en un ciclo deben realizarse simultáneamente. Además, en los intercambios de trueque en general, más agentes se ven afectados si uno abandona un ciclo más largo. Demostramos que el problema de despeje con esta restricción de longitud de ciclo es NP-duro. Resolverlo exactamente es uno de los principales desafíos en el establecimiento de un intercambio nacional de riñones. Presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. La clave es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos técnicas que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. Concluimos que la generación de columnas escala considerablemente mejor que la generación de restricciones. Nuestro algoritmo también admite varias generalizaciones, como las exigidas por los intercambios reales de riñón. Nuestro algoritmo reemplazó a CPLEX como el algoritmo de compensación de la Alianza para la Donación Cruzada, uno de los principales intercambios de riñones. Las carreras de fósforos se realizan cada dos semanas y los trasplantes basados en nuestras optimizaciones ya han sido realizados. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas]: [General] Términos Generales Algoritmos, Economía 1. INTRODUCCIÓN El papel de los riñones es filtrar los desechos de la sangre. La insuficiencia renal resulta en la acumulación de estos desechos, lo cual conduce a la muerte en meses. Una opción de tratamiento es la diálisis, en la que el paciente va a un hospital para que su sangre sea filtrada por una máquina externa. Se requieren varias visitas por semana, y cada una lleva varias horas. La calidad de vida en diálisis puede ser extremadamente baja, de hecho, muchos pacientes optan por retirarse de la diálisis, lo que conduce a una muerte natural. Solo el 12% de los pacientes en diálisis sobreviven 10 años [23]. En cambio, el tratamiento preferido es un trasplante de riñón. Los trasplantes de riñón son, con mucho, los trasplantes más comunes. Desafortunadamente, la demanda de riñones supera con creces la oferta. En los Estados Unidos en 2005, 4,052 personas murieron esperando un trasplante de riñón que les salvara la vida. Durante este tiempo, casi 30,000 personas fueron añadidas a la lista nacional de espera, mientras que solo 9,913 personas salieron de la lista después de recibir un riñón de donante fallecido. La lista de espera actualmente tiene más de 70,000 personas, y el tiempo de espera mediano varía de 2 a 5 años, dependiendo del tipo de sangre. Para muchos pacientes con enfermedad renal, la mejor opción es encontrar un donante vivo, es decir, una persona sana dispuesta a donar uno de sus dos riñones. Aunque existen mercados para comprar y vender riñones de donantes vivos, la comercialización de órganos humanos es casi universalmente considerada como antiética, y la práctica suele ser explícitamente ilegal, como en los Estados Unidos. Sin embargo, en la mayoría de los países, la donación en vida es legal, siempre y cuando se realice como un regalo sin compensación financiera. En 2005, hubo 6,563 donaciones en vida en los Estados Unidos. El número de donaciones en vida habría sido mucho mayor si no fuera por el hecho de que, con frecuencia, un posible donante y su receptor previsto son incompatibles en tipo de sangre o tipo de tejido. En el pasado, el donante incompatible fue enviado a casa, dejando al paciente a la espera de un riñón de un donante fallecido. Sin embargo, ahora hay algunos intercambios renales regionales en los Estados Unidos, en los que los pacientes pueden intercambiar sus donantes incompatibles entre sí, para así obtener cada uno un donante compatible. Estos mercados son ejemplos de intercambios de trueque. En un mercado de intercambio por trueque, los agentes (pacientes) buscan intercambiar sus artículos (donantes incompatibles) entre sí. Estos intercambios consisten en ciclos de agentes, donde cada agente recibe el artículo del siguiente agente en el ciclo. Los intercambios de trueque son ubicuos: ejemplos incluyen Peerflix (DVDs) [11], Read It Swap It (libros) [12], e Intervac (casas de vacaciones) [9]. Durante muchos años, incluso ha habido un gran intercambio de zapatos en los Estados Unidos [10]. Las personas con pies de diferentes tamaños usan esto para evitar tener que comprar dos pares de zapatos. Los amputados de pierna tienen un intercambio separado para compartir el costo de comprar un par de zapatos. Podemos codificar un mercado de intercambio de trueque como un grafo dirigido G = (V, E) de la siguiente manera. Construye un vértice para cada agente. Agregar un borde ponderado e desde un agente vi hacia otro vj, si vi desea el artículo de vj. El peso que representamos de e es la utilidad para vi de obtener el artículo vjs. Un ciclo c en este grafo representa un intercambio posible, donde cada agente en el ciclo obtiene el artículo del siguiente agente. El peso wc de un ciclo c es la suma de los pesos de sus aristas. Un intercambio es una colección de ciclos disjuntos. El peso de un intercambio es la suma de los pesos de sus ciclos. Un intercambio que maximiza el bienestar social es aquel con un peso máximo. La Figura 1 ilustra un mercado de ejemplo con 5 agentes, {v1, v2, . . . , v5}, en el que todos los bordes tienen peso 1. El mercado tiene 4 ciclos, c1 = v1, v2, c2 = v2, v3, c3 = v3, v4 y c4 = v1, v2, v3, v4, v5, y dos intercambios maximales (de inclusión), a saber, M1 = {c4} y M2 = {c1, c3}. El intercambio M1 tiene tanto el peso máximo como la cardinalidad máxima (es decir, incluye la mayor cantidad de aristas/vértices). v1 v2 v3 v4 v5 e1 e3 e5 c1 c2 c3 e8 e7 e6e4e2 c4 Figura 1: Mercado de intercambio de trueque de ejemplo. El problema de compensación consiste en encontrar un intercambio de peso máximo que consista en ciclos con una longitud de a lo sumo una pequeña constante L. Esta restricción de longitud de ciclo surge naturalmente por varias razones. Por ejemplo, en un intercambio de riñón, todas las operaciones en un ciclo deben realizarse simultáneamente; de lo contrario, un donante podría retractarse después de que su pareja incompatible haya recibido un riñón. (No se puede redactar un contrato vinculante para donar un órgano). Esto da lugar a una restricción logística en el tamaño del ciclo: incluso si todos los donantes son operados primero y se utiliza el mismo personal e instalaciones para luego operar a los receptores, un ciclo k requiere entre 3k y 6k médicos, alrededor de 4k enfermeras y casi 2k salas de operaciones. Debido a tales limitaciones de recursos, es probable que el próximo mercado nacional de intercambio de riñones solo permita ciclos de longitud 2 y 3. Otra motivación para ciclos cortos es que si el ciclo falla en intercambiarse, menos agentes se ven afectados. Por ejemplo, las pruebas de último minuto en un intercambio de riñones a menudo revelan nuevas incompatibilidades que no fueron detectadas en las pruebas iniciales (en base a las cuales se construyó el grafo de compatibilidad). Más generalmente, un agente puede abandonar un ciclo si sus preferencias han cambiado, o simplemente no cumple con sus obligaciones (como enviar un libro a otro agente en el ciclo) debido a olvidos. En la Sección 3, demostramos que (la versión de decisión del) problema de despeje es NP-completo para L ≥ 3. Una posible estrategia sería buscar un buen heurístico o algoritmo de aproximación. Sin embargo, por dos razones, buscamos un algoritmo exacto basado en un programa lineal entero (PLE), que resolvemos utilizando una búsqueda especializada en árboles. • Primero, cualquier pérdida de optimalidad podría llevar a muertes de pacientes innecesarias. • Segundo, una característica atractiva de utilizar una formulación de PLE es que permite modelar fácilmente una serie de variaciones en el objetivo y agregar restricciones adicionales al problema. Por ejemplo, si se cree que los ciclos de 3 elementos tienen más probabilidades de fallar que los ciclos de 2 elementos, entonces simplemente se les puede asignar un peso que sea apropiadamente menor que 3/2 del peso de un ciclo de 2 elementos. O, si por diversas razones (por ejemplo, éticas) se requiere un intercambio de cardinalidad máxima, al menos se puede encontrar en una segunda pasada la solución (de entre todas las soluciones de cardinalidad máxima) que tenga el menor número de 3-ciclos. Otras variaciones que se pueden resolver incluyen encontrar diversas formas de colecciones de ciclos tolerantes a fallos (no disjuntas) en caso de que ciertos pares que se creían compatibles resulten ser incompatibles después de todo. En este documento, presentamos el primer algoritmo capaz de liquidar estos mercados a nivel nacional. Las codificaciones de ILP directas son demasiado grandes para siquiera construirse en el hardware actual, sin mencionar resolverlas. La clave entonces es la formulación incremental del problema. Adaptamos dos paradigmas para la tarea: generación de restricciones y generación de columnas. Para cada uno, desarrollamos una serie de técnicas (principalmente específicas del problema) que mejoran drásticamente tanto el tiempo de ejecución como el uso de memoria. 1.1 Trabajos Previos Varios artículos recientes han utilizado simulaciones y algoritmos de compensación de mercado para explorar el impacto de un intercambio nacional de riñones [13, 20, 6, 14, 15, 17]. Por ejemplo, utilizando el algoritmo de coincidencia máxima de Edmonds [4], [20] se muestra que un mercado nacional de intercambio por pares (utilizando solo ciclos de longitud 2) resultaría en más trasplantes, tiempos de espera reducidos y ahorros de $750 millones en costos de atención médica durante 5 años. Esos resultados son conservadores de dos maneras. En primer lugar, el mercado simulado contenía solo 4,000 pacientes iniciales, con 250 pacientes añadidos cada 3 meses. Se nos ha informado que el mercado podría ser casi el doble de este tamaño. En segundo lugar, los intercambios se restringieron a ciclos de longitud 2 (porque eso es todo lo que se puede modelar como coincidencia máxima y resolver utilizando el algoritmo de Edmonds). Permitir ciclos de longitud 3 conlleva a ganancias adicionales significativas. Esto se ha demostrado en mercados de intercambio de riñones con 100 pacientes utilizando CPLEX para resolver una codificación de programa entero del problema de compensación [15]. En este documento, presentamos un algoritmo alternativo para este programa entero que puede despejar mercados con más de 10,000 pacientes (y el mismo número de donantes dispuestos). Permitir ciclos de longitud mayor a 3 a menudo no conduce a ninguna mejora en el tamaño del intercambio [15]. (Además, en un modelo teórico simplificado, cualquier intercambio de riñón se puede convertir en uno con ciclos de longitud de a lo sumo 4 [15].) Si bien esto no se aplica a intercambios de trueque generales, ni siquiera a todos los mercados de intercambio de riñones, en la Sección 5.2.3 hacemos uso de la observación de que los ciclos cortos son suficientes para aumentar drásticamente la velocidad de nuestro algoritmo. A un nivel alto, el problema de compensación para intercambios de trueque es similar al problema de compensación (también conocido como problema de determinación de ganadores) en subastas combinatorias. En ambos contextos, la idea es recopilar toda la información pertinente sobre los agentes en un punto central de compensación y ejecutar un algoritmo centralizado de compensación para determinar la asignación. Ambos problemas son NP-duros. Ambos se resuelven mejor utilizando técnicas de búsqueda en árboles. Desde 1999, se ha realizado un trabajo significativo en informática y investigación de operaciones sobre algoritmos de búsqueda de árboles óptimos más rápidos para despejar subastas combinatorias. (Para una revisión reciente, consulte [18].) Sin embargo, el problema de compensación del intercambio de riñones (con un límite de 3 o más en el tamaño del ciclo) es diferente del problema de compensación de la subasta combinatoria de formas significativas. La diferencia más importante es que las formulaciones naturales del problema de subasta combinatoria tienden a ajustarse fácilmente en la memoria, por lo que el tiempo es el cuello de botella en la práctica. Por el contrario, las formulaciones naturales del problema de intercambio de riñones (con L = 3) ocupan al menos espacio cúbico en el número de pacientes para incluso modelar, y por lo tanto la memoria se convierte en un cuello de botella mucho antes que el tiempo al utilizar la búsqueda de árbol estándar, como branch-and-cut en CPLEX, para abordar el problema. (En una computadora de 1GB y un generador de instancias estándar realista, discutido más adelante, CPLEX 10.010 se queda sin memoria en cinco de las diez instancias de 900 pacientes y en las diez de las diez instancias de 1,000 pacientes que generamos). Por lo tanto, los enfoques que se han desarrollado para subastas combinatorias no pueden manejar el problema del intercambio de riñones. 1.2 Esquema del documento El resto del documento está organizado de la siguiente manera. La sección 2 discute el proceso mediante el cual generamos datos realistas del mercado de intercambio de riñones, con el fin de comparar los algoritmos de compensación. La sección 3 contiene una demostración de que el problema de decisión de compensación del mercado es NP-completo. Las secciones 4 y 5 contienen cada una una formulación ILP del problema de compensación. También detallamos en esas secciones nuestras técnicas utilizadas para resolver esos programas en instancias grandes. La sección 6 presenta experimentos sobre las diversas técnicas. La sección 7 discute la implementación reciente de nuestro algoritmo. Finalmente, presentamos nuestras conclusiones en la Sección 8 y sugerimos direcciones para investigaciones futuras. CARACTERÍSTICAS DEL MERCADO Y GENERADOR DE INSTANCIAS Probamos los algoritmos en mercados simulados de intercambio de riñones, los cuales son generados por un proceso descrito en Saidman et al. [17]. Este proceso se basa en los extensos datos a nivel nacional mantenidos por la Red Unida para el Comparto de Órganos (UNOS), por lo que genera una distribución realista de instancias. Varios artículos han utilizado variaciones de este proceso para demostrar la efectividad de un intercambio nacional de riñones (extrapolando de pequeñas instancias o restringiendo la compensación a ciclos de 2) [6, 20, 14, 13, 15, 17]. En resumen, el proceso implica generar pacientes con un tipo de sangre, sexo y probabilidad de ser incompatible en el tipo de tejido con un donante elegido al azar. Estas probabilidades se basan en datos reales de la población del mundo real. A cada paciente se le asigna un posible donante con un tipo de sangre aleatorio y una relación con el paciente. Si el paciente y el posible donante son incompatibles, ambos son ingresados en el mercado. La información del tipo de sangre y del tipo de tejido se utiliza luego para decidir qué pacientes y donantes son compatibles. Una complicación, manejada por el generador, es que si la paciente es mujer y ha tenido un hijo con su potencial donante, entonces la probabilidad de que los dos sean incompatibles aumenta. (Esto se debe a que la madre desarrolla anticuerpos contra su pareja durante el embarazo). Finalmente, aunque nuestros algoritmos pueden manejar funciones de peso más generales, los pacientes tienen una utilidad de 1 para donantes compatibles, ya que su probabilidad de supervivencia no se ve afectada por la elección del donante [3]. Esto significa que el intercambio de peso máximo tiene la máxima cardinalidad. La Tabla 1 proporciona límites inferiores y superiores sobre el tamaño de un intercambio de máxima cardinalidad en el mercado de intercambio de riñones. Los límites inferiores se encontraron al despejar el mercado solo con ciclos de longitud 2, mientras que los límites superiores no tenían restricción en la longitud del ciclo. Para cada tamaño de mercado, los límites fueron calculados sobre 10 mercados generados aleatoriamente. Ten en cuenta que puede haber una gran cantidad de variabilidad en los mercados: en un mercado de 5000 pacientes, menos de 1000 pacientes estaban en el intercambio de cardinalidad máxima. Tamaño máximo de intercambio Longitud-2 ciclos solamente Ciclos arbitrarios Pacientes Media Máximo Media Máximo 100 4.00e+1 4.60e+1 5.30e+1 6.10e+1 500 2.58e+2 2.80e+2 2.79e+2 2.97e+2 1000 5.35e+2 6.22e+2 5.61e+2 6.30e+2 2000 1.05e+3 1.13e+3 1.09e+3 1.16e+3 3000 1.63e+3 1.70e+3 1.68e+3 1.73e+3 4000 2.15e+3 2.22e+3 2.20e+3 2.27e+3 5000 2.53e+3 2.87e+3 2.59e+3 2.92e+3 6000 3.26e+3 3.32e+3 3.35e+3 3.39e+3 7000 3.80e+3 3.86e+3 3.89e+3 3.97e+3 8000 4.35e+3 4.45e+3 4.46e+3 4.55e+3 9000 4.90e+3 4.96e+3 5.01e+3 5.07e+3 10000 5.47e+3 5.61e+3 5.59e+3 5.73e+3 Tabla 1: Límites superiores e inferiores en el tamaño del intercambio. La Tabla 2 proporciona características adicionales del mercado de intercambio de riñones. Ten en cuenta que un mercado con 5000 pacientes puede tener más de 450 millones de ciclos de longitud 2 y 3. Longitud de los bordes 2 y 3 ciclos Pacientes Media Máx. Media Máx. 100 2.38e+3 2.79e+3 2.76e+3 5.90e+3 500 6.19e+4 6.68e+4 3.96e+5 5.27e+5 1000 2.44e+5 2.68e+5 3.31e+6 4.57e+6 2000 9.60e+5 1.02e+6 2.50e+7 3.26e+7 3000 2.19e+6 2.28e+6 8.70e+7 9.64e+7 4000 3.86e+6 3.97e+6 1.94e+8 2.14e+8 5000 5.67e+6 6.33e+6 3.60e+8 4.59e+8 6000 8.80e+6 8.95e+6 7000 1.19e+7 1.21e+7 8000 1.56e+7 1.59e+7 9000 1.98e+7 2.02e+7 10000 2.44e+7 2.51e+7 Tabla 2: Características del mercado. 297 COMPLEJIDAD DEL PROBLEMA En esta sección, demostramos que (la versión de decisión del) problema de compensación de mercado con ciclos cortos es NP-completo. Teorema 1. Dado un grafo G = (V, E) y un entero L ≥ 3, el problema de decidir si G admite una cubierta de ciclos perfecta que contenga ciclos de longitud como máximo L es NP-completo. Prueba. Es claro que este problema está en NP. Para la NP-dificultad, reducimos desde 3D-Matching, que es el problema de, dado conjuntos disjuntos X, Y y Z de tamaño q, y un conjunto de triples T ⊆ X × Y × Z, decidir si existe un subconjunto disjunto M de T con tamaño q. Una idea directa es construir un grafo tripartito con conjuntos de vértices X ∪ Y ∪ Z y aristas dirigidas (xa, yb), (yb, zc) y (zc, xa) para cada triple ti = {xa, yb, zc} ∈ T. Sin embargo, no es demasiado difícil ver que esta codificación falla porque una cobertura de ciclo perfecta puede incluir un ciclo sin un triple correspondiente. En cambio, utilizamos la siguiente reducción. Dado una instancia de 3D-Matching, construye un vértice para cada elemento en X, Y y Z. Para cada tripleta, ti = {xa, yb, zc}, construya el dispositivo en la Figura 2, que es similar a uno en Garey y Johnson [5, pp 68-69]. Ten en cuenta que los dispositivos se intersecan solo en los vértices de X ∪ Y ∪ Z. Es claro que esta construcción puede realizarse en tiempo polinómico. 1 ... 2 3 y_b ... 2 3 z_c y_b^i z_c^i L−1 L−1 L−1 x_a^i x_a ... 2 31 1 Figura 2: Dispositivo de NP-completitud para la tripleta ti y la longitud máxima del ciclo L. Sea M un emparejamiento 3D perfecto. Mostraremos que la construcción admite una cobertura perfecta de ciclos mediante ciclos cortos. Si ti = {xa, yb, zc} ∈ M, añade desde el gadget de ti los tres ciclos de longitud L que contienen a xa, yb y zc respectivamente. También añade el ciclo ª xi a, yi b, zi c «. De lo contrario, si ti ∉ M, añade los tres ciclos de longitud L que contienen xi a, yi b y zi c respectivamente. Es claro que todos los vértices están cubiertos, ya que M particiona X × Y × Z. Por el contrario, supongamos que tenemos una cobertura perfecta mediante ciclos cortos. Ten en cuenta que la construcción solo tiene ciclos cortos de longitudes 3 y L, y ningún ciclo corto involucra vértices distintos de dos gadgets diferentes. Es fácil ver entonces que en una cubierta perfecta, cada gadget ti contribuye ciclos de acuerdo a los casos anteriores: ti ∈ M, o ti /∈ M. Por lo tanto, existe un Emparejamiento 3D perfecto en la instancia original. 4. ENFOQUES DE SOLUCIÓN BASADOS EN UNA FORMULACIÓN DE ARISTAS En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada arista. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos sin restricciones de longitud de ciclo. Dado un mercado G = (V, E), construya un grafo bipartito con un vértice para cada agente y un vértice para cada artículo. Agregar un borde ev con peso 0 entre cada agente v y su propio artículo. En este punto, la codificación es una coincidencia perfecta. Ahora, para cada arista e = (vi, vj) en el mercado original, añade una arista e con peso we entre el agente vi y el artículo de vj. Los emparejamientos perfectos en esta codificación corresponden exactamente con las cubiertas de ciclos, ya que cada vez que se toma un artículo de un agente, debe recibir el artículo de otro agente. Se deduce que el problema de despeje sin restricciones puede resolverse en tiempo polinómico encontrando un emparejamiento perfecto de peso máximo. La Figura 3 contiene la representación en forma de grafo bipartito del mercado de ejemplo de la Figura 1. Las aristas de peso 0 están codificadas con líneas discontinuas, mientras que las aristas de mercado están en negrita. Elementos Agentes v1 v2 v3 v4 v5 e1 e3 e8 e2 v1 v2 v3 v4 v5 e7e6 e5 e4 Figura 3: Codificación de emparejamiento perfecto del mercado en la Figura 1. Alternativamente, podemos resolver el problema codificándolo como un ILP con una variable para cada arista en el grafo de mercado original G. Este ILP, que se muestra a continuación, tiene la ventaja de que puede ser extendido de manera natural para tratar con restricciones de longitud de ciclo. Por lo tanto, para el resto de esta sección, este será el enfoque que seguiremos. Se busca un max e∈E tal que para todo vi ∈ V, se cumplan las restricciones de conservación eout=(vi,vj ) eout − ein=(vj ,vi) ein = 0 y la restricción de capacidad eout=(vi,vj ) eout ≤ 1. Si se permite que los ciclos tengan una longitud de como máximo L, es fácil ver que solo necesitamos hacer los siguientes cambios en el ILP. Para cada camino de longitud L (a lo largo del documento, no incluimos ciclos en la definición de camino) p = ep1, ep2, ..., epL, agregar una restricción ep1 + ep2 + ... + epL ≤ L − 1, que excluye al camino p de cualquier solución factible. Desafortunadamente, en un mercado con solo 1000 pacientes, el número de caminos de longitud 3 supera los 400 millones, por lo que ni siquiera podemos construir este ILP sin quedarnos sin memoria. Por lo tanto, utilizamos una búsqueda en árbol con un enfoque de formulación incremental. Específicamente, utilizamos CPLEX, aunque añadimos restricciones como planos de corte durante el proceso de búsqueda en el árbol. Comenzamos con solo un pequeño subconjunto de las restricciones en el ILP. Dado que este ILP es pequeño, CPLEX puede resolver su relajación LP. Luego verificamos si alguna de las restricciones faltantes es violada por la solución fraccional. Si es así, generamos un conjunto de estas restricciones, las añadimos al ILP y repetimos. Incluso una vez que se satisfacen todas las restricciones, puede que no haya una solución entera que coincida con el límite superior fraccional, y aunque la hubiera, el solucionador de PL podría no encontrarla. En estos casos, CPLEX ramifica en una variable (utilizamos la estrategia de ramificación predeterminada de CPLEX) y genera un nuevo nodo de búsqueda correspondiente a cada uno de los hijos. En cada nodo del árbol de búsqueda que se visita, se repite este proceso de resolver el LP y agregar restricciones. Claramente, este enfoque produce una solución óptima una vez que la búsqueda en el árbol finaliza. Todavía necesitamos explicar los detalles del generador de restricciones (es decir, seleccionar qué restricciones comenzar) y la generación de restricciones (es decir, seleccionar qué restricciones violadas incluir). Describimos brevemente estos en las dos subsecciones siguientes, respectivamente. 4.1 Sembrador de Restricciones El principal sembrador de restricciones que desarrollamos prohíbe cualquier camino de longitud L − 1 que no tenga un borde cerrando el ciclo desde su inicio hasta su final. Si bien es costoso computacionalmente encontrar estas restricciones, su adición enfoca la búsqueda lejos de los caminos que no pueden estar en la solución final. También intentamos sembrar el LP con una colección aleatoria de restricciones del ILP. 4.2 Generación de Restricciones Experimentamos con varios generadores de restricciones. En cada caso, dada una solución fraccional, construimos el subgrafo de aristas con valor positivo. Este gráfico es mucho más pequeño que el gráfico original, por lo que podemos realizar los cálculos siguientes de manera eficiente. En nuestro primer generador de restricciones, simplemente buscamos caminos de longitud L con una suma de valores mayor que L − 1. Para cualquier camino de este tipo, restringimos su suma para que sea como máximo L − 1. Ten en cuenta que si hay un ciclo c con longitud |c| > L, podría contener hasta |c| caminos que violan. En nuestro segundo generador de restricciones, solo agregamos una restricción para tales ciclos: la suma de aristas en el ciclo puede ser a lo sumo |c|(L − 1)/L. Este generador hizo que el algoritmo fuera más lento, por lo que optamos por ir en la dirección opuesta en el desarrollo de nuestro generador final. Agrega una restricción por cada camino p que viola, y además, agrega una restricción para cada camino con los mismos vértices interiores (sin contar los extremos) que p. Esto mejoró la velocidad general. 4.3 Rendimiento experimental Resultó que incluso con estas mejoras, el enfoque de formulación de aristas no puede despejar un intercambio de riñón con 100 vértices en el tiempo en que la formulación de ciclos (descrita más adelante en la Sección 5) puede despejar uno con 10,000 vértices. En otras palabras, los enfoques basados en generación de columnas resultaron ser drásticamente mejores que los enfoques basados en generación de restricciones. Por lo tanto, en el resto del documento nos enfocaremos en la formulación del ciclo y en los enfoques basados en la generación de columnas. 5. Enfoques de solución basados en una formulación cíclica. En esta sección, consideramos una formulación del problema de compensación como un ILP con una variable para cada ciclo. Esta codificación se basa en el siguiente algoritmo clásico para resolver el problema de la cubierta de ciclos dirigidos cuando los ciclos tienen longitud 2. Dado un mercado G = (V, E), construya un nuevo grafo en V con un peso wc en cada arista de ciclo c de longitud 2. Es fácil ver que los emparejamientos en este nuevo grafo corresponden a coberturas de ciclos por ciclos de longitud 2 en el grafo original del mercado. Por lo tanto, el problema de equilibrio de mercado con L = 2 se puede resolver en tiempo polinómico encontrando un emparejamiento de peso máximo. Figura 4: Codificación del emparejamiento de peso máximo del mercado en la Figura 1. Podemos generalizar este codificado para L arbitrario. Sea C(L) el conjunto de todos los ciclos de G con longitud a lo sumo L. Entonces el siguiente ILP encuentra la cobertura de ciclos de máximo peso por ciclos de C(L): max c∈C(L) wcc sujeto a c:vi∈c c ≤ 1 ∀vi ∈ V con c ∈ {0, 1} ∀c ∈ C(L) 5.1 Formulación de Arista vs Ciclo En esta sección, consideramos los méritos de la formulación de arista y la formulación de ciclo. La formulación del problema del borde se puede resolver en tiempo polinómico cuando no hay restricciones en el tamaño del ciclo. La formulación del ciclo se puede resolver en tiempo polinómico cuando el tamaño del ciclo es a lo sumo 2. Ahora consideramos el caso de ciclos cortos de longitud como máximo L, donde L ≥ 3. Nuestros algoritmos de búsqueda de árboles utilizan la relajación LP de estas formulaciones para proporcionar cotas superiores de la solución óptima. Estos límites ayudan a podar subárboles y guiar la búsqueda de las formas habituales. Teorema 2. La relajación LP de la formulación del ciclo domina débilmente la relajación LP de la formulación del borde. Prueba. Considera una solución óptima para la relajación LP de la formulación del ciclo. Mostramos cómo construir una solución equivalente en la formulación de bordes. Para cada arista en el grafo, establezca su valor como la suma de los valores de todos los ciclos de los cuales es miembro. También, define el valor de un vértice de la misma manera. Debido a las restricciones del ciclo, las restricciones de conservación y capacidad de la codificación de los bordes se cumplen claramente. Queda por demostrar que ninguna de las restricciones de ruta se viola. Sea p cualquier camino de longitud L en el grafo. Dado que p tiene L−1 vértices interiores (sin contar los extremos), la suma de estos vértices interiores es como máximo L−1. Ahora, para cualquier ciclo c de longitud como máximo L, el número de aristas que tiene en p, que denotamos como ec(p), es como máximo el número de vértices interiores que tiene en p, que denotamos como vc(p). Por lo tanto, È e∈p e = È c∈C(L) c∗ec(p) ≤ È c∈C(L) c∗vc(p) = È v∈p v = L−1. 299 La afirmación contraria de este teorema no es verdadera. Considera un grafo que es simplemente un ciclo con n aristas. Claramente, la relajación LP de la formulación del ciclo tiene un valor óptimo de 0, ya que no hay ciclos de tamaño menor o igual a L. Sin embargo, la formulación de aristas tiene una solución de tamaño n/2, con cada arista teniendo un valor de 1/2. Por lo tanto, la formulación del ciclo es más ajustada que la formulación del borde. Además, para un grafo con m aristas, la formulación de aristas requiere O(m3) restricciones, mientras que la formulación de ciclos solo requiere O(m2). 5.2 Generación de columnas para la tabla de PL. La Tabla 2 muestra cómo el número de ciclos de longitud a lo sumo 3 crece con el tamaño del mercado. Con una variable por ciclo en la formulación del ciclo, CPLEX ni siquiera puede liquidar mercados con 1,000 pacientes sin quedarse sin memoria (ver Figura 6). Para abordar este problema, utilizamos un enfoque de formulación incremental. El primer paso en la búsqueda de árbol guiada por LP es resolver la relajación LP. Dado que la formulación del ciclo no cabe en la memoria, esta etapa de LP fallaría inmediatamente sin un enfoque de formulación incremental. Sin embargo, motivados por la observación de que una solución de intercambio puede incluir solo una pequeña fracción de los ciclos, exploramos el enfoque de utilizar la generación de columnas (es decir, ciclos). La idea de la generación de columnas es comenzar con un LP restringido que contenga solo un pequeño número de columnas (variables, es decir, ciclos), y luego agregar columnas repetidamente hasta que una solución óptima para este LP parcialmente formulado sea una solución óptima para el LP original (también conocido como maestro). Explicamos esto más a fondo mediante un ejemplo. Considera el mercado en la Figura 1 con L = 2. La Figura 5 muestra el LP maestro correspondiente, P, y su dual, D. El primal P maximiza 2c1 + 2c2 + 2c3 sujeto a c1 ≤ 1 (v1), c1 + c2 ≤ 1 (v2), c2 + c3 ≤ 1 (v3), c3 ≤ 1 (v4) con c1, c2, c3 ≥ 0. El dual D minimiza v1 + v2 + v3 + v4 sujeto a v1 + v2 ≥ 2 (c1), v2 + v3 ≥ 2 (c2), v3 + v4 ≥ 2 (c3) con v1, v2, v3, v4 ≥ 0. Figura 5: Formulación del ciclo. Sea P la restricción de P que contiene solo las columnas c1 y c3. Sea D el dual de P, es decir, D es simplemente D sin la restricción c2. Dado que P y D son pequeños, podemos resolverlos para obtener OPT(P) = OPT(D) = 4, con cOPT(P) = c1 = c3 = 1 y vOPT(D) = v1 = v2 = v3 = v4 = 1. Si cOP T (P ) debe ser una solución factible de P, resulta (afortunadamente) que vOP T (D ) es factible para D, de modo que OPT(D ) ≥ OPT(D). Podemos verificar esto comprobando que vOP T (D) cumple con las restricciones de D que aún no están en Di, es decir, la restricción c2. Se deduce que OPT(P) = OPT(D) ≥ OPT(D) = OPT(P), por lo que vOPT(P) es demostrablemente una solución óptima para P, a pesar de que P contiene solo un subconjunto estricto de las columnas de P. Por supuesto, puede resultar (desafortunadamente) que vOPT(D) no sea factible para D. Esto puede ocurrir como se muestra arriba si vOPT(D) = v1 = 2, v2 = 0, v3 = 0, v4 = 2. Aunque todavía podemos ver que OPT(D) = OPT(D), en general no podemos demostrarlo porque D y P son demasiado grandes para resolver. En cambio, dado que se viola la restricción c2, agregamos la columna c2 a P, actualizamos D y repetimos. El problema de encontrar una restricción violada se llama problema de fijación de precios. Aquí, el precio de una columna (ciclo en nuestra configuración) es la diferencia entre su peso y la suma de los valores duales de los vértices del ciclo. Si alguna columna de P tiene un precio positivo, su restricción correspondiente está violada y aún no hemos demostrado la optimalidad. En este caso, debemos seguir generando columnas para agregar a P. Problema de fijación de precios 5.2.1 Para instancias más pequeñas, podemos mantener una colección explícita de todos los ciclos factibles. Esto hace que el problema de fijación de precios sea fácil y eficiente de resolver: simplemente recorremos la colección de ciclos y buscamos ciclos con precio positivo. Incluso podemos encontrar ciclos con el precio más positivo, que son los más propensos a mejorar el valor objetivo de LP restringido [1]. Sin embargo, este enfoque no es escalable. Un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos de longitud de máximo 3 (ver Tabla 2). Esto es demasiados ciclos para mantener en la memoria. Por lo tanto, para instancias más grandes, debemos generar ciclos factibles mientras buscamos uno con un precio positivo. Realizamos esto utilizando un algoritmo de búsqueda en profundidad en el grafo del mercado (ver Figura 1). Para hacer esta búsqueda más rápida, exploramos los vértices en orden de valores no decrecientes, ya que es más probable que estos vértices pertenezcan a ciclos con peso positivo. También utilizamos varias reglas de poda para determinar si la ruta de búsqueda actual puede llevar a un ciclo de peso positivo. Por ejemplo, en un vértice dado en la búsqueda, podemos podar basándonos en el hecho de que cada vértice que visitemos a partir de este punto tendrá un valor al menos tan grande como el vértice actual. Incluso con estas reglas de poda, la generación de columnas es un cuello de botella. Por lo tanto, también implementamos las siguientes optimizaciones. Cuando la búsqueda exhaustiva demuestra que un vértice no pertenece a ningún ciclo de precios positivos, marcamos el vértice y no lo utilizamos como raíz de una búsqueda en profundidad hasta que su valor dual disminuya. De esta manera, evitamos repetir innecesariamente nuestros esfuerzos computacionales de una iteración previa de generación de columnas. Finalmente, a veces puede ser beneficioso para la generación de columnas incluir varias columnas de precio positivo en una iteración, ya que puede ser más rápido generar una segunda columna una vez que se encuentra la primera. Sin embargo, evitamos esto por la siguiente razón. Si intentamos encontrar más columnas de precio positivo de las que se pueden encontrar, o si las columnas están muy separadas en el espacio de búsqueda, terminamos teniendo que generar y verificar una gran parte de la colección de ciclos factibles. En nuestros experimentos, hemos observado que esto ocurre en mercados con cientos de millones de ciclos, lo que resulta en costos de computación prohibitivamente caros. 5.2.2 Sembrado de Columnas Incluso si hay solo una pequeña brecha con la relajación principal del LP, la generación de columnas requiere muchas iteraciones para mejorar el valor objetivo del LP restringido. Cada una de estas 300 iteraciones es costosa, ya que debemos resolver el problema de fijación de precios y volver a resolver el LP restringido. Por lo tanto, aunque podríamos empezar sin columnas en el LP restringido, es mucho más rápido sembrar el LP con suficientes columnas para que el valor objetivo óptimo no esté muy lejos del LP principal. Por supuesto, no podemos incluir tantas columnas que nos quedemos sin memoria. Experimentamos con varios sembradores de columnas. En una clase de sembrador, utilizamos una heurística para encontrar un intercambio, y luego agregamos los ciclos de ese intercambio al LP restringido inicial. Implementamos dos heurísticas. El primero es un algoritmo voraz: para cada vértice en un orden aleatorio, si está sin cubrir, intentamos incluir un ciclo que lo contenga a él y a otros vértices sin cubrir. El otro heurístico utiliza un código especializado de emparejamiento de peso máximo [16] para encontrar una cobertura óptima mediante ciclos de longitud 2. Estas heurísticas funcionan extremadamente bien, especialmente teniendo en cuenta el hecho de que solo agregan un pequeño número de columnas. Por ejemplo, la Tabla 1 muestra que una cobertura óptima por ciclos de longitud 2 tiene casi el mismo peso que el intercambio con tamaño de ciclo no restringido. Sin embargo, tenemos suficiente memoria para incluir cientos de miles de columnas adicionales y así acercarnos aún más al límite superior. Nuestro mejor sembrador de columnas construye una colección aleatoria de ciclos factibles. Dado que un mercado con 5000 pacientes puede tener hasta 400 millones de ciclos factibles, lleva demasiado tiempo generar y recorrer todos los ciclos factibles, por lo que no incluimos una colección aleatoria uniforme. En cambio, realizamos un recorrido aleatorio en el grafo del mercado (ver, por ejemplo, Figura 1), en el cual, después de cada paso del recorrido, probamos si hay un borde de regreso a nuestro camino que forme un ciclo factible. Si encontramos un ciclo, este se incluye en el LP restringido y comenzamos una nueva caminata desde un vértice aleatorio. En nuestros experimentos (ver Sección 6), utilizamos este algoritmo para sembrar el LP con 400,000 ciclos. Este último enfoque supera a los sembradores heurísticos descritos anteriormente. Sin embargo, en nuestro algoritmo, utilizamos una combinación que toma la unión de todas las columnas de los tres sembradores. En la Figura 6, comparamos el rendimiento del sembrador combinado con el sembrador combinado sin el sembrador de recolección aleatoria. No trazamos el rendimiento del algoritmo sin ningún sembrador en absoluto, porque puede llevar horas despejar mercados que de otra manera podríamos despejar en unos pocos minutos. 5.2.3 Demostrando la optimalidad. Recordemos que nuestro objetivo es encontrar una solución óptima para la relajación principal del LP. Usando la generación de columnas, podemos demostrar que una solución primal restringida es óptima una vez que todas las columnas tienen precios no positivos. Desafortunadamente, nuestro problema de compensación tiene el llamado efecto de disminución gradual [1, Sección 6.3], en el cual, aunque el primal restringido es óptimo a posteriori, se requiere un gran número de iteraciones adicionales para demostrar la optimalidad (es decir, eliminar todas las columnas de precio positivo). No hay una buena solución general para el efecto de disminución. Sin embargo, para mitigar este efecto, aprovechamos la siguiente observación específica del problema. Recuerde de la Sección 1.1 que, casi siempre, un intercambio de peso máximo con ciclos de longitud a lo sumo 3 tiene el mismo peso que un intercambio de peso máximo sin restricciones. (Sin embargo, esto no significa que el solucionador para el caso sin restricciones encontrará una solución con ciclos cortos). Además, el problema de despeje no restringido se puede resolver en tiempo polinómico (ver Sección 4). Por lo tanto, podemos calcular eficientemente un límite superior en la relajación principal del LP, y, cada vez que el primal restringido alcanza este límite superior, ¡hemos demostrado la optimalidad sin necesidad de eliminar todas las columnas de precio positivo! Para que esto mejore el tiempo de ejecución del algoritmo en general, necesitamos poder despejar el mercado sin restricciones en menos tiempo del que le lleva a la generación de columnas eliminar todos los ciclos de precios positivos. Aunque el primer problema es soluble en tiempo polinómico, esto no es trivial para instancias grandes. Por ejemplo, para un mercado con 10,000 pacientes y 25 millones de conexiones, el código especializado de emparejamiento de peso máximo [16] era demasiado lento, y CPLEX se quedó sin memoria en la codificación de formulación de bordes de la Sección 4. Para hacer funcionar esta idea, utilizamos generación de columnas para resolver la formulación de bordes. Esto implica comenzar con un pequeño subconjunto aleatorio de los bordes, y luego agregar bordes con precio positivo uno por uno hasta que no quede ninguno. Realizamos esta generación de columnas secundarias no en el grafo de mercado original G, sino en el grafo bipartito de emparejamiento perfecto de la Figura 3. Hacemos esto para que solo necesitemos resolver el LP, no el ILP, ya que la brecha de integralidad en el grafo bipartito de emparejamiento perfecto es 1, es decir, siempre existe una solución integral que alcanza el límite superior fraccional. El aumento de velocidad resultante en el algoritmo general es dramático, como se puede ver en la Figura 6. 5.2.4 Gestión de Columnas Si el valor óptimo del LP restringido inicial P está lejos del LP maestro P, entonces se generan un gran número de columnas antes de que se cierre la brecha. Esto conduce a problemas de memoria en mercados con tan solo 4,000 pacientes. Además, incluso antes de que la memoria se convierta en un problema, las iteraciones de generación de columnas se vuelven lentas debido a la sobrecarga adicional de resolver un LP más grande. Para abordar estos problemas, implementamos un esquema de gestión de columnas para limitar el tamaño del LP restringido. Siempre que agregamos columnas al LP, verificamos si contiene más de un número umbral de columnas. Si este es el caso, eliminamos selectivamente columnas hasta que esté nuevamente por debajo del umbral2. Como discutimos anteriormente, solo una pequeña fracción de todos los ciclos terminará en la solución final. Es poco probable que eliminemos dicho ciclo, y aun si lo hacemos, siempre se puede generar de nuevo. Por supuesto, no debemos ser demasiado agresivos con el umbral, ya que hacerlo podría contrarrestar las ganancias de rendimiento por iteración al aumentar significativamente el número de iteraciones necesarias para obtener un conjunto de columnas adecuado en el LP al mismo tiempo. Hay algunas columnas que nunca eliminamos, por ejemplo aquellas en las que hemos realizado ramificaciones (ver Sección 5.3.2), o aquellas con un valor de LP distinto de cero. Entre el resto, eliminamos aquellos con el precio más bajo, ya que corresponden a las restricciones duales que están más satisfechas. Este esquema de gestión de columnas funciona bien y nos ha permitido despejar mercados con 10,000 pacientes, como se ve en la Figura 6. 5.3 Búsqueda de Ramificación y Precio para el ILP Dado un problema grande de despeje de mercado, podemos resolver con éxito su relajación LP hasta la optimalidad utilizando las mejoras de generación de columnas descritas anteriormente. Sin embargo, las soluciones que encontramos suelen ser fraccionarias. Por lo tanto, en el paso 2 siguiente, basándonos en el tamaño de la memoria, establecemos el umbral en 400,000. El paso 301 implica realizar una <br>búsqueda de árbol de ramificación y precio</br> [1] para encontrar una solución integral óptima. Breve, esta es la idea de <br>ramificar y fijar precios</br>. Siempre que establecemos una variable fraccional en 0 o 1 (rama), tanto el LP maestro como la restricción con la que estamos trabajando se modifican (se restringen). Por defecto, entonces, necesitamos realizar la generación de columnas (es decir, el esfuerzo de fijar precios) en cada nodo del árbol de búsqueda para demostrar que la restricción restringida es óptima para el LP maestro restringido. (Sin embargo, como se discute en la Sección 5.2.3, calculamos el límite superior integral para el nodo raíz basado en relajar completamente la restricción de longitud del ciclo, y cada vez que algún LP de los nodos en el árbol alcance ese valor, no necesitamos seguir fijando precios de columnas en ese nodo). Para el problema de despeje con ciclos de longitud a lo sumo 3, hemos encontrado que rara vez hay una brecha entre las soluciones integrales y fraccionarias óptimas. Esto significa que podemos evitar en gran medida el costoso paso de fijar precios por nodo: cuando el LP restringido restringido tiene el mismo valor óptimo que su padre en la búsqueda del árbol, podemos demostrar la optimalidad del LP, como se muestra en la Sección 5.2.3, sin tener que incluir columnas adicionales en el LP restringido. Aunque CPLEX puede resolver ILPs, no admite la técnica de <br>branch-and-price</br> (por ejemplo, debido a posibles complicaciones específicas del problema que involucran la interacción entre la regla de ramificación y el problema de fijación de precios). Por lo tanto, implementamos nuestro propio <br>algoritmo de ramificación y precio</br>, el cual explora el árbol de búsqueda en orden de profundidad primero. ",
            "candidates": [],
            "error": [
                [
                    "búsqueda de árbol de ramificación y precio",
                    "ramificar y fijar precios",
                    "branch-and-price",
                    "algoritmo de ramificación y precio"
                ]
            ]
        }
    }
}